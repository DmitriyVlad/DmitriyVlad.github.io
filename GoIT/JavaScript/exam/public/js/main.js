!function(t,e){"object"==typeof module&&"object"==typeof module.exports?module.exports=t.document?e(t,!0):function(t){if(!t.document)throw new Error("jQuery requires a window with a document");return e(t)}:e(t)}("undefined"!=typeof window?window:this,function(t,e){function n(t){var e=!!t&&"length"in t&&t.length,n=ot.type(t);return"function"===n||ot.isWindow(t)?!1:"array"===n||0===e||"number"==typeof e&&e>0&&e-1 in t}function i(t,e,n){if(ot.isFunction(e))return ot.grep(t,function(t,i){return!!e.call(t,i,t)!==n});if(e.nodeType)return ot.grep(t,function(t){return t===e!==n});if("string"==typeof e){if(mt.test(e))return ot.filter(e,t,n);e=ot.filter(e,t)}return ot.grep(t,function(t){return Z.call(e,t)>-1!==n})}function r(t,e){for(;(t=t[e])&&1!==t.nodeType;);return t}function o(t){var e={};return ot.each(t.match(_t)||[],function(t,n){e[n]=!0}),e}function s(){Q.removeEventListener("DOMContentLoaded",s),t.removeEventListener("load",s),ot.ready()}function a(){this.expando=ot.expando+a.uid++}function u(t,e,n){var i;if(void 0===n&&1===t.nodeType)if(i="data-"+e.replace(Lt,"-$&").toLowerCase(),n=t.getAttribute(i),"string"==typeof n){try{n="true"===n?!0:"false"===n?!1:"null"===n?null:+n+""===n?+n:St.test(n)?ot.parseJSON(n):n}catch(r){}jt.set(t,e,n)}else n=void 0;return n}function l(t,e,n,i){var r,o=1,s=20,a=i?function(){return i.cur()}:function(){return ot.css(t,e,"")},u=a(),l=n&&n[3]||(ot.cssNumber[e]?"":"px"),c=(ot.cssNumber[e]||"px"!==l&&+u)&&Dt.exec(ot.css(t,e));if(c&&c[3]!==l){l=l||c[3],n=n||[],c=+u||1;do o=o||".5",c/=o,ot.style(t,e,c+l);while(o!==(o=a()/u)&&1!==o&&--s)}return n&&(c=+c||+u||0,r=n[1]?c+(n[1]+1)*n[2]:+n[2],i&&(i.unit=l,i.start=c,i.end=r)),r}function c(t,e){var n="undefined"!=typeof t.getElementsByTagName?t.getElementsByTagName(e||"*"):"undefined"!=typeof t.querySelectorAll?t.querySelectorAll(e||"*"):[];return void 0===e||e&&ot.nodeName(t,e)?ot.merge([t],n):n}function h(t,e){for(var n=0,i=t.length;i>n;n++)Et.set(t[n],"globalEval",!e||Et.get(e[n],"globalEval"))}function p(t,e,n,i,r){for(var o,s,a,u,l,p,f=e.createDocumentFragment(),d=[],m=0,y=t.length;y>m;m++)if(o=t[m],o||0===o)if("object"===ot.type(o))ot.merge(d,o.nodeType?[o]:o);else if(Rt.test(o)){for(s=s||f.appendChild(e.createElement("div")),a=(Nt.exec(o)||["",""])[1].toLowerCase(),u=Ot[a]||Ot._default,s.innerHTML=u[1]+ot.htmlPrefilter(o)+u[2],p=u[0];p--;)s=s.lastChild;ot.merge(d,s.childNodes),s=f.firstChild,s.textContent=""}else d.push(e.createTextNode(o));for(f.textContent="",m=0;o=d[m++];)if(i&&ot.inArray(o,i)>-1)r&&r.push(o);else if(l=ot.contains(o.ownerDocument,o),s=c(f.appendChild(o),"script"),l&&h(s),n)for(p=0;o=s[p++];)qt.test(o.type||"")&&n.push(o);return f}function f(){return!0}function d(){return!1}function m(){try{return Q.activeElement}catch(t){}}function y(t,e,n,i,r,o){var s,a;if("object"==typeof e){"string"!=typeof n&&(i=i||n,n=void 0);for(a in e)y(t,a,n,i,e[a],o);return t}if(null==i&&null==r?(r=n,i=n=void 0):null==r&&("string"==typeof n?(r=i,i=void 0):(r=i,i=n,n=void 0)),r===!1)r=d;else if(!r)return t;return 1===o&&(s=r,r=function(t){return ot().off(t),s.apply(this,arguments)},r.guid=s.guid||(s.guid=ot.guid++)),t.each(function(){ot.event.add(this,e,r,i,n)})}function g(t,e){return ot.nodeName(t,"table")&&ot.nodeName(11!==e.nodeType?e:e.firstChild,"tr")?t.getElementsByTagName("tbody")[0]||t.appendChild(t.ownerDocument.createElement("tbody")):t}function v(t){return t.type=(null!==t.getAttribute("type"))+"/"+t.type,t}function x(t){var e=$t.exec(t.type);return e?t.type=e[1]:t.removeAttribute("type"),t}function b(t,e){var n,i,r,o,s,a,u,l;if(1===e.nodeType){if(Et.hasData(t)&&(o=Et.access(t),s=Et.set(e,o),l=o.events)){delete s.handle,s.events={};for(r in l)for(n=0,i=l[r].length;i>n;n++)ot.event.add(e,r,l[r][n])}jt.hasData(t)&&(a=jt.access(t),u=ot.extend({},a),jt.set(e,u))}}function _(t,e){var n=e.nodeName.toLowerCase();"input"===n&&At.test(t.type)?e.checked=t.checked:"input"!==n&&"textarea"!==n||(e.defaultValue=t.defaultValue)}function w(t,e,n,i){e=J.apply([],e);var r,o,s,a,u,l,h=0,f=t.length,d=f-1,m=e[0],y=ot.isFunction(m);if(y||f>1&&"string"==typeof m&&!it.checkClone&&Bt.test(m))return t.each(function(r){var o=t.eq(r);y&&(e[0]=m.call(this,r,o.html())),w(o,e,n,i)});if(f&&(r=p(e,t[0].ownerDocument,!1,t,i),o=r.firstChild,1===r.childNodes.length&&(r=o),o||i)){for(s=ot.map(c(r,"script"),v),a=s.length;f>h;h++)u=r,h!==d&&(u=ot.clone(u,!0,!0),a&&ot.merge(s,c(u,"script"))),n.call(t[h],u,h);if(a)for(l=s[s.length-1].ownerDocument,ot.map(s,x),h=0;a>h;h++)u=s[h],qt.test(u.type||"")&&!Et.access(u,"globalEval")&&ot.contains(l,u)&&(u.src?ot._evalUrl&&ot._evalUrl(u.src):ot.globalEval(u.textContent.replace(Ut,"")))}return t}function T(t,e,n){for(var i,r=e?ot.filter(e,t):t,o=0;null!=(i=r[o]);o++)n||1!==i.nodeType||ot.cleanData(c(i)),i.parentNode&&(n&&ot.contains(i.ownerDocument,i)&&h(c(i,"script")),i.parentNode.removeChild(i));return t}function C(t,e){var n=ot(e.createElement(t)).appendTo(e.body),i=ot.css(n[0],"display");return n.detach(),i}function E(t){var e=Q,n=Vt[t];return n||(n=C(t,e),"none"!==n&&n||(Yt=(Yt||ot("<iframe frameborder='0' width='0' height='0'/>")).appendTo(e.documentElement),e=Yt[0].contentDocument,e.write(),e.close(),n=C(t,e),Yt.detach()),Vt[t]=n),n}function j(t,e,n){var i,r,o,s,a=t.style;return n=n||Gt(t),s=n?n.getPropertyValue(e)||n[e]:void 0,""!==s&&void 0!==s||ot.contains(t.ownerDocument,t)||(s=ot.style(t,e)),n&&!it.pixelMarginRight()&&Qt.test(s)&&Xt.test(e)&&(i=a.width,r=a.minWidth,o=a.maxWidth,a.minWidth=a.maxWidth=a.width=s,s=n.width,a.width=i,a.minWidth=r,a.maxWidth=o),void 0!==s?s+"":s}function S(t,e){return{get:function(){return t()?void delete this.get:(this.get=e).apply(this,arguments)}}}function L(t){if(t in ie)return t;for(var e=t[0].toUpperCase()+t.slice(1),n=ne.length;n--;)if(t=ne[n]+e,t in ie)return t}function I(t,e,n){var i=Dt.exec(e);return i?Math.max(0,i[2]-(n||0))+(i[3]||"px"):e}function D(t,e,n,i,r){for(var o=n===(i?"border":"content")?4:"width"===e?1:0,s=0;4>o;o+=2)"margin"===n&&(s+=ot.css(t,n+kt[o],!0,r)),i?("content"===n&&(s-=ot.css(t,"padding"+kt[o],!0,r)),"margin"!==n&&(s-=ot.css(t,"border"+kt[o]+"Width",!0,r))):(s+=ot.css(t,"padding"+kt[o],!0,r),"padding"!==n&&(s+=ot.css(t,"border"+kt[o]+"Width",!0,r)));return s}function k(e,n,i){var r=!0,o="width"===n?e.offsetWidth:e.offsetHeight,s=Gt(e),a="border-box"===ot.css(e,"boxSizing",!1,s);if(Q.msFullscreenElement&&t.top!==t&&e.getClientRects().length&&(o=Math.round(100*e.getBoundingClientRect()[n])),0>=o||null==o){if(o=j(e,n,s),(0>o||null==o)&&(o=e.style[n]),Qt.test(o))return o;r=a&&(it.boxSizingReliable()||o===e.style[n]),o=parseFloat(o)||0}return o+D(e,n,i||(a?"border":"content"),r,s)+"px"}function z(t,e){for(var n,i,r,o=[],s=0,a=t.length;a>s;s++)i=t[s],i.style&&(o[s]=Et.get(i,"olddisplay"),n=i.style.display,e?(o[s]||"none"!==n||(i.style.display=""),""===i.style.display&&zt(i)&&(o[s]=Et.access(i,"olddisplay",E(i.nodeName)))):(r=zt(i),"none"===n&&r||Et.set(i,"olddisplay",r?n:ot.css(i,"display"))));for(s=0;a>s;s++)i=t[s],i.style&&(e&&"none"!==i.style.display&&""!==i.style.display||(i.style.display=e?o[s]||"":"none"));return t}function A(t,e,n,i,r){return new A.prototype.init(t,e,n,i,r)}function N(){return t.setTimeout(function(){re=void 0}),re=ot.now()}function q(t,e){var n,i=0,r={height:t};for(e=e?1:0;4>i;i+=2-e)n=kt[i],r["margin"+n]=r["padding"+n]=t;return e&&(r.opacity=r.width=t),r}function O(t,e,n){for(var i,r=(P.tweeners[e]||[]).concat(P.tweeners["*"]),o=0,s=r.length;s>o;o++)if(i=r[o].call(n,e,t))return i}function R(t,e,n){var i,r,o,s,a,u,l,c,h=this,p={},f=t.style,d=t.nodeType&&zt(t),m=Et.get(t,"fxshow");n.queue||(a=ot._queueHooks(t,"fx"),null==a.unqueued&&(a.unqueued=0,u=a.empty.fire,a.empty.fire=function(){a.unqueued||u()}),a.unqueued++,h.always(function(){h.always(function(){a.unqueued--,ot.queue(t,"fx").length||a.empty.fire()})})),1===t.nodeType&&("height"in e||"width"in e)&&(n.overflow=[f.overflow,f.overflowX,f.overflowY],l=ot.css(t,"display"),c="none"===l?Et.get(t,"olddisplay")||E(t.nodeName):l,"inline"===c&&"none"===ot.css(t,"float")&&(f.display="inline-block")),n.overflow&&(f.overflow="hidden",h.always(function(){f.overflow=n.overflow[0],f.overflowX=n.overflow[1],f.overflowY=n.overflow[2]}));for(i in e)if(r=e[i],se.exec(r)){if(delete e[i],o=o||"toggle"===r,r===(d?"hide":"show")){if("show"!==r||!m||void 0===m[i])continue;d=!0}p[i]=m&&m[i]||ot.style(t,i)}else l=void 0;if(ot.isEmptyObject(p))"inline"===("none"===l?E(t.nodeName):l)&&(f.display=l);else{m?"hidden"in m&&(d=m.hidden):m=Et.access(t,"fxshow",{}),o&&(m.hidden=!d),d?ot(t).show():h.done(function(){ot(t).hide()}),h.done(function(){var e;Et.remove(t,"fxshow");for(e in p)ot.style(t,e,p[e])});for(i in p)s=O(d?m[i]:0,i,h),i in m||(m[i]=s.start,d&&(s.end=s.start,s.start="width"===i||"height"===i?1:0))}}function H(t,e){var n,i,r,o,s;for(n in t)if(i=ot.camelCase(n),r=e[i],o=t[n],ot.isArray(o)&&(r=o[1],o=t[n]=o[0]),n!==i&&(t[i]=o,delete t[n]),s=ot.cssHooks[i],s&&"expand"in s){o=s.expand(o),delete t[i];for(n in o)n in t||(t[n]=o[n],e[n]=r)}else e[i]=r}function P(t,e,n){var i,r,o=0,s=P.prefilters.length,a=ot.Deferred().always(function(){delete u.elem}),u=function(){if(r)return!1;for(var e=re||N(),n=Math.max(0,l.startTime+l.duration-e),i=n/l.duration||0,o=1-i,s=0,u=l.tweens.length;u>s;s++)l.tweens[s].run(o);return a.notifyWith(t,[l,o,n]),1>o&&u?n:(a.resolveWith(t,[l]),!1)},l=a.promise({elem:t,props:ot.extend({},e),opts:ot.extend(!0,{specialEasing:{},easing:ot.easing._default},n),originalProperties:e,originalOptions:n,startTime:re||N(),duration:n.duration,tweens:[],createTween:function(e,n){var i=ot.Tween(t,l.opts,e,n,l.opts.specialEasing[e]||l.opts.easing);return l.tweens.push(i),i},stop:function(e){var n=0,i=e?l.tweens.length:0;if(r)return this;for(r=!0;i>n;n++)l.tweens[n].run(1);return e?(a.notifyWith(t,[l,1,0]),a.resolveWith(t,[l,e])):a.rejectWith(t,[l,e]),this}}),c=l.props;for(H(c,l.opts.specialEasing);s>o;o++)if(i=P.prefilters[o].call(l,t,c,l.opts))return ot.isFunction(i.stop)&&(ot._queueHooks(l.elem,l.opts.queue).stop=ot.proxy(i.stop,i)),i;return ot.map(c,O,l),ot.isFunction(l.opts.start)&&l.opts.start.call(t,l),ot.fx.timer(ot.extend(u,{elem:t,anim:l,queue:l.opts.queue})),l.progress(l.opts.progress).done(l.opts.done,l.opts.complete).fail(l.opts.fail).always(l.opts.always)}function F(t){return t.getAttribute&&t.getAttribute("class")||""}function M(t){return function(e,n){"string"!=typeof e&&(n=e,e="*");var i,r=0,o=e.toLowerCase().match(_t)||[];if(ot.isFunction(n))for(;i=o[r++];)"+"===i[0]?(i=i.slice(1)||"*",(t[i]=t[i]||[]).unshift(n)):(t[i]=t[i]||[]).push(n)}}function W(t,e,n,i){function r(a){var u;return o[a]=!0,ot.each(t[a]||[],function(t,a){var l=a(e,n,i);return"string"!=typeof l||s||o[l]?s?!(u=l):void 0:(e.dataTypes.unshift(l),r(l),!1)}),u}var o={},s=t===Ee;return r(e.dataTypes[0])||!o["*"]&&r("*")}function B(t,e){var n,i,r=ot.ajaxSettings.flatOptions||{};for(n in e)void 0!==e[n]&&((r[n]?t:i||(i={}))[n]=e[n]);return i&&ot.extend(!0,t,i),t}function $(t,e,n){for(var i,r,o,s,a=t.contents,u=t.dataTypes;"*"===u[0];)u.shift(),void 0===i&&(i=t.mimeType||e.getResponseHeader("Content-Type"));if(i)for(r in a)if(a[r]&&a[r].test(i)){u.unshift(r);break}if(u[0]in n)o=u[0];else{for(r in n){if(!u[0]||t.converters[r+" "+u[0]]){o=r;break}s||(s=r)}o=o||s}return o?(o!==u[0]&&u.unshift(o),n[o]):void 0}function U(t,e,n,i){var r,o,s,a,u,l={},c=t.dataTypes.slice();if(c[1])for(s in t.converters)l[s.toLowerCase()]=t.converters[s];for(o=c.shift();o;)if(t.responseFields[o]&&(n[t.responseFields[o]]=e),!u&&i&&t.dataFilter&&(e=t.dataFilter(e,t.dataType)),u=o,o=c.shift())if("*"===o)o=u;else if("*"!==u&&u!==o){if(s=l[u+" "+o]||l["* "+o],!s)for(r in l)if(a=r.split(" "),a[1]===o&&(s=l[u+" "+a[0]]||l["* "+a[0]])){s===!0?s=l[r]:l[r]!==!0&&(o=a[0],c.unshift(a[1]));break}if(s!==!0)if(s&&t["throws"])e=s(e);else try{e=s(e)}catch(h){return{state:"parsererror",error:s?h:"No conversion from "+u+" to "+o}}}return{state:"success",data:e}}function Y(t,e,n,i){var r;if(ot.isArray(e))ot.each(e,function(e,r){n||Ie.test(t)?i(t,r):Y(t+"["+("object"==typeof r&&null!=r?e:"")+"]",r,n,i)});else if(n||"object"!==ot.type(e))i(t,e);else for(r in e)Y(t+"["+r+"]",e[r],n,i)}function V(t){return ot.isWindow(t)?t:9===t.nodeType&&t.defaultView}var X=[],Q=t.document,G=X.slice,J=X.concat,K=X.push,Z=X.indexOf,tt={},et=tt.toString,nt=tt.hasOwnProperty,it={},rt="2.2.1",ot=function(t,e){return new ot.fn.init(t,e)},st=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,at=/^-ms-/,ut=/-([\da-z])/gi,lt=function(t,e){return e.toUpperCase()};ot.fn=ot.prototype={jquery:rt,constructor:ot,selector:"",length:0,toArray:function(){return G.call(this)},get:function(t){return null!=t?0>t?this[t+this.length]:this[t]:G.call(this)},pushStack:function(t){var e=ot.merge(this.constructor(),t);return e.prevObject=this,e.context=this.context,e},each:function(t){return ot.each(this,t)},map:function(t){return this.pushStack(ot.map(this,function(e,n){return t.call(e,n,e)}))},slice:function(){return this.pushStack(G.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},eq:function(t){var e=this.length,n=+t+(0>t?e:0);return this.pushStack(n>=0&&e>n?[this[n]]:[])},end:function(){return this.prevObject||this.constructor()},push:K,sort:X.sort,splice:X.splice},ot.extend=ot.fn.extend=function(){var t,e,n,i,r,o,s=arguments[0]||{},a=1,u=arguments.length,l=!1;for("boolean"==typeof s&&(l=s,s=arguments[a]||{},a++),"object"==typeof s||ot.isFunction(s)||(s={}),a===u&&(s=this,a--);u>a;a++)if(null!=(t=arguments[a]))for(e in t)n=s[e],i=t[e],s!==i&&(l&&i&&(ot.isPlainObject(i)||(r=ot.isArray(i)))?(r?(r=!1,o=n&&ot.isArray(n)?n:[]):o=n&&ot.isPlainObject(n)?n:{},s[e]=ot.extend(l,o,i)):void 0!==i&&(s[e]=i));return s},ot.extend({expando:"jQuery"+(rt+Math.random()).replace(/\D/g,""),isReady:!0,error:function(t){throw new Error(t)},noop:function(){},isFunction:function(t){return"function"===ot.type(t)},isArray:Array.isArray,isWindow:function(t){return null!=t&&t===t.window},isNumeric:function(t){var e=t&&t.toString();return!ot.isArray(t)&&e-parseFloat(e)+1>=0},isPlainObject:function(t){return"object"!==ot.type(t)||t.nodeType||ot.isWindow(t)?!1:!t.constructor||nt.call(t.constructor.prototype,"isPrototypeOf")},isEmptyObject:function(t){var e;for(e in t)return!1;return!0},type:function(t){return null==t?t+"":"object"==typeof t||"function"==typeof t?tt[et.call(t)]||"object":typeof t},globalEval:function(t){var e,n=eval;t=ot.trim(t),t&&(1===t.indexOf("use strict")?(e=Q.createElement("script"),e.text=t,Q.head.appendChild(e).parentNode.removeChild(e)):n(t))},camelCase:function(t){return t.replace(at,"ms-").replace(ut,lt)},nodeName:function(t,e){return t.nodeName&&t.nodeName.toLowerCase()===e.toLowerCase()},each:function(t,e){var i,r=0;if(n(t))for(i=t.length;i>r&&e.call(t[r],r,t[r])!==!1;r++);else for(r in t)if(e.call(t[r],r,t[r])===!1)break;return t},trim:function(t){return null==t?"":(t+"").replace(st,"")},makeArray:function(t,e){var i=e||[];return null!=t&&(n(Object(t))?ot.merge(i,"string"==typeof t?[t]:t):K.call(i,t)),i},inArray:function(t,e,n){return null==e?-1:Z.call(e,t,n)},merge:function(t,e){for(var n=+e.length,i=0,r=t.length;n>i;i++)t[r++]=e[i];return t.length=r,t},grep:function(t,e,n){for(var i,r=[],o=0,s=t.length,a=!n;s>o;o++)i=!e(t[o],o),i!==a&&r.push(t[o]);return r},map:function(t,e,i){var r,o,s=0,a=[];if(n(t))for(r=t.length;r>s;s++)o=e(t[s],s,i),null!=o&&a.push(o);else for(s in t)o=e(t[s],s,i),null!=o&&a.push(o);return J.apply([],a)},guid:1,proxy:function(t,e){var n,i,r;return"string"==typeof e&&(n=t[e],e=t,t=n),ot.isFunction(t)?(i=G.call(arguments,2),r=function(){return t.apply(e||this,i.concat(G.call(arguments)))},r.guid=t.guid=t.guid||ot.guid++,r):void 0},now:Date.now,support:it}),"function"==typeof Symbol&&(ot.fn[Symbol.iterator]=X[Symbol.iterator]),ot.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "),function(t,e){tt["[object "+e+"]"]=e.toLowerCase()});var ct=function(t){function e(t,e,n,i){var r,o,s,a,u,l,h,f,d=e&&e.ownerDocument,m=e?e.nodeType:9;if(n=n||[],"string"!=typeof t||!t||1!==m&&9!==m&&11!==m)return n;if(!i&&((e?e.ownerDocument||e:F)!==z&&k(e),e=e||z,N)){if(11!==m&&(l=gt.exec(t)))if(r=l[1]){if(9===m){if(!(s=e.getElementById(r)))return n;if(s.id===r)return n.push(s),n}else if(d&&(s=d.getElementById(r))&&H(e,s)&&s.id===r)return n.push(s),n}else{if(l[2])return K.apply(n,e.getElementsByTagName(t)),n;if((r=l[3])&&_.getElementsByClassName&&e.getElementsByClassName)return K.apply(n,e.getElementsByClassName(r)),n}if(_.qsa&&!U[t+" "]&&(!q||!q.test(t))){if(1!==m)d=e,f=t;else if("object"!==e.nodeName.toLowerCase()){for((a=e.getAttribute("id"))?a=a.replace(xt,"\\$&"):e.setAttribute("id",a=P),h=E(t),o=h.length,u=pt.test(a)?"#"+a:"[id='"+a+"']";o--;)h[o]=u+" "+p(h[o]);f=h.join(","),d=vt.test(t)&&c(e.parentNode)||e}if(f)try{return K.apply(n,d.querySelectorAll(f)),n}catch(y){}finally{a===P&&e.removeAttribute("id")}}}return S(t.replace(at,"$1"),e,n,i)}function n(){function t(n,i){return e.push(n+" ")>w.cacheLength&&delete t[e.shift()],t[n+" "]=i}var e=[];return t}function i(t){return t[P]=!0,t}function r(t){var e=z.createElement("div");try{return!!t(e)}catch(n){return!1}finally{e.parentNode&&e.parentNode.removeChild(e),e=null}}function o(t,e){for(var n=t.split("|"),i=n.length;i--;)w.attrHandle[n[i]]=e}function s(t,e){var n=e&&t,i=n&&1===t.nodeType&&1===e.nodeType&&(~e.sourceIndex||V)-(~t.sourceIndex||V);if(i)return i;if(n)for(;n=n.nextSibling;)if(n===e)return-1;return t?1:-1}function a(t){return function(e){var n=e.nodeName.toLowerCase();return"input"===n&&e.type===t}}function u(t){return function(e){var n=e.nodeName.toLowerCase();return("input"===n||"button"===n)&&e.type===t}}function l(t){return i(function(e){return e=+e,i(function(n,i){for(var r,o=t([],n.length,e),s=o.length;s--;)n[r=o[s]]&&(n[r]=!(i[r]=n[r]))})})}function c(t){return t&&"undefined"!=typeof t.getElementsByTagName&&t}function h(){}function p(t){for(var e=0,n=t.length,i="";n>e;e++)i+=t[e].value;return i}function f(t,e,n){var i=e.dir,r=n&&"parentNode"===i,o=W++;return e.first?function(e,n,o){for(;e=e[i];)if(1===e.nodeType||r)return t(e,n,o)}:function(e,n,s){var a,u,l,c=[M,o];if(s){for(;e=e[i];)if((1===e.nodeType||r)&&t(e,n,s))return!0}else for(;e=e[i];)if(1===e.nodeType||r){if(l=e[P]||(e[P]={}),u=l[e.uniqueID]||(l[e.uniqueID]={}),(a=u[i])&&a[0]===M&&a[1]===o)return c[2]=a[2];if(u[i]=c,c[2]=t(e,n,s))return!0}}}function d(t){return t.length>1?function(e,n,i){for(var r=t.length;r--;)if(!t[r](e,n,i))return!1;return!0}:t[0]}function m(t,n,i){for(var r=0,o=n.length;o>r;r++)e(t,n[r],i);return i}function y(t,e,n,i,r){for(var o,s=[],a=0,u=t.length,l=null!=e;u>a;a++)(o=t[a])&&(n&&!n(o,i,r)||(s.push(o),l&&e.push(a)));return s}function g(t,e,n,r,o,s){return r&&!r[P]&&(r=g(r)),o&&!o[P]&&(o=g(o,s)),i(function(i,s,a,u){var l,c,h,p=[],f=[],d=s.length,g=i||m(e||"*",a.nodeType?[a]:a,[]),v=!t||!i&&e?g:y(g,p,t,a,u),x=n?o||(i?t:d||r)?[]:s:v;if(n&&n(v,x,a,u),r)for(l=y(x,f),r(l,[],a,u),c=l.length;c--;)(h=l[c])&&(x[f[c]]=!(v[f[c]]=h));if(i){if(o||t){if(o){for(l=[],c=x.length;c--;)(h=x[c])&&l.push(v[c]=h);o(null,x=[],l,u)}for(c=x.length;c--;)(h=x[c])&&(l=o?tt(i,h):p[c])>-1&&(i[l]=!(s[l]=h))}}else x=y(x===s?x.splice(d,x.length):x),o?o(null,s,x,u):K.apply(s,x)})}function v(t){for(var e,n,i,r=t.length,o=w.relative[t[0].type],s=o||w.relative[" "],a=o?1:0,u=f(function(t){return t===e},s,!0),l=f(function(t){return tt(e,t)>-1},s,!0),c=[function(t,n,i){var r=!o&&(i||n!==L)||((e=n).nodeType?u(t,n,i):l(t,n,i));return e=null,r}];r>a;a++)if(n=w.relative[t[a].type])c=[f(d(c),n)];else{if(n=w.filter[t[a].type].apply(null,t[a].matches),n[P]){for(i=++a;r>i&&!w.relative[t[i].type];i++);return g(a>1&&d(c),a>1&&p(t.slice(0,a-1).concat({value:" "===t[a-2].type?"*":""})).replace(at,"$1"),n,i>a&&v(t.slice(a,i)),r>i&&v(t=t.slice(i)),r>i&&p(t))}c.push(n)}return d(c)}function x(t,n){var r=n.length>0,o=t.length>0,s=function(i,s,a,u,l){var c,h,p,f=0,d="0",m=i&&[],g=[],v=L,x=i||o&&w.find.TAG("*",l),b=M+=null==v?1:Math.random()||.1,_=x.length;for(l&&(L=s===z||s||l);d!==_&&null!=(c=x[d]);d++){if(o&&c){for(h=0,s||c.ownerDocument===z||(k(c),a=!N);p=t[h++];)if(p(c,s||z,a)){u.push(c);break}l&&(M=b)}r&&((c=!p&&c)&&f--,i&&m.push(c))}if(f+=d,r&&d!==f){for(h=0;p=n[h++];)p(m,g,s,a);if(i){if(f>0)for(;d--;)m[d]||g[d]||(g[d]=G.call(u));g=y(g)}K.apply(u,g),l&&!i&&g.length>0&&f+n.length>1&&e.uniqueSort(u)}return l&&(M=b,L=v),m};return r?i(s):s}var b,_,w,T,C,E,j,S,L,I,D,k,z,A,N,q,O,R,H,P="sizzle"+1*new Date,F=t.document,M=0,W=0,B=n(),$=n(),U=n(),Y=function(t,e){return t===e&&(D=!0),0},V=1<<31,X={}.hasOwnProperty,Q=[],G=Q.pop,J=Q.push,K=Q.push,Z=Q.slice,tt=function(t,e){for(var n=0,i=t.length;i>n;n++)if(t[n]===e)return n;return-1},et="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",nt="[\\x20\\t\\r\\n\\f]",it="(?:\\\\.|[\\w-]|[^\\x00-\\xa0])+",rt="\\["+nt+"*("+it+")(?:"+nt+"*([*^$|!~]?=)"+nt+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+it+"))|)"+nt+"*\\]",ot=":("+it+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+rt+")*)|.*)\\)|)",st=new RegExp(nt+"+","g"),at=new RegExp("^"+nt+"+|((?:^|[^\\\\])(?:\\\\.)*)"+nt+"+$","g"),ut=new RegExp("^"+nt+"*,"+nt+"*"),lt=new RegExp("^"+nt+"*([>+~]|"+nt+")"+nt+"*"),ct=new RegExp("="+nt+"*([^\\]'\"]*?)"+nt+"*\\]","g"),ht=new RegExp(ot),pt=new RegExp("^"+it+"$"),ft={ID:new RegExp("^#("+it+")"),CLASS:new RegExp("^\\.("+it+")"),TAG:new RegExp("^("+it+"|[*])"),ATTR:new RegExp("^"+rt),PSEUDO:new RegExp("^"+ot),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+nt+"*(even|odd|(([+-]|)(\\d*)n|)"+nt+"*(?:([+-]|)"+nt+"*(\\d+)|))"+nt+"*\\)|)","i"),bool:new RegExp("^(?:"+et+")$","i"),needsContext:new RegExp("^"+nt+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+nt+"*((?:-\\d)?\\d*)"+nt+"*\\)|)(?=[^-]|$)","i")},dt=/^(?:input|select|textarea|button)$/i,mt=/^h\d$/i,yt=/^[^{]+\{\s*\[native \w/,gt=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,vt=/[+~]/,xt=/'|\\/g,bt=new RegExp("\\\\([\\da-f]{1,6}"+nt+"?|("+nt+")|.)","ig"),_t=function(t,e,n){var i="0x"+e-65536;return i!==i||n?e:0>i?String.fromCharCode(i+65536):String.fromCharCode(i>>10|55296,1023&i|56320)},wt=function(){k()};try{K.apply(Q=Z.call(F.childNodes),F.childNodes),Q[F.childNodes.length].nodeType}catch(Tt){K={apply:Q.length?function(t,e){J.apply(t,Z.call(e))}:function(t,e){for(var n=t.length,i=0;t[n++]=e[i++];);t.length=n-1}}}_=e.support={},C=e.isXML=function(t){var e=t&&(t.ownerDocument||t).documentElement;return e?"HTML"!==e.nodeName:!1},k=e.setDocument=function(t){var e,n,i=t?t.ownerDocument||t:F;return i!==z&&9===i.nodeType&&i.documentElement?(z=i,A=z.documentElement,N=!C(z),(n=z.defaultView)&&n.top!==n&&(n.addEventListener?n.addEventListener("unload",wt,!1):n.attachEvent&&n.attachEvent("onunload",wt)),_.attributes=r(function(t){return t.className="i",!t.getAttribute("className")}),_.getElementsByTagName=r(function(t){return t.appendChild(z.createComment("")),!t.getElementsByTagName("*").length}),_.getElementsByClassName=yt.test(z.getElementsByClassName),_.getById=r(function(t){return A.appendChild(t).id=P,!z.getElementsByName||!z.getElementsByName(P).length}),_.getById?(w.find.ID=function(t,e){if("undefined"!=typeof e.getElementById&&N){var n=e.getElementById(t);return n?[n]:[]}},w.filter.ID=function(t){var e=t.replace(bt,_t);return function(t){return t.getAttribute("id")===e}}):(delete w.find.ID,w.filter.ID=function(t){var e=t.replace(bt,_t);return function(t){var n="undefined"!=typeof t.getAttributeNode&&t.getAttributeNode("id");return n&&n.value===e}}),w.find.TAG=_.getElementsByTagName?function(t,e){return"undefined"!=typeof e.getElementsByTagName?e.getElementsByTagName(t):_.qsa?e.querySelectorAll(t):void 0}:function(t,e){var n,i=[],r=0,o=e.getElementsByTagName(t);if("*"===t){for(;n=o[r++];)1===n.nodeType&&i.push(n);return i}return o},w.find.CLASS=_.getElementsByClassName&&function(t,e){return"undefined"!=typeof e.getElementsByClassName&&N?e.getElementsByClassName(t):void 0},O=[],q=[],(_.qsa=yt.test(z.querySelectorAll))&&(r(function(t){A.appendChild(t).innerHTML="<a id='"+P+"'></a><select id='"+P+"-\r\\' msallowcapture=''><option selected=''></option></select>",t.querySelectorAll("[msallowcapture^='']").length&&q.push("[*^$]="+nt+"*(?:''|\"\")"),t.querySelectorAll("[selected]").length||q.push("\\["+nt+"*(?:value|"+et+")"),t.querySelectorAll("[id~="+P+"-]").length||q.push("~="),t.querySelectorAll(":checked").length||q.push(":checked"),t.querySelectorAll("a#"+P+"+*").length||q.push(".#.+[+~]")}),r(function(t){var e=z.createElement("input");e.setAttribute("type","hidden"),t.appendChild(e).setAttribute("name","D"),t.querySelectorAll("[name=d]").length&&q.push("name"+nt+"*[*^$|!~]?="),t.querySelectorAll(":enabled").length||q.push(":enabled",":disabled"),t.querySelectorAll("*,:x"),q.push(",.*:")})),(_.matchesSelector=yt.test(R=A.matches||A.webkitMatchesSelector||A.mozMatchesSelector||A.oMatchesSelector||A.msMatchesSelector))&&r(function(t){_.disconnectedMatch=R.call(t,"div"),R.call(t,"[s!='']:x"),O.push("!=",ot)}),q=q.length&&new RegExp(q.join("|")),O=O.length&&new RegExp(O.join("|")),e=yt.test(A.compareDocumentPosition),H=e||yt.test(A.contains)?function(t,e){var n=9===t.nodeType?t.documentElement:t,i=e&&e.parentNode;return t===i||!(!i||1!==i.nodeType||!(n.contains?n.contains(i):t.compareDocumentPosition&&16&t.compareDocumentPosition(i)))}:function(t,e){if(e)for(;e=e.parentNode;)if(e===t)return!0;return!1},Y=e?function(t,e){if(t===e)return D=!0,0;var n=!t.compareDocumentPosition-!e.compareDocumentPosition;return n?n:(n=(t.ownerDocument||t)===(e.ownerDocument||e)?t.compareDocumentPosition(e):1,1&n||!_.sortDetached&&e.compareDocumentPosition(t)===n?t===z||t.ownerDocument===F&&H(F,t)?-1:e===z||e.ownerDocument===F&&H(F,e)?1:I?tt(I,t)-tt(I,e):0:4&n?-1:1)}:function(t,e){if(t===e)return D=!0,0;var n,i=0,r=t.parentNode,o=e.parentNode,a=[t],u=[e];if(!r||!o)return t===z?-1:e===z?1:r?-1:o?1:I?tt(I,t)-tt(I,e):0;if(r===o)return s(t,e);for(n=t;n=n.parentNode;)a.unshift(n);for(n=e;n=n.parentNode;)u.unshift(n);for(;a[i]===u[i];)i++;return i?s(a[i],u[i]):a[i]===F?-1:u[i]===F?1:0},z):z},e.matches=function(t,n){return e(t,null,null,n)},e.matchesSelector=function(t,n){if((t.ownerDocument||t)!==z&&k(t),n=n.replace(ct,"='$1']"),_.matchesSelector&&N&&!U[n+" "]&&(!O||!O.test(n))&&(!q||!q.test(n)))try{var i=R.call(t,n);if(i||_.disconnectedMatch||t.document&&11!==t.document.nodeType)return i}catch(r){}return e(n,z,null,[t]).length>0},e.contains=function(t,e){return(t.ownerDocument||t)!==z&&k(t),H(t,e)},e.attr=function(t,e){(t.ownerDocument||t)!==z&&k(t);var n=w.attrHandle[e.toLowerCase()],i=n&&X.call(w.attrHandle,e.toLowerCase())?n(t,e,!N):void 0;return void 0!==i?i:_.attributes||!N?t.getAttribute(e):(i=t.getAttributeNode(e))&&i.specified?i.value:null},e.error=function(t){throw new Error("Syntax error, unrecognized expression: "+t)},e.uniqueSort=function(t){var e,n=[],i=0,r=0;if(D=!_.detectDuplicates,I=!_.sortStable&&t.slice(0),t.sort(Y),D){for(;e=t[r++];)e===t[r]&&(i=n.push(r));for(;i--;)t.splice(n[i],1)}return I=null,t},T=e.getText=function(t){var e,n="",i=0,r=t.nodeType;if(r){if(1===r||9===r||11===r){if("string"==typeof t.textContent)return t.textContent;for(t=t.firstChild;t;t=t.nextSibling)n+=T(t)}else if(3===r||4===r)return t.nodeValue}else for(;e=t[i++];)n+=T(e);return n},w=e.selectors={cacheLength:50,createPseudo:i,match:ft,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(t){return t[1]=t[1].replace(bt,_t),t[3]=(t[3]||t[4]||t[5]||"").replace(bt,_t),"~="===t[2]&&(t[3]=" "+t[3]+" "),t.slice(0,4)},CHILD:function(t){return t[1]=t[1].toLowerCase(),"nth"===t[1].slice(0,3)?(t[3]||e.error(t[0]),t[4]=+(t[4]?t[5]+(t[6]||1):2*("even"===t[3]||"odd"===t[3])),t[5]=+(t[7]+t[8]||"odd"===t[3])):t[3]&&e.error(t[0]),t},PSEUDO:function(t){var e,n=!t[6]&&t[2];return ft.CHILD.test(t[0])?null:(t[3]?t[2]=t[4]||t[5]||"":n&&ht.test(n)&&(e=E(n,!0))&&(e=n.indexOf(")",n.length-e)-n.length)&&(t[0]=t[0].slice(0,e),t[2]=n.slice(0,e)),t.slice(0,3))}},filter:{TAG:function(t){var e=t.replace(bt,_t).toLowerCase();return"*"===t?function(){return!0}:function(t){return t.nodeName&&t.nodeName.toLowerCase()===e}},CLASS:function(t){var e=B[t+" "];return e||(e=new RegExp("(^|"+nt+")"+t+"("+nt+"|$)"))&&B(t,function(t){return e.test("string"==typeof t.className&&t.className||"undefined"!=typeof t.getAttribute&&t.getAttribute("class")||"")})},ATTR:function(t,n,i){return function(r){var o=e.attr(r,t);return null==o?"!="===n:n?(o+="","="===n?o===i:"!="===n?o!==i:"^="===n?i&&0===o.indexOf(i):"*="===n?i&&o.indexOf(i)>-1:"$="===n?i&&o.slice(-i.length)===i:"~="===n?(" "+o.replace(st," ")+" ").indexOf(i)>-1:"|="===n?o===i||o.slice(0,i.length+1)===i+"-":!1):!0}},CHILD:function(t,e,n,i,r){var o="nth"!==t.slice(0,3),s="last"!==t.slice(-4),a="of-type"===e;return 1===i&&0===r?function(t){return!!t.parentNode}:function(e,n,u){var l,c,h,p,f,d,m=o!==s?"nextSibling":"previousSibling",y=e.parentNode,g=a&&e.nodeName.toLowerCase(),v=!u&&!a,x=!1;if(y){if(o){for(;m;){for(p=e;p=p[m];)if(a?p.nodeName.toLowerCase()===g:1===p.nodeType)return!1;d=m="only"===t&&!d&&"nextSibling"}return!0}if(d=[s?y.firstChild:y.lastChild],s&&v){for(p=y,h=p[P]||(p[P]={}),c=h[p.uniqueID]||(h[p.uniqueID]={}),l=c[t]||[],f=l[0]===M&&l[1],x=f&&l[2],p=f&&y.childNodes[f];p=++f&&p&&p[m]||(x=f=0)||d.pop();)if(1===p.nodeType&&++x&&p===e){c[t]=[M,f,x];break}}else if(v&&(p=e,h=p[P]||(p[P]={}),c=h[p.uniqueID]||(h[p.uniqueID]={}),l=c[t]||[],f=l[0]===M&&l[1],x=f),x===!1)for(;(p=++f&&p&&p[m]||(x=f=0)||d.pop())&&((a?p.nodeName.toLowerCase()!==g:1!==p.nodeType)||!++x||(v&&(h=p[P]||(p[P]={}),c=h[p.uniqueID]||(h[p.uniqueID]={}),c[t]=[M,x]),p!==e)););return x-=r,x===i||x%i===0&&x/i>=0}}},PSEUDO:function(t,n){var r,o=w.pseudos[t]||w.setFilters[t.toLowerCase()]||e.error("unsupported pseudo: "+t);return o[P]?o(n):o.length>1?(r=[t,t,"",n],w.setFilters.hasOwnProperty(t.toLowerCase())?i(function(t,e){for(var i,r=o(t,n),s=r.length;s--;)i=tt(t,r[s]),t[i]=!(e[i]=r[s])}):function(t){return o(t,0,r)}):o}},pseudos:{not:i(function(t){var e=[],n=[],r=j(t.replace(at,"$1"));return r[P]?i(function(t,e,n,i){for(var o,s=r(t,null,i,[]),a=t.length;a--;)(o=s[a])&&(t[a]=!(e[a]=o))}):function(t,i,o){return e[0]=t,r(e,null,o,n),e[0]=null,!n.pop()}}),has:i(function(t){return function(n){return e(t,n).length>0}}),contains:i(function(t){return t=t.replace(bt,_t),function(e){return(e.textContent||e.innerText||T(e)).indexOf(t)>-1}}),lang:i(function(t){return pt.test(t||"")||e.error("unsupported lang: "+t),t=t.replace(bt,_t).toLowerCase(),function(e){var n;do if(n=N?e.lang:e.getAttribute("xml:lang")||e.getAttribute("lang"))return n=n.toLowerCase(),n===t||0===n.indexOf(t+"-");while((e=e.parentNode)&&1===e.nodeType);return!1}}),target:function(e){var n=t.location&&t.location.hash;return n&&n.slice(1)===e.id},root:function(t){return t===A},focus:function(t){return t===z.activeElement&&(!z.hasFocus||z.hasFocus())&&!!(t.type||t.href||~t.tabIndex)},enabled:function(t){return t.disabled===!1},disabled:function(t){return t.disabled===!0},checked:function(t){var e=t.nodeName.toLowerCase();return"input"===e&&!!t.checked||"option"===e&&!!t.selected},selected:function(t){return t.parentNode&&t.parentNode.selectedIndex,t.selected===!0},empty:function(t){for(t=t.firstChild;t;t=t.nextSibling)if(t.nodeType<6)return!1;return!0},parent:function(t){return!w.pseudos.empty(t)},header:function(t){return mt.test(t.nodeName)},input:function(t){return dt.test(t.nodeName)},button:function(t){var e=t.nodeName.toLowerCase();return"input"===e&&"button"===t.type||"button"===e},text:function(t){var e;return"input"===t.nodeName.toLowerCase()&&"text"===t.type&&(null==(e=t.getAttribute("type"))||"text"===e.toLowerCase())},first:l(function(){return[0]}),last:l(function(t,e){return[e-1]}),eq:l(function(t,e,n){return[0>n?n+e:n]}),even:l(function(t,e){for(var n=0;e>n;n+=2)t.push(n);return t;
}),odd:l(function(t,e){for(var n=1;e>n;n+=2)t.push(n);return t}),lt:l(function(t,e,n){for(var i=0>n?n+e:n;--i>=0;)t.push(i);return t}),gt:l(function(t,e,n){for(var i=0>n?n+e:n;++i<e;)t.push(i);return t})}},w.pseudos.nth=w.pseudos.eq;for(b in{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})w.pseudos[b]=a(b);for(b in{submit:!0,reset:!0})w.pseudos[b]=u(b);return h.prototype=w.filters=w.pseudos,w.setFilters=new h,E=e.tokenize=function(t,n){var i,r,o,s,a,u,l,c=$[t+" "];if(c)return n?0:c.slice(0);for(a=t,u=[],l=w.preFilter;a;){i&&!(r=ut.exec(a))||(r&&(a=a.slice(r[0].length)||a),u.push(o=[])),i=!1,(r=lt.exec(a))&&(i=r.shift(),o.push({value:i,type:r[0].replace(at," ")}),a=a.slice(i.length));for(s in w.filter)!(r=ft[s].exec(a))||l[s]&&!(r=l[s](r))||(i=r.shift(),o.push({value:i,type:s,matches:r}),a=a.slice(i.length));if(!i)break}return n?a.length:a?e.error(t):$(t,u).slice(0)},j=e.compile=function(t,e){var n,i=[],r=[],o=U[t+" "];if(!o){for(e||(e=E(t)),n=e.length;n--;)o=v(e[n]),o[P]?i.push(o):r.push(o);o=U(t,x(r,i)),o.selector=t}return o},S=e.select=function(t,e,n,i){var r,o,s,a,u,l="function"==typeof t&&t,h=!i&&E(t=l.selector||t);if(n=n||[],1===h.length){if(o=h[0]=h[0].slice(0),o.length>2&&"ID"===(s=o[0]).type&&_.getById&&9===e.nodeType&&N&&w.relative[o[1].type]){if(e=(w.find.ID(s.matches[0].replace(bt,_t),e)||[])[0],!e)return n;l&&(e=e.parentNode),t=t.slice(o.shift().value.length)}for(r=ft.needsContext.test(t)?0:o.length;r--&&(s=o[r],!w.relative[a=s.type]);)if((u=w.find[a])&&(i=u(s.matches[0].replace(bt,_t),vt.test(o[0].type)&&c(e.parentNode)||e))){if(o.splice(r,1),t=i.length&&p(o),!t)return K.apply(n,i),n;break}}return(l||j(t,h))(i,e,!N,n,!e||vt.test(t)&&c(e.parentNode)||e),n},_.sortStable=P.split("").sort(Y).join("")===P,_.detectDuplicates=!!D,k(),_.sortDetached=r(function(t){return 1&t.compareDocumentPosition(z.createElement("div"))}),r(function(t){return t.innerHTML="<a href='#'></a>","#"===t.firstChild.getAttribute("href")})||o("type|href|height|width",function(t,e,n){return n?void 0:t.getAttribute(e,"type"===e.toLowerCase()?1:2)}),_.attributes&&r(function(t){return t.innerHTML="<input/>",t.firstChild.setAttribute("value",""),""===t.firstChild.getAttribute("value")})||o("value",function(t,e,n){return n||"input"!==t.nodeName.toLowerCase()?void 0:t.defaultValue}),r(function(t){return null==t.getAttribute("disabled")})||o(et,function(t,e,n){var i;return n?void 0:t[e]===!0?e.toLowerCase():(i=t.getAttributeNode(e))&&i.specified?i.value:null}),e}(t);ot.find=ct,ot.expr=ct.selectors,ot.expr[":"]=ot.expr.pseudos,ot.uniqueSort=ot.unique=ct.uniqueSort,ot.text=ct.getText,ot.isXMLDoc=ct.isXML,ot.contains=ct.contains;var ht=function(t,e,n){for(var i=[],r=void 0!==n;(t=t[e])&&9!==t.nodeType;)if(1===t.nodeType){if(r&&ot(t).is(n))break;i.push(t)}return i},pt=function(t,e){for(var n=[];t;t=t.nextSibling)1===t.nodeType&&t!==e&&n.push(t);return n},ft=ot.expr.match.needsContext,dt=/^<([\w-]+)\s*\/?>(?:<\/\1>|)$/,mt=/^.[^:#\[\.,]*$/;ot.filter=function(t,e,n){var i=e[0];return n&&(t=":not("+t+")"),1===e.length&&1===i.nodeType?ot.find.matchesSelector(i,t)?[i]:[]:ot.find.matches(t,ot.grep(e,function(t){return 1===t.nodeType}))},ot.fn.extend({find:function(t){var e,n=this.length,i=[],r=this;if("string"!=typeof t)return this.pushStack(ot(t).filter(function(){for(e=0;n>e;e++)if(ot.contains(r[e],this))return!0}));for(e=0;n>e;e++)ot.find(t,r[e],i);return i=this.pushStack(n>1?ot.unique(i):i),i.selector=this.selector?this.selector+" "+t:t,i},filter:function(t){return this.pushStack(i(this,t||[],!1))},not:function(t){return this.pushStack(i(this,t||[],!0))},is:function(t){return!!i(this,"string"==typeof t&&ft.test(t)?ot(t):t||[],!1).length}});var yt,gt=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]*))$/,vt=ot.fn.init=function(t,e,n){var i,r;if(!t)return this;if(n=n||yt,"string"==typeof t){if(i="<"===t[0]&&">"===t[t.length-1]&&t.length>=3?[null,t,null]:gt.exec(t),!i||!i[1]&&e)return!e||e.jquery?(e||n).find(t):this.constructor(e).find(t);if(i[1]){if(e=e instanceof ot?e[0]:e,ot.merge(this,ot.parseHTML(i[1],e&&e.nodeType?e.ownerDocument||e:Q,!0)),dt.test(i[1])&&ot.isPlainObject(e))for(i in e)ot.isFunction(this[i])?this[i](e[i]):this.attr(i,e[i]);return this}return r=Q.getElementById(i[2]),r&&r.parentNode&&(this.length=1,this[0]=r),this.context=Q,this.selector=t,this}return t.nodeType?(this.context=this[0]=t,this.length=1,this):ot.isFunction(t)?void 0!==n.ready?n.ready(t):t(ot):(void 0!==t.selector&&(this.selector=t.selector,this.context=t.context),ot.makeArray(t,this))};vt.prototype=ot.fn,yt=ot(Q);var xt=/^(?:parents|prev(?:Until|All))/,bt={children:!0,contents:!0,next:!0,prev:!0};ot.fn.extend({has:function(t){var e=ot(t,this),n=e.length;return this.filter(function(){for(var t=0;n>t;t++)if(ot.contains(this,e[t]))return!0})},closest:function(t,e){for(var n,i=0,r=this.length,o=[],s=ft.test(t)||"string"!=typeof t?ot(t,e||this.context):0;r>i;i++)for(n=this[i];n&&n!==e;n=n.parentNode)if(n.nodeType<11&&(s?s.index(n)>-1:1===n.nodeType&&ot.find.matchesSelector(n,t))){o.push(n);break}return this.pushStack(o.length>1?ot.uniqueSort(o):o)},index:function(t){return t?"string"==typeof t?Z.call(ot(t),this[0]):Z.call(this,t.jquery?t[0]:t):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(t,e){return this.pushStack(ot.uniqueSort(ot.merge(this.get(),ot(t,e))))},addBack:function(t){return this.add(null==t?this.prevObject:this.prevObject.filter(t))}}),ot.each({parent:function(t){var e=t.parentNode;return e&&11!==e.nodeType?e:null},parents:function(t){return ht(t,"parentNode")},parentsUntil:function(t,e,n){return ht(t,"parentNode",n)},next:function(t){return r(t,"nextSibling")},prev:function(t){return r(t,"previousSibling")},nextAll:function(t){return ht(t,"nextSibling")},prevAll:function(t){return ht(t,"previousSibling")},nextUntil:function(t,e,n){return ht(t,"nextSibling",n)},prevUntil:function(t,e,n){return ht(t,"previousSibling",n)},siblings:function(t){return pt((t.parentNode||{}).firstChild,t)},children:function(t){return pt(t.firstChild)},contents:function(t){return t.contentDocument||ot.merge([],t.childNodes)}},function(t,e){ot.fn[t]=function(n,i){var r=ot.map(this,e,n);return"Until"!==t.slice(-5)&&(i=n),i&&"string"==typeof i&&(r=ot.filter(i,r)),this.length>1&&(bt[t]||ot.uniqueSort(r),xt.test(t)&&r.reverse()),this.pushStack(r)}});var _t=/\S+/g;ot.Callbacks=function(t){t="string"==typeof t?o(t):ot.extend({},t);var e,n,i,r,s=[],a=[],u=-1,l=function(){for(r=t.once,i=e=!0;a.length;u=-1)for(n=a.shift();++u<s.length;)s[u].apply(n[0],n[1])===!1&&t.stopOnFalse&&(u=s.length,n=!1);t.memory||(n=!1),e=!1,r&&(s=n?[]:"")},c={add:function(){return s&&(n&&!e&&(u=s.length-1,a.push(n)),function i(e){ot.each(e,function(e,n){ot.isFunction(n)?t.unique&&c.has(n)||s.push(n):n&&n.length&&"string"!==ot.type(n)&&i(n)})}(arguments),n&&!e&&l()),this},remove:function(){return ot.each(arguments,function(t,e){for(var n;(n=ot.inArray(e,s,n))>-1;)s.splice(n,1),u>=n&&u--}),this},has:function(t){return t?ot.inArray(t,s)>-1:s.length>0},empty:function(){return s&&(s=[]),this},disable:function(){return r=a=[],s=n="",this},disabled:function(){return!s},lock:function(){return r=a=[],n||(s=n=""),this},locked:function(){return!!r},fireWith:function(t,n){return r||(n=n||[],n=[t,n.slice?n.slice():n],a.push(n),e||l()),this},fire:function(){return c.fireWith(this,arguments),this},fired:function(){return!!i}};return c},ot.extend({Deferred:function(t){var e=[["resolve","done",ot.Callbacks("once memory"),"resolved"],["reject","fail",ot.Callbacks("once memory"),"rejected"],["notify","progress",ot.Callbacks("memory")]],n="pending",i={state:function(){return n},always:function(){return r.done(arguments).fail(arguments),this},then:function(){var t=arguments;return ot.Deferred(function(n){ot.each(e,function(e,o){var s=ot.isFunction(t[e])&&t[e];r[o[1]](function(){var t=s&&s.apply(this,arguments);t&&ot.isFunction(t.promise)?t.promise().progress(n.notify).done(n.resolve).fail(n.reject):n[o[0]+"With"](this===i?n.promise():this,s?[t]:arguments)})}),t=null}).promise()},promise:function(t){return null!=t?ot.extend(t,i):i}},r={};return i.pipe=i.then,ot.each(e,function(t,o){var s=o[2],a=o[3];i[o[1]]=s.add,a&&s.add(function(){n=a},e[1^t][2].disable,e[2][2].lock),r[o[0]]=function(){return r[o[0]+"With"](this===r?i:this,arguments),this},r[o[0]+"With"]=s.fireWith}),i.promise(r),t&&t.call(r,r),r},when:function(t){var e,n,i,r=0,o=G.call(arguments),s=o.length,a=1!==s||t&&ot.isFunction(t.promise)?s:0,u=1===a?t:ot.Deferred(),l=function(t,n,i){return function(r){n[t]=this,i[t]=arguments.length>1?G.call(arguments):r,i===e?u.notifyWith(n,i):--a||u.resolveWith(n,i)}};if(s>1)for(e=new Array(s),n=new Array(s),i=new Array(s);s>r;r++)o[r]&&ot.isFunction(o[r].promise)?o[r].promise().progress(l(r,n,e)).done(l(r,i,o)).fail(u.reject):--a;return a||u.resolveWith(i,o),u.promise()}});var wt;ot.fn.ready=function(t){return ot.ready.promise().done(t),this},ot.extend({isReady:!1,readyWait:1,holdReady:function(t){t?ot.readyWait++:ot.ready(!0)},ready:function(t){(t===!0?--ot.readyWait:ot.isReady)||(ot.isReady=!0,t!==!0&&--ot.readyWait>0||(wt.resolveWith(Q,[ot]),ot.fn.triggerHandler&&(ot(Q).triggerHandler("ready"),ot(Q).off("ready"))))}}),ot.ready.promise=function(e){return wt||(wt=ot.Deferred(),"complete"===Q.readyState||"loading"!==Q.readyState&&!Q.documentElement.doScroll?t.setTimeout(ot.ready):(Q.addEventListener("DOMContentLoaded",s),t.addEventListener("load",s))),wt.promise(e)},ot.ready.promise();var Tt=function(t,e,n,i,r,o,s){var a=0,u=t.length,l=null==n;if("object"===ot.type(n)){r=!0;for(a in n)Tt(t,e,a,n[a],!0,o,s)}else if(void 0!==i&&(r=!0,ot.isFunction(i)||(s=!0),l&&(s?(e.call(t,i),e=null):(l=e,e=function(t,e,n){return l.call(ot(t),n)})),e))for(;u>a;a++)e(t[a],n,s?i:i.call(t[a],a,e(t[a],n)));return r?t:l?e.call(t):u?e(t[0],n):o},Ct=function(t){return 1===t.nodeType||9===t.nodeType||!+t.nodeType};a.uid=1,a.prototype={register:function(t,e){var n=e||{};return t.nodeType?t[this.expando]=n:Object.defineProperty(t,this.expando,{value:n,writable:!0,configurable:!0}),t[this.expando]},cache:function(t){if(!Ct(t))return{};var e=t[this.expando];return e||(e={},Ct(t)&&(t.nodeType?t[this.expando]=e:Object.defineProperty(t,this.expando,{value:e,configurable:!0}))),e},set:function(t,e,n){var i,r=this.cache(t);if("string"==typeof e)r[e]=n;else for(i in e)r[i]=e[i];return r},get:function(t,e){return void 0===e?this.cache(t):t[this.expando]&&t[this.expando][e]},access:function(t,e,n){var i;return void 0===e||e&&"string"==typeof e&&void 0===n?(i=this.get(t,e),void 0!==i?i:this.get(t,ot.camelCase(e))):(this.set(t,e,n),void 0!==n?n:e)},remove:function(t,e){var n,i,r,o=t[this.expando];if(void 0!==o){if(void 0===e)this.register(t);else{ot.isArray(e)?i=e.concat(e.map(ot.camelCase)):(r=ot.camelCase(e),e in o?i=[e,r]:(i=r,i=i in o?[i]:i.match(_t)||[])),n=i.length;for(;n--;)delete o[i[n]]}(void 0===e||ot.isEmptyObject(o))&&(t.nodeType?t[this.expando]=void 0:delete t[this.expando])}},hasData:function(t){var e=t[this.expando];return void 0!==e&&!ot.isEmptyObject(e)}};var Et=new a,jt=new a,St=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,Lt=/[A-Z]/g;ot.extend({hasData:function(t){return jt.hasData(t)||Et.hasData(t)},data:function(t,e,n){return jt.access(t,e,n)},removeData:function(t,e){jt.remove(t,e)},_data:function(t,e,n){return Et.access(t,e,n)},_removeData:function(t,e){Et.remove(t,e)}}),ot.fn.extend({data:function(t,e){var n,i,r,o=this[0],s=o&&o.attributes;if(void 0===t){if(this.length&&(r=jt.get(o),1===o.nodeType&&!Et.get(o,"hasDataAttrs"))){for(n=s.length;n--;)s[n]&&(i=s[n].name,0===i.indexOf("data-")&&(i=ot.camelCase(i.slice(5)),u(o,i,r[i])));Et.set(o,"hasDataAttrs",!0)}return r}return"object"==typeof t?this.each(function(){jt.set(this,t)}):Tt(this,function(e){var n,i;if(o&&void 0===e){if(n=jt.get(o,t)||jt.get(o,t.replace(Lt,"-$&").toLowerCase()),void 0!==n)return n;if(i=ot.camelCase(t),n=jt.get(o,i),void 0!==n)return n;if(n=u(o,i,void 0),void 0!==n)return n}else i=ot.camelCase(t),this.each(function(){var n=jt.get(this,i);jt.set(this,i,e),t.indexOf("-")>-1&&void 0!==n&&jt.set(this,t,e)})},null,e,arguments.length>1,null,!0)},removeData:function(t){return this.each(function(){jt.remove(this,t)})}}),ot.extend({queue:function(t,e,n){var i;return t?(e=(e||"fx")+"queue",i=Et.get(t,e),n&&(!i||ot.isArray(n)?i=Et.access(t,e,ot.makeArray(n)):i.push(n)),i||[]):void 0},dequeue:function(t,e){e=e||"fx";var n=ot.queue(t,e),i=n.length,r=n.shift(),o=ot._queueHooks(t,e),s=function(){ot.dequeue(t,e)};"inprogress"===r&&(r=n.shift(),i--),r&&("fx"===e&&n.unshift("inprogress"),delete o.stop,r.call(t,s,o)),!i&&o&&o.empty.fire()},_queueHooks:function(t,e){var n=e+"queueHooks";return Et.get(t,n)||Et.access(t,n,{empty:ot.Callbacks("once memory").add(function(){Et.remove(t,[e+"queue",n])})})}}),ot.fn.extend({queue:function(t,e){var n=2;return"string"!=typeof t&&(e=t,t="fx",n--),arguments.length<n?ot.queue(this[0],t):void 0===e?this:this.each(function(){var n=ot.queue(this,t,e);ot._queueHooks(this,t),"fx"===t&&"inprogress"!==n[0]&&ot.dequeue(this,t)})},dequeue:function(t){return this.each(function(){ot.dequeue(this,t)})},clearQueue:function(t){return this.queue(t||"fx",[])},promise:function(t,e){var n,i=1,r=ot.Deferred(),o=this,s=this.length,a=function(){--i||r.resolveWith(o,[o])};for("string"!=typeof t&&(e=t,t=void 0),t=t||"fx";s--;)n=Et.get(o[s],t+"queueHooks"),n&&n.empty&&(i++,n.empty.add(a));return a(),r.promise(e)}});var It=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,Dt=new RegExp("^(?:([+-])=|)("+It+")([a-z%]*)$","i"),kt=["Top","Right","Bottom","Left"],zt=function(t,e){return t=e||t,"none"===ot.css(t,"display")||!ot.contains(t.ownerDocument,t)},At=/^(?:checkbox|radio)$/i,Nt=/<([\w:-]+)/,qt=/^$|\/(?:java|ecma)script/i,Ot={option:[1,"<select multiple='multiple'>","</select>"],thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};Ot.optgroup=Ot.option,Ot.tbody=Ot.tfoot=Ot.colgroup=Ot.caption=Ot.thead,Ot.th=Ot.td;var Rt=/<|&#?\w+;/;!function(){var t=Q.createDocumentFragment(),e=t.appendChild(Q.createElement("div")),n=Q.createElement("input");n.setAttribute("type","radio"),n.setAttribute("checked","checked"),n.setAttribute("name","t"),e.appendChild(n),it.checkClone=e.cloneNode(!0).cloneNode(!0).lastChild.checked,e.innerHTML="<textarea>x</textarea>",it.noCloneChecked=!!e.cloneNode(!0).lastChild.defaultValue}();var Ht=/^key/,Pt=/^(?:mouse|pointer|contextmenu|drag|drop)|click/,Ft=/^([^.]*)(?:\.(.+)|)/;ot.event={global:{},add:function(t,e,n,i,r){var o,s,a,u,l,c,h,p,f,d,m,y=Et.get(t);if(y)for(n.handler&&(o=n,n=o.handler,r=o.selector),n.guid||(n.guid=ot.guid++),(u=y.events)||(u=y.events={}),(s=y.handle)||(s=y.handle=function(e){return"undefined"!=typeof ot&&ot.event.triggered!==e.type?ot.event.dispatch.apply(t,arguments):void 0}),e=(e||"").match(_t)||[""],l=e.length;l--;)a=Ft.exec(e[l])||[],f=m=a[1],d=(a[2]||"").split(".").sort(),f&&(h=ot.event.special[f]||{},f=(r?h.delegateType:h.bindType)||f,h=ot.event.special[f]||{},c=ot.extend({type:f,origType:m,data:i,handler:n,guid:n.guid,selector:r,needsContext:r&&ot.expr.match.needsContext.test(r),namespace:d.join(".")},o),(p=u[f])||(p=u[f]=[],p.delegateCount=0,h.setup&&h.setup.call(t,i,d,s)!==!1||t.addEventListener&&t.addEventListener(f,s)),h.add&&(h.add.call(t,c),c.handler.guid||(c.handler.guid=n.guid)),r?p.splice(p.delegateCount++,0,c):p.push(c),ot.event.global[f]=!0)},remove:function(t,e,n,i,r){var o,s,a,u,l,c,h,p,f,d,m,y=Et.hasData(t)&&Et.get(t);if(y&&(u=y.events)){for(e=(e||"").match(_t)||[""],l=e.length;l--;)if(a=Ft.exec(e[l])||[],f=m=a[1],d=(a[2]||"").split(".").sort(),f){for(h=ot.event.special[f]||{},f=(i?h.delegateType:h.bindType)||f,p=u[f]||[],a=a[2]&&new RegExp("(^|\\.)"+d.join("\\.(?:.*\\.|)")+"(\\.|$)"),s=o=p.length;o--;)c=p[o],!r&&m!==c.origType||n&&n.guid!==c.guid||a&&!a.test(c.namespace)||i&&i!==c.selector&&("**"!==i||!c.selector)||(p.splice(o,1),c.selector&&p.delegateCount--,h.remove&&h.remove.call(t,c));s&&!p.length&&(h.teardown&&h.teardown.call(t,d,y.handle)!==!1||ot.removeEvent(t,f,y.handle),delete u[f])}else for(f in u)ot.event.remove(t,f+e[l],n,i,!0);ot.isEmptyObject(u)&&Et.remove(t,"handle events")}},dispatch:function(t){t=ot.event.fix(t);var e,n,i,r,o,s=[],a=G.call(arguments),u=(Et.get(this,"events")||{})[t.type]||[],l=ot.event.special[t.type]||{};if(a[0]=t,t.delegateTarget=this,!l.preDispatch||l.preDispatch.call(this,t)!==!1){for(s=ot.event.handlers.call(this,t,u),e=0;(r=s[e++])&&!t.isPropagationStopped();)for(t.currentTarget=r.elem,n=0;(o=r.handlers[n++])&&!t.isImmediatePropagationStopped();)t.rnamespace&&!t.rnamespace.test(o.namespace)||(t.handleObj=o,t.data=o.data,i=((ot.event.special[o.origType]||{}).handle||o.handler).apply(r.elem,a),void 0!==i&&(t.result=i)===!1&&(t.preventDefault(),t.stopPropagation()));return l.postDispatch&&l.postDispatch.call(this,t),t.result}},handlers:function(t,e){var n,i,r,o,s=[],a=e.delegateCount,u=t.target;if(a&&u.nodeType&&("click"!==t.type||isNaN(t.button)||t.button<1))for(;u!==this;u=u.parentNode||this)if(1===u.nodeType&&(u.disabled!==!0||"click"!==t.type)){for(i=[],n=0;a>n;n++)o=e[n],r=o.selector+" ",void 0===i[r]&&(i[r]=o.needsContext?ot(r,this).index(u)>-1:ot.find(r,this,null,[u]).length),i[r]&&i.push(o);i.length&&s.push({elem:u,handlers:i})}return a<e.length&&s.push({elem:this,handlers:e.slice(a)}),s},props:"altKey bubbles cancelable ctrlKey currentTarget detail eventPhase metaKey relatedTarget shiftKey target timeStamp view which".split(" "),fixHooks:{},keyHooks:{props:"char charCode key keyCode".split(" "),filter:function(t,e){return null==t.which&&(t.which=null!=e.charCode?e.charCode:e.keyCode),t}},mouseHooks:{props:"button buttons clientX clientY offsetX offsetY pageX pageY screenX screenY toElement".split(" "),filter:function(t,e){var n,i,r,o=e.button;return null==t.pageX&&null!=e.clientX&&(n=t.target.ownerDocument||Q,i=n.documentElement,r=n.body,t.pageX=e.clientX+(i&&i.scrollLeft||r&&r.scrollLeft||0)-(i&&i.clientLeft||r&&r.clientLeft||0),t.pageY=e.clientY+(i&&i.scrollTop||r&&r.scrollTop||0)-(i&&i.clientTop||r&&r.clientTop||0)),t.which||void 0===o||(t.which=1&o?1:2&o?3:4&o?2:0),t}},fix:function(t){if(t[ot.expando])return t;var e,n,i,r=t.type,o=t,s=this.fixHooks[r];for(s||(this.fixHooks[r]=s=Pt.test(r)?this.mouseHooks:Ht.test(r)?this.keyHooks:{}),i=s.props?this.props.concat(s.props):this.props,t=new ot.Event(o),e=i.length;e--;)n=i[e],t[n]=o[n];return t.target||(t.target=Q),3===t.target.nodeType&&(t.target=t.target.parentNode),s.filter?s.filter(t,o):t},special:{load:{noBubble:!0},focus:{trigger:function(){return this!==m()&&this.focus?(this.focus(),!1):void 0},delegateType:"focusin"},blur:{trigger:function(){return this===m()&&this.blur?(this.blur(),!1):void 0},delegateType:"focusout"},click:{trigger:function(){return"checkbox"===this.type&&this.click&&ot.nodeName(this,"input")?(this.click(),!1):void 0},_default:function(t){return ot.nodeName(t.target,"a")}},beforeunload:{postDispatch:function(t){void 0!==t.result&&t.originalEvent&&(t.originalEvent.returnValue=t.result)}}}},ot.removeEvent=function(t,e,n){t.removeEventListener&&t.removeEventListener(e,n)},ot.Event=function(t,e){return this instanceof ot.Event?(t&&t.type?(this.originalEvent=t,this.type=t.type,this.isDefaultPrevented=t.defaultPrevented||void 0===t.defaultPrevented&&t.returnValue===!1?f:d):this.type=t,e&&ot.extend(this,e),this.timeStamp=t&&t.timeStamp||ot.now(),void(this[ot.expando]=!0)):new ot.Event(t,e)},ot.Event.prototype={constructor:ot.Event,isDefaultPrevented:d,isPropagationStopped:d,isImmediatePropagationStopped:d,preventDefault:function(){var t=this.originalEvent;this.isDefaultPrevented=f,t&&t.preventDefault()},stopPropagation:function(){var t=this.originalEvent;this.isPropagationStopped=f,t&&t.stopPropagation()},stopImmediatePropagation:function(){var t=this.originalEvent;this.isImmediatePropagationStopped=f,t&&t.stopImmediatePropagation(),this.stopPropagation()}},ot.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},function(t,e){ot.event.special[t]={delegateType:e,bindType:e,handle:function(t){var n,i=this,r=t.relatedTarget,o=t.handleObj;return r&&(r===i||ot.contains(i,r))||(t.type=o.origType,n=o.handler.apply(this,arguments),t.type=e),n}}}),ot.fn.extend({on:function(t,e,n,i){return y(this,t,e,n,i)},one:function(t,e,n,i){return y(this,t,e,n,i,1)},off:function(t,e,n){var i,r;if(t&&t.preventDefault&&t.handleObj)return i=t.handleObj,ot(t.delegateTarget).off(i.namespace?i.origType+"."+i.namespace:i.origType,i.selector,i.handler),this;if("object"==typeof t){for(r in t)this.off(r,e,t[r]);return this}return e!==!1&&"function"!=typeof e||(n=e,e=void 0),n===!1&&(n=d),this.each(function(){ot.event.remove(this,t,n,e)})}});var Mt=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:-]+)[^>]*)\/>/gi,Wt=/<script|<style|<link/i,Bt=/checked\s*(?:[^=]|=\s*.checked.)/i,$t=/^true\/(.*)/,Ut=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;ot.extend({htmlPrefilter:function(t){return t.replace(Mt,"<$1></$2>")},clone:function(t,e,n){var i,r,o,s,a=t.cloneNode(!0),u=ot.contains(t.ownerDocument,t);if(!(it.noCloneChecked||1!==t.nodeType&&11!==t.nodeType||ot.isXMLDoc(t)))for(s=c(a),o=c(t),i=0,r=o.length;r>i;i++)_(o[i],s[i]);if(e)if(n)for(o=o||c(t),s=s||c(a),i=0,r=o.length;r>i;i++)b(o[i],s[i]);else b(t,a);return s=c(a,"script"),s.length>0&&h(s,!u&&c(t,"script")),a},cleanData:function(t){for(var e,n,i,r=ot.event.special,o=0;void 0!==(n=t[o]);o++)if(Ct(n)){if(e=n[Et.expando]){if(e.events)for(i in e.events)r[i]?ot.event.remove(n,i):ot.removeEvent(n,i,e.handle);n[Et.expando]=void 0}n[jt.expando]&&(n[jt.expando]=void 0)}}}),ot.fn.extend({domManip:w,detach:function(t){return T(this,t,!0)},remove:function(t){return T(this,t)},text:function(t){return Tt(this,function(t){return void 0===t?ot.text(this):this.empty().each(function(){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||(this.textContent=t)})},null,t,arguments.length)},append:function(){return w(this,arguments,function(t){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var e=g(this,t);e.appendChild(t)}})},prepend:function(){return w(this,arguments,function(t){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var e=g(this,t);e.insertBefore(t,e.firstChild)}})},before:function(){return w(this,arguments,function(t){this.parentNode&&this.parentNode.insertBefore(t,this)})},after:function(){return w(this,arguments,function(t){this.parentNode&&this.parentNode.insertBefore(t,this.nextSibling)})},empty:function(){for(var t,e=0;null!=(t=this[e]);e++)1===t.nodeType&&(ot.cleanData(c(t,!1)),t.textContent="");return this},clone:function(t,e){return t=null==t?!1:t,e=null==e?t:e,this.map(function(){return ot.clone(this,t,e)})},html:function(t){return Tt(this,function(t){var e=this[0]||{},n=0,i=this.length;if(void 0===t&&1===e.nodeType)return e.innerHTML;if("string"==typeof t&&!Wt.test(t)&&!Ot[(Nt.exec(t)||["",""])[1].toLowerCase()]){t=ot.htmlPrefilter(t);try{for(;i>n;n++)e=this[n]||{},1===e.nodeType&&(ot.cleanData(c(e,!1)),e.innerHTML=t);e=0}catch(r){}}e&&this.empty().append(t)},null,t,arguments.length)},replaceWith:function(){var t=[];return w(this,arguments,function(e){var n=this.parentNode;ot.inArray(this,t)<0&&(ot.cleanData(c(this)),n&&n.replaceChild(e,this))},t)}}),ot.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(t,e){ot.fn[t]=function(t){for(var n,i=[],r=ot(t),o=r.length-1,s=0;o>=s;s++)n=s===o?this:this.clone(!0),ot(r[s])[e](n),K.apply(i,n.get());return this.pushStack(i)}});var Yt,Vt={HTML:"block",BODY:"block"},Xt=/^margin/,Qt=new RegExp("^("+It+")(?!px)[a-z%]+$","i"),Gt=function(e){var n=e.ownerDocument.defaultView;return n&&n.opener||(n=t),n.getComputedStyle(e)},Jt=function(t,e,n,i){var r,o,s={};for(o in e)s[o]=t.style[o],t.style[o]=e[o];r=n.apply(t,i||[]);for(o in e)t.style[o]=s[o];return r},Kt=Q.documentElement;!function(){function e(){a.style.cssText="-webkit-box-sizing:border-box;-moz-box-sizing:border-box;box-sizing:border-box;position:relative;display:block;margin:auto;border:1px;padding:1px;top:1%;width:50%",a.innerHTML="",Kt.appendChild(s);var e=t.getComputedStyle(a);n="1%"!==e.top,o="2px"===e.marginLeft,i="4px"===e.width,a.style.marginRight="50%",r="4px"===e.marginRight,Kt.removeChild(s)}var n,i,r,o,s=Q.createElement("div"),a=Q.createElement("div");a.style&&(a.style.backgroundClip="content-box",a.cloneNode(!0).style.backgroundClip="",it.clearCloneStyle="content-box"===a.style.backgroundClip,s.style.cssText="border:0;width:8px;height:0;top:0;left:-9999px;padding:0;margin-top:1px;position:absolute",s.appendChild(a),ot.extend(it,{pixelPosition:function(){return e(),n},boxSizingReliable:function(){return null==i&&e(),i},pixelMarginRight:function(){return null==i&&e(),r},reliableMarginLeft:function(){return null==i&&e(),o},reliableMarginRight:function(){var e,n=a.appendChild(Q.createElement("div"));return n.style.cssText=a.style.cssText="-webkit-box-sizing:content-box;box-sizing:content-box;display:block;margin:0;border:0;padding:0",n.style.marginRight=n.style.width="0",a.style.width="1px",Kt.appendChild(s),e=!parseFloat(t.getComputedStyle(n).marginRight),Kt.removeChild(s),a.removeChild(n),e}}))}();var Zt=/^(none|table(?!-c[ea]).+)/,te={position:"absolute",visibility:"hidden",display:"block"},ee={letterSpacing:"0",fontWeight:"400"},ne=["Webkit","O","Moz","ms"],ie=Q.createElement("div").style;ot.extend({cssHooks:{opacity:{get:function(t,e){if(e){var n=j(t,"opacity");return""===n?"1":n}}}},cssNumber:{animationIterationCount:!0,columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{"float":"cssFloat"},style:function(t,e,n,i){if(t&&3!==t.nodeType&&8!==t.nodeType&&t.style){var r,o,s,a=ot.camelCase(e),u=t.style;return e=ot.cssProps[a]||(ot.cssProps[a]=L(a)||a),s=ot.cssHooks[e]||ot.cssHooks[a],void 0===n?s&&"get"in s&&void 0!==(r=s.get(t,!1,i))?r:u[e]:(o=typeof n,"string"===o&&(r=Dt.exec(n))&&r[1]&&(n=l(t,e,r),o="number"),null!=n&&n===n&&("number"===o&&(n+=r&&r[3]||(ot.cssNumber[a]?"":"px")),it.clearCloneStyle||""!==n||0!==e.indexOf("background")||(u[e]="inherit"),s&&"set"in s&&void 0===(n=s.set(t,n,i))||(u[e]=n)),void 0)}},css:function(t,e,n,i){var r,o,s,a=ot.camelCase(e);return e=ot.cssProps[a]||(ot.cssProps[a]=L(a)||a),s=ot.cssHooks[e]||ot.cssHooks[a],s&&"get"in s&&(r=s.get(t,!0,n)),void 0===r&&(r=j(t,e,i)),"normal"===r&&e in ee&&(r=ee[e]),""===n||n?(o=parseFloat(r),n===!0||isFinite(o)?o||0:r):r}}),ot.each(["height","width"],function(t,e){ot.cssHooks[e]={get:function(t,n,i){return n?Zt.test(ot.css(t,"display"))&&0===t.offsetWidth?Jt(t,te,function(){return k(t,e,i)}):k(t,e,i):void 0},set:function(t,n,i){var r,o=i&&Gt(t),s=i&&D(t,e,i,"border-box"===ot.css(t,"boxSizing",!1,o),o);return s&&(r=Dt.exec(n))&&"px"!==(r[3]||"px")&&(t.style[e]=n,n=ot.css(t,e)),I(t,n,s)}}}),ot.cssHooks.marginLeft=S(it.reliableMarginLeft,function(t,e){return e?(parseFloat(j(t,"marginLeft"))||t.getBoundingClientRect().left-Jt(t,{marginLeft:0},function(){return t.getBoundingClientRect().left}))+"px":void 0}),ot.cssHooks.marginRight=S(it.reliableMarginRight,function(t,e){return e?Jt(t,{display:"inline-block"},j,[t,"marginRight"]):void 0}),ot.each({margin:"",padding:"",border:"Width"},function(t,e){ot.cssHooks[t+e]={expand:function(n){for(var i=0,r={},o="string"==typeof n?n.split(" "):[n];4>i;i++)r[t+kt[i]+e]=o[i]||o[i-2]||o[0];return r}},Xt.test(t)||(ot.cssHooks[t+e].set=I)}),ot.fn.extend({css:function(t,e){return Tt(this,function(t,e,n){var i,r,o={},s=0;if(ot.isArray(e)){for(i=Gt(t),r=e.length;r>s;s++)o[e[s]]=ot.css(t,e[s],!1,i);return o}return void 0!==n?ot.style(t,e,n):ot.css(t,e)},t,e,arguments.length>1)},show:function(){return z(this,!0)},hide:function(){return z(this)},toggle:function(t){return"boolean"==typeof t?t?this.show():this.hide():this.each(function(){zt(this)?ot(this).show():ot(this).hide()})}}),ot.Tween=A,A.prototype={constructor:A,init:function(t,e,n,i,r,o){this.elem=t,this.prop=n,this.easing=r||ot.easing._default,this.options=e,this.start=this.now=this.cur(),this.end=i,this.unit=o||(ot.cssNumber[n]?"":"px")},cur:function(){var t=A.propHooks[this.prop];return t&&t.get?t.get(this):A.propHooks._default.get(this)},run:function(t){var e,n=A.propHooks[this.prop];return this.options.duration?this.pos=e=ot.easing[this.easing](t,this.options.duration*t,0,1,this.options.duration):this.pos=e=t,this.now=(this.end-this.start)*e+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),n&&n.set?n.set(this):A.propHooks._default.set(this),this}},A.prototype.init.prototype=A.prototype,A.propHooks={_default:{get:function(t){var e;return 1!==t.elem.nodeType||null!=t.elem[t.prop]&&null==t.elem.style[t.prop]?t.elem[t.prop]:(e=ot.css(t.elem,t.prop,""),e&&"auto"!==e?e:0)},set:function(t){ot.fx.step[t.prop]?ot.fx.step[t.prop](t):1!==t.elem.nodeType||null==t.elem.style[ot.cssProps[t.prop]]&&!ot.cssHooks[t.prop]?t.elem[t.prop]=t.now:ot.style(t.elem,t.prop,t.now+t.unit)}}},A.propHooks.scrollTop=A.propHooks.scrollLeft={set:function(t){t.elem.nodeType&&t.elem.parentNode&&(t.elem[t.prop]=t.now)}},ot.easing={linear:function(t){return t},swing:function(t){return.5-Math.cos(t*Math.PI)/2},_default:"swing"},ot.fx=A.prototype.init,ot.fx.step={};var re,oe,se=/^(?:toggle|show|hide)$/,ae=/queueHooks$/;ot.Animation=ot.extend(P,{tweeners:{"*":[function(t,e){var n=this.createTween(t,e);return l(n.elem,t,Dt.exec(e),n),n}]},tweener:function(t,e){ot.isFunction(t)?(e=t,t=["*"]):t=t.match(_t);for(var n,i=0,r=t.length;r>i;i++)n=t[i],P.tweeners[n]=P.tweeners[n]||[],P.tweeners[n].unshift(e)},prefilters:[R],prefilter:function(t,e){e?P.prefilters.unshift(t):P.prefilters.push(t)}}),ot.speed=function(t,e,n){var i=t&&"object"==typeof t?ot.extend({},t):{complete:n||!n&&e||ot.isFunction(t)&&t,duration:t,easing:n&&e||e&&!ot.isFunction(e)&&e};return i.duration=ot.fx.off?0:"number"==typeof i.duration?i.duration:i.duration in ot.fx.speeds?ot.fx.speeds[i.duration]:ot.fx.speeds._default,null!=i.queue&&i.queue!==!0||(i.queue="fx"),i.old=i.complete,i.complete=function(){ot.isFunction(i.old)&&i.old.call(this),i.queue&&ot.dequeue(this,i.queue)},i},ot.fn.extend({fadeTo:function(t,e,n,i){return this.filter(zt).css("opacity",0).show().end().animate({opacity:e},t,n,i)},animate:function(t,e,n,i){var r=ot.isEmptyObject(t),o=ot.speed(e,n,i),s=function(){var e=P(this,ot.extend({},t),o);(r||Et.get(this,"finish"))&&e.stop(!0)};return s.finish=s,r||o.queue===!1?this.each(s):this.queue(o.queue,s)},stop:function(t,e,n){var i=function(t){var e=t.stop;delete t.stop,e(n)};return"string"!=typeof t&&(n=e,e=t,t=void 0),e&&t!==!1&&this.queue(t||"fx",[]),this.each(function(){var e=!0,r=null!=t&&t+"queueHooks",o=ot.timers,s=Et.get(this);if(r)s[r]&&s[r].stop&&i(s[r]);else for(r in s)s[r]&&s[r].stop&&ae.test(r)&&i(s[r]);for(r=o.length;r--;)o[r].elem!==this||null!=t&&o[r].queue!==t||(o[r].anim.stop(n),e=!1,o.splice(r,1));!e&&n||ot.dequeue(this,t)})},finish:function(t){return t!==!1&&(t=t||"fx"),this.each(function(){var e,n=Et.get(this),i=n[t+"queue"],r=n[t+"queueHooks"],o=ot.timers,s=i?i.length:0;for(n.finish=!0,ot.queue(this,t,[]),r&&r.stop&&r.stop.call(this,!0),e=o.length;e--;)o[e].elem===this&&o[e].queue===t&&(o[e].anim.stop(!0),o.splice(e,1));for(e=0;s>e;e++)i[e]&&i[e].finish&&i[e].finish.call(this);delete n.finish})}}),ot.each(["toggle","show","hide"],function(t,e){var n=ot.fn[e];ot.fn[e]=function(t,i,r){return null==t||"boolean"==typeof t?n.apply(this,arguments):this.animate(q(e,!0),t,i,r)}}),ot.each({slideDown:q("show"),slideUp:q("hide"),slideToggle:q("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},function(t,e){ot.fn[t]=function(t,n,i){return this.animate(e,t,n,i)}}),ot.timers=[],ot.fx.tick=function(){var t,e=0,n=ot.timers;for(re=ot.now();e<n.length;e++)t=n[e],t()||n[e]!==t||n.splice(e--,1);n.length||ot.fx.stop(),
re=void 0},ot.fx.timer=function(t){ot.timers.push(t),t()?ot.fx.start():ot.timers.pop()},ot.fx.interval=13,ot.fx.start=function(){oe||(oe=t.setInterval(ot.fx.tick,ot.fx.interval))},ot.fx.stop=function(){t.clearInterval(oe),oe=null},ot.fx.speeds={slow:600,fast:200,_default:400},ot.fn.delay=function(e,n){return e=ot.fx?ot.fx.speeds[e]||e:e,n=n||"fx",this.queue(n,function(n,i){var r=t.setTimeout(n,e);i.stop=function(){t.clearTimeout(r)}})},function(){var t=Q.createElement("input"),e=Q.createElement("select"),n=e.appendChild(Q.createElement("option"));t.type="checkbox",it.checkOn=""!==t.value,it.optSelected=n.selected,e.disabled=!0,it.optDisabled=!n.disabled,t=Q.createElement("input"),t.value="t",t.type="radio",it.radioValue="t"===t.value}();var ue,le=ot.expr.attrHandle;ot.fn.extend({attr:function(t,e){return Tt(this,ot.attr,t,e,arguments.length>1)},removeAttr:function(t){return this.each(function(){ot.removeAttr(this,t)})}}),ot.extend({attr:function(t,e,n){var i,r,o=t.nodeType;if(3!==o&&8!==o&&2!==o)return"undefined"==typeof t.getAttribute?ot.prop(t,e,n):(1===o&&ot.isXMLDoc(t)||(e=e.toLowerCase(),r=ot.attrHooks[e]||(ot.expr.match.bool.test(e)?ue:void 0)),void 0!==n?null===n?void ot.removeAttr(t,e):r&&"set"in r&&void 0!==(i=r.set(t,n,e))?i:(t.setAttribute(e,n+""),n):r&&"get"in r&&null!==(i=r.get(t,e))?i:(i=ot.find.attr(t,e),null==i?void 0:i))},attrHooks:{type:{set:function(t,e){if(!it.radioValue&&"radio"===e&&ot.nodeName(t,"input")){var n=t.value;return t.setAttribute("type",e),n&&(t.value=n),e}}}},removeAttr:function(t,e){var n,i,r=0,o=e&&e.match(_t);if(o&&1===t.nodeType)for(;n=o[r++];)i=ot.propFix[n]||n,ot.expr.match.bool.test(n)&&(t[i]=!1),t.removeAttribute(n)}}),ue={set:function(t,e,n){return e===!1?ot.removeAttr(t,n):t.setAttribute(n,n),n}},ot.each(ot.expr.match.bool.source.match(/\w+/g),function(t,e){var n=le[e]||ot.find.attr;le[e]=function(t,e,i){var r,o;return i||(o=le[e],le[e]=r,r=null!=n(t,e,i)?e.toLowerCase():null,le[e]=o),r}});var ce=/^(?:input|select|textarea|button)$/i,he=/^(?:a|area)$/i;ot.fn.extend({prop:function(t,e){return Tt(this,ot.prop,t,e,arguments.length>1)},removeProp:function(t){return this.each(function(){delete this[ot.propFix[t]||t]})}}),ot.extend({prop:function(t,e,n){var i,r,o=t.nodeType;if(3!==o&&8!==o&&2!==o)return 1===o&&ot.isXMLDoc(t)||(e=ot.propFix[e]||e,r=ot.propHooks[e]),void 0!==n?r&&"set"in r&&void 0!==(i=r.set(t,n,e))?i:t[e]=n:r&&"get"in r&&null!==(i=r.get(t,e))?i:t[e]},propHooks:{tabIndex:{get:function(t){var e=ot.find.attr(t,"tabindex");return e?parseInt(e,10):ce.test(t.nodeName)||he.test(t.nodeName)&&t.href?0:-1}}},propFix:{"for":"htmlFor","class":"className"}}),it.optSelected||(ot.propHooks.selected={get:function(t){var e=t.parentNode;return e&&e.parentNode&&e.parentNode.selectedIndex,null}}),ot.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],function(){ot.propFix[this.toLowerCase()]=this});var pe=/[\t\r\n\f]/g;ot.fn.extend({addClass:function(t){var e,n,i,r,o,s,a,u=0;if(ot.isFunction(t))return this.each(function(e){ot(this).addClass(t.call(this,e,F(this)))});if("string"==typeof t&&t)for(e=t.match(_t)||[];n=this[u++];)if(r=F(n),i=1===n.nodeType&&(" "+r+" ").replace(pe," ")){for(s=0;o=e[s++];)i.indexOf(" "+o+" ")<0&&(i+=o+" ");a=ot.trim(i),r!==a&&n.setAttribute("class",a)}return this},removeClass:function(t){var e,n,i,r,o,s,a,u=0;if(ot.isFunction(t))return this.each(function(e){ot(this).removeClass(t.call(this,e,F(this)))});if(!arguments.length)return this.attr("class","");if("string"==typeof t&&t)for(e=t.match(_t)||[];n=this[u++];)if(r=F(n),i=1===n.nodeType&&(" "+r+" ").replace(pe," ")){for(s=0;o=e[s++];)for(;i.indexOf(" "+o+" ")>-1;)i=i.replace(" "+o+" "," ");a=ot.trim(i),r!==a&&n.setAttribute("class",a)}return this},toggleClass:function(t,e){var n=typeof t;return"boolean"==typeof e&&"string"===n?e?this.addClass(t):this.removeClass(t):ot.isFunction(t)?this.each(function(n){ot(this).toggleClass(t.call(this,n,F(this),e),e)}):this.each(function(){var e,i,r,o;if("string"===n)for(i=0,r=ot(this),o=t.match(_t)||[];e=o[i++];)r.hasClass(e)?r.removeClass(e):r.addClass(e);else void 0!==t&&"boolean"!==n||(e=F(this),e&&Et.set(this,"__className__",e),this.setAttribute&&this.setAttribute("class",e||t===!1?"":Et.get(this,"__className__")||""))})},hasClass:function(t){var e,n,i=0;for(e=" "+t+" ";n=this[i++];)if(1===n.nodeType&&(" "+F(n)+" ").replace(pe," ").indexOf(e)>-1)return!0;return!1}});var fe=/\r/g;ot.fn.extend({val:function(t){var e,n,i,r=this[0];{if(arguments.length)return i=ot.isFunction(t),this.each(function(n){var r;1===this.nodeType&&(r=i?t.call(this,n,ot(this).val()):t,null==r?r="":"number"==typeof r?r+="":ot.isArray(r)&&(r=ot.map(r,function(t){return null==t?"":t+""})),e=ot.valHooks[this.type]||ot.valHooks[this.nodeName.toLowerCase()],e&&"set"in e&&void 0!==e.set(this,r,"value")||(this.value=r))});if(r)return e=ot.valHooks[r.type]||ot.valHooks[r.nodeName.toLowerCase()],e&&"get"in e&&void 0!==(n=e.get(r,"value"))?n:(n=r.value,"string"==typeof n?n.replace(fe,""):null==n?"":n)}}}),ot.extend({valHooks:{option:{get:function(t){return ot.trim(t.value)}},select:{get:function(t){for(var e,n,i=t.options,r=t.selectedIndex,o="select-one"===t.type||0>r,s=o?null:[],a=o?r+1:i.length,u=0>r?a:o?r:0;a>u;u++)if(n=i[u],(n.selected||u===r)&&(it.optDisabled?!n.disabled:null===n.getAttribute("disabled"))&&(!n.parentNode.disabled||!ot.nodeName(n.parentNode,"optgroup"))){if(e=ot(n).val(),o)return e;s.push(e)}return s},set:function(t,e){for(var n,i,r=t.options,o=ot.makeArray(e),s=r.length;s--;)i=r[s],(i.selected=ot.inArray(ot.valHooks.option.get(i),o)>-1)&&(n=!0);return n||(t.selectedIndex=-1),o}}}}),ot.each(["radio","checkbox"],function(){ot.valHooks[this]={set:function(t,e){return ot.isArray(e)?t.checked=ot.inArray(ot(t).val(),e)>-1:void 0}},it.checkOn||(ot.valHooks[this].get=function(t){return null===t.getAttribute("value")?"on":t.value})});var de=/^(?:focusinfocus|focusoutblur)$/;ot.extend(ot.event,{trigger:function(e,n,i,r){var o,s,a,u,l,c,h,p=[i||Q],f=nt.call(e,"type")?e.type:e,d=nt.call(e,"namespace")?e.namespace.split("."):[];if(s=a=i=i||Q,3!==i.nodeType&&8!==i.nodeType&&!de.test(f+ot.event.triggered)&&(f.indexOf(".")>-1&&(d=f.split("."),f=d.shift(),d.sort()),l=f.indexOf(":")<0&&"on"+f,e=e[ot.expando]?e:new ot.Event(f,"object"==typeof e&&e),e.isTrigger=r?2:3,e.namespace=d.join("."),e.rnamespace=e.namespace?new RegExp("(^|\\.)"+d.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,e.result=void 0,e.target||(e.target=i),n=null==n?[e]:ot.makeArray(n,[e]),h=ot.event.special[f]||{},r||!h.trigger||h.trigger.apply(i,n)!==!1)){if(!r&&!h.noBubble&&!ot.isWindow(i)){for(u=h.delegateType||f,de.test(u+f)||(s=s.parentNode);s;s=s.parentNode)p.push(s),a=s;a===(i.ownerDocument||Q)&&p.push(a.defaultView||a.parentWindow||t)}for(o=0;(s=p[o++])&&!e.isPropagationStopped();)e.type=o>1?u:h.bindType||f,c=(Et.get(s,"events")||{})[e.type]&&Et.get(s,"handle"),c&&c.apply(s,n),c=l&&s[l],c&&c.apply&&Ct(s)&&(e.result=c.apply(s,n),e.result===!1&&e.preventDefault());return e.type=f,r||e.isDefaultPrevented()||h._default&&h._default.apply(p.pop(),n)!==!1||!Ct(i)||l&&ot.isFunction(i[f])&&!ot.isWindow(i)&&(a=i[l],a&&(i[l]=null),ot.event.triggered=f,i[f](),ot.event.triggered=void 0,a&&(i[l]=a)),e.result}},simulate:function(t,e,n){var i=ot.extend(new ot.Event,n,{type:t,isSimulated:!0});ot.event.trigger(i,null,e),i.isDefaultPrevented()&&n.preventDefault()}}),ot.fn.extend({trigger:function(t,e){return this.each(function(){ot.event.trigger(t,e,this)})},triggerHandler:function(t,e){var n=this[0];return n?ot.event.trigger(t,e,n,!0):void 0}}),ot.each("blur focus focusin focusout load resize scroll unload click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup error contextmenu".split(" "),function(t,e){ot.fn[e]=function(t,n){return arguments.length>0?this.on(e,null,t,n):this.trigger(e)}}),ot.fn.extend({hover:function(t,e){return this.mouseenter(t).mouseleave(e||t)}}),it.focusin="onfocusin"in t,it.focusin||ot.each({focus:"focusin",blur:"focusout"},function(t,e){var n=function(t){ot.event.simulate(e,t.target,ot.event.fix(t))};ot.event.special[e]={setup:function(){var i=this.ownerDocument||this,r=Et.access(i,e);r||i.addEventListener(t,n,!0),Et.access(i,e,(r||0)+1)},teardown:function(){var i=this.ownerDocument||this,r=Et.access(i,e)-1;r?Et.access(i,e,r):(i.removeEventListener(t,n,!0),Et.remove(i,e))}}});var me=t.location,ye=ot.now(),ge=/\?/;ot.parseJSON=function(t){return JSON.parse(t+"")},ot.parseXML=function(e){var n;if(!e||"string"!=typeof e)return null;try{n=(new t.DOMParser).parseFromString(e,"text/xml")}catch(i){n=void 0}return n&&!n.getElementsByTagName("parsererror").length||ot.error("Invalid XML: "+e),n};var ve=/#.*$/,xe=/([?&])_=[^&]*/,be=/^(.*?):[ \t]*([^\r\n]*)$/gm,_e=/^(?:about|app|app-storage|.+-extension|file|res|widget):$/,we=/^(?:GET|HEAD)$/,Te=/^\/\//,Ce={},Ee={},je="*/".concat("*"),Se=Q.createElement("a");Se.href=me.href,ot.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:me.href,type:"GET",isLocal:_e.test(me.protocol),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":je,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/\bxml\b/,html:/\bhtml/,json:/\bjson\b/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":ot.parseJSON,"text xml":ot.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(t,e){return e?B(B(t,ot.ajaxSettings),e):B(ot.ajaxSettings,t)},ajaxPrefilter:M(Ce),ajaxTransport:M(Ee),ajax:function(e,n){function i(e,n,i,a){var l,h,v,x,_,T=n;2!==b&&(b=2,u&&t.clearTimeout(u),r=void 0,s=a||"",w.readyState=e>0?4:0,l=e>=200&&300>e||304===e,i&&(x=$(p,w,i)),x=U(p,x,w,l),l?(p.ifModified&&(_=w.getResponseHeader("Last-Modified"),_&&(ot.lastModified[o]=_),_=w.getResponseHeader("etag"),_&&(ot.etag[o]=_)),204===e||"HEAD"===p.type?T="nocontent":304===e?T="notmodified":(T=x.state,h=x.data,v=x.error,l=!v)):(v=T,!e&&T||(T="error",0>e&&(e=0))),w.status=e,w.statusText=(n||T)+"",l?m.resolveWith(f,[h,T,w]):m.rejectWith(f,[w,T,v]),w.statusCode(g),g=void 0,c&&d.trigger(l?"ajaxSuccess":"ajaxError",[w,p,l?h:v]),y.fireWith(f,[w,T]),c&&(d.trigger("ajaxComplete",[w,p]),--ot.active||ot.event.trigger("ajaxStop")))}"object"==typeof e&&(n=e,e=void 0),n=n||{};var r,o,s,a,u,l,c,h,p=ot.ajaxSetup({},n),f=p.context||p,d=p.context&&(f.nodeType||f.jquery)?ot(f):ot.event,m=ot.Deferred(),y=ot.Callbacks("once memory"),g=p.statusCode||{},v={},x={},b=0,_="canceled",w={readyState:0,getResponseHeader:function(t){var e;if(2===b){if(!a)for(a={};e=be.exec(s);)a[e[1].toLowerCase()]=e[2];e=a[t.toLowerCase()]}return null==e?null:e},getAllResponseHeaders:function(){return 2===b?s:null},setRequestHeader:function(t,e){var n=t.toLowerCase();return b||(t=x[n]=x[n]||t,v[t]=e),this},overrideMimeType:function(t){return b||(p.mimeType=t),this},statusCode:function(t){var e;if(t)if(2>b)for(e in t)g[e]=[g[e],t[e]];else w.always(t[w.status]);return this},abort:function(t){var e=t||_;return r&&r.abort(e),i(0,e),this}};if(m.promise(w).complete=y.add,w.success=w.done,w.error=w.fail,p.url=((e||p.url||me.href)+"").replace(ve,"").replace(Te,me.protocol+"//"),p.type=n.method||n.type||p.method||p.type,p.dataTypes=ot.trim(p.dataType||"*").toLowerCase().match(_t)||[""],null==p.crossDomain){l=Q.createElement("a");try{l.href=p.url,l.href=l.href,p.crossDomain=Se.protocol+"//"+Se.host!=l.protocol+"//"+l.host}catch(T){p.crossDomain=!0}}if(p.data&&p.processData&&"string"!=typeof p.data&&(p.data=ot.param(p.data,p.traditional)),W(Ce,p,n,w),2===b)return w;c=ot.event&&p.global,c&&0===ot.active++&&ot.event.trigger("ajaxStart"),p.type=p.type.toUpperCase(),p.hasContent=!we.test(p.type),o=p.url,p.hasContent||(p.data&&(o=p.url+=(ge.test(o)?"&":"?")+p.data,delete p.data),p.cache===!1&&(p.url=xe.test(o)?o.replace(xe,"$1_="+ye++):o+(ge.test(o)?"&":"?")+"_="+ye++)),p.ifModified&&(ot.lastModified[o]&&w.setRequestHeader("If-Modified-Since",ot.lastModified[o]),ot.etag[o]&&w.setRequestHeader("If-None-Match",ot.etag[o])),(p.data&&p.hasContent&&p.contentType!==!1||n.contentType)&&w.setRequestHeader("Content-Type",p.contentType),w.setRequestHeader("Accept",p.dataTypes[0]&&p.accepts[p.dataTypes[0]]?p.accepts[p.dataTypes[0]]+("*"!==p.dataTypes[0]?", "+je+"; q=0.01":""):p.accepts["*"]);for(h in p.headers)w.setRequestHeader(h,p.headers[h]);if(p.beforeSend&&(p.beforeSend.call(f,w,p)===!1||2===b))return w.abort();_="abort";for(h in{success:1,error:1,complete:1})w[h](p[h]);if(r=W(Ee,p,n,w)){if(w.readyState=1,c&&d.trigger("ajaxSend",[w,p]),2===b)return w;p.async&&p.timeout>0&&(u=t.setTimeout(function(){w.abort("timeout")},p.timeout));try{b=1,r.send(v,i)}catch(T){if(!(2>b))throw T;i(-1,T)}}else i(-1,"No Transport");return w},getJSON:function(t,e,n){return ot.get(t,e,n,"json")},getScript:function(t,e){return ot.get(t,void 0,e,"script")}}),ot.each(["get","post"],function(t,e){ot[e]=function(t,n,i,r){return ot.isFunction(n)&&(r=r||i,i=n,n=void 0),ot.ajax(ot.extend({url:t,type:e,dataType:r,data:n,success:i},ot.isPlainObject(t)&&t))}}),ot._evalUrl=function(t){return ot.ajax({url:t,type:"GET",dataType:"script",async:!1,global:!1,"throws":!0})},ot.fn.extend({wrapAll:function(t){var e;return ot.isFunction(t)?this.each(function(e){ot(this).wrapAll(t.call(this,e))}):(this[0]&&(e=ot(t,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&e.insertBefore(this[0]),e.map(function(){for(var t=this;t.firstElementChild;)t=t.firstElementChild;return t}).append(this)),this)},wrapInner:function(t){return ot.isFunction(t)?this.each(function(e){ot(this).wrapInner(t.call(this,e))}):this.each(function(){var e=ot(this),n=e.contents();n.length?n.wrapAll(t):e.append(t)})},wrap:function(t){var e=ot.isFunction(t);return this.each(function(n){ot(this).wrapAll(e?t.call(this,n):t)})},unwrap:function(){return this.parent().each(function(){ot.nodeName(this,"body")||ot(this).replaceWith(this.childNodes)}).end()}}),ot.expr.filters.hidden=function(t){return!ot.expr.filters.visible(t)},ot.expr.filters.visible=function(t){return t.offsetWidth>0||t.offsetHeight>0||t.getClientRects().length>0};var Le=/%20/g,Ie=/\[\]$/,De=/\r?\n/g,ke=/^(?:submit|button|image|reset|file)$/i,ze=/^(?:input|select|textarea|keygen)/i;ot.param=function(t,e){var n,i=[],r=function(t,e){e=ot.isFunction(e)?e():null==e?"":e,i[i.length]=encodeURIComponent(t)+"="+encodeURIComponent(e)};if(void 0===e&&(e=ot.ajaxSettings&&ot.ajaxSettings.traditional),ot.isArray(t)||t.jquery&&!ot.isPlainObject(t))ot.each(t,function(){r(this.name,this.value)});else for(n in t)Y(n,t[n],e,r);return i.join("&").replace(Le,"+")},ot.fn.extend({serialize:function(){return ot.param(this.serializeArray())},serializeArray:function(){return this.map(function(){var t=ot.prop(this,"elements");return t?ot.makeArray(t):this}).filter(function(){var t=this.type;return this.name&&!ot(this).is(":disabled")&&ze.test(this.nodeName)&&!ke.test(t)&&(this.checked||!At.test(t))}).map(function(t,e){var n=ot(this).val();return null==n?null:ot.isArray(n)?ot.map(n,function(t){return{name:e.name,value:t.replace(De,"\r\n")}}):{name:e.name,value:n.replace(De,"\r\n")}}).get()}}),ot.ajaxSettings.xhr=function(){try{return new t.XMLHttpRequest}catch(e){}};var Ae={0:200,1223:204},Ne=ot.ajaxSettings.xhr();it.cors=!!Ne&&"withCredentials"in Ne,it.ajax=Ne=!!Ne,ot.ajaxTransport(function(e){var n,i;return it.cors||Ne&&!e.crossDomain?{send:function(r,o){var s,a=e.xhr();if(a.open(e.type,e.url,e.async,e.username,e.password),e.xhrFields)for(s in e.xhrFields)a[s]=e.xhrFields[s];e.mimeType&&a.overrideMimeType&&a.overrideMimeType(e.mimeType),e.crossDomain||r["X-Requested-With"]||(r["X-Requested-With"]="XMLHttpRequest");for(s in r)a.setRequestHeader(s,r[s]);n=function(t){return function(){n&&(n=i=a.onload=a.onerror=a.onabort=a.onreadystatechange=null,"abort"===t?a.abort():"error"===t?"number"!=typeof a.status?o(0,"error"):o(a.status,a.statusText):o(Ae[a.status]||a.status,a.statusText,"text"!==(a.responseType||"text")||"string"!=typeof a.responseText?{binary:a.response}:{text:a.responseText},a.getAllResponseHeaders()))}},a.onload=n(),i=a.onerror=n("error"),void 0!==a.onabort?a.onabort=i:a.onreadystatechange=function(){4===a.readyState&&t.setTimeout(function(){n&&i()})},n=n("abort");try{a.send(e.hasContent&&e.data||null)}catch(u){if(n)throw u}},abort:function(){n&&n()}}:void 0}),ot.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/\b(?:java|ecma)script\b/},converters:{"text script":function(t){return ot.globalEval(t),t}}}),ot.ajaxPrefilter("script",function(t){void 0===t.cache&&(t.cache=!1),t.crossDomain&&(t.type="GET")}),ot.ajaxTransport("script",function(t){if(t.crossDomain){var e,n;return{send:function(i,r){e=ot("<script>").prop({charset:t.scriptCharset,src:t.url}).on("load error",n=function(t){e.remove(),n=null,t&&r("error"===t.type?404:200,t.type)}),Q.head.appendChild(e[0])},abort:function(){n&&n()}}}});var qe=[],Oe=/(=)\?(?=&|$)|\?\?/;ot.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var t=qe.pop()||ot.expando+"_"+ye++;return this[t]=!0,t}}),ot.ajaxPrefilter("json jsonp",function(e,n,i){var r,o,s,a=e.jsonp!==!1&&(Oe.test(e.url)?"url":"string"==typeof e.data&&0===(e.contentType||"").indexOf("application/x-www-form-urlencoded")&&Oe.test(e.data)&&"data");return a||"jsonp"===e.dataTypes[0]?(r=e.jsonpCallback=ot.isFunction(e.jsonpCallback)?e.jsonpCallback():e.jsonpCallback,a?e[a]=e[a].replace(Oe,"$1"+r):e.jsonp!==!1&&(e.url+=(ge.test(e.url)?"&":"?")+e.jsonp+"="+r),e.converters["script json"]=function(){return s||ot.error(r+" was not called"),s[0]},e.dataTypes[0]="json",o=t[r],t[r]=function(){s=arguments},i.always(function(){void 0===o?ot(t).removeProp(r):t[r]=o,e[r]&&(e.jsonpCallback=n.jsonpCallback,qe.push(r)),s&&ot.isFunction(o)&&o(s[0]),s=o=void 0}),"script"):void 0}),it.createHTMLDocument=function(){var t=Q.implementation.createHTMLDocument("").body;return t.innerHTML="<form></form><form></form>",2===t.childNodes.length}(),ot.parseHTML=function(t,e,n){if(!t||"string"!=typeof t)return null;"boolean"==typeof e&&(n=e,e=!1),e=e||(it.createHTMLDocument?Q.implementation.createHTMLDocument(""):Q);var i=dt.exec(t),r=!n&&[];return i?[e.createElement(i[1])]:(i=p([t],e,r),r&&r.length&&ot(r).remove(),ot.merge([],i.childNodes))};var Re=ot.fn.load;ot.fn.load=function(t,e,n){if("string"!=typeof t&&Re)return Re.apply(this,arguments);var i,r,o,s=this,a=t.indexOf(" ");return a>-1&&(i=ot.trim(t.slice(a)),t=t.slice(0,a)),ot.isFunction(e)?(n=e,e=void 0):e&&"object"==typeof e&&(r="POST"),s.length>0&&ot.ajax({url:t,type:r||"GET",dataType:"html",data:e}).done(function(t){o=arguments,s.html(i?ot("<div>").append(ot.parseHTML(t)).find(i):t)}).always(n&&function(t,e){s.each(function(){n.apply(s,o||[t.responseText,e,t])})}),this},ot.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],function(t,e){ot.fn[e]=function(t){return this.on(e,t)}}),ot.expr.filters.animated=function(t){return ot.grep(ot.timers,function(e){return t===e.elem}).length},ot.offset={setOffset:function(t,e,n){var i,r,o,s,a,u,l,c=ot.css(t,"position"),h=ot(t),p={};"static"===c&&(t.style.position="relative"),a=h.offset(),o=ot.css(t,"top"),u=ot.css(t,"left"),l=("absolute"===c||"fixed"===c)&&(o+u).indexOf("auto")>-1,l?(i=h.position(),s=i.top,r=i.left):(s=parseFloat(o)||0,r=parseFloat(u)||0),ot.isFunction(e)&&(e=e.call(t,n,ot.extend({},a))),null!=e.top&&(p.top=e.top-a.top+s),null!=e.left&&(p.left=e.left-a.left+r),"using"in e?e.using.call(t,p):h.css(p)}},ot.fn.extend({offset:function(t){if(arguments.length)return void 0===t?this:this.each(function(e){ot.offset.setOffset(this,t,e)});var e,n,i=this[0],r={top:0,left:0},o=i&&i.ownerDocument;if(o)return e=o.documentElement,ot.contains(e,i)?(r=i.getBoundingClientRect(),n=V(o),{top:r.top+n.pageYOffset-e.clientTop,left:r.left+n.pageXOffset-e.clientLeft}):r},position:function(){if(this[0]){var t,e,n=this[0],i={top:0,left:0};return"fixed"===ot.css(n,"position")?e=n.getBoundingClientRect():(t=this.offsetParent(),e=this.offset(),ot.nodeName(t[0],"html")||(i=t.offset()),i.top+=ot.css(t[0],"borderTopWidth",!0),i.left+=ot.css(t[0],"borderLeftWidth",!0)),{top:e.top-i.top-ot.css(n,"marginTop",!0),left:e.left-i.left-ot.css(n,"marginLeft",!0)}}},offsetParent:function(){return this.map(function(){for(var t=this.offsetParent;t&&"static"===ot.css(t,"position");)t=t.offsetParent;return t||Kt})}}),ot.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},function(t,e){var n="pageYOffset"===e;ot.fn[t]=function(i){return Tt(this,function(t,i,r){var o=V(t);return void 0===r?o?o[e]:t[i]:void(o?o.scrollTo(n?o.pageXOffset:r,n?r:o.pageYOffset):t[i]=r)},t,i,arguments.length)}}),ot.each(["top","left"],function(t,e){ot.cssHooks[e]=S(it.pixelPosition,function(t,n){return n?(n=j(t,e),Qt.test(n)?ot(t).position()[e]+"px":n):void 0})}),ot.each({Height:"height",Width:"width"},function(t,e){ot.each({padding:"inner"+t,content:e,"":"outer"+t},function(n,i){ot.fn[i]=function(i,r){var o=arguments.length&&(n||"boolean"!=typeof i),s=n||(i===!0||r===!0?"margin":"border");return Tt(this,function(e,n,i){var r;return ot.isWindow(e)?e.document.documentElement["client"+t]:9===e.nodeType?(r=e.documentElement,Math.max(e.body["scroll"+t],r["scroll"+t],e.body["offset"+t],r["offset"+t],r["client"+t])):void 0===i?ot.css(e,n,s):ot.style(e,n,i,s)},e,o?i:void 0,o,null)}})}),ot.fn.extend({bind:function(t,e,n){return this.on(t,null,e,n)},unbind:function(t,e){return this.off(t,null,e)},delegate:function(t,e,n,i){return this.on(e,t,n,i)},undelegate:function(t,e,n){return 1===arguments.length?this.off(t,"**"):this.off(e,t||"**",n)},size:function(){return this.length}}),ot.fn.andSelf=ot.fn.addBack,"function"==typeof define&&define.amd&&define("jquery",[],function(){return ot});var He=t.jQuery,Pe=t.$;return ot.noConflict=function(e){return t.$===ot&&(t.$=Pe),e&&t.jQuery===ot&&(t.jQuery=He),ot},e||(t.jQuery=t.$=ot),ot}),function(t){"use strict";var e=t.jCarousel={};e.version="0.3.4";var n=/^([+\-]=)?(.+)$/;e.parseTarget=function(t){var e=!1,i="object"!=typeof t?n.exec(t):null;return i?(t=parseInt(i[2],10)||0,i[1]&&(e=!0,"-="===i[1]&&(t*=-1))):"object"!=typeof t&&(t=parseInt(t,10)||0),{target:t,relative:e}},e.detectCarousel=function(t){for(var e;t.length>0;){if(e=t.filter("[data-jcarousel]"),e.length>0)return e;if(e=t.find("[data-jcarousel]"),e.length>0)return e;t=t.parent()}return null},e.base=function(n){return{version:e.version,_options:{},_element:null,_carousel:null,_init:t.noop,_create:t.noop,_destroy:t.noop,_reload:t.noop,create:function(){return this._element.attr("data-"+n.toLowerCase(),!0).data(n,this),!1===this._trigger("create")?this:(this._create(),this._trigger("createend"),this)},destroy:function(){return!1===this._trigger("destroy")?this:(this._destroy(),this._trigger("destroyend"),this._element.removeData(n).removeAttr("data-"+n.toLowerCase()),this)},reload:function(t){return!1===this._trigger("reload")?this:(t&&this.options(t),this._reload(),this._trigger("reloadend"),this)},element:function(){return this._element},options:function(e,n){if(0===arguments.length)return t.extend({},this._options);if("string"==typeof e){if("undefined"==typeof n)return"undefined"==typeof this._options[e]?null:this._options[e];this._options[e]=n}else this._options=t.extend({},this._options,e);return this},carousel:function(){return this._carousel||(this._carousel=e.detectCarousel(this.options("carousel")||this._element),this._carousel||t.error('Could not detect carousel for plugin "'+n+'"')),this._carousel},_trigger:function(e,i,r){var o,s=!1;return r=[this].concat(r||[]),(i||this._element).each(function(){o=t.Event((n+":"+e).toLowerCase()),t(this).trigger(o,r),o.isDefaultPrevented()&&(s=!0)}),!s}}},e.plugin=function(n,i){var r=t[n]=function(e,n){this._element=t(e),this.options(n),this._init(),this.create()};return r.fn=r.prototype=t.extend({},e.base(n),i),t.fn[n]=function(e){var i=Array.prototype.slice.call(arguments,1),o=this;return"string"==typeof e?this.each(function(){var r=t(this).data(n);if(!r)return t.error("Cannot call methods on "+n+' prior to initialization; attempted to call method "'+e+'"');if(!t.isFunction(r[e])||"_"===e.charAt(0))return t.error('No such method "'+e+'" for '+n+" instance");var s=r[e].apply(r,i);return s!==r&&"undefined"!=typeof s?(o=s,!1):void 0}):this.each(function(){var i=t(this).data(n);i instanceof r?i.reload(e):new r(this,e)}),o},r}}(jQuery),function(t,e){"use strict";var n=function(t){return parseFloat(t)||0};t.jCarousel.plugin("jcarousel",{animating:!1,tail:0,inTail:!1,resizeTimer:null,lt:null,vertical:!1,rtl:!1,circular:!1,underflow:!1,relative:!1,_options:{list:function(){return this.element().children().eq(0)},items:function(){return this.list().children()},animation:400,transitions:!1,wrap:null,vertical:null,rtl:null,center:!1},_list:null,_items:null,_target:t(),_first:t(),_last:t(),_visible:t(),_fullyvisible:t(),_init:function(){var t=this;return this.onWindowResize=function(){t.resizeTimer&&clearTimeout(t.resizeTimer),t.resizeTimer=setTimeout(function(){t.reload()},100)},this},_create:function(){this._reload(),t(e).on("resize.jcarousel",this.onWindowResize)},_destroy:function(){t(e).off("resize.jcarousel",this.onWindowResize)},_reload:function(){this.vertical=this.options("vertical"),null==this.vertical&&(this.vertical=this.list().height()>this.list().width()),this.rtl=this.options("rtl"),null==this.rtl&&(this.rtl=function(e){if("rtl"===(""+e.attr("dir")).toLowerCase())return!0;var n=!1;return e.parents("[dir]").each(function(){return/rtl/i.test(t(this).attr("dir"))?(n=!0,!1):void 0}),n}(this._element)),this.lt=this.vertical?"top":"left",this.relative="relative"===this.list().css("position"),this._list=null,this._items=null;var e=this.index(this._target)>=0?this._target:this.closest();this.circular="circular"===this.options("wrap"),this.underflow=!1;var n={left:0,top:0};return e.length>0&&(this._prepare(e),this.list().find("[data-jcarousel-clone]").remove(),this._items=null,this.underflow=this._fullyvisible.length>=this.items().length,this.circular=this.circular&&!this.underflow,n[this.lt]=this._position(e)+"px"),this.move(n),this},list:function(){if(null===this._list){var e=this.options("list");this._list=t.isFunction(e)?e.call(this):this._element.find(e)}return this._list},items:function(){if(null===this._items){var e=this.options("items");this._items=(t.isFunction(e)?e.call(this):this.list().find(e)).not("[data-jcarousel-clone]")}return this._items},index:function(t){return this.items().index(t)},closest:function(){var e,i=this,r=this.list().position()[this.lt],o=t(),s=!1,a=this.vertical?"bottom":this.rtl&&!this.relative?"left":"right";return this.rtl&&this.relative&&!this.vertical&&(r+=this.list().width()-this.clipping()),this.items().each(function(){if(o=t(this),s)return!1;var u=i.dimension(o);if(r+=u,r>=0){if(e=u-n(o.css("margin-"+a)),!(Math.abs(r)-u+e/2<=0))return!1;s=!0}}),o},target:function(){return this._target},first:function(){return this._first},last:function(){return this._last},visible:function(){return this._visible},fullyvisible:function(){return this._fullyvisible},hasNext:function(){if(!1===this._trigger("hasnext"))return!0;var t=this.options("wrap"),e=this.items().length-1,n=this.options("center")?this._target:this._last;return!!(e>=0&&!this.underflow&&(t&&"first"!==t||this.index(n)<e||this.tail&&!this.inTail))},hasPrev:function(){if(!1===this._trigger("hasprev"))return!0;var t=this.options("wrap");return!!(this.items().length>0&&!this.underflow&&(t&&"last"!==t||this.index(this._first)>0||this.tail&&this.inTail))},clipping:function(){return this._element["inner"+(this.vertical?"Height":"Width")]()},dimension:function(t){return t["outer"+(this.vertical?"Height":"Width")](!0)},scroll:function(e,n,i){if(this.animating)return this;if(!1===this._trigger("scroll",null,[e,n]))return this;t.isFunction(n)&&(i=n,n=!0);var r=t.jCarousel.parseTarget(e);if(r.relative){var o,s,a,u,l,c,h,p,f=this.items().length-1,d=Math.abs(r.target),m=this.options("wrap");if(r.target>0){var y=this.index(this._last);if(y>=f&&this.tail)this.inTail?"both"===m||"last"===m?this._scroll(0,n,i):t.isFunction(i)&&i.call(this,!1):this._scrollTail(n,i);else if(o=this.index(this._target),this.underflow&&o===f&&("circular"===m||"both"===m||"last"===m)||!this.underflow&&y===f&&("both"===m||"last"===m))this._scroll(0,n,i);else if(a=o+d,this.circular&&a>f){for(p=f,l=this.items().get(-1);p++<a;)l=this.items().eq(0),c=this._visible.index(l)>=0,c&&l.after(l.clone(!0).attr("data-jcarousel-clone",!0)),this.list().append(l),c||(h={},h[this.lt]=this.dimension(l),this.moveBy(h)),this._items=null;this._scroll(l,n,i)}else this._scroll(Math.min(a,f),n,i)}else if(this.inTail)this._scroll(Math.max(this.index(this._first)-d+1,0),n,i);else if(s=this.index(this._first),o=this.index(this._target),u=this.underflow?o:s,a=u-d,0>=u&&(this.underflow&&"circular"===m||"both"===m||"first"===m))this._scroll(f,n,i);else if(this.circular&&0>a){for(p=a,l=this.items().get(0);p++<0;){l=this.items().eq(-1),c=this._visible.index(l)>=0,c&&l.after(l.clone(!0).attr("data-jcarousel-clone",!0)),this.list().prepend(l),this._items=null;var g=this.dimension(l);h={},h[this.lt]=-g,this.moveBy(h)}this._scroll(l,n,i)}else this._scroll(Math.max(a,0),n,i)}else this._scroll(r.target,n,i);return this._trigger("scrollend"),this},moveBy:function(t,e){var i=this.list().position(),r=1,o=0;return this.rtl&&!this.vertical&&(r=-1,this.relative&&(o=this.list().width()-this.clipping())),t.left&&(t.left=i.left+o+n(t.left)*r+"px"),t.top&&(t.top=i.top+o+n(t.top)*r+"px"),this.move(t,e)},move:function(e,n){n=n||{};var i=this.options("transitions"),r=!!i,o=!!i.transforms,s=!!i.transforms3d,a=n.duration||0,u=this.list();if(!r&&a>0)return void u.animate(e,n);var l=n.complete||t.noop,c={};if(r){var h={transitionDuration:u.css("transitionDuration"),transitionTimingFunction:u.css("transitionTimingFunction"),transitionProperty:u.css("transitionProperty")},p=l;l=function(){t(this).css(h),p.call(this)},c={transitionDuration:(a>0?a/1e3:0)+"s",transitionTimingFunction:i.easing||n.easing,transitionProperty:a>0?function(){return o||s?"all":e.left?"left":"top"}():"none",transform:"none"}}s?c.transform="translate3d("+(e.left||0)+","+(e.top||0)+",0)":o?c.transform="translate("+(e.left||0)+","+(e.top||0)+")":t.extend(c,e),r&&a>0&&u.one("transitionend webkitTransitionEnd oTransitionEnd otransitionend MSTransitionEnd",l),u.css(c),0>=a&&u.each(function(){l.call(this)})},_scroll:function(e,n,i){if(this.animating)return t.isFunction(i)&&i.call(this,!1),this;if("object"!=typeof e?e=this.items().eq(e):"undefined"==typeof e.jquery&&(e=t(e)),0===e.length)return t.isFunction(i)&&i.call(this,!1),this;this.inTail=!1,this._prepare(e);var r=this._position(e),o=this.list().position()[this.lt];if(r===o)return t.isFunction(i)&&i.call(this,!1),this;var s={};return s[this.lt]=r+"px",this._animate(s,n,i),this},_scrollTail:function(e,n){if(this.animating||!this.tail)return t.isFunction(n)&&n.call(this,!1),this;var i=this.list().position()[this.lt];this.rtl&&this.relative&&!this.vertical&&(i+=this.list().width()-this.clipping()),this.rtl&&!this.vertical?i+=this.tail:i-=this.tail,this.inTail=!0;var r={};return r[this.lt]=i+"px",this._update({target:this._target.next(),fullyvisible:this._fullyvisible.slice(1).add(this._visible.last())}),this._animate(r,e,n),this},_animate:function(e,n,i){if(i=i||t.noop,!1===this._trigger("animate"))return i.call(this,!1),this;this.animating=!0;var r=this.options("animation"),o=t.proxy(function(){this.animating=!1;var t=this.list().find("[data-jcarousel-clone]");t.length>0&&(t.remove(),this._reload()),this._trigger("animateend"),i.call(this,!0)},this),s="object"==typeof r?t.extend({},r):{duration:r},a=s.complete||t.noop;return n===!1?s.duration=0:"undefined"!=typeof t.fx.speeds[s.duration]&&(s.duration=t.fx.speeds[s.duration]),
s.complete=function(){o(),a.call(this)},this.move(e,s),this},_prepare:function(e){var i,r,o,s,a=this.index(e),u=a,l=this.dimension(e),c=this.clipping(),h=this.vertical?"bottom":this.rtl?"left":"right",p=this.options("center"),f={target:e,first:e,last:e,visible:e,fullyvisible:c>=l?e:t()};if(p&&(l/=2,c/=2),c>l)for(;;){if(i=this.items().eq(++u),0===i.length){if(!this.circular)break;if(i=this.items().eq(0),e.get(0)===i.get(0))break;if(r=this._visible.index(i)>=0,r&&i.after(i.clone(!0).attr("data-jcarousel-clone",!0)),this.list().append(i),!r){var d={};d[this.lt]=this.dimension(i),this.moveBy(d)}this._items=null}if(s=this.dimension(i),0===s)break;if(l+=s,f.last=i,f.visible=f.visible.add(i),o=n(i.css("margin-"+h)),c>=l-o&&(f.fullyvisible=f.fullyvisible.add(i)),l>=c)break}if(!this.circular&&!p&&c>l)for(u=a;;){if(--u<0)break;if(i=this.items().eq(u),0===i.length)break;if(s=this.dimension(i),0===s)break;if(l+=s,f.first=i,f.visible=f.visible.add(i),o=n(i.css("margin-"+h)),c>=l-o&&(f.fullyvisible=f.fullyvisible.add(i)),l>=c)break}return this._update(f),this.tail=0,p||"circular"===this.options("wrap")||"custom"===this.options("wrap")||this.index(f.last)!==this.items().length-1||(l-=n(f.last.css("margin-"+h)),l>c&&(this.tail=l-c)),this},_position:function(t){var e=this._first,n=e.position()[this.lt],i=this.options("center"),r=i?this.clipping()/2-this.dimension(e)/2:0;return this.rtl&&!this.vertical?(n-=this.relative?this.list().width()-this.dimension(e):this.clipping()-this.dimension(e),n+=r):n-=r,!i&&(this.index(t)>this.index(e)||this.inTail)&&this.tail?(n=this.rtl&&!this.vertical?n-this.tail:n+this.tail,this.inTail=!0):this.inTail=!1,-n},_update:function(e){var n,i=this,r={target:this._target,first:this._first,last:this._last,visible:this._visible,fullyvisible:this._fullyvisible},o=this.index(e.first||r.first)<this.index(r.first),s=function(n){var s=[],a=[];e[n].each(function(){r[n].index(this)<0&&s.push(this)}),r[n].each(function(){e[n].index(this)<0&&a.push(this)}),o?s=s.reverse():a=a.reverse(),i._trigger(n+"in",t(s)),i._trigger(n+"out",t(a)),i["_"+n]=e[n]};for(n in e)s(n);return this}})}(jQuery,window),function(t){"use strict";t.jcarousel.fn.scrollIntoView=function(e,n,i){var r,o=t.jCarousel.parseTarget(e),s=this.index(this._fullyvisible.first()),a=this.index(this._fullyvisible.last());if(r=o.relative?o.target<0?Math.max(0,s+o.target):a+o.target:"object"!=typeof o.target?o.target:this.index(o.target),s>r)return this.scroll(r,n,i);if(r>=s&&a>=r)return t.isFunction(i)&&i.call(this,!1),this;for(var u,l=this.items(),c=this.clipping(),h=this.vertical?"bottom":this.rtl?"left":"right",p=0;;){if(u=l.eq(r),0===u.length)break;if(p+=this.dimension(u),p>=c){var f=parseFloat(u.css("margin-"+h))||0;p-f!==c&&r++;break}if(0>=r)break;r--}return this.scroll(r,n,i)}}(jQuery),function(t){"use strict";t.jCarousel.plugin("jcarouselControl",{_options:{target:"+=1",event:"click",method:"scroll"},_active:null,_init:function(){this.onDestroy=t.proxy(function(){this._destroy(),this.carousel().one("jcarousel:createend",t.proxy(this._create,this))},this),this.onReload=t.proxy(this._reload,this),this.onEvent=t.proxy(function(e){e.preventDefault();var n=this.options("method");t.isFunction(n)?n.call(this):this.carousel().jcarousel(this.options("method"),this.options("target"))},this)},_create:function(){this.carousel().one("jcarousel:destroy",this.onDestroy).on("jcarousel:reloadend jcarousel:scrollend",this.onReload),this._element.on(this.options("event")+".jcarouselcontrol",this.onEvent),this._reload()},_destroy:function(){this._element.off(".jcarouselcontrol",this.onEvent),this.carousel().off("jcarousel:destroy",this.onDestroy).off("jcarousel:reloadend jcarousel:scrollend",this.onReload)},_reload:function(){var e,n=t.jCarousel.parseTarget(this.options("target")),i=this.carousel();if(n.relative)e=i.jcarousel(n.target>0?"hasNext":"hasPrev");else{var r="object"!=typeof n.target?i.jcarousel("items").eq(n.target):n.target;e=i.jcarousel("target").index(r)>=0}return this._active!==e&&(this._trigger(e?"active":"inactive"),this._active=e),this}})}(jQuery),function(t){"use strict";t.jCarousel.plugin("jcarouselPagination",{_options:{perPage:null,item:function(t){return'<a href="#'+t+'">'+t+"</a>"},event:"click",method:"scroll"},_carouselItems:null,_pages:{},_items:{},_currentPage:null,_init:function(){this.onDestroy=t.proxy(function(){this._destroy(),this.carousel().one("jcarousel:createend",t.proxy(this._create,this))},this),this.onReload=t.proxy(this._reload,this),this.onScroll=t.proxy(this._update,this)},_create:function(){this.carousel().one("jcarousel:destroy",this.onDestroy).on("jcarousel:reloadend",this.onReload).on("jcarousel:scrollend",this.onScroll),this._reload()},_destroy:function(){this._clear(),this.carousel().off("jcarousel:destroy",this.onDestroy).off("jcarousel:reloadend",this.onReload).off("jcarousel:scrollend",this.onScroll),this._carouselItems=null},_reload:function(){var e=this.options("perPage");if(this._pages={},this._items={},t.isFunction(e)&&(e=e.call(this)),null==e)this._pages=this._calculatePages();else for(var n,i=parseInt(e,10)||0,r=this._getCarouselItems(),o=1,s=0;;){if(n=r.eq(s++),0===n.length)break;this._pages[o]?this._pages[o]=this._pages[o].add(n):this._pages[o]=n,s%i===0&&o++}this._clear();var a=this,u=this.carousel().data("jcarousel"),l=this._element,c=this.options("item"),h=this._getCarouselItems().length;t.each(this._pages,function(e,n){var i=a._items[e]=t(c.call(a,e,n));i.on(a.options("event")+".jcarouselpagination",t.proxy(function(){var t=n.eq(0);if(u.circular){var i=u.index(u.target()),r=u.index(t);parseFloat(e)>parseFloat(a._currentPage)?i>r&&(t="+="+(h-i+r)):r>i&&(t="-="+(i+(h-r)))}u[this.options("method")](t)},a)),l.append(i)}),this._update()},_update:function(){var e,n=this.carousel().jcarousel("target");t.each(this._pages,function(t,i){return i.each(function(){return n.is(this)?(e=t,!1):void 0}),e?!1:void 0}),this._currentPage!==e&&(this._trigger("inactive",this._items[this._currentPage]),this._trigger("active",this._items[e])),this._currentPage=e},items:function(){return this._items},reloadCarouselItems:function(){return this._carouselItems=null,this},_clear:function(){this._element.empty(),this._currentPage=null},_calculatePages:function(){for(var t,e,n=this.carousel().data("jcarousel"),i=this._getCarouselItems(),r=n.clipping(),o=0,s=0,a=1,u={};;){if(t=i.eq(s++),0===t.length)break;e=n.dimension(t),o+e>r&&(a++,o=0),o+=e,u[a]?u[a]=u[a].add(t):u[a]=t}return u},_getCarouselItems:function(){return this._carouselItems||(this._carouselItems=this.carousel().jcarousel("items")),this._carouselItems}})}(jQuery),function(t,e){"use strict";var n,i,r={hidden:"visibilitychange",mozHidden:"mozvisibilitychange",msHidden:"msvisibilitychange",webkitHidden:"webkitvisibilitychange"};t.each(r,function(t,r){return"undefined"!=typeof e[t]?(n=t,i=r,!1):void 0}),t.jCarousel.plugin("jcarouselAutoscroll",{_options:{target:"+=1",interval:3e3,autostart:!0},_timer:null,_started:!1,_init:function(){this.onDestroy=t.proxy(function(){this._destroy(),this.carousel().one("jcarousel:createend",t.proxy(this._create,this))},this),this.onAnimateEnd=t.proxy(this._start,this),this.onVisibilityChange=t.proxy(function(){e[n]?this._stop():this._start()},this)},_create:function(){this.carousel().one("jcarousel:destroy",this.onDestroy),t(e).on(i,this.onVisibilityChange),this.options("autostart")&&this.start()},_destroy:function(){this._stop(),this.carousel().off("jcarousel:destroy",this.onDestroy),t(e).off(i,this.onVisibilityChange)},_start:function(){return this._stop(),this._started?(this.carousel().one("jcarousel:animateend",this.onAnimateEnd),this._timer=setTimeout(t.proxy(function(){this.carousel().jcarousel("scroll",this.options("target"))},this),this.options("interval")),this):void 0},_stop:function(){return this._timer&&(this._timer=clearTimeout(this._timer)),this.carousel().off("jcarousel:animateend",this.onAnimateEnd),this},start:function(){return this._started=!0,this._start(),this},stop:function(){return this._started=!1,this._stop(),this}})}(jQuery,document),function(t){function e(){}function n(t){function n(e){e.prototype.option||(e.prototype.option=function(e){t.isPlainObject(e)&&(this.options=t.extend(!0,this.options,e))})}function r(e,n){t.fn[e]=function(r){if("string"==typeof r){for(var s=i.call(arguments,1),a=0,u=this.length;u>a;a++){var l=this[a],c=t.data(l,e);if(c)if(t.isFunction(c[r])&&"_"!==r.charAt(0)){var h=c[r].apply(c,s);if(void 0!==h)return h}else o("no such method '"+r+"' for "+e+" instance");else o("cannot call methods on "+e+" prior to initialization; attempted to call '"+r+"'")}return this}return this.each(function(){var i=t.data(this,e);i?(i.option(r),i._init()):(i=new n(this,r),t.data(this,e,i))})}}if(t){var o="undefined"==typeof console?e:function(t){console.error(t)};return t.bridget=function(t,e){n(e),r(t,e)},t.bridget}}var i=Array.prototype.slice;"function"==typeof define&&define.amd?define("jquery-bridget/jquery.bridget",["jquery"],n):n("object"==typeof exports?require("jquery"):t.jQuery)}(window),function(t){function e(e){var n=t.event;return n.target=n.target||n.srcElement||e,n}var n=document.documentElement,i=function(){};n.addEventListener?i=function(t,e,n){t.addEventListener(e,n,!1)}:n.attachEvent&&(i=function(t,n,i){t[n+i]=i.handleEvent?function(){var n=e(t);i.handleEvent.call(i,n)}:function(){var n=e(t);i.call(t,n)},t.attachEvent("on"+n,t[n+i])});var r=function(){};n.removeEventListener?r=function(t,e,n){t.removeEventListener(e,n,!1)}:n.detachEvent&&(r=function(t,e,n){t.detachEvent("on"+e,t[e+n]);try{delete t[e+n]}catch(i){t[e+n]=void 0}});var o={bind:i,unbind:r};"function"==typeof define&&define.amd?define("eventie/eventie",o):"object"==typeof exports?module.exports=o:t.eventie=o}(window),function(){"use strict";function t(){}function e(t,e){for(var n=t.length;n--;)if(t[n].listener===e)return n;return-1}function n(t){return function(){return this[t].apply(this,arguments)}}var i=t.prototype,r=this,o=r.EventEmitter;i.getListeners=function(t){var e,n,i=this._getEvents();if(t instanceof RegExp){e={};for(n in i)i.hasOwnProperty(n)&&t.test(n)&&(e[n]=i[n])}else e=i[t]||(i[t]=[]);return e},i.flattenListeners=function(t){var e,n=[];for(e=0;e<t.length;e+=1)n.push(t[e].listener);return n},i.getListenersAsObject=function(t){var e,n=this.getListeners(t);return n instanceof Array&&(e={},e[t]=n),e||n},i.addListener=function(t,n){var i,r=this.getListenersAsObject(t),o="object"==typeof n;for(i in r)r.hasOwnProperty(i)&&-1===e(r[i],n)&&r[i].push(o?n:{listener:n,once:!1});return this},i.on=n("addListener"),i.addOnceListener=function(t,e){return this.addListener(t,{listener:e,once:!0})},i.once=n("addOnceListener"),i.defineEvent=function(t){return this.getListeners(t),this},i.defineEvents=function(t){for(var e=0;e<t.length;e+=1)this.defineEvent(t[e]);return this},i.removeListener=function(t,n){var i,r,o=this.getListenersAsObject(t);for(r in o)o.hasOwnProperty(r)&&(i=e(o[r],n),-1!==i&&o[r].splice(i,1));return this},i.off=n("removeListener"),i.addListeners=function(t,e){return this.manipulateListeners(!1,t,e)},i.removeListeners=function(t,e){return this.manipulateListeners(!0,t,e)},i.manipulateListeners=function(t,e,n){var i,r,o=t?this.removeListener:this.addListener,s=t?this.removeListeners:this.addListeners;if("object"!=typeof e||e instanceof RegExp)for(i=n.length;i--;)o.call(this,e,n[i]);else for(i in e)e.hasOwnProperty(i)&&(r=e[i])&&("function"==typeof r?o.call(this,i,r):s.call(this,i,r));return this},i.removeEvent=function(t){var e,n=typeof t,i=this._getEvents();if("string"===n)delete i[t];else if(t instanceof RegExp)for(e in i)i.hasOwnProperty(e)&&t.test(e)&&delete i[e];else delete this._events;return this},i.removeAllListeners=n("removeEvent"),i.emitEvent=function(t,e){var n,i,r,o,s=this.getListenersAsObject(t);for(r in s)if(s.hasOwnProperty(r))for(i=s[r].length;i--;)n=s[r][i],n.once===!0&&this.removeListener(t,n.listener),o=n.listener.apply(this,e||[]),o===this._getOnceReturnValue()&&this.removeListener(t,n.listener);return this},i.trigger=n("emitEvent"),i.emit=function(t){var e=Array.prototype.slice.call(arguments,1);return this.emitEvent(t,e)},i.setOnceReturnValue=function(t){return this._onceReturnValue=t,this},i._getOnceReturnValue=function(){return this.hasOwnProperty("_onceReturnValue")?this._onceReturnValue:!0},i._getEvents=function(){return this._events||(this._events={})},t.noConflict=function(){return r.EventEmitter=o,t},"function"==typeof define&&define.amd?define("eventEmitter/EventEmitter",[],function(){return t}):"object"==typeof module&&module.exports?module.exports=t:r.EventEmitter=t}.call(this),function(t){function e(t){if(t){if("string"==typeof i[t])return t;t=t.charAt(0).toUpperCase()+t.slice(1);for(var e,r=0,o=n.length;o>r;r++)if(e=n[r]+t,"string"==typeof i[e])return e}}var n="Webkit Moz ms Ms O".split(" "),i=document.documentElement.style;"function"==typeof define&&define.amd?define("get-style-property/get-style-property",[],function(){return e}):"object"==typeof exports?module.exports=e:t.getStyleProperty=e}(window),function(t,e){function n(t){var e=parseFloat(t),n=-1===t.indexOf("%")&&!isNaN(e);return n&&e}function i(){}function r(){for(var t={width:0,height:0,innerWidth:0,innerHeight:0,outerWidth:0,outerHeight:0},e=0,n=a.length;n>e;e++){var i=a[e];t[i]=0}return t}function o(e){function i(){if(!p){p=!0;var i=t.getComputedStyle;if(l=function(){var t=i?function(t){return i(t,null)}:function(t){return t.currentStyle};return function(e){var n=t(e);return n||s("Style returned "+n+". Are you running this code in a hidden iframe on Firefox? See http://bit.ly/getsizebug1"),n}}(),c=e("boxSizing")){var r=document.createElement("div");r.style.width="200px",r.style.padding="1px 2px 3px 4px",r.style.borderStyle="solid",r.style.borderWidth="1px 2px 3px 4px",r.style[c]="border-box";var o=document.body||document.documentElement;o.appendChild(r);var a=l(r);h=200===n(a.width),o.removeChild(r)}}}function o(t){if(i(),"string"==typeof t&&(t=document.querySelector(t)),t&&"object"==typeof t&&t.nodeType){var e=l(t);if("none"===e.display)return r();var o={};o.width=t.offsetWidth,o.height=t.offsetHeight;for(var s=o.isBorderBox=!(!c||!e[c]||"border-box"!==e[c]),p=0,f=a.length;f>p;p++){var d=a[p],m=e[d];m=u(t,m);var y=parseFloat(m);o[d]=isNaN(y)?0:y}var g=o.paddingLeft+o.paddingRight,v=o.paddingTop+o.paddingBottom,x=o.marginLeft+o.marginRight,b=o.marginTop+o.marginBottom,_=o.borderLeftWidth+o.borderRightWidth,w=o.borderTopWidth+o.borderBottomWidth,T=s&&h,C=n(e.width);C!==!1&&(o.width=C+(T?0:g+_));var E=n(e.height);return E!==!1&&(o.height=E+(T?0:v+w)),o.innerWidth=o.width-(g+_),o.innerHeight=o.height-(v+w),o.outerWidth=o.width+x,o.outerHeight=o.height+b,o}}function u(e,n){if(t.getComputedStyle||-1===n.indexOf("%"))return n;var i=e.style,r=i.left,o=e.runtimeStyle,s=o&&o.left;return s&&(o.left=e.currentStyle.left),i.left=n,n=i.pixelLeft,i.left=r,s&&(o.left=s),n}var l,c,h,p=!1;return o}var s="undefined"==typeof console?i:function(t){console.error(t)},a=["paddingLeft","paddingRight","paddingTop","paddingBottom","marginLeft","marginRight","marginTop","marginBottom","borderLeftWidth","borderRightWidth","borderTopWidth","borderBottomWidth"];"function"==typeof define&&define.amd?define("get-size/get-size",["get-style-property/get-style-property"],o):"object"==typeof exports?module.exports=o(require("desandro-get-style-property")):t.getSize=o(t.getStyleProperty)}(window),function(t){function e(t){"function"==typeof t&&(e.isReady?t():s.push(t))}function n(t){var n="readystatechange"===t.type&&"complete"!==o.readyState;e.isReady||n||i()}function i(){e.isReady=!0;for(var t=0,n=s.length;n>t;t++){var i=s[t];i()}}function r(r){return"complete"===o.readyState?i():(r.bind(o,"DOMContentLoaded",n),r.bind(o,"readystatechange",n),r.bind(t,"load",n)),e}var o=t.document,s=[];e.isReady=!1,"function"==typeof define&&define.amd?define("doc-ready/doc-ready",["eventie/eventie"],r):"object"==typeof exports?module.exports=r(require("eventie")):t.docReady=r(t.eventie)}(window),function(t){"use strict";function e(t,e){return t[s](e)}function n(t){if(!t.parentNode){var e=document.createDocumentFragment();e.appendChild(t)}}function i(t,e){n(t);for(var i=t.parentNode.querySelectorAll(e),r=0,o=i.length;o>r;r++)if(i[r]===t)return!0;return!1}function r(t,i){return n(t),e(t,i)}var o,s=function(){if(t.matches)return"matches";if(t.matchesSelector)return"matchesSelector";for(var e=["webkit","moz","ms","o"],n=0,i=e.length;i>n;n++){var r=e[n],o=r+"MatchesSelector";if(t[o])return o}}();if(s){var a=document.createElement("div"),u=e(a,"div");o=u?e:r}else o=i;"function"==typeof define&&define.amd?define("matches-selector/matches-selector",[],function(){return o}):"object"==typeof exports?module.exports=o:window.matchesSelector=o}(Element.prototype),function(t,e){"use strict";"function"==typeof define&&define.amd?define("fizzy-ui-utils/utils",["doc-ready/doc-ready","matches-selector/matches-selector"],function(n,i){return e(t,n,i)}):"object"==typeof exports?module.exports=e(t,require("doc-ready"),require("desandro-matches-selector")):t.fizzyUIUtils=e(t,t.docReady,t.matchesSelector)}(window,function(t,e,n){var i={};i.extend=function(t,e){for(var n in e)t[n]=e[n];return t},i.modulo=function(t,e){return(t%e+e)%e};var r=Object.prototype.toString;i.isArray=function(t){return"[object Array]"==r.call(t)},i.makeArray=function(t){var e=[];if(i.isArray(t))e=t;else if(t&&"number"==typeof t.length)for(var n=0,r=t.length;r>n;n++)e.push(t[n]);else e.push(t);return e},i.indexOf=Array.prototype.indexOf?function(t,e){return t.indexOf(e)}:function(t,e){for(var n=0,i=t.length;i>n;n++)if(t[n]===e)return n;return-1},i.removeFrom=function(t,e){var n=i.indexOf(t,e);-1!=n&&t.splice(n,1)},i.isElement="function"==typeof HTMLElement||"object"==typeof HTMLElement?function(t){return t instanceof HTMLElement}:function(t){return t&&"object"==typeof t&&1==t.nodeType&&"string"==typeof t.nodeName},i.setText=function(){function t(t,n){e=e||(void 0!==document.documentElement.textContent?"textContent":"innerText"),t[e]=n}var e;return t}(),i.getParent=function(t,e){for(;t!=document.body;)if(t=t.parentNode,n(t,e))return t},i.getQueryElement=function(t){return"string"==typeof t?document.querySelector(t):t},i.handleEvent=function(t){var e="on"+t.type;this[e]&&this[e](t)},i.filterFindElements=function(t,e){t=i.makeArray(t);for(var r=[],o=0,s=t.length;s>o;o++){var a=t[o];if(i.isElement(a))if(e){n(a,e)&&r.push(a);for(var u=a.querySelectorAll(e),l=0,c=u.length;c>l;l++)r.push(u[l])}else r.push(a)}return r},i.debounceMethod=function(t,e,n){var i=t.prototype[e],r=e+"Timeout";t.prototype[e]=function(){var t=this[r];t&&clearTimeout(t);var e=arguments,o=this;this[r]=setTimeout(function(){i.apply(o,e),delete o[r]},n||100)}},i.toDashed=function(t){return t.replace(/(.)([A-Z])/g,function(t,e,n){return e+"-"+n}).toLowerCase()};var o=t.console;return i.htmlInit=function(n,r){e(function(){for(var e=i.toDashed(r),s=document.querySelectorAll(".js-"+e),a="data-"+e+"-options",u=0,l=s.length;l>u;u++){var c,h=s[u],p=h.getAttribute(a);try{c=p&&JSON.parse(p)}catch(f){o&&o.error("Error parsing "+a+" on "+h.nodeName.toLowerCase()+(h.id?"#"+h.id:"")+": "+f);continue}var d=new n(h,c),m=t.jQuery;m&&m.data(h,r,d)}})},i}),function(t,e){"use strict";"function"==typeof define&&define.amd?define("outlayer/item",["eventEmitter/EventEmitter","get-size/get-size","get-style-property/get-style-property","fizzy-ui-utils/utils"],function(n,i,r,o){return e(t,n,i,r,o)}):"object"==typeof exports?module.exports=e(t,require("wolfy87-eventemitter"),require("get-size"),require("desandro-get-style-property"),require("fizzy-ui-utils")):(t.Outlayer={},t.Outlayer.Item=e(t,t.EventEmitter,t.getSize,t.getStyleProperty,t.fizzyUIUtils))}(window,function(t,e,n,i,r){"use strict";function o(t){for(var e in t)return!1;return e=null,!0}function s(t,e){t&&(this.element=t,this.layout=e,this.position={x:0,y:0},this._create())}function a(t){return t.replace(/([A-Z])/g,function(t){return"-"+t.toLowerCase()})}var u=t.getComputedStyle,l=u?function(t){return u(t,null)}:function(t){return t.currentStyle},c=i("transition"),h=i("transform"),p=c&&h,f=!!i("perspective"),d={WebkitTransition:"webkitTransitionEnd",MozTransition:"transitionend",OTransition:"otransitionend",transition:"transitionend"}[c],m=["transform","transition","transitionDuration","transitionProperty"],y=function(){for(var t={},e=0,n=m.length;n>e;e++){var r=m[e],o=i(r);o&&o!==r&&(t[r]=o)}return t}();r.extend(s.prototype,e.prototype),s.prototype._create=function(){this._transn={ingProperties:{},clean:{},onEnd:{}},this.css({position:"absolute"})},s.prototype.handleEvent=function(t){var e="on"+t.type;this[e]&&this[e](t)},s.prototype.getSize=function(){this.size=n(this.element)},s.prototype.css=function(t){var e=this.element.style;for(var n in t){var i=y[n]||n;e[i]=t[n]}},s.prototype.getPosition=function(){var t=l(this.element),e=this.layout.options,n=e.isOriginLeft,i=e.isOriginTop,r=t[n?"left":"right"],o=t[i?"top":"bottom"],s=this.layout.size,a=-1!=r.indexOf("%")?parseFloat(r)/100*s.width:parseInt(r,10),u=-1!=o.indexOf("%")?parseFloat(o)/100*s.height:parseInt(o,10);a=isNaN(a)?0:a,u=isNaN(u)?0:u,a-=n?s.paddingLeft:s.paddingRight,u-=i?s.paddingTop:s.paddingBottom,this.position.x=a,this.position.y=u},s.prototype.layoutPosition=function(){var t=this.layout.size,e=this.layout.options,n={},i=e.isOriginLeft?"paddingLeft":"paddingRight",r=e.isOriginLeft?"left":"right",o=e.isOriginLeft?"right":"left",s=this.position.x+t[i];n[r]=this.getXValue(s),n[o]="";var a=e.isOriginTop?"paddingTop":"paddingBottom",u=e.isOriginTop?"top":"bottom",l=e.isOriginTop?"bottom":"top",c=this.position.y+t[a];n[u]=this.getYValue(c),n[l]="",this.css(n),this.emitEvent("layout",[this])},s.prototype.getXValue=function(t){var e=this.layout.options;return e.percentPosition&&!e.isHorizontal?t/this.layout.size.width*100+"%":t+"px"},s.prototype.getYValue=function(t){var e=this.layout.options;return e.percentPosition&&e.isHorizontal?t/this.layout.size.height*100+"%":t+"px"},s.prototype._transitionTo=function(t,e){this.getPosition();var n=this.position.x,i=this.position.y,r=parseInt(t,10),o=parseInt(e,10),s=r===this.position.x&&o===this.position.y;if(this.setPosition(t,e),s&&!this.isTransitioning)return void this.layoutPosition();var a=t-n,u=e-i,l={};l.transform=this.getTranslate(a,u),this.transition({to:l,onTransitionEnd:{transform:this.layoutPosition},isCleaning:!0})},s.prototype.getTranslate=function(t,e){var n=this.layout.options;return t=n.isOriginLeft?t:-t,e=n.isOriginTop?e:-e,f?"translate3d("+t+"px, "+e+"px, 0)":"translate("+t+"px, "+e+"px)"},s.prototype.goTo=function(t,e){this.setPosition(t,e),this.layoutPosition()},s.prototype.moveTo=p?s.prototype._transitionTo:s.prototype.goTo,s.prototype.setPosition=function(t,e){this.position.x=parseInt(t,10),this.position.y=parseInt(e,10)},s.prototype._nonTransition=function(t){this.css(t.to),t.isCleaning&&this._removeStyles(t.to);for(var e in t.onTransitionEnd)t.onTransitionEnd[e].call(this)},s.prototype._transition=function(t){if(!parseFloat(this.layout.options.transitionDuration))return void this._nonTransition(t);var e=this._transn;for(var n in t.onTransitionEnd)e.onEnd[n]=t.onTransitionEnd[n];for(n in t.to)e.ingProperties[n]=!0,t.isCleaning&&(e.clean[n]=!0);if(t.from){this.css(t.from);var i=this.element.offsetHeight;i=null}this.enableTransition(t.to),this.css(t.to),this.isTransitioning=!0};var g="opacity,"+a(y.transform||"transform");s.prototype.enableTransition=function(){this.isTransitioning||(this.css({transitionProperty:g,transitionDuration:this.layout.options.transitionDuration}),this.element.addEventListener(d,this,!1))},s.prototype.transition=s.prototype[c?"_transition":"_nonTransition"],s.prototype.onwebkitTransitionEnd=function(t){this.ontransitionend(t)},s.prototype.onotransitionend=function(t){this.ontransitionend(t)};var v={"-webkit-transform":"transform","-moz-transform":"transform","-o-transform":"transform"};s.prototype.ontransitionend=function(t){if(t.target===this.element){var e=this._transn,n=v[t.propertyName]||t.propertyName;if(delete e.ingProperties[n],o(e.ingProperties)&&this.disableTransition(),n in e.clean&&(this.element.style[t.propertyName]="",delete e.clean[n]),n in e.onEnd){var i=e.onEnd[n];i.call(this),delete e.onEnd[n]}this.emitEvent("transitionEnd",[this])}},s.prototype.disableTransition=function(){this.removeTransitionStyles(),this.element.removeEventListener(d,this,!1),this.isTransitioning=!1},s.prototype._removeStyles=function(t){var e={};for(var n in t)e[n]="";this.css(e)};var x={transitionProperty:"",transitionDuration:""};return s.prototype.removeTransitionStyles=function(){this.css(x)},s.prototype.removeElem=function(){this.element.parentNode.removeChild(this.element),this.css({display:""}),this.emitEvent("remove",[this])},s.prototype.remove=function(){if(!c||!parseFloat(this.layout.options.transitionDuration))return void this.removeElem();var t=this;this.once("transitionEnd",function(){t.removeElem()}),this.hide()},s.prototype.reveal=function(){delete this.isHidden,this.css({display:""});var t=this.layout.options,e={},n=this.getHideRevealTransitionEndProperty("visibleStyle");e[n]=this.onRevealTransitionEnd,this.transition({from:t.hiddenStyle,to:t.visibleStyle,isCleaning:!0,onTransitionEnd:e})},s.prototype.onRevealTransitionEnd=function(){this.isHidden||this.emitEvent("reveal")},s.prototype.getHideRevealTransitionEndProperty=function(t){var e=this.layout.options[t];if(e.opacity)return"opacity";for(var n in e)return n},s.prototype.hide=function(){this.isHidden=!0,this.css({display:""});var t=this.layout.options,e={},n=this.getHideRevealTransitionEndProperty("hiddenStyle");e[n]=this.onHideTransitionEnd,this.transition({from:t.visibleStyle,to:t.hiddenStyle,isCleaning:!0,onTransitionEnd:e})},s.prototype.onHideTransitionEnd=function(){this.isHidden&&(this.css({display:"none"}),this.emitEvent("hide"))},s.prototype.destroy=function(){this.css({position:"",left:"",right:"",top:"",bottom:"",transition:"",transform:""})},s}),function(t,e){"use strict";"function"==typeof define&&define.amd?define("outlayer/outlayer",["eventie/eventie","eventEmitter/EventEmitter","get-size/get-size","fizzy-ui-utils/utils","./item"],function(n,i,r,o,s){return e(t,n,i,r,o,s)}):"object"==typeof exports?module.exports=e(t,require("eventie"),require("wolfy87-eventemitter"),require("get-size"),require("fizzy-ui-utils"),require("./item")):t.Outlayer=e(t,t.eventie,t.EventEmitter,t.getSize,t.fizzyUIUtils,t.Outlayer.Item)}(window,function(t,e,n,i,r,o){"use strict";function s(t,e){var n=r.getQueryElement(t);if(!n)return void(a&&a.error("Bad element for "+this.constructor.namespace+": "+(n||t)));this.element=n,u&&(this.$element=u(this.element)),this.options=r.extend({},this.constructor.defaults),this.option(e);var i=++c;this.element.outlayerGUID=i,h[i]=this,this._create(),this.options.isInitLayout&&this.layout()}var a=t.console,u=t.jQuery,l=function(){},c=0,h={};return s.namespace="outlayer",s.Item=o,s.defaults={containerStyle:{position:"relative"},isInitLayout:!0,isOriginLeft:!0,isOriginTop:!0,isResizeBound:!0,isResizingContainer:!0,transitionDuration:"0.4s",hiddenStyle:{opacity:0,transform:"scale(0.001)"},visibleStyle:{opacity:1,transform:"scale(1)"}},r.extend(s.prototype,n.prototype),s.prototype.option=function(t){r.extend(this.options,t)},s.prototype._create=function(){this.reloadItems(),this.stamps=[],this.stamp(this.options.stamp),r.extend(this.element.style,this.options.containerStyle),this.options.isResizeBound&&this.bindResize()},s.prototype.reloadItems=function(){this.items=this._itemize(this.element.children)},s.prototype._itemize=function(t){for(var e=this._filterFindItemElements(t),n=this.constructor.Item,i=[],r=0,o=e.length;o>r;r++){var s=e[r],a=new n(s,this);i.push(a)}return i},s.prototype._filterFindItemElements=function(t){return r.filterFindElements(t,this.options.itemSelector)},s.prototype.getItemElements=function(){for(var t=[],e=0,n=this.items.length;n>e;e++)t.push(this.items[e].element);return t},s.prototype.layout=function(){this._resetLayout(),this._manageStamps();var t=void 0!==this.options.isLayoutInstant?this.options.isLayoutInstant:!this._isLayoutInited;this.layoutItems(this.items,t),this._isLayoutInited=!0},s.prototype._init=s.prototype.layout,s.prototype._resetLayout=function(){this.getSize()},s.prototype.getSize=function(){this.size=i(this.element)},s.prototype._getMeasurement=function(t,e){var n,o=this.options[t];o?("string"==typeof o?n=this.element.querySelector(o):r.isElement(o)&&(n=o),this[t]=n?i(n)[e]:o):this[t]=0},s.prototype.layoutItems=function(t,e){t=this._getItemsForLayout(t),this._layoutItems(t,e),this._postLayout()},s.prototype._getItemsForLayout=function(t){for(var e=[],n=0,i=t.length;i>n;n++){var r=t[n];r.isIgnored||e.push(r)}return e},s.prototype._layoutItems=function(t,e){if(this._emitCompleteOnItems("layout",t),t&&t.length){for(var n=[],i=0,r=t.length;r>i;i++){var o=t[i],s=this._getItemLayoutPosition(o);s.item=o,s.isInstant=e||o.isLayoutInstant,n.push(s)}this._processLayoutQueue(n)}},s.prototype._getItemLayoutPosition=function(){return{x:0,y:0}},s.prototype._processLayoutQueue=function(t){for(var e=0,n=t.length;n>e;e++){var i=t[e];this._positionItem(i.item,i.x,i.y,i.isInstant)}},s.prototype._positionItem=function(t,e,n,i){i?t.goTo(e,n):t.moveTo(e,n)},s.prototype._postLayout=function(){this.resizeContainer()},s.prototype.resizeContainer=function(){if(this.options.isResizingContainer){var t=this._getContainerSize();t&&(this._setContainerMeasure(t.width,!0),this._setContainerMeasure(t.height,!1))}},s.prototype._getContainerSize=l,s.prototype._setContainerMeasure=function(t,e){if(void 0!==t){var n=this.size;n.isBorderBox&&(t+=e?n.paddingLeft+n.paddingRight+n.borderLeftWidth+n.borderRightWidth:n.paddingBottom+n.paddingTop+n.borderTopWidth+n.borderBottomWidth),t=Math.max(t,0),this.element.style[e?"width":"height"]=t+"px"}},s.prototype._emitCompleteOnItems=function(t,e){function n(){r.dispatchEvent(t+"Complete",null,[e])}function i(){s++,s===o&&n()}var r=this,o=e.length;if(!e||!o)return void n();for(var s=0,a=0,u=e.length;u>a;a++){var l=e[a];l.once(t,i)}},s.prototype.dispatchEvent=function(t,e,n){var i=e?[e].concat(n):n;if(this.emitEvent(t,i),u)if(this.$element=this.$element||u(this.element),e){var r=u.Event(e);r.type=t,this.$element.trigger(r,n)}else this.$element.trigger(t,n)},s.prototype.ignore=function(t){var e=this.getItem(t);e&&(e.isIgnored=!0)},s.prototype.unignore=function(t){var e=this.getItem(t);e&&delete e.isIgnored},s.prototype.stamp=function(t){if(t=this._find(t)){this.stamps=this.stamps.concat(t);for(var e=0,n=t.length;n>e;e++){var i=t[e];this.ignore(i)}}},s.prototype.unstamp=function(t){if(t=this._find(t))for(var e=0,n=t.length;n>e;e++){var i=t[e];r.removeFrom(this.stamps,i),this.unignore(i)}},s.prototype._find=function(t){return t?("string"==typeof t&&(t=this.element.querySelectorAll(t)),t=r.makeArray(t)):void 0},s.prototype._manageStamps=function(){if(this.stamps&&this.stamps.length){this._getBoundingRect();for(var t=0,e=this.stamps.length;e>t;t++){var n=this.stamps[t];this._manageStamp(n)}}},s.prototype._getBoundingRect=function(){var t=this.element.getBoundingClientRect(),e=this.size;this._boundingRect={left:t.left+e.paddingLeft+e.borderLeftWidth,top:t.top+e.paddingTop+e.borderTopWidth,right:t.right-(e.paddingRight+e.borderRightWidth),bottom:t.bottom-(e.paddingBottom+e.borderBottomWidth)}},s.prototype._manageStamp=l,s.prototype._getElementOffset=function(t){var e=t.getBoundingClientRect(),n=this._boundingRect,r=i(t),o={left:e.left-n.left-r.marginLeft,top:e.top-n.top-r.marginTop,right:n.right-e.right-r.marginRight,bottom:n.bottom-e.bottom-r.marginBottom};return o},s.prototype.handleEvent=function(t){var e="on"+t.type;this[e]&&this[e](t)},s.prototype.bindResize=function(){this.isResizeBound||(e.bind(t,"resize",this),this.isResizeBound=!0)},s.prototype.unbindResize=function(){this.isResizeBound&&e.unbind(t,"resize",this),this.isResizeBound=!1;
},s.prototype.onresize=function(){function t(){e.resize(),delete e.resizeTimeout}this.resizeTimeout&&clearTimeout(this.resizeTimeout);var e=this;this.resizeTimeout=setTimeout(t,100)},s.prototype.resize=function(){this.isResizeBound&&this.needsResizeLayout()&&this.layout()},s.prototype.needsResizeLayout=function(){var t=i(this.element),e=this.size&&t;return e&&t.innerWidth!==this.size.innerWidth},s.prototype.addItems=function(t){var e=this._itemize(t);return e.length&&(this.items=this.items.concat(e)),e},s.prototype.appended=function(t){var e=this.addItems(t);e.length&&(this.layoutItems(e,!0),this.reveal(e))},s.prototype.prepended=function(t){var e=this._itemize(t);if(e.length){var n=this.items.slice(0);this.items=e.concat(n),this._resetLayout(),this._manageStamps(),this.layoutItems(e,!0),this.reveal(e),this.layoutItems(n)}},s.prototype.reveal=function(t){this._emitCompleteOnItems("reveal",t);for(var e=t&&t.length,n=0;e&&e>n;n++){var i=t[n];i.reveal()}},s.prototype.hide=function(t){this._emitCompleteOnItems("hide",t);for(var e=t&&t.length,n=0;e&&e>n;n++){var i=t[n];i.hide()}},s.prototype.revealItemElements=function(t){var e=this.getItems(t);this.reveal(e)},s.prototype.hideItemElements=function(t){var e=this.getItems(t);this.hide(e)},s.prototype.getItem=function(t){for(var e=0,n=this.items.length;n>e;e++){var i=this.items[e];if(i.element===t)return i}},s.prototype.getItems=function(t){t=r.makeArray(t);for(var e=[],n=0,i=t.length;i>n;n++){var o=t[n],s=this.getItem(o);s&&e.push(s)}return e},s.prototype.remove=function(t){var e=this.getItems(t);if(this._emitCompleteOnItems("remove",e),e&&e.length)for(var n=0,i=e.length;i>n;n++){var o=e[n];o.remove(),r.removeFrom(this.items,o)}},s.prototype.destroy=function(){var t=this.element.style;t.height="",t.position="",t.width="";for(var e=0,n=this.items.length;n>e;e++){var i=this.items[e];i.destroy()}this.unbindResize();var r=this.element.outlayerGUID;delete h[r],delete this.element.outlayerGUID,u&&u.removeData(this.element,this.constructor.namespace)},s.data=function(t){t=r.getQueryElement(t);var e=t&&t.outlayerGUID;return e&&h[e]},s.create=function(t,e){function n(){s.apply(this,arguments)}return Object.create?n.prototype=Object.create(s.prototype):r.extend(n.prototype,s.prototype),n.prototype.constructor=n,n.defaults=r.extend({},s.defaults),r.extend(n.defaults,e),n.prototype.settings={},n.namespace=t,n.data=s.data,n.Item=function(){o.apply(this,arguments)},n.Item.prototype=new o,r.htmlInit(n,t),u&&u.bridget&&u.bridget(t,n),n},s.Item=o,s}),function(t,e){"use strict";"function"==typeof define&&define.amd?define("isotope/js/item",["outlayer/outlayer"],e):"object"==typeof exports?module.exports=e(require("outlayer")):(t.Isotope=t.Isotope||{},t.Isotope.Item=e(t.Outlayer))}(window,function(t){"use strict";function e(){t.Item.apply(this,arguments)}e.prototype=new t.Item,e.prototype._create=function(){this.id=this.layout.itemGUID++,t.Item.prototype._create.call(this),this.sortData={}},e.prototype.updateSortData=function(){if(!this.isIgnored){this.sortData.id=this.id,this.sortData["original-order"]=this.id,this.sortData.random=Math.random();var t=this.layout.options.getSortData,e=this.layout._sorters;for(var n in t){var i=e[n];this.sortData[n]=i(this.element,this)}}};var n=e.prototype.destroy;return e.prototype.destroy=function(){n.apply(this,arguments),this.css({display:""})},e}),function(t,e){"use strict";"function"==typeof define&&define.amd?define("isotope/js/layout-mode",["get-size/get-size","outlayer/outlayer"],e):"object"==typeof exports?module.exports=e(require("get-size"),require("outlayer")):(t.Isotope=t.Isotope||{},t.Isotope.LayoutMode=e(t.getSize,t.Outlayer))}(window,function(t,e){"use strict";function n(t){this.isotope=t,t&&(this.options=t.options[this.namespace],this.element=t.element,this.items=t.filteredItems,this.size=t.size)}return function(){function t(t){return function(){return e.prototype[t].apply(this.isotope,arguments)}}for(var i=["_resetLayout","_getItemLayoutPosition","_manageStamp","_getContainerSize","_getElementOffset","needsResizeLayout"],r=0,o=i.length;o>r;r++){var s=i[r];n.prototype[s]=t(s)}}(),n.prototype.needsVerticalResizeLayout=function(){var e=t(this.isotope.element),n=this.isotope.size&&e;return n&&e.innerHeight!=this.isotope.size.innerHeight},n.prototype._getMeasurement=function(){this.isotope._getMeasurement.apply(this,arguments)},n.prototype.getColumnWidth=function(){this.getSegmentSize("column","Width")},n.prototype.getRowHeight=function(){this.getSegmentSize("row","Height")},n.prototype.getSegmentSize=function(t,e){var n=t+e,i="outer"+e;if(this._getMeasurement(n,i),!this[n]){var r=this.getFirstItemSize();this[n]=r&&r[i]||this.isotope.size["inner"+e]}},n.prototype.getFirstItemSize=function(){var e=this.isotope.filteredItems[0];return e&&e.element&&t(e.element)},n.prototype.layout=function(){this.isotope.layout.apply(this.isotope,arguments)},n.prototype.getSize=function(){this.isotope.getSize(),this.size=this.isotope.size},n.modes={},n.create=function(t,e){function i(){n.apply(this,arguments)}return i.prototype=new n,e&&(i.options=e),i.prototype.namespace=t,n.modes[t]=i,i},n}),function(t,e){"use strict";"function"==typeof define&&define.amd?define("masonry/masonry",["outlayer/outlayer","get-size/get-size","fizzy-ui-utils/utils"],e):"object"==typeof exports?module.exports=e(require("outlayer"),require("get-size"),require("fizzy-ui-utils")):t.Masonry=e(t.Outlayer,t.getSize,t.fizzyUIUtils)}(window,function(t,e,n){var i=t.create("masonry");return i.prototype._resetLayout=function(){this.getSize(),this._getMeasurement("columnWidth","outerWidth"),this._getMeasurement("gutter","outerWidth"),this.measureColumns();var t=this.cols;for(this.colYs=[];t--;)this.colYs.push(0);this.maxY=0},i.prototype.measureColumns=function(){if(this.getContainerWidth(),!this.columnWidth){var t=this.items[0],n=t&&t.element;this.columnWidth=n&&e(n).outerWidth||this.containerWidth}var i=this.columnWidth+=this.gutter,r=this.containerWidth+this.gutter,o=r/i,s=i-r%i,a=s&&1>s?"round":"floor";o=Math[a](o),this.cols=Math.max(o,1)},i.prototype.getContainerWidth=function(){var t=this.options.isFitWidth?this.element.parentNode:this.element,n=e(t);this.containerWidth=n&&n.innerWidth},i.prototype._getItemLayoutPosition=function(t){t.getSize();var e=t.size.outerWidth%this.columnWidth,i=e&&1>e?"round":"ceil",r=Math[i](t.size.outerWidth/this.columnWidth);r=Math.min(r,this.cols);for(var o=this._getColGroup(r),s=Math.min.apply(Math,o),a=n.indexOf(o,s),u={x:this.columnWidth*a,y:s},l=s+t.size.outerHeight,c=this.cols+1-o.length,h=0;c>h;h++)this.colYs[a+h]=l;return u},i.prototype._getColGroup=function(t){if(2>t)return this.colYs;for(var e=[],n=this.cols+1-t,i=0;n>i;i++){var r=this.colYs.slice(i,i+t);e[i]=Math.max.apply(Math,r)}return e},i.prototype._manageStamp=function(t){var n=e(t),i=this._getElementOffset(t),r=this.options.isOriginLeft?i.left:i.right,o=r+n.outerWidth,s=Math.floor(r/this.columnWidth);s=Math.max(0,s);var a=Math.floor(o/this.columnWidth);a-=o%this.columnWidth?0:1,a=Math.min(this.cols-1,a);for(var u=(this.options.isOriginTop?i.top:i.bottom)+n.outerHeight,l=s;a>=l;l++)this.colYs[l]=Math.max(u,this.colYs[l])},i.prototype._getContainerSize=function(){this.maxY=Math.max.apply(Math,this.colYs);var t={height:this.maxY};return this.options.isFitWidth&&(t.width=this._getContainerFitWidth()),t},i.prototype._getContainerFitWidth=function(){for(var t=0,e=this.cols;--e&&0===this.colYs[e];)t++;return(this.cols-t)*this.columnWidth-this.gutter},i.prototype.needsResizeLayout=function(){var t=this.containerWidth;return this.getContainerWidth(),t!==this.containerWidth},i}),function(t,e){"use strict";"function"==typeof define&&define.amd?define("isotope/js/layout-modes/masonry",["../layout-mode","masonry/masonry"],e):"object"==typeof exports?module.exports=e(require("../layout-mode"),require("masonry-layout")):e(t.Isotope.LayoutMode,t.Masonry)}(window,function(t,e){"use strict";function n(t,e){for(var n in e)t[n]=e[n];return t}var i=t.create("masonry"),r=i.prototype._getElementOffset,o=i.prototype.layout,s=i.prototype._getMeasurement;n(i.prototype,e.prototype),i.prototype._getElementOffset=r,i.prototype.layout=o,i.prototype._getMeasurement=s;var a=i.prototype.measureColumns;i.prototype.measureColumns=function(){this.items=this.isotope.filteredItems,a.call(this)};var u=i.prototype._manageStamp;return i.prototype._manageStamp=function(){this.options.isOriginLeft=this.isotope.options.isOriginLeft,this.options.isOriginTop=this.isotope.options.isOriginTop,u.apply(this,arguments)},i}),function(t,e){"use strict";"function"==typeof define&&define.amd?define("isotope/js/layout-modes/fit-rows",["../layout-mode"],e):"object"==typeof exports?module.exports=e(require("../layout-mode")):e(t.Isotope.LayoutMode)}(window,function(t){"use strict";var e=t.create("fitRows");return e.prototype._resetLayout=function(){this.x=0,this.y=0,this.maxY=0,this._getMeasurement("gutter","outerWidth")},e.prototype._getItemLayoutPosition=function(t){t.getSize();var e=t.size.outerWidth+this.gutter,n=this.isotope.size.innerWidth+this.gutter;0!==this.x&&e+this.x>n&&(this.x=0,this.y=this.maxY);var i={x:this.x,y:this.y};return this.maxY=Math.max(this.maxY,this.y+t.size.outerHeight),this.x+=e,i},e.prototype._getContainerSize=function(){return{height:this.maxY}},e}),function(t,e){"use strict";"function"==typeof define&&define.amd?define("isotope/js/layout-modes/vertical",["../layout-mode"],e):"object"==typeof exports?module.exports=e(require("../layout-mode")):e(t.Isotope.LayoutMode)}(window,function(t){"use strict";var e=t.create("vertical",{horizontalAlignment:0});return e.prototype._resetLayout=function(){this.y=0},e.prototype._getItemLayoutPosition=function(t){t.getSize();var e=(this.isotope.size.innerWidth-t.size.outerWidth)*this.options.horizontalAlignment,n=this.y;return this.y+=t.size.outerHeight,{x:e,y:n}},e.prototype._getContainerSize=function(){return{height:this.y}},e}),function(t,e){"use strict";"function"==typeof define&&define.amd?define(["outlayer/outlayer","get-size/get-size","matches-selector/matches-selector","fizzy-ui-utils/utils","isotope/js/item","isotope/js/layout-mode","isotope/js/layout-modes/masonry","isotope/js/layout-modes/fit-rows","isotope/js/layout-modes/vertical"],function(n,i,r,o,s,a){return e(t,n,i,r,o,s,a)}):"object"==typeof exports?module.exports=e(t,require("outlayer"),require("get-size"),require("desandro-matches-selector"),require("fizzy-ui-utils"),require("./item"),require("./layout-mode"),require("./layout-modes/masonry"),require("./layout-modes/fit-rows"),require("./layout-modes/vertical")):t.Isotope=e(t,t.Outlayer,t.getSize,t.matchesSelector,t.fizzyUIUtils,t.Isotope.Item,t.Isotope.LayoutMode)}(window,function(t,e,n,i,r,o,s){function a(t,e){return function(n,i){for(var r=0,o=t.length;o>r;r++){var s=t[r],a=n.sortData[s],u=i.sortData[s];if(a>u||u>a){var l=void 0!==e[s]?e[s]:e,c=l?1:-1;return(a>u?1:-1)*c}}return 0}}var u=t.jQuery,l=String.prototype.trim?function(t){return t.trim()}:function(t){return t.replace(/^\s+|\s+$/g,"")},c=document.documentElement,h=c.textContent?function(t){return t.textContent}:function(t){return t.innerText},p=e.create("isotope",{layoutMode:"masonry",isJQueryFiltering:!0,sortAscending:!0});p.Item=o,p.LayoutMode=s,p.prototype._create=function(){this.itemGUID=0,this._sorters={},this._getSorters(),e.prototype._create.call(this),this.modes={},this.filteredItems=this.items,this.sortHistory=["original-order"];for(var t in s.modes)this._initLayoutMode(t)},p.prototype.reloadItems=function(){this.itemGUID=0,e.prototype.reloadItems.call(this)},p.prototype._itemize=function(){for(var t=e.prototype._itemize.apply(this,arguments),n=0,i=t.length;i>n;n++){var r=t[n];r.id=this.itemGUID++}return this._updateItemsSortData(t),t},p.prototype._initLayoutMode=function(t){var e=s.modes[t],n=this.options[t]||{};this.options[t]=e.options?r.extend(e.options,n):n,this.modes[t]=new e(this)},p.prototype.layout=function(){return!this._isLayoutInited&&this.options.isInitLayout?void this.arrange():void this._layout()},p.prototype._layout=function(){var t=this._getIsInstant();this._resetLayout(),this._manageStamps(),this.layoutItems(this.filteredItems,t),this._isLayoutInited=!0},p.prototype.arrange=function(t){function e(){i.reveal(n.needReveal),i.hide(n.needHide)}this.option(t),this._getIsInstant();var n=this._filter(this.items);this.filteredItems=n.matches;var i=this;this._bindArrangeComplete(),this._isInstant?this._noTransition(e):e(),this._sort(),this._layout()},p.prototype._init=p.prototype.arrange,p.prototype._getIsInstant=function(){var t=void 0!==this.options.isLayoutInstant?this.options.isLayoutInstant:!this._isLayoutInited;return this._isInstant=t,t},p.prototype._bindArrangeComplete=function(){function t(){e&&n&&i&&r.dispatchEvent("arrangeComplete",null,[r.filteredItems])}var e,n,i,r=this;this.once("layoutComplete",function(){e=!0,t()}),this.once("hideComplete",function(){n=!0,t()}),this.once("revealComplete",function(){i=!0,t()})},p.prototype._filter=function(t){var e=this.options.filter;e=e||"*";for(var n=[],i=[],r=[],o=this._getFilterTest(e),s=0,a=t.length;a>s;s++){var u=t[s];if(!u.isIgnored){var l=o(u);l&&n.push(u),l&&u.isHidden?i.push(u):l||u.isHidden||r.push(u)}}return{matches:n,needReveal:i,needHide:r}},p.prototype._getFilterTest=function(t){return u&&this.options.isJQueryFiltering?function(e){return u(e.element).is(t)}:"function"==typeof t?function(e){return t(e.element)}:function(e){return i(e.element,t)}},p.prototype.updateSortData=function(t){var e;t?(t=r.makeArray(t),e=this.getItems(t)):e=this.items,this._getSorters(),this._updateItemsSortData(e)},p.prototype._getSorters=function(){var t=this.options.getSortData;for(var e in t){var n=t[e];this._sorters[e]=f(n)}},p.prototype._updateItemsSortData=function(t){for(var e=t&&t.length,n=0;e&&e>n;n++){var i=t[n];i.updateSortData()}};var f=function(){function t(t){if("string"!=typeof t)return t;var n=l(t).split(" "),i=n[0],r=i.match(/^\[(.+)\]$/),o=r&&r[1],s=e(o,i),a=p.sortDataParsers[n[1]];return t=a?function(t){return t&&a(s(t))}:function(t){return t&&s(t)}}function e(t,e){var n;return n=t?function(e){return e.getAttribute(t)}:function(t){var n=t.querySelector(e);return n&&h(n)}}return t}();p.sortDataParsers={parseInt:function(t){return parseInt(t,10)},parseFloat:function(t){return parseFloat(t)}},p.prototype._sort=function(){var t=this.options.sortBy;if(t){var e=[].concat.apply(t,this.sortHistory),n=a(e,this.options.sortAscending);this.filteredItems.sort(n),t!=this.sortHistory[0]&&this.sortHistory.unshift(t)}},p.prototype._mode=function(){var t=this.options.layoutMode,e=this.modes[t];if(!e)throw new Error("No layout mode: "+t);return e.options=this.options[t],e},p.prototype._resetLayout=function(){e.prototype._resetLayout.call(this),this._mode()._resetLayout()},p.prototype._getItemLayoutPosition=function(t){return this._mode()._getItemLayoutPosition(t)},p.prototype._manageStamp=function(t){this._mode()._manageStamp(t)},p.prototype._getContainerSize=function(){return this._mode()._getContainerSize()},p.prototype.needsResizeLayout=function(){return this._mode().needsResizeLayout()},p.prototype.appended=function(t){var e=this.addItems(t);if(e.length){var n=this._filterRevealAdded(e);this.filteredItems=this.filteredItems.concat(n)}},p.prototype.prepended=function(t){var e=this._itemize(t);if(e.length){this._resetLayout(),this._manageStamps();var n=this._filterRevealAdded(e);this.layoutItems(this.filteredItems),this.filteredItems=n.concat(this.filteredItems),this.items=e.concat(this.items)}},p.prototype._filterRevealAdded=function(t){var e=this._filter(t);return this.hide(e.needHide),this.reveal(e.matches),this.layoutItems(e.matches,!0),e.matches},p.prototype.insert=function(t){var e=this.addItems(t);if(e.length){var n,i,r=e.length;for(n=0;r>n;n++)i=e[n],this.element.appendChild(i.element);var o=this._filter(e).matches;for(n=0;r>n;n++)e[n].isLayoutInstant=!0;for(this.arrange(),n=0;r>n;n++)delete e[n].isLayoutInstant;this.reveal(o)}};var d=p.prototype.remove;return p.prototype.remove=function(t){t=r.makeArray(t);var e=this.getItems(t);d.call(this,t);var n=e&&e.length;if(n)for(var i=0;n>i;i++){var o=e[i];r.removeFrom(this.filteredItems,o)}},p.prototype.shuffle=function(){for(var t=0,e=this.items.length;e>t;t++){var n=this.items[t];n.sortData.random=Math.random()}this.options.sortBy="random",this._sort(),this._layout()},p.prototype._noTransition=function(t){var e=this.options.transitionDuration;this.options.transitionDuration=0;var n=t.call(this);return this.options.transitionDuration=e,n},p.prototype.getFilteredItemElements=function(){for(var t=[],e=0,n=this.filteredItems.length;n>e;e++)t.push(this.filteredItems[e].element);return t},p}),function(){var t={};this.tmpl=function e(n,i){var r=/\W/.test(n)?new Function("obj","var p=[],print=function(){p.push.apply(p,arguments);};with(obj){p.push('"+n.replace(/[\r\t\n]/g," ").split("<%").join("	").replace(/((^|%>)[^\t]*)'/g,"$1\r").replace(/\t=(.*?)%>/g,"',$1,'").split("	").join("');").split("%>").join("p.push('").split("\r").join("\\'")+"');}return p.join('');"):t[n]=t[n]||e(document.getElementById(n).innerHTML);return i?r(i):r}}(),$(function(){function t(t){$.ajax({type:"GET",dataType:"json",cache:!1,url:"https://pixabay.com/api/?key="+n+"&q="+t+"&page="+i+"&per_page="+r+"&image_type=photo",success:function(t){console.log(t);var e=$("#ideas-tmpl").html(),n=tmpl(e,{data:t.hits});$(".grid").remove(),$(".ideas .wrapper").append(n),$(".grid").isotope({itemSelector:".grid-item",layoutMode:"masonry",masonry:{gutter:20}})}})}$(".jcarousel").jcarousel({animation:"slow",wrap:"circular"}).jcarouselAutoscroll({interval:4e3,target:"+=1",autostart:!0}),$(".jcarousel-control-prev").on("jcarouselcontrol:active",function(){$(this).removeClass("inactive")}).on("jcarouselcontrol:inactive",function(){$(this).addClass("inactive")}).jcarouselControl({target:"-=1"}),$(".jcarousel-control-next").on("jcarouselcontrol:active",function(){$(this).removeClass("inactive")}).on("jcarouselcontrol:inactive",function(){$(this).addClass("inactive")}).jcarouselControl({target:"+=1"});var e="",n="2272138-78bddf30ad93af5874e7a0791",i=1,r=7;$(".search__button").on("click",function(e){e.preventDefault();var n=$(".search__input");t(encodeURIComponent(n.val())),n.val("")}),t(e)});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1haW4uanMiXSwibmFtZXMiOlsiZ2xvYmFsIiwiZmFjdG9yeSIsIm1vZHVsZSIsImV4cG9ydHMiLCJkb2N1bWVudCIsInciLCJFcnJvciIsIndpbmRvdyIsInRoaXMiLCJub0dsb2JhbCIsImlzQXJyYXlMaWtlIiwib2JqIiwibGVuZ3RoIiwidHlwZSIsImpRdWVyeSIsImlzV2luZG93Iiwid2lubm93IiwiZWxlbWVudHMiLCJxdWFsaWZpZXIiLCJub3QiLCJpc0Z1bmN0aW9uIiwiZ3JlcCIsImVsZW0iLCJpIiwiY2FsbCIsIm5vZGVUeXBlIiwicmlzU2ltcGxlIiwidGVzdCIsImZpbHRlciIsImluZGV4T2YiLCJzaWJsaW5nIiwiY3VyIiwiZGlyIiwiY3JlYXRlT3B0aW9ucyIsIm9wdGlvbnMiLCJvYmplY3QiLCJlYWNoIiwibWF0Y2giLCJybm90d2hpdGUiLCJfIiwiZmxhZyIsImNvbXBsZXRlZCIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJyZWFkeSIsIkRhdGEiLCJleHBhbmRvIiwidWlkIiwiZGF0YUF0dHIiLCJrZXkiLCJkYXRhIiwibmFtZSIsInVuZGVmaW5lZCIsInJlcGxhY2UiLCJybXVsdGlEYXNoIiwidG9Mb3dlckNhc2UiLCJnZXRBdHRyaWJ1dGUiLCJyYnJhY2UiLCJwYXJzZUpTT04iLCJlIiwiZGF0YVVzZXIiLCJzZXQiLCJhZGp1c3RDU1MiLCJwcm9wIiwidmFsdWVQYXJ0cyIsInR3ZWVuIiwiYWRqdXN0ZWQiLCJzY2FsZSIsIm1heEl0ZXJhdGlvbnMiLCJjdXJyZW50VmFsdWUiLCJjc3MiLCJpbml0aWFsIiwidW5pdCIsImNzc051bWJlciIsImluaXRpYWxJblVuaXQiLCJyY3NzTnVtIiwiZXhlYyIsInN0eWxlIiwic3RhcnQiLCJlbmQiLCJnZXRBbGwiLCJjb250ZXh0IiwidGFnIiwicmV0IiwiZ2V0RWxlbWVudHNCeVRhZ05hbWUiLCJxdWVyeVNlbGVjdG9yQWxsIiwibm9kZU5hbWUiLCJtZXJnZSIsInNldEdsb2JhbEV2YWwiLCJlbGVtcyIsInJlZkVsZW1lbnRzIiwibCIsImRhdGFQcml2IiwiZ2V0IiwiYnVpbGRGcmFnbWVudCIsInNjcmlwdHMiLCJzZWxlY3Rpb24iLCJpZ25vcmVkIiwidG1wIiwid3JhcCIsImNvbnRhaW5zIiwiaiIsImZyYWdtZW50IiwiY3JlYXRlRG9jdW1lbnRGcmFnbWVudCIsIm5vZGVzIiwicmh0bWwiLCJhcHBlbmRDaGlsZCIsImNyZWF0ZUVsZW1lbnQiLCJydGFnTmFtZSIsIndyYXBNYXAiLCJfZGVmYXVsdCIsImlubmVySFRNTCIsImh0bWxQcmVmaWx0ZXIiLCJsYXN0Q2hpbGQiLCJjaGlsZE5vZGVzIiwiZmlyc3RDaGlsZCIsInRleHRDb250ZW50IiwicHVzaCIsImNyZWF0ZVRleHROb2RlIiwiaW5BcnJheSIsIm93bmVyRG9jdW1lbnQiLCJyc2NyaXB0VHlwZSIsInJldHVyblRydWUiLCJyZXR1cm5GYWxzZSIsInNhZmVBY3RpdmVFbGVtZW50IiwiYWN0aXZlRWxlbWVudCIsImVyciIsIm9uIiwidHlwZXMiLCJzZWxlY3RvciIsImZuIiwib25lIiwib3JpZ0ZuIiwiZXZlbnQiLCJvZmYiLCJhcHBseSIsImFyZ3VtZW50cyIsImd1aWQiLCJhZGQiLCJtYW5pcHVsYXRpb25UYXJnZXQiLCJjb250ZW50IiwiZGlzYWJsZVNjcmlwdCIsInJlc3RvcmVTY3JpcHQiLCJyc2NyaXB0VHlwZU1hc2tlZCIsInJlbW92ZUF0dHJpYnV0ZSIsImNsb25lQ29weUV2ZW50Iiwic3JjIiwiZGVzdCIsInBkYXRhT2xkIiwicGRhdGFDdXIiLCJ1ZGF0YU9sZCIsInVkYXRhQ3VyIiwiZXZlbnRzIiwiaGFzRGF0YSIsImFjY2VzcyIsImhhbmRsZSIsImV4dGVuZCIsImZpeElucHV0IiwicmNoZWNrYWJsZVR5cGUiLCJjaGVja2VkIiwiZGVmYXVsdFZhbHVlIiwiZG9tTWFuaXAiLCJjb2xsZWN0aW9uIiwiYXJncyIsImNhbGxiYWNrIiwiY29uY2F0IiwiZmlyc3QiLCJoYXNTY3JpcHRzIiwibm9kZSIsImRvYyIsImlOb0Nsb25lIiwidmFsdWUiLCJzdXBwb3J0IiwiY2hlY2tDbG9uZSIsInJjaGVja2VkIiwiaW5kZXgiLCJzZWxmIiwiZXEiLCJodG1sIiwibWFwIiwiY2xvbmUiLCJfZXZhbFVybCIsImdsb2JhbEV2YWwiLCJyY2xlYW5TY3JpcHQiLCJyZW1vdmUiLCJrZWVwRGF0YSIsImNsZWFuRGF0YSIsInBhcmVudE5vZGUiLCJyZW1vdmVDaGlsZCIsImFjdHVhbERpc3BsYXkiLCJhcHBlbmRUbyIsImJvZHkiLCJkaXNwbGF5IiwiZGV0YWNoIiwiZGVmYXVsdERpc3BsYXkiLCJlbGVtZGlzcGxheSIsImlmcmFtZSIsImRvY3VtZW50RWxlbWVudCIsImNvbnRlbnREb2N1bWVudCIsIndyaXRlIiwiY2xvc2UiLCJjdXJDU1MiLCJjb21wdXRlZCIsIndpZHRoIiwibWluV2lkdGgiLCJtYXhXaWR0aCIsImdldFN0eWxlcyIsImdldFByb3BlcnR5VmFsdWUiLCJwaXhlbE1hcmdpblJpZ2h0Iiwicm51bW5vbnB4Iiwicm1hcmdpbiIsImFkZEdldEhvb2tJZiIsImNvbmRpdGlvbkZuIiwiaG9va0ZuIiwidmVuZG9yUHJvcE5hbWUiLCJlbXB0eVN0eWxlIiwiY2FwTmFtZSIsInRvVXBwZXJDYXNlIiwic2xpY2UiLCJjc3NQcmVmaXhlcyIsInNldFBvc2l0aXZlTnVtYmVyIiwic3VidHJhY3QiLCJtYXRjaGVzIiwiTWF0aCIsIm1heCIsImF1Z21lbnRXaWR0aE9ySGVpZ2h0IiwiZXh0cmEiLCJpc0JvcmRlckJveCIsInN0eWxlcyIsInZhbCIsImNzc0V4cGFuZCIsImdldFdpZHRoT3JIZWlnaHQiLCJ2YWx1ZUlzQm9yZGVyQm94Iiwib2Zmc2V0V2lkdGgiLCJvZmZzZXRIZWlnaHQiLCJtc0Z1bGxzY3JlZW5FbGVtZW50IiwidG9wIiwiZ2V0Q2xpZW50UmVjdHMiLCJyb3VuZCIsImdldEJvdW5kaW5nQ2xpZW50UmVjdCIsImJveFNpemluZ1JlbGlhYmxlIiwicGFyc2VGbG9hdCIsInNob3dIaWRlIiwic2hvdyIsImhpZGRlbiIsInZhbHVlcyIsImlzSGlkZGVuIiwiVHdlZW4iLCJlYXNpbmciLCJwcm90b3R5cGUiLCJpbml0IiwiY3JlYXRlRnhOb3ciLCJzZXRUaW1lb3V0IiwiZnhOb3ciLCJub3ciLCJnZW5GeCIsImluY2x1ZGVXaWR0aCIsIndoaWNoIiwiYXR0cnMiLCJoZWlnaHQiLCJvcGFjaXR5IiwiY3JlYXRlVHdlZW4iLCJhbmltYXRpb24iLCJBbmltYXRpb24iLCJ0d2VlbmVycyIsImRlZmF1bHRQcmVmaWx0ZXIiLCJwcm9wcyIsIm9wdHMiLCJ0b2dnbGUiLCJob29rcyIsIm9sZGZpcmUiLCJjaGVja0Rpc3BsYXkiLCJhbmltIiwib3JpZyIsImRhdGFTaG93IiwicXVldWUiLCJfcXVldWVIb29rcyIsInVucXVldWVkIiwiZW1wdHkiLCJmaXJlIiwiYWx3YXlzIiwib3ZlcmZsb3ciLCJvdmVyZmxvd1giLCJvdmVyZmxvd1kiLCJyZnh0eXBlcyIsImlzRW1wdHlPYmplY3QiLCJkb25lIiwiaGlkZSIsInByb3BGaWx0ZXIiLCJzcGVjaWFsRWFzaW5nIiwiY2FtZWxDYXNlIiwiaXNBcnJheSIsImNzc0hvb2tzIiwiZXhwYW5kIiwicHJvcGVydGllcyIsInJlc3VsdCIsInN0b3BwZWQiLCJwcmVmaWx0ZXJzIiwiZGVmZXJyZWQiLCJEZWZlcnJlZCIsInRpY2siLCJjdXJyZW50VGltZSIsInJlbWFpbmluZyIsInN0YXJ0VGltZSIsImR1cmF0aW9uIiwidGVtcCIsInBlcmNlbnQiLCJ0d2VlbnMiLCJydW4iLCJub3RpZnlXaXRoIiwicmVzb2x2ZVdpdGgiLCJwcm9taXNlIiwib3JpZ2luYWxQcm9wZXJ0aWVzIiwib3JpZ2luYWxPcHRpb25zIiwic3RvcCIsImdvdG9FbmQiLCJyZWplY3RXaXRoIiwicHJveHkiLCJmeCIsInRpbWVyIiwicHJvZ3Jlc3MiLCJjb21wbGV0ZSIsImZhaWwiLCJnZXRDbGFzcyIsImFkZFRvUHJlZmlsdGVyc09yVHJhbnNwb3J0cyIsInN0cnVjdHVyZSIsImRhdGFUeXBlRXhwcmVzc2lvbiIsImZ1bmMiLCJkYXRhVHlwZSIsImRhdGFUeXBlcyIsInVuc2hpZnQiLCJpbnNwZWN0UHJlZmlsdGVyc09yVHJhbnNwb3J0cyIsImpxWEhSIiwiaW5zcGVjdCIsInNlbGVjdGVkIiwiaW5zcGVjdGVkIiwicHJlZmlsdGVyT3JGYWN0b3J5IiwiZGF0YVR5cGVPclRyYW5zcG9ydCIsInNlZWtpbmdUcmFuc3BvcnQiLCJ0cmFuc3BvcnRzIiwiYWpheEV4dGVuZCIsInRhcmdldCIsImRlZXAiLCJmbGF0T3B0aW9ucyIsImFqYXhTZXR0aW5ncyIsImFqYXhIYW5kbGVSZXNwb25zZXMiLCJzIiwicmVzcG9uc2VzIiwiY3QiLCJmaW5hbERhdGFUeXBlIiwiZmlyc3REYXRhVHlwZSIsImNvbnRlbnRzIiwic2hpZnQiLCJtaW1lVHlwZSIsImdldFJlc3BvbnNlSGVhZGVyIiwiY29udmVydGVycyIsImFqYXhDb252ZXJ0IiwicmVzcG9uc2UiLCJpc1N1Y2Nlc3MiLCJjb252MiIsImN1cnJlbnQiLCJjb252IiwicHJldiIsInJlc3BvbnNlRmllbGRzIiwiZGF0YUZpbHRlciIsInNwbGl0Iiwic3RhdGUiLCJlcnJvciIsImJ1aWxkUGFyYW1zIiwicHJlZml4IiwidHJhZGl0aW9uYWwiLCJ2IiwicmJyYWNrZXQiLCJnZXRXaW5kb3ciLCJkZWZhdWx0VmlldyIsImFyciIsImNsYXNzMnR5cGUiLCJ0b1N0cmluZyIsImhhc093biIsImhhc093blByb3BlcnR5IiwidmVyc2lvbiIsInJ0cmltIiwicm1zUHJlZml4IiwicmRhc2hBbHBoYSIsImZjYW1lbENhc2UiLCJhbGwiLCJsZXR0ZXIiLCJqcXVlcnkiLCJjb25zdHJ1Y3RvciIsInRvQXJyYXkiLCJudW0iLCJwdXNoU3RhY2siLCJwcmV2T2JqZWN0IiwibGFzdCIsImxlbiIsInNvcnQiLCJzcGxpY2UiLCJjb3B5IiwiY29weUlzQXJyYXkiLCJpc1BsYWluT2JqZWN0IiwicmFuZG9tIiwiaXNSZWFkeSIsIm1zZyIsIm5vb3AiLCJBcnJheSIsImlzTnVtZXJpYyIsInJlYWxTdHJpbmdPYmoiLCJjb2RlIiwic2NyaXB0IiwiaW5kaXJlY3QiLCJldmFsIiwidHJpbSIsInRleHQiLCJoZWFkIiwic3RyaW5nIiwibWFrZUFycmF5IiwicmVzdWx0cyIsIk9iamVjdCIsInNlY29uZCIsImludmVydCIsImNhbGxiYWNrSW52ZXJzZSIsImNhbGxiYWNrRXhwZWN0IiwiYXJnIiwiRGF0ZSIsIlN5bWJvbCIsIml0ZXJhdG9yIiwiU2l6emxlIiwic2VlZCIsIm0iLCJuaWQiLCJuaWRzZWxlY3QiLCJncm91cHMiLCJuZXdTZWxlY3RvciIsIm5ld0NvbnRleHQiLCJwcmVmZXJyZWREb2MiLCJzZXREb2N1bWVudCIsImRvY3VtZW50SXNIVE1MIiwicnF1aWNrRXhwciIsImdldEVsZW1lbnRCeUlkIiwiaWQiLCJnZXRFbGVtZW50c0J5Q2xhc3NOYW1lIiwicXNhIiwiY29tcGlsZXJDYWNoZSIsInJidWdneVFTQSIsInJlc2NhcGUiLCJzZXRBdHRyaWJ1dGUiLCJ0b2tlbml6ZSIsInJpZGVudGlmaWVyIiwidG9TZWxlY3RvciIsImpvaW4iLCJyc2libGluZyIsInRlc3RDb250ZXh0IiwicXNhRXJyb3IiLCJzZWxlY3QiLCJjcmVhdGVDYWNoZSIsImNhY2hlIiwia2V5cyIsIkV4cHIiLCJjYWNoZUxlbmd0aCIsIm1hcmtGdW5jdGlvbiIsImFzc2VydCIsImRpdiIsImFkZEhhbmRsZSIsImhhbmRsZXIiLCJhdHRySGFuZGxlIiwic2libGluZ0NoZWNrIiwiYSIsImIiLCJkaWZmIiwic291cmNlSW5kZXgiLCJNQVhfTkVHQVRJVkUiLCJuZXh0U2libGluZyIsImNyZWF0ZUlucHV0UHNldWRvIiwiY3JlYXRlQnV0dG9uUHNldWRvIiwiY3JlYXRlUG9zaXRpb25hbFBzZXVkbyIsImFyZ3VtZW50IiwibWF0Y2hJbmRleGVzIiwic2V0RmlsdGVycyIsInRva2VucyIsImFkZENvbWJpbmF0b3IiLCJtYXRjaGVyIiwiY29tYmluYXRvciIsImJhc2UiLCJjaGVja05vbkVsZW1lbnRzIiwiZG9uZU5hbWUiLCJ4bWwiLCJvbGRDYWNoZSIsInVuaXF1ZUNhY2hlIiwib3V0ZXJDYWNoZSIsIm5ld0NhY2hlIiwiZGlycnVucyIsInVuaXF1ZUlEIiwiZWxlbWVudE1hdGNoZXIiLCJtYXRjaGVycyIsIm11bHRpcGxlQ29udGV4dHMiLCJjb250ZXh0cyIsImNvbmRlbnNlIiwidW5tYXRjaGVkIiwibmV3VW5tYXRjaGVkIiwibWFwcGVkIiwic2V0TWF0Y2hlciIsInByZUZpbHRlciIsInBvc3RGaWx0ZXIiLCJwb3N0RmluZGVyIiwicG9zdFNlbGVjdG9yIiwicHJlTWFwIiwicG9zdE1hcCIsInByZWV4aXN0aW5nIiwibWF0Y2hlckluIiwibWF0Y2hlck91dCIsIm1hdGNoZXJGcm9tVG9rZW5zIiwiY2hlY2tDb250ZXh0IiwibGVhZGluZ1JlbGF0aXZlIiwicmVsYXRpdmUiLCJpbXBsaWNpdFJlbGF0aXZlIiwibWF0Y2hDb250ZXh0IiwibWF0Y2hBbnlDb250ZXh0Iiwib3V0ZXJtb3N0Q29udGV4dCIsIm1hdGNoZXJGcm9tR3JvdXBNYXRjaGVycyIsImVsZW1lbnRNYXRjaGVycyIsInNldE1hdGNoZXJzIiwiYnlTZXQiLCJieUVsZW1lbnQiLCJzdXBlck1hdGNoZXIiLCJvdXRlcm1vc3QiLCJtYXRjaGVkQ291bnQiLCJzZXRNYXRjaGVkIiwiY29udGV4dEJhY2t1cCIsImZpbmQiLCJkaXJydW5zVW5pcXVlIiwicG9wIiwidW5pcXVlU29ydCIsImdldFRleHQiLCJpc1hNTCIsImNvbXBpbGUiLCJzb3J0SW5wdXQiLCJoYXNEdXBsaWNhdGUiLCJkb2NFbGVtIiwicmJ1Z2d5TWF0Y2hlcyIsImNsYXNzQ2FjaGUiLCJ0b2tlbkNhY2hlIiwic29ydE9yZGVyIiwicHVzaF9uYXRpdmUiLCJsaXN0IiwiYm9vbGVhbnMiLCJ3aGl0ZXNwYWNlIiwiaWRlbnRpZmllciIsImF0dHJpYnV0ZXMiLCJwc2V1ZG9zIiwicndoaXRlc3BhY2UiLCJSZWdFeHAiLCJyY29tbWEiLCJyY29tYmluYXRvcnMiLCJyYXR0cmlidXRlUXVvdGVzIiwicnBzZXVkbyIsIm1hdGNoRXhwciIsIklEIiwiQ0xBU1MiLCJUQUciLCJBVFRSIiwiUFNFVURPIiwiQ0hJTEQiLCJib29sIiwibmVlZHNDb250ZXh0IiwicmlucHV0cyIsInJoZWFkZXIiLCJybmF0aXZlIiwicnVuZXNjYXBlIiwiZnVuZXNjYXBlIiwiZXNjYXBlZCIsImVzY2FwZWRXaGl0ZXNwYWNlIiwiaGlnaCIsIlN0cmluZyIsImZyb21DaGFyQ29kZSIsInVubG9hZEhhbmRsZXIiLCJlbHMiLCJoYXNDb21wYXJlIiwicGFyZW50IiwiYWRkRXZlbnRMaXN0ZW5lciIsImF0dGFjaEV2ZW50IiwiY2xhc3NOYW1lIiwiY3JlYXRlQ29tbWVudCIsImdldEJ5SWQiLCJnZXRFbGVtZW50c0J5TmFtZSIsImF0dHJJZCIsImdldEF0dHJpYnV0ZU5vZGUiLCJpbnB1dCIsIm1hdGNoZXNTZWxlY3RvciIsIndlYmtpdE1hdGNoZXNTZWxlY3RvciIsIm1vek1hdGNoZXNTZWxlY3RvciIsIm9NYXRjaGVzU2VsZWN0b3IiLCJtc01hdGNoZXNTZWxlY3RvciIsImRpc2Nvbm5lY3RlZE1hdGNoIiwiY29tcGFyZURvY3VtZW50UG9zaXRpb24iLCJhZG93biIsImJ1cCIsImNvbXBhcmUiLCJzb3J0RGV0YWNoZWQiLCJhdXAiLCJhcCIsImJwIiwiZXhwciIsImF0dHIiLCJzcGVjaWZpZWQiLCJkdXBsaWNhdGVzIiwiZGV0ZWN0RHVwbGljYXRlcyIsInNvcnRTdGFibGUiLCJub2RlVmFsdWUiLCJzZWxlY3RvcnMiLCJjcmVhdGVQc2V1ZG8iLCI+IiwiICIsIisiLCJ+IiwiZXhjZXNzIiwidW5xdW90ZWQiLCJub2RlTmFtZVNlbGVjdG9yIiwicGF0dGVybiIsIm9wZXJhdG9yIiwiY2hlY2siLCJ3aGF0Iiwic2ltcGxlIiwiZm9yd2FyZCIsIm9mVHlwZSIsIm5vZGVJbmRleCIsInVzZUNhY2hlIiwicHNldWRvIiwiaWR4IiwibWF0Y2hlZCIsImhhcyIsImlubmVyVGV4dCIsImxhbmciLCJlbGVtTGFuZyIsImhhc2giLCJsb2NhdGlvbiIsInJvb3QiLCJmb2N1cyIsImhhc0ZvY3VzIiwiaHJlZiIsInRhYkluZGV4IiwiZW5hYmxlZCIsImRpc2FibGVkIiwic2VsZWN0ZWRJbmRleCIsImhlYWRlciIsImJ1dHRvbiIsImV2ZW4iLCJvZGQiLCJsdCIsImd0IiwicmFkaW8iLCJjaGVja2JveCIsImZpbGUiLCJwYXNzd29yZCIsImltYWdlIiwic3VibWl0IiwicmVzZXQiLCJmaWx0ZXJzIiwicGFyc2VPbmx5Iiwic29GYXIiLCJwcmVGaWx0ZXJzIiwiY2FjaGVkIiwidG9rZW4iLCJjb21waWxlZCIsImRpdjEiLCJ1bmlxdWUiLCJpc1hNTERvYyIsInVudGlsIiwidHJ1bmNhdGUiLCJpcyIsInNpYmxpbmdzIiwibiIsInJuZWVkc0NvbnRleHQiLCJyc2luZ2xlVGFnIiwicm9vdGpRdWVyeSIsInBhcnNlSFRNTCIsInJwYXJlbnRzcHJldiIsImd1YXJhbnRlZWRVbmlxdWUiLCJjaGlsZHJlbiIsIm5leHQiLCJ0YXJnZXRzIiwiY2xvc2VzdCIsInBvcyIsInByZXZBbGwiLCJhZGRCYWNrIiwicGFyZW50cyIsInBhcmVudHNVbnRpbCIsIm5leHRBbGwiLCJuZXh0VW50aWwiLCJwcmV2VW50aWwiLCJyZXZlcnNlIiwiQ2FsbGJhY2tzIiwiZmlyaW5nIiwibWVtb3J5IiwiZmlyZWQiLCJsb2NrZWQiLCJmaXJpbmdJbmRleCIsIm9uY2UiLCJzdG9wT25GYWxzZSIsImRpc2FibGUiLCJsb2NrIiwiZmlyZVdpdGgiLCJ0dXBsZXMiLCJ0aGVuIiwiZm5zIiwibmV3RGVmZXIiLCJ0dXBsZSIsInJldHVybmVkIiwibm90aWZ5IiwicmVzb2x2ZSIsInJlamVjdCIsInBpcGUiLCJzdGF0ZVN0cmluZyIsIndoZW4iLCJzdWJvcmRpbmF0ZSIsInByb2dyZXNzVmFsdWVzIiwicHJvZ3Jlc3NDb250ZXh0cyIsInJlc29sdmVDb250ZXh0cyIsInJlc29sdmVWYWx1ZXMiLCJ1cGRhdGVGdW5jIiwicmVhZHlMaXN0IiwicmVhZHlXYWl0IiwiaG9sZFJlYWR5IiwiaG9sZCIsIndhaXQiLCJ0cmlnZ2VySGFuZGxlciIsInJlYWR5U3RhdGUiLCJkb1Njcm9sbCIsImNoYWluYWJsZSIsImVtcHR5R2V0IiwicmF3IiwiYnVsayIsImFjY2VwdERhdGEiLCJvd25lciIsInJlZ2lzdGVyIiwiZGVmaW5lUHJvcGVydHkiLCJ3cml0YWJsZSIsImNvbmZpZ3VyYWJsZSIsInN0b3JlZCIsImNhbWVsIiwicmVtb3ZlRGF0YSIsIl9kYXRhIiwiX3JlbW92ZURhdGEiLCJjYW1lbEtleSIsImRlcXVldWUiLCJzdGFydExlbmd0aCIsInNldHRlciIsImNsZWFyUXVldWUiLCJjb3VudCIsImRlZmVyIiwicG51bSIsInNvdXJjZSIsImVsIiwib3B0aW9uIiwidGhlYWQiLCJjb2wiLCJ0ciIsInRkIiwib3B0Z3JvdXAiLCJ0Ym9keSIsInRmb290IiwiY29sZ3JvdXAiLCJjYXB0aW9uIiwidGgiLCJjbG9uZU5vZGUiLCJub0Nsb25lQ2hlY2tlZCIsInJrZXlFdmVudCIsInJtb3VzZUV2ZW50IiwicnR5cGVuYW1lc3BhY2UiLCJoYW5kbGVPYmpJbiIsImV2ZW50SGFuZGxlIiwidCIsImhhbmRsZU9iaiIsInNwZWNpYWwiLCJoYW5kbGVycyIsIm5hbWVzcGFjZXMiLCJvcmlnVHlwZSIsImVsZW1EYXRhIiwidHJpZ2dlcmVkIiwiZGlzcGF0Y2giLCJkZWxlZ2F0ZVR5cGUiLCJiaW5kVHlwZSIsIm5hbWVzcGFjZSIsImRlbGVnYXRlQ291bnQiLCJzZXR1cCIsIm1hcHBlZFR5cGVzIiwib3JpZ0NvdW50IiwidGVhcmRvd24iLCJyZW1vdmVFdmVudCIsImZpeCIsImhhbmRsZXJRdWV1ZSIsImRlbGVnYXRlVGFyZ2V0IiwicHJlRGlzcGF0Y2giLCJpc1Byb3BhZ2F0aW9uU3RvcHBlZCIsImN1cnJlbnRUYXJnZXQiLCJpc0ltbWVkaWF0ZVByb3BhZ2F0aW9uU3RvcHBlZCIsInJuYW1lc3BhY2UiLCJwcmV2ZW50RGVmYXVsdCIsInN0b3BQcm9wYWdhdGlvbiIsInBvc3REaXNwYXRjaCIsInNlbCIsImlzTmFOIiwiZml4SG9va3MiLCJrZXlIb29rcyIsIm9yaWdpbmFsIiwiY2hhckNvZGUiLCJrZXlDb2RlIiwibW91c2VIb29rcyIsImV2ZW50RG9jIiwicGFnZVgiLCJjbGllbnRYIiwic2Nyb2xsTGVmdCIsImNsaWVudExlZnQiLCJwYWdlWSIsImNsaWVudFkiLCJzY3JvbGxUb3AiLCJjbGllbnRUb3AiLCJvcmlnaW5hbEV2ZW50IiwiZml4SG9vayIsIkV2ZW50IiwibG9hZCIsIm5vQnViYmxlIiwidHJpZ2dlciIsImJsdXIiLCJjbGljayIsImJlZm9yZXVubG9hZCIsInJldHVyblZhbHVlIiwiaXNEZWZhdWx0UHJldmVudGVkIiwiZGVmYXVsdFByZXZlbnRlZCIsInRpbWVTdGFtcCIsInN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbiIsIm1vdXNlZW50ZXIiLCJtb3VzZWxlYXZlIiwicG9pbnRlcmVudGVyIiwicG9pbnRlcmxlYXZlIiwicmVsYXRlZCIsInJlbGF0ZWRUYXJnZXQiLCJyeGh0bWxUYWciLCJybm9Jbm5lcmh0bWwiLCJkYXRhQW5kRXZlbnRzIiwiZGVlcERhdGFBbmRFdmVudHMiLCJzcmNFbGVtZW50cyIsImRlc3RFbGVtZW50cyIsImluUGFnZSIsImFwcGVuZCIsInByZXBlbmQiLCJpbnNlcnRCZWZvcmUiLCJiZWZvcmUiLCJhZnRlciIsInJlcGxhY2VXaXRoIiwicmVwbGFjZUNoaWxkIiwicHJlcGVuZFRvIiwiaW5zZXJ0QWZ0ZXIiLCJyZXBsYWNlQWxsIiwiaW5zZXJ0IiwiSFRNTCIsIkJPRFkiLCJ2aWV3Iiwib3BlbmVyIiwiZ2V0Q29tcHV0ZWRTdHlsZSIsInN3YXAiLCJvbGQiLCJjb21wdXRlU3R5bGVUZXN0cyIsImNzc1RleHQiLCJjb250YWluZXIiLCJkaXZTdHlsZSIsInBpeGVsUG9zaXRpb25WYWwiLCJyZWxpYWJsZU1hcmdpbkxlZnRWYWwiLCJtYXJnaW5MZWZ0IiwiYm94U2l6aW5nUmVsaWFibGVWYWwiLCJtYXJnaW5SaWdodCIsInBpeGVsTWFyZ2luUmlnaHRWYWwiLCJiYWNrZ3JvdW5kQ2xpcCIsImNsZWFyQ2xvbmVTdHlsZSIsInBpeGVsUG9zaXRpb24iLCJyZWxpYWJsZU1hcmdpbkxlZnQiLCJyZWxpYWJsZU1hcmdpblJpZ2h0IiwibWFyZ2luRGl2IiwicmRpc3BsYXlzd2FwIiwiY3NzU2hvdyIsInBvc2l0aW9uIiwidmlzaWJpbGl0eSIsImNzc05vcm1hbFRyYW5zZm9ybSIsImxldHRlclNwYWNpbmciLCJmb250V2VpZ2h0IiwiYW5pbWF0aW9uSXRlcmF0aW9uQ291bnQiLCJjb2x1bW5Db3VudCIsImZpbGxPcGFjaXR5IiwiZmxleEdyb3ciLCJmbGV4U2hyaW5rIiwibGluZUhlaWdodCIsIm9yZGVyIiwib3JwaGFucyIsIndpZG93cyIsInpJbmRleCIsInpvb20iLCJjc3NQcm9wcyIsImZsb2F0Iiwib3JpZ05hbWUiLCJpc0Zpbml0ZSIsImxlZnQiLCJtYXJnaW4iLCJwYWRkaW5nIiwiYm9yZGVyIiwic3VmZml4IiwiZXhwYW5kZWQiLCJwYXJ0cyIsInByb3BIb29rcyIsImVhc2VkIiwic3RlcCIsImxpbmVhciIsInAiLCJzd2luZyIsImNvcyIsIlBJIiwidGltZXJJZCIsInJydW4iLCIqIiwidHdlZW5lciIsInByZWZpbHRlciIsInNwZWVkIiwib3B0Iiwic3BlZWRzIiwiZmFkZVRvIiwidG8iLCJhbmltYXRlIiwib3B0YWxsIiwiZG9BbmltYXRpb24iLCJmaW5pc2giLCJzdG9wUXVldWUiLCJ0aW1lcnMiLCJjc3NGbiIsInNsaWRlRG93biIsInNsaWRlVXAiLCJzbGlkZVRvZ2dsZSIsImZhZGVJbiIsImZhZGVPdXQiLCJmYWRlVG9nZ2xlIiwiaW50ZXJ2YWwiLCJzZXRJbnRlcnZhbCIsImNsZWFySW50ZXJ2YWwiLCJzbG93IiwiZmFzdCIsImRlbGF5IiwidGltZSIsInRpbWVvdXQiLCJjbGVhclRpbWVvdXQiLCJjaGVja09uIiwib3B0U2VsZWN0ZWQiLCJvcHREaXNhYmxlZCIsInJhZGlvVmFsdWUiLCJib29sSG9vayIsInJlbW92ZUF0dHIiLCJuVHlwZSIsImF0dHJIb29rcyIsInByb3BOYW1lIiwiYXR0ck5hbWVzIiwicHJvcEZpeCIsImdldHRlciIsInJmb2N1c2FibGUiLCJyY2xpY2thYmxlIiwicmVtb3ZlUHJvcCIsInRhYmluZGV4IiwicGFyc2VJbnQiLCJmb3IiLCJjbGFzcyIsInJjbGFzcyIsImFkZENsYXNzIiwiY2xhc3NlcyIsImN1clZhbHVlIiwiY2xhenoiLCJmaW5hbFZhbHVlIiwicmVtb3ZlQ2xhc3MiLCJ0b2dnbGVDbGFzcyIsInN0YXRlVmFsIiwiY2xhc3NOYW1lcyIsImhhc0NsYXNzIiwicnJldHVybiIsInZhbEhvb2tzIiwib3B0aW9uU2V0IiwicmZvY3VzTW9ycGgiLCJvbmx5SGFuZGxlcnMiLCJidWJibGVUeXBlIiwib250eXBlIiwiZXZlbnRQYXRoIiwiaXNUcmlnZ2VyIiwicGFyZW50V2luZG93Iiwic2ltdWxhdGUiLCJpc1NpbXVsYXRlZCIsImhvdmVyIiwiZm5PdmVyIiwiZm5PdXQiLCJmb2N1c2luIiwiYXR0YWNoZXMiLCJub25jZSIsInJxdWVyeSIsIkpTT04iLCJwYXJzZSIsInBhcnNlWE1MIiwiRE9NUGFyc2VyIiwicGFyc2VGcm9tU3RyaW5nIiwicmhhc2giLCJydHMiLCJyaGVhZGVycyIsInJsb2NhbFByb3RvY29sIiwicm5vQ29udGVudCIsInJwcm90b2NvbCIsImFsbFR5cGVzIiwib3JpZ2luQW5jaG9yIiwiYWN0aXZlIiwibGFzdE1vZGlmaWVkIiwiZXRhZyIsInVybCIsImlzTG9jYWwiLCJwcm90b2NvbCIsInByb2Nlc3NEYXRhIiwiYXN5bmMiLCJjb250ZW50VHlwZSIsImFjY2VwdHMiLCJqc29uIiwiKiB0ZXh0IiwidGV4dCBodG1sIiwidGV4dCBqc29uIiwidGV4dCB4bWwiLCJhamF4U2V0dXAiLCJzZXR0aW5ncyIsImFqYXhQcmVmaWx0ZXIiLCJhamF4VHJhbnNwb3J0IiwiYWpheCIsInN0YXR1cyIsIm5hdGl2ZVN0YXR1c1RleHQiLCJoZWFkZXJzIiwic3VjY2VzcyIsIm1vZGlmaWVkIiwic3RhdHVzVGV4dCIsInRpbWVvdXRUaW1lciIsInRyYW5zcG9ydCIsInJlc3BvbnNlSGVhZGVyc1N0cmluZyIsImlmTW9kaWZpZWQiLCJjYWNoZVVSTCIsImNhbGxiYWNrQ29udGV4dCIsInN0YXR1c0NvZGUiLCJmaXJlR2xvYmFscyIsImdsb2JhbEV2ZW50Q29udGV4dCIsImNvbXBsZXRlRGVmZXJyZWQiLCJyZXNwb25zZUhlYWRlcnMiLCJ1cmxBbmNob3IiLCJyZXF1ZXN0SGVhZGVycyIsInJlcXVlc3RIZWFkZXJzTmFtZXMiLCJzdHJBYm9ydCIsImdldEFsbFJlc3BvbnNlSGVhZGVycyIsInNldFJlcXVlc3RIZWFkZXIiLCJsbmFtZSIsIm92ZXJyaWRlTWltZVR5cGUiLCJhYm9ydCIsImZpbmFsVGV4dCIsIm1ldGhvZCIsImNyb3NzRG9tYWluIiwiaG9zdCIsInBhcmFtIiwiaGFzQ29udGVudCIsImJlZm9yZVNlbmQiLCJzZW5kIiwiZ2V0SlNPTiIsImdldFNjcmlwdCIsInRocm93cyIsIndyYXBBbGwiLCJmaXJzdEVsZW1lbnRDaGlsZCIsIndyYXBJbm5lciIsInVud3JhcCIsInZpc2libGUiLCJyMjAiLCJyQ1JMRiIsInJzdWJtaXR0ZXJUeXBlcyIsInJzdWJtaXR0YWJsZSIsImVuY29kZVVSSUNvbXBvbmVudCIsInNlcmlhbGl6ZSIsInNlcmlhbGl6ZUFycmF5IiwieGhyIiwiWE1MSHR0cFJlcXVlc3QiLCJ4aHJTdWNjZXNzU3RhdHVzIiwwLDEyMjMsInhoclN1cHBvcnRlZCIsImNvcnMiLCJlcnJvckNhbGxiYWNrIiwib3BlbiIsInVzZXJuYW1lIiwieGhyRmllbGRzIiwib25sb2FkIiwib25lcnJvciIsIm9uYWJvcnQiLCJvbnJlYWR5c3RhdGVjaGFuZ2UiLCJyZXNwb25zZVR5cGUiLCJyZXNwb25zZVRleHQiLCJiaW5hcnkiLCJ0ZXh0IHNjcmlwdCIsImNoYXJzZXQiLCJzY3JpcHRDaGFyc2V0IiwiZXZ0Iiwib2xkQ2FsbGJhY2tzIiwicmpzb25wIiwianNvbnAiLCJqc29ucENhbGxiYWNrIiwib3JpZ2luYWxTZXR0aW5ncyIsImNhbGxiYWNrTmFtZSIsIm92ZXJ3cml0dGVuIiwicmVzcG9uc2VDb250YWluZXIiLCJqc29uUHJvcCIsImNyZWF0ZUhUTUxEb2N1bWVudCIsImltcGxlbWVudGF0aW9uIiwia2VlcFNjcmlwdHMiLCJwYXJzZWQiLCJfbG9hZCIsInBhcmFtcyIsImFuaW1hdGVkIiwib2Zmc2V0Iiwic2V0T2Zmc2V0IiwiY3VyUG9zaXRpb24iLCJjdXJMZWZ0IiwiY3VyQ1NTVG9wIiwiY3VyVG9wIiwiY3VyT2Zmc2V0IiwiY3VyQ1NTTGVmdCIsImNhbGN1bGF0ZVBvc2l0aW9uIiwiY3VyRWxlbSIsInVzaW5nIiwid2luIiwiYm94IiwicGFnZVlPZmZzZXQiLCJwYWdlWE9mZnNldCIsIm9mZnNldFBhcmVudCIsInBhcmVudE9mZnNldCIsInNjcm9sbFRvIiwiSGVpZ2h0IiwiV2lkdGgiLCIiLCJkZWZhdWx0RXh0cmEiLCJmdW5jTmFtZSIsImJpbmQiLCJ1bmJpbmQiLCJkZWxlZ2F0ZSIsInVuZGVsZWdhdGUiLCJzaXplIiwiYW5kU2VsZiIsImRlZmluZSIsImFtZCIsIl9qUXVlcnkiLCJfJCIsIiQiLCJub0NvbmZsaWN0IiwiakNhcm91c2VsIiwiclJlbGF0aXZlVGFyZ2V0IiwicGFyc2VUYXJnZXQiLCJkZXRlY3RDYXJvdXNlbCIsImVsZW1lbnQiLCJjYXJvdXNlbCIsInBsdWdpbk5hbWUiLCJfb3B0aW9ucyIsIl9lbGVtZW50IiwiX2Nhcm91c2VsIiwiX2luaXQiLCJfY3JlYXRlIiwiX2Rlc3Ryb3kiLCJfcmVsb2FkIiwiY3JlYXRlIiwiX3RyaWdnZXIiLCJkZXN0cm95IiwicmVsb2FkIiwicGx1Z2luIiwicGx1Z2luUHJvdG90eXBlIiwiUGx1Z2luIiwiaW5zdGFuY2UiLCJjaGFyQXQiLCJtZXRob2RWYWx1ZSIsInRvRmxvYXQiLCJhbmltYXRpbmciLCJ0YWlsIiwiaW5UYWlsIiwicmVzaXplVGltZXIiLCJ2ZXJ0aWNhbCIsInJ0bCIsImNpcmN1bGFyIiwidW5kZXJmbG93IiwiaXRlbXMiLCJ0cmFuc2l0aW9ucyIsImNlbnRlciIsIl9saXN0IiwiX2l0ZW1zIiwiX3RhcmdldCIsIl9maXJzdCIsIl9sYXN0IiwiX3Zpc2libGUiLCJfZnVsbHl2aXNpYmxlIiwib25XaW5kb3dSZXNpemUiLCJmb3VuZCIsIml0ZW0iLCJfcHJlcGFyZSIsIl9wb3NpdGlvbiIsIm1vdmUiLCJscmIiLCJjbGlwcGluZyIsImRpbSIsImRpbWVuc2lvbiIsImFicyIsImZ1bGx5dmlzaWJsZSIsImhhc05leHQiLCJoYXNQcmV2Iiwic2Nyb2xsIiwiY3VyciIsImlzVmlzaWJsZSIsIl9zY3JvbGwiLCJfc2Nyb2xsVGFpbCIsIm1vdmVCeSIsIm1pbiIsIm11bHRpcGxpZXIiLCJjb3JyZWN0aW9uIiwidHJhbnNmb3JtcyIsInRyYW5zZm9ybXMzZCIsImJhY2t1cCIsInRyYW5zaXRpb25EdXJhdGlvbiIsInRyYW5zaXRpb25UaW1pbmdGdW5jdGlvbiIsInRyYW5zaXRpb25Qcm9wZXJ0eSIsIm9sZENvbXBsZXRlIiwidHJhbnNmb3JtIiwiY3VyclBvcyIsIl9hbmltYXRlIiwiX3VwZGF0ZSIsImMiLCJ3aCIsImNsaXAiLCJ1cGRhdGUiLCJjZW50ZXJPZmZzZXQiLCJiYWNrIiwiZG9VcGRhdGUiLCJlbEluIiwiZWxPdXQiLCJqY2Fyb3VzZWwiLCJzY3JvbGxJbnRvVmlldyIsIl9hY3RpdmUiLCJvbkRlc3Ryb3kiLCJvblJlbG9hZCIsIm9uRXZlbnQiLCJwZXJQYWdlIiwicGFnZSIsIl9jYXJvdXNlbEl0ZW1zIiwiX3BhZ2VzIiwiX2N1cnJlbnRQYWdlIiwib25TY3JvbGwiLCJfY2xlYXIiLCJfY2FsY3VsYXRlUGFnZXMiLCJwcCIsIl9nZXRDYXJvdXNlbEl0ZW1zIiwibnVtQ2Fyb3VzZWxJdGVtcyIsImNhcm91c2VsSXRlbXMiLCJjdXJySXRlbSIsImN1cnJlbnRJbmRleCIsIm5ld0luZGV4IiwiY3VycmVudFBhZ2UiLCJyZWxvYWRDYXJvdXNlbEl0ZW1zIiwicGFnZXMiLCJoaWRkZW5Qcm9wIiwidmlzaWJpbGl0eUNoYW5nZUV2ZW50IiwidmlzaWJpbGl0eUNoYW5nZUV2ZW50TmFtZXMiLCJtb3pIaWRkZW4iLCJtc0hpZGRlbiIsIndlYmtpdEhpZGRlbiIsImF1dG9zdGFydCIsIl90aW1lciIsIl9zdGFydGVkIiwib25BbmltYXRlRW5kIiwiX3N0YXJ0Iiwib25WaXNpYmlsaXR5Q2hhbmdlIiwiX3N0b3AiLCJkZWZpbmVCcmlkZ2V0IiwiYWRkT3B0aW9uTWV0aG9kIiwiUGx1Z2luQ2xhc3MiLCJicmlkZ2UiLCJsb2dFcnJvciIsImNvbnNvbGUiLCJtZXNzYWdlIiwiYnJpZGdldCIsInJlcXVpcmUiLCJnZXRJRUV2ZW50Iiwic3JjRWxlbWVudCIsImhhbmRsZUV2ZW50IiwiZGV0YWNoRXZlbnQiLCJldmVudGllIiwiRXZlbnRFbWl0dGVyIiwiaW5kZXhPZkxpc3RlbmVyIiwibGlzdGVuZXJzIiwibGlzdGVuZXIiLCJhbGlhcyIsInByb3RvIiwib3JpZ2luYWxHbG9iYWxWYWx1ZSIsImdldExpc3RlbmVycyIsIl9nZXRFdmVudHMiLCJmbGF0dGVuTGlzdGVuZXJzIiwiZmxhdExpc3RlbmVycyIsImdldExpc3RlbmVyc0FzT2JqZWN0IiwiYWRkTGlzdGVuZXIiLCJsaXN0ZW5lcklzV3JhcHBlZCIsImFkZE9uY2VMaXN0ZW5lciIsImRlZmluZUV2ZW50IiwiZGVmaW5lRXZlbnRzIiwiZXZ0cyIsInJlbW92ZUxpc3RlbmVyIiwiYWRkTGlzdGVuZXJzIiwibWFuaXB1bGF0ZUxpc3RlbmVycyIsInJlbW92ZUxpc3RlbmVycyIsInNpbmdsZSIsIm11bHRpcGxlIiwiX2V2ZW50cyIsInJlbW92ZUFsbExpc3RlbmVycyIsImVtaXRFdmVudCIsIl9nZXRPbmNlUmV0dXJuVmFsdWUiLCJlbWl0Iiwic2V0T25jZVJldHVyblZhbHVlIiwiX29uY2VSZXR1cm5WYWx1ZSIsImdldFN0eWxlUHJvcGVydHkiLCJkb2NFbGVtU3R5bGUiLCJwcmVmaXhlZCIsInByZWZpeGVzIiwiZ2V0U3R5bGVTaXplIiwiaXNWYWxpZCIsImdldFplcm9TaXplIiwiaW5uZXJXaWR0aCIsImlubmVySGVpZ2h0Iiwib3V0ZXJXaWR0aCIsIm91dGVySGVpZ2h0IiwibWVhc3VyZW1lbnRzIiwibWVhc3VyZW1lbnQiLCJkZWZpbmVHZXRTaXplIiwiaXNTZXR1cCIsImdldFN0eWxlIiwiZ2V0U3R5bGVGbiIsImN1cnJlbnRTdHlsZSIsImJveFNpemluZ1Byb3AiLCJib3JkZXJTdHlsZSIsImJvcmRlcldpZHRoIiwiaXNCb3hTaXplT3V0ZXIiLCJnZXRTaXplIiwicXVlcnlTZWxlY3RvciIsIm11bmdlTm9uUGl4ZWwiLCJwYWRkaW5nV2lkdGgiLCJwYWRkaW5nTGVmdCIsInBhZGRpbmdSaWdodCIsInBhZGRpbmdIZWlnaHQiLCJwYWRkaW5nVG9wIiwicGFkZGluZ0JvdHRvbSIsIm1hcmdpbldpZHRoIiwibWFyZ2luSGVpZ2h0IiwibWFyZ2luVG9wIiwibWFyZ2luQm90dG9tIiwiYm9yZGVyTGVmdFdpZHRoIiwiYm9yZGVyUmlnaHRXaWR0aCIsImJvcmRlckhlaWdodCIsImJvcmRlclRvcFdpZHRoIiwiYm9yZGVyQm90dG9tV2lkdGgiLCJpc0JvcmRlckJveFNpemVPdXRlciIsInN0eWxlV2lkdGgiLCJzdHlsZUhlaWdodCIsInJzIiwicnVudGltZVN0eWxlIiwicnNMZWZ0IiwicGl4ZWxMZWZ0IiwiZG9jUmVhZHkiLCJvblJlYWR5IiwiaXNJRThOb3RSZWFkeSIsImRlZmluZURvY1JlYWR5IiwiRWxlbVByb3RvIiwibWF0Y2hlc01ldGhvZCIsImNoZWNrUGFyZW50IiwicXVlcnkiLCJtYXRjaENoaWxkIiwic3VwcG9ydHNPcnBoYW5zIiwiRWxlbWVudCIsImZpenp5VUlVdGlscyIsInV0aWxzIiwibW9kdWxvIiwib2JqVG9TdHJpbmciLCJhcnkiLCJyZW1vdmVGcm9tIiwiaXNFbGVtZW50IiwiSFRNTEVsZW1lbnQiLCJzZXRUZXh0Iiwic2V0VGV4dFByb3BlcnR5IiwiZ2V0UGFyZW50IiwiZ2V0UXVlcnlFbGVtZW50IiwiZmlsdGVyRmluZEVsZW1lbnRzIiwiZmZFbGVtcyIsImNoaWxkRWxlbXMiLCJqTGVuIiwiZGVib3VuY2VNZXRob2QiLCJfY2xhc3MiLCJtZXRob2ROYW1lIiwidGhyZXNob2xkIiwidGltZW91dE5hbWUiLCJfdGhpcyIsInRvRGFzaGVkIiwic3RyIiwiJDEiLCIkMiIsImh0bWxJbml0IiwiV2lkZ2V0Q2xhc3MiLCJkYXNoZWROYW1lc3BhY2UiLCJPdXRsYXllciIsIkl0ZW0iLCJpc0VtcHR5T2JqIiwibGF5b3V0IiwieCIsInkiLCJ0b0Rhc2hlZEFsbCIsInRyYW5zZm9ybVByb3BlcnR5Iiwic3VwcG9ydHNDU1MzIiwiaXMzZCIsInRyYW5zaXRpb25FbmRFdmVudCIsIldlYmtpdFRyYW5zaXRpb24iLCJNb3pUcmFuc2l0aW9uIiwiT1RyYW5zaXRpb24iLCJ0cmFuc2l0aW9uIiwicHJlZml4YWJsZVByb3BlcnRpZXMiLCJ2ZW5kb3JQcm9wZXJ0aWVzIiwic3VwcG9ydGVkUHJvcCIsIl90cmFuc24iLCJpbmdQcm9wZXJ0aWVzIiwiY2xlYW4iLCJvbkVuZCIsImVsZW1TdHlsZSIsImdldFBvc2l0aW9uIiwibGF5b3V0T3B0aW9ucyIsImlzT3JpZ2luTGVmdCIsImlzT3JpZ2luVG9wIiwieFZhbHVlIiwieVZhbHVlIiwibGF5b3V0U2l6ZSIsImxheW91dFBvc2l0aW9uIiwieFBhZGRpbmciLCJ4UHJvcGVydHkiLCJ4UmVzZXRQcm9wZXJ0eSIsImdldFhWYWx1ZSIsInlQYWRkaW5nIiwieVByb3BlcnR5IiwieVJlc2V0UHJvcGVydHkiLCJnZXRZVmFsdWUiLCJwZXJjZW50UG9zaXRpb24iLCJpc0hvcml6b250YWwiLCJfdHJhbnNpdGlvblRvIiwiY3VyWCIsImN1clkiLCJjb21wYXJlWCIsImNvbXBhcmVZIiwiZGlkTm90TW92ZSIsInNldFBvc2l0aW9uIiwiaXNUcmFuc2l0aW9uaW5nIiwidHJhbnNYIiwidHJhbnNZIiwidHJhbnNpdGlvblN0eWxlIiwiZ2V0VHJhbnNsYXRlIiwib25UcmFuc2l0aW9uRW5kIiwiaXNDbGVhbmluZyIsImdvVG8iLCJtb3ZlVG8iLCJfbm9uVHJhbnNpdGlvbiIsIl9yZW1vdmVTdHlsZXMiLCJfdHJhbnNpdGlvbiIsImZyb20iLCJoIiwiZW5hYmxlVHJhbnNpdGlvbiIsInRyYW5zaXRpb25Qcm9wcyIsIm9ud2Via2l0VHJhbnNpdGlvbkVuZCIsIm9udHJhbnNpdGlvbmVuZCIsIm9ub3RyYW5zaXRpb25lbmQiLCJkYXNoZWRWZW5kb3JQcm9wZXJ0aWVzIiwiLXdlYmtpdC10cmFuc2Zvcm0iLCItbW96LXRyYW5zZm9ybSIsIi1vLXRyYW5zZm9ybSIsInByb3BlcnR5TmFtZSIsImRpc2FibGVUcmFuc2l0aW9uIiwicmVtb3ZlVHJhbnNpdGlvblN0eWxlcyIsImNsZWFuU3R5bGUiLCJjbGVhblRyYW5zaXRpb25TdHlsZSIsInJlbW92ZUVsZW0iLCJyZXZlYWwiLCJ0cmFuc2l0aW9uRW5kUHJvcGVydHkiLCJnZXRIaWRlUmV2ZWFsVHJhbnNpdGlvbkVuZFByb3BlcnR5Iiwib25SZXZlYWxUcmFuc2l0aW9uRW5kIiwiaGlkZGVuU3R5bGUiLCJ2aXNpYmxlU3R5bGUiLCJzdHlsZVByb3BlcnR5Iiwib3B0aW9uU3R5bGUiLCJvbkhpZGVUcmFuc2l0aW9uRW5kIiwicmlnaHQiLCJib3R0b20iLCJxdWVyeUVsZW1lbnQiLCIkZWxlbWVudCIsImRlZmF1bHRzIiwiR1VJRCIsIm91dGxheWVyR1VJRCIsImluc3RhbmNlcyIsImlzSW5pdExheW91dCIsImNvbnRhaW5lclN0eWxlIiwiaXNSZXNpemVCb3VuZCIsImlzUmVzaXppbmdDb250YWluZXIiLCJyZWxvYWRJdGVtcyIsInN0YW1wcyIsInN0YW1wIiwiYmluZFJlc2l6ZSIsIl9pdGVtaXplIiwiaXRlbUVsZW1zIiwiX2ZpbHRlckZpbmRJdGVtRWxlbWVudHMiLCJpdGVtU2VsZWN0b3IiLCJnZXRJdGVtRWxlbWVudHMiLCJfcmVzZXRMYXlvdXQiLCJfbWFuYWdlU3RhbXBzIiwiaXNJbnN0YW50IiwiaXNMYXlvdXRJbnN0YW50IiwiX2lzTGF5b3V0SW5pdGVkIiwibGF5b3V0SXRlbXMiLCJfZ2V0TWVhc3VyZW1lbnQiLCJfZ2V0SXRlbXNGb3JMYXlvdXQiLCJfbGF5b3V0SXRlbXMiLCJfcG9zdExheW91dCIsImlzSWdub3JlZCIsIl9lbWl0Q29tcGxldGVPbkl0ZW1zIiwiX2dldEl0ZW1MYXlvdXRQb3NpdGlvbiIsIl9wcm9jZXNzTGF5b3V0UXVldWUiLCJfcG9zaXRpb25JdGVtIiwicmVzaXplQ29udGFpbmVyIiwiX2dldENvbnRhaW5lclNpemUiLCJfc2V0Q29udGFpbmVyTWVhc3VyZSIsIm1lYXN1cmUiLCJpc1dpZHRoIiwiZWxlbVNpemUiLCJldmVudE5hbWUiLCJvbkNvbXBsZXRlIiwiZGlzcGF0Y2hFdmVudCIsImRvbmVDb3VudCIsImVtaXRBcmdzIiwiJGV2ZW50IiwiaWdub3JlIiwiZ2V0SXRlbSIsInVuaWdub3JlIiwiX2ZpbmQiLCJ1bnN0YW1wIiwiX2dldEJvdW5kaW5nUmVjdCIsIl9tYW5hZ2VTdGFtcCIsImJvdW5kaW5nUmVjdCIsIl9ib3VuZGluZ1JlY3QiLCJfZ2V0RWxlbWVudE9mZnNldCIsInRoaXNSZWN0IiwidW5iaW5kUmVzaXplIiwib25yZXNpemUiLCJkZWxheWVkIiwicmVzaXplIiwicmVzaXplVGltZW91dCIsIm5lZWRzUmVzaXplTGF5b3V0IiwiaGFzU2l6ZXMiLCJhZGRJdGVtcyIsImFwcGVuZGVkIiwicHJlcGVuZGVkIiwicHJldmlvdXNJdGVtcyIsInJldmVhbEl0ZW1FbGVtZW50cyIsImdldEl0ZW1zIiwiaGlkZUl0ZW1FbGVtZW50cyIsInJlbW92ZUl0ZW1zIiwiTGF5b3V0IiwiSXNvdG9wZSIsIml0ZW1HVUlEIiwic29ydERhdGEiLCJ1cGRhdGVTb3J0RGF0YSIsImdldFNvcnREYXRhIiwic29ydGVycyIsIl9zb3J0ZXJzIiwic29ydGVyIiwiTGF5b3V0TW9kZSIsImlzb3RvcGUiLCJmaWx0ZXJlZEl0ZW1zIiwiZ2V0T3V0bGF5ZXJNZXRob2QiLCJmYWNhZGVNZXRob2RzIiwibmVlZHNWZXJ0aWNhbFJlc2l6ZUxheW91dCIsImdldENvbHVtbldpZHRoIiwiZ2V0U2VnbWVudFNpemUiLCJnZXRSb3dIZWlnaHQiLCJzZWdtZW50Iiwic2VnbWVudE5hbWUiLCJvdXRlclNpemUiLCJmaXJzdEl0ZW1TaXplIiwiZ2V0Rmlyc3RJdGVtU2l6ZSIsImZpcnN0SXRlbSIsIm1vZGVzIiwiTW9kZSIsIk1hc29ucnkiLCJtZWFzdXJlQ29sdW1ucyIsImNvbHMiLCJjb2xZcyIsIm1heFkiLCJnZXRDb250YWluZXJXaWR0aCIsImNvbHVtbldpZHRoIiwiZmlyc3RJdGVtRWxlbSIsImNvbnRhaW5lcldpZHRoIiwiZ3V0dGVyIiwibWF0aE1ldGhvZCIsImlzRml0V2lkdGgiLCJyZW1haW5kZXIiLCJjb2xTcGFuIiwiY29sR3JvdXAiLCJfZ2V0Q29sR3JvdXAiLCJtaW5pbXVtWSIsInNob3J0Q29sSW5kZXgiLCJzZXRIZWlnaHQiLCJzZXRTcGFuIiwiZ3JvdXBDb3VudCIsImdyb3VwQ29sWXMiLCJzdGFtcFNpemUiLCJmaXJzdFgiLCJsYXN0WCIsImZpcnN0Q29sIiwiZmxvb3IiLCJsYXN0Q29sIiwic3RhbXBNYXhZIiwiX2dldENvbnRhaW5lckZpdFdpZHRoIiwidW51c2VkQ29scyIsInByZXZpb3VzV2lkdGgiLCJNYXNvbnJ5TW9kZSIsIkZpdFJvd3MiLCJpdGVtV2lkdGgiLCJWZXJ0aWNhbCIsImhvcml6b250YWxBbGlnbm1lbnQiLCJnZXRJdGVtU29ydGVyIiwic29ydEJ5cyIsInNvcnRBc2MiLCJpdGVtQSIsIml0ZW1CIiwic29ydEJ5IiwiaXNBc2NlbmRpbmciLCJkaXJlY3Rpb24iLCJsYXlvdXRNb2RlIiwiaXNKUXVlcnlGaWx0ZXJpbmciLCJzb3J0QXNjZW5kaW5nIiwiX2dldFNvcnRlcnMiLCJzb3J0SGlzdG9yeSIsIl9pbml0TGF5b3V0TW9kZSIsIl91cGRhdGVJdGVtc1NvcnREYXRhIiwiaW5pdGlhbE9wdHMiLCJhcnJhbmdlIiwiX2xheW91dCIsIl9nZXRJc0luc3RhbnQiLCJoaWRlUmV2ZWFsIiwiZmlsdGVyZWQiLCJuZWVkUmV2ZWFsIiwibmVlZEhpZGUiLCJfZmlsdGVyIiwiX2JpbmRBcnJhbmdlQ29tcGxldGUiLCJfaXNJbnN0YW50IiwiX25vVHJhbnNpdGlvbiIsIl9zb3J0IiwiYXJyYW5nZVBhcmFsbGVsQ2FsbGJhY2siLCJpc0xheW91dENvbXBsZXRlIiwiaXNIaWRlQ29tcGxldGUiLCJpc1JldmVhbENvbXBsZXRlIiwiaGlkZGVuTWF0Y2hlZCIsInZpc2libGVVbm1hdGNoZWQiLCJfZ2V0RmlsdGVyVGVzdCIsImlzTWF0Y2hlZCIsIm11bmdlU29ydGVyIiwiYXR0ck1hdGNoIiwiZ2V0VmFsdWUiLCJnZXRWYWx1ZUdldHRlciIsInBhcnNlciIsInNvcnREYXRhUGFyc2VycyIsImNoaWxkIiwic29ydEJ5T3B0IiwiaXRlbVNvcnRlciIsIl9tb2RlIiwibW9kZSIsIl9maWx0ZXJSZXZlYWxBZGRlZCIsImZpbHRlcmVkSW5zZXJ0SXRlbXMiLCJfcmVtb3ZlIiwic2h1ZmZsZSIsImdldEZpbHRlcmVkSXRlbUVsZW1lbnRzIiwidG1wbCIsIkZ1bmN0aW9uIiwicmVuZGVySW1hZ2VzIiwicXVlcnlXb3JkIiwiQVBJX0tFWSIsImxvZyIsImhpdHMiLCJtYXNvbnJ5IiwiamNhcm91c2VsQXV0b3Njcm9sbCIsImpjYXJvdXNlbENvbnRyb2wiXSwibWFwcGluZ3MiOiJDQWNDLFNBQVVBLEVBQVFDLEdBRUssZ0JBQVhDLFNBQWlELGdCQUFuQkEsUUFBT0MsUUFRaERELE9BQU9DLFFBQVVILEVBQU9JLFNBQ3ZCSCxFQUFTRCxHQUFRLEdBQ2pCLFNBQVVLLEdBQ1QsSUFBTUEsRUFBRUQsU0FDUCxLQUFNLElBQUlFLE9BQU8sMkNBRWxCLE9BQU9MLEdBQVNJLElBR2xCSixFQUFTRCxJQUlTLG1CQUFYTyxRQUF5QkEsT0FBU0MsS0FBTSxTQUFVRCxFQUFRRSxHQXNlbkUsUUFBU0MsR0FBYUMsR0FNckIsR0FBSUMsS0FBV0QsR0FBTyxVQUFZQSxJQUFPQSxFQUFJQyxPQUM1Q0MsRUFBT0MsR0FBT0QsS0FBTUYsRUFFckIsT0FBYyxhQUFURSxHQUF1QkMsR0FBT0MsU0FBVUosSUFDckMsRUFHUSxVQUFURSxHQUEr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LFlBQVksY0FFcEI1MEIsR0FBRyw0QkFBNkIsV0FDaEM2L0IsRUFBRW5uQyxNQUFNNjdCLFNBQVMsY0FFakJtdEIsa0JBQ0FwMEMsT0FBUSxPQUdWLElBQUk4ekMsR0FBWSxHQUNaQyxFQUFVLG9DQUNWemIsRUFBTyxFQUNQRCxFQUFVLENBOEJkOUYsR0FBRSxtQkFBbUI3L0IsR0FBRyxRQUFTLFNBQVNwRSxHQUN6Q0EsRUFBRWl1QixnQkFDRixJQUFJZ2tCLEdBQVFoTyxFQUFFLGlCQUNkc2hCLEdBQWFobUIsbUJBQW9CMFMsRUFBTXZuQyxRQUN2Q3VuQyxFQUFNdm5DLElBQUksTUFHWDY2QyxFQUFhQyIsImZpbGUiOiJtYWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyohXHJcbiAqIGpRdWVyeSBKYXZhU2NyaXB0IExpYnJhcnkgdjIuMi4xXHJcbiAqIGh0dHA6Ly9qcXVlcnkuY29tL1xyXG4gKlxyXG4gKiBJbmNsdWRlcyBTaXp6bGUuanNcclxuICogaHR0cDovL3NpenpsZWpzLmNvbS9cclxuICpcclxuICogQ29weXJpZ2h0IGpRdWVyeSBGb3VuZGF0aW9uIGFuZCBvdGhlciBjb250cmlidXRvcnNcclxuICogUmVsZWFzZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlXHJcbiAqIGh0dHA6Ly9qcXVlcnkub3JnL2xpY2Vuc2VcclxuICpcclxuICogRGF0ZTogMjAxNi0wMi0yMlQxOToxMVpcclxuICovXHJcblxyXG4oZnVuY3Rpb24oIGdsb2JhbCwgZmFjdG9yeSApIHtcclxuXHJcblx0aWYgKCB0eXBlb2YgbW9kdWxlID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiBtb2R1bGUuZXhwb3J0cyA9PT0gXCJvYmplY3RcIiApIHtcclxuXHRcdC8vIEZvciBDb21tb25KUyBhbmQgQ29tbW9uSlMtbGlrZSBlbnZpcm9ubWVudHMgd2hlcmUgYSBwcm9wZXIgYHdpbmRvd2BcclxuXHRcdC8vIGlzIHByZXNlbnQsIGV4ZWN1dGUgdGhlIGZhY3RvcnkgYW5kIGdldCBqUXVlcnkuXHJcblx0XHQvLyBGb3IgZW52aXJvbm1lbnRzIHRoYXQgZG8gbm90IGhhdmUgYSBgd2luZG93YCB3aXRoIGEgYGRvY3VtZW50YFxyXG5cdFx0Ly8gKHN1Y2ggYXMgTm9kZS5qcyksIGV4cG9zZSBhIGZhY3RvcnkgYXMgbW9kdWxlLmV4cG9ydHMuXHJcblx0XHQvLyBUaGlzIGFjY2VudHVhdGVzIHRoZSBuZWVkIGZvciB0aGUgY3JlYXRpb24gb2YgYSByZWFsIGB3aW5kb3dgLlxyXG5cdFx0Ly8gZS5nLiB2YXIgalF1ZXJ5ID0gcmVxdWlyZShcImpxdWVyeVwiKSh3aW5kb3cpO1xyXG5cdFx0Ly8gU2VlIHRpY2tldCAjMTQ1NDkgZm9yIG1vcmUgaW5mby5cclxuXHRcdG1vZHVsZS5leHBvcnRzID0gZ2xvYmFsLmRvY3VtZW50ID9cclxuXHRcdFx0ZmFjdG9yeSggZ2xvYmFsLCB0cnVlICkgOlxyXG5cdFx0XHRmdW5jdGlvbiggdyApIHtcclxuXHRcdFx0XHRpZiAoICF3LmRvY3VtZW50ICkge1xyXG5cdFx0XHRcdFx0dGhyb3cgbmV3IEVycm9yKCBcImpRdWVyeSByZXF1aXJlcyBhIHdpbmRvdyB3aXRoIGEgZG9jdW1lbnRcIiApO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHRyZXR1cm4gZmFjdG9yeSggdyApO1xyXG5cdFx0XHR9O1xyXG5cdH0gZWxzZSB7XHJcblx0XHRmYWN0b3J5KCBnbG9iYWwgKTtcclxuXHR9XHJcblxyXG4vLyBQYXNzIHRoaXMgaWYgd2luZG93IGlzIG5vdCBkZWZpbmVkIHlldFxyXG59KHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIgPyB3aW5kb3cgOiB0aGlzLCBmdW5jdGlvbiggd2luZG93LCBub0dsb2JhbCApIHtcclxuXHJcbi8vIFN1cHBvcnQ6IEZpcmVmb3ggMTgrXHJcbi8vIENhbid0IGJlIGluIHN0cmljdCBtb2RlLCBzZXZlcmFsIGxpYnMgaW5jbHVkaW5nIEFTUC5ORVQgdHJhY2VcclxuLy8gdGhlIHN0YWNrIHZpYSBhcmd1bWVudHMuY2FsbGVyLmNhbGxlZSBhbmQgRmlyZWZveCBkaWVzIGlmXHJcbi8vIHlvdSB0cnkgdG8gdHJhY2UgdGhyb3VnaCBcInVzZSBzdHJpY3RcIiBjYWxsIGNoYWlucy4gKCMxMzMzNSlcclxuLy9cInVzZSBzdHJpY3RcIjtcclxudmFyIGFyciA9IFtdO1xyXG5cclxudmFyIGRvY3VtZW50ID0gd2luZG93LmRvY3VtZW50O1xyXG5cclxudmFyIHNsaWNlID0gYXJyLnNsaWNlO1xyXG5cclxudmFyIGNvbmNhdCA9IGFyci5jb25jYXQ7XHJcblxyXG52YXIgcHVzaCA9IGFyci5wdXNoO1xyXG5cclxudmFyIGluZGV4T2YgPSBhcnIuaW5kZXhPZjtcclxuXHJcbnZhciBjbGFzczJ0eXBlID0ge307XHJcblxyXG52YXIgdG9TdHJpbmcgPSBjbGFzczJ0eXBlLnRvU3RyaW5nO1xyXG5cclxudmFyIGhhc093biA9IGNsYXNzMnR5cGUuaGFzT3duUHJvcGVydHk7XHJcblxyXG52YXIgc3VwcG9ydCA9IHt9O1xyXG5cclxuXHJcblxyXG52YXJcclxuXHR2ZXJzaW9uID0gXCIyLjIuMVwiLFxyXG5cclxuXHQvLyBEZWZpbmUgYSBsb2NhbCBjb3B5IG9mIGpRdWVyeVxyXG5cdGpRdWVyeSA9IGZ1bmN0aW9uKCBzZWxlY3RvciwgY29udGV4dCApIHtcclxuXHJcblx0XHQvLyBUaGUgalF1ZXJ5IG9iamVjdCBpcyBhY3R1YWxseSBqdXN0IHRoZSBpbml0IGNvbnN0cnVjdG9yICdlbmhhbmNlZCdcclxuXHRcdC8vIE5lZWQgaW5pdCBpZiBqUXVlcnkgaXMgY2FsbGVkIChqdXN0IGFsbG93IGVycm9yIHRvIGJlIHRocm93biBpZiBub3QgaW5jbHVkZWQpXHJcblx0XHRyZXR1cm4gbmV3IGpRdWVyeS5mbi5pbml0KCBzZWxlY3RvciwgY29udGV4dCApO1xyXG5cdH0sXHJcblxyXG5cdC8vIFN1cHBvcnQ6IEFuZHJvaWQ8NC4xXHJcblx0Ly8gTWFrZSBzdXJlIHdlIHRyaW0gQk9NIGFuZCBOQlNQXHJcblx0cnRyaW0gPSAvXltcXHNcXHVGRUZGXFx4QTBdK3xbXFxzXFx1RkVGRlxceEEwXSskL2csXHJcblxyXG5cdC8vIE1hdGNoZXMgZGFzaGVkIHN0cmluZyBmb3IgY2FtZWxpemluZ1xyXG5cdHJtc1ByZWZpeCA9IC9eLW1zLS8sXHJcblx0cmRhc2hBbHBoYSA9IC8tKFtcXGRhLXpdKS9naSxcclxuXHJcblx0Ly8gVXNlZCBieSBqUXVlcnkuY2FtZWxDYXNlIGFzIGNhbGxiYWNrIHRvIHJlcGxhY2UoKVxyXG5cdGZjYW1lbENhc2UgPSBmdW5jdGlvbiggYWxsLCBsZXR0ZXIgKSB7XHJcblx0XHRyZXR1cm4gbGV0dGVyLnRvVXBwZXJDYXNlKCk7XHJcblx0fTtcclxuXHJcbmpRdWVyeS5mbiA9IGpRdWVyeS5wcm90b3R5cGUgPSB7XHJcblxyXG5cdC8vIFRoZSBjdXJyZW50IHZlcnNpb24gb2YgalF1ZXJ5IGJlaW5nIHVzZWRcclxuXHRqcXVlcnk6IHZlcnNpb24sXHJcblxyXG5cdGNvbnN0cnVjdG9yOiBqUXVlcnksXHJcblxyXG5cdC8vIFN0YXJ0IHdpdGggYW4gZW1wdHkgc2VsZWN0b3JcclxuXHRzZWxlY3RvcjogXCJcIixcclxuXHJcblx0Ly8gVGhlIGRlZmF1bHQgbGVuZ3RoIG9mIGEgalF1ZXJ5IG9iamVjdCBpcyAwXHJcblx0bGVuZ3RoOiAwLFxyXG5cclxuXHR0b0FycmF5OiBmdW5jdGlvbigpIHtcclxuXHRcdHJldHVybiBzbGljZS5jYWxsKCB0aGlzICk7XHJcblx0fSxcclxuXHJcblx0Ly8gR2V0IHRoZSBOdGggZWxlbWVudCBpbiB0aGUgbWF0Y2hlZCBlbGVtZW50IHNldCBPUlxyXG5cdC8vIEdldCB0aGUgd2hvbGUgbWF0Y2hlZCBlbGVtZW50IHNldCBhcyBhIGNsZWFuIGFycmF5XHJcblx0Z2V0OiBmdW5jdGlvbiggbnVtICkge1xyXG5cdFx0cmV0dXJuIG51bSAhPSBudWxsID9cclxuXHJcblx0XHRcdC8vIFJldHVybiBqdXN0IHRoZSBvbmUgZWxlbWVudCBmcm9tIHRoZSBzZXRcclxuXHRcdFx0KCBudW0gPCAwID8gdGhpc1sgbnVtICsgdGhpcy5sZW5ndGggXSA6IHRoaXNbIG51bSBdICkgOlxyXG5cclxuXHRcdFx0Ly8gUmV0dXJuIGFsbCB0aGUgZWxlbWVudHMgaW4gYSBjbGVhbiBhcnJheVxyXG5cdFx0XHRzbGljZS5jYWxsKCB0aGlzICk7XHJcblx0fSxcclxuXHJcblx0Ly8gVGFrZSBhbiBhcnJheSBvZiBlbGVtZW50cyBhbmQgcHVzaCBpdCBvbnRvIHRoZSBzdGFja1xyXG5cdC8vIChyZXR1cm5pbmcgdGhlIG5ldyBtYXRjaGVkIGVsZW1lbnQgc2V0KVxyXG5cdHB1c2hTdGFjazogZnVuY3Rpb24oIGVsZW1zICkge1xyXG5cclxuXHRcdC8vIEJ1aWxkIGEgbmV3IGpRdWVyeSBtYXRjaGVkIGVsZW1lbnQgc2V0XHJcblx0XHR2YXIgcmV0ID0galF1ZXJ5Lm1lcmdlKCB0aGlzLmNvbnN0cnVjdG9yKCksIGVsZW1zICk7XHJcblxyXG5cdFx0Ly8gQWRkIHRoZSBvbGQgb2JqZWN0IG9udG8gdGhlIHN0YWNrIChhcyBhIHJlZmVyZW5jZSlcclxuXHRcdHJldC5wcmV2T2JqZWN0ID0gdGhpcztcclxuXHRcdHJldC5jb250ZXh0ID0gdGhpcy5jb250ZXh0O1xyXG5cclxuXHRcdC8vIFJldHVybiB0aGUgbmV3bHktZm9ybWVkIGVsZW1lbnQgc2V0XHJcblx0XHRyZXR1cm4gcmV0O1xyXG5cdH0sXHJcblxyXG5cdC8vIEV4ZWN1dGUgYSBjYWxsYmFjayBmb3IgZXZlcnkgZWxlbWVudCBpbiB0aGUgbWF0Y2hlZCBzZXQuXHJcblx0ZWFjaDogZnVuY3Rpb24oIGNhbGxiYWNrICkge1xyXG5cdFx0cmV0dXJuIGpRdWVyeS5lYWNoKCB0aGlzLCBjYWxsYmFjayApO1xyXG5cdH0sXHJcblxyXG5cdG1hcDogZnVuY3Rpb24oIGNhbGxiYWNrICkge1xyXG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCBqUXVlcnkubWFwKCB0aGlzLCBmdW5jdGlvbiggZWxlbSwgaSApIHtcclxuXHRcdFx0cmV0dXJuIGNhbGxiYWNrLmNhbGwoIGVsZW0sIGksIGVsZW0gKTtcclxuXHRcdH0gKSApO1xyXG5cdH0sXHJcblxyXG5cdHNsaWNlOiBmdW5jdGlvbigpIHtcclxuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggc2xpY2UuYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApICk7XHJcblx0fSxcclxuXHJcblx0Zmlyc3Q6IGZ1bmN0aW9uKCkge1xyXG5cdFx0cmV0dXJuIHRoaXMuZXEoIDAgKTtcclxuXHR9LFxyXG5cclxuXHRsYXN0OiBmdW5jdGlvbigpIHtcclxuXHRcdHJldHVybiB0aGlzLmVxKCAtMSApO1xyXG5cdH0sXHJcblxyXG5cdGVxOiBmdW5jdGlvbiggaSApIHtcclxuXHRcdHZhciBsZW4gPSB0aGlzLmxlbmd0aCxcclxuXHRcdFx0aiA9ICtpICsgKCBpIDwgMCA/IGxlbiA6IDAgKTtcclxuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggaiA+PSAwICYmIGogPCBsZW4gPyBbIHRoaXNbIGogXSBdIDogW10gKTtcclxuXHR9LFxyXG5cclxuXHRlbmQ6IGZ1bmN0aW9uKCkge1xyXG5cdFx0cmV0dXJuIHRoaXMucHJldk9iamVjdCB8fCB0aGlzLmNvbnN0cnVjdG9yKCk7XHJcblx0fSxcclxuXHJcblx0Ly8gRm9yIGludGVybmFsIHVzZSBvbmx5LlxyXG5cdC8vIEJlaGF2ZXMgbGlrZSBhbiBBcnJheSdzIG1ldGhvZCwgbm90IGxpa2UgYSBqUXVlcnkgbWV0aG9kLlxyXG5cdHB1c2g6IHB1c2gsXHJcblx0c29ydDogYXJyLnNvcnQsXHJcblx0c3BsaWNlOiBhcnIuc3BsaWNlXHJcbn07XHJcblxyXG5qUXVlcnkuZXh0ZW5kID0galF1ZXJ5LmZuLmV4dGVuZCA9IGZ1bmN0aW9uKCkge1xyXG5cdHZhciBvcHRpb25zLCBuYW1lLCBzcmMsIGNvcHksIGNvcHlJc0FycmF5LCBjbG9uZSxcclxuXHRcdHRhcmdldCA9IGFyZ3VtZW50c1sgMCBdIHx8IHt9LFxyXG5cdFx0aSA9IDEsXHJcblx0XHRsZW5ndGggPSBhcmd1bWVudHMubGVuZ3RoLFxyXG5cdFx0ZGVlcCA9IGZhbHNlO1xyXG5cclxuXHQvLyBIYW5kbGUgYSBkZWVwIGNvcHkgc2l0dWF0aW9uXHJcblx0aWYgKCB0eXBlb2YgdGFyZ2V0ID09PSBcImJvb2xlYW5cIiApIHtcclxuXHRcdGRlZXAgPSB0YXJnZXQ7XHJcblxyXG5cdFx0Ly8gU2tpcCB0aGUgYm9vbGVhbiBhbmQgdGhlIHRhcmdldFxyXG5cdFx0dGFyZ2V0ID0gYXJndW1lbnRzWyBpIF0gfHwge307XHJcblx0XHRpKys7XHJcblx0fVxyXG5cclxuXHQvLyBIYW5kbGUgY2FzZSB3aGVuIHRhcmdldCBpcyBhIHN0cmluZyBvciBzb21ldGhpbmcgKHBvc3NpYmxlIGluIGRlZXAgY29weSlcclxuXHRpZiAoIHR5cGVvZiB0YXJnZXQgIT09IFwib2JqZWN0XCIgJiYgIWpRdWVyeS5pc0Z1bmN0aW9uKCB0YXJnZXQgKSApIHtcclxuXHRcdHRhcmdldCA9IHt9O1xyXG5cdH1cclxuXHJcblx0Ly8gRXh0ZW5kIGpRdWVyeSBpdHNlbGYgaWYgb25seSBvbmUgYXJndW1lbnQgaXMgcGFzc2VkXHJcblx0aWYgKCBpID09PSBsZW5ndGggKSB7XHJcblx0XHR0YXJnZXQgPSB0aGlzO1xyXG5cdFx0aS0tO1xyXG5cdH1cclxuXHJcblx0Zm9yICggOyBpIDwgbGVuZ3RoOyBpKysgKSB7XHJcblxyXG5cdFx0Ly8gT25seSBkZWFsIHdpdGggbm9uLW51bGwvdW5kZWZpbmVkIHZhbHVlc1xyXG5cdFx0aWYgKCAoIG9wdGlvbnMgPSBhcmd1bWVudHNbIGkgXSApICE9IG51bGwgKSB7XHJcblxyXG5cdFx0XHQvLyBFeHRlbmQgdGhlIGJhc2Ugb2JqZWN0XHJcblx0XHRcdGZvciAoIG5hbWUgaW4gb3B0aW9ucyApIHtcclxuXHRcdFx0XHRzcmMgPSB0YXJnZXRbIG5hbWUgXTtcclxuXHRcdFx0XHRjb3B5ID0gb3B0aW9uc1sgbmFtZSBdO1xyXG5cclxuXHRcdFx0XHQvLyBQcmV2ZW50IG5ldmVyLWVuZGluZyBsb29wXHJcblx0XHRcdFx0aWYgKCB0YXJnZXQgPT09IGNvcHkgKSB7XHJcblx0XHRcdFx0XHRjb250aW51ZTtcclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdC8vIFJlY3Vyc2UgaWYgd2UncmUgbWVyZ2luZyBwbGFpbiBvYmplY3RzIG9yIGFycmF5c1xyXG5cdFx0XHRcdGlmICggZGVlcCAmJiBjb3B5ICYmICggalF1ZXJ5LmlzUGxhaW5PYmplY3QoIGNvcHkgKSB8fFxyXG5cdFx0XHRcdFx0KCBjb3B5SXNBcnJheSA9IGpRdWVyeS5pc0FycmF5KCBjb3B5ICkgKSApICkge1xyXG5cclxuXHRcdFx0XHRcdGlmICggY29weUlzQXJyYXkgKSB7XHJcblx0XHRcdFx0XHRcdGNvcHlJc0FycmF5ID0gZmFsc2U7XHJcblx0XHRcdFx0XHRcdGNsb25lID0gc3JjICYmIGpRdWVyeS5pc0FycmF5KCBzcmMgKSA/IHNyYyA6IFtdO1xyXG5cclxuXHRcdFx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0XHRcdGNsb25lID0gc3JjICYmIGpRdWVyeS5pc1BsYWluT2JqZWN0KCBzcmMgKSA/IHNyYyA6IHt9O1xyXG5cdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRcdC8vIE5ldmVyIG1vdmUgb3JpZ2luYWwgb2JqZWN0cywgY2xvbmUgdGhlbVxyXG5cdFx0XHRcdFx0dGFyZ2V0WyBuYW1lIF0gPSBqUXVlcnkuZXh0ZW5kKCBkZWVwLCBjbG9uZSwgY29weSApO1xyXG5cclxuXHRcdFx0XHQvLyBEb24ndCBicmluZyBpbiB1bmRlZmluZWQgdmFsdWVzXHJcblx0XHRcdFx0fSBlbHNlIGlmICggY29weSAhPT0gdW5kZWZpbmVkICkge1xyXG5cdFx0XHRcdFx0dGFyZ2V0WyBuYW1lIF0gPSBjb3B5O1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdH1cclxuXHJcblx0Ly8gUmV0dXJuIHRoZSBtb2RpZmllZCBvYmplY3RcclxuXHRyZXR1cm4gdGFyZ2V0O1xyXG59O1xyXG5cclxualF1ZXJ5LmV4dGVuZCgge1xyXG5cclxuXHQvLyBVbmlxdWUgZm9yIGVhY2ggY29weSBvZiBqUXVlcnkgb24gdGhlIHBhZ2VcclxuXHRleHBhbmRvOiBcImpRdWVyeVwiICsgKCB2ZXJzaW9uICsgTWF0aC5yYW5kb20oKSApLnJlcGxhY2UoIC9cXEQvZywgXCJcIiApLFxyXG5cclxuXHQvLyBBc3N1bWUgalF1ZXJ5IGlzIHJlYWR5IHdpdGhvdXQgdGhlIHJlYWR5IG1vZHVsZVxyXG5cdGlzUmVhZHk6IHRydWUsXHJcblxyXG5cdGVycm9yOiBmdW5jdGlvbiggbXNnICkge1xyXG5cdFx0dGhyb3cgbmV3IEVycm9yKCBtc2cgKTtcclxuXHR9LFxyXG5cclxuXHRub29wOiBmdW5jdGlvbigpIHt9LFxyXG5cclxuXHRpc0Z1bmN0aW9uOiBmdW5jdGlvbiggb2JqICkge1xyXG5cdFx0cmV0dXJuIGpRdWVyeS50eXBlKCBvYmogKSA9PT0gXCJmdW5jdGlvblwiO1xyXG5cdH0sXHJcblxyXG5cdGlzQXJyYXk6IEFycmF5LmlzQXJyYXksXHJcblxyXG5cdGlzV2luZG93OiBmdW5jdGlvbiggb2JqICkge1xyXG5cdFx0cmV0dXJuIG9iaiAhPSBudWxsICYmIG9iaiA9PT0gb2JqLndpbmRvdztcclxuXHR9LFxyXG5cclxuXHRpc051bWVyaWM6IGZ1bmN0aW9uKCBvYmogKSB7XHJcblxyXG5cdFx0Ly8gcGFyc2VGbG9hdCBOYU5zIG51bWVyaWMtY2FzdCBmYWxzZSBwb3NpdGl2ZXMgKG51bGx8dHJ1ZXxmYWxzZXxcIlwiKVxyXG5cdFx0Ly8gLi4uYnV0IG1pc2ludGVycHJldHMgbGVhZGluZy1udW1iZXIgc3RyaW5ncywgcGFydGljdWxhcmx5IGhleCBsaXRlcmFscyAoXCIweC4uLlwiKVxyXG5cdFx0Ly8gc3VidHJhY3Rpb24gZm9yY2VzIGluZmluaXRpZXMgdG8gTmFOXHJcblx0XHQvLyBhZGRpbmcgMSBjb3JyZWN0cyBsb3NzIG9mIHByZWNpc2lvbiBmcm9tIHBhcnNlRmxvYXQgKCMxNTEwMClcclxuXHRcdHZhciByZWFsU3RyaW5nT2JqID0gb2JqICYmIG9iai50b1N0cmluZygpO1xyXG5cdFx0cmV0dXJuICFqUXVlcnkuaXNBcnJheSggb2JqICkgJiYgKCByZWFsU3RyaW5nT2JqIC0gcGFyc2VGbG9hdCggcmVhbFN0cmluZ09iaiApICsgMSApID49IDA7XHJcblx0fSxcclxuXHJcblx0aXNQbGFpbk9iamVjdDogZnVuY3Rpb24oIG9iaiApIHtcclxuXHJcblx0XHQvLyBOb3QgcGxhaW4gb2JqZWN0czpcclxuXHRcdC8vIC0gQW55IG9iamVjdCBvciB2YWx1ZSB3aG9zZSBpbnRlcm5hbCBbW0NsYXNzXV0gcHJvcGVydHkgaXMgbm90IFwiW29iamVjdCBPYmplY3RdXCJcclxuXHRcdC8vIC0gRE9NIG5vZGVzXHJcblx0XHQvLyAtIHdpbmRvd1xyXG5cdFx0aWYgKCBqUXVlcnkudHlwZSggb2JqICkgIT09IFwib2JqZWN0XCIgfHwgb2JqLm5vZGVUeXBlIHx8IGpRdWVyeS5pc1dpbmRvdyggb2JqICkgKSB7XHJcblx0XHRcdHJldHVybiBmYWxzZTtcclxuXHRcdH1cclxuXHJcblx0XHRpZiAoIG9iai5jb25zdHJ1Y3RvciAmJlxyXG5cdFx0XHRcdCFoYXNPd24uY2FsbCggb2JqLmNvbnN0cnVjdG9yLnByb3RvdHlwZSwgXCJpc1Byb3RvdHlwZU9mXCIgKSApIHtcclxuXHRcdFx0cmV0dXJuIGZhbHNlO1xyXG5cdFx0fVxyXG5cclxuXHRcdC8vIElmIHRoZSBmdW5jdGlvbiBoYXNuJ3QgcmV0dXJuZWQgYWxyZWFkeSwgd2UncmUgY29uZmlkZW50IHRoYXRcclxuXHRcdC8vIHxvYmp8IGlzIGEgcGxhaW4gb2JqZWN0LCBjcmVhdGVkIGJ5IHt9IG9yIGNvbnN0cnVjdGVkIHdpdGggbmV3IE9iamVjdFxyXG5cdFx0cmV0dXJuIHRydWU7XHJcblx0fSxcclxuXHJcblx0aXNFbXB0eU9iamVjdDogZnVuY3Rpb24oIG9iaiApIHtcclxuXHRcdHZhciBuYW1lO1xyXG5cdFx0Zm9yICggbmFtZSBpbiBvYmogKSB7XHJcblx0XHRcdHJldHVybiBmYWxzZTtcclxuXHRcdH1cclxuXHRcdHJldHVybiB0cnVlO1xyXG5cdH0sXHJcblxyXG5cdHR5cGU6IGZ1bmN0aW9uKCBvYmogKSB7XHJcblx0XHRpZiAoIG9iaiA9PSBudWxsICkge1xyXG5cdFx0XHRyZXR1cm4gb2JqICsgXCJcIjtcclxuXHRcdH1cclxuXHJcblx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkPDQuMCwgaU9TPDYgKGZ1bmN0aW9uaXNoIFJlZ0V4cClcclxuXHRcdHJldHVybiB0eXBlb2Ygb2JqID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBvYmogPT09IFwiZnVuY3Rpb25cIiA/XHJcblx0XHRcdGNsYXNzMnR5cGVbIHRvU3RyaW5nLmNhbGwoIG9iaiApIF0gfHwgXCJvYmplY3RcIiA6XHJcblx0XHRcdHR5cGVvZiBvYmo7XHJcblx0fSxcclxuXHJcblx0Ly8gRXZhbHVhdGVzIGEgc2NyaXB0IGluIGEgZ2xvYmFsIGNvbnRleHRcclxuXHRnbG9iYWxFdmFsOiBmdW5jdGlvbiggY29kZSApIHtcclxuXHRcdHZhciBzY3JpcHQsXHJcblx0XHRcdGluZGlyZWN0ID0gZXZhbDtcclxuXHJcblx0XHRjb2RlID0galF1ZXJ5LnRyaW0oIGNvZGUgKTtcclxuXHJcblx0XHRpZiAoIGNvZGUgKSB7XHJcblxyXG5cdFx0XHQvLyBJZiB0aGUgY29kZSBpbmNsdWRlcyBhIHZhbGlkLCBwcm9sb2d1ZSBwb3NpdGlvblxyXG5cdFx0XHQvLyBzdHJpY3QgbW9kZSBwcmFnbWEsIGV4ZWN1dGUgY29kZSBieSBpbmplY3RpbmcgYVxyXG5cdFx0XHQvLyBzY3JpcHQgdGFnIGludG8gdGhlIGRvY3VtZW50LlxyXG5cdFx0XHRpZiAoIGNvZGUuaW5kZXhPZiggXCJ1c2Ugc3RyaWN0XCIgKSA9PT0gMSApIHtcclxuXHRcdFx0XHRzY3JpcHQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcInNjcmlwdFwiICk7XHJcblx0XHRcdFx0c2NyaXB0LnRleHQgPSBjb2RlO1xyXG5cdFx0XHRcdGRvY3VtZW50LmhlYWQuYXBwZW5kQ2hpbGQoIHNjcmlwdCApLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoIHNjcmlwdCApO1xyXG5cdFx0XHR9IGVsc2Uge1xyXG5cclxuXHRcdFx0XHQvLyBPdGhlcndpc2UsIGF2b2lkIHRoZSBET00gbm9kZSBjcmVhdGlvbiwgaW5zZXJ0aW9uXHJcblx0XHRcdFx0Ly8gYW5kIHJlbW92YWwgYnkgdXNpbmcgYW4gaW5kaXJlY3QgZ2xvYmFsIGV2YWxcclxuXHJcblx0XHRcdFx0aW5kaXJlY3QoIGNvZGUgKTtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdH0sXHJcblxyXG5cdC8vIENvbnZlcnQgZGFzaGVkIHRvIGNhbWVsQ2FzZTsgdXNlZCBieSB0aGUgY3NzIGFuZCBkYXRhIG1vZHVsZXNcclxuXHQvLyBTdXBwb3J0OiBJRTktMTErXHJcblx0Ly8gTWljcm9zb2Z0IGZvcmdvdCB0byBodW1wIHRoZWlyIHZlbmRvciBwcmVmaXggKCM5NTcyKVxyXG5cdGNhbWVsQ2FzZTogZnVuY3Rpb24oIHN0cmluZyApIHtcclxuXHRcdHJldHVybiBzdHJpbmcucmVwbGFjZSggcm1zUHJlZml4LCBcIm1zLVwiICkucmVwbGFjZSggcmRhc2hBbHBoYSwgZmNhbWVsQ2FzZSApO1xyXG5cdH0sXHJcblxyXG5cdG5vZGVOYW1lOiBmdW5jdGlvbiggZWxlbSwgbmFtZSApIHtcclxuXHRcdHJldHVybiBlbGVtLm5vZGVOYW1lICYmIGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gbmFtZS50b0xvd2VyQ2FzZSgpO1xyXG5cdH0sXHJcblxyXG5cdGVhY2g6IGZ1bmN0aW9uKCBvYmosIGNhbGxiYWNrICkge1xyXG5cdFx0dmFyIGxlbmd0aCwgaSA9IDA7XHJcblxyXG5cdFx0aWYgKCBpc0FycmF5TGlrZSggb2JqICkgKSB7XHJcblx0XHRcdGxlbmd0aCA9IG9iai5sZW5ndGg7XHJcblx0XHRcdGZvciAoIDsgaSA8IGxlbmd0aDsgaSsrICkge1xyXG5cdFx0XHRcdGlmICggY2FsbGJhY2suY2FsbCggb2JqWyBpIF0sIGksIG9ialsgaSBdICkgPT09IGZhbHNlICkge1xyXG5cdFx0XHRcdFx0YnJlYWs7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHR9IGVsc2Uge1xyXG5cdFx0XHRmb3IgKCBpIGluIG9iaiApIHtcclxuXHRcdFx0XHRpZiAoIGNhbGxiYWNrLmNhbGwoIG9ialsgaSBdLCBpLCBvYmpbIGkgXSApID09PSBmYWxzZSApIHtcclxuXHRcdFx0XHRcdGJyZWFrO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiBvYmo7XHJcblx0fSxcclxuXHJcblx0Ly8gU3VwcG9ydDogQW5kcm9pZDw0LjFcclxuXHR0cmltOiBmdW5jdGlvbiggdGV4dCApIHtcclxuXHRcdHJldHVybiB0ZXh0ID09IG51bGwgP1xyXG5cdFx0XHRcIlwiIDpcclxuXHRcdFx0KCB0ZXh0ICsgXCJcIiApLnJlcGxhY2UoIHJ0cmltLCBcIlwiICk7XHJcblx0fSxcclxuXHJcblx0Ly8gcmVzdWx0cyBpcyBmb3IgaW50ZXJuYWwgdXNhZ2Ugb25seVxyXG5cdG1ha2VBcnJheTogZnVuY3Rpb24oIGFyciwgcmVzdWx0cyApIHtcclxuXHRcdHZhciByZXQgPSByZXN1bHRzIHx8IFtdO1xyXG5cclxuXHRcdGlmICggYXJyICE9IG51bGwgKSB7XHJcblx0XHRcdGlmICggaXNBcnJheUxpa2UoIE9iamVjdCggYXJyICkgKSApIHtcclxuXHRcdFx0XHRqUXVlcnkubWVyZ2UoIHJldCxcclxuXHRcdFx0XHRcdHR5cGVvZiBhcnIgPT09IFwic3RyaW5nXCIgP1xyXG5cdFx0XHRcdFx0WyBhcnIgXSA6IGFyclxyXG5cdFx0XHRcdCk7XHJcblx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0cHVzaC5jYWxsKCByZXQsIGFyciApO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblxyXG5cdFx0cmV0dXJuIHJldDtcclxuXHR9LFxyXG5cclxuXHRpbkFycmF5OiBmdW5jdGlvbiggZWxlbSwgYXJyLCBpICkge1xyXG5cdFx0cmV0dXJuIGFyciA9PSBudWxsID8gLTEgOiBpbmRleE9mLmNhbGwoIGFyciwgZWxlbSwgaSApO1xyXG5cdH0sXHJcblxyXG5cdG1lcmdlOiBmdW5jdGlvbiggZmlyc3QsIHNlY29uZCApIHtcclxuXHRcdHZhciBsZW4gPSArc2Vjb25kLmxlbmd0aCxcclxuXHRcdFx0aiA9IDAsXHJcblx0XHRcdGkgPSBmaXJzdC5sZW5ndGg7XHJcblxyXG5cdFx0Zm9yICggOyBqIDwgbGVuOyBqKysgKSB7XHJcblx0XHRcdGZpcnN0WyBpKysgXSA9IHNlY29uZFsgaiBdO1xyXG5cdFx0fVxyXG5cclxuXHRcdGZpcnN0Lmxlbmd0aCA9IGk7XHJcblxyXG5cdFx0cmV0dXJuIGZpcnN0O1xyXG5cdH0sXHJcblxyXG5cdGdyZXA6IGZ1bmN0aW9uKCBlbGVtcywgY2FsbGJhY2ssIGludmVydCApIHtcclxuXHRcdHZhciBjYWxsYmFja0ludmVyc2UsXHJcblx0XHRcdG1hdGNoZXMgPSBbXSxcclxuXHRcdFx0aSA9IDAsXHJcblx0XHRcdGxlbmd0aCA9IGVsZW1zLmxlbmd0aCxcclxuXHRcdFx0Y2FsbGJhY2tFeHBlY3QgPSAhaW52ZXJ0O1xyXG5cclxuXHRcdC8vIEdvIHRocm91Z2ggdGhlIGFycmF5LCBvbmx5IHNhdmluZyB0aGUgaXRlbXNcclxuXHRcdC8vIHRoYXQgcGFzcyB0aGUgdmFsaWRhdG9yIGZ1bmN0aW9uXHJcblx0XHRmb3IgKCA7IGkgPCBsZW5ndGg7IGkrKyApIHtcclxuXHRcdFx0Y2FsbGJhY2tJbnZlcnNlID0gIWNhbGxiYWNrKCBlbGVtc1sgaSBdLCBpICk7XHJcblx0XHRcdGlmICggY2FsbGJhY2tJbnZlcnNlICE9PSBjYWxsYmFja0V4cGVjdCApIHtcclxuXHRcdFx0XHRtYXRjaGVzLnB1c2goIGVsZW1zWyBpIF0gKTtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiBtYXRjaGVzO1xyXG5cdH0sXHJcblxyXG5cdC8vIGFyZyBpcyBmb3IgaW50ZXJuYWwgdXNhZ2Ugb25seVxyXG5cdG1hcDogZnVuY3Rpb24oIGVsZW1zLCBjYWxsYmFjaywgYXJnICkge1xyXG5cdFx0dmFyIGxlbmd0aCwgdmFsdWUsXHJcblx0XHRcdGkgPSAwLFxyXG5cdFx0XHRyZXQgPSBbXTtcclxuXHJcblx0XHQvLyBHbyB0aHJvdWdoIHRoZSBhcnJheSwgdHJhbnNsYXRpbmcgZWFjaCBvZiB0aGUgaXRlbXMgdG8gdGhlaXIgbmV3IHZhbHVlc1xyXG5cdFx0aWYgKCBpc0FycmF5TGlrZSggZWxlbXMgKSApIHtcclxuXHRcdFx0bGVuZ3RoID0gZWxlbXMubGVuZ3RoO1xyXG5cdFx0XHRmb3IgKCA7IGkgPCBsZW5ndGg7IGkrKyApIHtcclxuXHRcdFx0XHR2YWx1ZSA9IGNhbGxiYWNrKCBlbGVtc1sgaSBdLCBpLCBhcmcgKTtcclxuXHJcblx0XHRcdFx0aWYgKCB2YWx1ZSAhPSBudWxsICkge1xyXG5cdFx0XHRcdFx0cmV0LnB1c2goIHZhbHVlICk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblxyXG5cdFx0Ly8gR28gdGhyb3VnaCBldmVyeSBrZXkgb24gdGhlIG9iamVjdCxcclxuXHRcdH0gZWxzZSB7XHJcblx0XHRcdGZvciAoIGkgaW4gZWxlbXMgKSB7XHJcblx0XHRcdFx0dmFsdWUgPSBjYWxsYmFjayggZWxlbXNbIGkgXSwgaSwgYXJnICk7XHJcblxyXG5cdFx0XHRcdGlmICggdmFsdWUgIT0gbnVsbCApIHtcclxuXHRcdFx0XHRcdHJldC5wdXNoKCB2YWx1ZSApO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cclxuXHRcdC8vIEZsYXR0ZW4gYW55IG5lc3RlZCBhcnJheXNcclxuXHRcdHJldHVybiBjb25jYXQuYXBwbHkoIFtdLCByZXQgKTtcclxuXHR9LFxyXG5cclxuXHQvLyBBIGdsb2JhbCBHVUlEIGNvdW50ZXIgZm9yIG9iamVjdHNcclxuXHRndWlkOiAxLFxyXG5cclxuXHQvLyBCaW5kIGEgZnVuY3Rpb24gdG8gYSBjb250ZXh0LCBvcHRpb25hbGx5IHBhcnRpYWxseSBhcHBseWluZyBhbnlcclxuXHQvLyBhcmd1bWVudHMuXHJcblx0cHJveHk6IGZ1bmN0aW9uKCBmbiwgY29udGV4dCApIHtcclxuXHRcdHZhciB0bXAsIGFyZ3MsIHByb3h5O1xyXG5cclxuXHRcdGlmICggdHlwZW9mIGNvbnRleHQgPT09IFwic3RyaW5nXCIgKSB7XHJcblx0XHRcdHRtcCA9IGZuWyBjb250ZXh0IF07XHJcblx0XHRcdGNvbnRleHQgPSBmbjtcclxuXHRcdFx0Zm4gPSB0bXA7XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gUXVpY2sgY2hlY2sgdG8gZGV0ZXJtaW5lIGlmIHRhcmdldCBpcyBjYWxsYWJsZSwgaW4gdGhlIHNwZWNcclxuXHRcdC8vIHRoaXMgdGhyb3dzIGEgVHlwZUVycm9yLCBidXQgd2Ugd2lsbCBqdXN0IHJldHVybiB1bmRlZmluZWQuXHJcblx0XHRpZiAoICFqUXVlcnkuaXNGdW5jdGlvbiggZm4gKSApIHtcclxuXHRcdFx0cmV0dXJuIHVuZGVmaW5lZDtcclxuXHRcdH1cclxuXHJcblx0XHQvLyBTaW11bGF0ZWQgYmluZFxyXG5cdFx0YXJncyA9IHNsaWNlLmNhbGwoIGFyZ3VtZW50cywgMiApO1xyXG5cdFx0cHJveHkgPSBmdW5jdGlvbigpIHtcclxuXHRcdFx0cmV0dXJuIGZuLmFwcGx5KCBjb250ZXh0IHx8IHRoaXMsIGFyZ3MuY29uY2F0KCBzbGljZS5jYWxsKCBhcmd1bWVudHMgKSApICk7XHJcblx0XHR9O1xyXG5cclxuXHRcdC8vIFNldCB0aGUgZ3VpZCBvZiB1bmlxdWUgaGFuZGxlciB0byB0aGUgc2FtZSBvZiBvcmlnaW5hbCBoYW5kbGVyLCBzbyBpdCBjYW4gYmUgcmVtb3ZlZFxyXG5cdFx0cHJveHkuZ3VpZCA9IGZuLmd1aWQgPSBmbi5ndWlkIHx8IGpRdWVyeS5ndWlkKys7XHJcblxyXG5cdFx0cmV0dXJuIHByb3h5O1xyXG5cdH0sXHJcblxyXG5cdG5vdzogRGF0ZS5ub3csXHJcblxyXG5cdC8vIGpRdWVyeS5zdXBwb3J0IGlzIG5vdCB1c2VkIGluIENvcmUgYnV0IG90aGVyIHByb2plY3RzIGF0dGFjaCB0aGVpclxyXG5cdC8vIHByb3BlcnRpZXMgdG8gaXQgc28gaXQgbmVlZHMgdG8gZXhpc3QuXHJcblx0c3VwcG9ydDogc3VwcG9ydFxyXG59ICk7XHJcblxyXG4vLyBKU0hpbnQgd291bGQgZXJyb3Igb24gdGhpcyBjb2RlIGR1ZSB0byB0aGUgU3ltYm9sIG5vdCBiZWluZyBkZWZpbmVkIGluIEVTNS5cclxuLy8gRGVmaW5pbmcgdGhpcyBnbG9iYWwgaW4gLmpzaGludHJjIHdvdWxkIGNyZWF0ZSBhIGRhbmdlciBvZiB1c2luZyB0aGUgZ2xvYmFsXHJcbi8vIHVuZ3VhcmRlZCBpbiBhbm90aGVyIHBsYWNlLCBpdCBzZWVtcyBzYWZlciB0byBqdXN0IGRpc2FibGUgSlNIaW50IGZvciB0aGVzZVxyXG4vLyB0aHJlZSBsaW5lcy5cclxuLyoganNoaW50IGlnbm9yZTogc3RhcnQgKi9cclxuaWYgKCB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgKSB7XHJcblx0alF1ZXJ5LmZuWyBTeW1ib2wuaXRlcmF0b3IgXSA9IGFyclsgU3ltYm9sLml0ZXJhdG9yIF07XHJcbn1cclxuLyoganNoaW50IGlnbm9yZTogZW5kICovXHJcblxyXG4vLyBQb3B1bGF0ZSB0aGUgY2xhc3MydHlwZSBtYXBcclxualF1ZXJ5LmVhY2goIFwiQm9vbGVhbiBOdW1iZXIgU3RyaW5nIEZ1bmN0aW9uIEFycmF5IERhdGUgUmVnRXhwIE9iamVjdCBFcnJvciBTeW1ib2xcIi5zcGxpdCggXCIgXCIgKSxcclxuZnVuY3Rpb24oIGksIG5hbWUgKSB7XHJcblx0Y2xhc3MydHlwZVsgXCJbb2JqZWN0IFwiICsgbmFtZSArIFwiXVwiIF0gPSBuYW1lLnRvTG93ZXJDYXNlKCk7XHJcbn0gKTtcclxuXHJcbmZ1bmN0aW9uIGlzQXJyYXlMaWtlKCBvYmogKSB7XHJcblxyXG5cdC8vIFN1cHBvcnQ6IGlPUyA4LjIgKG5vdCByZXByb2R1Y2libGUgaW4gc2ltdWxhdG9yKVxyXG5cdC8vIGBpbmAgY2hlY2sgdXNlZCB0byBwcmV2ZW50IEpJVCBlcnJvciAoZ2gtMjE0NSlcclxuXHQvLyBoYXNPd24gaXNuJ3QgdXNlZCBoZXJlIGR1ZSB0byBmYWxzZSBuZWdhdGl2ZXNcclxuXHQvLyByZWdhcmRpbmcgTm9kZWxpc3QgbGVuZ3RoIGluIElFXHJcblx0dmFyIGxlbmd0aCA9ICEhb2JqICYmIFwibGVuZ3RoXCIgaW4gb2JqICYmIG9iai5sZW5ndGgsXHJcblx0XHR0eXBlID0galF1ZXJ5LnR5cGUoIG9iaiApO1xyXG5cclxuXHRpZiAoIHR5cGUgPT09IFwiZnVuY3Rpb25cIiB8fCBqUXVlcnkuaXNXaW5kb3coIG9iaiApICkge1xyXG5cdFx0cmV0dXJuIGZhbHNlO1xyXG5cdH1cclxuXHJcblx0cmV0dXJuIHR5cGUgPT09IFwiYXJyYXlcIiB8fCBsZW5ndGggPT09IDAgfHxcclxuXHRcdHR5cGVvZiBsZW5ndGggPT09IFwibnVtYmVyXCIgJiYgbGVuZ3RoID4gMCAmJiAoIGxlbmd0aCAtIDEgKSBpbiBvYmo7XHJcbn1cclxudmFyIFNpenpsZSA9XHJcbi8qIVxyXG4gKiBTaXp6bGUgQ1NTIFNlbGVjdG9yIEVuZ2luZSB2Mi4yLjFcclxuICogaHR0cDovL3NpenpsZWpzLmNvbS9cclxuICpcclxuICogQ29weXJpZ2h0IGpRdWVyeSBGb3VuZGF0aW9uIGFuZCBvdGhlciBjb250cmlidXRvcnNcclxuICogUmVsZWFzZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlXHJcbiAqIGh0dHA6Ly9qcXVlcnkub3JnL2xpY2Vuc2VcclxuICpcclxuICogRGF0ZTogMjAxNS0xMC0xN1xyXG4gKi9cclxuKGZ1bmN0aW9uKCB3aW5kb3cgKSB7XHJcblxyXG52YXIgaSxcclxuXHRzdXBwb3J0LFxyXG5cdEV4cHIsXHJcblx0Z2V0VGV4dCxcclxuXHRpc1hNTCxcclxuXHR0b2tlbml6ZSxcclxuXHRjb21waWxlLFxyXG5cdHNlbGVjdCxcclxuXHRvdXRlcm1vc3RDb250ZXh0LFxyXG5cdHNvcnRJbnB1dCxcclxuXHRoYXNEdXBsaWNhdGUsXHJcblxyXG5cdC8vIExvY2FsIGRvY3VtZW50IHZhcnNcclxuXHRzZXREb2N1bWVudCxcclxuXHRkb2N1bWVudCxcclxuXHRkb2NFbGVtLFxyXG5cdGRvY3VtZW50SXNIVE1MLFxyXG5cdHJidWdneVFTQSxcclxuXHRyYnVnZ3lNYXRjaGVzLFxyXG5cdG1hdGNoZXMsXHJcblx0Y29udGFpbnMsXHJcblxyXG5cdC8vIEluc3RhbmNlLXNwZWNpZmljIGRhdGFcclxuXHRleHBhbmRvID0gXCJzaXp6bGVcIiArIDEgKiBuZXcgRGF0ZSgpLFxyXG5cdHByZWZlcnJlZERvYyA9IHdpbmRvdy5kb2N1bWVudCxcclxuXHRkaXJydW5zID0gMCxcclxuXHRkb25lID0gMCxcclxuXHRjbGFzc0NhY2hlID0gY3JlYXRlQ2FjaGUoKSxcclxuXHR0b2tlbkNhY2hlID0gY3JlYXRlQ2FjaGUoKSxcclxuXHRjb21waWxlckNhY2hlID0gY3JlYXRlQ2FjaGUoKSxcclxuXHRzb3J0T3JkZXIgPSBmdW5jdGlvbiggYSwgYiApIHtcclxuXHRcdGlmICggYSA9PT0gYiApIHtcclxuXHRcdFx0aGFzRHVwbGljYXRlID0gdHJ1ZTtcclxuXHRcdH1cclxuXHRcdHJldHVybiAwO1xyXG5cdH0sXHJcblxyXG5cdC8vIEdlbmVyYWwtcHVycG9zZSBjb25zdGFudHNcclxuXHRNQVhfTkVHQVRJVkUgPSAxIDw8IDMxLFxyXG5cclxuXHQvLyBJbnN0YW5jZSBtZXRob2RzXHJcblx0aGFzT3duID0gKHt9KS5oYXNPd25Qcm9wZXJ0eSxcclxuXHRhcnIgPSBbXSxcclxuXHRwb3AgPSBhcnIucG9wLFxyXG5cdHB1c2hfbmF0aXZlID0gYXJyLnB1c2gsXHJcblx0cHVzaCA9IGFyci5wdXNoLFxyXG5cdHNsaWNlID0gYXJyLnNsaWNlLFxyXG5cdC8vIFVzZSBhIHN0cmlwcGVkLWRvd24gaW5kZXhPZiBhcyBpdCdzIGZhc3RlciB0aGFuIG5hdGl2ZVxyXG5cdC8vIGh0dHA6Ly9qc3BlcmYuY29tL3Rob3ItaW5kZXhvZi12cy1mb3IvNVxyXG5cdGluZGV4T2YgPSBmdW5jdGlvbiggbGlzdCwgZWxlbSApIHtcclxuXHRcdHZhciBpID0gMCxcclxuXHRcdFx0bGVuID0gbGlzdC5sZW5ndGg7XHJcblx0XHRmb3IgKCA7IGkgPCBsZW47IGkrKyApIHtcclxuXHRcdFx0aWYgKCBsaXN0W2ldID09PSBlbGVtICkge1xyXG5cdFx0XHRcdHJldHVybiBpO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0XHRyZXR1cm4gLTE7XHJcblx0fSxcclxuXHJcblx0Ym9vbGVhbnMgPSBcImNoZWNrZWR8c2VsZWN0ZWR8YXN5bmN8YXV0b2ZvY3VzfGF1dG9wbGF5fGNvbnRyb2xzfGRlZmVyfGRpc2FibGVkfGhpZGRlbnxpc21hcHxsb29wfG11bHRpcGxlfG9wZW58cmVhZG9ubHl8cmVxdWlyZWR8c2NvcGVkXCIsXHJcblxyXG5cdC8vIFJlZ3VsYXIgZXhwcmVzc2lvbnNcclxuXHJcblx0Ly8gaHR0cDovL3d3dy53My5vcmcvVFIvY3NzMy1zZWxlY3RvcnMvI3doaXRlc3BhY2VcclxuXHR3aGl0ZXNwYWNlID0gXCJbXFxcXHgyMFxcXFx0XFxcXHJcXFxcblxcXFxmXVwiLFxyXG5cclxuXHQvLyBodHRwOi8vd3d3LnczLm9yZy9UUi9DU1MyMS9zeW5kYXRhLmh0bWwjdmFsdWUtZGVmLWlkZW50aWZpZXJcclxuXHRpZGVudGlmaWVyID0gXCIoPzpcXFxcXFxcXC58W1xcXFx3LV18W15cXFxceDAwLVxcXFx4YTBdKStcIixcclxuXHJcblx0Ly8gQXR0cmlidXRlIHNlbGVjdG9yczogaHR0cDovL3d3dy53My5vcmcvVFIvc2VsZWN0b3JzLyNhdHRyaWJ1dGUtc2VsZWN0b3JzXHJcblx0YXR0cmlidXRlcyA9IFwiXFxcXFtcIiArIHdoaXRlc3BhY2UgKyBcIiooXCIgKyBpZGVudGlmaWVyICsgXCIpKD86XCIgKyB3aGl0ZXNwYWNlICtcclxuXHRcdC8vIE9wZXJhdG9yIChjYXB0dXJlIDIpXHJcblx0XHRcIiooWypeJHwhfl0/PSlcIiArIHdoaXRlc3BhY2UgK1xyXG5cdFx0Ly8gXCJBdHRyaWJ1dGUgdmFsdWVzIG11c3QgYmUgQ1NTIGlkZW50aWZpZXJzIFtjYXB0dXJlIDVdIG9yIHN0cmluZ3MgW2NhcHR1cmUgMyBvciBjYXB0dXJlIDRdXCJcclxuXHRcdFwiKig/OicoKD86XFxcXFxcXFwufFteXFxcXFxcXFwnXSkqKSd8XFxcIigoPzpcXFxcXFxcXC58W15cXFxcXFxcXFxcXCJdKSopXFxcInwoXCIgKyBpZGVudGlmaWVyICsgXCIpKXwpXCIgKyB3aGl0ZXNwYWNlICtcclxuXHRcdFwiKlxcXFxdXCIsXHJcblxyXG5cdHBzZXVkb3MgPSBcIjooXCIgKyBpZGVudGlmaWVyICsgXCIpKD86XFxcXCgoXCIgK1xyXG5cdFx0Ly8gVG8gcmVkdWNlIHRoZSBudW1iZXIgb2Ygc2VsZWN0b3JzIG5lZWRpbmcgdG9rZW5pemUgaW4gdGhlIHByZUZpbHRlciwgcHJlZmVyIGFyZ3VtZW50czpcclxuXHRcdC8vIDEuIHF1b3RlZCAoY2FwdHVyZSAzOyBjYXB0dXJlIDQgb3IgY2FwdHVyZSA1KVxyXG5cdFx0XCIoJygoPzpcXFxcXFxcXC58W15cXFxcXFxcXCddKSopJ3xcXFwiKCg/OlxcXFxcXFxcLnxbXlxcXFxcXFxcXFxcIl0pKilcXFwiKXxcIiArXHJcblx0XHQvLyAyLiBzaW1wbGUgKGNhcHR1cmUgNilcclxuXHRcdFwiKCg/OlxcXFxcXFxcLnxbXlxcXFxcXFxcKClbXFxcXF1dfFwiICsgYXR0cmlidXRlcyArIFwiKSopfFwiICtcclxuXHRcdC8vIDMuIGFueXRoaW5nIGVsc2UgKGNhcHR1cmUgMilcclxuXHRcdFwiLipcIiArXHJcblx0XHRcIilcXFxcKXwpXCIsXHJcblxyXG5cdC8vIExlYWRpbmcgYW5kIG5vbi1lc2NhcGVkIHRyYWlsaW5nIHdoaXRlc3BhY2UsIGNhcHR1cmluZyBzb21lIG5vbi13aGl0ZXNwYWNlIGNoYXJhY3RlcnMgcHJlY2VkaW5nIHRoZSBsYXR0ZXJcclxuXHRyd2hpdGVzcGFjZSA9IG5ldyBSZWdFeHAoIHdoaXRlc3BhY2UgKyBcIitcIiwgXCJnXCIgKSxcclxuXHRydHJpbSA9IG5ldyBSZWdFeHAoIFwiXlwiICsgd2hpdGVzcGFjZSArIFwiK3woKD86XnxbXlxcXFxcXFxcXSkoPzpcXFxcXFxcXC4pKilcIiArIHdoaXRlc3BhY2UgKyBcIiskXCIsIFwiZ1wiICksXHJcblxyXG5cdHJjb21tYSA9IG5ldyBSZWdFeHAoIFwiXlwiICsgd2hpdGVzcGFjZSArIFwiKixcIiArIHdoaXRlc3BhY2UgKyBcIipcIiApLFxyXG5cdHJjb21iaW5hdG9ycyA9IG5ldyBSZWdFeHAoIFwiXlwiICsgd2hpdGVzcGFjZSArIFwiKihbPit+XXxcIiArIHdoaXRlc3BhY2UgKyBcIilcIiArIHdoaXRlc3BhY2UgKyBcIipcIiApLFxyXG5cclxuXHRyYXR0cmlidXRlUXVvdGVzID0gbmV3IFJlZ0V4cCggXCI9XCIgKyB3aGl0ZXNwYWNlICsgXCIqKFteXFxcXF0nXFxcIl0qPylcIiArIHdoaXRlc3BhY2UgKyBcIipcXFxcXVwiLCBcImdcIiApLFxyXG5cclxuXHRycHNldWRvID0gbmV3IFJlZ0V4cCggcHNldWRvcyApLFxyXG5cdHJpZGVudGlmaWVyID0gbmV3IFJlZ0V4cCggXCJeXCIgKyBpZGVudGlmaWVyICsgXCIkXCIgKSxcclxuXHJcblx0bWF0Y2hFeHByID0ge1xyXG5cdFx0XCJJRFwiOiBuZXcgUmVnRXhwKCBcIl4jKFwiICsgaWRlbnRpZmllciArIFwiKVwiICksXHJcblx0XHRcIkNMQVNTXCI6IG5ldyBSZWdFeHAoIFwiXlxcXFwuKFwiICsgaWRlbnRpZmllciArIFwiKVwiICksXHJcblx0XHRcIlRBR1wiOiBuZXcgUmVnRXhwKCBcIl4oXCIgKyBpZGVudGlmaWVyICsgXCJ8WypdKVwiICksXHJcblx0XHRcIkFUVFJcIjogbmV3IFJlZ0V4cCggXCJeXCIgKyBhdHRyaWJ1dGVzICksXHJcblx0XHRcIlBTRVVET1wiOiBuZXcgUmVnRXhwKCBcIl5cIiArIHBzZXVkb3MgKSxcclxuXHRcdFwiQ0hJTERcIjogbmV3IFJlZ0V4cCggXCJeOihvbmx5fGZpcnN0fGxhc3R8bnRofG50aC1sYXN0KS0oY2hpbGR8b2YtdHlwZSkoPzpcXFxcKFwiICsgd2hpdGVzcGFjZSArXHJcblx0XHRcdFwiKihldmVufG9kZHwoKFsrLV18KShcXFxcZCopbnwpXCIgKyB3aGl0ZXNwYWNlICsgXCIqKD86KFsrLV18KVwiICsgd2hpdGVzcGFjZSArXHJcblx0XHRcdFwiKihcXFxcZCspfCkpXCIgKyB3aGl0ZXNwYWNlICsgXCIqXFxcXCl8KVwiLCBcImlcIiApLFxyXG5cdFx0XCJib29sXCI6IG5ldyBSZWdFeHAoIFwiXig/OlwiICsgYm9vbGVhbnMgKyBcIikkXCIsIFwiaVwiICksXHJcblx0XHQvLyBGb3IgdXNlIGluIGxpYnJhcmllcyBpbXBsZW1lbnRpbmcgLmlzKClcclxuXHRcdC8vIFdlIHVzZSB0aGlzIGZvciBQT1MgbWF0Y2hpbmcgaW4gYHNlbGVjdGBcclxuXHRcdFwibmVlZHNDb250ZXh0XCI6IG5ldyBSZWdFeHAoIFwiXlwiICsgd2hpdGVzcGFjZSArIFwiKls+K35dfDooZXZlbnxvZGR8ZXF8Z3R8bHR8bnRofGZpcnN0fGxhc3QpKD86XFxcXChcIiArXHJcblx0XHRcdHdoaXRlc3BhY2UgKyBcIiooKD86LVxcXFxkKT9cXFxcZCopXCIgKyB3aGl0ZXNwYWNlICsgXCIqXFxcXCl8KSg/PVteLV18JClcIiwgXCJpXCIgKVxyXG5cdH0sXHJcblxyXG5cdHJpbnB1dHMgPSAvXig/OmlucHV0fHNlbGVjdHx0ZXh0YXJlYXxidXR0b24pJC9pLFxyXG5cdHJoZWFkZXIgPSAvXmhcXGQkL2ksXHJcblxyXG5cdHJuYXRpdmUgPSAvXltee10rXFx7XFxzKlxcW25hdGl2ZSBcXHcvLFxyXG5cclxuXHQvLyBFYXNpbHktcGFyc2VhYmxlL3JldHJpZXZhYmxlIElEIG9yIFRBRyBvciBDTEFTUyBzZWxlY3RvcnNcclxuXHRycXVpY2tFeHByID0gL14oPzojKFtcXHctXSspfChcXHcrKXxcXC4oW1xcdy1dKykpJC8sXHJcblxyXG5cdHJzaWJsaW5nID0gL1srfl0vLFxyXG5cdHJlc2NhcGUgPSAvJ3xcXFxcL2csXHJcblxyXG5cdC8vIENTUyBlc2NhcGVzIGh0dHA6Ly93d3cudzMub3JnL1RSL0NTUzIxL3N5bmRhdGEuaHRtbCNlc2NhcGVkLWNoYXJhY3RlcnNcclxuXHRydW5lc2NhcGUgPSBuZXcgUmVnRXhwKCBcIlxcXFxcXFxcKFtcXFxcZGEtZl17MSw2fVwiICsgd2hpdGVzcGFjZSArIFwiP3woXCIgKyB3aGl0ZXNwYWNlICsgXCIpfC4pXCIsIFwiaWdcIiApLFxyXG5cdGZ1bmVzY2FwZSA9IGZ1bmN0aW9uKCBfLCBlc2NhcGVkLCBlc2NhcGVkV2hpdGVzcGFjZSApIHtcclxuXHRcdHZhciBoaWdoID0gXCIweFwiICsgZXNjYXBlZCAtIDB4MTAwMDA7XHJcblx0XHQvLyBOYU4gbWVhbnMgbm9uLWNvZGVwb2ludFxyXG5cdFx0Ly8gU3VwcG9ydDogRmlyZWZveDwyNFxyXG5cdFx0Ly8gV29ya2Fyb3VuZCBlcnJvbmVvdXMgbnVtZXJpYyBpbnRlcnByZXRhdGlvbiBvZiArXCIweFwiXHJcblx0XHRyZXR1cm4gaGlnaCAhPT0gaGlnaCB8fCBlc2NhcGVkV2hpdGVzcGFjZSA/XHJcblx0XHRcdGVzY2FwZWQgOlxyXG5cdFx0XHRoaWdoIDwgMCA/XHJcblx0XHRcdFx0Ly8gQk1QIGNvZGVwb2ludFxyXG5cdFx0XHRcdFN0cmluZy5mcm9tQ2hhckNvZGUoIGhpZ2ggKyAweDEwMDAwICkgOlxyXG5cdFx0XHRcdC8vIFN1cHBsZW1lbnRhbCBQbGFuZSBjb2RlcG9pbnQgKHN1cnJvZ2F0ZSBwYWlyKVxyXG5cdFx0XHRcdFN0cmluZy5mcm9tQ2hhckNvZGUoIGhpZ2ggPj4gMTAgfCAweEQ4MDAsIGhpZ2ggJiAweDNGRiB8IDB4REMwMCApO1xyXG5cdH0sXHJcblxyXG5cdC8vIFVzZWQgZm9yIGlmcmFtZXNcclxuXHQvLyBTZWUgc2V0RG9jdW1lbnQoKVxyXG5cdC8vIFJlbW92aW5nIHRoZSBmdW5jdGlvbiB3cmFwcGVyIGNhdXNlcyBhIFwiUGVybWlzc2lvbiBEZW5pZWRcIlxyXG5cdC8vIGVycm9yIGluIElFXHJcblx0dW5sb2FkSGFuZGxlciA9IGZ1bmN0aW9uKCkge1xyXG5cdFx0c2V0RG9jdW1lbnQoKTtcclxuXHR9O1xyXG5cclxuLy8gT3B0aW1pemUgZm9yIHB1c2guYXBwbHkoIF8sIE5vZGVMaXN0IClcclxudHJ5IHtcclxuXHRwdXNoLmFwcGx5KFxyXG5cdFx0KGFyciA9IHNsaWNlLmNhbGwoIHByZWZlcnJlZERvYy5jaGlsZE5vZGVzICkpLFxyXG5cdFx0cHJlZmVycmVkRG9jLmNoaWxkTm9kZXNcclxuXHQpO1xyXG5cdC8vIFN1cHBvcnQ6IEFuZHJvaWQ8NC4wXHJcblx0Ly8gRGV0ZWN0IHNpbGVudGx5IGZhaWxpbmcgcHVzaC5hcHBseVxyXG5cdGFyclsgcHJlZmVycmVkRG9jLmNoaWxkTm9kZXMubGVuZ3RoIF0ubm9kZVR5cGU7XHJcbn0gY2F0Y2ggKCBlICkge1xyXG5cdHB1c2ggPSB7IGFwcGx5OiBhcnIubGVuZ3RoID9cclxuXHJcblx0XHQvLyBMZXZlcmFnZSBzbGljZSBpZiBwb3NzaWJsZVxyXG5cdFx0ZnVuY3Rpb24oIHRhcmdldCwgZWxzICkge1xyXG5cdFx0XHRwdXNoX25hdGl2ZS5hcHBseSggdGFyZ2V0LCBzbGljZS5jYWxsKGVscykgKTtcclxuXHRcdH0gOlxyXG5cclxuXHRcdC8vIFN1cHBvcnQ6IElFPDlcclxuXHRcdC8vIE90aGVyd2lzZSBhcHBlbmQgZGlyZWN0bHlcclxuXHRcdGZ1bmN0aW9uKCB0YXJnZXQsIGVscyApIHtcclxuXHRcdFx0dmFyIGogPSB0YXJnZXQubGVuZ3RoLFxyXG5cdFx0XHRcdGkgPSAwO1xyXG5cdFx0XHQvLyBDYW4ndCB0cnVzdCBOb2RlTGlzdC5sZW5ndGhcclxuXHRcdFx0d2hpbGUgKCAodGFyZ2V0W2orK10gPSBlbHNbaSsrXSkgKSB7fVxyXG5cdFx0XHR0YXJnZXQubGVuZ3RoID0gaiAtIDE7XHJcblx0XHR9XHJcblx0fTtcclxufVxyXG5cclxuZnVuY3Rpb24gU2l6emxlKCBzZWxlY3RvciwgY29udGV4dCwgcmVzdWx0cywgc2VlZCApIHtcclxuXHR2YXIgbSwgaSwgZWxlbSwgbmlkLCBuaWRzZWxlY3QsIG1hdGNoLCBncm91cHMsIG5ld1NlbGVjdG9yLFxyXG5cdFx0bmV3Q29udGV4dCA9IGNvbnRleHQgJiYgY29udGV4dC5vd25lckRvY3VtZW50LFxyXG5cclxuXHRcdC8vIG5vZGVUeXBlIGRlZmF1bHRzIHRvIDksIHNpbmNlIGNvbnRleHQgZGVmYXVsdHMgdG8gZG9jdW1lbnRcclxuXHRcdG5vZGVUeXBlID0gY29udGV4dCA/IGNvbnRleHQubm9kZVR5cGUgOiA5O1xyXG5cclxuXHRyZXN1bHRzID0gcmVzdWx0cyB8fCBbXTtcclxuXHJcblx0Ly8gUmV0dXJuIGVhcmx5IGZyb20gY2FsbHMgd2l0aCBpbnZhbGlkIHNlbGVjdG9yIG9yIGNvbnRleHRcclxuXHRpZiAoIHR5cGVvZiBzZWxlY3RvciAhPT0gXCJzdHJpbmdcIiB8fCAhc2VsZWN0b3IgfHxcclxuXHRcdG5vZGVUeXBlICE9PSAxICYmIG5vZGVUeXBlICE9PSA5ICYmIG5vZGVUeXBlICE9PSAxMSApIHtcclxuXHJcblx0XHRyZXR1cm4gcmVzdWx0cztcclxuXHR9XHJcblxyXG5cdC8vIFRyeSB0byBzaG9ydGN1dCBmaW5kIG9wZXJhdGlvbnMgKGFzIG9wcG9zZWQgdG8gZmlsdGVycykgaW4gSFRNTCBkb2N1bWVudHNcclxuXHRpZiAoICFzZWVkICkge1xyXG5cclxuXHRcdGlmICggKCBjb250ZXh0ID8gY29udGV4dC5vd25lckRvY3VtZW50IHx8IGNvbnRleHQgOiBwcmVmZXJyZWREb2MgKSAhPT0gZG9jdW1lbnQgKSB7XHJcblx0XHRcdHNldERvY3VtZW50KCBjb250ZXh0ICk7XHJcblx0XHR9XHJcblx0XHRjb250ZXh0ID0gY29udGV4dCB8fCBkb2N1bWVudDtcclxuXHJcblx0XHRpZiAoIGRvY3VtZW50SXNIVE1MICkge1xyXG5cclxuXHRcdFx0Ly8gSWYgdGhlIHNlbGVjdG9yIGlzIHN1ZmZpY2llbnRseSBzaW1wbGUsIHRyeSB1c2luZyBhIFwiZ2V0KkJ5KlwiIERPTSBtZXRob2RcclxuXHRcdFx0Ly8gKGV4Y2VwdGluZyBEb2N1bWVudEZyYWdtZW50IGNvbnRleHQsIHdoZXJlIHRoZSBtZXRob2RzIGRvbid0IGV4aXN0KVxyXG5cdFx0XHRpZiAoIG5vZGVUeXBlICE9PSAxMSAmJiAobWF0Y2ggPSBycXVpY2tFeHByLmV4ZWMoIHNlbGVjdG9yICkpICkge1xyXG5cclxuXHRcdFx0XHQvLyBJRCBzZWxlY3RvclxyXG5cdFx0XHRcdGlmICggKG0gPSBtYXRjaFsxXSkgKSB7XHJcblxyXG5cdFx0XHRcdFx0Ly8gRG9jdW1lbnQgY29udGV4dFxyXG5cdFx0XHRcdFx0aWYgKCBub2RlVHlwZSA9PT0gOSApIHtcclxuXHRcdFx0XHRcdFx0aWYgKCAoZWxlbSA9IGNvbnRleHQuZ2V0RWxlbWVudEJ5SWQoIG0gKSkgKSB7XHJcblxyXG5cdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFLCBPcGVyYSwgV2Via2l0XHJcblx0XHRcdFx0XHRcdFx0Ly8gVE9ETzogaWRlbnRpZnkgdmVyc2lvbnNcclxuXHRcdFx0XHRcdFx0XHQvLyBnZXRFbGVtZW50QnlJZCBjYW4gbWF0Y2ggZWxlbWVudHMgYnkgbmFtZSBpbnN0ZWFkIG9mIElEXHJcblx0XHRcdFx0XHRcdFx0aWYgKCBlbGVtLmlkID09PSBtICkge1xyXG5cdFx0XHRcdFx0XHRcdFx0cmVzdWx0cy5wdXNoKCBlbGVtICk7XHJcblx0XHRcdFx0XHRcdFx0XHRyZXR1cm4gcmVzdWx0cztcclxuXHRcdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0XHRcdFx0cmV0dXJuIHJlc3VsdHM7XHJcblx0XHRcdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0XHQvLyBFbGVtZW50IGNvbnRleHRcclxuXHRcdFx0XHRcdH0gZWxzZSB7XHJcblxyXG5cdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSwgT3BlcmEsIFdlYmtpdFxyXG5cdFx0XHRcdFx0XHQvLyBUT0RPOiBpZGVudGlmeSB2ZXJzaW9uc1xyXG5cdFx0XHRcdFx0XHQvLyBnZXRFbGVtZW50QnlJZCBjYW4gbWF0Y2ggZWxlbWVudHMgYnkgbmFtZSBpbnN0ZWFkIG9mIElEXHJcblx0XHRcdFx0XHRcdGlmICggbmV3Q29udGV4dCAmJiAoZWxlbSA9IG5ld0NvbnRleHQuZ2V0RWxlbWVudEJ5SWQoIG0gKSkgJiZcclxuXHRcdFx0XHRcdFx0XHRjb250YWlucyggY29udGV4dCwgZWxlbSApICYmXHJcblx0XHRcdFx0XHRcdFx0ZWxlbS5pZCA9PT0gbSApIHtcclxuXHJcblx0XHRcdFx0XHRcdFx0cmVzdWx0cy5wdXNoKCBlbGVtICk7XHJcblx0XHRcdFx0XHRcdFx0cmV0dXJuIHJlc3VsdHM7XHJcblx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0Ly8gVHlwZSBzZWxlY3RvclxyXG5cdFx0XHRcdH0gZWxzZSBpZiAoIG1hdGNoWzJdICkge1xyXG5cdFx0XHRcdFx0cHVzaC5hcHBseSggcmVzdWx0cywgY29udGV4dC5nZXRFbGVtZW50c0J5VGFnTmFtZSggc2VsZWN0b3IgKSApO1xyXG5cdFx0XHRcdFx0cmV0dXJuIHJlc3VsdHM7XHJcblxyXG5cdFx0XHRcdC8vIENsYXNzIHNlbGVjdG9yXHJcblx0XHRcdFx0fSBlbHNlIGlmICggKG0gPSBtYXRjaFszXSkgJiYgc3VwcG9ydC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lICYmXHJcblx0XHRcdFx0XHRjb250ZXh0LmdldEVsZW1lbnRzQnlDbGFzc05hbWUgKSB7XHJcblxyXG5cdFx0XHRcdFx0cHVzaC5hcHBseSggcmVzdWx0cywgY29udGV4dC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCBtICkgKTtcclxuXHRcdFx0XHRcdHJldHVybiByZXN1bHRzO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0Ly8gVGFrZSBhZHZhbnRhZ2Ugb2YgcXVlcnlTZWxlY3RvckFsbFxyXG5cdFx0XHRpZiAoIHN1cHBvcnQucXNhICYmXHJcblx0XHRcdFx0IWNvbXBpbGVyQ2FjaGVbIHNlbGVjdG9yICsgXCIgXCIgXSAmJlxyXG5cdFx0XHRcdCghcmJ1Z2d5UVNBIHx8ICFyYnVnZ3lRU0EudGVzdCggc2VsZWN0b3IgKSkgKSB7XHJcblxyXG5cdFx0XHRcdGlmICggbm9kZVR5cGUgIT09IDEgKSB7XHJcblx0XHRcdFx0XHRuZXdDb250ZXh0ID0gY29udGV4dDtcclxuXHRcdFx0XHRcdG5ld1NlbGVjdG9yID0gc2VsZWN0b3I7XHJcblxyXG5cdFx0XHRcdC8vIHFTQSBsb29rcyBvdXRzaWRlIEVsZW1lbnQgY29udGV4dCwgd2hpY2ggaXMgbm90IHdoYXQgd2Ugd2FudFxyXG5cdFx0XHRcdC8vIFRoYW5rcyB0byBBbmRyZXcgRHVwb250IGZvciB0aGlzIHdvcmthcm91bmQgdGVjaG5pcXVlXHJcblx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPD04XHJcblx0XHRcdFx0Ly8gRXhjbHVkZSBvYmplY3QgZWxlbWVudHNcclxuXHRcdFx0XHR9IGVsc2UgaWYgKCBjb250ZXh0Lm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgIT09IFwib2JqZWN0XCIgKSB7XHJcblxyXG5cdFx0XHRcdFx0Ly8gQ2FwdHVyZSB0aGUgY29udGV4dCBJRCwgc2V0dGluZyBpdCBmaXJzdCBpZiBuZWNlc3NhcnlcclxuXHRcdFx0XHRcdGlmICggKG5pZCA9IGNvbnRleHQuZ2V0QXR0cmlidXRlKCBcImlkXCIgKSkgKSB7XHJcblx0XHRcdFx0XHRcdG5pZCA9IG5pZC5yZXBsYWNlKCByZXNjYXBlLCBcIlxcXFwkJlwiICk7XHJcblx0XHRcdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdFx0XHRjb250ZXh0LnNldEF0dHJpYnV0ZSggXCJpZFwiLCAobmlkID0gZXhwYW5kbykgKTtcclxuXHRcdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0XHQvLyBQcmVmaXggZXZlcnkgc2VsZWN0b3IgaW4gdGhlIGxpc3RcclxuXHRcdFx0XHRcdGdyb3VwcyA9IHRva2VuaXplKCBzZWxlY3RvciApO1xyXG5cdFx0XHRcdFx0aSA9IGdyb3Vwcy5sZW5ndGg7XHJcblx0XHRcdFx0XHRuaWRzZWxlY3QgPSByaWRlbnRpZmllci50ZXN0KCBuaWQgKSA/IFwiI1wiICsgbmlkIDogXCJbaWQ9J1wiICsgbmlkICsgXCInXVwiO1xyXG5cdFx0XHRcdFx0d2hpbGUgKCBpLS0gKSB7XHJcblx0XHRcdFx0XHRcdGdyb3Vwc1tpXSA9IG5pZHNlbGVjdCArIFwiIFwiICsgdG9TZWxlY3RvciggZ3JvdXBzW2ldICk7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRuZXdTZWxlY3RvciA9IGdyb3Vwcy5qb2luKCBcIixcIiApO1xyXG5cclxuXHRcdFx0XHRcdC8vIEV4cGFuZCBjb250ZXh0IGZvciBzaWJsaW5nIHNlbGVjdG9yc1xyXG5cdFx0XHRcdFx0bmV3Q29udGV4dCA9IHJzaWJsaW5nLnRlc3QoIHNlbGVjdG9yICkgJiYgdGVzdENvbnRleHQoIGNvbnRleHQucGFyZW50Tm9kZSApIHx8XHJcblx0XHRcdFx0XHRcdGNvbnRleHQ7XHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRpZiAoIG5ld1NlbGVjdG9yICkge1xyXG5cdFx0XHRcdFx0dHJ5IHtcclxuXHRcdFx0XHRcdFx0cHVzaC5hcHBseSggcmVzdWx0cyxcclxuXHRcdFx0XHRcdFx0XHRuZXdDb250ZXh0LnF1ZXJ5U2VsZWN0b3JBbGwoIG5ld1NlbGVjdG9yIClcclxuXHRcdFx0XHRcdFx0KTtcclxuXHRcdFx0XHRcdFx0cmV0dXJuIHJlc3VsdHM7XHJcblx0XHRcdFx0XHR9IGNhdGNoICggcXNhRXJyb3IgKSB7XHJcblx0XHRcdFx0XHR9IGZpbmFsbHkge1xyXG5cdFx0XHRcdFx0XHRpZiAoIG5pZCA9PT0gZXhwYW5kbyApIHtcclxuXHRcdFx0XHRcdFx0XHRjb250ZXh0LnJlbW92ZUF0dHJpYnV0ZSggXCJpZFwiICk7XHJcblx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHR9XHJcblxyXG5cdC8vIEFsbCBvdGhlcnNcclxuXHRyZXR1cm4gc2VsZWN0KCBzZWxlY3Rvci5yZXBsYWNlKCBydHJpbSwgXCIkMVwiICksIGNvbnRleHQsIHJlc3VsdHMsIHNlZWQgKTtcclxufVxyXG5cclxuLyoqXHJcbiAqIENyZWF0ZSBrZXktdmFsdWUgY2FjaGVzIG9mIGxpbWl0ZWQgc2l6ZVxyXG4gKiBAcmV0dXJucyB7ZnVuY3Rpb24oc3RyaW5nLCBvYmplY3QpfSBSZXR1cm5zIHRoZSBPYmplY3QgZGF0YSBhZnRlciBzdG9yaW5nIGl0IG9uIGl0c2VsZiB3aXRoXHJcbiAqXHRwcm9wZXJ0eSBuYW1lIHRoZSAoc3BhY2Utc3VmZml4ZWQpIHN0cmluZyBhbmQgKGlmIHRoZSBjYWNoZSBpcyBsYXJnZXIgdGhhbiBFeHByLmNhY2hlTGVuZ3RoKVxyXG4gKlx0ZGVsZXRpbmcgdGhlIG9sZGVzdCBlbnRyeVxyXG4gKi9cclxuZnVuY3Rpb24gY3JlYXRlQ2FjaGUoKSB7XHJcblx0dmFyIGtleXMgPSBbXTtcclxuXHJcblx0ZnVuY3Rpb24gY2FjaGUoIGtleSwgdmFsdWUgKSB7XHJcblx0XHQvLyBVc2UgKGtleSArIFwiIFwiKSB0byBhdm9pZCBjb2xsaXNpb24gd2l0aCBuYXRpdmUgcHJvdG90eXBlIHByb3BlcnRpZXMgKHNlZSBJc3N1ZSAjMTU3KVxyXG5cdFx0aWYgKCBrZXlzLnB1c2goIGtleSArIFwiIFwiICkgPiBFeHByLmNhY2hlTGVuZ3RoICkge1xyXG5cdFx0XHQvLyBPbmx5IGtlZXAgdGhlIG1vc3QgcmVjZW50IGVudHJpZXNcclxuXHRcdFx0ZGVsZXRlIGNhY2hlWyBrZXlzLnNoaWZ0KCkgXTtcclxuXHRcdH1cclxuXHRcdHJldHVybiAoY2FjaGVbIGtleSArIFwiIFwiIF0gPSB2YWx1ZSk7XHJcblx0fVxyXG5cdHJldHVybiBjYWNoZTtcclxufVxyXG5cclxuLyoqXHJcbiAqIE1hcmsgYSBmdW5jdGlvbiBmb3Igc3BlY2lhbCB1c2UgYnkgU2l6emxlXHJcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIFRoZSBmdW5jdGlvbiB0byBtYXJrXHJcbiAqL1xyXG5mdW5jdGlvbiBtYXJrRnVuY3Rpb24oIGZuICkge1xyXG5cdGZuWyBleHBhbmRvIF0gPSB0cnVlO1xyXG5cdHJldHVybiBmbjtcclxufVxyXG5cclxuLyoqXHJcbiAqIFN1cHBvcnQgdGVzdGluZyB1c2luZyBhbiBlbGVtZW50XHJcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIFBhc3NlZCB0aGUgY3JlYXRlZCBkaXYgYW5kIGV4cGVjdHMgYSBib29sZWFuIHJlc3VsdFxyXG4gKi9cclxuZnVuY3Rpb24gYXNzZXJ0KCBmbiApIHtcclxuXHR2YXIgZGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcclxuXHJcblx0dHJ5IHtcclxuXHRcdHJldHVybiAhIWZuKCBkaXYgKTtcclxuXHR9IGNhdGNoIChlKSB7XHJcblx0XHRyZXR1cm4gZmFsc2U7XHJcblx0fSBmaW5hbGx5IHtcclxuXHRcdC8vIFJlbW92ZSBmcm9tIGl0cyBwYXJlbnQgYnkgZGVmYXVsdFxyXG5cdFx0aWYgKCBkaXYucGFyZW50Tm9kZSApIHtcclxuXHRcdFx0ZGl2LnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoIGRpdiApO1xyXG5cdFx0fVxyXG5cdFx0Ly8gcmVsZWFzZSBtZW1vcnkgaW4gSUVcclxuXHRcdGRpdiA9IG51bGw7XHJcblx0fVxyXG59XHJcblxyXG4vKipcclxuICogQWRkcyB0aGUgc2FtZSBoYW5kbGVyIGZvciBhbGwgb2YgdGhlIHNwZWNpZmllZCBhdHRyc1xyXG4gKiBAcGFyYW0ge1N0cmluZ30gYXR0cnMgUGlwZS1zZXBhcmF0ZWQgbGlzdCBvZiBhdHRyaWJ1dGVzXHJcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGhhbmRsZXIgVGhlIG1ldGhvZCB0aGF0IHdpbGwgYmUgYXBwbGllZFxyXG4gKi9cclxuZnVuY3Rpb24gYWRkSGFuZGxlKCBhdHRycywgaGFuZGxlciApIHtcclxuXHR2YXIgYXJyID0gYXR0cnMuc3BsaXQoXCJ8XCIpLFxyXG5cdFx0aSA9IGFyci5sZW5ndGg7XHJcblxyXG5cdHdoaWxlICggaS0tICkge1xyXG5cdFx0RXhwci5hdHRySGFuZGxlWyBhcnJbaV0gXSA9IGhhbmRsZXI7XHJcblx0fVxyXG59XHJcblxyXG4vKipcclxuICogQ2hlY2tzIGRvY3VtZW50IG9yZGVyIG9mIHR3byBzaWJsaW5nc1xyXG4gKiBAcGFyYW0ge0VsZW1lbnR9IGFcclxuICogQHBhcmFtIHtFbGVtZW50fSBiXHJcbiAqIEByZXR1cm5zIHtOdW1iZXJ9IFJldHVybnMgbGVzcyB0aGFuIDAgaWYgYSBwcmVjZWRlcyBiLCBncmVhdGVyIHRoYW4gMCBpZiBhIGZvbGxvd3MgYlxyXG4gKi9cclxuZnVuY3Rpb24gc2libGluZ0NoZWNrKCBhLCBiICkge1xyXG5cdHZhciBjdXIgPSBiICYmIGEsXHJcblx0XHRkaWZmID0gY3VyICYmIGEubm9kZVR5cGUgPT09IDEgJiYgYi5ub2RlVHlwZSA9PT0gMSAmJlxyXG5cdFx0XHQoIH5iLnNvdXJjZUluZGV4IHx8IE1BWF9ORUdBVElWRSApIC1cclxuXHRcdFx0KCB+YS5zb3VyY2VJbmRleCB8fCBNQVhfTkVHQVRJVkUgKTtcclxuXHJcblx0Ly8gVXNlIElFIHNvdXJjZUluZGV4IGlmIGF2YWlsYWJsZSBvbiBib3RoIG5vZGVzXHJcblx0aWYgKCBkaWZmICkge1xyXG5cdFx0cmV0dXJuIGRpZmY7XHJcblx0fVxyXG5cclxuXHQvLyBDaGVjayBpZiBiIGZvbGxvd3MgYVxyXG5cdGlmICggY3VyICkge1xyXG5cdFx0d2hpbGUgKCAoY3VyID0gY3VyLm5leHRTaWJsaW5nKSApIHtcclxuXHRcdFx0aWYgKCBjdXIgPT09IGIgKSB7XHJcblx0XHRcdFx0cmV0dXJuIC0xO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0fVxyXG5cclxuXHRyZXR1cm4gYSA/IDEgOiAtMTtcclxufVxyXG5cclxuLyoqXHJcbiAqIFJldHVybnMgYSBmdW5jdGlvbiB0byB1c2UgaW4gcHNldWRvcyBmb3IgaW5wdXQgdHlwZXNcclxuICogQHBhcmFtIHtTdHJpbmd9IHR5cGVcclxuICovXHJcbmZ1bmN0aW9uIGNyZWF0ZUlucHV0UHNldWRvKCB0eXBlICkge1xyXG5cdHJldHVybiBmdW5jdGlvbiggZWxlbSApIHtcclxuXHRcdHZhciBuYW1lID0gZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO1xyXG5cdFx0cmV0dXJuIG5hbWUgPT09IFwiaW5wdXRcIiAmJiBlbGVtLnR5cGUgPT09IHR5cGU7XHJcblx0fTtcclxufVxyXG5cclxuLyoqXHJcbiAqIFJldHVybnMgYSBmdW5jdGlvbiB0byB1c2UgaW4gcHNldWRvcyBmb3IgYnV0dG9uc1xyXG4gKiBAcGFyYW0ge1N0cmluZ30gdHlwZVxyXG4gKi9cclxuZnVuY3Rpb24gY3JlYXRlQnV0dG9uUHNldWRvKCB0eXBlICkge1xyXG5cdHJldHVybiBmdW5jdGlvbiggZWxlbSApIHtcclxuXHRcdHZhciBuYW1lID0gZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO1xyXG5cdFx0cmV0dXJuIChuYW1lID09PSBcImlucHV0XCIgfHwgbmFtZSA9PT0gXCJidXR0b25cIikgJiYgZWxlbS50eXBlID09PSB0eXBlO1xyXG5cdH07XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBSZXR1cm5zIGEgZnVuY3Rpb24gdG8gdXNlIGluIHBzZXVkb3MgZm9yIHBvc2l0aW9uYWxzXHJcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuXHJcbiAqL1xyXG5mdW5jdGlvbiBjcmVhdGVQb3NpdGlvbmFsUHNldWRvKCBmbiApIHtcclxuXHRyZXR1cm4gbWFya0Z1bmN0aW9uKGZ1bmN0aW9uKCBhcmd1bWVudCApIHtcclxuXHRcdGFyZ3VtZW50ID0gK2FyZ3VtZW50O1xyXG5cdFx0cmV0dXJuIG1hcmtGdW5jdGlvbihmdW5jdGlvbiggc2VlZCwgbWF0Y2hlcyApIHtcclxuXHRcdFx0dmFyIGosXHJcblx0XHRcdFx0bWF0Y2hJbmRleGVzID0gZm4oIFtdLCBzZWVkLmxlbmd0aCwgYXJndW1lbnQgKSxcclxuXHRcdFx0XHRpID0gbWF0Y2hJbmRleGVzLmxlbmd0aDtcclxuXHJcblx0XHRcdC8vIE1hdGNoIGVsZW1lbnRzIGZvdW5kIGF0IHRoZSBzcGVjaWZpZWQgaW5kZXhlc1xyXG5cdFx0XHR3aGlsZSAoIGktLSApIHtcclxuXHRcdFx0XHRpZiAoIHNlZWRbIChqID0gbWF0Y2hJbmRleGVzW2ldKSBdICkge1xyXG5cdFx0XHRcdFx0c2VlZFtqXSA9ICEobWF0Y2hlc1tqXSA9IHNlZWRbal0pO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0fSk7XHJcblx0fSk7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBDaGVja3MgYSBub2RlIGZvciB2YWxpZGl0eSBhcyBhIFNpenpsZSBjb250ZXh0XHJcbiAqIEBwYXJhbSB7RWxlbWVudHxPYmplY3Q9fSBjb250ZXh0XHJcbiAqIEByZXR1cm5zIHtFbGVtZW50fE9iamVjdHxCb29sZWFufSBUaGUgaW5wdXQgbm9kZSBpZiBhY2NlcHRhYmxlLCBvdGhlcndpc2UgYSBmYWxzeSB2YWx1ZVxyXG4gKi9cclxuZnVuY3Rpb24gdGVzdENvbnRleHQoIGNvbnRleHQgKSB7XHJcblx0cmV0dXJuIGNvbnRleHQgJiYgdHlwZW9mIGNvbnRleHQuZ2V0RWxlbWVudHNCeVRhZ05hbWUgIT09IFwidW5kZWZpbmVkXCIgJiYgY29udGV4dDtcclxufVxyXG5cclxuLy8gRXhwb3NlIHN1cHBvcnQgdmFycyBmb3IgY29udmVuaWVuY2Vcclxuc3VwcG9ydCA9IFNpenpsZS5zdXBwb3J0ID0ge307XHJcblxyXG4vKipcclxuICogRGV0ZWN0cyBYTUwgbm9kZXNcclxuICogQHBhcmFtIHtFbGVtZW50fE9iamVjdH0gZWxlbSBBbiBlbGVtZW50IG9yIGEgZG9jdW1lbnRcclxuICogQHJldHVybnMge0Jvb2xlYW59IFRydWUgaWZmIGVsZW0gaXMgYSBub24tSFRNTCBYTUwgbm9kZVxyXG4gKi9cclxuaXNYTUwgPSBTaXp6bGUuaXNYTUwgPSBmdW5jdGlvbiggZWxlbSApIHtcclxuXHQvLyBkb2N1bWVudEVsZW1lbnQgaXMgdmVyaWZpZWQgZm9yIGNhc2VzIHdoZXJlIGl0IGRvZXNuJ3QgeWV0IGV4aXN0XHJcblx0Ly8gKHN1Y2ggYXMgbG9hZGluZyBpZnJhbWVzIGluIElFIC0gIzQ4MzMpXHJcblx0dmFyIGRvY3VtZW50RWxlbWVudCA9IGVsZW0gJiYgKGVsZW0ub3duZXJEb2N1bWVudCB8fCBlbGVtKS5kb2N1bWVudEVsZW1lbnQ7XHJcblx0cmV0dXJuIGRvY3VtZW50RWxlbWVudCA/IGRvY3VtZW50RWxlbWVudC5ub2RlTmFtZSAhPT0gXCJIVE1MXCIgOiBmYWxzZTtcclxufTtcclxuXHJcbi8qKlxyXG4gKiBTZXRzIGRvY3VtZW50LXJlbGF0ZWQgdmFyaWFibGVzIG9uY2UgYmFzZWQgb24gdGhlIGN1cnJlbnQgZG9jdW1lbnRcclxuICogQHBhcmFtIHtFbGVtZW50fE9iamVjdH0gW2RvY10gQW4gZWxlbWVudCBvciBkb2N1bWVudCBvYmplY3QgdG8gdXNlIHRvIHNldCB0aGUgZG9jdW1lbnRcclxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgY3VycmVudCBkb2N1bWVudFxyXG4gKi9cclxuc2V0RG9jdW1lbnQgPSBTaXp6bGUuc2V0RG9jdW1lbnQgPSBmdW5jdGlvbiggbm9kZSApIHtcclxuXHR2YXIgaGFzQ29tcGFyZSwgcGFyZW50LFxyXG5cdFx0ZG9jID0gbm9kZSA/IG5vZGUub3duZXJEb2N1bWVudCB8fCBub2RlIDogcHJlZmVycmVkRG9jO1xyXG5cclxuXHQvLyBSZXR1cm4gZWFybHkgaWYgZG9jIGlzIGludmFsaWQgb3IgYWxyZWFkeSBzZWxlY3RlZFxyXG5cdGlmICggZG9jID09PSBkb2N1bWVudCB8fCBkb2Mubm9kZVR5cGUgIT09IDkgfHwgIWRvYy5kb2N1bWVudEVsZW1lbnQgKSB7XHJcblx0XHRyZXR1cm4gZG9jdW1lbnQ7XHJcblx0fVxyXG5cclxuXHQvLyBVcGRhdGUgZ2xvYmFsIHZhcmlhYmxlc1xyXG5cdGRvY3VtZW50ID0gZG9jO1xyXG5cdGRvY0VsZW0gPSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XHJcblx0ZG9jdW1lbnRJc0hUTUwgPSAhaXNYTUwoIGRvY3VtZW50ICk7XHJcblxyXG5cdC8vIFN1cHBvcnQ6IElFIDktMTEsIEVkZ2VcclxuXHQvLyBBY2Nlc3NpbmcgaWZyYW1lIGRvY3VtZW50cyBhZnRlciB1bmxvYWQgdGhyb3dzIFwicGVybWlzc2lvbiBkZW5pZWRcIiBlcnJvcnMgKGpRdWVyeSAjMTM5MzYpXHJcblx0aWYgKCAocGFyZW50ID0gZG9jdW1lbnQuZGVmYXVsdFZpZXcpICYmIHBhcmVudC50b3AgIT09IHBhcmVudCApIHtcclxuXHRcdC8vIFN1cHBvcnQ6IElFIDExXHJcblx0XHRpZiAoIHBhcmVudC5hZGRFdmVudExpc3RlbmVyICkge1xyXG5cdFx0XHRwYXJlbnQuYWRkRXZlbnRMaXN0ZW5lciggXCJ1bmxvYWRcIiwgdW5sb2FkSGFuZGxlciwgZmFsc2UgKTtcclxuXHJcblx0XHQvLyBTdXBwb3J0OiBJRSA5IC0gMTAgb25seVxyXG5cdFx0fSBlbHNlIGlmICggcGFyZW50LmF0dGFjaEV2ZW50ICkge1xyXG5cdFx0XHRwYXJlbnQuYXR0YWNoRXZlbnQoIFwib251bmxvYWRcIiwgdW5sb2FkSGFuZGxlciApO1xyXG5cdFx0fVxyXG5cdH1cclxuXHJcblx0LyogQXR0cmlidXRlc1xyXG5cdC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gKi9cclxuXHJcblx0Ly8gU3VwcG9ydDogSUU8OFxyXG5cdC8vIFZlcmlmeSB0aGF0IGdldEF0dHJpYnV0ZSByZWFsbHkgcmV0dXJucyBhdHRyaWJ1dGVzIGFuZCBub3QgcHJvcGVydGllc1xyXG5cdC8vIChleGNlcHRpbmcgSUU4IGJvb2xlYW5zKVxyXG5cdHN1cHBvcnQuYXR0cmlidXRlcyA9IGFzc2VydChmdW5jdGlvbiggZGl2ICkge1xyXG5cdFx0ZGl2LmNsYXNzTmFtZSA9IFwiaVwiO1xyXG5cdFx0cmV0dXJuICFkaXYuZ2V0QXR0cmlidXRlKFwiY2xhc3NOYW1lXCIpO1xyXG5cdH0pO1xyXG5cclxuXHQvKiBnZXRFbGVtZW50KHMpQnkqXHJcblx0LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xyXG5cclxuXHQvLyBDaGVjayBpZiBnZXRFbGVtZW50c0J5VGFnTmFtZShcIipcIikgcmV0dXJucyBvbmx5IGVsZW1lbnRzXHJcblx0c3VwcG9ydC5nZXRFbGVtZW50c0J5VGFnTmFtZSA9IGFzc2VydChmdW5jdGlvbiggZGl2ICkge1xyXG5cdFx0ZGl2LmFwcGVuZENoaWxkKCBkb2N1bWVudC5jcmVhdGVDb21tZW50KFwiXCIpICk7XHJcblx0XHRyZXR1cm4gIWRpdi5nZXRFbGVtZW50c0J5VGFnTmFtZShcIipcIikubGVuZ3RoO1xyXG5cdH0pO1xyXG5cclxuXHQvLyBTdXBwb3J0OiBJRTw5XHJcblx0c3VwcG9ydC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lID0gcm5hdGl2ZS50ZXN0KCBkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lICk7XHJcblxyXG5cdC8vIFN1cHBvcnQ6IElFPDEwXHJcblx0Ly8gQ2hlY2sgaWYgZ2V0RWxlbWVudEJ5SWQgcmV0dXJucyBlbGVtZW50cyBieSBuYW1lXHJcblx0Ly8gVGhlIGJyb2tlbiBnZXRFbGVtZW50QnlJZCBtZXRob2RzIGRvbid0IHBpY2sgdXAgcHJvZ3JhbWF0aWNhbGx5LXNldCBuYW1lcyxcclxuXHQvLyBzbyB1c2UgYSByb3VuZGFib3V0IGdldEVsZW1lbnRzQnlOYW1lIHRlc3RcclxuXHRzdXBwb3J0LmdldEJ5SWQgPSBhc3NlcnQoZnVuY3Rpb24oIGRpdiApIHtcclxuXHRcdGRvY0VsZW0uYXBwZW5kQ2hpbGQoIGRpdiApLmlkID0gZXhwYW5kbztcclxuXHRcdHJldHVybiAhZG9jdW1lbnQuZ2V0RWxlbWVudHNCeU5hbWUgfHwgIWRvY3VtZW50LmdldEVsZW1lbnRzQnlOYW1lKCBleHBhbmRvICkubGVuZ3RoO1xyXG5cdH0pO1xyXG5cclxuXHQvLyBJRCBmaW5kIGFuZCBmaWx0ZXJcclxuXHRpZiAoIHN1cHBvcnQuZ2V0QnlJZCApIHtcclxuXHRcdEV4cHIuZmluZFtcIklEXCJdID0gZnVuY3Rpb24oIGlkLCBjb250ZXh0ICkge1xyXG5cdFx0XHRpZiAoIHR5cGVvZiBjb250ZXh0LmdldEVsZW1lbnRCeUlkICE9PSBcInVuZGVmaW5lZFwiICYmIGRvY3VtZW50SXNIVE1MICkge1xyXG5cdFx0XHRcdHZhciBtID0gY29udGV4dC5nZXRFbGVtZW50QnlJZCggaWQgKTtcclxuXHRcdFx0XHRyZXR1cm4gbSA/IFsgbSBdIDogW107XHJcblx0XHRcdH1cclxuXHRcdH07XHJcblx0XHRFeHByLmZpbHRlcltcIklEXCJdID0gZnVuY3Rpb24oIGlkICkge1xyXG5cdFx0XHR2YXIgYXR0cklkID0gaWQucmVwbGFjZSggcnVuZXNjYXBlLCBmdW5lc2NhcGUgKTtcclxuXHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xyXG5cdFx0XHRcdHJldHVybiBlbGVtLmdldEF0dHJpYnV0ZShcImlkXCIpID09PSBhdHRySWQ7XHJcblx0XHRcdH07XHJcblx0XHR9O1xyXG5cdH0gZWxzZSB7XHJcblx0XHQvLyBTdXBwb3J0OiBJRTYvN1xyXG5cdFx0Ly8gZ2V0RWxlbWVudEJ5SWQgaXMgbm90IHJlbGlhYmxlIGFzIGEgZmluZCBzaG9ydGN1dFxyXG5cdFx0ZGVsZXRlIEV4cHIuZmluZFtcIklEXCJdO1xyXG5cclxuXHRcdEV4cHIuZmlsdGVyW1wiSURcIl0gPSAgZnVuY3Rpb24oIGlkICkge1xyXG5cdFx0XHR2YXIgYXR0cklkID0gaWQucmVwbGFjZSggcnVuZXNjYXBlLCBmdW5lc2NhcGUgKTtcclxuXHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xyXG5cdFx0XHRcdHZhciBub2RlID0gdHlwZW9mIGVsZW0uZ2V0QXR0cmlidXRlTm9kZSAhPT0gXCJ1bmRlZmluZWRcIiAmJlxyXG5cdFx0XHRcdFx0ZWxlbS5nZXRBdHRyaWJ1dGVOb2RlKFwiaWRcIik7XHJcblx0XHRcdFx0cmV0dXJuIG5vZGUgJiYgbm9kZS52YWx1ZSA9PT0gYXR0cklkO1xyXG5cdFx0XHR9O1xyXG5cdFx0fTtcclxuXHR9XHJcblxyXG5cdC8vIFRhZ1xyXG5cdEV4cHIuZmluZFtcIlRBR1wiXSA9IHN1cHBvcnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUgP1xyXG5cdFx0ZnVuY3Rpb24oIHRhZywgY29udGV4dCApIHtcclxuXHRcdFx0aWYgKCB0eXBlb2YgY29udGV4dC5nZXRFbGVtZW50c0J5VGFnTmFtZSAhPT0gXCJ1bmRlZmluZWRcIiApIHtcclxuXHRcdFx0XHRyZXR1cm4gY29udGV4dC5nZXRFbGVtZW50c0J5VGFnTmFtZSggdGFnICk7XHJcblxyXG5cdFx0XHQvLyBEb2N1bWVudEZyYWdtZW50IG5vZGVzIGRvbid0IGhhdmUgZ0VCVE5cclxuXHRcdFx0fSBlbHNlIGlmICggc3VwcG9ydC5xc2EgKSB7XHJcblx0XHRcdFx0cmV0dXJuIGNvbnRleHQucXVlcnlTZWxlY3RvckFsbCggdGFnICk7XHJcblx0XHRcdH1cclxuXHRcdH0gOlxyXG5cclxuXHRcdGZ1bmN0aW9uKCB0YWcsIGNvbnRleHQgKSB7XHJcblx0XHRcdHZhciBlbGVtLFxyXG5cdFx0XHRcdHRtcCA9IFtdLFxyXG5cdFx0XHRcdGkgPSAwLFxyXG5cdFx0XHRcdC8vIEJ5IGhhcHB5IGNvaW5jaWRlbmNlLCBhIChicm9rZW4pIGdFQlROIGFwcGVhcnMgb24gRG9jdW1lbnRGcmFnbWVudCBub2RlcyB0b29cclxuXHRcdFx0XHRyZXN1bHRzID0gY29udGV4dC5nZXRFbGVtZW50c0J5VGFnTmFtZSggdGFnICk7XHJcblxyXG5cdFx0XHQvLyBGaWx0ZXIgb3V0IHBvc3NpYmxlIGNvbW1lbnRzXHJcblx0XHRcdGlmICggdGFnID09PSBcIipcIiApIHtcclxuXHRcdFx0XHR3aGlsZSAoIChlbGVtID0gcmVzdWx0c1tpKytdKSApIHtcclxuXHRcdFx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSApIHtcclxuXHRcdFx0XHRcdFx0dG1wLnB1c2goIGVsZW0gKTtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdHJldHVybiB0bXA7XHJcblx0XHRcdH1cclxuXHRcdFx0cmV0dXJuIHJlc3VsdHM7XHJcblx0XHR9O1xyXG5cclxuXHQvLyBDbGFzc1xyXG5cdEV4cHIuZmluZFtcIkNMQVNTXCJdID0gc3VwcG9ydC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lICYmIGZ1bmN0aW9uKCBjbGFzc05hbWUsIGNvbnRleHQgKSB7XHJcblx0XHRpZiAoIHR5cGVvZiBjb250ZXh0LmdldEVsZW1lbnRzQnlDbGFzc05hbWUgIT09IFwidW5kZWZpbmVkXCIgJiYgZG9jdW1lbnRJc0hUTUwgKSB7XHJcblx0XHRcdHJldHVybiBjb250ZXh0LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoIGNsYXNzTmFtZSApO1xyXG5cdFx0fVxyXG5cdH07XHJcblxyXG5cdC8qIFFTQS9tYXRjaGVzU2VsZWN0b3JcclxuXHQtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICovXHJcblxyXG5cdC8vIFFTQSBhbmQgbWF0Y2hlc1NlbGVjdG9yIHN1cHBvcnRcclxuXHJcblx0Ly8gbWF0Y2hlc1NlbGVjdG9yKDphY3RpdmUpIHJlcG9ydHMgZmFsc2Ugd2hlbiB0cnVlIChJRTkvT3BlcmEgMTEuNSlcclxuXHRyYnVnZ3lNYXRjaGVzID0gW107XHJcblxyXG5cdC8vIHFTYSg6Zm9jdXMpIHJlcG9ydHMgZmFsc2Ugd2hlbiB0cnVlIChDaHJvbWUgMjEpXHJcblx0Ly8gV2UgYWxsb3cgdGhpcyBiZWNhdXNlIG9mIGEgYnVnIGluIElFOC85IHRoYXQgdGhyb3dzIGFuIGVycm9yXHJcblx0Ly8gd2hlbmV2ZXIgYGRvY3VtZW50LmFjdGl2ZUVsZW1lbnRgIGlzIGFjY2Vzc2VkIG9uIGFuIGlmcmFtZVxyXG5cdC8vIFNvLCB3ZSBhbGxvdyA6Zm9jdXMgdG8gcGFzcyB0aHJvdWdoIFFTQSBhbGwgdGhlIHRpbWUgdG8gYXZvaWQgdGhlIElFIGVycm9yXHJcblx0Ly8gU2VlIGh0dHA6Ly9idWdzLmpxdWVyeS5jb20vdGlja2V0LzEzMzc4XHJcblx0cmJ1Z2d5UVNBID0gW107XHJcblxyXG5cdGlmICggKHN1cHBvcnQucXNhID0gcm5hdGl2ZS50ZXN0KCBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsICkpICkge1xyXG5cdFx0Ly8gQnVpbGQgUVNBIHJlZ2V4XHJcblx0XHQvLyBSZWdleCBzdHJhdGVneSBhZG9wdGVkIGZyb20gRGllZ28gUGVyaW5pXHJcblx0XHRhc3NlcnQoZnVuY3Rpb24oIGRpdiApIHtcclxuXHRcdFx0Ly8gU2VsZWN0IGlzIHNldCB0byBlbXB0eSBzdHJpbmcgb24gcHVycG9zZVxyXG5cdFx0XHQvLyBUaGlzIGlzIHRvIHRlc3QgSUUncyB0cmVhdG1lbnQgb2Ygbm90IGV4cGxpY2l0bHlcclxuXHRcdFx0Ly8gc2V0dGluZyBhIGJvb2xlYW4gY29udGVudCBhdHRyaWJ1dGUsXHJcblx0XHRcdC8vIHNpbmNlIGl0cyBwcmVzZW5jZSBzaG91bGQgYmUgZW5vdWdoXHJcblx0XHRcdC8vIGh0dHA6Ly9idWdzLmpxdWVyeS5jb20vdGlja2V0LzEyMzU5XHJcblx0XHRcdGRvY0VsZW0uYXBwZW5kQ2hpbGQoIGRpdiApLmlubmVySFRNTCA9IFwiPGEgaWQ9J1wiICsgZXhwYW5kbyArIFwiJz48L2E+XCIgK1xyXG5cdFx0XHRcdFwiPHNlbGVjdCBpZD0nXCIgKyBleHBhbmRvICsgXCItXFxyXFxcXCcgbXNhbGxvd2NhcHR1cmU9Jyc+XCIgK1xyXG5cdFx0XHRcdFwiPG9wdGlvbiBzZWxlY3RlZD0nJz48L29wdGlvbj48L3NlbGVjdD5cIjtcclxuXHJcblx0XHRcdC8vIFN1cHBvcnQ6IElFOCwgT3BlcmEgMTEtMTIuMTZcclxuXHRcdFx0Ly8gTm90aGluZyBzaG91bGQgYmUgc2VsZWN0ZWQgd2hlbiBlbXB0eSBzdHJpbmdzIGZvbGxvdyBePSBvciAkPSBvciAqPVxyXG5cdFx0XHQvLyBUaGUgdGVzdCBhdHRyaWJ1dGUgbXVzdCBiZSB1bmtub3duIGluIE9wZXJhIGJ1dCBcInNhZmVcIiBmb3IgV2luUlRcclxuXHRcdFx0Ly8gaHR0cDovL21zZG4ubWljcm9zb2Z0LmNvbS9lbi11cy9saWJyYXJ5L2llL2hoNDY1Mzg4LmFzcHgjYXR0cmlidXRlX3NlY3Rpb25cclxuXHRcdFx0aWYgKCBkaXYucXVlcnlTZWxlY3RvckFsbChcIlttc2FsbG93Y2FwdHVyZV49JyddXCIpLmxlbmd0aCApIHtcclxuXHRcdFx0XHRyYnVnZ3lRU0EucHVzaCggXCJbKl4kXT1cIiArIHdoaXRlc3BhY2UgKyBcIiooPzonJ3xcXFwiXFxcIilcIiApO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHQvLyBTdXBwb3J0OiBJRThcclxuXHRcdFx0Ly8gQm9vbGVhbiBhdHRyaWJ1dGVzIGFuZCBcInZhbHVlXCIgYXJlIG5vdCB0cmVhdGVkIGNvcnJlY3RseVxyXG5cdFx0XHRpZiAoICFkaXYucXVlcnlTZWxlY3RvckFsbChcIltzZWxlY3RlZF1cIikubGVuZ3RoICkge1xyXG5cdFx0XHRcdHJidWdneVFTQS5wdXNoKCBcIlxcXFxbXCIgKyB3aGl0ZXNwYWNlICsgXCIqKD86dmFsdWV8XCIgKyBib29sZWFucyArIFwiKVwiICk7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdC8vIFN1cHBvcnQ6IENocm9tZTwyOSwgQW5kcm9pZDw0LjQsIFNhZmFyaTw3LjArLCBpT1M8Ny4wKywgUGhhbnRvbUpTPDEuOS44K1xyXG5cdFx0XHRpZiAoICFkaXYucXVlcnlTZWxlY3RvckFsbCggXCJbaWR+PVwiICsgZXhwYW5kbyArIFwiLV1cIiApLmxlbmd0aCApIHtcclxuXHRcdFx0XHRyYnVnZ3lRU0EucHVzaChcIn49XCIpO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHQvLyBXZWJraXQvT3BlcmEgLSA6Y2hlY2tlZCBzaG91bGQgcmV0dXJuIHNlbGVjdGVkIG9wdGlvbiBlbGVtZW50c1xyXG5cdFx0XHQvLyBodHRwOi8vd3d3LnczLm9yZy9UUi8yMDExL1JFQy1jc3MzLXNlbGVjdG9ycy0yMDExMDkyOS8jY2hlY2tlZFxyXG5cdFx0XHQvLyBJRTggdGhyb3dzIGVycm9yIGhlcmUgYW5kIHdpbGwgbm90IHNlZSBsYXRlciB0ZXN0c1xyXG5cdFx0XHRpZiAoICFkaXYucXVlcnlTZWxlY3RvckFsbChcIjpjaGVja2VkXCIpLmxlbmd0aCApIHtcclxuXHRcdFx0XHRyYnVnZ3lRU0EucHVzaChcIjpjaGVja2VkXCIpO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHQvLyBTdXBwb3J0OiBTYWZhcmkgOCssIGlPUyA4K1xyXG5cdFx0XHQvLyBodHRwczovL2J1Z3Mud2Via2l0Lm9yZy9zaG93X2J1Zy5jZ2k/aWQ9MTM2ODUxXHJcblx0XHRcdC8vIEluLXBhZ2UgYHNlbGVjdG9yI2lkIHNpYmluZy1jb21iaW5hdG9yIHNlbGVjdG9yYCBmYWlsc1xyXG5cdFx0XHRpZiAoICFkaXYucXVlcnlTZWxlY3RvckFsbCggXCJhI1wiICsgZXhwYW5kbyArIFwiKypcIiApLmxlbmd0aCApIHtcclxuXHRcdFx0XHRyYnVnZ3lRU0EucHVzaChcIi4jLitbK35dXCIpO1xyXG5cdFx0XHR9XHJcblx0XHR9KTtcclxuXHJcblx0XHRhc3NlcnQoZnVuY3Rpb24oIGRpdiApIHtcclxuXHRcdFx0Ly8gU3VwcG9ydDogV2luZG93cyA4IE5hdGl2ZSBBcHBzXHJcblx0XHRcdC8vIFRoZSB0eXBlIGFuZCBuYW1lIGF0dHJpYnV0ZXMgYXJlIHJlc3RyaWN0ZWQgZHVyaW5nIC5pbm5lckhUTUwgYXNzaWdubWVudFxyXG5cdFx0XHR2YXIgaW5wdXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiaW5wdXRcIik7XHJcblx0XHRcdGlucHV0LnNldEF0dHJpYnV0ZSggXCJ0eXBlXCIsIFwiaGlkZGVuXCIgKTtcclxuXHRcdFx0ZGl2LmFwcGVuZENoaWxkKCBpbnB1dCApLnNldEF0dHJpYnV0ZSggXCJuYW1lXCIsIFwiRFwiICk7XHJcblxyXG5cdFx0XHQvLyBTdXBwb3J0OiBJRThcclxuXHRcdFx0Ly8gRW5mb3JjZSBjYXNlLXNlbnNpdGl2aXR5IG9mIG5hbWUgYXR0cmlidXRlXHJcblx0XHRcdGlmICggZGl2LnF1ZXJ5U2VsZWN0b3JBbGwoXCJbbmFtZT1kXVwiKS5sZW5ndGggKSB7XHJcblx0XHRcdFx0cmJ1Z2d5UVNBLnB1c2goIFwibmFtZVwiICsgd2hpdGVzcGFjZSArIFwiKlsqXiR8IX5dPz1cIiApO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHQvLyBGRiAzLjUgLSA6ZW5hYmxlZC86ZGlzYWJsZWQgYW5kIGhpZGRlbiBlbGVtZW50cyAoaGlkZGVuIGVsZW1lbnRzIGFyZSBzdGlsbCBlbmFibGVkKVxyXG5cdFx0XHQvLyBJRTggdGhyb3dzIGVycm9yIGhlcmUgYW5kIHdpbGwgbm90IHNlZSBsYXRlciB0ZXN0c1xyXG5cdFx0XHRpZiAoICFkaXYucXVlcnlTZWxlY3RvckFsbChcIjplbmFibGVkXCIpLmxlbmd0aCApIHtcclxuXHRcdFx0XHRyYnVnZ3lRU0EucHVzaCggXCI6ZW5hYmxlZFwiLCBcIjpkaXNhYmxlZFwiICk7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdC8vIE9wZXJhIDEwLTExIGRvZXMgbm90IHRocm93IG9uIHBvc3QtY29tbWEgaW52YWxpZCBwc2V1ZG9zXHJcblx0XHRcdGRpdi5xdWVyeVNlbGVjdG9yQWxsKFwiKiw6eFwiKTtcclxuXHRcdFx0cmJ1Z2d5UVNBLnB1c2goXCIsLio6XCIpO1xyXG5cdFx0fSk7XHJcblx0fVxyXG5cclxuXHRpZiAoIChzdXBwb3J0Lm1hdGNoZXNTZWxlY3RvciA9IHJuYXRpdmUudGVzdCggKG1hdGNoZXMgPSBkb2NFbGVtLm1hdGNoZXMgfHxcclxuXHRcdGRvY0VsZW0ud2Via2l0TWF0Y2hlc1NlbGVjdG9yIHx8XHJcblx0XHRkb2NFbGVtLm1vek1hdGNoZXNTZWxlY3RvciB8fFxyXG5cdFx0ZG9jRWxlbS5vTWF0Y2hlc1NlbGVjdG9yIHx8XHJcblx0XHRkb2NFbGVtLm1zTWF0Y2hlc1NlbGVjdG9yKSApKSApIHtcclxuXHJcblx0XHRhc3NlcnQoZnVuY3Rpb24oIGRpdiApIHtcclxuXHRcdFx0Ly8gQ2hlY2sgdG8gc2VlIGlmIGl0J3MgcG9zc2libGUgdG8gZG8gbWF0Y2hlc1NlbGVjdG9yXHJcblx0XHRcdC8vIG9uIGEgZGlzY29ubmVjdGVkIG5vZGUgKElFIDkpXHJcblx0XHRcdHN1cHBvcnQuZGlzY29ubmVjdGVkTWF0Y2ggPSBtYXRjaGVzLmNhbGwoIGRpdiwgXCJkaXZcIiApO1xyXG5cclxuXHRcdFx0Ly8gVGhpcyBzaG91bGQgZmFpbCB3aXRoIGFuIGV4Y2VwdGlvblxyXG5cdFx0XHQvLyBHZWNrbyBkb2VzIG5vdCBlcnJvciwgcmV0dXJucyBmYWxzZSBpbnN0ZWFkXHJcblx0XHRcdG1hdGNoZXMuY2FsbCggZGl2LCBcIltzIT0nJ106eFwiICk7XHJcblx0XHRcdHJidWdneU1hdGNoZXMucHVzaCggXCIhPVwiLCBwc2V1ZG9zICk7XHJcblx0XHR9KTtcclxuXHR9XHJcblxyXG5cdHJidWdneVFTQSA9IHJidWdneVFTQS5sZW5ndGggJiYgbmV3IFJlZ0V4cCggcmJ1Z2d5UVNBLmpvaW4oXCJ8XCIpICk7XHJcblx0cmJ1Z2d5TWF0Y2hlcyA9IHJidWdneU1hdGNoZXMubGVuZ3RoICYmIG5ldyBSZWdFeHAoIHJidWdneU1hdGNoZXMuam9pbihcInxcIikgKTtcclxuXHJcblx0LyogQ29udGFpbnNcclxuXHQtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICovXHJcblx0aGFzQ29tcGFyZSA9IHJuYXRpdmUudGVzdCggZG9jRWxlbS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbiApO1xyXG5cclxuXHQvLyBFbGVtZW50IGNvbnRhaW5zIGFub3RoZXJcclxuXHQvLyBQdXJwb3NlZnVsbHkgc2VsZi1leGNsdXNpdmVcclxuXHQvLyBBcyBpbiwgYW4gZWxlbWVudCBkb2VzIG5vdCBjb250YWluIGl0c2VsZlxyXG5cdGNvbnRhaW5zID0gaGFzQ29tcGFyZSB8fCBybmF0aXZlLnRlc3QoIGRvY0VsZW0uY29udGFpbnMgKSA/XHJcblx0XHRmdW5jdGlvbiggYSwgYiApIHtcclxuXHRcdFx0dmFyIGFkb3duID0gYS5ub2RlVHlwZSA9PT0gOSA/IGEuZG9jdW1lbnRFbGVtZW50IDogYSxcclxuXHRcdFx0XHRidXAgPSBiICYmIGIucGFyZW50Tm9kZTtcclxuXHRcdFx0cmV0dXJuIGEgPT09IGJ1cCB8fCAhISggYnVwICYmIGJ1cC5ub2RlVHlwZSA9PT0gMSAmJiAoXHJcblx0XHRcdFx0YWRvd24uY29udGFpbnMgP1xyXG5cdFx0XHRcdFx0YWRvd24uY29udGFpbnMoIGJ1cCApIDpcclxuXHRcdFx0XHRcdGEuY29tcGFyZURvY3VtZW50UG9zaXRpb24gJiYgYS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbiggYnVwICkgJiAxNlxyXG5cdFx0XHQpKTtcclxuXHRcdH0gOlxyXG5cdFx0ZnVuY3Rpb24oIGEsIGIgKSB7XHJcblx0XHRcdGlmICggYiApIHtcclxuXHRcdFx0XHR3aGlsZSAoIChiID0gYi5wYXJlbnROb2RlKSApIHtcclxuXHRcdFx0XHRcdGlmICggYiA9PT0gYSApIHtcclxuXHRcdFx0XHRcdFx0cmV0dXJuIHRydWU7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHRcdHJldHVybiBmYWxzZTtcclxuXHRcdH07XHJcblxyXG5cdC8qIFNvcnRpbmdcclxuXHQtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICovXHJcblxyXG5cdC8vIERvY3VtZW50IG9yZGVyIHNvcnRpbmdcclxuXHRzb3J0T3JkZXIgPSBoYXNDb21wYXJlID9cclxuXHRmdW5jdGlvbiggYSwgYiApIHtcclxuXHJcblx0XHQvLyBGbGFnIGZvciBkdXBsaWNhdGUgcmVtb3ZhbFxyXG5cdFx0aWYgKCBhID09PSBiICkge1xyXG5cdFx0XHRoYXNEdXBsaWNhdGUgPSB0cnVlO1xyXG5cdFx0XHRyZXR1cm4gMDtcclxuXHRcdH1cclxuXHJcblx0XHQvLyBTb3J0IG9uIG1ldGhvZCBleGlzdGVuY2UgaWYgb25seSBvbmUgaW5wdXQgaGFzIGNvbXBhcmVEb2N1bWVudFBvc2l0aW9uXHJcblx0XHR2YXIgY29tcGFyZSA9ICFhLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uIC0gIWIuY29tcGFyZURvY3VtZW50UG9zaXRpb247XHJcblx0XHRpZiAoIGNvbXBhcmUgKSB7XHJcblx0XHRcdHJldHVybiBjb21wYXJlO1xyXG5cdFx0fVxyXG5cclxuXHRcdC8vIENhbGN1bGF0ZSBwb3NpdGlvbiBpZiBib3RoIGlucHV0cyBiZWxvbmcgdG8gdGhlIHNhbWUgZG9jdW1lbnRcclxuXHRcdGNvbXBhcmUgPSAoIGEub3duZXJEb2N1bWVudCB8fCBhICkgPT09ICggYi5vd25lckRvY3VtZW50IHx8IGIgKSA/XHJcblx0XHRcdGEuY29tcGFyZURvY3VtZW50UG9zaXRpb24oIGIgKSA6XHJcblxyXG5cdFx0XHQvLyBPdGhlcndpc2Ugd2Uga25vdyB0aGV5IGFyZSBkaXNjb25uZWN0ZWRcclxuXHRcdFx0MTtcclxuXHJcblx0XHQvLyBEaXNjb25uZWN0ZWQgbm9kZXNcclxuXHRcdGlmICggY29tcGFyZSAmIDEgfHxcclxuXHRcdFx0KCFzdXBwb3J0LnNvcnREZXRhY2hlZCAmJiBiLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKCBhICkgPT09IGNvbXBhcmUpICkge1xyXG5cclxuXHRcdFx0Ly8gQ2hvb3NlIHRoZSBmaXJzdCBlbGVtZW50IHRoYXQgaXMgcmVsYXRlZCB0byBvdXIgcHJlZmVycmVkIGRvY3VtZW50XHJcblx0XHRcdGlmICggYSA9PT0gZG9jdW1lbnQgfHwgYS5vd25lckRvY3VtZW50ID09PSBwcmVmZXJyZWREb2MgJiYgY29udGFpbnMocHJlZmVycmVkRG9jLCBhKSApIHtcclxuXHRcdFx0XHRyZXR1cm4gLTE7XHJcblx0XHRcdH1cclxuXHRcdFx0aWYgKCBiID09PSBkb2N1bWVudCB8fCBiLm93bmVyRG9jdW1lbnQgPT09IHByZWZlcnJlZERvYyAmJiBjb250YWlucyhwcmVmZXJyZWREb2MsIGIpICkge1xyXG5cdFx0XHRcdHJldHVybiAxO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHQvLyBNYWludGFpbiBvcmlnaW5hbCBvcmRlclxyXG5cdFx0XHRyZXR1cm4gc29ydElucHV0ID9cclxuXHRcdFx0XHQoIGluZGV4T2YoIHNvcnRJbnB1dCwgYSApIC0gaW5kZXhPZiggc29ydElucHV0LCBiICkgKSA6XHJcblx0XHRcdFx0MDtcclxuXHRcdH1cclxuXHJcblx0XHRyZXR1cm4gY29tcGFyZSAmIDQgPyAtMSA6IDE7XHJcblx0fSA6XHJcblx0ZnVuY3Rpb24oIGEsIGIgKSB7XHJcblx0XHQvLyBFeGl0IGVhcmx5IGlmIHRoZSBub2RlcyBhcmUgaWRlbnRpY2FsXHJcblx0XHRpZiAoIGEgPT09IGIgKSB7XHJcblx0XHRcdGhhc0R1cGxpY2F0ZSA9IHRydWU7XHJcblx0XHRcdHJldHVybiAwO1xyXG5cdFx0fVxyXG5cclxuXHRcdHZhciBjdXIsXHJcblx0XHRcdGkgPSAwLFxyXG5cdFx0XHRhdXAgPSBhLnBhcmVudE5vZGUsXHJcblx0XHRcdGJ1cCA9IGIucGFyZW50Tm9kZSxcclxuXHRcdFx0YXAgPSBbIGEgXSxcclxuXHRcdFx0YnAgPSBbIGIgXTtcclxuXHJcblx0XHQvLyBQYXJlbnRsZXNzIG5vZGVzIGFyZSBlaXRoZXIgZG9jdW1lbnRzIG9yIGRpc2Nvbm5lY3RlZFxyXG5cdFx0aWYgKCAhYXVwIHx8ICFidXAgKSB7XHJcblx0XHRcdHJldHVybiBhID09PSBkb2N1bWVudCA/IC0xIDpcclxuXHRcdFx0XHRiID09PSBkb2N1bWVudCA/IDEgOlxyXG5cdFx0XHRcdGF1cCA/IC0xIDpcclxuXHRcdFx0XHRidXAgPyAxIDpcclxuXHRcdFx0XHRzb3J0SW5wdXQgP1xyXG5cdFx0XHRcdCggaW5kZXhPZiggc29ydElucHV0LCBhICkgLSBpbmRleE9mKCBzb3J0SW5wdXQsIGIgKSApIDpcclxuXHRcdFx0XHQwO1xyXG5cclxuXHRcdC8vIElmIHRoZSBub2RlcyBhcmUgc2libGluZ3MsIHdlIGNhbiBkbyBhIHF1aWNrIGNoZWNrXHJcblx0XHR9IGVsc2UgaWYgKCBhdXAgPT09IGJ1cCApIHtcclxuXHRcdFx0cmV0dXJuIHNpYmxpbmdDaGVjayggYSwgYiApO1xyXG5cdFx0fVxyXG5cclxuXHRcdC8vIE90aGVyd2lzZSB3ZSBuZWVkIGZ1bGwgbGlzdHMgb2YgdGhlaXIgYW5jZXN0b3JzIGZvciBjb21wYXJpc29uXHJcblx0XHRjdXIgPSBhO1xyXG5cdFx0d2hpbGUgKCAoY3VyID0gY3VyLnBhcmVudE5vZGUpICkge1xyXG5cdFx0XHRhcC51bnNoaWZ0KCBjdXIgKTtcclxuXHRcdH1cclxuXHRcdGN1ciA9IGI7XHJcblx0XHR3aGlsZSAoIChjdXIgPSBjdXIucGFyZW50Tm9kZSkgKSB7XHJcblx0XHRcdGJwLnVuc2hpZnQoIGN1ciApO1xyXG5cdFx0fVxyXG5cclxuXHRcdC8vIFdhbGsgZG93biB0aGUgdHJlZSBsb29raW5nIGZvciBhIGRpc2NyZXBhbmN5XHJcblx0XHR3aGlsZSAoIGFwW2ldID09PSBicFtpXSApIHtcclxuXHRcdFx0aSsrO1xyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiBpID9cclxuXHRcdFx0Ly8gRG8gYSBzaWJsaW5nIGNoZWNrIGlmIHRoZSBub2RlcyBoYXZlIGEgY29tbW9uIGFuY2VzdG9yXHJcblx0XHRcdHNpYmxpbmdDaGVjayggYXBbaV0sIGJwW2ldICkgOlxyXG5cclxuXHRcdFx0Ly8gT3RoZXJ3aXNlIG5vZGVzIGluIG91ciBkb2N1bWVudCBzb3J0IGZpcnN0XHJcblx0XHRcdGFwW2ldID09PSBwcmVmZXJyZWREb2MgPyAtMSA6XHJcblx0XHRcdGJwW2ldID09PSBwcmVmZXJyZWREb2MgPyAxIDpcclxuXHRcdFx0MDtcclxuXHR9O1xyXG5cclxuXHRyZXR1cm4gZG9jdW1lbnQ7XHJcbn07XHJcblxyXG5TaXp6bGUubWF0Y2hlcyA9IGZ1bmN0aW9uKCBleHByLCBlbGVtZW50cyApIHtcclxuXHRyZXR1cm4gU2l6emxlKCBleHByLCBudWxsLCBudWxsLCBlbGVtZW50cyApO1xyXG59O1xyXG5cclxuU2l6emxlLm1hdGNoZXNTZWxlY3RvciA9IGZ1bmN0aW9uKCBlbGVtLCBleHByICkge1xyXG5cdC8vIFNldCBkb2N1bWVudCB2YXJzIGlmIG5lZWRlZFxyXG5cdGlmICggKCBlbGVtLm93bmVyRG9jdW1lbnQgfHwgZWxlbSApICE9PSBkb2N1bWVudCApIHtcclxuXHRcdHNldERvY3VtZW50KCBlbGVtICk7XHJcblx0fVxyXG5cclxuXHQvLyBNYWtlIHN1cmUgdGhhdCBhdHRyaWJ1dGUgc2VsZWN0b3JzIGFyZSBxdW90ZWRcclxuXHRleHByID0gZXhwci5yZXBsYWNlKCByYXR0cmlidXRlUXVvdGVzLCBcIj0nJDEnXVwiICk7XHJcblxyXG5cdGlmICggc3VwcG9ydC5tYXRjaGVzU2VsZWN0b3IgJiYgZG9jdW1lbnRJc0hUTUwgJiZcclxuXHRcdCFjb21waWxlckNhY2hlWyBleHByICsgXCIgXCIgXSAmJlxyXG5cdFx0KCAhcmJ1Z2d5TWF0Y2hlcyB8fCAhcmJ1Z2d5TWF0Y2hlcy50ZXN0KCBleHByICkgKSAmJlxyXG5cdFx0KCAhcmJ1Z2d5UVNBICAgICB8fCAhcmJ1Z2d5UVNBLnRlc3QoIGV4cHIgKSApICkge1xyXG5cclxuXHRcdHRyeSB7XHJcblx0XHRcdHZhciByZXQgPSBtYXRjaGVzLmNhbGwoIGVsZW0sIGV4cHIgKTtcclxuXHJcblx0XHRcdC8vIElFIDkncyBtYXRjaGVzU2VsZWN0b3IgcmV0dXJucyBmYWxzZSBvbiBkaXNjb25uZWN0ZWQgbm9kZXNcclxuXHRcdFx0aWYgKCByZXQgfHwgc3VwcG9ydC5kaXNjb25uZWN0ZWRNYXRjaCB8fFxyXG5cdFx0XHRcdFx0Ly8gQXMgd2VsbCwgZGlzY29ubmVjdGVkIG5vZGVzIGFyZSBzYWlkIHRvIGJlIGluIGEgZG9jdW1lbnRcclxuXHRcdFx0XHRcdC8vIGZyYWdtZW50IGluIElFIDlcclxuXHRcdFx0XHRcdGVsZW0uZG9jdW1lbnQgJiYgZWxlbS5kb2N1bWVudC5ub2RlVHlwZSAhPT0gMTEgKSB7XHJcblx0XHRcdFx0cmV0dXJuIHJldDtcclxuXHRcdFx0fVxyXG5cdFx0fSBjYXRjaCAoZSkge31cclxuXHR9XHJcblxyXG5cdHJldHVybiBTaXp6bGUoIGV4cHIsIGRvY3VtZW50LCBudWxsLCBbIGVsZW0gXSApLmxlbmd0aCA+IDA7XHJcbn07XHJcblxyXG5TaXp6bGUuY29udGFpbnMgPSBmdW5jdGlvbiggY29udGV4dCwgZWxlbSApIHtcclxuXHQvLyBTZXQgZG9jdW1lbnQgdmFycyBpZiBuZWVkZWRcclxuXHRpZiAoICggY29udGV4dC5vd25lckRvY3VtZW50IHx8IGNvbnRleHQgKSAhPT0gZG9jdW1lbnQgKSB7XHJcblx0XHRzZXREb2N1bWVudCggY29udGV4dCApO1xyXG5cdH1cclxuXHRyZXR1cm4gY29udGFpbnMoIGNvbnRleHQsIGVsZW0gKTtcclxufTtcclxuXHJcblNpenpsZS5hdHRyID0gZnVuY3Rpb24oIGVsZW0sIG5hbWUgKSB7XHJcblx0Ly8gU2V0IGRvY3VtZW50IHZhcnMgaWYgbmVlZGVkXHJcblx0aWYgKCAoIGVsZW0ub3duZXJEb2N1bWVudCB8fCBlbGVtICkgIT09IGRvY3VtZW50ICkge1xyXG5cdFx0c2V0RG9jdW1lbnQoIGVsZW0gKTtcclxuXHR9XHJcblxyXG5cdHZhciBmbiA9IEV4cHIuYXR0ckhhbmRsZVsgbmFtZS50b0xvd2VyQ2FzZSgpIF0sXHJcblx0XHQvLyBEb24ndCBnZXQgZm9vbGVkIGJ5IE9iamVjdC5wcm90b3R5cGUgcHJvcGVydGllcyAoalF1ZXJ5ICMxMzgwNylcclxuXHRcdHZhbCA9IGZuICYmIGhhc093bi5jYWxsKCBFeHByLmF0dHJIYW5kbGUsIG5hbWUudG9Mb3dlckNhc2UoKSApID9cclxuXHRcdFx0Zm4oIGVsZW0sIG5hbWUsICFkb2N1bWVudElzSFRNTCApIDpcclxuXHRcdFx0dW5kZWZpbmVkO1xyXG5cclxuXHRyZXR1cm4gdmFsICE9PSB1bmRlZmluZWQgP1xyXG5cdFx0dmFsIDpcclxuXHRcdHN1cHBvcnQuYXR0cmlidXRlcyB8fCAhZG9jdW1lbnRJc0hUTUwgP1xyXG5cdFx0XHRlbGVtLmdldEF0dHJpYnV0ZSggbmFtZSApIDpcclxuXHRcdFx0KHZhbCA9IGVsZW0uZ2V0QXR0cmlidXRlTm9kZShuYW1lKSkgJiYgdmFsLnNwZWNpZmllZCA/XHJcblx0XHRcdFx0dmFsLnZhbHVlIDpcclxuXHRcdFx0XHRudWxsO1xyXG59O1xyXG5cclxuU2l6emxlLmVycm9yID0gZnVuY3Rpb24oIG1zZyApIHtcclxuXHR0aHJvdyBuZXcgRXJyb3IoIFwiU3ludGF4IGVycm9yLCB1bnJlY29nbml6ZWQgZXhwcmVzc2lvbjogXCIgKyBtc2cgKTtcclxufTtcclxuXHJcbi8qKlxyXG4gKiBEb2N1bWVudCBzb3J0aW5nIGFuZCByZW1vdmluZyBkdXBsaWNhdGVzXHJcbiAqIEBwYXJhbSB7QXJyYXlMaWtlfSByZXN1bHRzXHJcbiAqL1xyXG5TaXp6bGUudW5pcXVlU29ydCA9IGZ1bmN0aW9uKCByZXN1bHRzICkge1xyXG5cdHZhciBlbGVtLFxyXG5cdFx0ZHVwbGljYXRlcyA9IFtdLFxyXG5cdFx0aiA9IDAsXHJcblx0XHRpID0gMDtcclxuXHJcblx0Ly8gVW5sZXNzIHdlICprbm93KiB3ZSBjYW4gZGV0ZWN0IGR1cGxpY2F0ZXMsIGFzc3VtZSB0aGVpciBwcmVzZW5jZVxyXG5cdGhhc0R1cGxpY2F0ZSA9ICFzdXBwb3J0LmRldGVjdER1cGxpY2F0ZXM7XHJcblx0c29ydElucHV0ID0gIXN1cHBvcnQuc29ydFN0YWJsZSAmJiByZXN1bHRzLnNsaWNlKCAwICk7XHJcblx0cmVzdWx0cy5zb3J0KCBzb3J0T3JkZXIgKTtcclxuXHJcblx0aWYgKCBoYXNEdXBsaWNhdGUgKSB7XHJcblx0XHR3aGlsZSAoIChlbGVtID0gcmVzdWx0c1tpKytdKSApIHtcclxuXHRcdFx0aWYgKCBlbGVtID09PSByZXN1bHRzWyBpIF0gKSB7XHJcblx0XHRcdFx0aiA9IGR1cGxpY2F0ZXMucHVzaCggaSApO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0XHR3aGlsZSAoIGotLSApIHtcclxuXHRcdFx0cmVzdWx0cy5zcGxpY2UoIGR1cGxpY2F0ZXNbIGogXSwgMSApO1xyXG5cdFx0fVxyXG5cdH1cclxuXHJcblx0Ly8gQ2xlYXIgaW5wdXQgYWZ0ZXIgc29ydGluZyB0byByZWxlYXNlIG9iamVjdHNcclxuXHQvLyBTZWUgaHR0cHM6Ly9naXRodWIuY29tL2pxdWVyeS9zaXp6bGUvcHVsbC8yMjVcclxuXHRzb3J0SW5wdXQgPSBudWxsO1xyXG5cclxuXHRyZXR1cm4gcmVzdWx0cztcclxufTtcclxuXHJcbi8qKlxyXG4gKiBVdGlsaXR5IGZ1bmN0aW9uIGZvciByZXRyaWV2aW5nIHRoZSB0ZXh0IHZhbHVlIG9mIGFuIGFycmF5IG9mIERPTSBub2Rlc1xyXG4gKiBAcGFyYW0ge0FycmF5fEVsZW1lbnR9IGVsZW1cclxuICovXHJcbmdldFRleHQgPSBTaXp6bGUuZ2V0VGV4dCA9IGZ1bmN0aW9uKCBlbGVtICkge1xyXG5cdHZhciBub2RlLFxyXG5cdFx0cmV0ID0gXCJcIixcclxuXHRcdGkgPSAwLFxyXG5cdFx0bm9kZVR5cGUgPSBlbGVtLm5vZGVUeXBlO1xyXG5cclxuXHRpZiAoICFub2RlVHlwZSApIHtcclxuXHRcdC8vIElmIG5vIG5vZGVUeXBlLCB0aGlzIGlzIGV4cGVjdGVkIHRvIGJlIGFuIGFycmF5XHJcblx0XHR3aGlsZSAoIChub2RlID0gZWxlbVtpKytdKSApIHtcclxuXHRcdFx0Ly8gRG8gbm90IHRyYXZlcnNlIGNvbW1lbnQgbm9kZXNcclxuXHRcdFx0cmV0ICs9IGdldFRleHQoIG5vZGUgKTtcclxuXHRcdH1cclxuXHR9IGVsc2UgaWYgKCBub2RlVHlwZSA9PT0gMSB8fCBub2RlVHlwZSA9PT0gOSB8fCBub2RlVHlwZSA9PT0gMTEgKSB7XHJcblx0XHQvLyBVc2UgdGV4dENvbnRlbnQgZm9yIGVsZW1lbnRzXHJcblx0XHQvLyBpbm5lclRleHQgdXNhZ2UgcmVtb3ZlZCBmb3IgY29uc2lzdGVuY3kgb2YgbmV3IGxpbmVzIChqUXVlcnkgIzExMTUzKVxyXG5cdFx0aWYgKCB0eXBlb2YgZWxlbS50ZXh0Q29udGVudCA9PT0gXCJzdHJpbmdcIiApIHtcclxuXHRcdFx0cmV0dXJuIGVsZW0udGV4dENvbnRlbnQ7XHJcblx0XHR9IGVsc2Uge1xyXG5cdFx0XHQvLyBUcmF2ZXJzZSBpdHMgY2hpbGRyZW5cclxuXHRcdFx0Zm9yICggZWxlbSA9IGVsZW0uZmlyc3RDaGlsZDsgZWxlbTsgZWxlbSA9IGVsZW0ubmV4dFNpYmxpbmcgKSB7XHJcblx0XHRcdFx0cmV0ICs9IGdldFRleHQoIGVsZW0gKTtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdH0gZWxzZSBpZiAoIG5vZGVUeXBlID09PSAzIHx8IG5vZGVUeXBlID09PSA0ICkge1xyXG5cdFx0cmV0dXJuIGVsZW0ubm9kZVZhbHVlO1xyXG5cdH1cclxuXHQvLyBEbyBub3QgaW5jbHVkZSBjb21tZW50IG9yIHByb2Nlc3NpbmcgaW5zdHJ1Y3Rpb24gbm9kZXNcclxuXHJcblx0cmV0dXJuIHJldDtcclxufTtcclxuXHJcbkV4cHIgPSBTaXp6bGUuc2VsZWN0b3JzID0ge1xyXG5cclxuXHQvLyBDYW4gYmUgYWRqdXN0ZWQgYnkgdGhlIHVzZXJcclxuXHRjYWNoZUxlbmd0aDogNTAsXHJcblxyXG5cdGNyZWF0ZVBzZXVkbzogbWFya0Z1bmN0aW9uLFxyXG5cclxuXHRtYXRjaDogbWF0Y2hFeHByLFxyXG5cclxuXHRhdHRySGFuZGxlOiB7fSxcclxuXHJcblx0ZmluZDoge30sXHJcblxyXG5cdHJlbGF0aXZlOiB7XHJcblx0XHRcIj5cIjogeyBkaXI6IFwicGFyZW50Tm9kZVwiLCBmaXJzdDogdHJ1ZSB9LFxyXG5cdFx0XCIgXCI6IHsgZGlyOiBcInBhcmVudE5vZGVcIiB9LFxyXG5cdFx0XCIrXCI6IHsgZGlyOiBcInByZXZpb3VzU2libGluZ1wiLCBmaXJzdDogdHJ1ZSB9LFxyXG5cdFx0XCJ+XCI6IHsgZGlyOiBcInByZXZpb3VzU2libGluZ1wiIH1cclxuXHR9LFxyXG5cclxuXHRwcmVGaWx0ZXI6IHtcclxuXHRcdFwiQVRUUlwiOiBmdW5jdGlvbiggbWF0Y2ggKSB7XHJcblx0XHRcdG1hdGNoWzFdID0gbWF0Y2hbMV0ucmVwbGFjZSggcnVuZXNjYXBlLCBmdW5lc2NhcGUgKTtcclxuXHJcblx0XHRcdC8vIE1vdmUgdGhlIGdpdmVuIHZhbHVlIHRvIG1hdGNoWzNdIHdoZXRoZXIgcXVvdGVkIG9yIHVucXVvdGVkXHJcblx0XHRcdG1hdGNoWzNdID0gKCBtYXRjaFszXSB8fCBtYXRjaFs0XSB8fCBtYXRjaFs1XSB8fCBcIlwiICkucmVwbGFjZSggcnVuZXNjYXBlLCBmdW5lc2NhcGUgKTtcclxuXHJcblx0XHRcdGlmICggbWF0Y2hbMl0gPT09IFwifj1cIiApIHtcclxuXHRcdFx0XHRtYXRjaFszXSA9IFwiIFwiICsgbWF0Y2hbM10gKyBcIiBcIjtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0cmV0dXJuIG1hdGNoLnNsaWNlKCAwLCA0ICk7XHJcblx0XHR9LFxyXG5cclxuXHRcdFwiQ0hJTERcIjogZnVuY3Rpb24oIG1hdGNoICkge1xyXG5cdFx0XHQvKiBtYXRjaGVzIGZyb20gbWF0Y2hFeHByW1wiQ0hJTERcIl1cclxuXHRcdFx0XHQxIHR5cGUgKG9ubHl8bnRofC4uLilcclxuXHRcdFx0XHQyIHdoYXQgKGNoaWxkfG9mLXR5cGUpXHJcblx0XHRcdFx0MyBhcmd1bWVudCAoZXZlbnxvZGR8XFxkKnxcXGQqbihbKy1dXFxkKyk/fC4uLilcclxuXHRcdFx0XHQ0IHhuLWNvbXBvbmVudCBvZiB4bit5IGFyZ3VtZW50IChbKy1dP1xcZCpufClcclxuXHRcdFx0XHQ1IHNpZ24gb2YgeG4tY29tcG9uZW50XHJcblx0XHRcdFx0NiB4IG9mIHhuLWNvbXBvbmVudFxyXG5cdFx0XHRcdDcgc2lnbiBvZiB5LWNvbXBvbmVudFxyXG5cdFx0XHRcdDggeSBvZiB5LWNvbXBvbmVudFxyXG5cdFx0XHQqL1xyXG5cdFx0XHRtYXRjaFsxXSA9IG1hdGNoWzFdLnRvTG93ZXJDYXNlKCk7XHJcblxyXG5cdFx0XHRpZiAoIG1hdGNoWzFdLnNsaWNlKCAwLCAzICkgPT09IFwibnRoXCIgKSB7XHJcblx0XHRcdFx0Ly8gbnRoLSogcmVxdWlyZXMgYXJndW1lbnRcclxuXHRcdFx0XHRpZiAoICFtYXRjaFszXSApIHtcclxuXHRcdFx0XHRcdFNpenpsZS5lcnJvciggbWF0Y2hbMF0gKTtcclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdC8vIG51bWVyaWMgeCBhbmQgeSBwYXJhbWV0ZXJzIGZvciBFeHByLmZpbHRlci5DSElMRFxyXG5cdFx0XHRcdC8vIHJlbWVtYmVyIHRoYXQgZmFsc2UvdHJ1ZSBjYXN0IHJlc3BlY3RpdmVseSB0byAwLzFcclxuXHRcdFx0XHRtYXRjaFs0XSA9ICsoIG1hdGNoWzRdID8gbWF0Y2hbNV0gKyAobWF0Y2hbNl0gfHwgMSkgOiAyICogKCBtYXRjaFszXSA9PT0gXCJldmVuXCIgfHwgbWF0Y2hbM10gPT09IFwib2RkXCIgKSApO1xyXG5cdFx0XHRcdG1hdGNoWzVdID0gKyggKCBtYXRjaFs3XSArIG1hdGNoWzhdICkgfHwgbWF0Y2hbM10gPT09IFwib2RkXCIgKTtcclxuXHJcblx0XHRcdC8vIG90aGVyIHR5cGVzIHByb2hpYml0IGFyZ3VtZW50c1xyXG5cdFx0XHR9IGVsc2UgaWYgKCBtYXRjaFszXSApIHtcclxuXHRcdFx0XHRTaXp6bGUuZXJyb3IoIG1hdGNoWzBdICk7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdHJldHVybiBtYXRjaDtcclxuXHRcdH0sXHJcblxyXG5cdFx0XCJQU0VVRE9cIjogZnVuY3Rpb24oIG1hdGNoICkge1xyXG5cdFx0XHR2YXIgZXhjZXNzLFxyXG5cdFx0XHRcdHVucXVvdGVkID0gIW1hdGNoWzZdICYmIG1hdGNoWzJdO1xyXG5cclxuXHRcdFx0aWYgKCBtYXRjaEV4cHJbXCJDSElMRFwiXS50ZXN0KCBtYXRjaFswXSApICkge1xyXG5cdFx0XHRcdHJldHVybiBudWxsO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHQvLyBBY2NlcHQgcXVvdGVkIGFyZ3VtZW50cyBhcy1pc1xyXG5cdFx0XHRpZiAoIG1hdGNoWzNdICkge1xyXG5cdFx0XHRcdG1hdGNoWzJdID0gbWF0Y2hbNF0gfHwgbWF0Y2hbNV0gfHwgXCJcIjtcclxuXHJcblx0XHRcdC8vIFN0cmlwIGV4Y2VzcyBjaGFyYWN0ZXJzIGZyb20gdW5xdW90ZWQgYXJndW1lbnRzXHJcblx0XHRcdH0gZWxzZSBpZiAoIHVucXVvdGVkICYmIHJwc2V1ZG8udGVzdCggdW5xdW90ZWQgKSAmJlxyXG5cdFx0XHRcdC8vIEdldCBleGNlc3MgZnJvbSB0b2tlbml6ZSAocmVjdXJzaXZlbHkpXHJcblx0XHRcdFx0KGV4Y2VzcyA9IHRva2VuaXplKCB1bnF1b3RlZCwgdHJ1ZSApKSAmJlxyXG5cdFx0XHRcdC8vIGFkdmFuY2UgdG8gdGhlIG5leHQgY2xvc2luZyBwYXJlbnRoZXNpc1xyXG5cdFx0XHRcdChleGNlc3MgPSB1bnF1b3RlZC5pbmRleE9mKCBcIilcIiwgdW5xdW90ZWQubGVuZ3RoIC0gZXhjZXNzICkgLSB1bnF1b3RlZC5sZW5ndGgpICkge1xyXG5cclxuXHRcdFx0XHQvLyBleGNlc3MgaXMgYSBuZWdhdGl2ZSBpbmRleFxyXG5cdFx0XHRcdG1hdGNoWzBdID0gbWF0Y2hbMF0uc2xpY2UoIDAsIGV4Y2VzcyApO1xyXG5cdFx0XHRcdG1hdGNoWzJdID0gdW5xdW90ZWQuc2xpY2UoIDAsIGV4Y2VzcyApO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHQvLyBSZXR1cm4gb25seSBjYXB0dXJlcyBuZWVkZWQgYnkgdGhlIHBzZXVkbyBmaWx0ZXIgbWV0aG9kICh0eXBlIGFuZCBhcmd1bWVudClcclxuXHRcdFx0cmV0dXJuIG1hdGNoLnNsaWNlKCAwLCAzICk7XHJcblx0XHR9XHJcblx0fSxcclxuXHJcblx0ZmlsdGVyOiB7XHJcblxyXG5cdFx0XCJUQUdcIjogZnVuY3Rpb24oIG5vZGVOYW1lU2VsZWN0b3IgKSB7XHJcblx0XHRcdHZhciBub2RlTmFtZSA9IG5vZGVOYW1lU2VsZWN0b3IucmVwbGFjZSggcnVuZXNjYXBlLCBmdW5lc2NhcGUgKS50b0xvd2VyQ2FzZSgpO1xyXG5cdFx0XHRyZXR1cm4gbm9kZU5hbWVTZWxlY3RvciA9PT0gXCIqXCIgP1xyXG5cdFx0XHRcdGZ1bmN0aW9uKCkgeyByZXR1cm4gdHJ1ZTsgfSA6XHJcblx0XHRcdFx0ZnVuY3Rpb24oIGVsZW0gKSB7XHJcblx0XHRcdFx0XHRyZXR1cm4gZWxlbS5ub2RlTmFtZSAmJiBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09IG5vZGVOYW1lO1xyXG5cdFx0XHRcdH07XHJcblx0XHR9LFxyXG5cclxuXHRcdFwiQ0xBU1NcIjogZnVuY3Rpb24oIGNsYXNzTmFtZSApIHtcclxuXHRcdFx0dmFyIHBhdHRlcm4gPSBjbGFzc0NhY2hlWyBjbGFzc05hbWUgKyBcIiBcIiBdO1xyXG5cclxuXHRcdFx0cmV0dXJuIHBhdHRlcm4gfHxcclxuXHRcdFx0XHQocGF0dGVybiA9IG5ldyBSZWdFeHAoIFwiKF58XCIgKyB3aGl0ZXNwYWNlICsgXCIpXCIgKyBjbGFzc05hbWUgKyBcIihcIiArIHdoaXRlc3BhY2UgKyBcInwkKVwiICkpICYmXHJcblx0XHRcdFx0Y2xhc3NDYWNoZSggY2xhc3NOYW1lLCBmdW5jdGlvbiggZWxlbSApIHtcclxuXHRcdFx0XHRcdHJldHVybiBwYXR0ZXJuLnRlc3QoIHR5cGVvZiBlbGVtLmNsYXNzTmFtZSA9PT0gXCJzdHJpbmdcIiAmJiBlbGVtLmNsYXNzTmFtZSB8fCB0eXBlb2YgZWxlbS5nZXRBdHRyaWJ1dGUgIT09IFwidW5kZWZpbmVkXCIgJiYgZWxlbS5nZXRBdHRyaWJ1dGUoXCJjbGFzc1wiKSB8fCBcIlwiICk7XHJcblx0XHRcdFx0fSk7XHJcblx0XHR9LFxyXG5cclxuXHRcdFwiQVRUUlwiOiBmdW5jdGlvbiggbmFtZSwgb3BlcmF0b3IsIGNoZWNrICkge1xyXG5cdFx0XHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XHJcblx0XHRcdFx0dmFyIHJlc3VsdCA9IFNpenpsZS5hdHRyKCBlbGVtLCBuYW1lICk7XHJcblxyXG5cdFx0XHRcdGlmICggcmVzdWx0ID09IG51bGwgKSB7XHJcblx0XHRcdFx0XHRyZXR1cm4gb3BlcmF0b3IgPT09IFwiIT1cIjtcclxuXHRcdFx0XHR9XHJcblx0XHRcdFx0aWYgKCAhb3BlcmF0b3IgKSB7XHJcblx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdHJlc3VsdCArPSBcIlwiO1xyXG5cclxuXHRcdFx0XHRyZXR1cm4gb3BlcmF0b3IgPT09IFwiPVwiID8gcmVzdWx0ID09PSBjaGVjayA6XHJcblx0XHRcdFx0XHRvcGVyYXRvciA9PT0gXCIhPVwiID8gcmVzdWx0ICE9PSBjaGVjayA6XHJcblx0XHRcdFx0XHRvcGVyYXRvciA9PT0gXCJePVwiID8gY2hlY2sgJiYgcmVzdWx0LmluZGV4T2YoIGNoZWNrICkgPT09IDAgOlxyXG5cdFx0XHRcdFx0b3BlcmF0b3IgPT09IFwiKj1cIiA/IGNoZWNrICYmIHJlc3VsdC5pbmRleE9mKCBjaGVjayApID4gLTEgOlxyXG5cdFx0XHRcdFx0b3BlcmF0b3IgPT09IFwiJD1cIiA/IGNoZWNrICYmIHJlc3VsdC5zbGljZSggLWNoZWNrLmxlbmd0aCApID09PSBjaGVjayA6XHJcblx0XHRcdFx0XHRvcGVyYXRvciA9PT0gXCJ+PVwiID8gKCBcIiBcIiArIHJlc3VsdC5yZXBsYWNlKCByd2hpdGVzcGFjZSwgXCIgXCIgKSArIFwiIFwiICkuaW5kZXhPZiggY2hlY2sgKSA+IC0xIDpcclxuXHRcdFx0XHRcdG9wZXJhdG9yID09PSBcInw9XCIgPyByZXN1bHQgPT09IGNoZWNrIHx8IHJlc3VsdC5zbGljZSggMCwgY2hlY2subGVuZ3RoICsgMSApID09PSBjaGVjayArIFwiLVwiIDpcclxuXHRcdFx0XHRcdGZhbHNlO1xyXG5cdFx0XHR9O1xyXG5cdFx0fSxcclxuXHJcblx0XHRcIkNISUxEXCI6IGZ1bmN0aW9uKCB0eXBlLCB3aGF0LCBhcmd1bWVudCwgZmlyc3QsIGxhc3QgKSB7XHJcblx0XHRcdHZhciBzaW1wbGUgPSB0eXBlLnNsaWNlKCAwLCAzICkgIT09IFwibnRoXCIsXHJcblx0XHRcdFx0Zm9yd2FyZCA9IHR5cGUuc2xpY2UoIC00ICkgIT09IFwibGFzdFwiLFxyXG5cdFx0XHRcdG9mVHlwZSA9IHdoYXQgPT09IFwib2YtdHlwZVwiO1xyXG5cclxuXHRcdFx0cmV0dXJuIGZpcnN0ID09PSAxICYmIGxhc3QgPT09IDAgP1xyXG5cclxuXHRcdFx0XHQvLyBTaG9ydGN1dCBmb3IgOm50aC0qKG4pXHJcblx0XHRcdFx0ZnVuY3Rpb24oIGVsZW0gKSB7XHJcblx0XHRcdFx0XHRyZXR1cm4gISFlbGVtLnBhcmVudE5vZGU7XHJcblx0XHRcdFx0fSA6XHJcblxyXG5cdFx0XHRcdGZ1bmN0aW9uKCBlbGVtLCBjb250ZXh0LCB4bWwgKSB7XHJcblx0XHRcdFx0XHR2YXIgY2FjaGUsIHVuaXF1ZUNhY2hlLCBvdXRlckNhY2hlLCBub2RlLCBub2RlSW5kZXgsIHN0YXJ0LFxyXG5cdFx0XHRcdFx0XHRkaXIgPSBzaW1wbGUgIT09IGZvcndhcmQgPyBcIm5leHRTaWJsaW5nXCIgOiBcInByZXZpb3VzU2libGluZ1wiLFxyXG5cdFx0XHRcdFx0XHRwYXJlbnQgPSBlbGVtLnBhcmVudE5vZGUsXHJcblx0XHRcdFx0XHRcdG5hbWUgPSBvZlR5cGUgJiYgZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpLFxyXG5cdFx0XHRcdFx0XHR1c2VDYWNoZSA9ICF4bWwgJiYgIW9mVHlwZSxcclxuXHRcdFx0XHRcdFx0ZGlmZiA9IGZhbHNlO1xyXG5cclxuXHRcdFx0XHRcdGlmICggcGFyZW50ICkge1xyXG5cclxuXHRcdFx0XHRcdFx0Ly8gOihmaXJzdHxsYXN0fG9ubHkpLShjaGlsZHxvZi10eXBlKVxyXG5cdFx0XHRcdFx0XHRpZiAoIHNpbXBsZSApIHtcclxuXHRcdFx0XHRcdFx0XHR3aGlsZSAoIGRpciApIHtcclxuXHRcdFx0XHRcdFx0XHRcdG5vZGUgPSBlbGVtO1xyXG5cdFx0XHRcdFx0XHRcdFx0d2hpbGUgKCAobm9kZSA9IG5vZGVbIGRpciBdKSApIHtcclxuXHRcdFx0XHRcdFx0XHRcdFx0aWYgKCBvZlR5cGUgP1xyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdG5vZGUubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gbmFtZSA6XHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0bm9kZS5ub2RlVHlwZSA9PT0gMSApIHtcclxuXHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xyXG5cdFx0XHRcdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdFx0XHQvLyBSZXZlcnNlIGRpcmVjdGlvbiBmb3IgOm9ubHktKiAoaWYgd2UgaGF2ZW4ndCB5ZXQgZG9uZSBzbylcclxuXHRcdFx0XHRcdFx0XHRcdHN0YXJ0ID0gZGlyID0gdHlwZSA9PT0gXCJvbmx5XCIgJiYgIXN0YXJ0ICYmIFwibmV4dFNpYmxpbmdcIjtcclxuXHRcdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdFx0cmV0dXJuIHRydWU7XHJcblx0XHRcdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0XHRcdHN0YXJ0ID0gWyBmb3J3YXJkID8gcGFyZW50LmZpcnN0Q2hpbGQgOiBwYXJlbnQubGFzdENoaWxkIF07XHJcblxyXG5cdFx0XHRcdFx0XHQvLyBub24teG1sIDpudGgtY2hpbGQoLi4uKSBzdG9yZXMgY2FjaGUgZGF0YSBvbiBgcGFyZW50YFxyXG5cdFx0XHRcdFx0XHRpZiAoIGZvcndhcmQgJiYgdXNlQ2FjaGUgKSB7XHJcblxyXG5cdFx0XHRcdFx0XHRcdC8vIFNlZWsgYGVsZW1gIGZyb20gYSBwcmV2aW91c2x5LWNhY2hlZCBpbmRleFxyXG5cclxuXHRcdFx0XHRcdFx0XHQvLyAuLi5pbiBhIGd6aXAtZnJpZW5kbHkgd2F5XHJcblx0XHRcdFx0XHRcdFx0bm9kZSA9IHBhcmVudDtcclxuXHRcdFx0XHRcdFx0XHRvdXRlckNhY2hlID0gbm9kZVsgZXhwYW5kbyBdIHx8IChub2RlWyBleHBhbmRvIF0gPSB7fSk7XHJcblxyXG5cdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw5IG9ubHlcclxuXHRcdFx0XHRcdFx0XHQvLyBEZWZlbmQgYWdhaW5zdCBjbG9uZWQgYXR0cm9wZXJ0aWVzIChqUXVlcnkgZ2gtMTcwOSlcclxuXHRcdFx0XHRcdFx0XHR1bmlxdWVDYWNoZSA9IG91dGVyQ2FjaGVbIG5vZGUudW5pcXVlSUQgXSB8fFxyXG5cdFx0XHRcdFx0XHRcdFx0KG91dGVyQ2FjaGVbIG5vZGUudW5pcXVlSUQgXSA9IHt9KTtcclxuXHJcblx0XHRcdFx0XHRcdFx0Y2FjaGUgPSB1bmlxdWVDYWNoZVsgdHlwZSBdIHx8IFtdO1xyXG5cdFx0XHRcdFx0XHRcdG5vZGVJbmRleCA9IGNhY2hlWyAwIF0gPT09IGRpcnJ1bnMgJiYgY2FjaGVbIDEgXTtcclxuXHRcdFx0XHRcdFx0XHRkaWZmID0gbm9kZUluZGV4ICYmIGNhY2hlWyAyIF07XHJcblx0XHRcdFx0XHRcdFx0bm9kZSA9IG5vZGVJbmRleCAmJiBwYXJlbnQuY2hpbGROb2Rlc1sgbm9kZUluZGV4IF07XHJcblxyXG5cdFx0XHRcdFx0XHRcdHdoaWxlICggKG5vZGUgPSArK25vZGVJbmRleCAmJiBub2RlICYmIG5vZGVbIGRpciBdIHx8XHJcblxyXG5cdFx0XHRcdFx0XHRcdFx0Ly8gRmFsbGJhY2sgdG8gc2Vla2luZyBgZWxlbWAgZnJvbSB0aGUgc3RhcnRcclxuXHRcdFx0XHRcdFx0XHRcdChkaWZmID0gbm9kZUluZGV4ID0gMCkgfHwgc3RhcnQucG9wKCkpICkge1xyXG5cclxuXHRcdFx0XHRcdFx0XHRcdC8vIFdoZW4gZm91bmQsIGNhY2hlIGluZGV4ZXMgb24gYHBhcmVudGAgYW5kIGJyZWFrXHJcblx0XHRcdFx0XHRcdFx0XHRpZiAoIG5vZGUubm9kZVR5cGUgPT09IDEgJiYgKytkaWZmICYmIG5vZGUgPT09IGVsZW0gKSB7XHJcblx0XHRcdFx0XHRcdFx0XHRcdHVuaXF1ZUNhY2hlWyB0eXBlIF0gPSBbIGRpcnJ1bnMsIG5vZGVJbmRleCwgZGlmZiBdO1xyXG5cdFx0XHRcdFx0XHRcdFx0XHRicmVhaztcclxuXHRcdFx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdFx0XHRcdC8vIFVzZSBwcmV2aW91c2x5LWNhY2hlZCBlbGVtZW50IGluZGV4IGlmIGF2YWlsYWJsZVxyXG5cdFx0XHRcdFx0XHRcdGlmICggdXNlQ2FjaGUgKSB7XHJcblx0XHRcdFx0XHRcdFx0XHQvLyAuLi5pbiBhIGd6aXAtZnJpZW5kbHkgd2F5XHJcblx0XHRcdFx0XHRcdFx0XHRub2RlID0gZWxlbTtcclxuXHRcdFx0XHRcdFx0XHRcdG91dGVyQ2FjaGUgPSBub2RlWyBleHBhbmRvIF0gfHwgKG5vZGVbIGV4cGFuZG8gXSA9IHt9KTtcclxuXHJcblx0XHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8OSBvbmx5XHJcblx0XHRcdFx0XHRcdFx0XHQvLyBEZWZlbmQgYWdhaW5zdCBjbG9uZWQgYXR0cm9wZXJ0aWVzIChqUXVlcnkgZ2gtMTcwOSlcclxuXHRcdFx0XHRcdFx0XHRcdHVuaXF1ZUNhY2hlID0gb3V0ZXJDYWNoZVsgbm9kZS51bmlxdWVJRCBdIHx8XHJcblx0XHRcdFx0XHRcdFx0XHRcdChvdXRlckNhY2hlWyBub2RlLnVuaXF1ZUlEIF0gPSB7fSk7XHJcblxyXG5cdFx0XHRcdFx0XHRcdFx0Y2FjaGUgPSB1bmlxdWVDYWNoZVsgdHlwZSBdIHx8IFtdO1xyXG5cdFx0XHRcdFx0XHRcdFx0bm9kZUluZGV4ID0gY2FjaGVbIDAgXSA9PT0gZGlycnVucyAmJiBjYWNoZVsgMSBdO1xyXG5cdFx0XHRcdFx0XHRcdFx0ZGlmZiA9IG5vZGVJbmRleDtcclxuXHRcdFx0XHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdFx0XHRcdC8vIHhtbCA6bnRoLWNoaWxkKC4uLilcclxuXHRcdFx0XHRcdFx0XHQvLyBvciA6bnRoLWxhc3QtY2hpbGQoLi4uKSBvciA6bnRoKC1sYXN0KT8tb2YtdHlwZSguLi4pXHJcblx0XHRcdFx0XHRcdFx0aWYgKCBkaWZmID09PSBmYWxzZSApIHtcclxuXHRcdFx0XHRcdFx0XHRcdC8vIFVzZSB0aGUgc2FtZSBsb29wIGFzIGFib3ZlIHRvIHNlZWsgYGVsZW1gIGZyb20gdGhlIHN0YXJ0XHJcblx0XHRcdFx0XHRcdFx0XHR3aGlsZSAoIChub2RlID0gKytub2RlSW5kZXggJiYgbm9kZSAmJiBub2RlWyBkaXIgXSB8fFxyXG5cdFx0XHRcdFx0XHRcdFx0XHQoZGlmZiA9IG5vZGVJbmRleCA9IDApIHx8IHN0YXJ0LnBvcCgpKSApIHtcclxuXHJcblx0XHRcdFx0XHRcdFx0XHRcdGlmICggKCBvZlR5cGUgP1xyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdG5vZGUubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gbmFtZSA6XHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0bm9kZS5ub2RlVHlwZSA9PT0gMSApICYmXHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0KytkaWZmICkge1xyXG5cclxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBDYWNoZSB0aGUgaW5kZXggb2YgZWFjaCBlbmNvdW50ZXJlZCBlbGVtZW50XHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0aWYgKCB1c2VDYWNoZSApIHtcclxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdG91dGVyQ2FjaGUgPSBub2RlWyBleHBhbmRvIF0gfHwgKG5vZGVbIGV4cGFuZG8gXSA9IHt9KTtcclxuXHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8OSBvbmx5XHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBEZWZlbmQgYWdhaW5zdCBjbG9uZWQgYXR0cm9wZXJ0aWVzIChqUXVlcnkgZ2gtMTcwOSlcclxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdHVuaXF1ZUNhY2hlID0gb3V0ZXJDYWNoZVsgbm9kZS51bmlxdWVJRCBdIHx8XHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdChvdXRlckNhY2hlWyBub2RlLnVuaXF1ZUlEIF0gPSB7fSk7XHJcblxyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0dW5pcXVlQ2FjaGVbIHR5cGUgXSA9IFsgZGlycnVucywgZGlmZiBdO1xyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0aWYgKCBub2RlID09PSBlbGVtICkge1xyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0YnJlYWs7XHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdFx0XHQvLyBJbmNvcnBvcmF0ZSB0aGUgb2Zmc2V0LCB0aGVuIGNoZWNrIGFnYWluc3QgY3ljbGUgc2l6ZVxyXG5cdFx0XHRcdFx0XHRkaWZmIC09IGxhc3Q7XHJcblx0XHRcdFx0XHRcdHJldHVybiBkaWZmID09PSBmaXJzdCB8fCAoIGRpZmYgJSBmaXJzdCA9PT0gMCAmJiBkaWZmIC8gZmlyc3QgPj0gMCApO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH07XHJcblx0XHR9LFxyXG5cclxuXHRcdFwiUFNFVURPXCI6IGZ1bmN0aW9uKCBwc2V1ZG8sIGFyZ3VtZW50ICkge1xyXG5cdFx0XHQvLyBwc2V1ZG8tY2xhc3MgbmFtZXMgYXJlIGNhc2UtaW5zZW5zaXRpdmVcclxuXHRcdFx0Ly8gaHR0cDovL3d3dy53My5vcmcvVFIvc2VsZWN0b3JzLyNwc2V1ZG8tY2xhc3Nlc1xyXG5cdFx0XHQvLyBQcmlvcml0aXplIGJ5IGNhc2Ugc2Vuc2l0aXZpdHkgaW4gY2FzZSBjdXN0b20gcHNldWRvcyBhcmUgYWRkZWQgd2l0aCB1cHBlcmNhc2UgbGV0dGVyc1xyXG5cdFx0XHQvLyBSZW1lbWJlciB0aGF0IHNldEZpbHRlcnMgaW5oZXJpdHMgZnJvbSBwc2V1ZG9zXHJcblx0XHRcdHZhciBhcmdzLFxyXG5cdFx0XHRcdGZuID0gRXhwci5wc2V1ZG9zWyBwc2V1ZG8gXSB8fCBFeHByLnNldEZpbHRlcnNbIHBzZXVkby50b0xvd2VyQ2FzZSgpIF0gfHxcclxuXHRcdFx0XHRcdFNpenpsZS5lcnJvciggXCJ1bnN1cHBvcnRlZCBwc2V1ZG86IFwiICsgcHNldWRvICk7XHJcblxyXG5cdFx0XHQvLyBUaGUgdXNlciBtYXkgdXNlIGNyZWF0ZVBzZXVkbyB0byBpbmRpY2F0ZSB0aGF0XHJcblx0XHRcdC8vIGFyZ3VtZW50cyBhcmUgbmVlZGVkIHRvIGNyZWF0ZSB0aGUgZmlsdGVyIGZ1bmN0aW9uXHJcblx0XHRcdC8vIGp1c3QgYXMgU2l6emxlIGRvZXNcclxuXHRcdFx0aWYgKCBmblsgZXhwYW5kbyBdICkge1xyXG5cdFx0XHRcdHJldHVybiBmbiggYXJndW1lbnQgKTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0Ly8gQnV0IG1haW50YWluIHN1cHBvcnQgZm9yIG9sZCBzaWduYXR1cmVzXHJcblx0XHRcdGlmICggZm4ubGVuZ3RoID4gMSApIHtcclxuXHRcdFx0XHRhcmdzID0gWyBwc2V1ZG8sIHBzZXVkbywgXCJcIiwgYXJndW1lbnQgXTtcclxuXHRcdFx0XHRyZXR1cm4gRXhwci5zZXRGaWx0ZXJzLmhhc093blByb3BlcnR5KCBwc2V1ZG8udG9Mb3dlckNhc2UoKSApID9cclxuXHRcdFx0XHRcdG1hcmtGdW5jdGlvbihmdW5jdGlvbiggc2VlZCwgbWF0Y2hlcyApIHtcclxuXHRcdFx0XHRcdFx0dmFyIGlkeCxcclxuXHRcdFx0XHRcdFx0XHRtYXRjaGVkID0gZm4oIHNlZWQsIGFyZ3VtZW50ICksXHJcblx0XHRcdFx0XHRcdFx0aSA9IG1hdGNoZWQubGVuZ3RoO1xyXG5cdFx0XHRcdFx0XHR3aGlsZSAoIGktLSApIHtcclxuXHRcdFx0XHRcdFx0XHRpZHggPSBpbmRleE9mKCBzZWVkLCBtYXRjaGVkW2ldICk7XHJcblx0XHRcdFx0XHRcdFx0c2VlZFsgaWR4IF0gPSAhKCBtYXRjaGVzWyBpZHggXSA9IG1hdGNoZWRbaV0gKTtcclxuXHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0fSkgOlxyXG5cdFx0XHRcdFx0ZnVuY3Rpb24oIGVsZW0gKSB7XHJcblx0XHRcdFx0XHRcdHJldHVybiBmbiggZWxlbSwgMCwgYXJncyApO1xyXG5cdFx0XHRcdFx0fTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0cmV0dXJuIGZuO1xyXG5cdFx0fVxyXG5cdH0sXHJcblxyXG5cdHBzZXVkb3M6IHtcclxuXHRcdC8vIFBvdGVudGlhbGx5IGNvbXBsZXggcHNldWRvc1xyXG5cdFx0XCJub3RcIjogbWFya0Z1bmN0aW9uKGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcclxuXHRcdFx0Ly8gVHJpbSB0aGUgc2VsZWN0b3IgcGFzc2VkIHRvIGNvbXBpbGVcclxuXHRcdFx0Ly8gdG8gYXZvaWQgdHJlYXRpbmcgbGVhZGluZyBhbmQgdHJhaWxpbmdcclxuXHRcdFx0Ly8gc3BhY2VzIGFzIGNvbWJpbmF0b3JzXHJcblx0XHRcdHZhciBpbnB1dCA9IFtdLFxyXG5cdFx0XHRcdHJlc3VsdHMgPSBbXSxcclxuXHRcdFx0XHRtYXRjaGVyID0gY29tcGlsZSggc2VsZWN0b3IucmVwbGFjZSggcnRyaW0sIFwiJDFcIiApICk7XHJcblxyXG5cdFx0XHRyZXR1cm4gbWF0Y2hlclsgZXhwYW5kbyBdID9cclxuXHRcdFx0XHRtYXJrRnVuY3Rpb24oZnVuY3Rpb24oIHNlZWQsIG1hdGNoZXMsIGNvbnRleHQsIHhtbCApIHtcclxuXHRcdFx0XHRcdHZhciBlbGVtLFxyXG5cdFx0XHRcdFx0XHR1bm1hdGNoZWQgPSBtYXRjaGVyKCBzZWVkLCBudWxsLCB4bWwsIFtdICksXHJcblx0XHRcdFx0XHRcdGkgPSBzZWVkLmxlbmd0aDtcclxuXHJcblx0XHRcdFx0XHQvLyBNYXRjaCBlbGVtZW50cyB1bm1hdGNoZWQgYnkgYG1hdGNoZXJgXHJcblx0XHRcdFx0XHR3aGlsZSAoIGktLSApIHtcclxuXHRcdFx0XHRcdFx0aWYgKCAoZWxlbSA9IHVubWF0Y2hlZFtpXSkgKSB7XHJcblx0XHRcdFx0XHRcdFx0c2VlZFtpXSA9ICEobWF0Y2hlc1tpXSA9IGVsZW0pO1xyXG5cdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fSkgOlxyXG5cdFx0XHRcdGZ1bmN0aW9uKCBlbGVtLCBjb250ZXh0LCB4bWwgKSB7XHJcblx0XHRcdFx0XHRpbnB1dFswXSA9IGVsZW07XHJcblx0XHRcdFx0XHRtYXRjaGVyKCBpbnB1dCwgbnVsbCwgeG1sLCByZXN1bHRzICk7XHJcblx0XHRcdFx0XHQvLyBEb24ndCBrZWVwIHRoZSBlbGVtZW50IChpc3N1ZSAjMjk5KVxyXG5cdFx0XHRcdFx0aW5wdXRbMF0gPSBudWxsO1xyXG5cdFx0XHRcdFx0cmV0dXJuICFyZXN1bHRzLnBvcCgpO1xyXG5cdFx0XHRcdH07XHJcblx0XHR9KSxcclxuXHJcblx0XHRcImhhc1wiOiBtYXJrRnVuY3Rpb24oZnVuY3Rpb24oIHNlbGVjdG9yICkge1xyXG5cdFx0XHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XHJcblx0XHRcdFx0cmV0dXJuIFNpenpsZSggc2VsZWN0b3IsIGVsZW0gKS5sZW5ndGggPiAwO1xyXG5cdFx0XHR9O1xyXG5cdFx0fSksXHJcblxyXG5cdFx0XCJjb250YWluc1wiOiBtYXJrRnVuY3Rpb24oZnVuY3Rpb24oIHRleHQgKSB7XHJcblx0XHRcdHRleHQgPSB0ZXh0LnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICk7XHJcblx0XHRcdHJldHVybiBmdW5jdGlvbiggZWxlbSApIHtcclxuXHRcdFx0XHRyZXR1cm4gKCBlbGVtLnRleHRDb250ZW50IHx8IGVsZW0uaW5uZXJUZXh0IHx8IGdldFRleHQoIGVsZW0gKSApLmluZGV4T2YoIHRleHQgKSA+IC0xO1xyXG5cdFx0XHR9O1xyXG5cdFx0fSksXHJcblxyXG5cdFx0Ly8gXCJXaGV0aGVyIGFuIGVsZW1lbnQgaXMgcmVwcmVzZW50ZWQgYnkgYSA6bGFuZygpIHNlbGVjdG9yXHJcblx0XHQvLyBpcyBiYXNlZCBzb2xlbHkgb24gdGhlIGVsZW1lbnQncyBsYW5ndWFnZSB2YWx1ZVxyXG5cdFx0Ly8gYmVpbmcgZXF1YWwgdG8gdGhlIGlkZW50aWZpZXIgQyxcclxuXHRcdC8vIG9yIGJlZ2lubmluZyB3aXRoIHRoZSBpZGVudGlmaWVyIEMgaW1tZWRpYXRlbHkgZm9sbG93ZWQgYnkgXCItXCIuXHJcblx0XHQvLyBUaGUgbWF0Y2hpbmcgb2YgQyBhZ2FpbnN0IHRoZSBlbGVtZW50J3MgbGFuZ3VhZ2UgdmFsdWUgaXMgcGVyZm9ybWVkIGNhc2UtaW5zZW5zaXRpdmVseS5cclxuXHRcdC8vIFRoZSBpZGVudGlmaWVyIEMgZG9lcyBub3QgaGF2ZSB0byBiZSBhIHZhbGlkIGxhbmd1YWdlIG5hbWUuXCJcclxuXHRcdC8vIGh0dHA6Ly93d3cudzMub3JnL1RSL3NlbGVjdG9ycy8jbGFuZy1wc2V1ZG9cclxuXHRcdFwibGFuZ1wiOiBtYXJrRnVuY3Rpb24oIGZ1bmN0aW9uKCBsYW5nICkge1xyXG5cdFx0XHQvLyBsYW5nIHZhbHVlIG11c3QgYmUgYSB2YWxpZCBpZGVudGlmaWVyXHJcblx0XHRcdGlmICggIXJpZGVudGlmaWVyLnRlc3QobGFuZyB8fCBcIlwiKSApIHtcclxuXHRcdFx0XHRTaXp6bGUuZXJyb3IoIFwidW5zdXBwb3J0ZWQgbGFuZzogXCIgKyBsYW5nICk7XHJcblx0XHRcdH1cclxuXHRcdFx0bGFuZyA9IGxhbmcucmVwbGFjZSggcnVuZXNjYXBlLCBmdW5lc2NhcGUgKS50b0xvd2VyQ2FzZSgpO1xyXG5cdFx0XHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XHJcblx0XHRcdFx0dmFyIGVsZW1MYW5nO1xyXG5cdFx0XHRcdGRvIHtcclxuXHRcdFx0XHRcdGlmICggKGVsZW1MYW5nID0gZG9jdW1lbnRJc0hUTUwgP1xyXG5cdFx0XHRcdFx0XHRlbGVtLmxhbmcgOlxyXG5cdFx0XHRcdFx0XHRlbGVtLmdldEF0dHJpYnV0ZShcInhtbDpsYW5nXCIpIHx8IGVsZW0uZ2V0QXR0cmlidXRlKFwibGFuZ1wiKSkgKSB7XHJcblxyXG5cdFx0XHRcdFx0XHRlbGVtTGFuZyA9IGVsZW1MYW5nLnRvTG93ZXJDYXNlKCk7XHJcblx0XHRcdFx0XHRcdHJldHVybiBlbGVtTGFuZyA9PT0gbGFuZyB8fCBlbGVtTGFuZy5pbmRleE9mKCBsYW5nICsgXCItXCIgKSA9PT0gMDtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9IHdoaWxlICggKGVsZW0gPSBlbGVtLnBhcmVudE5vZGUpICYmIGVsZW0ubm9kZVR5cGUgPT09IDEgKTtcclxuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XHJcblx0XHRcdH07XHJcblx0XHR9KSxcclxuXHJcblx0XHQvLyBNaXNjZWxsYW5lb3VzXHJcblx0XHRcInRhcmdldFwiOiBmdW5jdGlvbiggZWxlbSApIHtcclxuXHRcdFx0dmFyIGhhc2ggPSB3aW5kb3cubG9jYXRpb24gJiYgd2luZG93LmxvY2F0aW9uLmhhc2g7XHJcblx0XHRcdHJldHVybiBoYXNoICYmIGhhc2guc2xpY2UoIDEgKSA9PT0gZWxlbS5pZDtcclxuXHRcdH0sXHJcblxyXG5cdFx0XCJyb290XCI6IGZ1bmN0aW9uKCBlbGVtICkge1xyXG5cdFx0XHRyZXR1cm4gZWxlbSA9PT0gZG9jRWxlbTtcclxuXHRcdH0sXHJcblxyXG5cdFx0XCJmb2N1c1wiOiBmdW5jdGlvbiggZWxlbSApIHtcclxuXHRcdFx0cmV0dXJuIGVsZW0gPT09IGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQgJiYgKCFkb2N1bWVudC5oYXNGb2N1cyB8fCBkb2N1bWVudC5oYXNGb2N1cygpKSAmJiAhIShlbGVtLnR5cGUgfHwgZWxlbS5ocmVmIHx8IH5lbGVtLnRhYkluZGV4KTtcclxuXHRcdH0sXHJcblxyXG5cdFx0Ly8gQm9vbGVhbiBwcm9wZXJ0aWVzXHJcblx0XHRcImVuYWJsZWRcIjogZnVuY3Rpb24oIGVsZW0gKSB7XHJcblx0XHRcdHJldHVybiBlbGVtLmRpc2FibGVkID09PSBmYWxzZTtcclxuXHRcdH0sXHJcblxyXG5cdFx0XCJkaXNhYmxlZFwiOiBmdW5jdGlvbiggZWxlbSApIHtcclxuXHRcdFx0cmV0dXJuIGVsZW0uZGlzYWJsZWQgPT09IHRydWU7XHJcblx0XHR9LFxyXG5cclxuXHRcdFwiY2hlY2tlZFwiOiBmdW5jdGlvbiggZWxlbSApIHtcclxuXHRcdFx0Ly8gSW4gQ1NTMywgOmNoZWNrZWQgc2hvdWxkIHJldHVybiBib3RoIGNoZWNrZWQgYW5kIHNlbGVjdGVkIGVsZW1lbnRzXHJcblx0XHRcdC8vIGh0dHA6Ly93d3cudzMub3JnL1RSLzIwMTEvUkVDLWNzczMtc2VsZWN0b3JzLTIwMTEwOTI5LyNjaGVja2VkXHJcblx0XHRcdHZhciBub2RlTmFtZSA9IGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtcclxuXHRcdFx0cmV0dXJuIChub2RlTmFtZSA9PT0gXCJpbnB1dFwiICYmICEhZWxlbS5jaGVja2VkKSB8fCAobm9kZU5hbWUgPT09IFwib3B0aW9uXCIgJiYgISFlbGVtLnNlbGVjdGVkKTtcclxuXHRcdH0sXHJcblxyXG5cdFx0XCJzZWxlY3RlZFwiOiBmdW5jdGlvbiggZWxlbSApIHtcclxuXHRcdFx0Ly8gQWNjZXNzaW5nIHRoaXMgcHJvcGVydHkgbWFrZXMgc2VsZWN0ZWQtYnktZGVmYXVsdFxyXG5cdFx0XHQvLyBvcHRpb25zIGluIFNhZmFyaSB3b3JrIHByb3Blcmx5XHJcblx0XHRcdGlmICggZWxlbS5wYXJlbnROb2RlICkge1xyXG5cdFx0XHRcdGVsZW0ucGFyZW50Tm9kZS5zZWxlY3RlZEluZGV4O1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRyZXR1cm4gZWxlbS5zZWxlY3RlZCA9PT0gdHJ1ZTtcclxuXHRcdH0sXHJcblxyXG5cdFx0Ly8gQ29udGVudHNcclxuXHRcdFwiZW1wdHlcIjogZnVuY3Rpb24oIGVsZW0gKSB7XHJcblx0XHRcdC8vIGh0dHA6Ly93d3cudzMub3JnL1RSL3NlbGVjdG9ycy8jZW1wdHktcHNldWRvXHJcblx0XHRcdC8vIDplbXB0eSBpcyBuZWdhdGVkIGJ5IGVsZW1lbnQgKDEpIG9yIGNvbnRlbnQgbm9kZXMgKHRleHQ6IDM7IGNkYXRhOiA0OyBlbnRpdHkgcmVmOiA1KSxcclxuXHRcdFx0Ly8gICBidXQgbm90IGJ5IG90aGVycyAoY29tbWVudDogODsgcHJvY2Vzc2luZyBpbnN0cnVjdGlvbjogNzsgZXRjLilcclxuXHRcdFx0Ly8gbm9kZVR5cGUgPCA2IHdvcmtzIGJlY2F1c2UgYXR0cmlidXRlcyAoMikgZG8gbm90IGFwcGVhciBhcyBjaGlsZHJlblxyXG5cdFx0XHRmb3IgKCBlbGVtID0gZWxlbS5maXJzdENoaWxkOyBlbGVtOyBlbGVtID0gZWxlbS5uZXh0U2libGluZyApIHtcclxuXHRcdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPCA2ICkge1xyXG5cdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0XHRyZXR1cm4gdHJ1ZTtcclxuXHRcdH0sXHJcblxyXG5cdFx0XCJwYXJlbnRcIjogZnVuY3Rpb24oIGVsZW0gKSB7XHJcblx0XHRcdHJldHVybiAhRXhwci5wc2V1ZG9zW1wiZW1wdHlcIl0oIGVsZW0gKTtcclxuXHRcdH0sXHJcblxyXG5cdFx0Ly8gRWxlbWVudC9pbnB1dCB0eXBlc1xyXG5cdFx0XCJoZWFkZXJcIjogZnVuY3Rpb24oIGVsZW0gKSB7XHJcblx0XHRcdHJldHVybiByaGVhZGVyLnRlc3QoIGVsZW0ubm9kZU5hbWUgKTtcclxuXHRcdH0sXHJcblxyXG5cdFx0XCJpbnB1dFwiOiBmdW5jdGlvbiggZWxlbSApIHtcclxuXHRcdFx0cmV0dXJuIHJpbnB1dHMudGVzdCggZWxlbS5ub2RlTmFtZSApO1xyXG5cdFx0fSxcclxuXHJcblx0XHRcImJ1dHRvblwiOiBmdW5jdGlvbiggZWxlbSApIHtcclxuXHRcdFx0dmFyIG5hbWUgPSBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7XHJcblx0XHRcdHJldHVybiBuYW1lID09PSBcImlucHV0XCIgJiYgZWxlbS50eXBlID09PSBcImJ1dHRvblwiIHx8IG5hbWUgPT09IFwiYnV0dG9uXCI7XHJcblx0XHR9LFxyXG5cclxuXHRcdFwidGV4dFwiOiBmdW5jdGlvbiggZWxlbSApIHtcclxuXHRcdFx0dmFyIGF0dHI7XHJcblx0XHRcdHJldHVybiBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09IFwiaW5wdXRcIiAmJlxyXG5cdFx0XHRcdGVsZW0udHlwZSA9PT0gXCJ0ZXh0XCIgJiZcclxuXHJcblx0XHRcdFx0Ly8gU3VwcG9ydDogSUU8OFxyXG5cdFx0XHRcdC8vIE5ldyBIVE1MNSBhdHRyaWJ1dGUgdmFsdWVzIChlLmcuLCBcInNlYXJjaFwiKSBhcHBlYXIgd2l0aCBlbGVtLnR5cGUgPT09IFwidGV4dFwiXHJcblx0XHRcdFx0KCAoYXR0ciA9IGVsZW0uZ2V0QXR0cmlidXRlKFwidHlwZVwiKSkgPT0gbnVsbCB8fCBhdHRyLnRvTG93ZXJDYXNlKCkgPT09IFwidGV4dFwiICk7XHJcblx0XHR9LFxyXG5cclxuXHRcdC8vIFBvc2l0aW9uLWluLWNvbGxlY3Rpb25cclxuXHRcdFwiZmlyc3RcIjogY3JlYXRlUG9zaXRpb25hbFBzZXVkbyhmdW5jdGlvbigpIHtcclxuXHRcdFx0cmV0dXJuIFsgMCBdO1xyXG5cdFx0fSksXHJcblxyXG5cdFx0XCJsYXN0XCI6IGNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oZnVuY3Rpb24oIG1hdGNoSW5kZXhlcywgbGVuZ3RoICkge1xyXG5cdFx0XHRyZXR1cm4gWyBsZW5ndGggLSAxIF07XHJcblx0XHR9KSxcclxuXHJcblx0XHRcImVxXCI6IGNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oZnVuY3Rpb24oIG1hdGNoSW5kZXhlcywgbGVuZ3RoLCBhcmd1bWVudCApIHtcclxuXHRcdFx0cmV0dXJuIFsgYXJndW1lbnQgPCAwID8gYXJndW1lbnQgKyBsZW5ndGggOiBhcmd1bWVudCBdO1xyXG5cdFx0fSksXHJcblxyXG5cdFx0XCJldmVuXCI6IGNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oZnVuY3Rpb24oIG1hdGNoSW5kZXhlcywgbGVuZ3RoICkge1xyXG5cdFx0XHR2YXIgaSA9IDA7XHJcblx0XHRcdGZvciAoIDsgaSA8IGxlbmd0aDsgaSArPSAyICkge1xyXG5cdFx0XHRcdG1hdGNoSW5kZXhlcy5wdXNoKCBpICk7XHJcblx0XHRcdH1cclxuXHRcdFx0cmV0dXJuIG1hdGNoSW5kZXhlcztcclxuXHRcdH0pLFxyXG5cclxuXHRcdFwib2RkXCI6IGNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oZnVuY3Rpb24oIG1hdGNoSW5kZXhlcywgbGVuZ3RoICkge1xyXG5cdFx0XHR2YXIgaSA9IDE7XHJcblx0XHRcdGZvciAoIDsgaSA8IGxlbmd0aDsgaSArPSAyICkge1xyXG5cdFx0XHRcdG1hdGNoSW5kZXhlcy5wdXNoKCBpICk7XHJcblx0XHRcdH1cclxuXHRcdFx0cmV0dXJuIG1hdGNoSW5kZXhlcztcclxuXHRcdH0pLFxyXG5cclxuXHRcdFwibHRcIjogY3JlYXRlUG9zaXRpb25hbFBzZXVkbyhmdW5jdGlvbiggbWF0Y2hJbmRleGVzLCBsZW5ndGgsIGFyZ3VtZW50ICkge1xyXG5cdFx0XHR2YXIgaSA9IGFyZ3VtZW50IDwgMCA/IGFyZ3VtZW50ICsgbGVuZ3RoIDogYXJndW1lbnQ7XHJcblx0XHRcdGZvciAoIDsgLS1pID49IDA7ICkge1xyXG5cdFx0XHRcdG1hdGNoSW5kZXhlcy5wdXNoKCBpICk7XHJcblx0XHRcdH1cclxuXHRcdFx0cmV0dXJuIG1hdGNoSW5kZXhlcztcclxuXHRcdH0pLFxyXG5cclxuXHRcdFwiZ3RcIjogY3JlYXRlUG9zaXRpb25hbFBzZXVkbyhmdW5jdGlvbiggbWF0Y2hJbmRleGVzLCBsZW5ndGgsIGFyZ3VtZW50ICkge1xyXG5cdFx0XHR2YXIgaSA9IGFyZ3VtZW50IDwgMCA/IGFyZ3VtZW50ICsgbGVuZ3RoIDogYXJndW1lbnQ7XHJcblx0XHRcdGZvciAoIDsgKytpIDwgbGVuZ3RoOyApIHtcclxuXHRcdFx0XHRtYXRjaEluZGV4ZXMucHVzaCggaSApO1xyXG5cdFx0XHR9XHJcblx0XHRcdHJldHVybiBtYXRjaEluZGV4ZXM7XHJcblx0XHR9KVxyXG5cdH1cclxufTtcclxuXHJcbkV4cHIucHNldWRvc1tcIm50aFwiXSA9IEV4cHIucHNldWRvc1tcImVxXCJdO1xyXG5cclxuLy8gQWRkIGJ1dHRvbi9pbnB1dCB0eXBlIHBzZXVkb3NcclxuZm9yICggaSBpbiB7IHJhZGlvOiB0cnVlLCBjaGVja2JveDogdHJ1ZSwgZmlsZTogdHJ1ZSwgcGFzc3dvcmQ6IHRydWUsIGltYWdlOiB0cnVlIH0gKSB7XHJcblx0RXhwci5wc2V1ZG9zWyBpIF0gPSBjcmVhdGVJbnB1dFBzZXVkbyggaSApO1xyXG59XHJcbmZvciAoIGkgaW4geyBzdWJtaXQ6IHRydWUsIHJlc2V0OiB0cnVlIH0gKSB7XHJcblx0RXhwci5wc2V1ZG9zWyBpIF0gPSBjcmVhdGVCdXR0b25Qc2V1ZG8oIGkgKTtcclxufVxyXG5cclxuLy8gRWFzeSBBUEkgZm9yIGNyZWF0aW5nIG5ldyBzZXRGaWx0ZXJzXHJcbmZ1bmN0aW9uIHNldEZpbHRlcnMoKSB7fVxyXG5zZXRGaWx0ZXJzLnByb3RvdHlwZSA9IEV4cHIuZmlsdGVycyA9IEV4cHIucHNldWRvcztcclxuRXhwci5zZXRGaWx0ZXJzID0gbmV3IHNldEZpbHRlcnMoKTtcclxuXHJcbnRva2VuaXplID0gU2l6emxlLnRva2VuaXplID0gZnVuY3Rpb24oIHNlbGVjdG9yLCBwYXJzZU9ubHkgKSB7XHJcblx0dmFyIG1hdGNoZWQsIG1hdGNoLCB0b2tlbnMsIHR5cGUsXHJcblx0XHRzb0ZhciwgZ3JvdXBzLCBwcmVGaWx0ZXJzLFxyXG5cdFx0Y2FjaGVkID0gdG9rZW5DYWNoZVsgc2VsZWN0b3IgKyBcIiBcIiBdO1xyXG5cclxuXHRpZiAoIGNhY2hlZCApIHtcclxuXHRcdHJldHVybiBwYXJzZU9ubHkgPyAwIDogY2FjaGVkLnNsaWNlKCAwICk7XHJcblx0fVxyXG5cclxuXHRzb0ZhciA9IHNlbGVjdG9yO1xyXG5cdGdyb3VwcyA9IFtdO1xyXG5cdHByZUZpbHRlcnMgPSBFeHByLnByZUZpbHRlcjtcclxuXHJcblx0d2hpbGUgKCBzb0ZhciApIHtcclxuXHJcblx0XHQvLyBDb21tYSBhbmQgZmlyc3QgcnVuXHJcblx0XHRpZiAoICFtYXRjaGVkIHx8IChtYXRjaCA9IHJjb21tYS5leGVjKCBzb0ZhciApKSApIHtcclxuXHRcdFx0aWYgKCBtYXRjaCApIHtcclxuXHRcdFx0XHQvLyBEb24ndCBjb25zdW1lIHRyYWlsaW5nIGNvbW1hcyBhcyB2YWxpZFxyXG5cdFx0XHRcdHNvRmFyID0gc29GYXIuc2xpY2UoIG1hdGNoWzBdLmxlbmd0aCApIHx8IHNvRmFyO1xyXG5cdFx0XHR9XHJcblx0XHRcdGdyb3Vwcy5wdXNoKCAodG9rZW5zID0gW10pICk7XHJcblx0XHR9XHJcblxyXG5cdFx0bWF0Y2hlZCA9IGZhbHNlO1xyXG5cclxuXHRcdC8vIENvbWJpbmF0b3JzXHJcblx0XHRpZiAoIChtYXRjaCA9IHJjb21iaW5hdG9ycy5leGVjKCBzb0ZhciApKSApIHtcclxuXHRcdFx0bWF0Y2hlZCA9IG1hdGNoLnNoaWZ0KCk7XHJcblx0XHRcdHRva2Vucy5wdXNoKHtcclxuXHRcdFx0XHR2YWx1ZTogbWF0Y2hlZCxcclxuXHRcdFx0XHQvLyBDYXN0IGRlc2NlbmRhbnQgY29tYmluYXRvcnMgdG8gc3BhY2VcclxuXHRcdFx0XHR0eXBlOiBtYXRjaFswXS5yZXBsYWNlKCBydHJpbSwgXCIgXCIgKVxyXG5cdFx0XHR9KTtcclxuXHRcdFx0c29GYXIgPSBzb0Zhci5zbGljZSggbWF0Y2hlZC5sZW5ndGggKTtcclxuXHRcdH1cclxuXHJcblx0XHQvLyBGaWx0ZXJzXHJcblx0XHRmb3IgKCB0eXBlIGluIEV4cHIuZmlsdGVyICkge1xyXG5cdFx0XHRpZiAoIChtYXRjaCA9IG1hdGNoRXhwclsgdHlwZSBdLmV4ZWMoIHNvRmFyICkpICYmICghcHJlRmlsdGVyc1sgdHlwZSBdIHx8XHJcblx0XHRcdFx0KG1hdGNoID0gcHJlRmlsdGVyc1sgdHlwZSBdKCBtYXRjaCApKSkgKSB7XHJcblx0XHRcdFx0bWF0Y2hlZCA9IG1hdGNoLnNoaWZ0KCk7XHJcblx0XHRcdFx0dG9rZW5zLnB1c2goe1xyXG5cdFx0XHRcdFx0dmFsdWU6IG1hdGNoZWQsXHJcblx0XHRcdFx0XHR0eXBlOiB0eXBlLFxyXG5cdFx0XHRcdFx0bWF0Y2hlczogbWF0Y2hcclxuXHRcdFx0XHR9KTtcclxuXHRcdFx0XHRzb0ZhciA9IHNvRmFyLnNsaWNlKCBtYXRjaGVkLmxlbmd0aCApO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblxyXG5cdFx0aWYgKCAhbWF0Y2hlZCApIHtcclxuXHRcdFx0YnJlYWs7XHJcblx0XHR9XHJcblx0fVxyXG5cclxuXHQvLyBSZXR1cm4gdGhlIGxlbmd0aCBvZiB0aGUgaW52YWxpZCBleGNlc3NcclxuXHQvLyBpZiB3ZSdyZSBqdXN0IHBhcnNpbmdcclxuXHQvLyBPdGhlcndpc2UsIHRocm93IGFuIGVycm9yIG9yIHJldHVybiB0b2tlbnNcclxuXHRyZXR1cm4gcGFyc2VPbmx5ID9cclxuXHRcdHNvRmFyLmxlbmd0aCA6XHJcblx0XHRzb0ZhciA/XHJcblx0XHRcdFNpenpsZS5lcnJvciggc2VsZWN0b3IgKSA6XHJcblx0XHRcdC8vIENhY2hlIHRoZSB0b2tlbnNcclxuXHRcdFx0dG9rZW5DYWNoZSggc2VsZWN0b3IsIGdyb3VwcyApLnNsaWNlKCAwICk7XHJcbn07XHJcblxyXG5mdW5jdGlvbiB0b1NlbGVjdG9yKCB0b2tlbnMgKSB7XHJcblx0dmFyIGkgPSAwLFxyXG5cdFx0bGVuID0gdG9rZW5zLmxlbmd0aCxcclxuXHRcdHNlbGVjdG9yID0gXCJcIjtcclxuXHRmb3IgKCA7IGkgPCBsZW47IGkrKyApIHtcclxuXHRcdHNlbGVjdG9yICs9IHRva2Vuc1tpXS52YWx1ZTtcclxuXHR9XHJcblx0cmV0dXJuIHNlbGVjdG9yO1xyXG59XHJcblxyXG5mdW5jdGlvbiBhZGRDb21iaW5hdG9yKCBtYXRjaGVyLCBjb21iaW5hdG9yLCBiYXNlICkge1xyXG5cdHZhciBkaXIgPSBjb21iaW5hdG9yLmRpcixcclxuXHRcdGNoZWNrTm9uRWxlbWVudHMgPSBiYXNlICYmIGRpciA9PT0gXCJwYXJlbnROb2RlXCIsXHJcblx0XHRkb25lTmFtZSA9IGRvbmUrKztcclxuXHJcblx0cmV0dXJuIGNvbWJpbmF0b3IuZmlyc3QgP1xyXG5cdFx0Ly8gQ2hlY2sgYWdhaW5zdCBjbG9zZXN0IGFuY2VzdG9yL3ByZWNlZGluZyBlbGVtZW50XHJcblx0XHRmdW5jdGlvbiggZWxlbSwgY29udGV4dCwgeG1sICkge1xyXG5cdFx0XHR3aGlsZSAoIChlbGVtID0gZWxlbVsgZGlyIF0pICkge1xyXG5cdFx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSB8fCBjaGVja05vbkVsZW1lbnRzICkge1xyXG5cdFx0XHRcdFx0cmV0dXJuIG1hdGNoZXIoIGVsZW0sIGNvbnRleHQsIHhtbCApO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0fSA6XHJcblxyXG5cdFx0Ly8gQ2hlY2sgYWdhaW5zdCBhbGwgYW5jZXN0b3IvcHJlY2VkaW5nIGVsZW1lbnRzXHJcblx0XHRmdW5jdGlvbiggZWxlbSwgY29udGV4dCwgeG1sICkge1xyXG5cdFx0XHR2YXIgb2xkQ2FjaGUsIHVuaXF1ZUNhY2hlLCBvdXRlckNhY2hlLFxyXG5cdFx0XHRcdG5ld0NhY2hlID0gWyBkaXJydW5zLCBkb25lTmFtZSBdO1xyXG5cclxuXHRcdFx0Ly8gV2UgY2FuJ3Qgc2V0IGFyYml0cmFyeSBkYXRhIG9uIFhNTCBub2Rlcywgc28gdGhleSBkb24ndCBiZW5lZml0IGZyb20gY29tYmluYXRvciBjYWNoaW5nXHJcblx0XHRcdGlmICggeG1sICkge1xyXG5cdFx0XHRcdHdoaWxlICggKGVsZW0gPSBlbGVtWyBkaXIgXSkgKSB7XHJcblx0XHRcdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgfHwgY2hlY2tOb25FbGVtZW50cyApIHtcclxuXHRcdFx0XHRcdFx0aWYgKCBtYXRjaGVyKCBlbGVtLCBjb250ZXh0LCB4bWwgKSApIHtcclxuXHRcdFx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcclxuXHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH1cclxuXHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHR3aGlsZSAoIChlbGVtID0gZWxlbVsgZGlyIF0pICkge1xyXG5cdFx0XHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxIHx8IGNoZWNrTm9uRWxlbWVudHMgKSB7XHJcblx0XHRcdFx0XHRcdG91dGVyQ2FjaGUgPSBlbGVtWyBleHBhbmRvIF0gfHwgKGVsZW1bIGV4cGFuZG8gXSA9IHt9KTtcclxuXHJcblx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw5IG9ubHlcclxuXHRcdFx0XHRcdFx0Ly8gRGVmZW5kIGFnYWluc3QgY2xvbmVkIGF0dHJvcGVydGllcyAoalF1ZXJ5IGdoLTE3MDkpXHJcblx0XHRcdFx0XHRcdHVuaXF1ZUNhY2hlID0gb3V0ZXJDYWNoZVsgZWxlbS51bmlxdWVJRCBdIHx8IChvdXRlckNhY2hlWyBlbGVtLnVuaXF1ZUlEIF0gPSB7fSk7XHJcblxyXG5cdFx0XHRcdFx0XHRpZiAoIChvbGRDYWNoZSA9IHVuaXF1ZUNhY2hlWyBkaXIgXSkgJiZcclxuXHRcdFx0XHRcdFx0XHRvbGRDYWNoZVsgMCBdID09PSBkaXJydW5zICYmIG9sZENhY2hlWyAxIF0gPT09IGRvbmVOYW1lICkge1xyXG5cclxuXHRcdFx0XHRcdFx0XHQvLyBBc3NpZ24gdG8gbmV3Q2FjaGUgc28gcmVzdWx0cyBiYWNrLXByb3BhZ2F0ZSB0byBwcmV2aW91cyBlbGVtZW50c1xyXG5cdFx0XHRcdFx0XHRcdHJldHVybiAobmV3Q2FjaGVbIDIgXSA9IG9sZENhY2hlWyAyIF0pO1xyXG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdFx0XHRcdC8vIFJldXNlIG5ld2NhY2hlIHNvIHJlc3VsdHMgYmFjay1wcm9wYWdhdGUgdG8gcHJldmlvdXMgZWxlbWVudHNcclxuXHRcdFx0XHRcdFx0XHR1bmlxdWVDYWNoZVsgZGlyIF0gPSBuZXdDYWNoZTtcclxuXHJcblx0XHRcdFx0XHRcdFx0Ly8gQSBtYXRjaCBtZWFucyB3ZSdyZSBkb25lOyBhIGZhaWwgbWVhbnMgd2UgaGF2ZSB0byBrZWVwIGNoZWNraW5nXHJcblx0XHRcdFx0XHRcdFx0aWYgKCAobmV3Q2FjaGVbIDIgXSA9IG1hdGNoZXIoIGVsZW0sIGNvbnRleHQsIHhtbCApKSApIHtcclxuXHRcdFx0XHRcdFx0XHRcdHJldHVybiB0cnVlO1xyXG5cdFx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0fTtcclxufVxyXG5cclxuZnVuY3Rpb24gZWxlbWVudE1hdGNoZXIoIG1hdGNoZXJzICkge1xyXG5cdHJldHVybiBtYXRjaGVycy5sZW5ndGggPiAxID9cclxuXHRcdGZ1bmN0aW9uKCBlbGVtLCBjb250ZXh0LCB4bWwgKSB7XHJcblx0XHRcdHZhciBpID0gbWF0Y2hlcnMubGVuZ3RoO1xyXG5cdFx0XHR3aGlsZSAoIGktLSApIHtcclxuXHRcdFx0XHRpZiAoICFtYXRjaGVyc1tpXSggZWxlbSwgY29udGV4dCwgeG1sICkgKSB7XHJcblx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHRcdHJldHVybiB0cnVlO1xyXG5cdFx0fSA6XHJcblx0XHRtYXRjaGVyc1swXTtcclxufVxyXG5cclxuZnVuY3Rpb24gbXVsdGlwbGVDb250ZXh0cyggc2VsZWN0b3IsIGNvbnRleHRzLCByZXN1bHRzICkge1xyXG5cdHZhciBpID0gMCxcclxuXHRcdGxlbiA9IGNvbnRleHRzLmxlbmd0aDtcclxuXHRmb3IgKCA7IGkgPCBsZW47IGkrKyApIHtcclxuXHRcdFNpenpsZSggc2VsZWN0b3IsIGNvbnRleHRzW2ldLCByZXN1bHRzICk7XHJcblx0fVxyXG5cdHJldHVybiByZXN1bHRzO1xyXG59XHJcblxyXG5mdW5jdGlvbiBjb25kZW5zZSggdW5tYXRjaGVkLCBtYXAsIGZpbHRlciwgY29udGV4dCwgeG1sICkge1xyXG5cdHZhciBlbGVtLFxyXG5cdFx0bmV3VW5tYXRjaGVkID0gW10sXHJcblx0XHRpID0gMCxcclxuXHRcdGxlbiA9IHVubWF0Y2hlZC5sZW5ndGgsXHJcblx0XHRtYXBwZWQgPSBtYXAgIT0gbnVsbDtcclxuXHJcblx0Zm9yICggOyBpIDwgbGVuOyBpKysgKSB7XHJcblx0XHRpZiAoIChlbGVtID0gdW5tYXRjaGVkW2ldKSApIHtcclxuXHRcdFx0aWYgKCAhZmlsdGVyIHx8IGZpbHRlciggZWxlbSwgY29udGV4dCwgeG1sICkgKSB7XHJcblx0XHRcdFx0bmV3VW5tYXRjaGVkLnB1c2goIGVsZW0gKTtcclxuXHRcdFx0XHRpZiAoIG1hcHBlZCApIHtcclxuXHRcdFx0XHRcdG1hcC5wdXNoKCBpICk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0fVxyXG5cclxuXHRyZXR1cm4gbmV3VW5tYXRjaGVkO1xyXG59XHJcblxyXG5mdW5jdGlvbiBzZXRNYXRjaGVyKCBwcmVGaWx0ZXIsIHNlbGVjdG9yLCBtYXRjaGVyLCBwb3N0RmlsdGVyLCBwb3N0RmluZGVyLCBwb3N0U2VsZWN0b3IgKSB7XHJcblx0aWYgKCBwb3N0RmlsdGVyICYmICFwb3N0RmlsdGVyWyBleHBhbmRvIF0gKSB7XHJcblx0XHRwb3N0RmlsdGVyID0gc2V0TWF0Y2hlciggcG9zdEZpbHRlciApO1xyXG5cdH1cclxuXHRpZiAoIHBvc3RGaW5kZXIgJiYgIXBvc3RGaW5kZXJbIGV4cGFuZG8gXSApIHtcclxuXHRcdHBvc3RGaW5kZXIgPSBzZXRNYXRjaGVyKCBwb3N0RmluZGVyLCBwb3N0U2VsZWN0b3IgKTtcclxuXHR9XHJcblx0cmV0dXJuIG1hcmtGdW5jdGlvbihmdW5jdGlvbiggc2VlZCwgcmVzdWx0cywgY29udGV4dCwgeG1sICkge1xyXG5cdFx0dmFyIHRlbXAsIGksIGVsZW0sXHJcblx0XHRcdHByZU1hcCA9IFtdLFxyXG5cdFx0XHRwb3N0TWFwID0gW10sXHJcblx0XHRcdHByZWV4aXN0aW5nID0gcmVzdWx0cy5sZW5ndGgsXHJcblxyXG5cdFx0XHQvLyBHZXQgaW5pdGlhbCBlbGVtZW50cyBmcm9tIHNlZWQgb3IgY29udGV4dFxyXG5cdFx0XHRlbGVtcyA9IHNlZWQgfHwgbXVsdGlwbGVDb250ZXh0cyggc2VsZWN0b3IgfHwgXCIqXCIsIGNvbnRleHQubm9kZVR5cGUgPyBbIGNvbnRleHQgXSA6IGNvbnRleHQsIFtdICksXHJcblxyXG5cdFx0XHQvLyBQcmVmaWx0ZXIgdG8gZ2V0IG1hdGNoZXIgaW5wdXQsIHByZXNlcnZpbmcgYSBtYXAgZm9yIHNlZWQtcmVzdWx0cyBzeW5jaHJvbml6YXRpb25cclxuXHRcdFx0bWF0Y2hlckluID0gcHJlRmlsdGVyICYmICggc2VlZCB8fCAhc2VsZWN0b3IgKSA/XHJcblx0XHRcdFx0Y29uZGVuc2UoIGVsZW1zLCBwcmVNYXAsIHByZUZpbHRlciwgY29udGV4dCwgeG1sICkgOlxyXG5cdFx0XHRcdGVsZW1zLFxyXG5cclxuXHRcdFx0bWF0Y2hlck91dCA9IG1hdGNoZXIgP1xyXG5cdFx0XHRcdC8vIElmIHdlIGhhdmUgYSBwb3N0RmluZGVyLCBvciBmaWx0ZXJlZCBzZWVkLCBvciBub24tc2VlZCBwb3N0RmlsdGVyIG9yIHByZWV4aXN0aW5nIHJlc3VsdHMsXHJcblx0XHRcdFx0cG9zdEZpbmRlciB8fCAoIHNlZWQgPyBwcmVGaWx0ZXIgOiBwcmVleGlzdGluZyB8fCBwb3N0RmlsdGVyICkgP1xyXG5cclxuXHRcdFx0XHRcdC8vIC4uLmludGVybWVkaWF0ZSBwcm9jZXNzaW5nIGlzIG5lY2Vzc2FyeVxyXG5cdFx0XHRcdFx0W10gOlxyXG5cclxuXHRcdFx0XHRcdC8vIC4uLm90aGVyd2lzZSB1c2UgcmVzdWx0cyBkaXJlY3RseVxyXG5cdFx0XHRcdFx0cmVzdWx0cyA6XHJcblx0XHRcdFx0bWF0Y2hlckluO1xyXG5cclxuXHRcdC8vIEZpbmQgcHJpbWFyeSBtYXRjaGVzXHJcblx0XHRpZiAoIG1hdGNoZXIgKSB7XHJcblx0XHRcdG1hdGNoZXIoIG1hdGNoZXJJbiwgbWF0Y2hlck91dCwgY29udGV4dCwgeG1sICk7XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gQXBwbHkgcG9zdEZpbHRlclxyXG5cdFx0aWYgKCBwb3N0RmlsdGVyICkge1xyXG5cdFx0XHR0ZW1wID0gY29uZGVuc2UoIG1hdGNoZXJPdXQsIHBvc3RNYXAgKTtcclxuXHRcdFx0cG9zdEZpbHRlciggdGVtcCwgW10sIGNvbnRleHQsIHhtbCApO1xyXG5cclxuXHRcdFx0Ly8gVW4tbWF0Y2ggZmFpbGluZyBlbGVtZW50cyBieSBtb3ZpbmcgdGhlbSBiYWNrIHRvIG1hdGNoZXJJblxyXG5cdFx0XHRpID0gdGVtcC5sZW5ndGg7XHJcblx0XHRcdHdoaWxlICggaS0tICkge1xyXG5cdFx0XHRcdGlmICggKGVsZW0gPSB0ZW1wW2ldKSApIHtcclxuXHRcdFx0XHRcdG1hdGNoZXJPdXRbIHBvc3RNYXBbaV0gXSA9ICEobWF0Y2hlckluWyBwb3N0TWFwW2ldIF0gPSBlbGVtKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHJcblx0XHRpZiAoIHNlZWQgKSB7XHJcblx0XHRcdGlmICggcG9zdEZpbmRlciB8fCBwcmVGaWx0ZXIgKSB7XHJcblx0XHRcdFx0aWYgKCBwb3N0RmluZGVyICkge1xyXG5cdFx0XHRcdFx0Ly8gR2V0IHRoZSBmaW5hbCBtYXRjaGVyT3V0IGJ5IGNvbmRlbnNpbmcgdGhpcyBpbnRlcm1lZGlhdGUgaW50byBwb3N0RmluZGVyIGNvbnRleHRzXHJcblx0XHRcdFx0XHR0ZW1wID0gW107XHJcblx0XHRcdFx0XHRpID0gbWF0Y2hlck91dC5sZW5ndGg7XHJcblx0XHRcdFx0XHR3aGlsZSAoIGktLSApIHtcclxuXHRcdFx0XHRcdFx0aWYgKCAoZWxlbSA9IG1hdGNoZXJPdXRbaV0pICkge1xyXG5cdFx0XHRcdFx0XHRcdC8vIFJlc3RvcmUgbWF0Y2hlckluIHNpbmNlIGVsZW0gaXMgbm90IHlldCBhIGZpbmFsIG1hdGNoXHJcblx0XHRcdFx0XHRcdFx0dGVtcC5wdXNoKCAobWF0Y2hlckluW2ldID0gZWxlbSkgKTtcclxuXHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0cG9zdEZpbmRlciggbnVsbCwgKG1hdGNoZXJPdXQgPSBbXSksIHRlbXAsIHhtbCApO1xyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0Ly8gTW92ZSBtYXRjaGVkIGVsZW1lbnRzIGZyb20gc2VlZCB0byByZXN1bHRzIHRvIGtlZXAgdGhlbSBzeW5jaHJvbml6ZWRcclxuXHRcdFx0XHRpID0gbWF0Y2hlck91dC5sZW5ndGg7XHJcblx0XHRcdFx0d2hpbGUgKCBpLS0gKSB7XHJcblx0XHRcdFx0XHRpZiAoIChlbGVtID0gbWF0Y2hlck91dFtpXSkgJiZcclxuXHRcdFx0XHRcdFx0KHRlbXAgPSBwb3N0RmluZGVyID8gaW5kZXhPZiggc2VlZCwgZWxlbSApIDogcHJlTWFwW2ldKSA+IC0xICkge1xyXG5cclxuXHRcdFx0XHRcdFx0c2VlZFt0ZW1wXSA9ICEocmVzdWx0c1t0ZW1wXSA9IGVsZW0pO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cclxuXHRcdC8vIEFkZCBlbGVtZW50cyB0byByZXN1bHRzLCB0aHJvdWdoIHBvc3RGaW5kZXIgaWYgZGVmaW5lZFxyXG5cdFx0fSBlbHNlIHtcclxuXHRcdFx0bWF0Y2hlck91dCA9IGNvbmRlbnNlKFxyXG5cdFx0XHRcdG1hdGNoZXJPdXQgPT09IHJlc3VsdHMgP1xyXG5cdFx0XHRcdFx0bWF0Y2hlck91dC5zcGxpY2UoIHByZWV4aXN0aW5nLCBtYXRjaGVyT3V0Lmxlbmd0aCApIDpcclxuXHRcdFx0XHRcdG1hdGNoZXJPdXRcclxuXHRcdFx0KTtcclxuXHRcdFx0aWYgKCBwb3N0RmluZGVyICkge1xyXG5cdFx0XHRcdHBvc3RGaW5kZXIoIG51bGwsIHJlc3VsdHMsIG1hdGNoZXJPdXQsIHhtbCApO1xyXG5cdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdHB1c2guYXBwbHkoIHJlc3VsdHMsIG1hdGNoZXJPdXQgKTtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdH0pO1xyXG59XHJcblxyXG5mdW5jdGlvbiBtYXRjaGVyRnJvbVRva2VucyggdG9rZW5zICkge1xyXG5cdHZhciBjaGVja0NvbnRleHQsIG1hdGNoZXIsIGosXHJcblx0XHRsZW4gPSB0b2tlbnMubGVuZ3RoLFxyXG5cdFx0bGVhZGluZ1JlbGF0aXZlID0gRXhwci5yZWxhdGl2ZVsgdG9rZW5zWzBdLnR5cGUgXSxcclxuXHRcdGltcGxpY2l0UmVsYXRpdmUgPSBsZWFkaW5nUmVsYXRpdmUgfHwgRXhwci5yZWxhdGl2ZVtcIiBcIl0sXHJcblx0XHRpID0gbGVhZGluZ1JlbGF0aXZlID8gMSA6IDAsXHJcblxyXG5cdFx0Ly8gVGhlIGZvdW5kYXRpb25hbCBtYXRjaGVyIGVuc3VyZXMgdGhhdCBlbGVtZW50cyBhcmUgcmVhY2hhYmxlIGZyb20gdG9wLWxldmVsIGNvbnRleHQocylcclxuXHRcdG1hdGNoQ29udGV4dCA9IGFkZENvbWJpbmF0b3IoIGZ1bmN0aW9uKCBlbGVtICkge1xyXG5cdFx0XHRyZXR1cm4gZWxlbSA9PT0gY2hlY2tDb250ZXh0O1xyXG5cdFx0fSwgaW1wbGljaXRSZWxhdGl2ZSwgdHJ1ZSApLFxyXG5cdFx0bWF0Y2hBbnlDb250ZXh0ID0gYWRkQ29tYmluYXRvciggZnVuY3Rpb24oIGVsZW0gKSB7XHJcblx0XHRcdHJldHVybiBpbmRleE9mKCBjaGVja0NvbnRleHQsIGVsZW0gKSA+IC0xO1xyXG5cdFx0fSwgaW1wbGljaXRSZWxhdGl2ZSwgdHJ1ZSApLFxyXG5cdFx0bWF0Y2hlcnMgPSBbIGZ1bmN0aW9uKCBlbGVtLCBjb250ZXh0LCB4bWwgKSB7XHJcblx0XHRcdHZhciByZXQgPSAoICFsZWFkaW5nUmVsYXRpdmUgJiYgKCB4bWwgfHwgY29udGV4dCAhPT0gb3V0ZXJtb3N0Q29udGV4dCApICkgfHwgKFxyXG5cdFx0XHRcdChjaGVja0NvbnRleHQgPSBjb250ZXh0KS5ub2RlVHlwZSA/XHJcblx0XHRcdFx0XHRtYXRjaENvbnRleHQoIGVsZW0sIGNvbnRleHQsIHhtbCApIDpcclxuXHRcdFx0XHRcdG1hdGNoQW55Q29udGV4dCggZWxlbSwgY29udGV4dCwgeG1sICkgKTtcclxuXHRcdFx0Ly8gQXZvaWQgaGFuZ2luZyBvbnRvIGVsZW1lbnQgKGlzc3VlICMyOTkpXHJcblx0XHRcdGNoZWNrQ29udGV4dCA9IG51bGw7XHJcblx0XHRcdHJldHVybiByZXQ7XHJcblx0XHR9IF07XHJcblxyXG5cdGZvciAoIDsgaSA8IGxlbjsgaSsrICkge1xyXG5cdFx0aWYgKCAobWF0Y2hlciA9IEV4cHIucmVsYXRpdmVbIHRva2Vuc1tpXS50eXBlIF0pICkge1xyXG5cdFx0XHRtYXRjaGVycyA9IFsgYWRkQ29tYmluYXRvcihlbGVtZW50TWF0Y2hlciggbWF0Y2hlcnMgKSwgbWF0Y2hlcikgXTtcclxuXHRcdH0gZWxzZSB7XHJcblx0XHRcdG1hdGNoZXIgPSBFeHByLmZpbHRlclsgdG9rZW5zW2ldLnR5cGUgXS5hcHBseSggbnVsbCwgdG9rZW5zW2ldLm1hdGNoZXMgKTtcclxuXHJcblx0XHRcdC8vIFJldHVybiBzcGVjaWFsIHVwb24gc2VlaW5nIGEgcG9zaXRpb25hbCBtYXRjaGVyXHJcblx0XHRcdGlmICggbWF0Y2hlclsgZXhwYW5kbyBdICkge1xyXG5cdFx0XHRcdC8vIEZpbmQgdGhlIG5leHQgcmVsYXRpdmUgb3BlcmF0b3IgKGlmIGFueSkgZm9yIHByb3BlciBoYW5kbGluZ1xyXG5cdFx0XHRcdGogPSArK2k7XHJcblx0XHRcdFx0Zm9yICggOyBqIDwgbGVuOyBqKysgKSB7XHJcblx0XHRcdFx0XHRpZiAoIEV4cHIucmVsYXRpdmVbIHRva2Vuc1tqXS50eXBlIF0gKSB7XHJcblx0XHRcdFx0XHRcdGJyZWFrO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHRyZXR1cm4gc2V0TWF0Y2hlcihcclxuXHRcdFx0XHRcdGkgPiAxICYmIGVsZW1lbnRNYXRjaGVyKCBtYXRjaGVycyApLFxyXG5cdFx0XHRcdFx0aSA+IDEgJiYgdG9TZWxlY3RvcihcclxuXHRcdFx0XHRcdFx0Ly8gSWYgdGhlIHByZWNlZGluZyB0b2tlbiB3YXMgYSBkZXNjZW5kYW50IGNvbWJpbmF0b3IsIGluc2VydCBhbiBpbXBsaWNpdCBhbnktZWxlbWVudCBgKmBcclxuXHRcdFx0XHRcdFx0dG9rZW5zLnNsaWNlKCAwLCBpIC0gMSApLmNvbmNhdCh7IHZhbHVlOiB0b2tlbnNbIGkgLSAyIF0udHlwZSA9PT0gXCIgXCIgPyBcIipcIiA6IFwiXCIgfSlcclxuXHRcdFx0XHRcdCkucmVwbGFjZSggcnRyaW0sIFwiJDFcIiApLFxyXG5cdFx0XHRcdFx0bWF0Y2hlcixcclxuXHRcdFx0XHRcdGkgPCBqICYmIG1hdGNoZXJGcm9tVG9rZW5zKCB0b2tlbnMuc2xpY2UoIGksIGogKSApLFxyXG5cdFx0XHRcdFx0aiA8IGxlbiAmJiBtYXRjaGVyRnJvbVRva2VucyggKHRva2VucyA9IHRva2Vucy5zbGljZSggaiApKSApLFxyXG5cdFx0XHRcdFx0aiA8IGxlbiAmJiB0b1NlbGVjdG9yKCB0b2tlbnMgKVxyXG5cdFx0XHRcdCk7XHJcblx0XHRcdH1cclxuXHRcdFx0bWF0Y2hlcnMucHVzaCggbWF0Y2hlciApO1xyXG5cdFx0fVxyXG5cdH1cclxuXHJcblx0cmV0dXJuIGVsZW1lbnRNYXRjaGVyKCBtYXRjaGVycyApO1xyXG59XHJcblxyXG5mdW5jdGlvbiBtYXRjaGVyRnJvbUdyb3VwTWF0Y2hlcnMoIGVsZW1lbnRNYXRjaGVycywgc2V0TWF0Y2hlcnMgKSB7XHJcblx0dmFyIGJ5U2V0ID0gc2V0TWF0Y2hlcnMubGVuZ3RoID4gMCxcclxuXHRcdGJ5RWxlbWVudCA9IGVsZW1lbnRNYXRjaGVycy5sZW5ndGggPiAwLFxyXG5cdFx0c3VwZXJNYXRjaGVyID0gZnVuY3Rpb24oIHNlZWQsIGNvbnRleHQsIHhtbCwgcmVzdWx0cywgb3V0ZXJtb3N0ICkge1xyXG5cdFx0XHR2YXIgZWxlbSwgaiwgbWF0Y2hlcixcclxuXHRcdFx0XHRtYXRjaGVkQ291bnQgPSAwLFxyXG5cdFx0XHRcdGkgPSBcIjBcIixcclxuXHRcdFx0XHR1bm1hdGNoZWQgPSBzZWVkICYmIFtdLFxyXG5cdFx0XHRcdHNldE1hdGNoZWQgPSBbXSxcclxuXHRcdFx0XHRjb250ZXh0QmFja3VwID0gb3V0ZXJtb3N0Q29udGV4dCxcclxuXHRcdFx0XHQvLyBXZSBtdXN0IGFsd2F5cyBoYXZlIGVpdGhlciBzZWVkIGVsZW1lbnRzIG9yIG91dGVybW9zdCBjb250ZXh0XHJcblx0XHRcdFx0ZWxlbXMgPSBzZWVkIHx8IGJ5RWxlbWVudCAmJiBFeHByLmZpbmRbXCJUQUdcIl0oIFwiKlwiLCBvdXRlcm1vc3QgKSxcclxuXHRcdFx0XHQvLyBVc2UgaW50ZWdlciBkaXJydW5zIGlmZiB0aGlzIGlzIHRoZSBvdXRlcm1vc3QgbWF0Y2hlclxyXG5cdFx0XHRcdGRpcnJ1bnNVbmlxdWUgPSAoZGlycnVucyArPSBjb250ZXh0QmFja3VwID09IG51bGwgPyAxIDogTWF0aC5yYW5kb20oKSB8fCAwLjEpLFxyXG5cdFx0XHRcdGxlbiA9IGVsZW1zLmxlbmd0aDtcclxuXHJcblx0XHRcdGlmICggb3V0ZXJtb3N0ICkge1xyXG5cdFx0XHRcdG91dGVybW9zdENvbnRleHQgPSBjb250ZXh0ID09PSBkb2N1bWVudCB8fCBjb250ZXh0IHx8IG91dGVybW9zdDtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0Ly8gQWRkIGVsZW1lbnRzIHBhc3NpbmcgZWxlbWVudE1hdGNoZXJzIGRpcmVjdGx5IHRvIHJlc3VsdHNcclxuXHRcdFx0Ly8gU3VwcG9ydDogSUU8OSwgU2FmYXJpXHJcblx0XHRcdC8vIFRvbGVyYXRlIE5vZGVMaXN0IHByb3BlcnRpZXMgKElFOiBcImxlbmd0aFwiOyBTYWZhcmk6IDxudW1iZXI+KSBtYXRjaGluZyBlbGVtZW50cyBieSBpZFxyXG5cdFx0XHRmb3IgKCA7IGkgIT09IGxlbiAmJiAoZWxlbSA9IGVsZW1zW2ldKSAhPSBudWxsOyBpKysgKSB7XHJcblx0XHRcdFx0aWYgKCBieUVsZW1lbnQgJiYgZWxlbSApIHtcclxuXHRcdFx0XHRcdGogPSAwO1xyXG5cdFx0XHRcdFx0aWYgKCAhY29udGV4dCAmJiBlbGVtLm93bmVyRG9jdW1lbnQgIT09IGRvY3VtZW50ICkge1xyXG5cdFx0XHRcdFx0XHRzZXREb2N1bWVudCggZWxlbSApO1xyXG5cdFx0XHRcdFx0XHR4bWwgPSAhZG9jdW1lbnRJc0hUTUw7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHR3aGlsZSAoIChtYXRjaGVyID0gZWxlbWVudE1hdGNoZXJzW2orK10pICkge1xyXG5cdFx0XHRcdFx0XHRpZiAoIG1hdGNoZXIoIGVsZW0sIGNvbnRleHQgfHwgZG9jdW1lbnQsIHhtbCkgKSB7XHJcblx0XHRcdFx0XHRcdFx0cmVzdWx0cy5wdXNoKCBlbGVtICk7XHJcblx0XHRcdFx0XHRcdFx0YnJlYWs7XHJcblx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdGlmICggb3V0ZXJtb3N0ICkge1xyXG5cdFx0XHRcdFx0XHRkaXJydW5zID0gZGlycnVuc1VuaXF1ZTtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdC8vIFRyYWNrIHVubWF0Y2hlZCBlbGVtZW50cyBmb3Igc2V0IGZpbHRlcnNcclxuXHRcdFx0XHRpZiAoIGJ5U2V0ICkge1xyXG5cdFx0XHRcdFx0Ly8gVGhleSB3aWxsIGhhdmUgZ29uZSB0aHJvdWdoIGFsbCBwb3NzaWJsZSBtYXRjaGVyc1xyXG5cdFx0XHRcdFx0aWYgKCAoZWxlbSA9ICFtYXRjaGVyICYmIGVsZW0pICkge1xyXG5cdFx0XHRcdFx0XHRtYXRjaGVkQ291bnQtLTtcclxuXHRcdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0XHQvLyBMZW5ndGhlbiB0aGUgYXJyYXkgZm9yIGV2ZXJ5IGVsZW1lbnQsIG1hdGNoZWQgb3Igbm90XHJcblx0XHRcdFx0XHRpZiAoIHNlZWQgKSB7XHJcblx0XHRcdFx0XHRcdHVubWF0Y2hlZC5wdXNoKCBlbGVtICk7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHQvLyBgaWAgaXMgbm93IHRoZSBjb3VudCBvZiBlbGVtZW50cyB2aXNpdGVkIGFib3ZlLCBhbmQgYWRkaW5nIGl0IHRvIGBtYXRjaGVkQ291bnRgXHJcblx0XHRcdC8vIG1ha2VzIHRoZSBsYXR0ZXIgbm9ubmVnYXRpdmUuXHJcblx0XHRcdG1hdGNoZWRDb3VudCArPSBpO1xyXG5cclxuXHRcdFx0Ly8gQXBwbHkgc2V0IGZpbHRlcnMgdG8gdW5tYXRjaGVkIGVsZW1lbnRzXHJcblx0XHRcdC8vIE5PVEU6IFRoaXMgY2FuIGJlIHNraXBwZWQgaWYgdGhlcmUgYXJlIG5vIHVubWF0Y2hlZCBlbGVtZW50cyAoaS5lLiwgYG1hdGNoZWRDb3VudGBcclxuXHRcdFx0Ly8gZXF1YWxzIGBpYCksIHVubGVzcyB3ZSBkaWRuJ3QgdmlzaXQgX2FueV8gZWxlbWVudHMgaW4gdGhlIGFib3ZlIGxvb3AgYmVjYXVzZSB3ZSBoYXZlXHJcblx0XHRcdC8vIG5vIGVsZW1lbnQgbWF0Y2hlcnMgYW5kIG5vIHNlZWQuXHJcblx0XHRcdC8vIEluY3JlbWVudGluZyBhbiBpbml0aWFsbHktc3RyaW5nIFwiMFwiIGBpYCBhbGxvd3MgYGlgIHRvIHJlbWFpbiBhIHN0cmluZyBvbmx5IGluIHRoYXRcclxuXHRcdFx0Ly8gY2FzZSwgd2hpY2ggd2lsbCByZXN1bHQgaW4gYSBcIjAwXCIgYG1hdGNoZWRDb3VudGAgdGhhdCBkaWZmZXJzIGZyb20gYGlgIGJ1dCBpcyBhbHNvXHJcblx0XHRcdC8vIG51bWVyaWNhbGx5IHplcm8uXHJcblx0XHRcdGlmICggYnlTZXQgJiYgaSAhPT0gbWF0Y2hlZENvdW50ICkge1xyXG5cdFx0XHRcdGogPSAwO1xyXG5cdFx0XHRcdHdoaWxlICggKG1hdGNoZXIgPSBzZXRNYXRjaGVyc1tqKytdKSApIHtcclxuXHRcdFx0XHRcdG1hdGNoZXIoIHVubWF0Y2hlZCwgc2V0TWF0Y2hlZCwgY29udGV4dCwgeG1sICk7XHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRpZiAoIHNlZWQgKSB7XHJcblx0XHRcdFx0XHQvLyBSZWludGVncmF0ZSBlbGVtZW50IG1hdGNoZXMgdG8gZWxpbWluYXRlIHRoZSBuZWVkIGZvciBzb3J0aW5nXHJcblx0XHRcdFx0XHRpZiAoIG1hdGNoZWRDb3VudCA+IDAgKSB7XHJcblx0XHRcdFx0XHRcdHdoaWxlICggaS0tICkge1xyXG5cdFx0XHRcdFx0XHRcdGlmICggISh1bm1hdGNoZWRbaV0gfHwgc2V0TWF0Y2hlZFtpXSkgKSB7XHJcblx0XHRcdFx0XHRcdFx0XHRzZXRNYXRjaGVkW2ldID0gcG9wLmNhbGwoIHJlc3VsdHMgKTtcclxuXHRcdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0XHQvLyBEaXNjYXJkIGluZGV4IHBsYWNlaG9sZGVyIHZhbHVlcyB0byBnZXQgb25seSBhY3R1YWwgbWF0Y2hlc1xyXG5cdFx0XHRcdFx0c2V0TWF0Y2hlZCA9IGNvbmRlbnNlKCBzZXRNYXRjaGVkICk7XHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHQvLyBBZGQgbWF0Y2hlcyB0byByZXN1bHRzXHJcblx0XHRcdFx0cHVzaC5hcHBseSggcmVzdWx0cywgc2V0TWF0Y2hlZCApO1xyXG5cclxuXHRcdFx0XHQvLyBTZWVkbGVzcyBzZXQgbWF0Y2hlcyBzdWNjZWVkaW5nIG11bHRpcGxlIHN1Y2Nlc3NmdWwgbWF0Y2hlcnMgc3RpcHVsYXRlIHNvcnRpbmdcclxuXHRcdFx0XHRpZiAoIG91dGVybW9zdCAmJiAhc2VlZCAmJiBzZXRNYXRjaGVkLmxlbmd0aCA+IDAgJiZcclxuXHRcdFx0XHRcdCggbWF0Y2hlZENvdW50ICsgc2V0TWF0Y2hlcnMubGVuZ3RoICkgPiAxICkge1xyXG5cclxuXHRcdFx0XHRcdFNpenpsZS51bmlxdWVTb3J0KCByZXN1bHRzICk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHQvLyBPdmVycmlkZSBtYW5pcHVsYXRpb24gb2YgZ2xvYmFscyBieSBuZXN0ZWQgbWF0Y2hlcnNcclxuXHRcdFx0aWYgKCBvdXRlcm1vc3QgKSB7XHJcblx0XHRcdFx0ZGlycnVucyA9IGRpcnJ1bnNVbmlxdWU7XHJcblx0XHRcdFx0b3V0ZXJtb3N0Q29udGV4dCA9IGNvbnRleHRCYWNrdXA7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdHJldHVybiB1bm1hdGNoZWQ7XHJcblx0XHR9O1xyXG5cclxuXHRyZXR1cm4gYnlTZXQgP1xyXG5cdFx0bWFya0Z1bmN0aW9uKCBzdXBlck1hdGNoZXIgKSA6XHJcblx0XHRzdXBlck1hdGNoZXI7XHJcbn1cclxuXHJcbmNvbXBpbGUgPSBTaXp6bGUuY29tcGlsZSA9IGZ1bmN0aW9uKCBzZWxlY3RvciwgbWF0Y2ggLyogSW50ZXJuYWwgVXNlIE9ubHkgKi8gKSB7XHJcblx0dmFyIGksXHJcblx0XHRzZXRNYXRjaGVycyA9IFtdLFxyXG5cdFx0ZWxlbWVudE1hdGNoZXJzID0gW10sXHJcblx0XHRjYWNoZWQgPSBjb21waWxlckNhY2hlWyBzZWxlY3RvciArIFwiIFwiIF07XHJcblxyXG5cdGlmICggIWNhY2hlZCApIHtcclxuXHRcdC8vIEdlbmVyYXRlIGEgZnVuY3Rpb24gb2YgcmVjdXJzaXZlIGZ1bmN0aW9ucyB0aGF0IGNhbiBiZSB1c2VkIHRvIGNoZWNrIGVhY2ggZWxlbWVudFxyXG5cdFx0aWYgKCAhbWF0Y2ggKSB7XHJcblx0XHRcdG1hdGNoID0gdG9rZW5pemUoIHNlbGVjdG9yICk7XHJcblx0XHR9XHJcblx0XHRpID0gbWF0Y2gubGVuZ3RoO1xyXG5cdFx0d2hpbGUgKCBpLS0gKSB7XHJcblx0XHRcdGNhY2hlZCA9IG1hdGNoZXJGcm9tVG9rZW5zKCBtYXRjaFtpXSApO1xyXG5cdFx0XHRpZiAoIGNhY2hlZFsgZXhwYW5kbyBdICkge1xyXG5cdFx0XHRcdHNldE1hdGNoZXJzLnB1c2goIGNhY2hlZCApO1xyXG5cdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdGVsZW1lbnRNYXRjaGVycy5wdXNoKCBjYWNoZWQgKTtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cclxuXHRcdC8vIENhY2hlIHRoZSBjb21waWxlZCBmdW5jdGlvblxyXG5cdFx0Y2FjaGVkID0gY29tcGlsZXJDYWNoZSggc2VsZWN0b3IsIG1hdGNoZXJGcm9tR3JvdXBNYXRjaGVycyggZWxlbWVudE1hdGNoZXJzLCBzZXRNYXRjaGVycyApICk7XHJcblxyXG5cdFx0Ly8gU2F2ZSBzZWxlY3RvciBhbmQgdG9rZW5pemF0aW9uXHJcblx0XHRjYWNoZWQuc2VsZWN0b3IgPSBzZWxlY3RvcjtcclxuXHR9XHJcblx0cmV0dXJuIGNhY2hlZDtcclxufTtcclxuXHJcbi8qKlxyXG4gKiBBIGxvdy1sZXZlbCBzZWxlY3Rpb24gZnVuY3Rpb24gdGhhdCB3b3JrcyB3aXRoIFNpenpsZSdzIGNvbXBpbGVkXHJcbiAqICBzZWxlY3RvciBmdW5jdGlvbnNcclxuICogQHBhcmFtIHtTdHJpbmd8RnVuY3Rpb259IHNlbGVjdG9yIEEgc2VsZWN0b3Igb3IgYSBwcmUtY29tcGlsZWRcclxuICogIHNlbGVjdG9yIGZ1bmN0aW9uIGJ1aWx0IHdpdGggU2l6emxlLmNvbXBpbGVcclxuICogQHBhcmFtIHtFbGVtZW50fSBjb250ZXh0XHJcbiAqIEBwYXJhbSB7QXJyYXl9IFtyZXN1bHRzXVxyXG4gKiBAcGFyYW0ge0FycmF5fSBbc2VlZF0gQSBzZXQgb2YgZWxlbWVudHMgdG8gbWF0Y2ggYWdhaW5zdFxyXG4gKi9cclxuc2VsZWN0ID0gU2l6emxlLnNlbGVjdCA9IGZ1bmN0aW9uKCBzZWxlY3RvciwgY29udGV4dCwgcmVzdWx0cywgc2VlZCApIHtcclxuXHR2YXIgaSwgdG9rZW5zLCB0b2tlbiwgdHlwZSwgZmluZCxcclxuXHRcdGNvbXBpbGVkID0gdHlwZW9mIHNlbGVjdG9yID09PSBcImZ1bmN0aW9uXCIgJiYgc2VsZWN0b3IsXHJcblx0XHRtYXRjaCA9ICFzZWVkICYmIHRva2VuaXplKCAoc2VsZWN0b3IgPSBjb21waWxlZC5zZWxlY3RvciB8fCBzZWxlY3RvcikgKTtcclxuXHJcblx0cmVzdWx0cyA9IHJlc3VsdHMgfHwgW107XHJcblxyXG5cdC8vIFRyeSB0byBtaW5pbWl6ZSBvcGVyYXRpb25zIGlmIHRoZXJlIGlzIG9ubHkgb25lIHNlbGVjdG9yIGluIHRoZSBsaXN0IGFuZCBubyBzZWVkXHJcblx0Ly8gKHRoZSBsYXR0ZXIgb2Ygd2hpY2ggZ3VhcmFudGVlcyB1cyBjb250ZXh0KVxyXG5cdGlmICggbWF0Y2gubGVuZ3RoID09PSAxICkge1xyXG5cclxuXHRcdC8vIFJlZHVjZSBjb250ZXh0IGlmIHRoZSBsZWFkaW5nIGNvbXBvdW5kIHNlbGVjdG9yIGlzIGFuIElEXHJcblx0XHR0b2tlbnMgPSBtYXRjaFswXSA9IG1hdGNoWzBdLnNsaWNlKCAwICk7XHJcblx0XHRpZiAoIHRva2Vucy5sZW5ndGggPiAyICYmICh0b2tlbiA9IHRva2Vuc1swXSkudHlwZSA9PT0gXCJJRFwiICYmXHJcblx0XHRcdFx0c3VwcG9ydC5nZXRCeUlkICYmIGNvbnRleHQubm9kZVR5cGUgPT09IDkgJiYgZG9jdW1lbnRJc0hUTUwgJiZcclxuXHRcdFx0XHRFeHByLnJlbGF0aXZlWyB0b2tlbnNbMV0udHlwZSBdICkge1xyXG5cclxuXHRcdFx0Y29udGV4dCA9ICggRXhwci5maW5kW1wiSURcIl0oIHRva2VuLm1hdGNoZXNbMF0ucmVwbGFjZShydW5lc2NhcGUsIGZ1bmVzY2FwZSksIGNvbnRleHQgKSB8fCBbXSApWzBdO1xyXG5cdFx0XHRpZiAoICFjb250ZXh0ICkge1xyXG5cdFx0XHRcdHJldHVybiByZXN1bHRzO1xyXG5cclxuXHRcdFx0Ly8gUHJlY29tcGlsZWQgbWF0Y2hlcnMgd2lsbCBzdGlsbCB2ZXJpZnkgYW5jZXN0cnksIHNvIHN0ZXAgdXAgYSBsZXZlbFxyXG5cdFx0XHR9IGVsc2UgaWYgKCBjb21waWxlZCApIHtcclxuXHRcdFx0XHRjb250ZXh0ID0gY29udGV4dC5wYXJlbnROb2RlO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRzZWxlY3RvciA9IHNlbGVjdG9yLnNsaWNlKCB0b2tlbnMuc2hpZnQoKS52YWx1ZS5sZW5ndGggKTtcclxuXHRcdH1cclxuXHJcblx0XHQvLyBGZXRjaCBhIHNlZWQgc2V0IGZvciByaWdodC10by1sZWZ0IG1hdGNoaW5nXHJcblx0XHRpID0gbWF0Y2hFeHByW1wibmVlZHNDb250ZXh0XCJdLnRlc3QoIHNlbGVjdG9yICkgPyAwIDogdG9rZW5zLmxlbmd0aDtcclxuXHRcdHdoaWxlICggaS0tICkge1xyXG5cdFx0XHR0b2tlbiA9IHRva2Vuc1tpXTtcclxuXHJcblx0XHRcdC8vIEFib3J0IGlmIHdlIGhpdCBhIGNvbWJpbmF0b3JcclxuXHRcdFx0aWYgKCBFeHByLnJlbGF0aXZlWyAodHlwZSA9IHRva2VuLnR5cGUpIF0gKSB7XHJcblx0XHRcdFx0YnJlYWs7XHJcblx0XHRcdH1cclxuXHRcdFx0aWYgKCAoZmluZCA9IEV4cHIuZmluZFsgdHlwZSBdKSApIHtcclxuXHRcdFx0XHQvLyBTZWFyY2gsIGV4cGFuZGluZyBjb250ZXh0IGZvciBsZWFkaW5nIHNpYmxpbmcgY29tYmluYXRvcnNcclxuXHRcdFx0XHRpZiAoIChzZWVkID0gZmluZChcclxuXHRcdFx0XHRcdHRva2VuLm1hdGNoZXNbMF0ucmVwbGFjZSggcnVuZXNjYXBlLCBmdW5lc2NhcGUgKSxcclxuXHRcdFx0XHRcdHJzaWJsaW5nLnRlc3QoIHRva2Vuc1swXS50eXBlICkgJiYgdGVzdENvbnRleHQoIGNvbnRleHQucGFyZW50Tm9kZSApIHx8IGNvbnRleHRcclxuXHRcdFx0XHQpKSApIHtcclxuXHJcblx0XHRcdFx0XHQvLyBJZiBzZWVkIGlzIGVtcHR5IG9yIG5vIHRva2VucyByZW1haW4sIHdlIGNhbiByZXR1cm4gZWFybHlcclxuXHRcdFx0XHRcdHRva2Vucy5zcGxpY2UoIGksIDEgKTtcclxuXHRcdFx0XHRcdHNlbGVjdG9yID0gc2VlZC5sZW5ndGggJiYgdG9TZWxlY3RvciggdG9rZW5zICk7XHJcblx0XHRcdFx0XHRpZiAoICFzZWxlY3RvciApIHtcclxuXHRcdFx0XHRcdFx0cHVzaC5hcHBseSggcmVzdWx0cywgc2VlZCApO1xyXG5cdFx0XHRcdFx0XHRyZXR1cm4gcmVzdWx0cztcclxuXHRcdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0XHRicmVhaztcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHR9XHJcblxyXG5cdC8vIENvbXBpbGUgYW5kIGV4ZWN1dGUgYSBmaWx0ZXJpbmcgZnVuY3Rpb24gaWYgb25lIGlzIG5vdCBwcm92aWRlZFxyXG5cdC8vIFByb3ZpZGUgYG1hdGNoYCB0byBhdm9pZCByZXRva2VuaXphdGlvbiBpZiB3ZSBtb2RpZmllZCB0aGUgc2VsZWN0b3IgYWJvdmVcclxuXHQoIGNvbXBpbGVkIHx8IGNvbXBpbGUoIHNlbGVjdG9yLCBtYXRjaCApICkoXHJcblx0XHRzZWVkLFxyXG5cdFx0Y29udGV4dCxcclxuXHRcdCFkb2N1bWVudElzSFRNTCxcclxuXHRcdHJlc3VsdHMsXHJcblx0XHQhY29udGV4dCB8fCByc2libGluZy50ZXN0KCBzZWxlY3RvciApICYmIHRlc3RDb250ZXh0KCBjb250ZXh0LnBhcmVudE5vZGUgKSB8fCBjb250ZXh0XHJcblx0KTtcclxuXHRyZXR1cm4gcmVzdWx0cztcclxufTtcclxuXHJcbi8vIE9uZS10aW1lIGFzc2lnbm1lbnRzXHJcblxyXG4vLyBTb3J0IHN0YWJpbGl0eVxyXG5zdXBwb3J0LnNvcnRTdGFibGUgPSBleHBhbmRvLnNwbGl0KFwiXCIpLnNvcnQoIHNvcnRPcmRlciApLmpvaW4oXCJcIikgPT09IGV4cGFuZG87XHJcblxyXG4vLyBTdXBwb3J0OiBDaHJvbWUgMTQtMzUrXHJcbi8vIEFsd2F5cyBhc3N1bWUgZHVwbGljYXRlcyBpZiB0aGV5IGFyZW4ndCBwYXNzZWQgdG8gdGhlIGNvbXBhcmlzb24gZnVuY3Rpb25cclxuc3VwcG9ydC5kZXRlY3REdXBsaWNhdGVzID0gISFoYXNEdXBsaWNhdGU7XHJcblxyXG4vLyBJbml0aWFsaXplIGFnYWluc3QgdGhlIGRlZmF1bHQgZG9jdW1lbnRcclxuc2V0RG9jdW1lbnQoKTtcclxuXHJcbi8vIFN1cHBvcnQ6IFdlYmtpdDw1MzcuMzIgLSBTYWZhcmkgNi4wLjMvQ2hyb21lIDI1IChmaXhlZCBpbiBDaHJvbWUgMjcpXHJcbi8vIERldGFjaGVkIG5vZGVzIGNvbmZvdW5kaW5nbHkgZm9sbG93ICplYWNoIG90aGVyKlxyXG5zdXBwb3J0LnNvcnREZXRhY2hlZCA9IGFzc2VydChmdW5jdGlvbiggZGl2MSApIHtcclxuXHQvLyBTaG91bGQgcmV0dXJuIDEsIGJ1dCByZXR1cm5zIDQgKGZvbGxvd2luZylcclxuXHRyZXR1cm4gZGl2MS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbiggZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKSApICYgMTtcclxufSk7XHJcblxyXG4vLyBTdXBwb3J0OiBJRTw4XHJcbi8vIFByZXZlbnQgYXR0cmlidXRlL3Byb3BlcnR5IFwiaW50ZXJwb2xhdGlvblwiXHJcbi8vIGh0dHA6Ly9tc2RuLm1pY3Jvc29mdC5jb20vZW4tdXMvbGlicmFyeS9tczUzNjQyOSUyOFZTLjg1JTI5LmFzcHhcclxuaWYgKCAhYXNzZXJ0KGZ1bmN0aW9uKCBkaXYgKSB7XHJcblx0ZGl2LmlubmVySFRNTCA9IFwiPGEgaHJlZj0nIyc+PC9hPlwiO1xyXG5cdHJldHVybiBkaXYuZmlyc3RDaGlsZC5nZXRBdHRyaWJ1dGUoXCJocmVmXCIpID09PSBcIiNcIiA7XHJcbn0pICkge1xyXG5cdGFkZEhhbmRsZSggXCJ0eXBlfGhyZWZ8aGVpZ2h0fHdpZHRoXCIsIGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCBpc1hNTCApIHtcclxuXHRcdGlmICggIWlzWE1MICkge1xyXG5cdFx0XHRyZXR1cm4gZWxlbS5nZXRBdHRyaWJ1dGUoIG5hbWUsIG5hbWUudG9Mb3dlckNhc2UoKSA9PT0gXCJ0eXBlXCIgPyAxIDogMiApO1xyXG5cdFx0fVxyXG5cdH0pO1xyXG59XHJcblxyXG4vLyBTdXBwb3J0OiBJRTw5XHJcbi8vIFVzZSBkZWZhdWx0VmFsdWUgaW4gcGxhY2Ugb2YgZ2V0QXR0cmlidXRlKFwidmFsdWVcIilcclxuaWYgKCAhc3VwcG9ydC5hdHRyaWJ1dGVzIHx8ICFhc3NlcnQoZnVuY3Rpb24oIGRpdiApIHtcclxuXHRkaXYuaW5uZXJIVE1MID0gXCI8aW5wdXQvPlwiO1xyXG5cdGRpdi5maXJzdENoaWxkLnNldEF0dHJpYnV0ZSggXCJ2YWx1ZVwiLCBcIlwiICk7XHJcblx0cmV0dXJuIGRpdi5maXJzdENoaWxkLmdldEF0dHJpYnV0ZSggXCJ2YWx1ZVwiICkgPT09IFwiXCI7XHJcbn0pICkge1xyXG5cdGFkZEhhbmRsZSggXCJ2YWx1ZVwiLCBmdW5jdGlvbiggZWxlbSwgbmFtZSwgaXNYTUwgKSB7XHJcblx0XHRpZiAoICFpc1hNTCAmJiBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09IFwiaW5wdXRcIiApIHtcclxuXHRcdFx0cmV0dXJuIGVsZW0uZGVmYXVsdFZhbHVlO1xyXG5cdFx0fVxyXG5cdH0pO1xyXG59XHJcblxyXG4vLyBTdXBwb3J0OiBJRTw5XHJcbi8vIFVzZSBnZXRBdHRyaWJ1dGVOb2RlIHRvIGZldGNoIGJvb2xlYW5zIHdoZW4gZ2V0QXR0cmlidXRlIGxpZXNcclxuaWYgKCAhYXNzZXJ0KGZ1bmN0aW9uKCBkaXYgKSB7XHJcblx0cmV0dXJuIGRpdi5nZXRBdHRyaWJ1dGUoXCJkaXNhYmxlZFwiKSA9PSBudWxsO1xyXG59KSApIHtcclxuXHRhZGRIYW5kbGUoIGJvb2xlYW5zLCBmdW5jdGlvbiggZWxlbSwgbmFtZSwgaXNYTUwgKSB7XHJcblx0XHR2YXIgdmFsO1xyXG5cdFx0aWYgKCAhaXNYTUwgKSB7XHJcblx0XHRcdHJldHVybiBlbGVtWyBuYW1lIF0gPT09IHRydWUgPyBuYW1lLnRvTG93ZXJDYXNlKCkgOlxyXG5cdFx0XHRcdFx0KHZhbCA9IGVsZW0uZ2V0QXR0cmlidXRlTm9kZSggbmFtZSApKSAmJiB2YWwuc3BlY2lmaWVkID9cclxuXHRcdFx0XHRcdHZhbC52YWx1ZSA6XHJcblx0XHRcdFx0bnVsbDtcclxuXHRcdH1cclxuXHR9KTtcclxufVxyXG5cclxucmV0dXJuIFNpenpsZTtcclxuXHJcbn0pKCB3aW5kb3cgKTtcclxuXHJcblxyXG5cclxualF1ZXJ5LmZpbmQgPSBTaXp6bGU7XHJcbmpRdWVyeS5leHByID0gU2l6emxlLnNlbGVjdG9ycztcclxualF1ZXJ5LmV4cHJbIFwiOlwiIF0gPSBqUXVlcnkuZXhwci5wc2V1ZG9zO1xyXG5qUXVlcnkudW5pcXVlU29ydCA9IGpRdWVyeS51bmlxdWUgPSBTaXp6bGUudW5pcXVlU29ydDtcclxualF1ZXJ5LnRleHQgPSBTaXp6bGUuZ2V0VGV4dDtcclxualF1ZXJ5LmlzWE1MRG9jID0gU2l6emxlLmlzWE1MO1xyXG5qUXVlcnkuY29udGFpbnMgPSBTaXp6bGUuY29udGFpbnM7XHJcblxyXG5cclxuXHJcbnZhciBkaXIgPSBmdW5jdGlvbiggZWxlbSwgZGlyLCB1bnRpbCApIHtcclxuXHR2YXIgbWF0Y2hlZCA9IFtdLFxyXG5cdFx0dHJ1bmNhdGUgPSB1bnRpbCAhPT0gdW5kZWZpbmVkO1xyXG5cclxuXHR3aGlsZSAoICggZWxlbSA9IGVsZW1bIGRpciBdICkgJiYgZWxlbS5ub2RlVHlwZSAhPT0gOSApIHtcclxuXHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSApIHtcclxuXHRcdFx0aWYgKCB0cnVuY2F0ZSAmJiBqUXVlcnkoIGVsZW0gKS5pcyggdW50aWwgKSApIHtcclxuXHRcdFx0XHRicmVhaztcclxuXHRcdFx0fVxyXG5cdFx0XHRtYXRjaGVkLnB1c2goIGVsZW0gKTtcclxuXHRcdH1cclxuXHR9XHJcblx0cmV0dXJuIG1hdGNoZWQ7XHJcbn07XHJcblxyXG5cclxudmFyIHNpYmxpbmdzID0gZnVuY3Rpb24oIG4sIGVsZW0gKSB7XHJcblx0dmFyIG1hdGNoZWQgPSBbXTtcclxuXHJcblx0Zm9yICggOyBuOyBuID0gbi5uZXh0U2libGluZyApIHtcclxuXHRcdGlmICggbi5ub2RlVHlwZSA9PT0gMSAmJiBuICE9PSBlbGVtICkge1xyXG5cdFx0XHRtYXRjaGVkLnB1c2goIG4gKTtcclxuXHRcdH1cclxuXHR9XHJcblxyXG5cdHJldHVybiBtYXRjaGVkO1xyXG59O1xyXG5cclxuXHJcbnZhciBybmVlZHNDb250ZXh0ID0galF1ZXJ5LmV4cHIubWF0Y2gubmVlZHNDb250ZXh0O1xyXG5cclxudmFyIHJzaW5nbGVUYWcgPSAoIC9ePChbXFx3LV0rKVxccypcXC8/Pig/OjxcXC9cXDE+fCkkLyApO1xyXG5cclxuXHJcblxyXG52YXIgcmlzU2ltcGxlID0gL14uW146I1xcW1xcLixdKiQvO1xyXG5cclxuLy8gSW1wbGVtZW50IHRoZSBpZGVudGljYWwgZnVuY3Rpb25hbGl0eSBmb3IgZmlsdGVyIGFuZCBub3RcclxuZnVuY3Rpb24gd2lubm93KCBlbGVtZW50cywgcXVhbGlmaWVyLCBub3QgKSB7XHJcblx0aWYgKCBqUXVlcnkuaXNGdW5jdGlvbiggcXVhbGlmaWVyICkgKSB7XHJcblx0XHRyZXR1cm4galF1ZXJ5LmdyZXAoIGVsZW1lbnRzLCBmdW5jdGlvbiggZWxlbSwgaSApIHtcclxuXHRcdFx0LyoganNoaW50IC1XMDE4ICovXHJcblx0XHRcdHJldHVybiAhIXF1YWxpZmllci5jYWxsKCBlbGVtLCBpLCBlbGVtICkgIT09IG5vdDtcclxuXHRcdH0gKTtcclxuXHJcblx0fVxyXG5cclxuXHRpZiAoIHF1YWxpZmllci5ub2RlVHlwZSApIHtcclxuXHRcdHJldHVybiBqUXVlcnkuZ3JlcCggZWxlbWVudHMsIGZ1bmN0aW9uKCBlbGVtICkge1xyXG5cdFx0XHRyZXR1cm4gKCBlbGVtID09PSBxdWFsaWZpZXIgKSAhPT0gbm90O1xyXG5cdFx0fSApO1xyXG5cclxuXHR9XHJcblxyXG5cdGlmICggdHlwZW9mIHF1YWxpZmllciA9PT0gXCJzdHJpbmdcIiApIHtcclxuXHRcdGlmICggcmlzU2ltcGxlLnRlc3QoIHF1YWxpZmllciApICkge1xyXG5cdFx0XHRyZXR1cm4galF1ZXJ5LmZpbHRlciggcXVhbGlmaWVyLCBlbGVtZW50cywgbm90ICk7XHJcblx0XHR9XHJcblxyXG5cdFx0cXVhbGlmaWVyID0galF1ZXJ5LmZpbHRlciggcXVhbGlmaWVyLCBlbGVtZW50cyApO1xyXG5cdH1cclxuXHJcblx0cmV0dXJuIGpRdWVyeS5ncmVwKCBlbGVtZW50cywgZnVuY3Rpb24oIGVsZW0gKSB7XHJcblx0XHRyZXR1cm4gKCBpbmRleE9mLmNhbGwoIHF1YWxpZmllciwgZWxlbSApID4gLTEgKSAhPT0gbm90O1xyXG5cdH0gKTtcclxufVxyXG5cclxualF1ZXJ5LmZpbHRlciA9IGZ1bmN0aW9uKCBleHByLCBlbGVtcywgbm90ICkge1xyXG5cdHZhciBlbGVtID0gZWxlbXNbIDAgXTtcclxuXHJcblx0aWYgKCBub3QgKSB7XHJcblx0XHRleHByID0gXCI6bm90KFwiICsgZXhwciArIFwiKVwiO1xyXG5cdH1cclxuXHJcblx0cmV0dXJuIGVsZW1zLmxlbmd0aCA9PT0gMSAmJiBlbGVtLm5vZGVUeXBlID09PSAxID9cclxuXHRcdGpRdWVyeS5maW5kLm1hdGNoZXNTZWxlY3RvciggZWxlbSwgZXhwciApID8gWyBlbGVtIF0gOiBbXSA6XHJcblx0XHRqUXVlcnkuZmluZC5tYXRjaGVzKCBleHByLCBqUXVlcnkuZ3JlcCggZWxlbXMsIGZ1bmN0aW9uKCBlbGVtICkge1xyXG5cdFx0XHRyZXR1cm4gZWxlbS5ub2RlVHlwZSA9PT0gMTtcclxuXHRcdH0gKSApO1xyXG59O1xyXG5cclxualF1ZXJ5LmZuLmV4dGVuZCgge1xyXG5cdGZpbmQ6IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcclxuXHRcdHZhciBpLFxyXG5cdFx0XHRsZW4gPSB0aGlzLmxlbmd0aCxcclxuXHRcdFx0cmV0ID0gW10sXHJcblx0XHRcdHNlbGYgPSB0aGlzO1xyXG5cclxuXHRcdGlmICggdHlwZW9mIHNlbGVjdG9yICE9PSBcInN0cmluZ1wiICkge1xyXG5cdFx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIGpRdWVyeSggc2VsZWN0b3IgKS5maWx0ZXIoIGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRcdGZvciAoIGkgPSAwOyBpIDwgbGVuOyBpKysgKSB7XHJcblx0XHRcdFx0XHRpZiAoIGpRdWVyeS5jb250YWlucyggc2VsZlsgaSBdLCB0aGlzICkgKSB7XHJcblx0XHRcdFx0XHRcdHJldHVybiB0cnVlO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH1cclxuXHRcdFx0fSApICk7XHJcblx0XHR9XHJcblxyXG5cdFx0Zm9yICggaSA9IDA7IGkgPCBsZW47IGkrKyApIHtcclxuXHRcdFx0alF1ZXJ5LmZpbmQoIHNlbGVjdG9yLCBzZWxmWyBpIF0sIHJldCApO1xyXG5cdFx0fVxyXG5cclxuXHRcdC8vIE5lZWRlZCBiZWNhdXNlICQoIHNlbGVjdG9yLCBjb250ZXh0ICkgYmVjb21lcyAkKCBjb250ZXh0ICkuZmluZCggc2VsZWN0b3IgKVxyXG5cdFx0cmV0ID0gdGhpcy5wdXNoU3RhY2soIGxlbiA+IDEgPyBqUXVlcnkudW5pcXVlKCByZXQgKSA6IHJldCApO1xyXG5cdFx0cmV0LnNlbGVjdG9yID0gdGhpcy5zZWxlY3RvciA/IHRoaXMuc2VsZWN0b3IgKyBcIiBcIiArIHNlbGVjdG9yIDogc2VsZWN0b3I7XHJcblx0XHRyZXR1cm4gcmV0O1xyXG5cdH0sXHJcblx0ZmlsdGVyOiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XHJcblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIHdpbm5vdyggdGhpcywgc2VsZWN0b3IgfHwgW10sIGZhbHNlICkgKTtcclxuXHR9LFxyXG5cdG5vdDogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xyXG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCB3aW5ub3coIHRoaXMsIHNlbGVjdG9yIHx8IFtdLCB0cnVlICkgKTtcclxuXHR9LFxyXG5cdGlzOiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XHJcblx0XHRyZXR1cm4gISF3aW5ub3coXHJcblx0XHRcdHRoaXMsXHJcblxyXG5cdFx0XHQvLyBJZiB0aGlzIGlzIGEgcG9zaXRpb25hbC9yZWxhdGl2ZSBzZWxlY3RvciwgY2hlY2sgbWVtYmVyc2hpcCBpbiB0aGUgcmV0dXJuZWQgc2V0XHJcblx0XHRcdC8vIHNvICQoXCJwOmZpcnN0XCIpLmlzKFwicDpsYXN0XCIpIHdvbid0IHJldHVybiB0cnVlIGZvciBhIGRvYyB3aXRoIHR3byBcInBcIi5cclxuXHRcdFx0dHlwZW9mIHNlbGVjdG9yID09PSBcInN0cmluZ1wiICYmIHJuZWVkc0NvbnRleHQudGVzdCggc2VsZWN0b3IgKSA/XHJcblx0XHRcdFx0alF1ZXJ5KCBzZWxlY3RvciApIDpcclxuXHRcdFx0XHRzZWxlY3RvciB8fCBbXSxcclxuXHRcdFx0ZmFsc2VcclxuXHRcdCkubGVuZ3RoO1xyXG5cdH1cclxufSApO1xyXG5cclxuXHJcbi8vIEluaXRpYWxpemUgYSBqUXVlcnkgb2JqZWN0XHJcblxyXG5cclxuLy8gQSBjZW50cmFsIHJlZmVyZW5jZSB0byB0aGUgcm9vdCBqUXVlcnkoZG9jdW1lbnQpXHJcbnZhciByb290alF1ZXJ5LFxyXG5cclxuXHQvLyBBIHNpbXBsZSB3YXkgdG8gY2hlY2sgZm9yIEhUTUwgc3RyaW5nc1xyXG5cdC8vIFByaW9yaXRpemUgI2lkIG92ZXIgPHRhZz4gdG8gYXZvaWQgWFNTIHZpYSBsb2NhdGlvbi5oYXNoICgjOTUyMSlcclxuXHQvLyBTdHJpY3QgSFRNTCByZWNvZ25pdGlvbiAoIzExMjkwOiBtdXN0IHN0YXJ0IHdpdGggPClcclxuXHRycXVpY2tFeHByID0gL14oPzpcXHMqKDxbXFx3XFxXXSs+KVtePl0qfCMoW1xcdy1dKikpJC8sXHJcblxyXG5cdGluaXQgPSBqUXVlcnkuZm4uaW5pdCA9IGZ1bmN0aW9uKCBzZWxlY3RvciwgY29udGV4dCwgcm9vdCApIHtcclxuXHRcdHZhciBtYXRjaCwgZWxlbTtcclxuXHJcblx0XHQvLyBIQU5ETEU6ICQoXCJcIiksICQobnVsbCksICQodW5kZWZpbmVkKSwgJChmYWxzZSlcclxuXHRcdGlmICggIXNlbGVjdG9yICkge1xyXG5cdFx0XHRyZXR1cm4gdGhpcztcclxuXHRcdH1cclxuXHJcblx0XHQvLyBNZXRob2QgaW5pdCgpIGFjY2VwdHMgYW4gYWx0ZXJuYXRlIHJvb3RqUXVlcnlcclxuXHRcdC8vIHNvIG1pZ3JhdGUgY2FuIHN1cHBvcnQgalF1ZXJ5LnN1YiAoZ2gtMjEwMSlcclxuXHRcdHJvb3QgPSByb290IHx8IHJvb3RqUXVlcnk7XHJcblxyXG5cdFx0Ly8gSGFuZGxlIEhUTUwgc3RyaW5nc1xyXG5cdFx0aWYgKCB0eXBlb2Ygc2VsZWN0b3IgPT09IFwic3RyaW5nXCIgKSB7XHJcblx0XHRcdGlmICggc2VsZWN0b3JbIDAgXSA9PT0gXCI8XCIgJiZcclxuXHRcdFx0XHRzZWxlY3Rvclsgc2VsZWN0b3IubGVuZ3RoIC0gMSBdID09PSBcIj5cIiAmJlxyXG5cdFx0XHRcdHNlbGVjdG9yLmxlbmd0aCA+PSAzICkge1xyXG5cclxuXHRcdFx0XHQvLyBBc3N1bWUgdGhhdCBzdHJpbmdzIHRoYXQgc3RhcnQgYW5kIGVuZCB3aXRoIDw+IGFyZSBIVE1MIGFuZCBza2lwIHRoZSByZWdleCBjaGVja1xyXG5cdFx0XHRcdG1hdGNoID0gWyBudWxsLCBzZWxlY3RvciwgbnVsbCBdO1xyXG5cclxuXHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRtYXRjaCA9IHJxdWlja0V4cHIuZXhlYyggc2VsZWN0b3IgKTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0Ly8gTWF0Y2ggaHRtbCBvciBtYWtlIHN1cmUgbm8gY29udGV4dCBpcyBzcGVjaWZpZWQgZm9yICNpZFxyXG5cdFx0XHRpZiAoIG1hdGNoICYmICggbWF0Y2hbIDEgXSB8fCAhY29udGV4dCApICkge1xyXG5cclxuXHRcdFx0XHQvLyBIQU5ETEU6ICQoaHRtbCkgLT4gJChhcnJheSlcclxuXHRcdFx0XHRpZiAoIG1hdGNoWyAxIF0gKSB7XHJcblx0XHRcdFx0XHRjb250ZXh0ID0gY29udGV4dCBpbnN0YW5jZW9mIGpRdWVyeSA/IGNvbnRleHRbIDAgXSA6IGNvbnRleHQ7XHJcblxyXG5cdFx0XHRcdFx0Ly8gT3B0aW9uIHRvIHJ1biBzY3JpcHRzIGlzIHRydWUgZm9yIGJhY2stY29tcGF0XHJcblx0XHRcdFx0XHQvLyBJbnRlbnRpb25hbGx5IGxldCB0aGUgZXJyb3IgYmUgdGhyb3duIGlmIHBhcnNlSFRNTCBpcyBub3QgcHJlc2VudFxyXG5cdFx0XHRcdFx0alF1ZXJ5Lm1lcmdlKCB0aGlzLCBqUXVlcnkucGFyc2VIVE1MKFxyXG5cdFx0XHRcdFx0XHRtYXRjaFsgMSBdLFxyXG5cdFx0XHRcdFx0XHRjb250ZXh0ICYmIGNvbnRleHQubm9kZVR5cGUgPyBjb250ZXh0Lm93bmVyRG9jdW1lbnQgfHwgY29udGV4dCA6IGRvY3VtZW50LFxyXG5cdFx0XHRcdFx0XHR0cnVlXHJcblx0XHRcdFx0XHQpICk7XHJcblxyXG5cdFx0XHRcdFx0Ly8gSEFORExFOiAkKGh0bWwsIHByb3BzKVxyXG5cdFx0XHRcdFx0aWYgKCByc2luZ2xlVGFnLnRlc3QoIG1hdGNoWyAxIF0gKSAmJiBqUXVlcnkuaXNQbGFpbk9iamVjdCggY29udGV4dCApICkge1xyXG5cdFx0XHRcdFx0XHRmb3IgKCBtYXRjaCBpbiBjb250ZXh0ICkge1xyXG5cclxuXHRcdFx0XHRcdFx0XHQvLyBQcm9wZXJ0aWVzIG9mIGNvbnRleHQgYXJlIGNhbGxlZCBhcyBtZXRob2RzIGlmIHBvc3NpYmxlXHJcblx0XHRcdFx0XHRcdFx0aWYgKCBqUXVlcnkuaXNGdW5jdGlvbiggdGhpc1sgbWF0Y2ggXSApICkge1xyXG5cdFx0XHRcdFx0XHRcdFx0dGhpc1sgbWF0Y2ggXSggY29udGV4dFsgbWF0Y2ggXSApO1xyXG5cclxuXHRcdFx0XHRcdFx0XHQvLyAuLi5hbmQgb3RoZXJ3aXNlIHNldCBhcyBhdHRyaWJ1dGVzXHJcblx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRcdFx0XHRcdHRoaXMuYXR0ciggbWF0Y2gsIGNvbnRleHRbIG1hdGNoIF0gKTtcclxuXHRcdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0XHRyZXR1cm4gdGhpcztcclxuXHJcblx0XHRcdFx0Ly8gSEFORExFOiAkKCNpZClcclxuXHRcdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdFx0ZWxlbSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCBtYXRjaFsgMiBdICk7XHJcblxyXG5cdFx0XHRcdFx0Ly8gU3VwcG9ydDogQmxhY2tiZXJyeSA0LjZcclxuXHRcdFx0XHRcdC8vIGdFQklEIHJldHVybnMgbm9kZXMgbm8gbG9uZ2VyIGluIHRoZSBkb2N1bWVudCAoIzY5NjMpXHJcblx0XHRcdFx0XHRpZiAoIGVsZW0gJiYgZWxlbS5wYXJlbnROb2RlICkge1xyXG5cclxuXHRcdFx0XHRcdFx0Ly8gSW5qZWN0IHRoZSBlbGVtZW50IGRpcmVjdGx5IGludG8gdGhlIGpRdWVyeSBvYmplY3RcclxuXHRcdFx0XHRcdFx0dGhpcy5sZW5ndGggPSAxO1xyXG5cdFx0XHRcdFx0XHR0aGlzWyAwIF0gPSBlbGVtO1xyXG5cdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRcdHRoaXMuY29udGV4dCA9IGRvY3VtZW50O1xyXG5cdFx0XHRcdFx0dGhpcy5zZWxlY3RvciA9IHNlbGVjdG9yO1xyXG5cdFx0XHRcdFx0cmV0dXJuIHRoaXM7XHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0Ly8gSEFORExFOiAkKGV4cHIsICQoLi4uKSlcclxuXHRcdFx0fSBlbHNlIGlmICggIWNvbnRleHQgfHwgY29udGV4dC5qcXVlcnkgKSB7XHJcblx0XHRcdFx0cmV0dXJuICggY29udGV4dCB8fCByb290ICkuZmluZCggc2VsZWN0b3IgKTtcclxuXHJcblx0XHRcdC8vIEhBTkRMRTogJChleHByLCBjb250ZXh0KVxyXG5cdFx0XHQvLyAod2hpY2ggaXMganVzdCBlcXVpdmFsZW50IHRvOiAkKGNvbnRleHQpLmZpbmQoZXhwcilcclxuXHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRyZXR1cm4gdGhpcy5jb25zdHJ1Y3RvciggY29udGV4dCApLmZpbmQoIHNlbGVjdG9yICk7XHJcblx0XHRcdH1cclxuXHJcblx0XHQvLyBIQU5ETEU6ICQoRE9NRWxlbWVudClcclxuXHRcdH0gZWxzZSBpZiAoIHNlbGVjdG9yLm5vZGVUeXBlICkge1xyXG5cdFx0XHR0aGlzLmNvbnRleHQgPSB0aGlzWyAwIF0gPSBzZWxlY3RvcjtcclxuXHRcdFx0dGhpcy5sZW5ndGggPSAxO1xyXG5cdFx0XHRyZXR1cm4gdGhpcztcclxuXHJcblx0XHQvLyBIQU5ETEU6ICQoZnVuY3Rpb24pXHJcblx0XHQvLyBTaG9ydGN1dCBmb3IgZG9jdW1lbnQgcmVhZHlcclxuXHRcdH0gZWxzZSBpZiAoIGpRdWVyeS5pc0Z1bmN0aW9uKCBzZWxlY3RvciApICkge1xyXG5cdFx0XHRyZXR1cm4gcm9vdC5yZWFkeSAhPT0gdW5kZWZpbmVkID9cclxuXHRcdFx0XHRyb290LnJlYWR5KCBzZWxlY3RvciApIDpcclxuXHJcblx0XHRcdFx0Ly8gRXhlY3V0ZSBpbW1lZGlhdGVseSBpZiByZWFkeSBpcyBub3QgcHJlc2VudFxyXG5cdFx0XHRcdHNlbGVjdG9yKCBqUXVlcnkgKTtcclxuXHRcdH1cclxuXHJcblx0XHRpZiAoIHNlbGVjdG9yLnNlbGVjdG9yICE9PSB1bmRlZmluZWQgKSB7XHJcblx0XHRcdHRoaXMuc2VsZWN0b3IgPSBzZWxlY3Rvci5zZWxlY3RvcjtcclxuXHRcdFx0dGhpcy5jb250ZXh0ID0gc2VsZWN0b3IuY29udGV4dDtcclxuXHRcdH1cclxuXHJcblx0XHRyZXR1cm4galF1ZXJ5Lm1ha2VBcnJheSggc2VsZWN0b3IsIHRoaXMgKTtcclxuXHR9O1xyXG5cclxuLy8gR2l2ZSB0aGUgaW5pdCBmdW5jdGlvbiB0aGUgalF1ZXJ5IHByb3RvdHlwZSBmb3IgbGF0ZXIgaW5zdGFudGlhdGlvblxyXG5pbml0LnByb3RvdHlwZSA9IGpRdWVyeS5mbjtcclxuXHJcbi8vIEluaXRpYWxpemUgY2VudHJhbCByZWZlcmVuY2Vcclxucm9vdGpRdWVyeSA9IGpRdWVyeSggZG9jdW1lbnQgKTtcclxuXHJcblxyXG52YXIgcnBhcmVudHNwcmV2ID0gL14oPzpwYXJlbnRzfHByZXYoPzpVbnRpbHxBbGwpKS8sXHJcblxyXG5cdC8vIE1ldGhvZHMgZ3VhcmFudGVlZCB0byBwcm9kdWNlIGEgdW5pcXVlIHNldCB3aGVuIHN0YXJ0aW5nIGZyb20gYSB1bmlxdWUgc2V0XHJcblx0Z3VhcmFudGVlZFVuaXF1ZSA9IHtcclxuXHRcdGNoaWxkcmVuOiB0cnVlLFxyXG5cdFx0Y29udGVudHM6IHRydWUsXHJcblx0XHRuZXh0OiB0cnVlLFxyXG5cdFx0cHJldjogdHJ1ZVxyXG5cdH07XHJcblxyXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XHJcblx0aGFzOiBmdW5jdGlvbiggdGFyZ2V0ICkge1xyXG5cdFx0dmFyIHRhcmdldHMgPSBqUXVlcnkoIHRhcmdldCwgdGhpcyApLFxyXG5cdFx0XHRsID0gdGFyZ2V0cy5sZW5ndGg7XHJcblxyXG5cdFx0cmV0dXJuIHRoaXMuZmlsdGVyKCBmdW5jdGlvbigpIHtcclxuXHRcdFx0dmFyIGkgPSAwO1xyXG5cdFx0XHRmb3IgKCA7IGkgPCBsOyBpKysgKSB7XHJcblx0XHRcdFx0aWYgKCBqUXVlcnkuY29udGFpbnMoIHRoaXMsIHRhcmdldHNbIGkgXSApICkge1xyXG5cdFx0XHRcdFx0cmV0dXJuIHRydWU7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHR9ICk7XHJcblx0fSxcclxuXHJcblx0Y2xvc2VzdDogZnVuY3Rpb24oIHNlbGVjdG9ycywgY29udGV4dCApIHtcclxuXHRcdHZhciBjdXIsXHJcblx0XHRcdGkgPSAwLFxyXG5cdFx0XHRsID0gdGhpcy5sZW5ndGgsXHJcblx0XHRcdG1hdGNoZWQgPSBbXSxcclxuXHRcdFx0cG9zID0gcm5lZWRzQ29udGV4dC50ZXN0KCBzZWxlY3RvcnMgKSB8fCB0eXBlb2Ygc2VsZWN0b3JzICE9PSBcInN0cmluZ1wiID9cclxuXHRcdFx0XHRqUXVlcnkoIHNlbGVjdG9ycywgY29udGV4dCB8fCB0aGlzLmNvbnRleHQgKSA6XHJcblx0XHRcdFx0MDtcclxuXHJcblx0XHRmb3IgKCA7IGkgPCBsOyBpKysgKSB7XHJcblx0XHRcdGZvciAoIGN1ciA9IHRoaXNbIGkgXTsgY3VyICYmIGN1ciAhPT0gY29udGV4dDsgY3VyID0gY3VyLnBhcmVudE5vZGUgKSB7XHJcblxyXG5cdFx0XHRcdC8vIEFsd2F5cyBza2lwIGRvY3VtZW50IGZyYWdtZW50c1xyXG5cdFx0XHRcdGlmICggY3VyLm5vZGVUeXBlIDwgMTEgJiYgKCBwb3MgP1xyXG5cdFx0XHRcdFx0cG9zLmluZGV4KCBjdXIgKSA+IC0xIDpcclxuXHJcblx0XHRcdFx0XHQvLyBEb24ndCBwYXNzIG5vbi1lbGVtZW50cyB0byBTaXp6bGVcclxuXHRcdFx0XHRcdGN1ci5ub2RlVHlwZSA9PT0gMSAmJlxyXG5cdFx0XHRcdFx0XHRqUXVlcnkuZmluZC5tYXRjaGVzU2VsZWN0b3IoIGN1ciwgc2VsZWN0b3JzICkgKSApIHtcclxuXHJcblx0XHRcdFx0XHRtYXRjaGVkLnB1c2goIGN1ciApO1xyXG5cdFx0XHRcdFx0YnJlYWs7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHR9XHJcblxyXG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCBtYXRjaGVkLmxlbmd0aCA+IDEgPyBqUXVlcnkudW5pcXVlU29ydCggbWF0Y2hlZCApIDogbWF0Y2hlZCApO1xyXG5cdH0sXHJcblxyXG5cdC8vIERldGVybWluZSB0aGUgcG9zaXRpb24gb2YgYW4gZWxlbWVudCB3aXRoaW4gdGhlIHNldFxyXG5cdGluZGV4OiBmdW5jdGlvbiggZWxlbSApIHtcclxuXHJcblx0XHQvLyBObyBhcmd1bWVudCwgcmV0dXJuIGluZGV4IGluIHBhcmVudFxyXG5cdFx0aWYgKCAhZWxlbSApIHtcclxuXHRcdFx0cmV0dXJuICggdGhpc1sgMCBdICYmIHRoaXNbIDAgXS5wYXJlbnROb2RlICkgPyB0aGlzLmZpcnN0KCkucHJldkFsbCgpLmxlbmd0aCA6IC0xO1xyXG5cdFx0fVxyXG5cclxuXHRcdC8vIEluZGV4IGluIHNlbGVjdG9yXHJcblx0XHRpZiAoIHR5cGVvZiBlbGVtID09PSBcInN0cmluZ1wiICkge1xyXG5cdFx0XHRyZXR1cm4gaW5kZXhPZi5jYWxsKCBqUXVlcnkoIGVsZW0gKSwgdGhpc1sgMCBdICk7XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gTG9jYXRlIHRoZSBwb3NpdGlvbiBvZiB0aGUgZGVzaXJlZCBlbGVtZW50XHJcblx0XHRyZXR1cm4gaW5kZXhPZi5jYWxsKCB0aGlzLFxyXG5cclxuXHRcdFx0Ly8gSWYgaXQgcmVjZWl2ZXMgYSBqUXVlcnkgb2JqZWN0LCB0aGUgZmlyc3QgZWxlbWVudCBpcyB1c2VkXHJcblx0XHRcdGVsZW0uanF1ZXJ5ID8gZWxlbVsgMCBdIDogZWxlbVxyXG5cdFx0KTtcclxuXHR9LFxyXG5cclxuXHRhZGQ6IGZ1bmN0aW9uKCBzZWxlY3RvciwgY29udGV4dCApIHtcclxuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayhcclxuXHRcdFx0alF1ZXJ5LnVuaXF1ZVNvcnQoXHJcblx0XHRcdFx0alF1ZXJ5Lm1lcmdlKCB0aGlzLmdldCgpLCBqUXVlcnkoIHNlbGVjdG9yLCBjb250ZXh0ICkgKVxyXG5cdFx0XHQpXHJcblx0XHQpO1xyXG5cdH0sXHJcblxyXG5cdGFkZEJhY2s6IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcclxuXHRcdHJldHVybiB0aGlzLmFkZCggc2VsZWN0b3IgPT0gbnVsbCA/XHJcblx0XHRcdHRoaXMucHJldk9iamVjdCA6IHRoaXMucHJldk9iamVjdC5maWx0ZXIoIHNlbGVjdG9yIClcclxuXHRcdCk7XHJcblx0fVxyXG59ICk7XHJcblxyXG5mdW5jdGlvbiBzaWJsaW5nKCBjdXIsIGRpciApIHtcclxuXHR3aGlsZSAoICggY3VyID0gY3VyWyBkaXIgXSApICYmIGN1ci5ub2RlVHlwZSAhPT0gMSApIHt9XHJcblx0cmV0dXJuIGN1cjtcclxufVxyXG5cclxualF1ZXJ5LmVhY2goIHtcclxuXHRwYXJlbnQ6IGZ1bmN0aW9uKCBlbGVtICkge1xyXG5cdFx0dmFyIHBhcmVudCA9IGVsZW0ucGFyZW50Tm9kZTtcclxuXHRcdHJldHVybiBwYXJlbnQgJiYgcGFyZW50Lm5vZGVUeXBlICE9PSAxMSA/IHBhcmVudCA6IG51bGw7XHJcblx0fSxcclxuXHRwYXJlbnRzOiBmdW5jdGlvbiggZWxlbSApIHtcclxuXHRcdHJldHVybiBkaXIoIGVsZW0sIFwicGFyZW50Tm9kZVwiICk7XHJcblx0fSxcclxuXHRwYXJlbnRzVW50aWw6IGZ1bmN0aW9uKCBlbGVtLCBpLCB1bnRpbCApIHtcclxuXHRcdHJldHVybiBkaXIoIGVsZW0sIFwicGFyZW50Tm9kZVwiLCB1bnRpbCApO1xyXG5cdH0sXHJcblx0bmV4dDogZnVuY3Rpb24oIGVsZW0gKSB7XHJcblx0XHRyZXR1cm4gc2libGluZyggZWxlbSwgXCJuZXh0U2libGluZ1wiICk7XHJcblx0fSxcclxuXHRwcmV2OiBmdW5jdGlvbiggZWxlbSApIHtcclxuXHRcdHJldHVybiBzaWJsaW5nKCBlbGVtLCBcInByZXZpb3VzU2libGluZ1wiICk7XHJcblx0fSxcclxuXHRuZXh0QWxsOiBmdW5jdGlvbiggZWxlbSApIHtcclxuXHRcdHJldHVybiBkaXIoIGVsZW0sIFwibmV4dFNpYmxpbmdcIiApO1xyXG5cdH0sXHJcblx0cHJldkFsbDogZnVuY3Rpb24oIGVsZW0gKSB7XHJcblx0XHRyZXR1cm4gZGlyKCBlbGVtLCBcInByZXZpb3VzU2libGluZ1wiICk7XHJcblx0fSxcclxuXHRuZXh0VW50aWw6IGZ1bmN0aW9uKCBlbGVtLCBpLCB1bnRpbCApIHtcclxuXHRcdHJldHVybiBkaXIoIGVsZW0sIFwibmV4dFNpYmxpbmdcIiwgdW50aWwgKTtcclxuXHR9LFxyXG5cdHByZXZVbnRpbDogZnVuY3Rpb24oIGVsZW0sIGksIHVudGlsICkge1xyXG5cdFx0cmV0dXJuIGRpciggZWxlbSwgXCJwcmV2aW91c1NpYmxpbmdcIiwgdW50aWwgKTtcclxuXHR9LFxyXG5cdHNpYmxpbmdzOiBmdW5jdGlvbiggZWxlbSApIHtcclxuXHRcdHJldHVybiBzaWJsaW5ncyggKCBlbGVtLnBhcmVudE5vZGUgfHwge30gKS5maXJzdENoaWxkLCBlbGVtICk7XHJcblx0fSxcclxuXHRjaGlsZHJlbjogZnVuY3Rpb24oIGVsZW0gKSB7XHJcblx0XHRyZXR1cm4gc2libGluZ3MoIGVsZW0uZmlyc3RDaGlsZCApO1xyXG5cdH0sXHJcblx0Y29udGVudHM6IGZ1bmN0aW9uKCBlbGVtICkge1xyXG5cdFx0cmV0dXJuIGVsZW0uY29udGVudERvY3VtZW50IHx8IGpRdWVyeS5tZXJnZSggW10sIGVsZW0uY2hpbGROb2RlcyApO1xyXG5cdH1cclxufSwgZnVuY3Rpb24oIG5hbWUsIGZuICkge1xyXG5cdGpRdWVyeS5mblsgbmFtZSBdID0gZnVuY3Rpb24oIHVudGlsLCBzZWxlY3RvciApIHtcclxuXHRcdHZhciBtYXRjaGVkID0galF1ZXJ5Lm1hcCggdGhpcywgZm4sIHVudGlsICk7XHJcblxyXG5cdFx0aWYgKCBuYW1lLnNsaWNlKCAtNSApICE9PSBcIlVudGlsXCIgKSB7XHJcblx0XHRcdHNlbGVjdG9yID0gdW50aWw7XHJcblx0XHR9XHJcblxyXG5cdFx0aWYgKCBzZWxlY3RvciAmJiB0eXBlb2Ygc2VsZWN0b3IgPT09IFwic3RyaW5nXCIgKSB7XHJcblx0XHRcdG1hdGNoZWQgPSBqUXVlcnkuZmlsdGVyKCBzZWxlY3RvciwgbWF0Y2hlZCApO1xyXG5cdFx0fVxyXG5cclxuXHRcdGlmICggdGhpcy5sZW5ndGggPiAxICkge1xyXG5cclxuXHRcdFx0Ly8gUmVtb3ZlIGR1cGxpY2F0ZXNcclxuXHRcdFx0aWYgKCAhZ3VhcmFudGVlZFVuaXF1ZVsgbmFtZSBdICkge1xyXG5cdFx0XHRcdGpRdWVyeS51bmlxdWVTb3J0KCBtYXRjaGVkICk7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdC8vIFJldmVyc2Ugb3JkZXIgZm9yIHBhcmVudHMqIGFuZCBwcmV2LWRlcml2YXRpdmVzXHJcblx0XHRcdGlmICggcnBhcmVudHNwcmV2LnRlc3QoIG5hbWUgKSApIHtcclxuXHRcdFx0XHRtYXRjaGVkLnJldmVyc2UoKTtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggbWF0Y2hlZCApO1xyXG5cdH07XHJcbn0gKTtcclxudmFyIHJub3R3aGl0ZSA9ICggL1xcUysvZyApO1xyXG5cclxuXHJcblxyXG4vLyBDb252ZXJ0IFN0cmluZy1mb3JtYXR0ZWQgb3B0aW9ucyBpbnRvIE9iamVjdC1mb3JtYXR0ZWQgb25lc1xyXG5mdW5jdGlvbiBjcmVhdGVPcHRpb25zKCBvcHRpb25zICkge1xyXG5cdHZhciBvYmplY3QgPSB7fTtcclxuXHRqUXVlcnkuZWFjaCggb3B0aW9ucy5tYXRjaCggcm5vdHdoaXRlICkgfHwgW10sIGZ1bmN0aW9uKCBfLCBmbGFnICkge1xyXG5cdFx0b2JqZWN0WyBmbGFnIF0gPSB0cnVlO1xyXG5cdH0gKTtcclxuXHRyZXR1cm4gb2JqZWN0O1xyXG59XHJcblxyXG4vKlxyXG4gKiBDcmVhdGUgYSBjYWxsYmFjayBsaXN0IHVzaW5nIHRoZSBmb2xsb3dpbmcgcGFyYW1ldGVyczpcclxuICpcclxuICpcdG9wdGlvbnM6IGFuIG9wdGlvbmFsIGxpc3Qgb2Ygc3BhY2Utc2VwYXJhdGVkIG9wdGlvbnMgdGhhdCB3aWxsIGNoYW5nZSBob3dcclxuICpcdFx0XHR0aGUgY2FsbGJhY2sgbGlzdCBiZWhhdmVzIG9yIGEgbW9yZSB0cmFkaXRpb25hbCBvcHRpb24gb2JqZWN0XHJcbiAqXHJcbiAqIEJ5IGRlZmF1bHQgYSBjYWxsYmFjayBsaXN0IHdpbGwgYWN0IGxpa2UgYW4gZXZlbnQgY2FsbGJhY2sgbGlzdCBhbmQgY2FuIGJlXHJcbiAqIFwiZmlyZWRcIiBtdWx0aXBsZSB0aW1lcy5cclxuICpcclxuICogUG9zc2libGUgb3B0aW9uczpcclxuICpcclxuICpcdG9uY2U6XHRcdFx0d2lsbCBlbnN1cmUgdGhlIGNhbGxiYWNrIGxpc3QgY2FuIG9ubHkgYmUgZmlyZWQgb25jZSAobGlrZSBhIERlZmVycmVkKVxyXG4gKlxyXG4gKlx0bWVtb3J5Olx0XHRcdHdpbGwga2VlcCB0cmFjayBvZiBwcmV2aW91cyB2YWx1ZXMgYW5kIHdpbGwgY2FsbCBhbnkgY2FsbGJhY2sgYWRkZWRcclxuICpcdFx0XHRcdFx0YWZ0ZXIgdGhlIGxpc3QgaGFzIGJlZW4gZmlyZWQgcmlnaHQgYXdheSB3aXRoIHRoZSBsYXRlc3QgXCJtZW1vcml6ZWRcIlxyXG4gKlx0XHRcdFx0XHR2YWx1ZXMgKGxpa2UgYSBEZWZlcnJlZClcclxuICpcclxuICpcdHVuaXF1ZTpcdFx0XHR3aWxsIGVuc3VyZSBhIGNhbGxiYWNrIGNhbiBvbmx5IGJlIGFkZGVkIG9uY2UgKG5vIGR1cGxpY2F0ZSBpbiB0aGUgbGlzdClcclxuICpcclxuICpcdHN0b3BPbkZhbHNlOlx0aW50ZXJydXB0IGNhbGxpbmdzIHdoZW4gYSBjYWxsYmFjayByZXR1cm5zIGZhbHNlXHJcbiAqXHJcbiAqL1xyXG5qUXVlcnkuQ2FsbGJhY2tzID0gZnVuY3Rpb24oIG9wdGlvbnMgKSB7XHJcblxyXG5cdC8vIENvbnZlcnQgb3B0aW9ucyBmcm9tIFN0cmluZy1mb3JtYXR0ZWQgdG8gT2JqZWN0LWZvcm1hdHRlZCBpZiBuZWVkZWRcclxuXHQvLyAod2UgY2hlY2sgaW4gY2FjaGUgZmlyc3QpXHJcblx0b3B0aW9ucyA9IHR5cGVvZiBvcHRpb25zID09PSBcInN0cmluZ1wiID9cclxuXHRcdGNyZWF0ZU9wdGlvbnMoIG9wdGlvbnMgKSA6XHJcblx0XHRqUXVlcnkuZXh0ZW5kKCB7fSwgb3B0aW9ucyApO1xyXG5cclxuXHR2YXIgLy8gRmxhZyB0byBrbm93IGlmIGxpc3QgaXMgY3VycmVudGx5IGZpcmluZ1xyXG5cdFx0ZmlyaW5nLFxyXG5cclxuXHRcdC8vIExhc3QgZmlyZSB2YWx1ZSBmb3Igbm9uLWZvcmdldHRhYmxlIGxpc3RzXHJcblx0XHRtZW1vcnksXHJcblxyXG5cdFx0Ly8gRmxhZyB0byBrbm93IGlmIGxpc3Qgd2FzIGFscmVhZHkgZmlyZWRcclxuXHRcdGZpcmVkLFxyXG5cclxuXHRcdC8vIEZsYWcgdG8gcHJldmVudCBmaXJpbmdcclxuXHRcdGxvY2tlZCxcclxuXHJcblx0XHQvLyBBY3R1YWwgY2FsbGJhY2sgbGlzdFxyXG5cdFx0bGlzdCA9IFtdLFxyXG5cclxuXHRcdC8vIFF1ZXVlIG9mIGV4ZWN1dGlvbiBkYXRhIGZvciByZXBlYXRhYmxlIGxpc3RzXHJcblx0XHRxdWV1ZSA9IFtdLFxyXG5cclxuXHRcdC8vIEluZGV4IG9mIGN1cnJlbnRseSBmaXJpbmcgY2FsbGJhY2sgKG1vZGlmaWVkIGJ5IGFkZC9yZW1vdmUgYXMgbmVlZGVkKVxyXG5cdFx0ZmlyaW5nSW5kZXggPSAtMSxcclxuXHJcblx0XHQvLyBGaXJlIGNhbGxiYWNrc1xyXG5cdFx0ZmlyZSA9IGZ1bmN0aW9uKCkge1xyXG5cclxuXHRcdFx0Ly8gRW5mb3JjZSBzaW5nbGUtZmlyaW5nXHJcblx0XHRcdGxvY2tlZCA9IG9wdGlvbnMub25jZTtcclxuXHJcblx0XHRcdC8vIEV4ZWN1dGUgY2FsbGJhY2tzIGZvciBhbGwgcGVuZGluZyBleGVjdXRpb25zLFxyXG5cdFx0XHQvLyByZXNwZWN0aW5nIGZpcmluZ0luZGV4IG92ZXJyaWRlcyBhbmQgcnVudGltZSBjaGFuZ2VzXHJcblx0XHRcdGZpcmVkID0gZmlyaW5nID0gdHJ1ZTtcclxuXHRcdFx0Zm9yICggOyBxdWV1ZS5sZW5ndGg7IGZpcmluZ0luZGV4ID0gLTEgKSB7XHJcblx0XHRcdFx0bWVtb3J5ID0gcXVldWUuc2hpZnQoKTtcclxuXHRcdFx0XHR3aGlsZSAoICsrZmlyaW5nSW5kZXggPCBsaXN0Lmxlbmd0aCApIHtcclxuXHJcblx0XHRcdFx0XHQvLyBSdW4gY2FsbGJhY2sgYW5kIGNoZWNrIGZvciBlYXJseSB0ZXJtaW5hdGlvblxyXG5cdFx0XHRcdFx0aWYgKCBsaXN0WyBmaXJpbmdJbmRleCBdLmFwcGx5KCBtZW1vcnlbIDAgXSwgbWVtb3J5WyAxIF0gKSA9PT0gZmFsc2UgJiZcclxuXHRcdFx0XHRcdFx0b3B0aW9ucy5zdG9wT25GYWxzZSApIHtcclxuXHJcblx0XHRcdFx0XHRcdC8vIEp1bXAgdG8gZW5kIGFuZCBmb3JnZXQgdGhlIGRhdGEgc28gLmFkZCBkb2Vzbid0IHJlLWZpcmVcclxuXHRcdFx0XHRcdFx0ZmlyaW5nSW5kZXggPSBsaXN0Lmxlbmd0aDtcclxuXHRcdFx0XHRcdFx0bWVtb3J5ID0gZmFsc2U7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHQvLyBGb3JnZXQgdGhlIGRhdGEgaWYgd2UncmUgZG9uZSB3aXRoIGl0XHJcblx0XHRcdGlmICggIW9wdGlvbnMubWVtb3J5ICkge1xyXG5cdFx0XHRcdG1lbW9yeSA9IGZhbHNlO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRmaXJpbmcgPSBmYWxzZTtcclxuXHJcblx0XHRcdC8vIENsZWFuIHVwIGlmIHdlJ3JlIGRvbmUgZmlyaW5nIGZvciBnb29kXHJcblx0XHRcdGlmICggbG9ja2VkICkge1xyXG5cclxuXHRcdFx0XHQvLyBLZWVwIGFuIGVtcHR5IGxpc3QgaWYgd2UgaGF2ZSBkYXRhIGZvciBmdXR1cmUgYWRkIGNhbGxzXHJcblx0XHRcdFx0aWYgKCBtZW1vcnkgKSB7XHJcblx0XHRcdFx0XHRsaXN0ID0gW107XHJcblxyXG5cdFx0XHRcdC8vIE90aGVyd2lzZSwgdGhpcyBvYmplY3QgaXMgc3BlbnRcclxuXHRcdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdFx0bGlzdCA9IFwiXCI7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHR9LFxyXG5cclxuXHRcdC8vIEFjdHVhbCBDYWxsYmFja3Mgb2JqZWN0XHJcblx0XHRzZWxmID0ge1xyXG5cclxuXHRcdFx0Ly8gQWRkIGEgY2FsbGJhY2sgb3IgYSBjb2xsZWN0aW9uIG9mIGNhbGxiYWNrcyB0byB0aGUgbGlzdFxyXG5cdFx0XHRhZGQ6IGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRcdGlmICggbGlzdCApIHtcclxuXHJcblx0XHRcdFx0XHQvLyBJZiB3ZSBoYXZlIG1lbW9yeSBmcm9tIGEgcGFzdCBydW4sIHdlIHNob3VsZCBmaXJlIGFmdGVyIGFkZGluZ1xyXG5cdFx0XHRcdFx0aWYgKCBtZW1vcnkgJiYgIWZpcmluZyApIHtcclxuXHRcdFx0XHRcdFx0ZmlyaW5nSW5kZXggPSBsaXN0Lmxlbmd0aCAtIDE7XHJcblx0XHRcdFx0XHRcdHF1ZXVlLnB1c2goIG1lbW9yeSApO1xyXG5cdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRcdCggZnVuY3Rpb24gYWRkKCBhcmdzICkge1xyXG5cdFx0XHRcdFx0XHRqUXVlcnkuZWFjaCggYXJncywgZnVuY3Rpb24oIF8sIGFyZyApIHtcclxuXHRcdFx0XHRcdFx0XHRpZiAoIGpRdWVyeS5pc0Z1bmN0aW9uKCBhcmcgKSApIHtcclxuXHRcdFx0XHRcdFx0XHRcdGlmICggIW9wdGlvbnMudW5pcXVlIHx8ICFzZWxmLmhhcyggYXJnICkgKSB7XHJcblx0XHRcdFx0XHRcdFx0XHRcdGxpc3QucHVzaCggYXJnICk7XHJcblx0XHRcdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdFx0fSBlbHNlIGlmICggYXJnICYmIGFyZy5sZW5ndGggJiYgalF1ZXJ5LnR5cGUoIGFyZyApICE9PSBcInN0cmluZ1wiICkge1xyXG5cclxuXHRcdFx0XHRcdFx0XHRcdC8vIEluc3BlY3QgcmVjdXJzaXZlbHlcclxuXHRcdFx0XHRcdFx0XHRcdGFkZCggYXJnICk7XHJcblx0XHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHR9ICk7XHJcblx0XHRcdFx0XHR9ICkoIGFyZ3VtZW50cyApO1xyXG5cclxuXHRcdFx0XHRcdGlmICggbWVtb3J5ICYmICFmaXJpbmcgKSB7XHJcblx0XHRcdFx0XHRcdGZpcmUoKTtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9XHJcblx0XHRcdFx0cmV0dXJuIHRoaXM7XHJcblx0XHRcdH0sXHJcblxyXG5cdFx0XHQvLyBSZW1vdmUgYSBjYWxsYmFjayBmcm9tIHRoZSBsaXN0XHJcblx0XHRcdHJlbW92ZTogZnVuY3Rpb24oKSB7XHJcblx0XHRcdFx0alF1ZXJ5LmVhY2goIGFyZ3VtZW50cywgZnVuY3Rpb24oIF8sIGFyZyApIHtcclxuXHRcdFx0XHRcdHZhciBpbmRleDtcclxuXHRcdFx0XHRcdHdoaWxlICggKCBpbmRleCA9IGpRdWVyeS5pbkFycmF5KCBhcmcsIGxpc3QsIGluZGV4ICkgKSA+IC0xICkge1xyXG5cdFx0XHRcdFx0XHRsaXN0LnNwbGljZSggaW5kZXgsIDEgKTtcclxuXHJcblx0XHRcdFx0XHRcdC8vIEhhbmRsZSBmaXJpbmcgaW5kZXhlc1xyXG5cdFx0XHRcdFx0XHRpZiAoIGluZGV4IDw9IGZpcmluZ0luZGV4ICkge1xyXG5cdFx0XHRcdFx0XHRcdGZpcmluZ0luZGV4LS07XHJcblx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9ICk7XHJcblx0XHRcdFx0cmV0dXJuIHRoaXM7XHJcblx0XHRcdH0sXHJcblxyXG5cdFx0XHQvLyBDaGVjayBpZiBhIGdpdmVuIGNhbGxiYWNrIGlzIGluIHRoZSBsaXN0LlxyXG5cdFx0XHQvLyBJZiBubyBhcmd1bWVudCBpcyBnaXZlbiwgcmV0dXJuIHdoZXRoZXIgb3Igbm90IGxpc3QgaGFzIGNhbGxiYWNrcyBhdHRhY2hlZC5cclxuXHRcdFx0aGFzOiBmdW5jdGlvbiggZm4gKSB7XHJcblx0XHRcdFx0cmV0dXJuIGZuID9cclxuXHRcdFx0XHRcdGpRdWVyeS5pbkFycmF5KCBmbiwgbGlzdCApID4gLTEgOlxyXG5cdFx0XHRcdFx0bGlzdC5sZW5ndGggPiAwO1xyXG5cdFx0XHR9LFxyXG5cclxuXHRcdFx0Ly8gUmVtb3ZlIGFsbCBjYWxsYmFja3MgZnJvbSB0aGUgbGlzdFxyXG5cdFx0XHRlbXB0eTogZnVuY3Rpb24oKSB7XHJcblx0XHRcdFx0aWYgKCBsaXN0ICkge1xyXG5cdFx0XHRcdFx0bGlzdCA9IFtdO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHRyZXR1cm4gdGhpcztcclxuXHRcdFx0fSxcclxuXHJcblx0XHRcdC8vIERpc2FibGUgLmZpcmUgYW5kIC5hZGRcclxuXHRcdFx0Ly8gQWJvcnQgYW55IGN1cnJlbnQvcGVuZGluZyBleGVjdXRpb25zXHJcblx0XHRcdC8vIENsZWFyIGFsbCBjYWxsYmFja3MgYW5kIHZhbHVlc1xyXG5cdFx0XHRkaXNhYmxlOiBmdW5jdGlvbigpIHtcclxuXHRcdFx0XHRsb2NrZWQgPSBxdWV1ZSA9IFtdO1xyXG5cdFx0XHRcdGxpc3QgPSBtZW1vcnkgPSBcIlwiO1xyXG5cdFx0XHRcdHJldHVybiB0aGlzO1xyXG5cdFx0XHR9LFxyXG5cdFx0XHRkaXNhYmxlZDogZnVuY3Rpb24oKSB7XHJcblx0XHRcdFx0cmV0dXJuICFsaXN0O1xyXG5cdFx0XHR9LFxyXG5cclxuXHRcdFx0Ly8gRGlzYWJsZSAuZmlyZVxyXG5cdFx0XHQvLyBBbHNvIGRpc2FibGUgLmFkZCB1bmxlc3Mgd2UgaGF2ZSBtZW1vcnkgKHNpbmNlIGl0IHdvdWxkIGhhdmUgbm8gZWZmZWN0KVxyXG5cdFx0XHQvLyBBYm9ydCBhbnkgcGVuZGluZyBleGVjdXRpb25zXHJcblx0XHRcdGxvY2s6IGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRcdGxvY2tlZCA9IHF1ZXVlID0gW107XHJcblx0XHRcdFx0aWYgKCAhbWVtb3J5ICkge1xyXG5cdFx0XHRcdFx0bGlzdCA9IG1lbW9yeSA9IFwiXCI7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHRcdHJldHVybiB0aGlzO1xyXG5cdFx0XHR9LFxyXG5cdFx0XHRsb2NrZWQ6IGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRcdHJldHVybiAhIWxvY2tlZDtcclxuXHRcdFx0fSxcclxuXHJcblx0XHRcdC8vIENhbGwgYWxsIGNhbGxiYWNrcyB3aXRoIHRoZSBnaXZlbiBjb250ZXh0IGFuZCBhcmd1bWVudHNcclxuXHRcdFx0ZmlyZVdpdGg6IGZ1bmN0aW9uKCBjb250ZXh0LCBhcmdzICkge1xyXG5cdFx0XHRcdGlmICggIWxvY2tlZCApIHtcclxuXHRcdFx0XHRcdGFyZ3MgPSBhcmdzIHx8IFtdO1xyXG5cdFx0XHRcdFx0YXJncyA9IFsgY29udGV4dCwgYXJncy5zbGljZSA/IGFyZ3Muc2xpY2UoKSA6IGFyZ3MgXTtcclxuXHRcdFx0XHRcdHF1ZXVlLnB1c2goIGFyZ3MgKTtcclxuXHRcdFx0XHRcdGlmICggIWZpcmluZyApIHtcclxuXHRcdFx0XHRcdFx0ZmlyZSgpO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHRyZXR1cm4gdGhpcztcclxuXHRcdFx0fSxcclxuXHJcblx0XHRcdC8vIENhbGwgYWxsIHRoZSBjYWxsYmFja3Mgd2l0aCB0aGUgZ2l2ZW4gYXJndW1lbnRzXHJcblx0XHRcdGZpcmU6IGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRcdHNlbGYuZmlyZVdpdGgoIHRoaXMsIGFyZ3VtZW50cyApO1xyXG5cdFx0XHRcdHJldHVybiB0aGlzO1xyXG5cdFx0XHR9LFxyXG5cclxuXHRcdFx0Ly8gVG8ga25vdyBpZiB0aGUgY2FsbGJhY2tzIGhhdmUgYWxyZWFkeSBiZWVuIGNhbGxlZCBhdCBsZWFzdCBvbmNlXHJcblx0XHRcdGZpcmVkOiBmdW5jdGlvbigpIHtcclxuXHRcdFx0XHRyZXR1cm4gISFmaXJlZDtcclxuXHRcdFx0fVxyXG5cdFx0fTtcclxuXHJcblx0cmV0dXJuIHNlbGY7XHJcbn07XHJcblxyXG5cclxualF1ZXJ5LmV4dGVuZCgge1xyXG5cclxuXHREZWZlcnJlZDogZnVuY3Rpb24oIGZ1bmMgKSB7XHJcblx0XHR2YXIgdHVwbGVzID0gW1xyXG5cclxuXHRcdFx0XHQvLyBhY3Rpb24sIGFkZCBsaXN0ZW5lciwgbGlzdGVuZXIgbGlzdCwgZmluYWwgc3RhdGVcclxuXHRcdFx0XHRbIFwicmVzb2x2ZVwiLCBcImRvbmVcIiwgalF1ZXJ5LkNhbGxiYWNrcyggXCJvbmNlIG1lbW9yeVwiICksIFwicmVzb2x2ZWRcIiBdLFxyXG5cdFx0XHRcdFsgXCJyZWplY3RcIiwgXCJmYWlsXCIsIGpRdWVyeS5DYWxsYmFja3MoIFwib25jZSBtZW1vcnlcIiApLCBcInJlamVjdGVkXCIgXSxcclxuXHRcdFx0XHRbIFwibm90aWZ5XCIsIFwicHJvZ3Jlc3NcIiwgalF1ZXJ5LkNhbGxiYWNrcyggXCJtZW1vcnlcIiApIF1cclxuXHRcdFx0XSxcclxuXHRcdFx0c3RhdGUgPSBcInBlbmRpbmdcIixcclxuXHRcdFx0cHJvbWlzZSA9IHtcclxuXHRcdFx0XHRzdGF0ZTogZnVuY3Rpb24oKSB7XHJcblx0XHRcdFx0XHRyZXR1cm4gc3RhdGU7XHJcblx0XHRcdFx0fSxcclxuXHRcdFx0XHRhbHdheXM6IGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRcdFx0ZGVmZXJyZWQuZG9uZSggYXJndW1lbnRzICkuZmFpbCggYXJndW1lbnRzICk7XHJcblx0XHRcdFx0XHRyZXR1cm4gdGhpcztcclxuXHRcdFx0XHR9LFxyXG5cdFx0XHRcdHRoZW46IGZ1bmN0aW9uKCAvKiBmbkRvbmUsIGZuRmFpbCwgZm5Qcm9ncmVzcyAqLyApIHtcclxuXHRcdFx0XHRcdHZhciBmbnMgPSBhcmd1bWVudHM7XHJcblx0XHRcdFx0XHRyZXR1cm4galF1ZXJ5LkRlZmVycmVkKCBmdW5jdGlvbiggbmV3RGVmZXIgKSB7XHJcblx0XHRcdFx0XHRcdGpRdWVyeS5lYWNoKCB0dXBsZXMsIGZ1bmN0aW9uKCBpLCB0dXBsZSApIHtcclxuXHRcdFx0XHRcdFx0XHR2YXIgZm4gPSBqUXVlcnkuaXNGdW5jdGlvbiggZm5zWyBpIF0gKSAmJiBmbnNbIGkgXTtcclxuXHJcblx0XHRcdFx0XHRcdFx0Ly8gZGVmZXJyZWRbIGRvbmUgfCBmYWlsIHwgcHJvZ3Jlc3MgXSBmb3IgZm9yd2FyZGluZyBhY3Rpb25zIHRvIG5ld0RlZmVyXHJcblx0XHRcdFx0XHRcdFx0ZGVmZXJyZWRbIHR1cGxlWyAxIF0gXSggZnVuY3Rpb24oKSB7XHJcblx0XHRcdFx0XHRcdFx0XHR2YXIgcmV0dXJuZWQgPSBmbiAmJiBmbi5hcHBseSggdGhpcywgYXJndW1lbnRzICk7XHJcblx0XHRcdFx0XHRcdFx0XHRpZiAoIHJldHVybmVkICYmIGpRdWVyeS5pc0Z1bmN0aW9uKCByZXR1cm5lZC5wcm9taXNlICkgKSB7XHJcblx0XHRcdFx0XHRcdFx0XHRcdHJldHVybmVkLnByb21pc2UoKVxyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC5wcm9ncmVzcyggbmV3RGVmZXIubm90aWZ5IClcclxuXHRcdFx0XHRcdFx0XHRcdFx0XHQuZG9uZSggbmV3RGVmZXIucmVzb2x2ZSApXHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0LmZhaWwoIG5ld0RlZmVyLnJlamVjdCApO1xyXG5cdFx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRcdFx0XHRcdFx0bmV3RGVmZXJbIHR1cGxlWyAwIF0gKyBcIldpdGhcIiBdKFxyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdHRoaXMgPT09IHByb21pc2UgPyBuZXdEZWZlci5wcm9taXNlKCkgOiB0aGlzLFxyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdGZuID8gWyByZXR1cm5lZCBdIDogYXJndW1lbnRzXHJcblx0XHRcdFx0XHRcdFx0XHRcdCk7XHJcblx0XHRcdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdFx0fSApO1xyXG5cdFx0XHRcdFx0XHR9ICk7XHJcblx0XHRcdFx0XHRcdGZucyA9IG51bGw7XHJcblx0XHRcdFx0XHR9ICkucHJvbWlzZSgpO1xyXG5cdFx0XHRcdH0sXHJcblxyXG5cdFx0XHRcdC8vIEdldCBhIHByb21pc2UgZm9yIHRoaXMgZGVmZXJyZWRcclxuXHRcdFx0XHQvLyBJZiBvYmogaXMgcHJvdmlkZWQsIHRoZSBwcm9taXNlIGFzcGVjdCBpcyBhZGRlZCB0byB0aGUgb2JqZWN0XHJcblx0XHRcdFx0cHJvbWlzZTogZnVuY3Rpb24oIG9iaiApIHtcclxuXHRcdFx0XHRcdHJldHVybiBvYmogIT0gbnVsbCA/IGpRdWVyeS5leHRlbmQoIG9iaiwgcHJvbWlzZSApIDogcHJvbWlzZTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH0sXHJcblx0XHRcdGRlZmVycmVkID0ge307XHJcblxyXG5cdFx0Ly8gS2VlcCBwaXBlIGZvciBiYWNrLWNvbXBhdFxyXG5cdFx0cHJvbWlzZS5waXBlID0gcHJvbWlzZS50aGVuO1xyXG5cclxuXHRcdC8vIEFkZCBsaXN0LXNwZWNpZmljIG1ldGhvZHNcclxuXHRcdGpRdWVyeS5lYWNoKCB0dXBsZXMsIGZ1bmN0aW9uKCBpLCB0dXBsZSApIHtcclxuXHRcdFx0dmFyIGxpc3QgPSB0dXBsZVsgMiBdLFxyXG5cdFx0XHRcdHN0YXRlU3RyaW5nID0gdHVwbGVbIDMgXTtcclxuXHJcblx0XHRcdC8vIHByb21pc2VbIGRvbmUgfCBmYWlsIHwgcHJvZ3Jlc3MgXSA9IGxpc3QuYWRkXHJcblx0XHRcdHByb21pc2VbIHR1cGxlWyAxIF0gXSA9IGxpc3QuYWRkO1xyXG5cclxuXHRcdFx0Ly8gSGFuZGxlIHN0YXRlXHJcblx0XHRcdGlmICggc3RhdGVTdHJpbmcgKSB7XHJcblx0XHRcdFx0bGlzdC5hZGQoIGZ1bmN0aW9uKCkge1xyXG5cclxuXHRcdFx0XHRcdC8vIHN0YXRlID0gWyByZXNvbHZlZCB8IHJlamVjdGVkIF1cclxuXHRcdFx0XHRcdHN0YXRlID0gc3RhdGVTdHJpbmc7XHJcblxyXG5cdFx0XHRcdC8vIFsgcmVqZWN0X2xpc3QgfCByZXNvbHZlX2xpc3QgXS5kaXNhYmxlOyBwcm9ncmVzc19saXN0LmxvY2tcclxuXHRcdFx0XHR9LCB0dXBsZXNbIGkgXiAxIF1bIDIgXS5kaXNhYmxlLCB0dXBsZXNbIDIgXVsgMiBdLmxvY2sgKTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0Ly8gZGVmZXJyZWRbIHJlc29sdmUgfCByZWplY3QgfCBub3RpZnkgXVxyXG5cdFx0XHRkZWZlcnJlZFsgdHVwbGVbIDAgXSBdID0gZnVuY3Rpb24oKSB7XHJcblx0XHRcdFx0ZGVmZXJyZWRbIHR1cGxlWyAwIF0gKyBcIldpdGhcIiBdKCB0aGlzID09PSBkZWZlcnJlZCA/IHByb21pc2UgOiB0aGlzLCBhcmd1bWVudHMgKTtcclxuXHRcdFx0XHRyZXR1cm4gdGhpcztcclxuXHRcdFx0fTtcclxuXHRcdFx0ZGVmZXJyZWRbIHR1cGxlWyAwIF0gKyBcIldpdGhcIiBdID0gbGlzdC5maXJlV2l0aDtcclxuXHRcdH0gKTtcclxuXHJcblx0XHQvLyBNYWtlIHRoZSBkZWZlcnJlZCBhIHByb21pc2VcclxuXHRcdHByb21pc2UucHJvbWlzZSggZGVmZXJyZWQgKTtcclxuXHJcblx0XHQvLyBDYWxsIGdpdmVuIGZ1bmMgaWYgYW55XHJcblx0XHRpZiAoIGZ1bmMgKSB7XHJcblx0XHRcdGZ1bmMuY2FsbCggZGVmZXJyZWQsIGRlZmVycmVkICk7XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gQWxsIGRvbmUhXHJcblx0XHRyZXR1cm4gZGVmZXJyZWQ7XHJcblx0fSxcclxuXHJcblx0Ly8gRGVmZXJyZWQgaGVscGVyXHJcblx0d2hlbjogZnVuY3Rpb24oIHN1Ym9yZGluYXRlIC8qICwgLi4uLCBzdWJvcmRpbmF0ZU4gKi8gKSB7XHJcblx0XHR2YXIgaSA9IDAsXHJcblx0XHRcdHJlc29sdmVWYWx1ZXMgPSBzbGljZS5jYWxsKCBhcmd1bWVudHMgKSxcclxuXHRcdFx0bGVuZ3RoID0gcmVzb2x2ZVZhbHVlcy5sZW5ndGgsXHJcblxyXG5cdFx0XHQvLyB0aGUgY291bnQgb2YgdW5jb21wbGV0ZWQgc3Vib3JkaW5hdGVzXHJcblx0XHRcdHJlbWFpbmluZyA9IGxlbmd0aCAhPT0gMSB8fFxyXG5cdFx0XHRcdCggc3Vib3JkaW5hdGUgJiYgalF1ZXJ5LmlzRnVuY3Rpb24oIHN1Ym9yZGluYXRlLnByb21pc2UgKSApID8gbGVuZ3RoIDogMCxcclxuXHJcblx0XHRcdC8vIHRoZSBtYXN0ZXIgRGVmZXJyZWQuXHJcblx0XHRcdC8vIElmIHJlc29sdmVWYWx1ZXMgY29uc2lzdCBvZiBvbmx5IGEgc2luZ2xlIERlZmVycmVkLCBqdXN0IHVzZSB0aGF0LlxyXG5cdFx0XHRkZWZlcnJlZCA9IHJlbWFpbmluZyA9PT0gMSA/IHN1Ym9yZGluYXRlIDogalF1ZXJ5LkRlZmVycmVkKCksXHJcblxyXG5cdFx0XHQvLyBVcGRhdGUgZnVuY3Rpb24gZm9yIGJvdGggcmVzb2x2ZSBhbmQgcHJvZ3Jlc3MgdmFsdWVzXHJcblx0XHRcdHVwZGF0ZUZ1bmMgPSBmdW5jdGlvbiggaSwgY29udGV4dHMsIHZhbHVlcyApIHtcclxuXHRcdFx0XHRyZXR1cm4gZnVuY3Rpb24oIHZhbHVlICkge1xyXG5cdFx0XHRcdFx0Y29udGV4dHNbIGkgXSA9IHRoaXM7XHJcblx0XHRcdFx0XHR2YWx1ZXNbIGkgXSA9IGFyZ3VtZW50cy5sZW5ndGggPiAxID8gc2xpY2UuY2FsbCggYXJndW1lbnRzICkgOiB2YWx1ZTtcclxuXHRcdFx0XHRcdGlmICggdmFsdWVzID09PSBwcm9ncmVzc1ZhbHVlcyApIHtcclxuXHRcdFx0XHRcdFx0ZGVmZXJyZWQubm90aWZ5V2l0aCggY29udGV4dHMsIHZhbHVlcyApO1xyXG5cdFx0XHRcdFx0fSBlbHNlIGlmICggISggLS1yZW1haW5pbmcgKSApIHtcclxuXHRcdFx0XHRcdFx0ZGVmZXJyZWQucmVzb2x2ZVdpdGgoIGNvbnRleHRzLCB2YWx1ZXMgKTtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9O1xyXG5cdFx0XHR9LFxyXG5cclxuXHRcdFx0cHJvZ3Jlc3NWYWx1ZXMsIHByb2dyZXNzQ29udGV4dHMsIHJlc29sdmVDb250ZXh0cztcclxuXHJcblx0XHQvLyBBZGQgbGlzdGVuZXJzIHRvIERlZmVycmVkIHN1Ym9yZGluYXRlczsgdHJlYXQgb3RoZXJzIGFzIHJlc29sdmVkXHJcblx0XHRpZiAoIGxlbmd0aCA+IDEgKSB7XHJcblx0XHRcdHByb2dyZXNzVmFsdWVzID0gbmV3IEFycmF5KCBsZW5ndGggKTtcclxuXHRcdFx0cHJvZ3Jlc3NDb250ZXh0cyA9IG5ldyBBcnJheSggbGVuZ3RoICk7XHJcblx0XHRcdHJlc29sdmVDb250ZXh0cyA9IG5ldyBBcnJheSggbGVuZ3RoICk7XHJcblx0XHRcdGZvciAoIDsgaSA8IGxlbmd0aDsgaSsrICkge1xyXG5cdFx0XHRcdGlmICggcmVzb2x2ZVZhbHVlc1sgaSBdICYmIGpRdWVyeS5pc0Z1bmN0aW9uKCByZXNvbHZlVmFsdWVzWyBpIF0ucHJvbWlzZSApICkge1xyXG5cdFx0XHRcdFx0cmVzb2x2ZVZhbHVlc1sgaSBdLnByb21pc2UoKVxyXG5cdFx0XHRcdFx0XHQucHJvZ3Jlc3MoIHVwZGF0ZUZ1bmMoIGksIHByb2dyZXNzQ29udGV4dHMsIHByb2dyZXNzVmFsdWVzICkgKVxyXG5cdFx0XHRcdFx0XHQuZG9uZSggdXBkYXRlRnVuYyggaSwgcmVzb2x2ZUNvbnRleHRzLCByZXNvbHZlVmFsdWVzICkgKVxyXG5cdFx0XHRcdFx0XHQuZmFpbCggZGVmZXJyZWQucmVqZWN0ICk7XHJcblx0XHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRcdC0tcmVtYWluaW5nO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cclxuXHRcdC8vIElmIHdlJ3JlIG5vdCB3YWl0aW5nIG9uIGFueXRoaW5nLCByZXNvbHZlIHRoZSBtYXN0ZXJcclxuXHRcdGlmICggIXJlbWFpbmluZyApIHtcclxuXHRcdFx0ZGVmZXJyZWQucmVzb2x2ZVdpdGgoIHJlc29sdmVDb250ZXh0cywgcmVzb2x2ZVZhbHVlcyApO1xyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiBkZWZlcnJlZC5wcm9taXNlKCk7XHJcblx0fVxyXG59ICk7XHJcblxyXG5cclxuLy8gVGhlIGRlZmVycmVkIHVzZWQgb24gRE9NIHJlYWR5XHJcbnZhciByZWFkeUxpc3Q7XHJcblxyXG5qUXVlcnkuZm4ucmVhZHkgPSBmdW5jdGlvbiggZm4gKSB7XHJcblxyXG5cdC8vIEFkZCB0aGUgY2FsbGJhY2tcclxuXHRqUXVlcnkucmVhZHkucHJvbWlzZSgpLmRvbmUoIGZuICk7XHJcblxyXG5cdHJldHVybiB0aGlzO1xyXG59O1xyXG5cclxualF1ZXJ5LmV4dGVuZCgge1xyXG5cclxuXHQvLyBJcyB0aGUgRE9NIHJlYWR5IHRvIGJlIHVzZWQ/IFNldCB0byB0cnVlIG9uY2UgaXQgb2NjdXJzLlxyXG5cdGlzUmVhZHk6IGZhbHNlLFxyXG5cclxuXHQvLyBBIGNvdW50ZXIgdG8gdHJhY2sgaG93IG1hbnkgaXRlbXMgdG8gd2FpdCBmb3IgYmVmb3JlXHJcblx0Ly8gdGhlIHJlYWR5IGV2ZW50IGZpcmVzLiBTZWUgIzY3ODFcclxuXHRyZWFkeVdhaXQ6IDEsXHJcblxyXG5cdC8vIEhvbGQgKG9yIHJlbGVhc2UpIHRoZSByZWFkeSBldmVudFxyXG5cdGhvbGRSZWFkeTogZnVuY3Rpb24oIGhvbGQgKSB7XHJcblx0XHRpZiAoIGhvbGQgKSB7XHJcblx0XHRcdGpRdWVyeS5yZWFkeVdhaXQrKztcclxuXHRcdH0gZWxzZSB7XHJcblx0XHRcdGpRdWVyeS5yZWFkeSggdHJ1ZSApO1xyXG5cdFx0fVxyXG5cdH0sXHJcblxyXG5cdC8vIEhhbmRsZSB3aGVuIHRoZSBET00gaXMgcmVhZHlcclxuXHRyZWFkeTogZnVuY3Rpb24oIHdhaXQgKSB7XHJcblxyXG5cdFx0Ly8gQWJvcnQgaWYgdGhlcmUgYXJlIHBlbmRpbmcgaG9sZHMgb3Igd2UncmUgYWxyZWFkeSByZWFkeVxyXG5cdFx0aWYgKCB3YWl0ID09PSB0cnVlID8gLS1qUXVlcnkucmVhZHlXYWl0IDogalF1ZXJ5LmlzUmVhZHkgKSB7XHJcblx0XHRcdHJldHVybjtcclxuXHRcdH1cclxuXHJcblx0XHQvLyBSZW1lbWJlciB0aGF0IHRoZSBET00gaXMgcmVhZHlcclxuXHRcdGpRdWVyeS5pc1JlYWR5ID0gdHJ1ZTtcclxuXHJcblx0XHQvLyBJZiBhIG5vcm1hbCBET00gUmVhZHkgZXZlbnQgZmlyZWQsIGRlY3JlbWVudCwgYW5kIHdhaXQgaWYgbmVlZCBiZVxyXG5cdFx0aWYgKCB3YWl0ICE9PSB0cnVlICYmIC0talF1ZXJ5LnJlYWR5V2FpdCA+IDAgKSB7XHJcblx0XHRcdHJldHVybjtcclxuXHRcdH1cclxuXHJcblx0XHQvLyBJZiB0aGVyZSBhcmUgZnVuY3Rpb25zIGJvdW5kLCB0byBleGVjdXRlXHJcblx0XHRyZWFkeUxpc3QucmVzb2x2ZVdpdGgoIGRvY3VtZW50LCBbIGpRdWVyeSBdICk7XHJcblxyXG5cdFx0Ly8gVHJpZ2dlciBhbnkgYm91bmQgcmVhZHkgZXZlbnRzXHJcblx0XHRpZiAoIGpRdWVyeS5mbi50cmlnZ2VySGFuZGxlciApIHtcclxuXHRcdFx0alF1ZXJ5KCBkb2N1bWVudCApLnRyaWdnZXJIYW5kbGVyKCBcInJlYWR5XCIgKTtcclxuXHRcdFx0alF1ZXJ5KCBkb2N1bWVudCApLm9mZiggXCJyZWFkeVwiICk7XHJcblx0XHR9XHJcblx0fVxyXG59ICk7XHJcblxyXG4vKipcclxuICogVGhlIHJlYWR5IGV2ZW50IGhhbmRsZXIgYW5kIHNlbGYgY2xlYW51cCBtZXRob2RcclxuICovXHJcbmZ1bmN0aW9uIGNvbXBsZXRlZCgpIHtcclxuXHRkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCBcIkRPTUNvbnRlbnRMb2FkZWRcIiwgY29tcGxldGVkICk7XHJcblx0d2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoIFwibG9hZFwiLCBjb21wbGV0ZWQgKTtcclxuXHRqUXVlcnkucmVhZHkoKTtcclxufVxyXG5cclxualF1ZXJ5LnJlYWR5LnByb21pc2UgPSBmdW5jdGlvbiggb2JqICkge1xyXG5cdGlmICggIXJlYWR5TGlzdCApIHtcclxuXHJcblx0XHRyZWFkeUxpc3QgPSBqUXVlcnkuRGVmZXJyZWQoKTtcclxuXHJcblx0XHQvLyBDYXRjaCBjYXNlcyB3aGVyZSAkKGRvY3VtZW50KS5yZWFkeSgpIGlzIGNhbGxlZFxyXG5cdFx0Ly8gYWZ0ZXIgdGhlIGJyb3dzZXIgZXZlbnQgaGFzIGFscmVhZHkgb2NjdXJyZWQuXHJcblx0XHQvLyBTdXBwb3J0OiBJRTktMTAgb25seVxyXG5cdFx0Ly8gT2xkZXIgSUUgc29tZXRpbWVzIHNpZ25hbHMgXCJpbnRlcmFjdGl2ZVwiIHRvbyBzb29uXHJcblx0XHRpZiAoIGRvY3VtZW50LnJlYWR5U3RhdGUgPT09IFwiY29tcGxldGVcIiB8fFxyXG5cdFx0XHQoIGRvY3VtZW50LnJlYWR5U3RhdGUgIT09IFwibG9hZGluZ1wiICYmICFkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuZG9TY3JvbGwgKSApIHtcclxuXHJcblx0XHRcdC8vIEhhbmRsZSBpdCBhc3luY2hyb25vdXNseSB0byBhbGxvdyBzY3JpcHRzIHRoZSBvcHBvcnR1bml0eSB0byBkZWxheSByZWFkeVxyXG5cdFx0XHR3aW5kb3cuc2V0VGltZW91dCggalF1ZXJ5LnJlYWR5ICk7XHJcblxyXG5cdFx0fSBlbHNlIHtcclxuXHJcblx0XHRcdC8vIFVzZSB0aGUgaGFuZHkgZXZlbnQgY2FsbGJhY2tcclxuXHRcdFx0ZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lciggXCJET01Db250ZW50TG9hZGVkXCIsIGNvbXBsZXRlZCApO1xyXG5cclxuXHRcdFx0Ly8gQSBmYWxsYmFjayB0byB3aW5kb3cub25sb2FkLCB0aGF0IHdpbGwgYWx3YXlzIHdvcmtcclxuXHRcdFx0d2luZG93LmFkZEV2ZW50TGlzdGVuZXIoIFwibG9hZFwiLCBjb21wbGV0ZWQgKTtcclxuXHRcdH1cclxuXHR9XHJcblx0cmV0dXJuIHJlYWR5TGlzdC5wcm9taXNlKCBvYmogKTtcclxufTtcclxuXHJcbi8vIEtpY2sgb2ZmIHRoZSBET00gcmVhZHkgY2hlY2sgZXZlbiBpZiB0aGUgdXNlciBkb2VzIG5vdFxyXG5qUXVlcnkucmVhZHkucHJvbWlzZSgpO1xyXG5cclxuXHJcblxyXG5cclxuLy8gTXVsdGlmdW5jdGlvbmFsIG1ldGhvZCB0byBnZXQgYW5kIHNldCB2YWx1ZXMgb2YgYSBjb2xsZWN0aW9uXHJcbi8vIFRoZSB2YWx1ZS9zIGNhbiBvcHRpb25hbGx5IGJlIGV4ZWN1dGVkIGlmIGl0J3MgYSBmdW5jdGlvblxyXG52YXIgYWNjZXNzID0gZnVuY3Rpb24oIGVsZW1zLCBmbiwga2V5LCB2YWx1ZSwgY2hhaW5hYmxlLCBlbXB0eUdldCwgcmF3ICkge1xyXG5cdHZhciBpID0gMCxcclxuXHRcdGxlbiA9IGVsZW1zLmxlbmd0aCxcclxuXHRcdGJ1bGsgPSBrZXkgPT0gbnVsbDtcclxuXHJcblx0Ly8gU2V0cyBtYW55IHZhbHVlc1xyXG5cdGlmICggalF1ZXJ5LnR5cGUoIGtleSApID09PSBcIm9iamVjdFwiICkge1xyXG5cdFx0Y2hhaW5hYmxlID0gdHJ1ZTtcclxuXHRcdGZvciAoIGkgaW4ga2V5ICkge1xyXG5cdFx0XHRhY2Nlc3MoIGVsZW1zLCBmbiwgaSwga2V5WyBpIF0sIHRydWUsIGVtcHR5R2V0LCByYXcgKTtcclxuXHRcdH1cclxuXHJcblx0Ly8gU2V0cyBvbmUgdmFsdWVcclxuXHR9IGVsc2UgaWYgKCB2YWx1ZSAhPT0gdW5kZWZpbmVkICkge1xyXG5cdFx0Y2hhaW5hYmxlID0gdHJ1ZTtcclxuXHJcblx0XHRpZiAoICFqUXVlcnkuaXNGdW5jdGlvbiggdmFsdWUgKSApIHtcclxuXHRcdFx0cmF3ID0gdHJ1ZTtcclxuXHRcdH1cclxuXHJcblx0XHRpZiAoIGJ1bGsgKSB7XHJcblxyXG5cdFx0XHQvLyBCdWxrIG9wZXJhdGlvbnMgcnVuIGFnYWluc3QgdGhlIGVudGlyZSBzZXRcclxuXHRcdFx0aWYgKCByYXcgKSB7XHJcblx0XHRcdFx0Zm4uY2FsbCggZWxlbXMsIHZhbHVlICk7XHJcblx0XHRcdFx0Zm4gPSBudWxsO1xyXG5cclxuXHRcdFx0Ly8gLi4uZXhjZXB0IHdoZW4gZXhlY3V0aW5nIGZ1bmN0aW9uIHZhbHVlc1xyXG5cdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdGJ1bGsgPSBmbjtcclxuXHRcdFx0XHRmbiA9IGZ1bmN0aW9uKCBlbGVtLCBrZXksIHZhbHVlICkge1xyXG5cdFx0XHRcdFx0cmV0dXJuIGJ1bGsuY2FsbCggalF1ZXJ5KCBlbGVtICksIHZhbHVlICk7XHJcblx0XHRcdFx0fTtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cclxuXHRcdGlmICggZm4gKSB7XHJcblx0XHRcdGZvciAoIDsgaSA8IGxlbjsgaSsrICkge1xyXG5cdFx0XHRcdGZuKFxyXG5cdFx0XHRcdFx0ZWxlbXNbIGkgXSwga2V5LCByYXcgP1xyXG5cdFx0XHRcdFx0dmFsdWUgOlxyXG5cdFx0XHRcdFx0dmFsdWUuY2FsbCggZWxlbXNbIGkgXSwgaSwgZm4oIGVsZW1zWyBpIF0sIGtleSApIClcclxuXHRcdFx0XHQpO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0fVxyXG5cclxuXHRyZXR1cm4gY2hhaW5hYmxlID9cclxuXHRcdGVsZW1zIDpcclxuXHJcblx0XHQvLyBHZXRzXHJcblx0XHRidWxrID9cclxuXHRcdFx0Zm4uY2FsbCggZWxlbXMgKSA6XHJcblx0XHRcdGxlbiA/IGZuKCBlbGVtc1sgMCBdLCBrZXkgKSA6IGVtcHR5R2V0O1xyXG59O1xyXG52YXIgYWNjZXB0RGF0YSA9IGZ1bmN0aW9uKCBvd25lciApIHtcclxuXHJcblx0Ly8gQWNjZXB0cyBvbmx5OlxyXG5cdC8vICAtIE5vZGVcclxuXHQvLyAgICAtIE5vZGUuRUxFTUVOVF9OT0RFXHJcblx0Ly8gICAgLSBOb2RlLkRPQ1VNRU5UX05PREVcclxuXHQvLyAgLSBPYmplY3RcclxuXHQvLyAgICAtIEFueVxyXG5cdC8qIGpzaGludCAtVzAxOCAqL1xyXG5cdHJldHVybiBvd25lci5ub2RlVHlwZSA9PT0gMSB8fCBvd25lci5ub2RlVHlwZSA9PT0gOSB8fCAhKCArb3duZXIubm9kZVR5cGUgKTtcclxufTtcclxuXHJcblxyXG5cclxuXHJcbmZ1bmN0aW9uIERhdGEoKSB7XHJcblx0dGhpcy5leHBhbmRvID0galF1ZXJ5LmV4cGFuZG8gKyBEYXRhLnVpZCsrO1xyXG59XHJcblxyXG5EYXRhLnVpZCA9IDE7XHJcblxyXG5EYXRhLnByb3RvdHlwZSA9IHtcclxuXHJcblx0cmVnaXN0ZXI6IGZ1bmN0aW9uKCBvd25lciwgaW5pdGlhbCApIHtcclxuXHRcdHZhciB2YWx1ZSA9IGluaXRpYWwgfHwge307XHJcblxyXG5cdFx0Ly8gSWYgaXQgaXMgYSBub2RlIHVubGlrZWx5IHRvIGJlIHN0cmluZ2lmeS1lZCBvciBsb29wZWQgb3ZlclxyXG5cdFx0Ly8gdXNlIHBsYWluIGFzc2lnbm1lbnRcclxuXHRcdGlmICggb3duZXIubm9kZVR5cGUgKSB7XHJcblx0XHRcdG93bmVyWyB0aGlzLmV4cGFuZG8gXSA9IHZhbHVlO1xyXG5cclxuXHRcdC8vIE90aGVyd2lzZSBzZWN1cmUgaXQgaW4gYSBub24tZW51bWVyYWJsZSwgbm9uLXdyaXRhYmxlIHByb3BlcnR5XHJcblx0XHQvLyBjb25maWd1cmFiaWxpdHkgbXVzdCBiZSB0cnVlIHRvIGFsbG93IHRoZSBwcm9wZXJ0eSB0byBiZVxyXG5cdFx0Ly8gZGVsZXRlZCB3aXRoIHRoZSBkZWxldGUgb3BlcmF0b3JcclxuXHRcdH0gZWxzZSB7XHJcblx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eSggb3duZXIsIHRoaXMuZXhwYW5kbywge1xyXG5cdFx0XHRcdHZhbHVlOiB2YWx1ZSxcclxuXHRcdFx0XHR3cml0YWJsZTogdHJ1ZSxcclxuXHRcdFx0XHRjb25maWd1cmFibGU6IHRydWVcclxuXHRcdFx0fSApO1xyXG5cdFx0fVxyXG5cdFx0cmV0dXJuIG93bmVyWyB0aGlzLmV4cGFuZG8gXTtcclxuXHR9LFxyXG5cdGNhY2hlOiBmdW5jdGlvbiggb3duZXIgKSB7XHJcblxyXG5cdFx0Ly8gV2UgY2FuIGFjY2VwdCBkYXRhIGZvciBub24tZWxlbWVudCBub2RlcyBpbiBtb2Rlcm4gYnJvd3NlcnMsXHJcblx0XHQvLyBidXQgd2Ugc2hvdWxkIG5vdCwgc2VlICM4MzM1LlxyXG5cdFx0Ly8gQWx3YXlzIHJldHVybiBhbiBlbXB0eSBvYmplY3QuXHJcblx0XHRpZiAoICFhY2NlcHREYXRhKCBvd25lciApICkge1xyXG5cdFx0XHRyZXR1cm4ge307XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gQ2hlY2sgaWYgdGhlIG93bmVyIG9iamVjdCBhbHJlYWR5IGhhcyBhIGNhY2hlXHJcblx0XHR2YXIgdmFsdWUgPSBvd25lclsgdGhpcy5leHBhbmRvIF07XHJcblxyXG5cdFx0Ly8gSWYgbm90LCBjcmVhdGUgb25lXHJcblx0XHRpZiAoICF2YWx1ZSApIHtcclxuXHRcdFx0dmFsdWUgPSB7fTtcclxuXHJcblx0XHRcdC8vIFdlIGNhbiBhY2NlcHQgZGF0YSBmb3Igbm9uLWVsZW1lbnQgbm9kZXMgaW4gbW9kZXJuIGJyb3dzZXJzLFxyXG5cdFx0XHQvLyBidXQgd2Ugc2hvdWxkIG5vdCwgc2VlICM4MzM1LlxyXG5cdFx0XHQvLyBBbHdheXMgcmV0dXJuIGFuIGVtcHR5IG9iamVjdC5cclxuXHRcdFx0aWYgKCBhY2NlcHREYXRhKCBvd25lciApICkge1xyXG5cclxuXHRcdFx0XHQvLyBJZiBpdCBpcyBhIG5vZGUgdW5saWtlbHkgdG8gYmUgc3RyaW5naWZ5LWVkIG9yIGxvb3BlZCBvdmVyXHJcblx0XHRcdFx0Ly8gdXNlIHBsYWluIGFzc2lnbm1lbnRcclxuXHRcdFx0XHRpZiAoIG93bmVyLm5vZGVUeXBlICkge1xyXG5cdFx0XHRcdFx0b3duZXJbIHRoaXMuZXhwYW5kbyBdID0gdmFsdWU7XHJcblxyXG5cdFx0XHRcdC8vIE90aGVyd2lzZSBzZWN1cmUgaXQgaW4gYSBub24tZW51bWVyYWJsZSBwcm9wZXJ0eVxyXG5cdFx0XHRcdC8vIGNvbmZpZ3VyYWJsZSBtdXN0IGJlIHRydWUgdG8gYWxsb3cgdGhlIHByb3BlcnR5IHRvIGJlXHJcblx0XHRcdFx0Ly8gZGVsZXRlZCB3aGVuIGRhdGEgaXMgcmVtb3ZlZFxyXG5cdFx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoIG93bmVyLCB0aGlzLmV4cGFuZG8sIHtcclxuXHRcdFx0XHRcdFx0dmFsdWU6IHZhbHVlLFxyXG5cdFx0XHRcdFx0XHRjb25maWd1cmFibGU6IHRydWVcclxuXHRcdFx0XHRcdH0gKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHJcblx0XHRyZXR1cm4gdmFsdWU7XHJcblx0fSxcclxuXHRzZXQ6IGZ1bmN0aW9uKCBvd25lciwgZGF0YSwgdmFsdWUgKSB7XHJcblx0XHR2YXIgcHJvcCxcclxuXHRcdFx0Y2FjaGUgPSB0aGlzLmNhY2hlKCBvd25lciApO1xyXG5cclxuXHRcdC8vIEhhbmRsZTogWyBvd25lciwga2V5LCB2YWx1ZSBdIGFyZ3NcclxuXHRcdGlmICggdHlwZW9mIGRhdGEgPT09IFwic3RyaW5nXCIgKSB7XHJcblx0XHRcdGNhY2hlWyBkYXRhIF0gPSB2YWx1ZTtcclxuXHJcblx0XHQvLyBIYW5kbGU6IFsgb3duZXIsIHsgcHJvcGVydGllcyB9IF0gYXJnc1xyXG5cdFx0fSBlbHNlIHtcclxuXHJcblx0XHRcdC8vIENvcHkgdGhlIHByb3BlcnRpZXMgb25lLWJ5LW9uZSB0byB0aGUgY2FjaGUgb2JqZWN0XHJcblx0XHRcdGZvciAoIHByb3AgaW4gZGF0YSApIHtcclxuXHRcdFx0XHRjYWNoZVsgcHJvcCBdID0gZGF0YVsgcHJvcCBdO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0XHRyZXR1cm4gY2FjaGU7XHJcblx0fSxcclxuXHRnZXQ6IGZ1bmN0aW9uKCBvd25lciwga2V5ICkge1xyXG5cdFx0cmV0dXJuIGtleSA9PT0gdW5kZWZpbmVkID9cclxuXHRcdFx0dGhpcy5jYWNoZSggb3duZXIgKSA6XHJcblx0XHRcdG93bmVyWyB0aGlzLmV4cGFuZG8gXSAmJiBvd25lclsgdGhpcy5leHBhbmRvIF1bIGtleSBdO1xyXG5cdH0sXHJcblx0YWNjZXNzOiBmdW5jdGlvbiggb3duZXIsIGtleSwgdmFsdWUgKSB7XHJcblx0XHR2YXIgc3RvcmVkO1xyXG5cclxuXHRcdC8vIEluIGNhc2VzIHdoZXJlIGVpdGhlcjpcclxuXHRcdC8vXHJcblx0XHQvLyAgIDEuIE5vIGtleSB3YXMgc3BlY2lmaWVkXHJcblx0XHQvLyAgIDIuIEEgc3RyaW5nIGtleSB3YXMgc3BlY2lmaWVkLCBidXQgbm8gdmFsdWUgcHJvdmlkZWRcclxuXHRcdC8vXHJcblx0XHQvLyBUYWtlIHRoZSBcInJlYWRcIiBwYXRoIGFuZCBhbGxvdyB0aGUgZ2V0IG1ldGhvZCB0byBkZXRlcm1pbmVcclxuXHRcdC8vIHdoaWNoIHZhbHVlIHRvIHJldHVybiwgcmVzcGVjdGl2ZWx5IGVpdGhlcjpcclxuXHRcdC8vXHJcblx0XHQvLyAgIDEuIFRoZSBlbnRpcmUgY2FjaGUgb2JqZWN0XHJcblx0XHQvLyAgIDIuIFRoZSBkYXRhIHN0b3JlZCBhdCB0aGUga2V5XHJcblx0XHQvL1xyXG5cdFx0aWYgKCBrZXkgPT09IHVuZGVmaW5lZCB8fFxyXG5cdFx0XHRcdCggKCBrZXkgJiYgdHlwZW9mIGtleSA9PT0gXCJzdHJpbmdcIiApICYmIHZhbHVlID09PSB1bmRlZmluZWQgKSApIHtcclxuXHJcblx0XHRcdHN0b3JlZCA9IHRoaXMuZ2V0KCBvd25lciwga2V5ICk7XHJcblxyXG5cdFx0XHRyZXR1cm4gc3RvcmVkICE9PSB1bmRlZmluZWQgP1xyXG5cdFx0XHRcdHN0b3JlZCA6IHRoaXMuZ2V0KCBvd25lciwgalF1ZXJ5LmNhbWVsQ2FzZSgga2V5ICkgKTtcclxuXHRcdH1cclxuXHJcblx0XHQvLyBXaGVuIHRoZSBrZXkgaXMgbm90IGEgc3RyaW5nLCBvciBib3RoIGEga2V5IGFuZCB2YWx1ZVxyXG5cdFx0Ly8gYXJlIHNwZWNpZmllZCwgc2V0IG9yIGV4dGVuZCAoZXhpc3Rpbmcgb2JqZWN0cykgd2l0aCBlaXRoZXI6XHJcblx0XHQvL1xyXG5cdFx0Ly8gICAxLiBBbiBvYmplY3Qgb2YgcHJvcGVydGllc1xyXG5cdFx0Ly8gICAyLiBBIGtleSBhbmQgdmFsdWVcclxuXHRcdC8vXHJcblx0XHR0aGlzLnNldCggb3duZXIsIGtleSwgdmFsdWUgKTtcclxuXHJcblx0XHQvLyBTaW5jZSB0aGUgXCJzZXRcIiBwYXRoIGNhbiBoYXZlIHR3byBwb3NzaWJsZSBlbnRyeSBwb2ludHNcclxuXHRcdC8vIHJldHVybiB0aGUgZXhwZWN0ZWQgZGF0YSBiYXNlZCBvbiB3aGljaCBwYXRoIHdhcyB0YWtlblsqXVxyXG5cdFx0cmV0dXJuIHZhbHVlICE9PSB1bmRlZmluZWQgPyB2YWx1ZSA6IGtleTtcclxuXHR9LFxyXG5cdHJlbW92ZTogZnVuY3Rpb24oIG93bmVyLCBrZXkgKSB7XHJcblx0XHR2YXIgaSwgbmFtZSwgY2FtZWwsXHJcblx0XHRcdGNhY2hlID0gb3duZXJbIHRoaXMuZXhwYW5kbyBdO1xyXG5cclxuXHRcdGlmICggY2FjaGUgPT09IHVuZGVmaW5lZCApIHtcclxuXHRcdFx0cmV0dXJuO1xyXG5cdFx0fVxyXG5cclxuXHRcdGlmICgga2V5ID09PSB1bmRlZmluZWQgKSB7XHJcblx0XHRcdHRoaXMucmVnaXN0ZXIoIG93bmVyICk7XHJcblxyXG5cdFx0fSBlbHNlIHtcclxuXHJcblx0XHRcdC8vIFN1cHBvcnQgYXJyYXkgb3Igc3BhY2Ugc2VwYXJhdGVkIHN0cmluZyBvZiBrZXlzXHJcblx0XHRcdGlmICggalF1ZXJ5LmlzQXJyYXkoIGtleSApICkge1xyXG5cclxuXHRcdFx0XHQvLyBJZiBcIm5hbWVcIiBpcyBhbiBhcnJheSBvZiBrZXlzLi4uXHJcblx0XHRcdFx0Ly8gV2hlbiBkYXRhIGlzIGluaXRpYWxseSBjcmVhdGVkLCB2aWEgKFwia2V5XCIsIFwidmFsXCIpIHNpZ25hdHVyZSxcclxuXHRcdFx0XHQvLyBrZXlzIHdpbGwgYmUgY29udmVydGVkIHRvIGNhbWVsQ2FzZS5cclxuXHRcdFx0XHQvLyBTaW5jZSB0aGVyZSBpcyBubyB3YXkgdG8gdGVsbCBfaG93XyBhIGtleSB3YXMgYWRkZWQsIHJlbW92ZVxyXG5cdFx0XHRcdC8vIGJvdGggcGxhaW4ga2V5IGFuZCBjYW1lbENhc2Uga2V5LiAjMTI3ODZcclxuXHRcdFx0XHQvLyBUaGlzIHdpbGwgb25seSBwZW5hbGl6ZSB0aGUgYXJyYXkgYXJndW1lbnQgcGF0aC5cclxuXHRcdFx0XHRuYW1lID0ga2V5LmNvbmNhdCgga2V5Lm1hcCggalF1ZXJ5LmNhbWVsQ2FzZSApICk7XHJcblx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0Y2FtZWwgPSBqUXVlcnkuY2FtZWxDYXNlKCBrZXkgKTtcclxuXHJcblx0XHRcdFx0Ly8gVHJ5IHRoZSBzdHJpbmcgYXMgYSBrZXkgYmVmb3JlIGFueSBtYW5pcHVsYXRpb25cclxuXHRcdFx0XHRpZiAoIGtleSBpbiBjYWNoZSApIHtcclxuXHRcdFx0XHRcdG5hbWUgPSBbIGtleSwgY2FtZWwgXTtcclxuXHRcdFx0XHR9IGVsc2Uge1xyXG5cclxuXHRcdFx0XHRcdC8vIElmIGEga2V5IHdpdGggdGhlIHNwYWNlcyBleGlzdHMsIHVzZSBpdC5cclxuXHRcdFx0XHRcdC8vIE90aGVyd2lzZSwgY3JlYXRlIGFuIGFycmF5IGJ5IG1hdGNoaW5nIG5vbi13aGl0ZXNwYWNlXHJcblx0XHRcdFx0XHRuYW1lID0gY2FtZWw7XHJcblx0XHRcdFx0XHRuYW1lID0gbmFtZSBpbiBjYWNoZSA/XHJcblx0XHRcdFx0XHRcdFsgbmFtZSBdIDogKCBuYW1lLm1hdGNoKCBybm90d2hpdGUgKSB8fCBbXSApO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0aSA9IG5hbWUubGVuZ3RoO1xyXG5cclxuXHRcdFx0d2hpbGUgKCBpLS0gKSB7XHJcblx0XHRcdFx0ZGVsZXRlIGNhY2hlWyBuYW1lWyBpIF0gXTtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cclxuXHRcdC8vIFJlbW92ZSB0aGUgZXhwYW5kbyBpZiB0aGVyZSdzIG5vIG1vcmUgZGF0YVxyXG5cdFx0aWYgKCBrZXkgPT09IHVuZGVmaW5lZCB8fCBqUXVlcnkuaXNFbXB0eU9iamVjdCggY2FjaGUgKSApIHtcclxuXHJcblx0XHRcdC8vIFN1cHBvcnQ6IENocm9tZSA8PSAzNS00NStcclxuXHRcdFx0Ly8gV2Via2l0ICYgQmxpbmsgcGVyZm9ybWFuY2Ugc3VmZmVycyB3aGVuIGRlbGV0aW5nIHByb3BlcnRpZXNcclxuXHRcdFx0Ly8gZnJvbSBET00gbm9kZXMsIHNvIHNldCB0byB1bmRlZmluZWQgaW5zdGVhZFxyXG5cdFx0XHQvLyBodHRwczovL2NvZGUuZ29vZ2xlLmNvbS9wL2Nocm9taXVtL2lzc3Vlcy9kZXRhaWw/aWQ9Mzc4NjA3XHJcblx0XHRcdGlmICggb3duZXIubm9kZVR5cGUgKSB7XHJcblx0XHRcdFx0b3duZXJbIHRoaXMuZXhwYW5kbyBdID0gdW5kZWZpbmVkO1xyXG5cdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdGRlbGV0ZSBvd25lclsgdGhpcy5leHBhbmRvIF07XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHR9LFxyXG5cdGhhc0RhdGE6IGZ1bmN0aW9uKCBvd25lciApIHtcclxuXHRcdHZhciBjYWNoZSA9IG93bmVyWyB0aGlzLmV4cGFuZG8gXTtcclxuXHRcdHJldHVybiBjYWNoZSAhPT0gdW5kZWZpbmVkICYmICFqUXVlcnkuaXNFbXB0eU9iamVjdCggY2FjaGUgKTtcclxuXHR9XHJcbn07XHJcbnZhciBkYXRhUHJpdiA9IG5ldyBEYXRhKCk7XHJcblxyXG52YXIgZGF0YVVzZXIgPSBuZXcgRGF0YSgpO1xyXG5cclxuXHJcblxyXG4vL1x0SW1wbGVtZW50YXRpb24gU3VtbWFyeVxyXG4vL1xyXG4vL1x0MS4gRW5mb3JjZSBBUEkgc3VyZmFjZSBhbmQgc2VtYW50aWMgY29tcGF0aWJpbGl0eSB3aXRoIDEuOS54IGJyYW5jaFxyXG4vL1x0Mi4gSW1wcm92ZSB0aGUgbW9kdWxlJ3MgbWFpbnRhaW5hYmlsaXR5IGJ5IHJlZHVjaW5nIHRoZSBzdG9yYWdlXHJcbi8vXHRcdHBhdGhzIHRvIGEgc2luZ2xlIG1lY2hhbmlzbS5cclxuLy9cdDMuIFVzZSB0aGUgc2FtZSBzaW5nbGUgbWVjaGFuaXNtIHRvIHN1cHBvcnQgXCJwcml2YXRlXCIgYW5kIFwidXNlclwiIGRhdGEuXHJcbi8vXHQ0LiBfTmV2ZXJfIGV4cG9zZSBcInByaXZhdGVcIiBkYXRhIHRvIHVzZXIgY29kZSAoVE9ETzogRHJvcCBfZGF0YSwgX3JlbW92ZURhdGEpXHJcbi8vXHQ1LiBBdm9pZCBleHBvc2luZyBpbXBsZW1lbnRhdGlvbiBkZXRhaWxzIG9uIHVzZXIgb2JqZWN0cyAoZWcuIGV4cGFuZG8gcHJvcGVydGllcylcclxuLy9cdDYuIFByb3ZpZGUgYSBjbGVhciBwYXRoIGZvciBpbXBsZW1lbnRhdGlvbiB1cGdyYWRlIHRvIFdlYWtNYXAgaW4gMjAxNFxyXG5cclxudmFyIHJicmFjZSA9IC9eKD86XFx7W1xcd1xcV10qXFx9fFxcW1tcXHdcXFddKlxcXSkkLyxcclxuXHRybXVsdGlEYXNoID0gL1tBLVpdL2c7XHJcblxyXG5mdW5jdGlvbiBkYXRhQXR0ciggZWxlbSwga2V5LCBkYXRhICkge1xyXG5cdHZhciBuYW1lO1xyXG5cclxuXHQvLyBJZiBub3RoaW5nIHdhcyBmb3VuZCBpbnRlcm5hbGx5LCB0cnkgdG8gZmV0Y2ggYW55XHJcblx0Ly8gZGF0YSBmcm9tIHRoZSBIVE1MNSBkYXRhLSogYXR0cmlidXRlXHJcblx0aWYgKCBkYXRhID09PSB1bmRlZmluZWQgJiYgZWxlbS5ub2RlVHlwZSA9PT0gMSApIHtcclxuXHRcdG5hbWUgPSBcImRhdGEtXCIgKyBrZXkucmVwbGFjZSggcm11bHRpRGFzaCwgXCItJCZcIiApLnRvTG93ZXJDYXNlKCk7XHJcblx0XHRkYXRhID0gZWxlbS5nZXRBdHRyaWJ1dGUoIG5hbWUgKTtcclxuXHJcblx0XHRpZiAoIHR5cGVvZiBkYXRhID09PSBcInN0cmluZ1wiICkge1xyXG5cdFx0XHR0cnkge1xyXG5cdFx0XHRcdGRhdGEgPSBkYXRhID09PSBcInRydWVcIiA/IHRydWUgOlxyXG5cdFx0XHRcdFx0ZGF0YSA9PT0gXCJmYWxzZVwiID8gZmFsc2UgOlxyXG5cdFx0XHRcdFx0ZGF0YSA9PT0gXCJudWxsXCIgPyBudWxsIDpcclxuXHJcblx0XHRcdFx0XHQvLyBPbmx5IGNvbnZlcnQgdG8gYSBudW1iZXIgaWYgaXQgZG9lc24ndCBjaGFuZ2UgdGhlIHN0cmluZ1xyXG5cdFx0XHRcdFx0K2RhdGEgKyBcIlwiID09PSBkYXRhID8gK2RhdGEgOlxyXG5cdFx0XHRcdFx0cmJyYWNlLnRlc3QoIGRhdGEgKSA/IGpRdWVyeS5wYXJzZUpTT04oIGRhdGEgKSA6XHJcblx0XHRcdFx0XHRkYXRhO1xyXG5cdFx0XHR9IGNhdGNoICggZSApIHt9XHJcblxyXG5cdFx0XHQvLyBNYWtlIHN1cmUgd2Ugc2V0IHRoZSBkYXRhIHNvIGl0IGlzbid0IGNoYW5nZWQgbGF0ZXJcclxuXHRcdFx0ZGF0YVVzZXIuc2V0KCBlbGVtLCBrZXksIGRhdGEgKTtcclxuXHRcdH0gZWxzZSB7XHJcblx0XHRcdGRhdGEgPSB1bmRlZmluZWQ7XHJcblx0XHR9XHJcblx0fVxyXG5cdHJldHVybiBkYXRhO1xyXG59XHJcblxyXG5qUXVlcnkuZXh0ZW5kKCB7XHJcblx0aGFzRGF0YTogZnVuY3Rpb24oIGVsZW0gKSB7XHJcblx0XHRyZXR1cm4gZGF0YVVzZXIuaGFzRGF0YSggZWxlbSApIHx8IGRhdGFQcml2Lmhhc0RhdGEoIGVsZW0gKTtcclxuXHR9LFxyXG5cclxuXHRkYXRhOiBmdW5jdGlvbiggZWxlbSwgbmFtZSwgZGF0YSApIHtcclxuXHRcdHJldHVybiBkYXRhVXNlci5hY2Nlc3MoIGVsZW0sIG5hbWUsIGRhdGEgKTtcclxuXHR9LFxyXG5cclxuXHRyZW1vdmVEYXRhOiBmdW5jdGlvbiggZWxlbSwgbmFtZSApIHtcclxuXHRcdGRhdGFVc2VyLnJlbW92ZSggZWxlbSwgbmFtZSApO1xyXG5cdH0sXHJcblxyXG5cdC8vIFRPRE86IE5vdyB0aGF0IGFsbCBjYWxscyB0byBfZGF0YSBhbmQgX3JlbW92ZURhdGEgaGF2ZSBiZWVuIHJlcGxhY2VkXHJcblx0Ly8gd2l0aCBkaXJlY3QgY2FsbHMgdG8gZGF0YVByaXYgbWV0aG9kcywgdGhlc2UgY2FuIGJlIGRlcHJlY2F0ZWQuXHJcblx0X2RhdGE6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCBkYXRhICkge1xyXG5cdFx0cmV0dXJuIGRhdGFQcml2LmFjY2VzcyggZWxlbSwgbmFtZSwgZGF0YSApO1xyXG5cdH0sXHJcblxyXG5cdF9yZW1vdmVEYXRhOiBmdW5jdGlvbiggZWxlbSwgbmFtZSApIHtcclxuXHRcdGRhdGFQcml2LnJlbW92ZSggZWxlbSwgbmFtZSApO1xyXG5cdH1cclxufSApO1xyXG5cclxualF1ZXJ5LmZuLmV4dGVuZCgge1xyXG5cdGRhdGE6IGZ1bmN0aW9uKCBrZXksIHZhbHVlICkge1xyXG5cdFx0dmFyIGksIG5hbWUsIGRhdGEsXHJcblx0XHRcdGVsZW0gPSB0aGlzWyAwIF0sXHJcblx0XHRcdGF0dHJzID0gZWxlbSAmJiBlbGVtLmF0dHJpYnV0ZXM7XHJcblxyXG5cdFx0Ly8gR2V0cyBhbGwgdmFsdWVzXHJcblx0XHRpZiAoIGtleSA9PT0gdW5kZWZpbmVkICkge1xyXG5cdFx0XHRpZiAoIHRoaXMubGVuZ3RoICkge1xyXG5cdFx0XHRcdGRhdGEgPSBkYXRhVXNlci5nZXQoIGVsZW0gKTtcclxuXHJcblx0XHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxICYmICFkYXRhUHJpdi5nZXQoIGVsZW0sIFwiaGFzRGF0YUF0dHJzXCIgKSApIHtcclxuXHRcdFx0XHRcdGkgPSBhdHRycy5sZW5ndGg7XHJcblx0XHRcdFx0XHR3aGlsZSAoIGktLSApIHtcclxuXHJcblx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFMTErXHJcblx0XHRcdFx0XHRcdC8vIFRoZSBhdHRycyBlbGVtZW50cyBjYW4gYmUgbnVsbCAoIzE0ODk0KVxyXG5cdFx0XHRcdFx0XHRpZiAoIGF0dHJzWyBpIF0gKSB7XHJcblx0XHRcdFx0XHRcdFx0bmFtZSA9IGF0dHJzWyBpIF0ubmFtZTtcclxuXHRcdFx0XHRcdFx0XHRpZiAoIG5hbWUuaW5kZXhPZiggXCJkYXRhLVwiICkgPT09IDAgKSB7XHJcblx0XHRcdFx0XHRcdFx0XHRuYW1lID0galF1ZXJ5LmNhbWVsQ2FzZSggbmFtZS5zbGljZSggNSApICk7XHJcblx0XHRcdFx0XHRcdFx0XHRkYXRhQXR0ciggZWxlbSwgbmFtZSwgZGF0YVsgbmFtZSBdICk7XHJcblx0XHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRkYXRhUHJpdi5zZXQoIGVsZW0sIFwiaGFzRGF0YUF0dHJzXCIsIHRydWUgKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdHJldHVybiBkYXRhO1xyXG5cdFx0fVxyXG5cclxuXHRcdC8vIFNldHMgbXVsdGlwbGUgdmFsdWVzXHJcblx0XHRpZiAoIHR5cGVvZiBrZXkgPT09IFwib2JqZWN0XCIgKSB7XHJcblx0XHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRcdGRhdGFVc2VyLnNldCggdGhpcywga2V5ICk7XHJcblx0XHRcdH0gKTtcclxuXHRcdH1cclxuXHJcblx0XHRyZXR1cm4gYWNjZXNzKCB0aGlzLCBmdW5jdGlvbiggdmFsdWUgKSB7XHJcblx0XHRcdHZhciBkYXRhLCBjYW1lbEtleTtcclxuXHJcblx0XHRcdC8vIFRoZSBjYWxsaW5nIGpRdWVyeSBvYmplY3QgKGVsZW1lbnQgbWF0Y2hlcykgaXMgbm90IGVtcHR5XHJcblx0XHRcdC8vIChhbmQgdGhlcmVmb3JlIGhhcyBhbiBlbGVtZW50IGFwcGVhcnMgYXQgdGhpc1sgMCBdKSBhbmQgdGhlXHJcblx0XHRcdC8vIGB2YWx1ZWAgcGFyYW1ldGVyIHdhcyBub3QgdW5kZWZpbmVkLiBBbiBlbXB0eSBqUXVlcnkgb2JqZWN0XHJcblx0XHRcdC8vIHdpbGwgcmVzdWx0IGluIGB1bmRlZmluZWRgIGZvciBlbGVtID0gdGhpc1sgMCBdIHdoaWNoIHdpbGxcclxuXHRcdFx0Ly8gdGhyb3cgYW4gZXhjZXB0aW9uIGlmIGFuIGF0dGVtcHQgdG8gcmVhZCBhIGRhdGEgY2FjaGUgaXMgbWFkZS5cclxuXHRcdFx0aWYgKCBlbGVtICYmIHZhbHVlID09PSB1bmRlZmluZWQgKSB7XHJcblxyXG5cdFx0XHRcdC8vIEF0dGVtcHQgdG8gZ2V0IGRhdGEgZnJvbSB0aGUgY2FjaGVcclxuXHRcdFx0XHQvLyB3aXRoIHRoZSBrZXkgYXMtaXNcclxuXHRcdFx0XHRkYXRhID0gZGF0YVVzZXIuZ2V0KCBlbGVtLCBrZXkgKSB8fFxyXG5cclxuXHRcdFx0XHRcdC8vIFRyeSB0byBmaW5kIGRhc2hlZCBrZXkgaWYgaXQgZXhpc3RzIChnaC0yNzc5KVxyXG5cdFx0XHRcdFx0Ly8gVGhpcyBpcyBmb3IgMi4yLnggb25seVxyXG5cdFx0XHRcdFx0ZGF0YVVzZXIuZ2V0KCBlbGVtLCBrZXkucmVwbGFjZSggcm11bHRpRGFzaCwgXCItJCZcIiApLnRvTG93ZXJDYXNlKCkgKTtcclxuXHJcblx0XHRcdFx0aWYgKCBkYXRhICE9PSB1bmRlZmluZWQgKSB7XHJcblx0XHRcdFx0XHRyZXR1cm4gZGF0YTtcclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdGNhbWVsS2V5ID0galF1ZXJ5LmNhbWVsQ2FzZSgga2V5ICk7XHJcblxyXG5cdFx0XHRcdC8vIEF0dGVtcHQgdG8gZ2V0IGRhdGEgZnJvbSB0aGUgY2FjaGVcclxuXHRcdFx0XHQvLyB3aXRoIHRoZSBrZXkgY2FtZWxpemVkXHJcblx0XHRcdFx0ZGF0YSA9IGRhdGFVc2VyLmdldCggZWxlbSwgY2FtZWxLZXkgKTtcclxuXHRcdFx0XHRpZiAoIGRhdGEgIT09IHVuZGVmaW5lZCApIHtcclxuXHRcdFx0XHRcdHJldHVybiBkYXRhO1xyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0Ly8gQXR0ZW1wdCB0byBcImRpc2NvdmVyXCIgdGhlIGRhdGEgaW5cclxuXHRcdFx0XHQvLyBIVE1MNSBjdXN0b20gZGF0YS0qIGF0dHJzXHJcblx0XHRcdFx0ZGF0YSA9IGRhdGFBdHRyKCBlbGVtLCBjYW1lbEtleSwgdW5kZWZpbmVkICk7XHJcblx0XHRcdFx0aWYgKCBkYXRhICE9PSB1bmRlZmluZWQgKSB7XHJcblx0XHRcdFx0XHRyZXR1cm4gZGF0YTtcclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdC8vIFdlIHRyaWVkIHJlYWxseSBoYXJkLCBidXQgdGhlIGRhdGEgZG9lc24ndCBleGlzdC5cclxuXHRcdFx0XHRyZXR1cm47XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdC8vIFNldCB0aGUgZGF0YS4uLlxyXG5cdFx0XHRjYW1lbEtleSA9IGpRdWVyeS5jYW1lbENhc2UoIGtleSApO1xyXG5cdFx0XHR0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xyXG5cclxuXHRcdFx0XHQvLyBGaXJzdCwgYXR0ZW1wdCB0byBzdG9yZSBhIGNvcHkgb3IgcmVmZXJlbmNlIG9mIGFueVxyXG5cdFx0XHRcdC8vIGRhdGEgdGhhdCBtaWdodCd2ZSBiZWVuIHN0b3JlIHdpdGggYSBjYW1lbENhc2VkIGtleS5cclxuXHRcdFx0XHR2YXIgZGF0YSA9IGRhdGFVc2VyLmdldCggdGhpcywgY2FtZWxLZXkgKTtcclxuXHJcblx0XHRcdFx0Ly8gRm9yIEhUTUw1IGRhdGEtKiBhdHRyaWJ1dGUgaW50ZXJvcCwgd2UgaGF2ZSB0b1xyXG5cdFx0XHRcdC8vIHN0b3JlIHByb3BlcnR5IG5hbWVzIHdpdGggZGFzaGVzIGluIGEgY2FtZWxDYXNlIGZvcm0uXHJcblx0XHRcdFx0Ly8gVGhpcyBtaWdodCBub3QgYXBwbHkgdG8gYWxsIHByb3BlcnRpZXMuLi4qXHJcblx0XHRcdFx0ZGF0YVVzZXIuc2V0KCB0aGlzLCBjYW1lbEtleSwgdmFsdWUgKTtcclxuXHJcblx0XHRcdFx0Ly8gKi4uLiBJbiB0aGUgY2FzZSBvZiBwcm9wZXJ0aWVzIHRoYXQgbWlnaHQgX2FjdHVhbGx5X1xyXG5cdFx0XHRcdC8vIGhhdmUgZGFzaGVzLCB3ZSBuZWVkIHRvIGFsc28gc3RvcmUgYSBjb3B5IG9mIHRoYXRcclxuXHRcdFx0XHQvLyB1bmNoYW5nZWQgcHJvcGVydHkuXHJcblx0XHRcdFx0aWYgKCBrZXkuaW5kZXhPZiggXCItXCIgKSA+IC0xICYmIGRhdGEgIT09IHVuZGVmaW5lZCApIHtcclxuXHRcdFx0XHRcdGRhdGFVc2VyLnNldCggdGhpcywga2V5LCB2YWx1ZSApO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fSApO1xyXG5cdFx0fSwgbnVsbCwgdmFsdWUsIGFyZ3VtZW50cy5sZW5ndGggPiAxLCBudWxsLCB0cnVlICk7XHJcblx0fSxcclxuXHJcblx0cmVtb3ZlRGF0YTogZnVuY3Rpb24oIGtleSApIHtcclxuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRkYXRhVXNlci5yZW1vdmUoIHRoaXMsIGtleSApO1xyXG5cdFx0fSApO1xyXG5cdH1cclxufSApO1xyXG5cclxuXHJcbmpRdWVyeS5leHRlbmQoIHtcclxuXHRxdWV1ZTogZnVuY3Rpb24oIGVsZW0sIHR5cGUsIGRhdGEgKSB7XHJcblx0XHR2YXIgcXVldWU7XHJcblxyXG5cdFx0aWYgKCBlbGVtICkge1xyXG5cdFx0XHR0eXBlID0gKCB0eXBlIHx8IFwiZnhcIiApICsgXCJxdWV1ZVwiO1xyXG5cdFx0XHRxdWV1ZSA9IGRhdGFQcml2LmdldCggZWxlbSwgdHlwZSApO1xyXG5cclxuXHRcdFx0Ly8gU3BlZWQgdXAgZGVxdWV1ZSBieSBnZXR0aW5nIG91dCBxdWlja2x5IGlmIHRoaXMgaXMganVzdCBhIGxvb2t1cFxyXG5cdFx0XHRpZiAoIGRhdGEgKSB7XHJcblx0XHRcdFx0aWYgKCAhcXVldWUgfHwgalF1ZXJ5LmlzQXJyYXkoIGRhdGEgKSApIHtcclxuXHRcdFx0XHRcdHF1ZXVlID0gZGF0YVByaXYuYWNjZXNzKCBlbGVtLCB0eXBlLCBqUXVlcnkubWFrZUFycmF5KCBkYXRhICkgKTtcclxuXHRcdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdFx0cXVldWUucHVzaCggZGF0YSApO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0XHRyZXR1cm4gcXVldWUgfHwgW107XHJcblx0XHR9XHJcblx0fSxcclxuXHJcblx0ZGVxdWV1ZTogZnVuY3Rpb24oIGVsZW0sIHR5cGUgKSB7XHJcblx0XHR0eXBlID0gdHlwZSB8fCBcImZ4XCI7XHJcblxyXG5cdFx0dmFyIHF1ZXVlID0galF1ZXJ5LnF1ZXVlKCBlbGVtLCB0eXBlICksXHJcblx0XHRcdHN0YXJ0TGVuZ3RoID0gcXVldWUubGVuZ3RoLFxyXG5cdFx0XHRmbiA9IHF1ZXVlLnNoaWZ0KCksXHJcblx0XHRcdGhvb2tzID0galF1ZXJ5Ll9xdWV1ZUhvb2tzKCBlbGVtLCB0eXBlICksXHJcblx0XHRcdG5leHQgPSBmdW5jdGlvbigpIHtcclxuXHRcdFx0XHRqUXVlcnkuZGVxdWV1ZSggZWxlbSwgdHlwZSApO1xyXG5cdFx0XHR9O1xyXG5cclxuXHRcdC8vIElmIHRoZSBmeCBxdWV1ZSBpcyBkZXF1ZXVlZCwgYWx3YXlzIHJlbW92ZSB0aGUgcHJvZ3Jlc3Mgc2VudGluZWxcclxuXHRcdGlmICggZm4gPT09IFwiaW5wcm9ncmVzc1wiICkge1xyXG5cdFx0XHRmbiA9IHF1ZXVlLnNoaWZ0KCk7XHJcblx0XHRcdHN0YXJ0TGVuZ3RoLS07XHJcblx0XHR9XHJcblxyXG5cdFx0aWYgKCBmbiApIHtcclxuXHJcblx0XHRcdC8vIEFkZCBhIHByb2dyZXNzIHNlbnRpbmVsIHRvIHByZXZlbnQgdGhlIGZ4IHF1ZXVlIGZyb20gYmVpbmdcclxuXHRcdFx0Ly8gYXV0b21hdGljYWxseSBkZXF1ZXVlZFxyXG5cdFx0XHRpZiAoIHR5cGUgPT09IFwiZnhcIiApIHtcclxuXHRcdFx0XHRxdWV1ZS51bnNoaWZ0KCBcImlucHJvZ3Jlc3NcIiApO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHQvLyBDbGVhciB1cCB0aGUgbGFzdCBxdWV1ZSBzdG9wIGZ1bmN0aW9uXHJcblx0XHRcdGRlbGV0ZSBob29rcy5zdG9wO1xyXG5cdFx0XHRmbi5jYWxsKCBlbGVtLCBuZXh0LCBob29rcyApO1xyXG5cdFx0fVxyXG5cclxuXHRcdGlmICggIXN0YXJ0TGVuZ3RoICYmIGhvb2tzICkge1xyXG5cdFx0XHRob29rcy5lbXB0eS5maXJlKCk7XHJcblx0XHR9XHJcblx0fSxcclxuXHJcblx0Ly8gTm90IHB1YmxpYyAtIGdlbmVyYXRlIGEgcXVldWVIb29rcyBvYmplY3QsIG9yIHJldHVybiB0aGUgY3VycmVudCBvbmVcclxuXHRfcXVldWVIb29rczogZnVuY3Rpb24oIGVsZW0sIHR5cGUgKSB7XHJcblx0XHR2YXIga2V5ID0gdHlwZSArIFwicXVldWVIb29rc1wiO1xyXG5cdFx0cmV0dXJuIGRhdGFQcml2LmdldCggZWxlbSwga2V5ICkgfHwgZGF0YVByaXYuYWNjZXNzKCBlbGVtLCBrZXksIHtcclxuXHRcdFx0ZW1wdHk6IGpRdWVyeS5DYWxsYmFja3MoIFwib25jZSBtZW1vcnlcIiApLmFkZCggZnVuY3Rpb24oKSB7XHJcblx0XHRcdFx0ZGF0YVByaXYucmVtb3ZlKCBlbGVtLCBbIHR5cGUgKyBcInF1ZXVlXCIsIGtleSBdICk7XHJcblx0XHRcdH0gKVxyXG5cdFx0fSApO1xyXG5cdH1cclxufSApO1xyXG5cclxualF1ZXJ5LmZuLmV4dGVuZCgge1xyXG5cdHF1ZXVlOiBmdW5jdGlvbiggdHlwZSwgZGF0YSApIHtcclxuXHRcdHZhciBzZXR0ZXIgPSAyO1xyXG5cclxuXHRcdGlmICggdHlwZW9mIHR5cGUgIT09IFwic3RyaW5nXCIgKSB7XHJcblx0XHRcdGRhdGEgPSB0eXBlO1xyXG5cdFx0XHR0eXBlID0gXCJmeFwiO1xyXG5cdFx0XHRzZXR0ZXItLTtcclxuXHRcdH1cclxuXHJcblx0XHRpZiAoIGFyZ3VtZW50cy5sZW5ndGggPCBzZXR0ZXIgKSB7XHJcblx0XHRcdHJldHVybiBqUXVlcnkucXVldWUoIHRoaXNbIDAgXSwgdHlwZSApO1xyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiBkYXRhID09PSB1bmRlZmluZWQgP1xyXG5cdFx0XHR0aGlzIDpcclxuXHRcdFx0dGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcclxuXHRcdFx0XHR2YXIgcXVldWUgPSBqUXVlcnkucXVldWUoIHRoaXMsIHR5cGUsIGRhdGEgKTtcclxuXHJcblx0XHRcdFx0Ly8gRW5zdXJlIGEgaG9va3MgZm9yIHRoaXMgcXVldWVcclxuXHRcdFx0XHRqUXVlcnkuX3F1ZXVlSG9va3MoIHRoaXMsIHR5cGUgKTtcclxuXHJcblx0XHRcdFx0aWYgKCB0eXBlID09PSBcImZ4XCIgJiYgcXVldWVbIDAgXSAhPT0gXCJpbnByb2dyZXNzXCIgKSB7XHJcblx0XHRcdFx0XHRqUXVlcnkuZGVxdWV1ZSggdGhpcywgdHlwZSApO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fSApO1xyXG5cdH0sXHJcblx0ZGVxdWV1ZTogZnVuY3Rpb24oIHR5cGUgKSB7XHJcblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcclxuXHRcdFx0alF1ZXJ5LmRlcXVldWUoIHRoaXMsIHR5cGUgKTtcclxuXHRcdH0gKTtcclxuXHR9LFxyXG5cdGNsZWFyUXVldWU6IGZ1bmN0aW9uKCB0eXBlICkge1xyXG5cdFx0cmV0dXJuIHRoaXMucXVldWUoIHR5cGUgfHwgXCJmeFwiLCBbXSApO1xyXG5cdH0sXHJcblxyXG5cdC8vIEdldCBhIHByb21pc2UgcmVzb2x2ZWQgd2hlbiBxdWV1ZXMgb2YgYSBjZXJ0YWluIHR5cGVcclxuXHQvLyBhcmUgZW1wdGllZCAoZnggaXMgdGhlIHR5cGUgYnkgZGVmYXVsdClcclxuXHRwcm9taXNlOiBmdW5jdGlvbiggdHlwZSwgb2JqICkge1xyXG5cdFx0dmFyIHRtcCxcclxuXHRcdFx0Y291bnQgPSAxLFxyXG5cdFx0XHRkZWZlciA9IGpRdWVyeS5EZWZlcnJlZCgpLFxyXG5cdFx0XHRlbGVtZW50cyA9IHRoaXMsXHJcblx0XHRcdGkgPSB0aGlzLmxlbmd0aCxcclxuXHRcdFx0cmVzb2x2ZSA9IGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRcdGlmICggISggLS1jb3VudCApICkge1xyXG5cdFx0XHRcdFx0ZGVmZXIucmVzb2x2ZVdpdGgoIGVsZW1lbnRzLCBbIGVsZW1lbnRzIF0gKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH07XHJcblxyXG5cdFx0aWYgKCB0eXBlb2YgdHlwZSAhPT0gXCJzdHJpbmdcIiApIHtcclxuXHRcdFx0b2JqID0gdHlwZTtcclxuXHRcdFx0dHlwZSA9IHVuZGVmaW5lZDtcclxuXHRcdH1cclxuXHRcdHR5cGUgPSB0eXBlIHx8IFwiZnhcIjtcclxuXHJcblx0XHR3aGlsZSAoIGktLSApIHtcclxuXHRcdFx0dG1wID0gZGF0YVByaXYuZ2V0KCBlbGVtZW50c1sgaSBdLCB0eXBlICsgXCJxdWV1ZUhvb2tzXCIgKTtcclxuXHRcdFx0aWYgKCB0bXAgJiYgdG1wLmVtcHR5ICkge1xyXG5cdFx0XHRcdGNvdW50Kys7XHJcblx0XHRcdFx0dG1wLmVtcHR5LmFkZCggcmVzb2x2ZSApO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0XHRyZXNvbHZlKCk7XHJcblx0XHRyZXR1cm4gZGVmZXIucHJvbWlzZSggb2JqICk7XHJcblx0fVxyXG59ICk7XHJcbnZhciBwbnVtID0gKCAvWystXT8oPzpcXGQqXFwufClcXGQrKD86W2VFXVsrLV0/XFxkK3wpLyApLnNvdXJjZTtcclxuXHJcbnZhciByY3NzTnVtID0gbmV3IFJlZ0V4cCggXCJeKD86KFsrLV0pPXwpKFwiICsgcG51bSArIFwiKShbYS16JV0qKSRcIiwgXCJpXCIgKTtcclxuXHJcblxyXG52YXIgY3NzRXhwYW5kID0gWyBcIlRvcFwiLCBcIlJpZ2h0XCIsIFwiQm90dG9tXCIsIFwiTGVmdFwiIF07XHJcblxyXG52YXIgaXNIaWRkZW4gPSBmdW5jdGlvbiggZWxlbSwgZWwgKSB7XHJcblxyXG5cdFx0Ly8gaXNIaWRkZW4gbWlnaHQgYmUgY2FsbGVkIGZyb20galF1ZXJ5I2ZpbHRlciBmdW5jdGlvbjtcclxuXHRcdC8vIGluIHRoYXQgY2FzZSwgZWxlbWVudCB3aWxsIGJlIHNlY29uZCBhcmd1bWVudFxyXG5cdFx0ZWxlbSA9IGVsIHx8IGVsZW07XHJcblx0XHRyZXR1cm4galF1ZXJ5LmNzcyggZWxlbSwgXCJkaXNwbGF5XCIgKSA9PT0gXCJub25lXCIgfHxcclxuXHRcdFx0IWpRdWVyeS5jb250YWlucyggZWxlbS5vd25lckRvY3VtZW50LCBlbGVtICk7XHJcblx0fTtcclxuXHJcblxyXG5cclxuZnVuY3Rpb24gYWRqdXN0Q1NTKCBlbGVtLCBwcm9wLCB2YWx1ZVBhcnRzLCB0d2VlbiApIHtcclxuXHR2YXIgYWRqdXN0ZWQsXHJcblx0XHRzY2FsZSA9IDEsXHJcblx0XHRtYXhJdGVyYXRpb25zID0gMjAsXHJcblx0XHRjdXJyZW50VmFsdWUgPSB0d2VlbiA/XHJcblx0XHRcdGZ1bmN0aW9uKCkgeyByZXR1cm4gdHdlZW4uY3VyKCk7IH0gOlxyXG5cdFx0XHRmdW5jdGlvbigpIHsgcmV0dXJuIGpRdWVyeS5jc3MoIGVsZW0sIHByb3AsIFwiXCIgKTsgfSxcclxuXHRcdGluaXRpYWwgPSBjdXJyZW50VmFsdWUoKSxcclxuXHRcdHVuaXQgPSB2YWx1ZVBhcnRzICYmIHZhbHVlUGFydHNbIDMgXSB8fCAoIGpRdWVyeS5jc3NOdW1iZXJbIHByb3AgXSA/IFwiXCIgOiBcInB4XCIgKSxcclxuXHJcblx0XHQvLyBTdGFydGluZyB2YWx1ZSBjb21wdXRhdGlvbiBpcyByZXF1aXJlZCBmb3IgcG90ZW50aWFsIHVuaXQgbWlzbWF0Y2hlc1xyXG5cdFx0aW5pdGlhbEluVW5pdCA9ICggalF1ZXJ5LmNzc051bWJlclsgcHJvcCBdIHx8IHVuaXQgIT09IFwicHhcIiAmJiAraW5pdGlhbCApICYmXHJcblx0XHRcdHJjc3NOdW0uZXhlYyggalF1ZXJ5LmNzcyggZWxlbSwgcHJvcCApICk7XHJcblxyXG5cdGlmICggaW5pdGlhbEluVW5pdCAmJiBpbml0aWFsSW5Vbml0WyAzIF0gIT09IHVuaXQgKSB7XHJcblxyXG5cdFx0Ly8gVHJ1c3QgdW5pdHMgcmVwb3J0ZWQgYnkgalF1ZXJ5LmNzc1xyXG5cdFx0dW5pdCA9IHVuaXQgfHwgaW5pdGlhbEluVW5pdFsgMyBdO1xyXG5cclxuXHRcdC8vIE1ha2Ugc3VyZSB3ZSB1cGRhdGUgdGhlIHR3ZWVuIHByb3BlcnRpZXMgbGF0ZXIgb25cclxuXHRcdHZhbHVlUGFydHMgPSB2YWx1ZVBhcnRzIHx8IFtdO1xyXG5cclxuXHRcdC8vIEl0ZXJhdGl2ZWx5IGFwcHJveGltYXRlIGZyb20gYSBub256ZXJvIHN0YXJ0aW5nIHBvaW50XHJcblx0XHRpbml0aWFsSW5Vbml0ID0gK2luaXRpYWwgfHwgMTtcclxuXHJcblx0XHRkbyB7XHJcblxyXG5cdFx0XHQvLyBJZiBwcmV2aW91cyBpdGVyYXRpb24gemVyb2VkIG91dCwgZG91YmxlIHVudGlsIHdlIGdldCAqc29tZXRoaW5nKi5cclxuXHRcdFx0Ly8gVXNlIHN0cmluZyBmb3IgZG91Ymxpbmcgc28gd2UgZG9uJ3QgYWNjaWRlbnRhbGx5IHNlZSBzY2FsZSBhcyB1bmNoYW5nZWQgYmVsb3dcclxuXHRcdFx0c2NhbGUgPSBzY2FsZSB8fCBcIi41XCI7XHJcblxyXG5cdFx0XHQvLyBBZGp1c3QgYW5kIGFwcGx5XHJcblx0XHRcdGluaXRpYWxJblVuaXQgPSBpbml0aWFsSW5Vbml0IC8gc2NhbGU7XHJcblx0XHRcdGpRdWVyeS5zdHlsZSggZWxlbSwgcHJvcCwgaW5pdGlhbEluVW5pdCArIHVuaXQgKTtcclxuXHJcblx0XHQvLyBVcGRhdGUgc2NhbGUsIHRvbGVyYXRpbmcgemVybyBvciBOYU4gZnJvbSB0d2Vlbi5jdXIoKVxyXG5cdFx0Ly8gQnJlYWsgdGhlIGxvb3AgaWYgc2NhbGUgaXMgdW5jaGFuZ2VkIG9yIHBlcmZlY3QsIG9yIGlmIHdlJ3ZlIGp1c3QgaGFkIGVub3VnaC5cclxuXHRcdH0gd2hpbGUgKFxyXG5cdFx0XHRzY2FsZSAhPT0gKCBzY2FsZSA9IGN1cnJlbnRWYWx1ZSgpIC8gaW5pdGlhbCApICYmIHNjYWxlICE9PSAxICYmIC0tbWF4SXRlcmF0aW9uc1xyXG5cdFx0KTtcclxuXHR9XHJcblxyXG5cdGlmICggdmFsdWVQYXJ0cyApIHtcclxuXHRcdGluaXRpYWxJblVuaXQgPSAraW5pdGlhbEluVW5pdCB8fCAraW5pdGlhbCB8fCAwO1xyXG5cclxuXHRcdC8vIEFwcGx5IHJlbGF0aXZlIG9mZnNldCAoKz0vLT0pIGlmIHNwZWNpZmllZFxyXG5cdFx0YWRqdXN0ZWQgPSB2YWx1ZVBhcnRzWyAxIF0gP1xyXG5cdFx0XHRpbml0aWFsSW5Vbml0ICsgKCB2YWx1ZVBhcnRzWyAxIF0gKyAxICkgKiB2YWx1ZVBhcnRzWyAyIF0gOlxyXG5cdFx0XHQrdmFsdWVQYXJ0c1sgMiBdO1xyXG5cdFx0aWYgKCB0d2VlbiApIHtcclxuXHRcdFx0dHdlZW4udW5pdCA9IHVuaXQ7XHJcblx0XHRcdHR3ZWVuLnN0YXJ0ID0gaW5pdGlhbEluVW5pdDtcclxuXHRcdFx0dHdlZW4uZW5kID0gYWRqdXN0ZWQ7XHJcblx0XHR9XHJcblx0fVxyXG5cdHJldHVybiBhZGp1c3RlZDtcclxufVxyXG52YXIgcmNoZWNrYWJsZVR5cGUgPSAoIC9eKD86Y2hlY2tib3h8cmFkaW8pJC9pICk7XHJcblxyXG52YXIgcnRhZ05hbWUgPSAoIC88KFtcXHc6LV0rKS8gKTtcclxuXHJcbnZhciByc2NyaXB0VHlwZSA9ICggL14kfFxcLyg/OmphdmF8ZWNtYSlzY3JpcHQvaSApO1xyXG5cclxuXHJcblxyXG4vLyBXZSBoYXZlIHRvIGNsb3NlIHRoZXNlIHRhZ3MgdG8gc3VwcG9ydCBYSFRNTCAoIzEzMjAwKVxyXG52YXIgd3JhcE1hcCA9IHtcclxuXHJcblx0Ly8gU3VwcG9ydDogSUU5XHJcblx0b3B0aW9uOiBbIDEsIFwiPHNlbGVjdCBtdWx0aXBsZT0nbXVsdGlwbGUnPlwiLCBcIjwvc2VsZWN0PlwiIF0sXHJcblxyXG5cdC8vIFhIVE1MIHBhcnNlcnMgZG8gbm90IG1hZ2ljYWxseSBpbnNlcnQgZWxlbWVudHMgaW4gdGhlXHJcblx0Ly8gc2FtZSB3YXkgdGhhdCB0YWcgc291cCBwYXJzZXJzIGRvLiBTbyB3ZSBjYW5ub3Qgc2hvcnRlblxyXG5cdC8vIHRoaXMgYnkgb21pdHRpbmcgPHRib2R5PiBvciBvdGhlciByZXF1aXJlZCBlbGVtZW50cy5cclxuXHR0aGVhZDogWyAxLCBcIjx0YWJsZT5cIiwgXCI8L3RhYmxlPlwiIF0sXHJcblx0Y29sOiBbIDIsIFwiPHRhYmxlPjxjb2xncm91cD5cIiwgXCI8L2NvbGdyb3VwPjwvdGFibGU+XCIgXSxcclxuXHR0cjogWyAyLCBcIjx0YWJsZT48dGJvZHk+XCIsIFwiPC90Ym9keT48L3RhYmxlPlwiIF0sXHJcblx0dGQ6IFsgMywgXCI8dGFibGU+PHRib2R5Pjx0cj5cIiwgXCI8L3RyPjwvdGJvZHk+PC90YWJsZT5cIiBdLFxyXG5cclxuXHRfZGVmYXVsdDogWyAwLCBcIlwiLCBcIlwiIF1cclxufTtcclxuXHJcbi8vIFN1cHBvcnQ6IElFOVxyXG53cmFwTWFwLm9wdGdyb3VwID0gd3JhcE1hcC5vcHRpb247XHJcblxyXG53cmFwTWFwLnRib2R5ID0gd3JhcE1hcC50Zm9vdCA9IHdyYXBNYXAuY29sZ3JvdXAgPSB3cmFwTWFwLmNhcHRpb24gPSB3cmFwTWFwLnRoZWFkO1xyXG53cmFwTWFwLnRoID0gd3JhcE1hcC50ZDtcclxuXHJcblxyXG5mdW5jdGlvbiBnZXRBbGwoIGNvbnRleHQsIHRhZyApIHtcclxuXHJcblx0Ly8gU3VwcG9ydDogSUU5LTExK1xyXG5cdC8vIFVzZSB0eXBlb2YgdG8gYXZvaWQgemVyby1hcmd1bWVudCBtZXRob2QgaW52b2NhdGlvbiBvbiBob3N0IG9iamVjdHMgKCMxNTE1MSlcclxuXHR2YXIgcmV0ID0gdHlwZW9mIGNvbnRleHQuZ2V0RWxlbWVudHNCeVRhZ05hbWUgIT09IFwidW5kZWZpbmVkXCIgP1xyXG5cdFx0XHRjb250ZXh0LmdldEVsZW1lbnRzQnlUYWdOYW1lKCB0YWcgfHwgXCIqXCIgKSA6XHJcblx0XHRcdHR5cGVvZiBjb250ZXh0LnF1ZXJ5U2VsZWN0b3JBbGwgIT09IFwidW5kZWZpbmVkXCIgP1xyXG5cdFx0XHRcdGNvbnRleHQucXVlcnlTZWxlY3RvckFsbCggdGFnIHx8IFwiKlwiICkgOlxyXG5cdFx0XHRbXTtcclxuXHJcblx0cmV0dXJuIHRhZyA9PT0gdW5kZWZpbmVkIHx8IHRhZyAmJiBqUXVlcnkubm9kZU5hbWUoIGNvbnRleHQsIHRhZyApID9cclxuXHRcdGpRdWVyeS5tZXJnZSggWyBjb250ZXh0IF0sIHJldCApIDpcclxuXHRcdHJldDtcclxufVxyXG5cclxuXHJcbi8vIE1hcmsgc2NyaXB0cyBhcyBoYXZpbmcgYWxyZWFkeSBiZWVuIGV2YWx1YXRlZFxyXG5mdW5jdGlvbiBzZXRHbG9iYWxFdmFsKCBlbGVtcywgcmVmRWxlbWVudHMgKSB7XHJcblx0dmFyIGkgPSAwLFxyXG5cdFx0bCA9IGVsZW1zLmxlbmd0aDtcclxuXHJcblx0Zm9yICggOyBpIDwgbDsgaSsrICkge1xyXG5cdFx0ZGF0YVByaXYuc2V0KFxyXG5cdFx0XHRlbGVtc1sgaSBdLFxyXG5cdFx0XHRcImdsb2JhbEV2YWxcIixcclxuXHRcdFx0IXJlZkVsZW1lbnRzIHx8IGRhdGFQcml2LmdldCggcmVmRWxlbWVudHNbIGkgXSwgXCJnbG9iYWxFdmFsXCIgKVxyXG5cdFx0KTtcclxuXHR9XHJcbn1cclxuXHJcblxyXG52YXIgcmh0bWwgPSAvPHwmIz9cXHcrOy87XHJcblxyXG5mdW5jdGlvbiBidWlsZEZyYWdtZW50KCBlbGVtcywgY29udGV4dCwgc2NyaXB0cywgc2VsZWN0aW9uLCBpZ25vcmVkICkge1xyXG5cdHZhciBlbGVtLCB0bXAsIHRhZywgd3JhcCwgY29udGFpbnMsIGosXHJcblx0XHRmcmFnbWVudCA9IGNvbnRleHQuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpLFxyXG5cdFx0bm9kZXMgPSBbXSxcclxuXHRcdGkgPSAwLFxyXG5cdFx0bCA9IGVsZW1zLmxlbmd0aDtcclxuXHJcblx0Zm9yICggOyBpIDwgbDsgaSsrICkge1xyXG5cdFx0ZWxlbSA9IGVsZW1zWyBpIF07XHJcblxyXG5cdFx0aWYgKCBlbGVtIHx8IGVsZW0gPT09IDAgKSB7XHJcblxyXG5cdFx0XHQvLyBBZGQgbm9kZXMgZGlyZWN0bHlcclxuXHRcdFx0aWYgKCBqUXVlcnkudHlwZSggZWxlbSApID09PSBcIm9iamVjdFwiICkge1xyXG5cclxuXHRcdFx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkPDQuMSwgUGhhbnRvbUpTPDJcclxuXHRcdFx0XHQvLyBwdXNoLmFwcGx5KF8sIGFycmF5bGlrZSkgdGhyb3dzIG9uIGFuY2llbnQgV2ViS2l0XHJcblx0XHRcdFx0alF1ZXJ5Lm1lcmdlKCBub2RlcywgZWxlbS5ub2RlVHlwZSA/IFsgZWxlbSBdIDogZWxlbSApO1xyXG5cclxuXHRcdFx0Ly8gQ29udmVydCBub24taHRtbCBpbnRvIGEgdGV4dCBub2RlXHJcblx0XHRcdH0gZWxzZSBpZiAoICFyaHRtbC50ZXN0KCBlbGVtICkgKSB7XHJcblx0XHRcdFx0bm9kZXMucHVzaCggY29udGV4dC5jcmVhdGVUZXh0Tm9kZSggZWxlbSApICk7XHJcblxyXG5cdFx0XHQvLyBDb252ZXJ0IGh0bWwgaW50byBET00gbm9kZXNcclxuXHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHR0bXAgPSB0bXAgfHwgZnJhZ21lbnQuYXBwZW5kQ2hpbGQoIGNvbnRleHQuY3JlYXRlRWxlbWVudCggXCJkaXZcIiApICk7XHJcblxyXG5cdFx0XHRcdC8vIERlc2VyaWFsaXplIGEgc3RhbmRhcmQgcmVwcmVzZW50YXRpb25cclxuXHRcdFx0XHR0YWcgPSAoIHJ0YWdOYW1lLmV4ZWMoIGVsZW0gKSB8fCBbIFwiXCIsIFwiXCIgXSApWyAxIF0udG9Mb3dlckNhc2UoKTtcclxuXHRcdFx0XHR3cmFwID0gd3JhcE1hcFsgdGFnIF0gfHwgd3JhcE1hcC5fZGVmYXVsdDtcclxuXHRcdFx0XHR0bXAuaW5uZXJIVE1MID0gd3JhcFsgMSBdICsgalF1ZXJ5Lmh0bWxQcmVmaWx0ZXIoIGVsZW0gKSArIHdyYXBbIDIgXTtcclxuXHJcblx0XHRcdFx0Ly8gRGVzY2VuZCB0aHJvdWdoIHdyYXBwZXJzIHRvIHRoZSByaWdodCBjb250ZW50XHJcblx0XHRcdFx0aiA9IHdyYXBbIDAgXTtcclxuXHRcdFx0XHR3aGlsZSAoIGotLSApIHtcclxuXHRcdFx0XHRcdHRtcCA9IHRtcC5sYXN0Q2hpbGQ7XHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkPDQuMSwgUGhhbnRvbUpTPDJcclxuXHRcdFx0XHQvLyBwdXNoLmFwcGx5KF8sIGFycmF5bGlrZSkgdGhyb3dzIG9uIGFuY2llbnQgV2ViS2l0XHJcblx0XHRcdFx0alF1ZXJ5Lm1lcmdlKCBub2RlcywgdG1wLmNoaWxkTm9kZXMgKTtcclxuXHJcblx0XHRcdFx0Ly8gUmVtZW1iZXIgdGhlIHRvcC1sZXZlbCBjb250YWluZXJcclxuXHRcdFx0XHR0bXAgPSBmcmFnbWVudC5maXJzdENoaWxkO1xyXG5cclxuXHRcdFx0XHQvLyBFbnN1cmUgdGhlIGNyZWF0ZWQgbm9kZXMgYXJlIG9ycGhhbmVkICgjMTIzOTIpXHJcblx0XHRcdFx0dG1wLnRleHRDb250ZW50ID0gXCJcIjtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdH1cclxuXHJcblx0Ly8gUmVtb3ZlIHdyYXBwZXIgZnJvbSBmcmFnbWVudFxyXG5cdGZyYWdtZW50LnRleHRDb250ZW50ID0gXCJcIjtcclxuXHJcblx0aSA9IDA7XHJcblx0d2hpbGUgKCAoIGVsZW0gPSBub2Rlc1sgaSsrIF0gKSApIHtcclxuXHJcblx0XHQvLyBTa2lwIGVsZW1lbnRzIGFscmVhZHkgaW4gdGhlIGNvbnRleHQgY29sbGVjdGlvbiAodHJhYy00MDg3KVxyXG5cdFx0aWYgKCBzZWxlY3Rpb24gJiYgalF1ZXJ5LmluQXJyYXkoIGVsZW0sIHNlbGVjdGlvbiApID4gLTEgKSB7XHJcblx0XHRcdGlmICggaWdub3JlZCApIHtcclxuXHRcdFx0XHRpZ25vcmVkLnB1c2goIGVsZW0gKTtcclxuXHRcdFx0fVxyXG5cdFx0XHRjb250aW51ZTtcclxuXHRcdH1cclxuXHJcblx0XHRjb250YWlucyA9IGpRdWVyeS5jb250YWlucyggZWxlbS5vd25lckRvY3VtZW50LCBlbGVtICk7XHJcblxyXG5cdFx0Ly8gQXBwZW5kIHRvIGZyYWdtZW50XHJcblx0XHR0bXAgPSBnZXRBbGwoIGZyYWdtZW50LmFwcGVuZENoaWxkKCBlbGVtICksIFwic2NyaXB0XCIgKTtcclxuXHJcblx0XHQvLyBQcmVzZXJ2ZSBzY3JpcHQgZXZhbHVhdGlvbiBoaXN0b3J5XHJcblx0XHRpZiAoIGNvbnRhaW5zICkge1xyXG5cdFx0XHRzZXRHbG9iYWxFdmFsKCB0bXAgKTtcclxuXHRcdH1cclxuXHJcblx0XHQvLyBDYXB0dXJlIGV4ZWN1dGFibGVzXHJcblx0XHRpZiAoIHNjcmlwdHMgKSB7XHJcblx0XHRcdGogPSAwO1xyXG5cdFx0XHR3aGlsZSAoICggZWxlbSA9IHRtcFsgaisrIF0gKSApIHtcclxuXHRcdFx0XHRpZiAoIHJzY3JpcHRUeXBlLnRlc3QoIGVsZW0udHlwZSB8fCBcIlwiICkgKSB7XHJcblx0XHRcdFx0XHRzY3JpcHRzLnB1c2goIGVsZW0gKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHR9XHJcblxyXG5cdHJldHVybiBmcmFnbWVudDtcclxufVxyXG5cclxuXHJcbiggZnVuY3Rpb24oKSB7XHJcblx0dmFyIGZyYWdtZW50ID0gZG9jdW1lbnQuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpLFxyXG5cdFx0ZGl2ID0gZnJhZ21lbnQuYXBwZW5kQ2hpbGQoIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiZGl2XCIgKSApLFxyXG5cdFx0aW5wdXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImlucHV0XCIgKTtcclxuXHJcblx0Ly8gU3VwcG9ydDogQW5kcm9pZCA0LjAtNC4zLCBTYWZhcmk8PTUuMVxyXG5cdC8vIENoZWNrIHN0YXRlIGxvc3QgaWYgdGhlIG5hbWUgaXMgc2V0ICgjMTEyMTcpXHJcblx0Ly8gU3VwcG9ydDogV2luZG93cyBXZWIgQXBwcyAoV1dBKVxyXG5cdC8vIGBuYW1lYCBhbmQgYHR5cGVgIG11c3QgdXNlIC5zZXRBdHRyaWJ1dGUgZm9yIFdXQSAoIzE0OTAxKVxyXG5cdGlucHV0LnNldEF0dHJpYnV0ZSggXCJ0eXBlXCIsIFwicmFkaW9cIiApO1xyXG5cdGlucHV0LnNldEF0dHJpYnV0ZSggXCJjaGVja2VkXCIsIFwiY2hlY2tlZFwiICk7XHJcblx0aW5wdXQuc2V0QXR0cmlidXRlKCBcIm5hbWVcIiwgXCJ0XCIgKTtcclxuXHJcblx0ZGl2LmFwcGVuZENoaWxkKCBpbnB1dCApO1xyXG5cclxuXHQvLyBTdXBwb3J0OiBTYWZhcmk8PTUuMSwgQW5kcm9pZDw0LjJcclxuXHQvLyBPbGRlciBXZWJLaXQgZG9lc24ndCBjbG9uZSBjaGVja2VkIHN0YXRlIGNvcnJlY3RseSBpbiBmcmFnbWVudHNcclxuXHRzdXBwb3J0LmNoZWNrQ2xvbmUgPSBkaXYuY2xvbmVOb2RlKCB0cnVlICkuY2xvbmVOb2RlKCB0cnVlICkubGFzdENoaWxkLmNoZWNrZWQ7XHJcblxyXG5cdC8vIFN1cHBvcnQ6IElFPD0xMStcclxuXHQvLyBNYWtlIHN1cmUgdGV4dGFyZWEgKGFuZCBjaGVja2JveCkgZGVmYXVsdFZhbHVlIGlzIHByb3Blcmx5IGNsb25lZFxyXG5cdGRpdi5pbm5lckhUTUwgPSBcIjx0ZXh0YXJlYT54PC90ZXh0YXJlYT5cIjtcclxuXHRzdXBwb3J0Lm5vQ2xvbmVDaGVja2VkID0gISFkaXYuY2xvbmVOb2RlKCB0cnVlICkubGFzdENoaWxkLmRlZmF1bHRWYWx1ZTtcclxufSApKCk7XHJcblxyXG5cclxudmFyXHJcblx0cmtleUV2ZW50ID0gL15rZXkvLFxyXG5cdHJtb3VzZUV2ZW50ID0gL14oPzptb3VzZXxwb2ludGVyfGNvbnRleHRtZW51fGRyYWd8ZHJvcCl8Y2xpY2svLFxyXG5cdHJ0eXBlbmFtZXNwYWNlID0gL14oW14uXSopKD86XFwuKC4rKXwpLztcclxuXHJcbmZ1bmN0aW9uIHJldHVyblRydWUoKSB7XHJcblx0cmV0dXJuIHRydWU7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHJldHVybkZhbHNlKCkge1xyXG5cdHJldHVybiBmYWxzZTtcclxufVxyXG5cclxuLy8gU3VwcG9ydDogSUU5XHJcbi8vIFNlZSAjMTMzOTMgZm9yIG1vcmUgaW5mb1xyXG5mdW5jdGlvbiBzYWZlQWN0aXZlRWxlbWVudCgpIHtcclxuXHR0cnkge1xyXG5cdFx0cmV0dXJuIGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQ7XHJcblx0fSBjYXRjaCAoIGVyciApIHsgfVxyXG59XHJcblxyXG5mdW5jdGlvbiBvbiggZWxlbSwgdHlwZXMsIHNlbGVjdG9yLCBkYXRhLCBmbiwgb25lICkge1xyXG5cdHZhciBvcmlnRm4sIHR5cGU7XHJcblxyXG5cdC8vIFR5cGVzIGNhbiBiZSBhIG1hcCBvZiB0eXBlcy9oYW5kbGVyc1xyXG5cdGlmICggdHlwZW9mIHR5cGVzID09PSBcIm9iamVjdFwiICkge1xyXG5cclxuXHRcdC8vICggdHlwZXMtT2JqZWN0LCBzZWxlY3RvciwgZGF0YSApXHJcblx0XHRpZiAoIHR5cGVvZiBzZWxlY3RvciAhPT0gXCJzdHJpbmdcIiApIHtcclxuXHJcblx0XHRcdC8vICggdHlwZXMtT2JqZWN0LCBkYXRhIClcclxuXHRcdFx0ZGF0YSA9IGRhdGEgfHwgc2VsZWN0b3I7XHJcblx0XHRcdHNlbGVjdG9yID0gdW5kZWZpbmVkO1xyXG5cdFx0fVxyXG5cdFx0Zm9yICggdHlwZSBpbiB0eXBlcyApIHtcclxuXHRcdFx0b24oIGVsZW0sIHR5cGUsIHNlbGVjdG9yLCBkYXRhLCB0eXBlc1sgdHlwZSBdLCBvbmUgKTtcclxuXHRcdH1cclxuXHRcdHJldHVybiBlbGVtO1xyXG5cdH1cclxuXHJcblx0aWYgKCBkYXRhID09IG51bGwgJiYgZm4gPT0gbnVsbCApIHtcclxuXHJcblx0XHQvLyAoIHR5cGVzLCBmbiApXHJcblx0XHRmbiA9IHNlbGVjdG9yO1xyXG5cdFx0ZGF0YSA9IHNlbGVjdG9yID0gdW5kZWZpbmVkO1xyXG5cdH0gZWxzZSBpZiAoIGZuID09IG51bGwgKSB7XHJcblx0XHRpZiAoIHR5cGVvZiBzZWxlY3RvciA9PT0gXCJzdHJpbmdcIiApIHtcclxuXHJcblx0XHRcdC8vICggdHlwZXMsIHNlbGVjdG9yLCBmbiApXHJcblx0XHRcdGZuID0gZGF0YTtcclxuXHRcdFx0ZGF0YSA9IHVuZGVmaW5lZDtcclxuXHRcdH0gZWxzZSB7XHJcblxyXG5cdFx0XHQvLyAoIHR5cGVzLCBkYXRhLCBmbiApXHJcblx0XHRcdGZuID0gZGF0YTtcclxuXHRcdFx0ZGF0YSA9IHNlbGVjdG9yO1xyXG5cdFx0XHRzZWxlY3RvciA9IHVuZGVmaW5lZDtcclxuXHRcdH1cclxuXHR9XHJcblx0aWYgKCBmbiA9PT0gZmFsc2UgKSB7XHJcblx0XHRmbiA9IHJldHVybkZhbHNlO1xyXG5cdH0gZWxzZSBpZiAoICFmbiApIHtcclxuXHRcdHJldHVybiBlbGVtO1xyXG5cdH1cclxuXHJcblx0aWYgKCBvbmUgPT09IDEgKSB7XHJcblx0XHRvcmlnRm4gPSBmbjtcclxuXHRcdGZuID0gZnVuY3Rpb24oIGV2ZW50ICkge1xyXG5cclxuXHRcdFx0Ly8gQ2FuIHVzZSBhbiBlbXB0eSBzZXQsIHNpbmNlIGV2ZW50IGNvbnRhaW5zIHRoZSBpbmZvXHJcblx0XHRcdGpRdWVyeSgpLm9mZiggZXZlbnQgKTtcclxuXHRcdFx0cmV0dXJuIG9yaWdGbi5hcHBseSggdGhpcywgYXJndW1lbnRzICk7XHJcblx0XHR9O1xyXG5cclxuXHRcdC8vIFVzZSBzYW1lIGd1aWQgc28gY2FsbGVyIGNhbiByZW1vdmUgdXNpbmcgb3JpZ0ZuXHJcblx0XHRmbi5ndWlkID0gb3JpZ0ZuLmd1aWQgfHwgKCBvcmlnRm4uZ3VpZCA9IGpRdWVyeS5ndWlkKysgKTtcclxuXHR9XHJcblx0cmV0dXJuIGVsZW0uZWFjaCggZnVuY3Rpb24oKSB7XHJcblx0XHRqUXVlcnkuZXZlbnQuYWRkKCB0aGlzLCB0eXBlcywgZm4sIGRhdGEsIHNlbGVjdG9yICk7XHJcblx0fSApO1xyXG59XHJcblxyXG4vKlxyXG4gKiBIZWxwZXIgZnVuY3Rpb25zIGZvciBtYW5hZ2luZyBldmVudHMgLS0gbm90IHBhcnQgb2YgdGhlIHB1YmxpYyBpbnRlcmZhY2UuXHJcbiAqIFByb3BzIHRvIERlYW4gRWR3YXJkcycgYWRkRXZlbnQgbGlicmFyeSBmb3IgbWFueSBvZiB0aGUgaWRlYXMuXHJcbiAqL1xyXG5qUXVlcnkuZXZlbnQgPSB7XHJcblxyXG5cdGdsb2JhbDoge30sXHJcblxyXG5cdGFkZDogZnVuY3Rpb24oIGVsZW0sIHR5cGVzLCBoYW5kbGVyLCBkYXRhLCBzZWxlY3RvciApIHtcclxuXHJcblx0XHR2YXIgaGFuZGxlT2JqSW4sIGV2ZW50SGFuZGxlLCB0bXAsXHJcblx0XHRcdGV2ZW50cywgdCwgaGFuZGxlT2JqLFxyXG5cdFx0XHRzcGVjaWFsLCBoYW5kbGVycywgdHlwZSwgbmFtZXNwYWNlcywgb3JpZ1R5cGUsXHJcblx0XHRcdGVsZW1EYXRhID0gZGF0YVByaXYuZ2V0KCBlbGVtICk7XHJcblxyXG5cdFx0Ly8gRG9uJ3QgYXR0YWNoIGV2ZW50cyB0byBub0RhdGEgb3IgdGV4dC9jb21tZW50IG5vZGVzIChidXQgYWxsb3cgcGxhaW4gb2JqZWN0cylcclxuXHRcdGlmICggIWVsZW1EYXRhICkge1xyXG5cdFx0XHRyZXR1cm47XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gQ2FsbGVyIGNhbiBwYXNzIGluIGFuIG9iamVjdCBvZiBjdXN0b20gZGF0YSBpbiBsaWV1IG9mIHRoZSBoYW5kbGVyXHJcblx0XHRpZiAoIGhhbmRsZXIuaGFuZGxlciApIHtcclxuXHRcdFx0aGFuZGxlT2JqSW4gPSBoYW5kbGVyO1xyXG5cdFx0XHRoYW5kbGVyID0gaGFuZGxlT2JqSW4uaGFuZGxlcjtcclxuXHRcdFx0c2VsZWN0b3IgPSBoYW5kbGVPYmpJbi5zZWxlY3RvcjtcclxuXHRcdH1cclxuXHJcblx0XHQvLyBNYWtlIHN1cmUgdGhhdCB0aGUgaGFuZGxlciBoYXMgYSB1bmlxdWUgSUQsIHVzZWQgdG8gZmluZC9yZW1vdmUgaXQgbGF0ZXJcclxuXHRcdGlmICggIWhhbmRsZXIuZ3VpZCApIHtcclxuXHRcdFx0aGFuZGxlci5ndWlkID0galF1ZXJ5Lmd1aWQrKztcclxuXHRcdH1cclxuXHJcblx0XHQvLyBJbml0IHRoZSBlbGVtZW50J3MgZXZlbnQgc3RydWN0dXJlIGFuZCBtYWluIGhhbmRsZXIsIGlmIHRoaXMgaXMgdGhlIGZpcnN0XHJcblx0XHRpZiAoICEoIGV2ZW50cyA9IGVsZW1EYXRhLmV2ZW50cyApICkge1xyXG5cdFx0XHRldmVudHMgPSBlbGVtRGF0YS5ldmVudHMgPSB7fTtcclxuXHRcdH1cclxuXHRcdGlmICggISggZXZlbnRIYW5kbGUgPSBlbGVtRGF0YS5oYW5kbGUgKSApIHtcclxuXHRcdFx0ZXZlbnRIYW5kbGUgPSBlbGVtRGF0YS5oYW5kbGUgPSBmdW5jdGlvbiggZSApIHtcclxuXHJcblx0XHRcdFx0Ly8gRGlzY2FyZCB0aGUgc2Vjb25kIGV2ZW50IG9mIGEgalF1ZXJ5LmV2ZW50LnRyaWdnZXIoKSBhbmRcclxuXHRcdFx0XHQvLyB3aGVuIGFuIGV2ZW50IGlzIGNhbGxlZCBhZnRlciBhIHBhZ2UgaGFzIHVubG9hZGVkXHJcblx0XHRcdFx0cmV0dXJuIHR5cGVvZiBqUXVlcnkgIT09IFwidW5kZWZpbmVkXCIgJiYgalF1ZXJ5LmV2ZW50LnRyaWdnZXJlZCAhPT0gZS50eXBlID9cclxuXHRcdFx0XHRcdGpRdWVyeS5ldmVudC5kaXNwYXRjaC5hcHBseSggZWxlbSwgYXJndW1lbnRzICkgOiB1bmRlZmluZWQ7XHJcblx0XHRcdH07XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gSGFuZGxlIG11bHRpcGxlIGV2ZW50cyBzZXBhcmF0ZWQgYnkgYSBzcGFjZVxyXG5cdFx0dHlwZXMgPSAoIHR5cGVzIHx8IFwiXCIgKS5tYXRjaCggcm5vdHdoaXRlICkgfHwgWyBcIlwiIF07XHJcblx0XHR0ID0gdHlwZXMubGVuZ3RoO1xyXG5cdFx0d2hpbGUgKCB0LS0gKSB7XHJcblx0XHRcdHRtcCA9IHJ0eXBlbmFtZXNwYWNlLmV4ZWMoIHR5cGVzWyB0IF0gKSB8fCBbXTtcclxuXHRcdFx0dHlwZSA9IG9yaWdUeXBlID0gdG1wWyAxIF07XHJcblx0XHRcdG5hbWVzcGFjZXMgPSAoIHRtcFsgMiBdIHx8IFwiXCIgKS5zcGxpdCggXCIuXCIgKS5zb3J0KCk7XHJcblxyXG5cdFx0XHQvLyBUaGVyZSAqbXVzdCogYmUgYSB0eXBlLCBubyBhdHRhY2hpbmcgbmFtZXNwYWNlLW9ubHkgaGFuZGxlcnNcclxuXHRcdFx0aWYgKCAhdHlwZSApIHtcclxuXHRcdFx0XHRjb250aW51ZTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0Ly8gSWYgZXZlbnQgY2hhbmdlcyBpdHMgdHlwZSwgdXNlIHRoZSBzcGVjaWFsIGV2ZW50IGhhbmRsZXJzIGZvciB0aGUgY2hhbmdlZCB0eXBlXHJcblx0XHRcdHNwZWNpYWwgPSBqUXVlcnkuZXZlbnQuc3BlY2lhbFsgdHlwZSBdIHx8IHt9O1xyXG5cclxuXHRcdFx0Ly8gSWYgc2VsZWN0b3IgZGVmaW5lZCwgZGV0ZXJtaW5lIHNwZWNpYWwgZXZlbnQgYXBpIHR5cGUsIG90aGVyd2lzZSBnaXZlbiB0eXBlXHJcblx0XHRcdHR5cGUgPSAoIHNlbGVjdG9yID8gc3BlY2lhbC5kZWxlZ2F0ZVR5cGUgOiBzcGVjaWFsLmJpbmRUeXBlICkgfHwgdHlwZTtcclxuXHJcblx0XHRcdC8vIFVwZGF0ZSBzcGVjaWFsIGJhc2VkIG9uIG5ld2x5IHJlc2V0IHR5cGVcclxuXHRcdFx0c3BlY2lhbCA9IGpRdWVyeS5ldmVudC5zcGVjaWFsWyB0eXBlIF0gfHwge307XHJcblxyXG5cdFx0XHQvLyBoYW5kbGVPYmogaXMgcGFzc2VkIHRvIGFsbCBldmVudCBoYW5kbGVyc1xyXG5cdFx0XHRoYW5kbGVPYmogPSBqUXVlcnkuZXh0ZW5kKCB7XHJcblx0XHRcdFx0dHlwZTogdHlwZSxcclxuXHRcdFx0XHRvcmlnVHlwZTogb3JpZ1R5cGUsXHJcblx0XHRcdFx0ZGF0YTogZGF0YSxcclxuXHRcdFx0XHRoYW5kbGVyOiBoYW5kbGVyLFxyXG5cdFx0XHRcdGd1aWQ6IGhhbmRsZXIuZ3VpZCxcclxuXHRcdFx0XHRzZWxlY3Rvcjogc2VsZWN0b3IsXHJcblx0XHRcdFx0bmVlZHNDb250ZXh0OiBzZWxlY3RvciAmJiBqUXVlcnkuZXhwci5tYXRjaC5uZWVkc0NvbnRleHQudGVzdCggc2VsZWN0b3IgKSxcclxuXHRcdFx0XHRuYW1lc3BhY2U6IG5hbWVzcGFjZXMuam9pbiggXCIuXCIgKVxyXG5cdFx0XHR9LCBoYW5kbGVPYmpJbiApO1xyXG5cclxuXHRcdFx0Ly8gSW5pdCB0aGUgZXZlbnQgaGFuZGxlciBxdWV1ZSBpZiB3ZSdyZSB0aGUgZmlyc3RcclxuXHRcdFx0aWYgKCAhKCBoYW5kbGVycyA9IGV2ZW50c1sgdHlwZSBdICkgKSB7XHJcblx0XHRcdFx0aGFuZGxlcnMgPSBldmVudHNbIHR5cGUgXSA9IFtdO1xyXG5cdFx0XHRcdGhhbmRsZXJzLmRlbGVnYXRlQ291bnQgPSAwO1xyXG5cclxuXHRcdFx0XHQvLyBPbmx5IHVzZSBhZGRFdmVudExpc3RlbmVyIGlmIHRoZSBzcGVjaWFsIGV2ZW50cyBoYW5kbGVyIHJldHVybnMgZmFsc2VcclxuXHRcdFx0XHRpZiAoICFzcGVjaWFsLnNldHVwIHx8XHJcblx0XHRcdFx0XHRzcGVjaWFsLnNldHVwLmNhbGwoIGVsZW0sIGRhdGEsIG5hbWVzcGFjZXMsIGV2ZW50SGFuZGxlICkgPT09IGZhbHNlICkge1xyXG5cclxuXHRcdFx0XHRcdGlmICggZWxlbS5hZGRFdmVudExpc3RlbmVyICkge1xyXG5cdFx0XHRcdFx0XHRlbGVtLmFkZEV2ZW50TGlzdGVuZXIoIHR5cGUsIGV2ZW50SGFuZGxlICk7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRpZiAoIHNwZWNpYWwuYWRkICkge1xyXG5cdFx0XHRcdHNwZWNpYWwuYWRkLmNhbGwoIGVsZW0sIGhhbmRsZU9iaiApO1xyXG5cclxuXHRcdFx0XHRpZiAoICFoYW5kbGVPYmouaGFuZGxlci5ndWlkICkge1xyXG5cdFx0XHRcdFx0aGFuZGxlT2JqLmhhbmRsZXIuZ3VpZCA9IGhhbmRsZXIuZ3VpZDtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdC8vIEFkZCB0byB0aGUgZWxlbWVudCdzIGhhbmRsZXIgbGlzdCwgZGVsZWdhdGVzIGluIGZyb250XHJcblx0XHRcdGlmICggc2VsZWN0b3IgKSB7XHJcblx0XHRcdFx0aGFuZGxlcnMuc3BsaWNlKCBoYW5kbGVycy5kZWxlZ2F0ZUNvdW50KyssIDAsIGhhbmRsZU9iaiApO1xyXG5cdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdGhhbmRsZXJzLnB1c2goIGhhbmRsZU9iaiApO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHQvLyBLZWVwIHRyYWNrIG9mIHdoaWNoIGV2ZW50cyBoYXZlIGV2ZXIgYmVlbiB1c2VkLCBmb3IgZXZlbnQgb3B0aW1pemF0aW9uXHJcblx0XHRcdGpRdWVyeS5ldmVudC5nbG9iYWxbIHR5cGUgXSA9IHRydWU7XHJcblx0XHR9XHJcblxyXG5cdH0sXHJcblxyXG5cdC8vIERldGFjaCBhbiBldmVudCBvciBzZXQgb2YgZXZlbnRzIGZyb20gYW4gZWxlbWVudFxyXG5cdHJlbW92ZTogZnVuY3Rpb24oIGVsZW0sIHR5cGVzLCBoYW5kbGVyLCBzZWxlY3RvciwgbWFwcGVkVHlwZXMgKSB7XHJcblxyXG5cdFx0dmFyIGosIG9yaWdDb3VudCwgdG1wLFxyXG5cdFx0XHRldmVudHMsIHQsIGhhbmRsZU9iaixcclxuXHRcdFx0c3BlY2lhbCwgaGFuZGxlcnMsIHR5cGUsIG5hbWVzcGFjZXMsIG9yaWdUeXBlLFxyXG5cdFx0XHRlbGVtRGF0YSA9IGRhdGFQcml2Lmhhc0RhdGEoIGVsZW0gKSAmJiBkYXRhUHJpdi5nZXQoIGVsZW0gKTtcclxuXHJcblx0XHRpZiAoICFlbGVtRGF0YSB8fCAhKCBldmVudHMgPSBlbGVtRGF0YS5ldmVudHMgKSApIHtcclxuXHRcdFx0cmV0dXJuO1xyXG5cdFx0fVxyXG5cclxuXHRcdC8vIE9uY2UgZm9yIGVhY2ggdHlwZS5uYW1lc3BhY2UgaW4gdHlwZXM7IHR5cGUgbWF5IGJlIG9taXR0ZWRcclxuXHRcdHR5cGVzID0gKCB0eXBlcyB8fCBcIlwiICkubWF0Y2goIHJub3R3aGl0ZSApIHx8IFsgXCJcIiBdO1xyXG5cdFx0dCA9IHR5cGVzLmxlbmd0aDtcclxuXHRcdHdoaWxlICggdC0tICkge1xyXG5cdFx0XHR0bXAgPSBydHlwZW5hbWVzcGFjZS5leGVjKCB0eXBlc1sgdCBdICkgfHwgW107XHJcblx0XHRcdHR5cGUgPSBvcmlnVHlwZSA9IHRtcFsgMSBdO1xyXG5cdFx0XHRuYW1lc3BhY2VzID0gKCB0bXBbIDIgXSB8fCBcIlwiICkuc3BsaXQoIFwiLlwiICkuc29ydCgpO1xyXG5cclxuXHRcdFx0Ly8gVW5iaW5kIGFsbCBldmVudHMgKG9uIHRoaXMgbmFtZXNwYWNlLCBpZiBwcm92aWRlZCkgZm9yIHRoZSBlbGVtZW50XHJcblx0XHRcdGlmICggIXR5cGUgKSB7XHJcblx0XHRcdFx0Zm9yICggdHlwZSBpbiBldmVudHMgKSB7XHJcblx0XHRcdFx0XHRqUXVlcnkuZXZlbnQucmVtb3ZlKCBlbGVtLCB0eXBlICsgdHlwZXNbIHQgXSwgaGFuZGxlciwgc2VsZWN0b3IsIHRydWUgKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdFx0Y29udGludWU7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdHNwZWNpYWwgPSBqUXVlcnkuZXZlbnQuc3BlY2lhbFsgdHlwZSBdIHx8IHt9O1xyXG5cdFx0XHR0eXBlID0gKCBzZWxlY3RvciA/IHNwZWNpYWwuZGVsZWdhdGVUeXBlIDogc3BlY2lhbC5iaW5kVHlwZSApIHx8IHR5cGU7XHJcblx0XHRcdGhhbmRsZXJzID0gZXZlbnRzWyB0eXBlIF0gfHwgW107XHJcblx0XHRcdHRtcCA9IHRtcFsgMiBdICYmXHJcblx0XHRcdFx0bmV3IFJlZ0V4cCggXCIoXnxcXFxcLilcIiArIG5hbWVzcGFjZXMuam9pbiggXCJcXFxcLig/Oi4qXFxcXC58KVwiICkgKyBcIihcXFxcLnwkKVwiICk7XHJcblxyXG5cdFx0XHQvLyBSZW1vdmUgbWF0Y2hpbmcgZXZlbnRzXHJcblx0XHRcdG9yaWdDb3VudCA9IGogPSBoYW5kbGVycy5sZW5ndGg7XHJcblx0XHRcdHdoaWxlICggai0tICkge1xyXG5cdFx0XHRcdGhhbmRsZU9iaiA9IGhhbmRsZXJzWyBqIF07XHJcblxyXG5cdFx0XHRcdGlmICggKCBtYXBwZWRUeXBlcyB8fCBvcmlnVHlwZSA9PT0gaGFuZGxlT2JqLm9yaWdUeXBlICkgJiZcclxuXHRcdFx0XHRcdCggIWhhbmRsZXIgfHwgaGFuZGxlci5ndWlkID09PSBoYW5kbGVPYmouZ3VpZCApICYmXHJcblx0XHRcdFx0XHQoICF0bXAgfHwgdG1wLnRlc3QoIGhhbmRsZU9iai5uYW1lc3BhY2UgKSApICYmXHJcblx0XHRcdFx0XHQoICFzZWxlY3RvciB8fCBzZWxlY3RvciA9PT0gaGFuZGxlT2JqLnNlbGVjdG9yIHx8XHJcblx0XHRcdFx0XHRcdHNlbGVjdG9yID09PSBcIioqXCIgJiYgaGFuZGxlT2JqLnNlbGVjdG9yICkgKSB7XHJcblx0XHRcdFx0XHRoYW5kbGVycy5zcGxpY2UoIGosIDEgKTtcclxuXHJcblx0XHRcdFx0XHRpZiAoIGhhbmRsZU9iai5zZWxlY3RvciApIHtcclxuXHRcdFx0XHRcdFx0aGFuZGxlcnMuZGVsZWdhdGVDb3VudC0tO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0aWYgKCBzcGVjaWFsLnJlbW92ZSApIHtcclxuXHRcdFx0XHRcdFx0c3BlY2lhbC5yZW1vdmUuY2FsbCggZWxlbSwgaGFuZGxlT2JqICk7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHQvLyBSZW1vdmUgZ2VuZXJpYyBldmVudCBoYW5kbGVyIGlmIHdlIHJlbW92ZWQgc29tZXRoaW5nIGFuZCBubyBtb3JlIGhhbmRsZXJzIGV4aXN0XHJcblx0XHRcdC8vIChhdm9pZHMgcG90ZW50aWFsIGZvciBlbmRsZXNzIHJlY3Vyc2lvbiBkdXJpbmcgcmVtb3ZhbCBvZiBzcGVjaWFsIGV2ZW50IGhhbmRsZXJzKVxyXG5cdFx0XHRpZiAoIG9yaWdDb3VudCAmJiAhaGFuZGxlcnMubGVuZ3RoICkge1xyXG5cdFx0XHRcdGlmICggIXNwZWNpYWwudGVhcmRvd24gfHxcclxuXHRcdFx0XHRcdHNwZWNpYWwudGVhcmRvd24uY2FsbCggZWxlbSwgbmFtZXNwYWNlcywgZWxlbURhdGEuaGFuZGxlICkgPT09IGZhbHNlICkge1xyXG5cclxuXHRcdFx0XHRcdGpRdWVyeS5yZW1vdmVFdmVudCggZWxlbSwgdHlwZSwgZWxlbURhdGEuaGFuZGxlICk7XHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRkZWxldGUgZXZlbnRzWyB0eXBlIF07XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHJcblx0XHQvLyBSZW1vdmUgZGF0YSBhbmQgdGhlIGV4cGFuZG8gaWYgaXQncyBubyBsb25nZXIgdXNlZFxyXG5cdFx0aWYgKCBqUXVlcnkuaXNFbXB0eU9iamVjdCggZXZlbnRzICkgKSB7XHJcblx0XHRcdGRhdGFQcml2LnJlbW92ZSggZWxlbSwgXCJoYW5kbGUgZXZlbnRzXCIgKTtcclxuXHRcdH1cclxuXHR9LFxyXG5cclxuXHRkaXNwYXRjaDogZnVuY3Rpb24oIGV2ZW50ICkge1xyXG5cclxuXHRcdC8vIE1ha2UgYSB3cml0YWJsZSBqUXVlcnkuRXZlbnQgZnJvbSB0aGUgbmF0aXZlIGV2ZW50IG9iamVjdFxyXG5cdFx0ZXZlbnQgPSBqUXVlcnkuZXZlbnQuZml4KCBldmVudCApO1xyXG5cclxuXHRcdHZhciBpLCBqLCByZXQsIG1hdGNoZWQsIGhhbmRsZU9iaixcclxuXHRcdFx0aGFuZGxlclF1ZXVlID0gW10sXHJcblx0XHRcdGFyZ3MgPSBzbGljZS5jYWxsKCBhcmd1bWVudHMgKSxcclxuXHRcdFx0aGFuZGxlcnMgPSAoIGRhdGFQcml2LmdldCggdGhpcywgXCJldmVudHNcIiApIHx8IHt9IClbIGV2ZW50LnR5cGUgXSB8fCBbXSxcclxuXHRcdFx0c3BlY2lhbCA9IGpRdWVyeS5ldmVudC5zcGVjaWFsWyBldmVudC50eXBlIF0gfHwge307XHJcblxyXG5cdFx0Ly8gVXNlIHRoZSBmaXgtZWQgalF1ZXJ5LkV2ZW50IHJhdGhlciB0aGFuIHRoZSAocmVhZC1vbmx5KSBuYXRpdmUgZXZlbnRcclxuXHRcdGFyZ3NbIDAgXSA9IGV2ZW50O1xyXG5cdFx0ZXZlbnQuZGVsZWdhdGVUYXJnZXQgPSB0aGlzO1xyXG5cclxuXHRcdC8vIENhbGwgdGhlIHByZURpc3BhdGNoIGhvb2sgZm9yIHRoZSBtYXBwZWQgdHlwZSwgYW5kIGxldCBpdCBiYWlsIGlmIGRlc2lyZWRcclxuXHRcdGlmICggc3BlY2lhbC5wcmVEaXNwYXRjaCAmJiBzcGVjaWFsLnByZURpc3BhdGNoLmNhbGwoIHRoaXMsIGV2ZW50ICkgPT09IGZhbHNlICkge1xyXG5cdFx0XHRyZXR1cm47XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gRGV0ZXJtaW5lIGhhbmRsZXJzXHJcblx0XHRoYW5kbGVyUXVldWUgPSBqUXVlcnkuZXZlbnQuaGFuZGxlcnMuY2FsbCggdGhpcywgZXZlbnQsIGhhbmRsZXJzICk7XHJcblxyXG5cdFx0Ly8gUnVuIGRlbGVnYXRlcyBmaXJzdDsgdGhleSBtYXkgd2FudCB0byBzdG9wIHByb3BhZ2F0aW9uIGJlbmVhdGggdXNcclxuXHRcdGkgPSAwO1xyXG5cdFx0d2hpbGUgKCAoIG1hdGNoZWQgPSBoYW5kbGVyUXVldWVbIGkrKyBdICkgJiYgIWV2ZW50LmlzUHJvcGFnYXRpb25TdG9wcGVkKCkgKSB7XHJcblx0XHRcdGV2ZW50LmN1cnJlbnRUYXJnZXQgPSBtYXRjaGVkLmVsZW07XHJcblxyXG5cdFx0XHRqID0gMDtcclxuXHRcdFx0d2hpbGUgKCAoIGhhbmRsZU9iaiA9IG1hdGNoZWQuaGFuZGxlcnNbIGorKyBdICkgJiZcclxuXHRcdFx0XHQhZXZlbnQuaXNJbW1lZGlhdGVQcm9wYWdhdGlvblN0b3BwZWQoKSApIHtcclxuXHJcblx0XHRcdFx0Ly8gVHJpZ2dlcmVkIGV2ZW50IG11c3QgZWl0aGVyIDEpIGhhdmUgbm8gbmFtZXNwYWNlLCBvciAyKSBoYXZlIG5hbWVzcGFjZShzKVxyXG5cdFx0XHRcdC8vIGEgc3Vic2V0IG9yIGVxdWFsIHRvIHRob3NlIGluIHRoZSBib3VuZCBldmVudCAoYm90aCBjYW4gaGF2ZSBubyBuYW1lc3BhY2UpLlxyXG5cdFx0XHRcdGlmICggIWV2ZW50LnJuYW1lc3BhY2UgfHwgZXZlbnQucm5hbWVzcGFjZS50ZXN0KCBoYW5kbGVPYmoubmFtZXNwYWNlICkgKSB7XHJcblxyXG5cdFx0XHRcdFx0ZXZlbnQuaGFuZGxlT2JqID0gaGFuZGxlT2JqO1xyXG5cdFx0XHRcdFx0ZXZlbnQuZGF0YSA9IGhhbmRsZU9iai5kYXRhO1xyXG5cclxuXHRcdFx0XHRcdHJldCA9ICggKCBqUXVlcnkuZXZlbnQuc3BlY2lhbFsgaGFuZGxlT2JqLm9yaWdUeXBlIF0gfHwge30gKS5oYW5kbGUgfHxcclxuXHRcdFx0XHRcdFx0aGFuZGxlT2JqLmhhbmRsZXIgKS5hcHBseSggbWF0Y2hlZC5lbGVtLCBhcmdzICk7XHJcblxyXG5cdFx0XHRcdFx0aWYgKCByZXQgIT09IHVuZGVmaW5lZCApIHtcclxuXHRcdFx0XHRcdFx0aWYgKCAoIGV2ZW50LnJlc3VsdCA9IHJldCApID09PSBmYWxzZSApIHtcclxuXHRcdFx0XHRcdFx0XHRldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xyXG5cdFx0XHRcdFx0XHRcdGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xyXG5cdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gQ2FsbCB0aGUgcG9zdERpc3BhdGNoIGhvb2sgZm9yIHRoZSBtYXBwZWQgdHlwZVxyXG5cdFx0aWYgKCBzcGVjaWFsLnBvc3REaXNwYXRjaCApIHtcclxuXHRcdFx0c3BlY2lhbC5wb3N0RGlzcGF0Y2guY2FsbCggdGhpcywgZXZlbnQgKTtcclxuXHRcdH1cclxuXHJcblx0XHRyZXR1cm4gZXZlbnQucmVzdWx0O1xyXG5cdH0sXHJcblxyXG5cdGhhbmRsZXJzOiBmdW5jdGlvbiggZXZlbnQsIGhhbmRsZXJzICkge1xyXG5cdFx0dmFyIGksIG1hdGNoZXMsIHNlbCwgaGFuZGxlT2JqLFxyXG5cdFx0XHRoYW5kbGVyUXVldWUgPSBbXSxcclxuXHRcdFx0ZGVsZWdhdGVDb3VudCA9IGhhbmRsZXJzLmRlbGVnYXRlQ291bnQsXHJcblx0XHRcdGN1ciA9IGV2ZW50LnRhcmdldDtcclxuXHJcblx0XHQvLyBTdXBwb3J0IChhdCBsZWFzdCk6IENocm9tZSwgSUU5XHJcblx0XHQvLyBGaW5kIGRlbGVnYXRlIGhhbmRsZXJzXHJcblx0XHQvLyBCbGFjay1ob2xlIFNWRyA8dXNlPiBpbnN0YW5jZSB0cmVlcyAoIzEzMTgwKVxyXG5cdFx0Ly9cclxuXHRcdC8vIFN1cHBvcnQ6IEZpcmVmb3g8PTQyK1xyXG5cdFx0Ly8gQXZvaWQgbm9uLWxlZnQtY2xpY2sgaW4gRkYgYnV0IGRvbid0IGJsb2NrIElFIHJhZGlvIGV2ZW50cyAoIzM4NjEsIGdoLTIzNDMpXHJcblx0XHRpZiAoIGRlbGVnYXRlQ291bnQgJiYgY3VyLm5vZGVUeXBlICYmXHJcblx0XHRcdCggZXZlbnQudHlwZSAhPT0gXCJjbGlja1wiIHx8IGlzTmFOKCBldmVudC5idXR0b24gKSB8fCBldmVudC5idXR0b24gPCAxICkgKSB7XHJcblxyXG5cdFx0XHRmb3IgKCA7IGN1ciAhPT0gdGhpczsgY3VyID0gY3VyLnBhcmVudE5vZGUgfHwgdGhpcyApIHtcclxuXHJcblx0XHRcdFx0Ly8gRG9uJ3QgY2hlY2sgbm9uLWVsZW1lbnRzICgjMTMyMDgpXHJcblx0XHRcdFx0Ly8gRG9uJ3QgcHJvY2VzcyBjbGlja3Mgb24gZGlzYWJsZWQgZWxlbWVudHMgKCM2OTExLCAjODE2NSwgIzExMzgyLCAjMTE3NjQpXHJcblx0XHRcdFx0aWYgKCBjdXIubm9kZVR5cGUgPT09IDEgJiYgKCBjdXIuZGlzYWJsZWQgIT09IHRydWUgfHwgZXZlbnQudHlwZSAhPT0gXCJjbGlja1wiICkgKSB7XHJcblx0XHRcdFx0XHRtYXRjaGVzID0gW107XHJcblx0XHRcdFx0XHRmb3IgKCBpID0gMDsgaSA8IGRlbGVnYXRlQ291bnQ7IGkrKyApIHtcclxuXHRcdFx0XHRcdFx0aGFuZGxlT2JqID0gaGFuZGxlcnNbIGkgXTtcclxuXHJcblx0XHRcdFx0XHRcdC8vIERvbid0IGNvbmZsaWN0IHdpdGggT2JqZWN0LnByb3RvdHlwZSBwcm9wZXJ0aWVzICgjMTMyMDMpXHJcblx0XHRcdFx0XHRcdHNlbCA9IGhhbmRsZU9iai5zZWxlY3RvciArIFwiIFwiO1xyXG5cclxuXHRcdFx0XHRcdFx0aWYgKCBtYXRjaGVzWyBzZWwgXSA9PT0gdW5kZWZpbmVkICkge1xyXG5cdFx0XHRcdFx0XHRcdG1hdGNoZXNbIHNlbCBdID0gaGFuZGxlT2JqLm5lZWRzQ29udGV4dCA/XHJcblx0XHRcdFx0XHRcdFx0XHRqUXVlcnkoIHNlbCwgdGhpcyApLmluZGV4KCBjdXIgKSA+IC0xIDpcclxuXHRcdFx0XHRcdFx0XHRcdGpRdWVyeS5maW5kKCBzZWwsIHRoaXMsIG51bGwsIFsgY3VyIF0gKS5sZW5ndGg7XHJcblx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0aWYgKCBtYXRjaGVzWyBzZWwgXSApIHtcclxuXHRcdFx0XHRcdFx0XHRtYXRjaGVzLnB1c2goIGhhbmRsZU9iaiApO1xyXG5cdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRpZiAoIG1hdGNoZXMubGVuZ3RoICkge1xyXG5cdFx0XHRcdFx0XHRoYW5kbGVyUXVldWUucHVzaCggeyBlbGVtOiBjdXIsIGhhbmRsZXJzOiBtYXRjaGVzIH0gKTtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHJcblx0XHQvLyBBZGQgdGhlIHJlbWFpbmluZyAoZGlyZWN0bHktYm91bmQpIGhhbmRsZXJzXHJcblx0XHRpZiAoIGRlbGVnYXRlQ291bnQgPCBoYW5kbGVycy5sZW5ndGggKSB7XHJcblx0XHRcdGhhbmRsZXJRdWV1ZS5wdXNoKCB7IGVsZW06IHRoaXMsIGhhbmRsZXJzOiBoYW5kbGVycy5zbGljZSggZGVsZWdhdGVDb3VudCApIH0gKTtcclxuXHRcdH1cclxuXHJcblx0XHRyZXR1cm4gaGFuZGxlclF1ZXVlO1xyXG5cdH0sXHJcblxyXG5cdC8vIEluY2x1ZGVzIHNvbWUgZXZlbnQgcHJvcHMgc2hhcmVkIGJ5IEtleUV2ZW50IGFuZCBNb3VzZUV2ZW50XHJcblx0cHJvcHM6ICggXCJhbHRLZXkgYnViYmxlcyBjYW5jZWxhYmxlIGN0cmxLZXkgY3VycmVudFRhcmdldCBkZXRhaWwgZXZlbnRQaGFzZSBcIiArXHJcblx0XHRcIm1ldGFLZXkgcmVsYXRlZFRhcmdldCBzaGlmdEtleSB0YXJnZXQgdGltZVN0YW1wIHZpZXcgd2hpY2hcIiApLnNwbGl0KCBcIiBcIiApLFxyXG5cclxuXHRmaXhIb29rczoge30sXHJcblxyXG5cdGtleUhvb2tzOiB7XHJcblx0XHRwcm9wczogXCJjaGFyIGNoYXJDb2RlIGtleSBrZXlDb2RlXCIuc3BsaXQoIFwiIFwiICksXHJcblx0XHRmaWx0ZXI6IGZ1bmN0aW9uKCBldmVudCwgb3JpZ2luYWwgKSB7XHJcblxyXG5cdFx0XHQvLyBBZGQgd2hpY2ggZm9yIGtleSBldmVudHNcclxuXHRcdFx0aWYgKCBldmVudC53aGljaCA9PSBudWxsICkge1xyXG5cdFx0XHRcdGV2ZW50LndoaWNoID0gb3JpZ2luYWwuY2hhckNvZGUgIT0gbnVsbCA/IG9yaWdpbmFsLmNoYXJDb2RlIDogb3JpZ2luYWwua2V5Q29kZTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0cmV0dXJuIGV2ZW50O1xyXG5cdFx0fVxyXG5cdH0sXHJcblxyXG5cdG1vdXNlSG9va3M6IHtcclxuXHRcdHByb3BzOiAoIFwiYnV0dG9uIGJ1dHRvbnMgY2xpZW50WCBjbGllbnRZIG9mZnNldFggb2Zmc2V0WSBwYWdlWCBwYWdlWSBcIiArXHJcblx0XHRcdFwic2NyZWVuWCBzY3JlZW5ZIHRvRWxlbWVudFwiICkuc3BsaXQoIFwiIFwiICksXHJcblx0XHRmaWx0ZXI6IGZ1bmN0aW9uKCBldmVudCwgb3JpZ2luYWwgKSB7XHJcblx0XHRcdHZhciBldmVudERvYywgZG9jLCBib2R5LFxyXG5cdFx0XHRcdGJ1dHRvbiA9IG9yaWdpbmFsLmJ1dHRvbjtcclxuXHJcblx0XHRcdC8vIENhbGN1bGF0ZSBwYWdlWC9ZIGlmIG1pc3NpbmcgYW5kIGNsaWVudFgvWSBhdmFpbGFibGVcclxuXHRcdFx0aWYgKCBldmVudC5wYWdlWCA9PSBudWxsICYmIG9yaWdpbmFsLmNsaWVudFggIT0gbnVsbCApIHtcclxuXHRcdFx0XHRldmVudERvYyA9IGV2ZW50LnRhcmdldC5vd25lckRvY3VtZW50IHx8IGRvY3VtZW50O1xyXG5cdFx0XHRcdGRvYyA9IGV2ZW50RG9jLmRvY3VtZW50RWxlbWVudDtcclxuXHRcdFx0XHRib2R5ID0gZXZlbnREb2MuYm9keTtcclxuXHJcblx0XHRcdFx0ZXZlbnQucGFnZVggPSBvcmlnaW5hbC5jbGllbnRYICtcclxuXHRcdFx0XHRcdCggZG9jICYmIGRvYy5zY3JvbGxMZWZ0IHx8IGJvZHkgJiYgYm9keS5zY3JvbGxMZWZ0IHx8IDAgKSAtXHJcblx0XHRcdFx0XHQoIGRvYyAmJiBkb2MuY2xpZW50TGVmdCB8fCBib2R5ICYmIGJvZHkuY2xpZW50TGVmdCB8fCAwICk7XHJcblx0XHRcdFx0ZXZlbnQucGFnZVkgPSBvcmlnaW5hbC5jbGllbnRZICtcclxuXHRcdFx0XHRcdCggZG9jICYmIGRvYy5zY3JvbGxUb3AgIHx8IGJvZHkgJiYgYm9keS5zY3JvbGxUb3AgIHx8IDAgKSAtXHJcblx0XHRcdFx0XHQoIGRvYyAmJiBkb2MuY2xpZW50VG9wICB8fCBib2R5ICYmIGJvZHkuY2xpZW50VG9wICB8fCAwICk7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdC8vIEFkZCB3aGljaCBmb3IgY2xpY2s6IDEgPT09IGxlZnQ7IDIgPT09IG1pZGRsZTsgMyA9PT0gcmlnaHRcclxuXHRcdFx0Ly8gTm90ZTogYnV0dG9uIGlzIG5vdCBub3JtYWxpemVkLCBzbyBkb24ndCB1c2UgaXRcclxuXHRcdFx0aWYgKCAhZXZlbnQud2hpY2ggJiYgYnV0dG9uICE9PSB1bmRlZmluZWQgKSB7XHJcblx0XHRcdFx0ZXZlbnQud2hpY2ggPSAoIGJ1dHRvbiAmIDEgPyAxIDogKCBidXR0b24gJiAyID8gMyA6ICggYnV0dG9uICYgNCA/IDIgOiAwICkgKSApO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRyZXR1cm4gZXZlbnQ7XHJcblx0XHR9XHJcblx0fSxcclxuXHJcblx0Zml4OiBmdW5jdGlvbiggZXZlbnQgKSB7XHJcblx0XHRpZiAoIGV2ZW50WyBqUXVlcnkuZXhwYW5kbyBdICkge1xyXG5cdFx0XHRyZXR1cm4gZXZlbnQ7XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gQ3JlYXRlIGEgd3JpdGFibGUgY29weSBvZiB0aGUgZXZlbnQgb2JqZWN0IGFuZCBub3JtYWxpemUgc29tZSBwcm9wZXJ0aWVzXHJcblx0XHR2YXIgaSwgcHJvcCwgY29weSxcclxuXHRcdFx0dHlwZSA9IGV2ZW50LnR5cGUsXHJcblx0XHRcdG9yaWdpbmFsRXZlbnQgPSBldmVudCxcclxuXHRcdFx0Zml4SG9vayA9IHRoaXMuZml4SG9va3NbIHR5cGUgXTtcclxuXHJcblx0XHRpZiAoICFmaXhIb29rICkge1xyXG5cdFx0XHR0aGlzLmZpeEhvb2tzWyB0eXBlIF0gPSBmaXhIb29rID1cclxuXHRcdFx0XHRybW91c2VFdmVudC50ZXN0KCB0eXBlICkgPyB0aGlzLm1vdXNlSG9va3MgOlxyXG5cdFx0XHRcdHJrZXlFdmVudC50ZXN0KCB0eXBlICkgPyB0aGlzLmtleUhvb2tzIDpcclxuXHRcdFx0XHR7fTtcclxuXHRcdH1cclxuXHRcdGNvcHkgPSBmaXhIb29rLnByb3BzID8gdGhpcy5wcm9wcy5jb25jYXQoIGZpeEhvb2sucHJvcHMgKSA6IHRoaXMucHJvcHM7XHJcblxyXG5cdFx0ZXZlbnQgPSBuZXcgalF1ZXJ5LkV2ZW50KCBvcmlnaW5hbEV2ZW50ICk7XHJcblxyXG5cdFx0aSA9IGNvcHkubGVuZ3RoO1xyXG5cdFx0d2hpbGUgKCBpLS0gKSB7XHJcblx0XHRcdHByb3AgPSBjb3B5WyBpIF07XHJcblx0XHRcdGV2ZW50WyBwcm9wIF0gPSBvcmlnaW5hbEV2ZW50WyBwcm9wIF07XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gU3VwcG9ydDogQ29yZG92YSAyLjUgKFdlYktpdCkgKCMxMzI1NSlcclxuXHRcdC8vIEFsbCBldmVudHMgc2hvdWxkIGhhdmUgYSB0YXJnZXQ7IENvcmRvdmEgZGV2aWNlcmVhZHkgZG9lc24ndFxyXG5cdFx0aWYgKCAhZXZlbnQudGFyZ2V0ICkge1xyXG5cdFx0XHRldmVudC50YXJnZXQgPSBkb2N1bWVudDtcclxuXHRcdH1cclxuXHJcblx0XHQvLyBTdXBwb3J0OiBTYWZhcmkgNi4wKywgQ2hyb21lPDI4XHJcblx0XHQvLyBUYXJnZXQgc2hvdWxkIG5vdCBiZSBhIHRleHQgbm9kZSAoIzUwNCwgIzEzMTQzKVxyXG5cdFx0aWYgKCBldmVudC50YXJnZXQubm9kZVR5cGUgPT09IDMgKSB7XHJcblx0XHRcdGV2ZW50LnRhcmdldCA9IGV2ZW50LnRhcmdldC5wYXJlbnROb2RlO1xyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiBmaXhIb29rLmZpbHRlciA/IGZpeEhvb2suZmlsdGVyKCBldmVudCwgb3JpZ2luYWxFdmVudCApIDogZXZlbnQ7XHJcblx0fSxcclxuXHJcblx0c3BlY2lhbDoge1xyXG5cdFx0bG9hZDoge1xyXG5cclxuXHRcdFx0Ly8gUHJldmVudCB0cmlnZ2VyZWQgaW1hZ2UubG9hZCBldmVudHMgZnJvbSBidWJibGluZyB0byB3aW5kb3cubG9hZFxyXG5cdFx0XHRub0J1YmJsZTogdHJ1ZVxyXG5cdFx0fSxcclxuXHRcdGZvY3VzOiB7XHJcblxyXG5cdFx0XHQvLyBGaXJlIG5hdGl2ZSBldmVudCBpZiBwb3NzaWJsZSBzbyBibHVyL2ZvY3VzIHNlcXVlbmNlIGlzIGNvcnJlY3RcclxuXHRcdFx0dHJpZ2dlcjogZnVuY3Rpb24oKSB7XHJcblx0XHRcdFx0aWYgKCB0aGlzICE9PSBzYWZlQWN0aXZlRWxlbWVudCgpICYmIHRoaXMuZm9jdXMgKSB7XHJcblx0XHRcdFx0XHR0aGlzLmZvY3VzKCk7XHJcblx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9LFxyXG5cdFx0XHRkZWxlZ2F0ZVR5cGU6IFwiZm9jdXNpblwiXHJcblx0XHR9LFxyXG5cdFx0Ymx1cjoge1xyXG5cdFx0XHR0cmlnZ2VyOiBmdW5jdGlvbigpIHtcclxuXHRcdFx0XHRpZiAoIHRoaXMgPT09IHNhZmVBY3RpdmVFbGVtZW50KCkgJiYgdGhpcy5ibHVyICkge1xyXG5cdFx0XHRcdFx0dGhpcy5ibHVyKCk7XHJcblx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9LFxyXG5cdFx0XHRkZWxlZ2F0ZVR5cGU6IFwiZm9jdXNvdXRcIlxyXG5cdFx0fSxcclxuXHRcdGNsaWNrOiB7XHJcblxyXG5cdFx0XHQvLyBGb3IgY2hlY2tib3gsIGZpcmUgbmF0aXZlIGV2ZW50IHNvIGNoZWNrZWQgc3RhdGUgd2lsbCBiZSByaWdodFxyXG5cdFx0XHR0cmlnZ2VyOiBmdW5jdGlvbigpIHtcclxuXHRcdFx0XHRpZiAoIHRoaXMudHlwZSA9PT0gXCJjaGVja2JveFwiICYmIHRoaXMuY2xpY2sgJiYgalF1ZXJ5Lm5vZGVOYW1lKCB0aGlzLCBcImlucHV0XCIgKSApIHtcclxuXHRcdFx0XHRcdHRoaXMuY2xpY2soKTtcclxuXHRcdFx0XHRcdHJldHVybiBmYWxzZTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH0sXHJcblxyXG5cdFx0XHQvLyBGb3IgY3Jvc3MtYnJvd3NlciBjb25zaXN0ZW5jeSwgZG9uJ3QgZmlyZSBuYXRpdmUgLmNsaWNrKCkgb24gbGlua3NcclxuXHRcdFx0X2RlZmF1bHQ6IGZ1bmN0aW9uKCBldmVudCApIHtcclxuXHRcdFx0XHRyZXR1cm4galF1ZXJ5Lm5vZGVOYW1lKCBldmVudC50YXJnZXQsIFwiYVwiICk7XHJcblx0XHRcdH1cclxuXHRcdH0sXHJcblxyXG5cdFx0YmVmb3JldW5sb2FkOiB7XHJcblx0XHRcdHBvc3REaXNwYXRjaDogZnVuY3Rpb24oIGV2ZW50ICkge1xyXG5cclxuXHRcdFx0XHQvLyBTdXBwb3J0OiBGaXJlZm94IDIwK1xyXG5cdFx0XHRcdC8vIEZpcmVmb3ggZG9lc24ndCBhbGVydCBpZiB0aGUgcmV0dXJuVmFsdWUgZmllbGQgaXMgbm90IHNldC5cclxuXHRcdFx0XHRpZiAoIGV2ZW50LnJlc3VsdCAhPT0gdW5kZWZpbmVkICYmIGV2ZW50Lm9yaWdpbmFsRXZlbnQgKSB7XHJcblx0XHRcdFx0XHRldmVudC5vcmlnaW5hbEV2ZW50LnJldHVyblZhbHVlID0gZXZlbnQucmVzdWx0O1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdH1cclxufTtcclxuXHJcbmpRdWVyeS5yZW1vdmVFdmVudCA9IGZ1bmN0aW9uKCBlbGVtLCB0eXBlLCBoYW5kbGUgKSB7XHJcblxyXG5cdC8vIFRoaXMgXCJpZlwiIGlzIG5lZWRlZCBmb3IgcGxhaW4gb2JqZWN0c1xyXG5cdGlmICggZWxlbS5yZW1vdmVFdmVudExpc3RlbmVyICkge1xyXG5cdFx0ZWxlbS5yZW1vdmVFdmVudExpc3RlbmVyKCB0eXBlLCBoYW5kbGUgKTtcclxuXHR9XHJcbn07XHJcblxyXG5qUXVlcnkuRXZlbnQgPSBmdW5jdGlvbiggc3JjLCBwcm9wcyApIHtcclxuXHJcblx0Ly8gQWxsb3cgaW5zdGFudGlhdGlvbiB3aXRob3V0IHRoZSAnbmV3JyBrZXl3b3JkXHJcblx0aWYgKCAhKCB0aGlzIGluc3RhbmNlb2YgalF1ZXJ5LkV2ZW50ICkgKSB7XHJcblx0XHRyZXR1cm4gbmV3IGpRdWVyeS5FdmVudCggc3JjLCBwcm9wcyApO1xyXG5cdH1cclxuXHJcblx0Ly8gRXZlbnQgb2JqZWN0XHJcblx0aWYgKCBzcmMgJiYgc3JjLnR5cGUgKSB7XHJcblx0XHR0aGlzLm9yaWdpbmFsRXZlbnQgPSBzcmM7XHJcblx0XHR0aGlzLnR5cGUgPSBzcmMudHlwZTtcclxuXHJcblx0XHQvLyBFdmVudHMgYnViYmxpbmcgdXAgdGhlIGRvY3VtZW50IG1heSBoYXZlIGJlZW4gbWFya2VkIGFzIHByZXZlbnRlZFxyXG5cdFx0Ly8gYnkgYSBoYW5kbGVyIGxvd2VyIGRvd24gdGhlIHRyZWU7IHJlZmxlY3QgdGhlIGNvcnJlY3QgdmFsdWUuXHJcblx0XHR0aGlzLmlzRGVmYXVsdFByZXZlbnRlZCA9IHNyYy5kZWZhdWx0UHJldmVudGVkIHx8XHJcblx0XHRcdFx0c3JjLmRlZmF1bHRQcmV2ZW50ZWQgPT09IHVuZGVmaW5lZCAmJlxyXG5cclxuXHRcdFx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkPDQuMFxyXG5cdFx0XHRcdHNyYy5yZXR1cm5WYWx1ZSA9PT0gZmFsc2UgP1xyXG5cdFx0XHRyZXR1cm5UcnVlIDpcclxuXHRcdFx0cmV0dXJuRmFsc2U7XHJcblxyXG5cdC8vIEV2ZW50IHR5cGVcclxuXHR9IGVsc2Uge1xyXG5cdFx0dGhpcy50eXBlID0gc3JjO1xyXG5cdH1cclxuXHJcblx0Ly8gUHV0IGV4cGxpY2l0bHkgcHJvdmlkZWQgcHJvcGVydGllcyBvbnRvIHRoZSBldmVudCBvYmplY3RcclxuXHRpZiAoIHByb3BzICkge1xyXG5cdFx0alF1ZXJ5LmV4dGVuZCggdGhpcywgcHJvcHMgKTtcclxuXHR9XHJcblxyXG5cdC8vIENyZWF0ZSBhIHRpbWVzdGFtcCBpZiBpbmNvbWluZyBldmVudCBkb2Vzbid0IGhhdmUgb25lXHJcblx0dGhpcy50aW1lU3RhbXAgPSBzcmMgJiYgc3JjLnRpbWVTdGFtcCB8fCBqUXVlcnkubm93KCk7XHJcblxyXG5cdC8vIE1hcmsgaXQgYXMgZml4ZWRcclxuXHR0aGlzWyBqUXVlcnkuZXhwYW5kbyBdID0gdHJ1ZTtcclxufTtcclxuXHJcbi8vIGpRdWVyeS5FdmVudCBpcyBiYXNlZCBvbiBET00zIEV2ZW50cyBhcyBzcGVjaWZpZWQgYnkgdGhlIEVDTUFTY3JpcHQgTGFuZ3VhZ2UgQmluZGluZ1xyXG4vLyBodHRwOi8vd3d3LnczLm9yZy9UUi8yMDAzL1dELURPTS1MZXZlbC0zLUV2ZW50cy0yMDAzMDMzMS9lY21hLXNjcmlwdC1iaW5kaW5nLmh0bWxcclxualF1ZXJ5LkV2ZW50LnByb3RvdHlwZSA9IHtcclxuXHRjb25zdHJ1Y3RvcjogalF1ZXJ5LkV2ZW50LFxyXG5cdGlzRGVmYXVsdFByZXZlbnRlZDogcmV0dXJuRmFsc2UsXHJcblx0aXNQcm9wYWdhdGlvblN0b3BwZWQ6IHJldHVybkZhbHNlLFxyXG5cdGlzSW1tZWRpYXRlUHJvcGFnYXRpb25TdG9wcGVkOiByZXR1cm5GYWxzZSxcclxuXHJcblx0cHJldmVudERlZmF1bHQ6IGZ1bmN0aW9uKCkge1xyXG5cdFx0dmFyIGUgPSB0aGlzLm9yaWdpbmFsRXZlbnQ7XHJcblxyXG5cdFx0dGhpcy5pc0RlZmF1bHRQcmV2ZW50ZWQgPSByZXR1cm5UcnVlO1xyXG5cclxuXHRcdGlmICggZSApIHtcclxuXHRcdFx0ZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG5cdFx0fVxyXG5cdH0sXHJcblx0c3RvcFByb3BhZ2F0aW9uOiBmdW5jdGlvbigpIHtcclxuXHRcdHZhciBlID0gdGhpcy5vcmlnaW5hbEV2ZW50O1xyXG5cclxuXHRcdHRoaXMuaXNQcm9wYWdhdGlvblN0b3BwZWQgPSByZXR1cm5UcnVlO1xyXG5cclxuXHRcdGlmICggZSApIHtcclxuXHRcdFx0ZS5zdG9wUHJvcGFnYXRpb24oKTtcclxuXHRcdH1cclxuXHR9LFxyXG5cdHN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbjogZnVuY3Rpb24oKSB7XHJcblx0XHR2YXIgZSA9IHRoaXMub3JpZ2luYWxFdmVudDtcclxuXHJcblx0XHR0aGlzLmlzSW1tZWRpYXRlUHJvcGFnYXRpb25TdG9wcGVkID0gcmV0dXJuVHJ1ZTtcclxuXHJcblx0XHRpZiAoIGUgKSB7XHJcblx0XHRcdGUuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCk7XHJcblx0XHR9XHJcblxyXG5cdFx0dGhpcy5zdG9wUHJvcGFnYXRpb24oKTtcclxuXHR9XHJcbn07XHJcblxyXG4vLyBDcmVhdGUgbW91c2VlbnRlci9sZWF2ZSBldmVudHMgdXNpbmcgbW91c2VvdmVyL291dCBhbmQgZXZlbnQtdGltZSBjaGVja3NcclxuLy8gc28gdGhhdCBldmVudCBkZWxlZ2F0aW9uIHdvcmtzIGluIGpRdWVyeS5cclxuLy8gRG8gdGhlIHNhbWUgZm9yIHBvaW50ZXJlbnRlci9wb2ludGVybGVhdmUgYW5kIHBvaW50ZXJvdmVyL3BvaW50ZXJvdXRcclxuLy9cclxuLy8gU3VwcG9ydDogU2FmYXJpIDcgb25seVxyXG4vLyBTYWZhcmkgc2VuZHMgbW91c2VlbnRlciB0b28gb2Z0ZW47IHNlZTpcclxuLy8gaHR0cHM6Ly9jb2RlLmdvb2dsZS5jb20vcC9jaHJvbWl1bS9pc3N1ZXMvZGV0YWlsP2lkPTQ3MDI1OFxyXG4vLyBmb3IgdGhlIGRlc2NyaXB0aW9uIG9mIHRoZSBidWcgKGl0IGV4aXN0ZWQgaW4gb2xkZXIgQ2hyb21lIHZlcnNpb25zIGFzIHdlbGwpLlxyXG5qUXVlcnkuZWFjaCgge1xyXG5cdG1vdXNlZW50ZXI6IFwibW91c2VvdmVyXCIsXHJcblx0bW91c2VsZWF2ZTogXCJtb3VzZW91dFwiLFxyXG5cdHBvaW50ZXJlbnRlcjogXCJwb2ludGVyb3ZlclwiLFxyXG5cdHBvaW50ZXJsZWF2ZTogXCJwb2ludGVyb3V0XCJcclxufSwgZnVuY3Rpb24oIG9yaWcsIGZpeCApIHtcclxuXHRqUXVlcnkuZXZlbnQuc3BlY2lhbFsgb3JpZyBdID0ge1xyXG5cdFx0ZGVsZWdhdGVUeXBlOiBmaXgsXHJcblx0XHRiaW5kVHlwZTogZml4LFxyXG5cclxuXHRcdGhhbmRsZTogZnVuY3Rpb24oIGV2ZW50ICkge1xyXG5cdFx0XHR2YXIgcmV0LFxyXG5cdFx0XHRcdHRhcmdldCA9IHRoaXMsXHJcblx0XHRcdFx0cmVsYXRlZCA9IGV2ZW50LnJlbGF0ZWRUYXJnZXQsXHJcblx0XHRcdFx0aGFuZGxlT2JqID0gZXZlbnQuaGFuZGxlT2JqO1xyXG5cclxuXHRcdFx0Ly8gRm9yIG1vdXNlZW50ZXIvbGVhdmUgY2FsbCB0aGUgaGFuZGxlciBpZiByZWxhdGVkIGlzIG91dHNpZGUgdGhlIHRhcmdldC5cclxuXHRcdFx0Ly8gTkI6IE5vIHJlbGF0ZWRUYXJnZXQgaWYgdGhlIG1vdXNlIGxlZnQvZW50ZXJlZCB0aGUgYnJvd3NlciB3aW5kb3dcclxuXHRcdFx0aWYgKCAhcmVsYXRlZCB8fCAoIHJlbGF0ZWQgIT09IHRhcmdldCAmJiAhalF1ZXJ5LmNvbnRhaW5zKCB0YXJnZXQsIHJlbGF0ZWQgKSApICkge1xyXG5cdFx0XHRcdGV2ZW50LnR5cGUgPSBoYW5kbGVPYmoub3JpZ1R5cGU7XHJcblx0XHRcdFx0cmV0ID0gaGFuZGxlT2JqLmhhbmRsZXIuYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApO1xyXG5cdFx0XHRcdGV2ZW50LnR5cGUgPSBmaXg7XHJcblx0XHRcdH1cclxuXHRcdFx0cmV0dXJuIHJldDtcclxuXHRcdH1cclxuXHR9O1xyXG59ICk7XHJcblxyXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XHJcblx0b246IGZ1bmN0aW9uKCB0eXBlcywgc2VsZWN0b3IsIGRhdGEsIGZuICkge1xyXG5cdFx0cmV0dXJuIG9uKCB0aGlzLCB0eXBlcywgc2VsZWN0b3IsIGRhdGEsIGZuICk7XHJcblx0fSxcclxuXHRvbmU6IGZ1bmN0aW9uKCB0eXBlcywgc2VsZWN0b3IsIGRhdGEsIGZuICkge1xyXG5cdFx0cmV0dXJuIG9uKCB0aGlzLCB0eXBlcywgc2VsZWN0b3IsIGRhdGEsIGZuLCAxICk7XHJcblx0fSxcclxuXHRvZmY6IGZ1bmN0aW9uKCB0eXBlcywgc2VsZWN0b3IsIGZuICkge1xyXG5cdFx0dmFyIGhhbmRsZU9iaiwgdHlwZTtcclxuXHRcdGlmICggdHlwZXMgJiYgdHlwZXMucHJldmVudERlZmF1bHQgJiYgdHlwZXMuaGFuZGxlT2JqICkge1xyXG5cclxuXHRcdFx0Ly8gKCBldmVudCApICBkaXNwYXRjaGVkIGpRdWVyeS5FdmVudFxyXG5cdFx0XHRoYW5kbGVPYmogPSB0eXBlcy5oYW5kbGVPYmo7XHJcblx0XHRcdGpRdWVyeSggdHlwZXMuZGVsZWdhdGVUYXJnZXQgKS5vZmYoXHJcblx0XHRcdFx0aGFuZGxlT2JqLm5hbWVzcGFjZSA/XHJcblx0XHRcdFx0XHRoYW5kbGVPYmoub3JpZ1R5cGUgKyBcIi5cIiArIGhhbmRsZU9iai5uYW1lc3BhY2UgOlxyXG5cdFx0XHRcdFx0aGFuZGxlT2JqLm9yaWdUeXBlLFxyXG5cdFx0XHRcdGhhbmRsZU9iai5zZWxlY3RvcixcclxuXHRcdFx0XHRoYW5kbGVPYmouaGFuZGxlclxyXG5cdFx0XHQpO1xyXG5cdFx0XHRyZXR1cm4gdGhpcztcclxuXHRcdH1cclxuXHRcdGlmICggdHlwZW9mIHR5cGVzID09PSBcIm9iamVjdFwiICkge1xyXG5cclxuXHRcdFx0Ly8gKCB0eXBlcy1vYmplY3QgWywgc2VsZWN0b3JdIClcclxuXHRcdFx0Zm9yICggdHlwZSBpbiB0eXBlcyApIHtcclxuXHRcdFx0XHR0aGlzLm9mZiggdHlwZSwgc2VsZWN0b3IsIHR5cGVzWyB0eXBlIF0gKTtcclxuXHRcdFx0fVxyXG5cdFx0XHRyZXR1cm4gdGhpcztcclxuXHRcdH1cclxuXHRcdGlmICggc2VsZWN0b3IgPT09IGZhbHNlIHx8IHR5cGVvZiBzZWxlY3RvciA9PT0gXCJmdW5jdGlvblwiICkge1xyXG5cclxuXHRcdFx0Ly8gKCB0eXBlcyBbLCBmbl0gKVxyXG5cdFx0XHRmbiA9IHNlbGVjdG9yO1xyXG5cdFx0XHRzZWxlY3RvciA9IHVuZGVmaW5lZDtcclxuXHRcdH1cclxuXHRcdGlmICggZm4gPT09IGZhbHNlICkge1xyXG5cdFx0XHRmbiA9IHJldHVybkZhbHNlO1xyXG5cdFx0fVxyXG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XHJcblx0XHRcdGpRdWVyeS5ldmVudC5yZW1vdmUoIHRoaXMsIHR5cGVzLCBmbiwgc2VsZWN0b3IgKTtcclxuXHRcdH0gKTtcclxuXHR9XHJcbn0gKTtcclxuXHJcblxyXG52YXJcclxuXHRyeGh0bWxUYWcgPSAvPCg/IWFyZWF8YnJ8Y29sfGVtYmVkfGhyfGltZ3xpbnB1dHxsaW5rfG1ldGF8cGFyYW0pKChbXFx3Oi1dKylbXj5dKilcXC8+L2dpLFxyXG5cclxuXHQvLyBTdXBwb3J0OiBJRSAxMC0xMSwgRWRnZSAxMDI0MCtcclxuXHQvLyBJbiBJRS9FZGdlIHVzaW5nIHJlZ2V4IGdyb3VwcyBoZXJlIGNhdXNlcyBzZXZlcmUgc2xvd2Rvd25zLlxyXG5cdC8vIFNlZSBodHRwczovL2Nvbm5lY3QubWljcm9zb2Z0LmNvbS9JRS9mZWVkYmFjay9kZXRhaWxzLzE3MzY1MTIvXHJcblx0cm5vSW5uZXJodG1sID0gLzxzY3JpcHR8PHN0eWxlfDxsaW5rL2ksXHJcblxyXG5cdC8vIGNoZWNrZWQ9XCJjaGVja2VkXCIgb3IgY2hlY2tlZFxyXG5cdHJjaGVja2VkID0gL2NoZWNrZWRcXHMqKD86W149XXw9XFxzKi5jaGVja2VkLikvaSxcclxuXHRyc2NyaXB0VHlwZU1hc2tlZCA9IC9edHJ1ZVxcLyguKikvLFxyXG5cdHJjbGVhblNjcmlwdCA9IC9eXFxzKjwhKD86XFxbQ0RBVEFcXFt8LS0pfCg/OlxcXVxcXXwtLSk+XFxzKiQvZztcclxuXHJcbi8vIE1hbmlwdWxhdGluZyB0YWJsZXMgcmVxdWlyZXMgYSB0Ym9keVxyXG5mdW5jdGlvbiBtYW5pcHVsYXRpb25UYXJnZXQoIGVsZW0sIGNvbnRlbnQgKSB7XHJcblx0cmV0dXJuIGpRdWVyeS5ub2RlTmFtZSggZWxlbSwgXCJ0YWJsZVwiICkgJiZcclxuXHRcdGpRdWVyeS5ub2RlTmFtZSggY29udGVudC5ub2RlVHlwZSAhPT0gMTEgPyBjb250ZW50IDogY29udGVudC5maXJzdENoaWxkLCBcInRyXCIgKSA/XHJcblxyXG5cdFx0ZWxlbS5nZXRFbGVtZW50c0J5VGFnTmFtZSggXCJ0Ym9keVwiIClbIDAgXSB8fFxyXG5cdFx0XHRlbGVtLmFwcGVuZENoaWxkKCBlbGVtLm93bmVyRG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJ0Ym9keVwiICkgKSA6XHJcblx0XHRlbGVtO1xyXG59XHJcblxyXG4vLyBSZXBsYWNlL3Jlc3RvcmUgdGhlIHR5cGUgYXR0cmlidXRlIG9mIHNjcmlwdCBlbGVtZW50cyBmb3Igc2FmZSBET00gbWFuaXB1bGF0aW9uXHJcbmZ1bmN0aW9uIGRpc2FibGVTY3JpcHQoIGVsZW0gKSB7XHJcblx0ZWxlbS50eXBlID0gKCBlbGVtLmdldEF0dHJpYnV0ZSggXCJ0eXBlXCIgKSAhPT0gbnVsbCApICsgXCIvXCIgKyBlbGVtLnR5cGU7XHJcblx0cmV0dXJuIGVsZW07XHJcbn1cclxuZnVuY3Rpb24gcmVzdG9yZVNjcmlwdCggZWxlbSApIHtcclxuXHR2YXIgbWF0Y2ggPSByc2NyaXB0VHlwZU1hc2tlZC5leGVjKCBlbGVtLnR5cGUgKTtcclxuXHJcblx0aWYgKCBtYXRjaCApIHtcclxuXHRcdGVsZW0udHlwZSA9IG1hdGNoWyAxIF07XHJcblx0fSBlbHNlIHtcclxuXHRcdGVsZW0ucmVtb3ZlQXR0cmlidXRlKCBcInR5cGVcIiApO1xyXG5cdH1cclxuXHJcblx0cmV0dXJuIGVsZW07XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGNsb25lQ29weUV2ZW50KCBzcmMsIGRlc3QgKSB7XHJcblx0dmFyIGksIGwsIHR5cGUsIHBkYXRhT2xkLCBwZGF0YUN1ciwgdWRhdGFPbGQsIHVkYXRhQ3VyLCBldmVudHM7XHJcblxyXG5cdGlmICggZGVzdC5ub2RlVHlwZSAhPT0gMSApIHtcclxuXHRcdHJldHVybjtcclxuXHR9XHJcblxyXG5cdC8vIDEuIENvcHkgcHJpdmF0ZSBkYXRhOiBldmVudHMsIGhhbmRsZXJzLCBldGMuXHJcblx0aWYgKCBkYXRhUHJpdi5oYXNEYXRhKCBzcmMgKSApIHtcclxuXHRcdHBkYXRhT2xkID0gZGF0YVByaXYuYWNjZXNzKCBzcmMgKTtcclxuXHRcdHBkYXRhQ3VyID0gZGF0YVByaXYuc2V0KCBkZXN0LCBwZGF0YU9sZCApO1xyXG5cdFx0ZXZlbnRzID0gcGRhdGFPbGQuZXZlbnRzO1xyXG5cclxuXHRcdGlmICggZXZlbnRzICkge1xyXG5cdFx0XHRkZWxldGUgcGRhdGFDdXIuaGFuZGxlO1xyXG5cdFx0XHRwZGF0YUN1ci5ldmVudHMgPSB7fTtcclxuXHJcblx0XHRcdGZvciAoIHR5cGUgaW4gZXZlbnRzICkge1xyXG5cdFx0XHRcdGZvciAoIGkgPSAwLCBsID0gZXZlbnRzWyB0eXBlIF0ubGVuZ3RoOyBpIDwgbDsgaSsrICkge1xyXG5cdFx0XHRcdFx0alF1ZXJ5LmV2ZW50LmFkZCggZGVzdCwgdHlwZSwgZXZlbnRzWyB0eXBlIF1bIGkgXSApO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdH1cclxuXHJcblx0Ly8gMi4gQ29weSB1c2VyIGRhdGFcclxuXHRpZiAoIGRhdGFVc2VyLmhhc0RhdGEoIHNyYyApICkge1xyXG5cdFx0dWRhdGFPbGQgPSBkYXRhVXNlci5hY2Nlc3MoIHNyYyApO1xyXG5cdFx0dWRhdGFDdXIgPSBqUXVlcnkuZXh0ZW5kKCB7fSwgdWRhdGFPbGQgKTtcclxuXHJcblx0XHRkYXRhVXNlci5zZXQoIGRlc3QsIHVkYXRhQ3VyICk7XHJcblx0fVxyXG59XHJcblxyXG4vLyBGaXggSUUgYnVncywgc2VlIHN1cHBvcnQgdGVzdHNcclxuZnVuY3Rpb24gZml4SW5wdXQoIHNyYywgZGVzdCApIHtcclxuXHR2YXIgbm9kZU5hbWUgPSBkZXN0Lm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7XHJcblxyXG5cdC8vIEZhaWxzIHRvIHBlcnNpc3QgdGhlIGNoZWNrZWQgc3RhdGUgb2YgYSBjbG9uZWQgY2hlY2tib3ggb3IgcmFkaW8gYnV0dG9uLlxyXG5cdGlmICggbm9kZU5hbWUgPT09IFwiaW5wdXRcIiAmJiByY2hlY2thYmxlVHlwZS50ZXN0KCBzcmMudHlwZSApICkge1xyXG5cdFx0ZGVzdC5jaGVja2VkID0gc3JjLmNoZWNrZWQ7XHJcblxyXG5cdC8vIEZhaWxzIHRvIHJldHVybiB0aGUgc2VsZWN0ZWQgb3B0aW9uIHRvIHRoZSBkZWZhdWx0IHNlbGVjdGVkIHN0YXRlIHdoZW4gY2xvbmluZyBvcHRpb25zXHJcblx0fSBlbHNlIGlmICggbm9kZU5hbWUgPT09IFwiaW5wdXRcIiB8fCBub2RlTmFtZSA9PT0gXCJ0ZXh0YXJlYVwiICkge1xyXG5cdFx0ZGVzdC5kZWZhdWx0VmFsdWUgPSBzcmMuZGVmYXVsdFZhbHVlO1xyXG5cdH1cclxufVxyXG5cclxuZnVuY3Rpb24gZG9tTWFuaXAoIGNvbGxlY3Rpb24sIGFyZ3MsIGNhbGxiYWNrLCBpZ25vcmVkICkge1xyXG5cclxuXHQvLyBGbGF0dGVuIGFueSBuZXN0ZWQgYXJyYXlzXHJcblx0YXJncyA9IGNvbmNhdC5hcHBseSggW10sIGFyZ3MgKTtcclxuXHJcblx0dmFyIGZyYWdtZW50LCBmaXJzdCwgc2NyaXB0cywgaGFzU2NyaXB0cywgbm9kZSwgZG9jLFxyXG5cdFx0aSA9IDAsXHJcblx0XHRsID0gY29sbGVjdGlvbi5sZW5ndGgsXHJcblx0XHRpTm9DbG9uZSA9IGwgLSAxLFxyXG5cdFx0dmFsdWUgPSBhcmdzWyAwIF0sXHJcblx0XHRpc0Z1bmN0aW9uID0galF1ZXJ5LmlzRnVuY3Rpb24oIHZhbHVlICk7XHJcblxyXG5cdC8vIFdlIGNhbid0IGNsb25lTm9kZSBmcmFnbWVudHMgdGhhdCBjb250YWluIGNoZWNrZWQsIGluIFdlYktpdFxyXG5cdGlmICggaXNGdW5jdGlvbiB8fFxyXG5cdFx0XHQoIGwgPiAxICYmIHR5cGVvZiB2YWx1ZSA9PT0gXCJzdHJpbmdcIiAmJlxyXG5cdFx0XHRcdCFzdXBwb3J0LmNoZWNrQ2xvbmUgJiYgcmNoZWNrZWQudGVzdCggdmFsdWUgKSApICkge1xyXG5cdFx0cmV0dXJuIGNvbGxlY3Rpb24uZWFjaCggZnVuY3Rpb24oIGluZGV4ICkge1xyXG5cdFx0XHR2YXIgc2VsZiA9IGNvbGxlY3Rpb24uZXEoIGluZGV4ICk7XHJcblx0XHRcdGlmICggaXNGdW5jdGlvbiApIHtcclxuXHRcdFx0XHRhcmdzWyAwIF0gPSB2YWx1ZS5jYWxsKCB0aGlzLCBpbmRleCwgc2VsZi5odG1sKCkgKTtcclxuXHRcdFx0fVxyXG5cdFx0XHRkb21NYW5pcCggc2VsZiwgYXJncywgY2FsbGJhY2ssIGlnbm9yZWQgKTtcclxuXHRcdH0gKTtcclxuXHR9XHJcblxyXG5cdGlmICggbCApIHtcclxuXHRcdGZyYWdtZW50ID0gYnVpbGRGcmFnbWVudCggYXJncywgY29sbGVjdGlvblsgMCBdLm93bmVyRG9jdW1lbnQsIGZhbHNlLCBjb2xsZWN0aW9uLCBpZ25vcmVkICk7XHJcblx0XHRmaXJzdCA9IGZyYWdtZW50LmZpcnN0Q2hpbGQ7XHJcblxyXG5cdFx0aWYgKCBmcmFnbWVudC5jaGlsZE5vZGVzLmxlbmd0aCA9PT0gMSApIHtcclxuXHRcdFx0ZnJhZ21lbnQgPSBmaXJzdDtcclxuXHRcdH1cclxuXHJcblx0XHQvLyBSZXF1aXJlIGVpdGhlciBuZXcgY29udGVudCBvciBhbiBpbnRlcmVzdCBpbiBpZ25vcmVkIGVsZW1lbnRzIHRvIGludm9rZSB0aGUgY2FsbGJhY2tcclxuXHRcdGlmICggZmlyc3QgfHwgaWdub3JlZCApIHtcclxuXHRcdFx0c2NyaXB0cyA9IGpRdWVyeS5tYXAoIGdldEFsbCggZnJhZ21lbnQsIFwic2NyaXB0XCIgKSwgZGlzYWJsZVNjcmlwdCApO1xyXG5cdFx0XHRoYXNTY3JpcHRzID0gc2NyaXB0cy5sZW5ndGg7XHJcblxyXG5cdFx0XHQvLyBVc2UgdGhlIG9yaWdpbmFsIGZyYWdtZW50IGZvciB0aGUgbGFzdCBpdGVtXHJcblx0XHRcdC8vIGluc3RlYWQgb2YgdGhlIGZpcnN0IGJlY2F1c2UgaXQgY2FuIGVuZCB1cFxyXG5cdFx0XHQvLyBiZWluZyBlbXB0aWVkIGluY29ycmVjdGx5IGluIGNlcnRhaW4gc2l0dWF0aW9ucyAoIzgwNzApLlxyXG5cdFx0XHRmb3IgKCA7IGkgPCBsOyBpKysgKSB7XHJcblx0XHRcdFx0bm9kZSA9IGZyYWdtZW50O1xyXG5cclxuXHRcdFx0XHRpZiAoIGkgIT09IGlOb0Nsb25lICkge1xyXG5cdFx0XHRcdFx0bm9kZSA9IGpRdWVyeS5jbG9uZSggbm9kZSwgdHJ1ZSwgdHJ1ZSApO1xyXG5cclxuXHRcdFx0XHRcdC8vIEtlZXAgcmVmZXJlbmNlcyB0byBjbG9uZWQgc2NyaXB0cyBmb3IgbGF0ZXIgcmVzdG9yYXRpb25cclxuXHRcdFx0XHRcdGlmICggaGFzU2NyaXB0cyApIHtcclxuXHJcblx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQ8NC4xLCBQaGFudG9tSlM8MlxyXG5cdFx0XHRcdFx0XHQvLyBwdXNoLmFwcGx5KF8sIGFycmF5bGlrZSkgdGhyb3dzIG9uIGFuY2llbnQgV2ViS2l0XHJcblx0XHRcdFx0XHRcdGpRdWVyeS5tZXJnZSggc2NyaXB0cywgZ2V0QWxsKCBub2RlLCBcInNjcmlwdFwiICkgKTtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdGNhbGxiYWNrLmNhbGwoIGNvbGxlY3Rpb25bIGkgXSwgbm9kZSwgaSApO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRpZiAoIGhhc1NjcmlwdHMgKSB7XHJcblx0XHRcdFx0ZG9jID0gc2NyaXB0c1sgc2NyaXB0cy5sZW5ndGggLSAxIF0ub3duZXJEb2N1bWVudDtcclxuXHJcblx0XHRcdFx0Ly8gUmVlbmFibGUgc2NyaXB0c1xyXG5cdFx0XHRcdGpRdWVyeS5tYXAoIHNjcmlwdHMsIHJlc3RvcmVTY3JpcHQgKTtcclxuXHJcblx0XHRcdFx0Ly8gRXZhbHVhdGUgZXhlY3V0YWJsZSBzY3JpcHRzIG9uIGZpcnN0IGRvY3VtZW50IGluc2VydGlvblxyXG5cdFx0XHRcdGZvciAoIGkgPSAwOyBpIDwgaGFzU2NyaXB0czsgaSsrICkge1xyXG5cdFx0XHRcdFx0bm9kZSA9IHNjcmlwdHNbIGkgXTtcclxuXHRcdFx0XHRcdGlmICggcnNjcmlwdFR5cGUudGVzdCggbm9kZS50eXBlIHx8IFwiXCIgKSAmJlxyXG5cdFx0XHRcdFx0XHQhZGF0YVByaXYuYWNjZXNzKCBub2RlLCBcImdsb2JhbEV2YWxcIiApICYmXHJcblx0XHRcdFx0XHRcdGpRdWVyeS5jb250YWlucyggZG9jLCBub2RlICkgKSB7XHJcblxyXG5cdFx0XHRcdFx0XHRpZiAoIG5vZGUuc3JjICkge1xyXG5cclxuXHRcdFx0XHRcdFx0XHQvLyBPcHRpb25hbCBBSkFYIGRlcGVuZGVuY3ksIGJ1dCB3b24ndCBydW4gc2NyaXB0cyBpZiBub3QgcHJlc2VudFxyXG5cdFx0XHRcdFx0XHRcdGlmICggalF1ZXJ5Ll9ldmFsVXJsICkge1xyXG5cdFx0XHRcdFx0XHRcdFx0alF1ZXJ5Ll9ldmFsVXJsKCBub2RlLnNyYyApO1xyXG5cdFx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRcdFx0XHRqUXVlcnkuZ2xvYmFsRXZhbCggbm9kZS50ZXh0Q29udGVudC5yZXBsYWNlKCByY2xlYW5TY3JpcHQsIFwiXCIgKSApO1xyXG5cdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0fVxyXG5cclxuXHRyZXR1cm4gY29sbGVjdGlvbjtcclxufVxyXG5cclxuZnVuY3Rpb24gcmVtb3ZlKCBlbGVtLCBzZWxlY3Rvciwga2VlcERhdGEgKSB7XHJcblx0dmFyIG5vZGUsXHJcblx0XHRub2RlcyA9IHNlbGVjdG9yID8galF1ZXJ5LmZpbHRlciggc2VsZWN0b3IsIGVsZW0gKSA6IGVsZW0sXHJcblx0XHRpID0gMDtcclxuXHJcblx0Zm9yICggOyAoIG5vZGUgPSBub2Rlc1sgaSBdICkgIT0gbnVsbDsgaSsrICkge1xyXG5cdFx0aWYgKCAha2VlcERhdGEgJiYgbm9kZS5ub2RlVHlwZSA9PT0gMSApIHtcclxuXHRcdFx0alF1ZXJ5LmNsZWFuRGF0YSggZ2V0QWxsKCBub2RlICkgKTtcclxuXHRcdH1cclxuXHJcblx0XHRpZiAoIG5vZGUucGFyZW50Tm9kZSApIHtcclxuXHRcdFx0aWYgKCBrZWVwRGF0YSAmJiBqUXVlcnkuY29udGFpbnMoIG5vZGUub3duZXJEb2N1bWVudCwgbm9kZSApICkge1xyXG5cdFx0XHRcdHNldEdsb2JhbEV2YWwoIGdldEFsbCggbm9kZSwgXCJzY3JpcHRcIiApICk7XHJcblx0XHRcdH1cclxuXHRcdFx0bm9kZS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKCBub2RlICk7XHJcblx0XHR9XHJcblx0fVxyXG5cclxuXHRyZXR1cm4gZWxlbTtcclxufVxyXG5cclxualF1ZXJ5LmV4dGVuZCgge1xyXG5cdGh0bWxQcmVmaWx0ZXI6IGZ1bmN0aW9uKCBodG1sICkge1xyXG5cdFx0cmV0dXJuIGh0bWwucmVwbGFjZSggcnhodG1sVGFnLCBcIjwkMT48LyQyPlwiICk7XHJcblx0fSxcclxuXHJcblx0Y2xvbmU6IGZ1bmN0aW9uKCBlbGVtLCBkYXRhQW5kRXZlbnRzLCBkZWVwRGF0YUFuZEV2ZW50cyApIHtcclxuXHRcdHZhciBpLCBsLCBzcmNFbGVtZW50cywgZGVzdEVsZW1lbnRzLFxyXG5cdFx0XHRjbG9uZSA9IGVsZW0uY2xvbmVOb2RlKCB0cnVlICksXHJcblx0XHRcdGluUGFnZSA9IGpRdWVyeS5jb250YWlucyggZWxlbS5vd25lckRvY3VtZW50LCBlbGVtICk7XHJcblxyXG5cdFx0Ly8gRml4IElFIGNsb25pbmcgaXNzdWVzXHJcblx0XHRpZiAoICFzdXBwb3J0Lm5vQ2xvbmVDaGVja2VkICYmICggZWxlbS5ub2RlVHlwZSA9PT0gMSB8fCBlbGVtLm5vZGVUeXBlID09PSAxMSApICYmXHJcblx0XHRcdFx0IWpRdWVyeS5pc1hNTERvYyggZWxlbSApICkge1xyXG5cclxuXHRcdFx0Ly8gV2UgZXNjaGV3IFNpenpsZSBoZXJlIGZvciBwZXJmb3JtYW5jZSByZWFzb25zOiBodHRwOi8vanNwZXJmLmNvbS9nZXRhbGwtdnMtc2l6emxlLzJcclxuXHRcdFx0ZGVzdEVsZW1lbnRzID0gZ2V0QWxsKCBjbG9uZSApO1xyXG5cdFx0XHRzcmNFbGVtZW50cyA9IGdldEFsbCggZWxlbSApO1xyXG5cclxuXHRcdFx0Zm9yICggaSA9IDAsIGwgPSBzcmNFbGVtZW50cy5sZW5ndGg7IGkgPCBsOyBpKysgKSB7XHJcblx0XHRcdFx0Zml4SW5wdXQoIHNyY0VsZW1lbnRzWyBpIF0sIGRlc3RFbGVtZW50c1sgaSBdICk7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHJcblx0XHQvLyBDb3B5IHRoZSBldmVudHMgZnJvbSB0aGUgb3JpZ2luYWwgdG8gdGhlIGNsb25lXHJcblx0XHRpZiAoIGRhdGFBbmRFdmVudHMgKSB7XHJcblx0XHRcdGlmICggZGVlcERhdGFBbmRFdmVudHMgKSB7XHJcblx0XHRcdFx0c3JjRWxlbWVudHMgPSBzcmNFbGVtZW50cyB8fCBnZXRBbGwoIGVsZW0gKTtcclxuXHRcdFx0XHRkZXN0RWxlbWVudHMgPSBkZXN0RWxlbWVudHMgfHwgZ2V0QWxsKCBjbG9uZSApO1xyXG5cclxuXHRcdFx0XHRmb3IgKCBpID0gMCwgbCA9IHNyY0VsZW1lbnRzLmxlbmd0aDsgaSA8IGw7IGkrKyApIHtcclxuXHRcdFx0XHRcdGNsb25lQ29weUV2ZW50KCBzcmNFbGVtZW50c1sgaSBdLCBkZXN0RWxlbWVudHNbIGkgXSApO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRjbG9uZUNvcHlFdmVudCggZWxlbSwgY2xvbmUgKTtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cclxuXHRcdC8vIFByZXNlcnZlIHNjcmlwdCBldmFsdWF0aW9uIGhpc3RvcnlcclxuXHRcdGRlc3RFbGVtZW50cyA9IGdldEFsbCggY2xvbmUsIFwic2NyaXB0XCIgKTtcclxuXHRcdGlmICggZGVzdEVsZW1lbnRzLmxlbmd0aCA+IDAgKSB7XHJcblx0XHRcdHNldEdsb2JhbEV2YWwoIGRlc3RFbGVtZW50cywgIWluUGFnZSAmJiBnZXRBbGwoIGVsZW0sIFwic2NyaXB0XCIgKSApO1xyXG5cdFx0fVxyXG5cclxuXHRcdC8vIFJldHVybiB0aGUgY2xvbmVkIHNldFxyXG5cdFx0cmV0dXJuIGNsb25lO1xyXG5cdH0sXHJcblxyXG5cdGNsZWFuRGF0YTogZnVuY3Rpb24oIGVsZW1zICkge1xyXG5cdFx0dmFyIGRhdGEsIGVsZW0sIHR5cGUsXHJcblx0XHRcdHNwZWNpYWwgPSBqUXVlcnkuZXZlbnQuc3BlY2lhbCxcclxuXHRcdFx0aSA9IDA7XHJcblxyXG5cdFx0Zm9yICggOyAoIGVsZW0gPSBlbGVtc1sgaSBdICkgIT09IHVuZGVmaW5lZDsgaSsrICkge1xyXG5cdFx0XHRpZiAoIGFjY2VwdERhdGEoIGVsZW0gKSApIHtcclxuXHRcdFx0XHRpZiAoICggZGF0YSA9IGVsZW1bIGRhdGFQcml2LmV4cGFuZG8gXSApICkge1xyXG5cdFx0XHRcdFx0aWYgKCBkYXRhLmV2ZW50cyApIHtcclxuXHRcdFx0XHRcdFx0Zm9yICggdHlwZSBpbiBkYXRhLmV2ZW50cyApIHtcclxuXHRcdFx0XHRcdFx0XHRpZiAoIHNwZWNpYWxbIHR5cGUgXSApIHtcclxuXHRcdFx0XHRcdFx0XHRcdGpRdWVyeS5ldmVudC5yZW1vdmUoIGVsZW0sIHR5cGUgKTtcclxuXHJcblx0XHRcdFx0XHRcdFx0Ly8gVGhpcyBpcyBhIHNob3J0Y3V0IHRvIGF2b2lkIGpRdWVyeS5ldmVudC5yZW1vdmUncyBvdmVyaGVhZFxyXG5cdFx0XHRcdFx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0XHRcdFx0XHRqUXVlcnkucmVtb3ZlRXZlbnQoIGVsZW0sIHR5cGUsIGRhdGEuaGFuZGxlICk7XHJcblx0XHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdFx0Ly8gU3VwcG9ydDogQ2hyb21lIDw9IDM1LTQ1K1xyXG5cdFx0XHRcdFx0Ly8gQXNzaWduIHVuZGVmaW5lZCBpbnN0ZWFkIG9mIHVzaW5nIGRlbGV0ZSwgc2VlIERhdGEjcmVtb3ZlXHJcblx0XHRcdFx0XHRlbGVtWyBkYXRhUHJpdi5leHBhbmRvIF0gPSB1bmRlZmluZWQ7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHRcdGlmICggZWxlbVsgZGF0YVVzZXIuZXhwYW5kbyBdICkge1xyXG5cclxuXHRcdFx0XHRcdC8vIFN1cHBvcnQ6IENocm9tZSA8PSAzNS00NStcclxuXHRcdFx0XHRcdC8vIEFzc2lnbiB1bmRlZmluZWQgaW5zdGVhZCBvZiB1c2luZyBkZWxldGUsIHNlZSBEYXRhI3JlbW92ZVxyXG5cdFx0XHRcdFx0ZWxlbVsgZGF0YVVzZXIuZXhwYW5kbyBdID0gdW5kZWZpbmVkO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdH1cclxufSApO1xyXG5cclxualF1ZXJ5LmZuLmV4dGVuZCgge1xyXG5cclxuXHQvLyBLZWVwIGRvbU1hbmlwIGV4cG9zZWQgdW50aWwgMy4wIChnaC0yMjI1KVxyXG5cdGRvbU1hbmlwOiBkb21NYW5pcCxcclxuXHJcblx0ZGV0YWNoOiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XHJcblx0XHRyZXR1cm4gcmVtb3ZlKCB0aGlzLCBzZWxlY3RvciwgdHJ1ZSApO1xyXG5cdH0sXHJcblxyXG5cdHJlbW92ZTogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xyXG5cdFx0cmV0dXJuIHJlbW92ZSggdGhpcywgc2VsZWN0b3IgKTtcclxuXHR9LFxyXG5cclxuXHR0ZXh0OiBmdW5jdGlvbiggdmFsdWUgKSB7XHJcblx0XHRyZXR1cm4gYWNjZXNzKCB0aGlzLCBmdW5jdGlvbiggdmFsdWUgKSB7XHJcblx0XHRcdHJldHVybiB2YWx1ZSA9PT0gdW5kZWZpbmVkID9cclxuXHRcdFx0XHRqUXVlcnkudGV4dCggdGhpcyApIDpcclxuXHRcdFx0XHR0aGlzLmVtcHR5KCkuZWFjaCggZnVuY3Rpb24oKSB7XHJcblx0XHRcdFx0XHRpZiAoIHRoaXMubm9kZVR5cGUgPT09IDEgfHwgdGhpcy5ub2RlVHlwZSA9PT0gMTEgfHwgdGhpcy5ub2RlVHlwZSA9PT0gOSApIHtcclxuXHRcdFx0XHRcdFx0dGhpcy50ZXh0Q29udGVudCA9IHZhbHVlO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH0gKTtcclxuXHRcdH0sIG51bGwsIHZhbHVlLCBhcmd1bWVudHMubGVuZ3RoICk7XHJcblx0fSxcclxuXHJcblx0YXBwZW5kOiBmdW5jdGlvbigpIHtcclxuXHRcdHJldHVybiBkb21NYW5pcCggdGhpcywgYXJndW1lbnRzLCBmdW5jdGlvbiggZWxlbSApIHtcclxuXHRcdFx0aWYgKCB0aGlzLm5vZGVUeXBlID09PSAxIHx8IHRoaXMubm9kZVR5cGUgPT09IDExIHx8IHRoaXMubm9kZVR5cGUgPT09IDkgKSB7XHJcblx0XHRcdFx0dmFyIHRhcmdldCA9IG1hbmlwdWxhdGlvblRhcmdldCggdGhpcywgZWxlbSApO1xyXG5cdFx0XHRcdHRhcmdldC5hcHBlbmRDaGlsZCggZWxlbSApO1xyXG5cdFx0XHR9XHJcblx0XHR9ICk7XHJcblx0fSxcclxuXHJcblx0cHJlcGVuZDogZnVuY3Rpb24oKSB7XHJcblx0XHRyZXR1cm4gZG9tTWFuaXAoIHRoaXMsIGFyZ3VtZW50cywgZnVuY3Rpb24oIGVsZW0gKSB7XHJcblx0XHRcdGlmICggdGhpcy5ub2RlVHlwZSA9PT0gMSB8fCB0aGlzLm5vZGVUeXBlID09PSAxMSB8fCB0aGlzLm5vZGVUeXBlID09PSA5ICkge1xyXG5cdFx0XHRcdHZhciB0YXJnZXQgPSBtYW5pcHVsYXRpb25UYXJnZXQoIHRoaXMsIGVsZW0gKTtcclxuXHRcdFx0XHR0YXJnZXQuaW5zZXJ0QmVmb3JlKCBlbGVtLCB0YXJnZXQuZmlyc3RDaGlsZCApO1xyXG5cdFx0XHR9XHJcblx0XHR9ICk7XHJcblx0fSxcclxuXHJcblx0YmVmb3JlOiBmdW5jdGlvbigpIHtcclxuXHRcdHJldHVybiBkb21NYW5pcCggdGhpcywgYXJndW1lbnRzLCBmdW5jdGlvbiggZWxlbSApIHtcclxuXHRcdFx0aWYgKCB0aGlzLnBhcmVudE5vZGUgKSB7XHJcblx0XHRcdFx0dGhpcy5wYXJlbnROb2RlLmluc2VydEJlZm9yZSggZWxlbSwgdGhpcyApO1xyXG5cdFx0XHR9XHJcblx0XHR9ICk7XHJcblx0fSxcclxuXHJcblx0YWZ0ZXI6IGZ1bmN0aW9uKCkge1xyXG5cdFx0cmV0dXJuIGRvbU1hbmlwKCB0aGlzLCBhcmd1bWVudHMsIGZ1bmN0aW9uKCBlbGVtICkge1xyXG5cdFx0XHRpZiAoIHRoaXMucGFyZW50Tm9kZSApIHtcclxuXHRcdFx0XHR0aGlzLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKCBlbGVtLCB0aGlzLm5leHRTaWJsaW5nICk7XHJcblx0XHRcdH1cclxuXHRcdH0gKTtcclxuXHR9LFxyXG5cclxuXHRlbXB0eTogZnVuY3Rpb24oKSB7XHJcblx0XHR2YXIgZWxlbSxcclxuXHRcdFx0aSA9IDA7XHJcblxyXG5cdFx0Zm9yICggOyAoIGVsZW0gPSB0aGlzWyBpIF0gKSAhPSBudWxsOyBpKysgKSB7XHJcblx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSApIHtcclxuXHJcblx0XHRcdFx0Ly8gUHJldmVudCBtZW1vcnkgbGVha3NcclxuXHRcdFx0XHRqUXVlcnkuY2xlYW5EYXRhKCBnZXRBbGwoIGVsZW0sIGZhbHNlICkgKTtcclxuXHJcblx0XHRcdFx0Ly8gUmVtb3ZlIGFueSByZW1haW5pbmcgbm9kZXNcclxuXHRcdFx0XHRlbGVtLnRleHRDb250ZW50ID0gXCJcIjtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cdH0sXHJcblxyXG5cdGNsb25lOiBmdW5jdGlvbiggZGF0YUFuZEV2ZW50cywgZGVlcERhdGFBbmRFdmVudHMgKSB7XHJcblx0XHRkYXRhQW5kRXZlbnRzID0gZGF0YUFuZEV2ZW50cyA9PSBudWxsID8gZmFsc2UgOiBkYXRhQW5kRXZlbnRzO1xyXG5cdFx0ZGVlcERhdGFBbmRFdmVudHMgPSBkZWVwRGF0YUFuZEV2ZW50cyA9PSBudWxsID8gZGF0YUFuZEV2ZW50cyA6IGRlZXBEYXRhQW5kRXZlbnRzO1xyXG5cclxuXHRcdHJldHVybiB0aGlzLm1hcCggZnVuY3Rpb24oKSB7XHJcblx0XHRcdHJldHVybiBqUXVlcnkuY2xvbmUoIHRoaXMsIGRhdGFBbmRFdmVudHMsIGRlZXBEYXRhQW5kRXZlbnRzICk7XHJcblx0XHR9ICk7XHJcblx0fSxcclxuXHJcblx0aHRtbDogZnVuY3Rpb24oIHZhbHVlICkge1xyXG5cdFx0cmV0dXJuIGFjY2VzcyggdGhpcywgZnVuY3Rpb24oIHZhbHVlICkge1xyXG5cdFx0XHR2YXIgZWxlbSA9IHRoaXNbIDAgXSB8fCB7fSxcclxuXHRcdFx0XHRpID0gMCxcclxuXHRcdFx0XHRsID0gdGhpcy5sZW5ndGg7XHJcblxyXG5cdFx0XHRpZiAoIHZhbHVlID09PSB1bmRlZmluZWQgJiYgZWxlbS5ub2RlVHlwZSA9PT0gMSApIHtcclxuXHRcdFx0XHRyZXR1cm4gZWxlbS5pbm5lckhUTUw7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdC8vIFNlZSBpZiB3ZSBjYW4gdGFrZSBhIHNob3J0Y3V0IGFuZCBqdXN0IHVzZSBpbm5lckhUTUxcclxuXHRcdFx0aWYgKCB0eXBlb2YgdmFsdWUgPT09IFwic3RyaW5nXCIgJiYgIXJub0lubmVyaHRtbC50ZXN0KCB2YWx1ZSApICYmXHJcblx0XHRcdFx0IXdyYXBNYXBbICggcnRhZ05hbWUuZXhlYyggdmFsdWUgKSB8fCBbIFwiXCIsIFwiXCIgXSApWyAxIF0udG9Mb3dlckNhc2UoKSBdICkge1xyXG5cclxuXHRcdFx0XHR2YWx1ZSA9IGpRdWVyeS5odG1sUHJlZmlsdGVyKCB2YWx1ZSApO1xyXG5cclxuXHRcdFx0XHR0cnkge1xyXG5cdFx0XHRcdFx0Zm9yICggOyBpIDwgbDsgaSsrICkge1xyXG5cdFx0XHRcdFx0XHRlbGVtID0gdGhpc1sgaSBdIHx8IHt9O1xyXG5cclxuXHRcdFx0XHRcdFx0Ly8gUmVtb3ZlIGVsZW1lbnQgbm9kZXMgYW5kIHByZXZlbnQgbWVtb3J5IGxlYWtzXHJcblx0XHRcdFx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSApIHtcclxuXHRcdFx0XHRcdFx0XHRqUXVlcnkuY2xlYW5EYXRhKCBnZXRBbGwoIGVsZW0sIGZhbHNlICkgKTtcclxuXHRcdFx0XHRcdFx0XHRlbGVtLmlubmVySFRNTCA9IHZhbHVlO1xyXG5cdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdFx0ZWxlbSA9IDA7XHJcblxyXG5cdFx0XHRcdC8vIElmIHVzaW5nIGlubmVySFRNTCB0aHJvd3MgYW4gZXhjZXB0aW9uLCB1c2UgdGhlIGZhbGxiYWNrIG1ldGhvZFxyXG5cdFx0XHRcdH0gY2F0Y2ggKCBlICkge31cclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0aWYgKCBlbGVtICkge1xyXG5cdFx0XHRcdHRoaXMuZW1wdHkoKS5hcHBlbmQoIHZhbHVlICk7XHJcblx0XHRcdH1cclxuXHRcdH0sIG51bGwsIHZhbHVlLCBhcmd1bWVudHMubGVuZ3RoICk7XHJcblx0fSxcclxuXHJcblx0cmVwbGFjZVdpdGg6IGZ1bmN0aW9uKCkge1xyXG5cdFx0dmFyIGlnbm9yZWQgPSBbXTtcclxuXHJcblx0XHQvLyBNYWtlIHRoZSBjaGFuZ2VzLCByZXBsYWNpbmcgZWFjaCBub24taWdub3JlZCBjb250ZXh0IGVsZW1lbnQgd2l0aCB0aGUgbmV3IGNvbnRlbnRcclxuXHRcdHJldHVybiBkb21NYW5pcCggdGhpcywgYXJndW1lbnRzLCBmdW5jdGlvbiggZWxlbSApIHtcclxuXHRcdFx0dmFyIHBhcmVudCA9IHRoaXMucGFyZW50Tm9kZTtcclxuXHJcblx0XHRcdGlmICggalF1ZXJ5LmluQXJyYXkoIHRoaXMsIGlnbm9yZWQgKSA8IDAgKSB7XHJcblx0XHRcdFx0alF1ZXJ5LmNsZWFuRGF0YSggZ2V0QWxsKCB0aGlzICkgKTtcclxuXHRcdFx0XHRpZiAoIHBhcmVudCApIHtcclxuXHRcdFx0XHRcdHBhcmVudC5yZXBsYWNlQ2hpbGQoIGVsZW0sIHRoaXMgKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHJcblx0XHQvLyBGb3JjZSBjYWxsYmFjayBpbnZvY2F0aW9uXHJcblx0XHR9LCBpZ25vcmVkICk7XHJcblx0fVxyXG59ICk7XHJcblxyXG5qUXVlcnkuZWFjaCgge1xyXG5cdGFwcGVuZFRvOiBcImFwcGVuZFwiLFxyXG5cdHByZXBlbmRUbzogXCJwcmVwZW5kXCIsXHJcblx0aW5zZXJ0QmVmb3JlOiBcImJlZm9yZVwiLFxyXG5cdGluc2VydEFmdGVyOiBcImFmdGVyXCIsXHJcblx0cmVwbGFjZUFsbDogXCJyZXBsYWNlV2l0aFwiXHJcbn0sIGZ1bmN0aW9uKCBuYW1lLCBvcmlnaW5hbCApIHtcclxuXHRqUXVlcnkuZm5bIG5hbWUgXSA9IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcclxuXHRcdHZhciBlbGVtcyxcclxuXHRcdFx0cmV0ID0gW10sXHJcblx0XHRcdGluc2VydCA9IGpRdWVyeSggc2VsZWN0b3IgKSxcclxuXHRcdFx0bGFzdCA9IGluc2VydC5sZW5ndGggLSAxLFxyXG5cdFx0XHRpID0gMDtcclxuXHJcblx0XHRmb3IgKCA7IGkgPD0gbGFzdDsgaSsrICkge1xyXG5cdFx0XHRlbGVtcyA9IGkgPT09IGxhc3QgPyB0aGlzIDogdGhpcy5jbG9uZSggdHJ1ZSApO1xyXG5cdFx0XHRqUXVlcnkoIGluc2VydFsgaSBdIClbIG9yaWdpbmFsIF0oIGVsZW1zICk7XHJcblxyXG5cdFx0XHQvLyBTdXBwb3J0OiBRdFdlYktpdFxyXG5cdFx0XHQvLyAuZ2V0KCkgYmVjYXVzZSBwdXNoLmFwcGx5KF8sIGFycmF5bGlrZSkgdGhyb3dzXHJcblx0XHRcdHB1c2guYXBwbHkoIHJldCwgZWxlbXMuZ2V0KCkgKTtcclxuXHRcdH1cclxuXHJcblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIHJldCApO1xyXG5cdH07XHJcbn0gKTtcclxuXHJcblxyXG52YXIgaWZyYW1lLFxyXG5cdGVsZW1kaXNwbGF5ID0ge1xyXG5cclxuXHRcdC8vIFN1cHBvcnQ6IEZpcmVmb3hcclxuXHRcdC8vIFdlIGhhdmUgdG8gcHJlLWRlZmluZSB0aGVzZSB2YWx1ZXMgZm9yIEZGICgjMTAyMjcpXHJcblx0XHRIVE1MOiBcImJsb2NrXCIsXHJcblx0XHRCT0RZOiBcImJsb2NrXCJcclxuXHR9O1xyXG5cclxuLyoqXHJcbiAqIFJldHJpZXZlIHRoZSBhY3R1YWwgZGlzcGxheSBvZiBhIGVsZW1lbnRcclxuICogQHBhcmFtIHtTdHJpbmd9IG5hbWUgbm9kZU5hbWUgb2YgdGhlIGVsZW1lbnRcclxuICogQHBhcmFtIHtPYmplY3R9IGRvYyBEb2N1bWVudCBvYmplY3RcclxuICovXHJcblxyXG4vLyBDYWxsZWQgb25seSBmcm9tIHdpdGhpbiBkZWZhdWx0RGlzcGxheVxyXG5mdW5jdGlvbiBhY3R1YWxEaXNwbGF5KCBuYW1lLCBkb2MgKSB7XHJcblx0dmFyIGVsZW0gPSBqUXVlcnkoIGRvYy5jcmVhdGVFbGVtZW50KCBuYW1lICkgKS5hcHBlbmRUbyggZG9jLmJvZHkgKSxcclxuXHJcblx0XHRkaXNwbGF5ID0galF1ZXJ5LmNzcyggZWxlbVsgMCBdLCBcImRpc3BsYXlcIiApO1xyXG5cclxuXHQvLyBXZSBkb24ndCBoYXZlIGFueSBkYXRhIHN0b3JlZCBvbiB0aGUgZWxlbWVudCxcclxuXHQvLyBzbyB1c2UgXCJkZXRhY2hcIiBtZXRob2QgYXMgZmFzdCB3YXkgdG8gZ2V0IHJpZCBvZiB0aGUgZWxlbWVudFxyXG5cdGVsZW0uZGV0YWNoKCk7XHJcblxyXG5cdHJldHVybiBkaXNwbGF5O1xyXG59XHJcblxyXG4vKipcclxuICogVHJ5IHRvIGRldGVybWluZSB0aGUgZGVmYXVsdCBkaXNwbGF5IHZhbHVlIG9mIGFuIGVsZW1lbnRcclxuICogQHBhcmFtIHtTdHJpbmd9IG5vZGVOYW1lXHJcbiAqL1xyXG5mdW5jdGlvbiBkZWZhdWx0RGlzcGxheSggbm9kZU5hbWUgKSB7XHJcblx0dmFyIGRvYyA9IGRvY3VtZW50LFxyXG5cdFx0ZGlzcGxheSA9IGVsZW1kaXNwbGF5WyBub2RlTmFtZSBdO1xyXG5cclxuXHRpZiAoICFkaXNwbGF5ICkge1xyXG5cdFx0ZGlzcGxheSA9IGFjdHVhbERpc3BsYXkoIG5vZGVOYW1lLCBkb2MgKTtcclxuXHJcblx0XHQvLyBJZiB0aGUgc2ltcGxlIHdheSBmYWlscywgcmVhZCBmcm9tIGluc2lkZSBhbiBpZnJhbWVcclxuXHRcdGlmICggZGlzcGxheSA9PT0gXCJub25lXCIgfHwgIWRpc3BsYXkgKSB7XHJcblxyXG5cdFx0XHQvLyBVc2UgdGhlIGFscmVhZHktY3JlYXRlZCBpZnJhbWUgaWYgcG9zc2libGVcclxuXHRcdFx0aWZyYW1lID0gKCBpZnJhbWUgfHwgalF1ZXJ5KCBcIjxpZnJhbWUgZnJhbWVib3JkZXI9JzAnIHdpZHRoPScwJyBoZWlnaHQ9JzAnLz5cIiApIClcclxuXHRcdFx0XHQuYXBwZW5kVG8oIGRvYy5kb2N1bWVudEVsZW1lbnQgKTtcclxuXHJcblx0XHRcdC8vIEFsd2F5cyB3cml0ZSBhIG5ldyBIVE1MIHNrZWxldG9uIHNvIFdlYmtpdCBhbmQgRmlyZWZveCBkb24ndCBjaG9rZSBvbiByZXVzZVxyXG5cdFx0XHRkb2MgPSBpZnJhbWVbIDAgXS5jb250ZW50RG9jdW1lbnQ7XHJcblxyXG5cdFx0XHQvLyBTdXBwb3J0OiBJRVxyXG5cdFx0XHRkb2Mud3JpdGUoKTtcclxuXHRcdFx0ZG9jLmNsb3NlKCk7XHJcblxyXG5cdFx0XHRkaXNwbGF5ID0gYWN0dWFsRGlzcGxheSggbm9kZU5hbWUsIGRvYyApO1xyXG5cdFx0XHRpZnJhbWUuZGV0YWNoKCk7XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gU3RvcmUgdGhlIGNvcnJlY3QgZGVmYXVsdCBkaXNwbGF5XHJcblx0XHRlbGVtZGlzcGxheVsgbm9kZU5hbWUgXSA9IGRpc3BsYXk7XHJcblx0fVxyXG5cclxuXHRyZXR1cm4gZGlzcGxheTtcclxufVxyXG52YXIgcm1hcmdpbiA9ICggL15tYXJnaW4vICk7XHJcblxyXG52YXIgcm51bW5vbnB4ID0gbmV3IFJlZ0V4cCggXCJeKFwiICsgcG51bSArIFwiKSg/IXB4KVthLXolXSskXCIsIFwiaVwiICk7XHJcblxyXG52YXIgZ2V0U3R5bGVzID0gZnVuY3Rpb24oIGVsZW0gKSB7XHJcblxyXG5cdFx0Ly8gU3VwcG9ydDogSUU8PTExKywgRmlyZWZveDw9MzArICgjMTUwOTgsICMxNDE1MClcclxuXHRcdC8vIElFIHRocm93cyBvbiBlbGVtZW50cyBjcmVhdGVkIGluIHBvcHVwc1xyXG5cdFx0Ly8gRkYgbWVhbndoaWxlIHRocm93cyBvbiBmcmFtZSBlbGVtZW50cyB0aHJvdWdoIFwiZGVmYXVsdFZpZXcuZ2V0Q29tcHV0ZWRTdHlsZVwiXHJcblx0XHR2YXIgdmlldyA9IGVsZW0ub3duZXJEb2N1bWVudC5kZWZhdWx0VmlldztcclxuXHJcblx0XHRpZiAoICF2aWV3IHx8ICF2aWV3Lm9wZW5lciApIHtcclxuXHRcdFx0dmlldyA9IHdpbmRvdztcclxuXHRcdH1cclxuXHJcblx0XHRyZXR1cm4gdmlldy5nZXRDb21wdXRlZFN0eWxlKCBlbGVtICk7XHJcblx0fTtcclxuXHJcbnZhciBzd2FwID0gZnVuY3Rpb24oIGVsZW0sIG9wdGlvbnMsIGNhbGxiYWNrLCBhcmdzICkge1xyXG5cdHZhciByZXQsIG5hbWUsXHJcblx0XHRvbGQgPSB7fTtcclxuXHJcblx0Ly8gUmVtZW1iZXIgdGhlIG9sZCB2YWx1ZXMsIGFuZCBpbnNlcnQgdGhlIG5ldyBvbmVzXHJcblx0Zm9yICggbmFtZSBpbiBvcHRpb25zICkge1xyXG5cdFx0b2xkWyBuYW1lIF0gPSBlbGVtLnN0eWxlWyBuYW1lIF07XHJcblx0XHRlbGVtLnN0eWxlWyBuYW1lIF0gPSBvcHRpb25zWyBuYW1lIF07XHJcblx0fVxyXG5cclxuXHRyZXQgPSBjYWxsYmFjay5hcHBseSggZWxlbSwgYXJncyB8fCBbXSApO1xyXG5cclxuXHQvLyBSZXZlcnQgdGhlIG9sZCB2YWx1ZXNcclxuXHRmb3IgKCBuYW1lIGluIG9wdGlvbnMgKSB7XHJcblx0XHRlbGVtLnN0eWxlWyBuYW1lIF0gPSBvbGRbIG5hbWUgXTtcclxuXHR9XHJcblxyXG5cdHJldHVybiByZXQ7XHJcbn07XHJcblxyXG5cclxudmFyIGRvY3VtZW50RWxlbWVudCA9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcclxuXHJcblxyXG5cclxuKCBmdW5jdGlvbigpIHtcclxuXHR2YXIgcGl4ZWxQb3NpdGlvblZhbCwgYm94U2l6aW5nUmVsaWFibGVWYWwsIHBpeGVsTWFyZ2luUmlnaHRWYWwsIHJlbGlhYmxlTWFyZ2luTGVmdFZhbCxcclxuXHRcdGNvbnRhaW5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiZGl2XCIgKSxcclxuXHRcdGRpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiZGl2XCIgKTtcclxuXHJcblx0Ly8gRmluaXNoIGVhcmx5IGluIGxpbWl0ZWQgKG5vbi1icm93c2VyKSBlbnZpcm9ubWVudHNcclxuXHRpZiAoICFkaXYuc3R5bGUgKSB7XHJcblx0XHRyZXR1cm47XHJcblx0fVxyXG5cclxuXHQvLyBTdXBwb3J0OiBJRTktMTErXHJcblx0Ly8gU3R5bGUgb2YgY2xvbmVkIGVsZW1lbnQgYWZmZWN0cyBzb3VyY2UgZWxlbWVudCBjbG9uZWQgKCM4OTA4KVxyXG5cdGRpdi5zdHlsZS5iYWNrZ3JvdW5kQ2xpcCA9IFwiY29udGVudC1ib3hcIjtcclxuXHRkaXYuY2xvbmVOb2RlKCB0cnVlICkuc3R5bGUuYmFja2dyb3VuZENsaXAgPSBcIlwiO1xyXG5cdHN1cHBvcnQuY2xlYXJDbG9uZVN0eWxlID0gZGl2LnN0eWxlLmJhY2tncm91bmRDbGlwID09PSBcImNvbnRlbnQtYm94XCI7XHJcblxyXG5cdGNvbnRhaW5lci5zdHlsZS5jc3NUZXh0ID0gXCJib3JkZXI6MDt3aWR0aDo4cHg7aGVpZ2h0OjA7dG9wOjA7bGVmdDotOTk5OXB4O1wiICtcclxuXHRcdFwicGFkZGluZzowO21hcmdpbi10b3A6MXB4O3Bvc2l0aW9uOmFic29sdXRlXCI7XHJcblx0Y29udGFpbmVyLmFwcGVuZENoaWxkKCBkaXYgKTtcclxuXHJcblx0Ly8gRXhlY3V0aW5nIGJvdGggcGl4ZWxQb3NpdGlvbiAmIGJveFNpemluZ1JlbGlhYmxlIHRlc3RzIHJlcXVpcmUgb25seSBvbmUgbGF5b3V0XHJcblx0Ly8gc28gdGhleSdyZSBleGVjdXRlZCBhdCB0aGUgc2FtZSB0aW1lIHRvIHNhdmUgdGhlIHNlY29uZCBjb21wdXRhdGlvbi5cclxuXHRmdW5jdGlvbiBjb21wdXRlU3R5bGVUZXN0cygpIHtcclxuXHRcdGRpdi5zdHlsZS5jc3NUZXh0ID1cclxuXHJcblx0XHRcdC8vIFN1cHBvcnQ6IEZpcmVmb3g8MjksIEFuZHJvaWQgMi4zXHJcblx0XHRcdC8vIFZlbmRvci1wcmVmaXggYm94LXNpemluZ1xyXG5cdFx0XHRcIi13ZWJraXQtYm94LXNpemluZzpib3JkZXItYm94Oy1tb3otYm94LXNpemluZzpib3JkZXItYm94O2JveC1zaXppbmc6Ym9yZGVyLWJveDtcIiArXHJcblx0XHRcdFwicG9zaXRpb246cmVsYXRpdmU7ZGlzcGxheTpibG9jaztcIiArXHJcblx0XHRcdFwibWFyZ2luOmF1dG87Ym9yZGVyOjFweDtwYWRkaW5nOjFweDtcIiArXHJcblx0XHRcdFwidG9wOjElO3dpZHRoOjUwJVwiO1xyXG5cdFx0ZGl2LmlubmVySFRNTCA9IFwiXCI7XHJcblx0XHRkb2N1bWVudEVsZW1lbnQuYXBwZW5kQ2hpbGQoIGNvbnRhaW5lciApO1xyXG5cclxuXHRcdHZhciBkaXZTdHlsZSA9IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKCBkaXYgKTtcclxuXHRcdHBpeGVsUG9zaXRpb25WYWwgPSBkaXZTdHlsZS50b3AgIT09IFwiMSVcIjtcclxuXHRcdHJlbGlhYmxlTWFyZ2luTGVmdFZhbCA9IGRpdlN0eWxlLm1hcmdpbkxlZnQgPT09IFwiMnB4XCI7XHJcblx0XHRib3hTaXppbmdSZWxpYWJsZVZhbCA9IGRpdlN0eWxlLndpZHRoID09PSBcIjRweFwiO1xyXG5cclxuXHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgNC4wIC0gNC4zIG9ubHlcclxuXHRcdC8vIFNvbWUgc3R5bGVzIGNvbWUgYmFjayB3aXRoIHBlcmNlbnRhZ2UgdmFsdWVzLCBldmVuIHRob3VnaCB0aGV5IHNob3VsZG4ndFxyXG5cdFx0ZGl2LnN0eWxlLm1hcmdpblJpZ2h0ID0gXCI1MCVcIjtcclxuXHRcdHBpeGVsTWFyZ2luUmlnaHRWYWwgPSBkaXZTdHlsZS5tYXJnaW5SaWdodCA9PT0gXCI0cHhcIjtcclxuXHJcblx0XHRkb2N1bWVudEVsZW1lbnQucmVtb3ZlQ2hpbGQoIGNvbnRhaW5lciApO1xyXG5cdH1cclxuXHJcblx0alF1ZXJ5LmV4dGVuZCggc3VwcG9ydCwge1xyXG5cdFx0cGl4ZWxQb3NpdGlvbjogZnVuY3Rpb24oKSB7XHJcblxyXG5cdFx0XHQvLyBUaGlzIHRlc3QgaXMgZXhlY3V0ZWQgb25seSBvbmNlIGJ1dCB3ZSBzdGlsbCBkbyBtZW1vaXppbmdcclxuXHRcdFx0Ly8gc2luY2Ugd2UgY2FuIHVzZSB0aGUgYm94U2l6aW5nUmVsaWFibGUgcHJlLWNvbXB1dGluZy5cclxuXHRcdFx0Ly8gTm8gbmVlZCB0byBjaGVjayBpZiB0aGUgdGVzdCB3YXMgYWxyZWFkeSBwZXJmb3JtZWQsIHRob3VnaC5cclxuXHRcdFx0Y29tcHV0ZVN0eWxlVGVzdHMoKTtcclxuXHRcdFx0cmV0dXJuIHBpeGVsUG9zaXRpb25WYWw7XHJcblx0XHR9LFxyXG5cdFx0Ym94U2l6aW5nUmVsaWFibGU6IGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRpZiAoIGJveFNpemluZ1JlbGlhYmxlVmFsID09IG51bGwgKSB7XHJcblx0XHRcdFx0Y29tcHV0ZVN0eWxlVGVzdHMoKTtcclxuXHRcdFx0fVxyXG5cdFx0XHRyZXR1cm4gYm94U2l6aW5nUmVsaWFibGVWYWw7XHJcblx0XHR9LFxyXG5cdFx0cGl4ZWxNYXJnaW5SaWdodDogZnVuY3Rpb24oKSB7XHJcblxyXG5cdFx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDQuMC00LjNcclxuXHRcdFx0Ly8gV2UncmUgY2hlY2tpbmcgZm9yIGJveFNpemluZ1JlbGlhYmxlVmFsIGhlcmUgaW5zdGVhZCBvZiBwaXhlbE1hcmdpblJpZ2h0VmFsXHJcblx0XHRcdC8vIHNpbmNlIHRoYXQgY29tcHJlc3NlcyBiZXR0ZXIgYW5kIHRoZXkncmUgY29tcHV0ZWQgdG9nZXRoZXIgYW55d2F5LlxyXG5cdFx0XHRpZiAoIGJveFNpemluZ1JlbGlhYmxlVmFsID09IG51bGwgKSB7XHJcblx0XHRcdFx0Y29tcHV0ZVN0eWxlVGVzdHMoKTtcclxuXHRcdFx0fVxyXG5cdFx0XHRyZXR1cm4gcGl4ZWxNYXJnaW5SaWdodFZhbDtcclxuXHRcdH0sXHJcblx0XHRyZWxpYWJsZU1hcmdpbkxlZnQ6IGZ1bmN0aW9uKCkge1xyXG5cclxuXHRcdFx0Ly8gU3VwcG9ydDogSUUgPD04IG9ubHksIEFuZHJvaWQgNC4wIC0gNC4zIG9ubHksIEZpcmVmb3ggPD0zIC0gMzdcclxuXHRcdFx0aWYgKCBib3hTaXppbmdSZWxpYWJsZVZhbCA9PSBudWxsICkge1xyXG5cdFx0XHRcdGNvbXB1dGVTdHlsZVRlc3RzKCk7XHJcblx0XHRcdH1cclxuXHRcdFx0cmV0dXJuIHJlbGlhYmxlTWFyZ2luTGVmdFZhbDtcclxuXHRcdH0sXHJcblx0XHRyZWxpYWJsZU1hcmdpblJpZ2h0OiBmdW5jdGlvbigpIHtcclxuXHJcblx0XHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgMi4zXHJcblx0XHRcdC8vIENoZWNrIGlmIGRpdiB3aXRoIGV4cGxpY2l0IHdpZHRoIGFuZCBubyBtYXJnaW4tcmlnaHQgaW5jb3JyZWN0bHlcclxuXHRcdFx0Ly8gZ2V0cyBjb21wdXRlZCBtYXJnaW4tcmlnaHQgYmFzZWQgb24gd2lkdGggb2YgY29udGFpbmVyLiAoIzMzMzMpXHJcblx0XHRcdC8vIFdlYktpdCBCdWcgMTMzNDMgLSBnZXRDb21wdXRlZFN0eWxlIHJldHVybnMgd3JvbmcgdmFsdWUgZm9yIG1hcmdpbi1yaWdodFxyXG5cdFx0XHQvLyBUaGlzIHN1cHBvcnQgZnVuY3Rpb24gaXMgb25seSBleGVjdXRlZCBvbmNlIHNvIG5vIG1lbW9pemluZyBpcyBuZWVkZWQuXHJcblx0XHRcdHZhciByZXQsXHJcblx0XHRcdFx0bWFyZ2luRGl2ID0gZGl2LmFwcGVuZENoaWxkKCBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImRpdlwiICkgKTtcclxuXHJcblx0XHRcdC8vIFJlc2V0IENTUzogYm94LXNpemluZzsgZGlzcGxheTsgbWFyZ2luOyBib3JkZXI7IHBhZGRpbmdcclxuXHRcdFx0bWFyZ2luRGl2LnN0eWxlLmNzc1RleHQgPSBkaXYuc3R5bGUuY3NzVGV4dCA9XHJcblxyXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgMi4zXHJcblx0XHRcdFx0Ly8gVmVuZG9yLXByZWZpeCBib3gtc2l6aW5nXHJcblx0XHRcdFx0XCItd2Via2l0LWJveC1zaXppbmc6Y29udGVudC1ib3g7Ym94LXNpemluZzpjb250ZW50LWJveDtcIiArXHJcblx0XHRcdFx0XCJkaXNwbGF5OmJsb2NrO21hcmdpbjowO2JvcmRlcjowO3BhZGRpbmc6MFwiO1xyXG5cdFx0XHRtYXJnaW5EaXYuc3R5bGUubWFyZ2luUmlnaHQgPSBtYXJnaW5EaXYuc3R5bGUud2lkdGggPSBcIjBcIjtcclxuXHRcdFx0ZGl2LnN0eWxlLndpZHRoID0gXCIxcHhcIjtcclxuXHRcdFx0ZG9jdW1lbnRFbGVtZW50LmFwcGVuZENoaWxkKCBjb250YWluZXIgKTtcclxuXHJcblx0XHRcdHJldCA9ICFwYXJzZUZsb2F0KCB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZSggbWFyZ2luRGl2ICkubWFyZ2luUmlnaHQgKTtcclxuXHJcblx0XHRcdGRvY3VtZW50RWxlbWVudC5yZW1vdmVDaGlsZCggY29udGFpbmVyICk7XHJcblx0XHRcdGRpdi5yZW1vdmVDaGlsZCggbWFyZ2luRGl2ICk7XHJcblxyXG5cdFx0XHRyZXR1cm4gcmV0O1xyXG5cdFx0fVxyXG5cdH0gKTtcclxufSApKCk7XHJcblxyXG5cclxuZnVuY3Rpb24gY3VyQ1NTKCBlbGVtLCBuYW1lLCBjb21wdXRlZCApIHtcclxuXHR2YXIgd2lkdGgsIG1pbldpZHRoLCBtYXhXaWR0aCwgcmV0LFxyXG5cdFx0c3R5bGUgPSBlbGVtLnN0eWxlO1xyXG5cclxuXHRjb21wdXRlZCA9IGNvbXB1dGVkIHx8IGdldFN0eWxlcyggZWxlbSApO1xyXG5cdHJldCA9IGNvbXB1dGVkID8gY29tcHV0ZWQuZ2V0UHJvcGVydHlWYWx1ZSggbmFtZSApIHx8IGNvbXB1dGVkWyBuYW1lIF0gOiB1bmRlZmluZWQ7XHJcblxyXG5cdC8vIFN1cHBvcnQ6IE9wZXJhIDEyLjF4IG9ubHlcclxuXHQvLyBGYWxsIGJhY2sgdG8gc3R5bGUgZXZlbiB3aXRob3V0IGNvbXB1dGVkXHJcblx0Ly8gY29tcHV0ZWQgaXMgdW5kZWZpbmVkIGZvciBlbGVtcyBvbiBkb2N1bWVudCBmcmFnbWVudHNcclxuXHRpZiAoICggcmV0ID09PSBcIlwiIHx8IHJldCA9PT0gdW5kZWZpbmVkICkgJiYgIWpRdWVyeS5jb250YWlucyggZWxlbS5vd25lckRvY3VtZW50LCBlbGVtICkgKSB7XHJcblx0XHRyZXQgPSBqUXVlcnkuc3R5bGUoIGVsZW0sIG5hbWUgKTtcclxuXHR9XHJcblxyXG5cdC8vIFN1cHBvcnQ6IElFOVxyXG5cdC8vIGdldFByb3BlcnR5VmFsdWUgaXMgb25seSBuZWVkZWQgZm9yIC5jc3MoJ2ZpbHRlcicpICgjMTI1MzcpXHJcblx0aWYgKCBjb21wdXRlZCApIHtcclxuXHJcblx0XHQvLyBBIHRyaWJ1dGUgdG8gdGhlIFwiYXdlc29tZSBoYWNrIGJ5IERlYW4gRWR3YXJkc1wiXHJcblx0XHQvLyBBbmRyb2lkIEJyb3dzZXIgcmV0dXJucyBwZXJjZW50YWdlIGZvciBzb21lIHZhbHVlcyxcclxuXHRcdC8vIGJ1dCB3aWR0aCBzZWVtcyB0byBiZSByZWxpYWJseSBwaXhlbHMuXHJcblx0XHQvLyBUaGlzIGlzIGFnYWluc3QgdGhlIENTU09NIGRyYWZ0IHNwZWM6XHJcblx0XHQvLyBodHRwOi8vZGV2LnczLm9yZy9jc3N3Zy9jc3NvbS8jcmVzb2x2ZWQtdmFsdWVzXHJcblx0XHRpZiAoICFzdXBwb3J0LnBpeGVsTWFyZ2luUmlnaHQoKSAmJiBybnVtbm9ucHgudGVzdCggcmV0ICkgJiYgcm1hcmdpbi50ZXN0KCBuYW1lICkgKSB7XHJcblxyXG5cdFx0XHQvLyBSZW1lbWJlciB0aGUgb3JpZ2luYWwgdmFsdWVzXHJcblx0XHRcdHdpZHRoID0gc3R5bGUud2lkdGg7XHJcblx0XHRcdG1pbldpZHRoID0gc3R5bGUubWluV2lkdGg7XHJcblx0XHRcdG1heFdpZHRoID0gc3R5bGUubWF4V2lkdGg7XHJcblxyXG5cdFx0XHQvLyBQdXQgaW4gdGhlIG5ldyB2YWx1ZXMgdG8gZ2V0IGEgY29tcHV0ZWQgdmFsdWUgb3V0XHJcblx0XHRcdHN0eWxlLm1pbldpZHRoID0gc3R5bGUubWF4V2lkdGggPSBzdHlsZS53aWR0aCA9IHJldDtcclxuXHRcdFx0cmV0ID0gY29tcHV0ZWQud2lkdGg7XHJcblxyXG5cdFx0XHQvLyBSZXZlcnQgdGhlIGNoYW5nZWQgdmFsdWVzXHJcblx0XHRcdHN0eWxlLndpZHRoID0gd2lkdGg7XHJcblx0XHRcdHN0eWxlLm1pbldpZHRoID0gbWluV2lkdGg7XHJcblx0XHRcdHN0eWxlLm1heFdpZHRoID0gbWF4V2lkdGg7XHJcblx0XHR9XHJcblx0fVxyXG5cclxuXHRyZXR1cm4gcmV0ICE9PSB1bmRlZmluZWQgP1xyXG5cclxuXHRcdC8vIFN1cHBvcnQ6IElFOS0xMStcclxuXHRcdC8vIElFIHJldHVybnMgekluZGV4IHZhbHVlIGFzIGFuIGludGVnZXIuXHJcblx0XHRyZXQgKyBcIlwiIDpcclxuXHRcdHJldDtcclxufVxyXG5cclxuXHJcbmZ1bmN0aW9uIGFkZEdldEhvb2tJZiggY29uZGl0aW9uRm4sIGhvb2tGbiApIHtcclxuXHJcblx0Ly8gRGVmaW5lIHRoZSBob29rLCB3ZSdsbCBjaGVjayBvbiB0aGUgZmlyc3QgcnVuIGlmIGl0J3MgcmVhbGx5IG5lZWRlZC5cclxuXHRyZXR1cm4ge1xyXG5cdFx0Z2V0OiBmdW5jdGlvbigpIHtcclxuXHRcdFx0aWYgKCBjb25kaXRpb25GbigpICkge1xyXG5cclxuXHRcdFx0XHQvLyBIb29rIG5vdCBuZWVkZWQgKG9yIGl0J3Mgbm90IHBvc3NpYmxlIHRvIHVzZSBpdCBkdWVcclxuXHRcdFx0XHQvLyB0byBtaXNzaW5nIGRlcGVuZGVuY3kpLCByZW1vdmUgaXQuXHJcblx0XHRcdFx0ZGVsZXRlIHRoaXMuZ2V0O1xyXG5cdFx0XHRcdHJldHVybjtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0Ly8gSG9vayBuZWVkZWQ7IHJlZGVmaW5lIGl0IHNvIHRoYXQgdGhlIHN1cHBvcnQgdGVzdCBpcyBub3QgZXhlY3V0ZWQgYWdhaW4uXHJcblx0XHRcdHJldHVybiAoIHRoaXMuZ2V0ID0gaG9va0ZuICkuYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApO1xyXG5cdFx0fVxyXG5cdH07XHJcbn1cclxuXHJcblxyXG52YXJcclxuXHJcblx0Ly8gU3dhcHBhYmxlIGlmIGRpc3BsYXkgaXMgbm9uZSBvciBzdGFydHMgd2l0aCB0YWJsZVxyXG5cdC8vIGV4Y2VwdCBcInRhYmxlXCIsIFwidGFibGUtY2VsbFwiLCBvciBcInRhYmxlLWNhcHRpb25cIlxyXG5cdC8vIFNlZSBoZXJlIGZvciBkaXNwbGF5IHZhbHVlczogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9DU1MvZGlzcGxheVxyXG5cdHJkaXNwbGF5c3dhcCA9IC9eKG5vbmV8dGFibGUoPyEtY1tlYV0pLispLyxcclxuXHJcblx0Y3NzU2hvdyA9IHsgcG9zaXRpb246IFwiYWJzb2x1dGVcIiwgdmlzaWJpbGl0eTogXCJoaWRkZW5cIiwgZGlzcGxheTogXCJibG9ja1wiIH0sXHJcblx0Y3NzTm9ybWFsVHJhbnNmb3JtID0ge1xyXG5cdFx0bGV0dGVyU3BhY2luZzogXCIwXCIsXHJcblx0XHRmb250V2VpZ2h0OiBcIjQwMFwiXHJcblx0fSxcclxuXHJcblx0Y3NzUHJlZml4ZXMgPSBbIFwiV2Via2l0XCIsIFwiT1wiLCBcIk1velwiLCBcIm1zXCIgXSxcclxuXHRlbXB0eVN0eWxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJkaXZcIiApLnN0eWxlO1xyXG5cclxuLy8gUmV0dXJuIGEgY3NzIHByb3BlcnR5IG1hcHBlZCB0byBhIHBvdGVudGlhbGx5IHZlbmRvciBwcmVmaXhlZCBwcm9wZXJ0eVxyXG5mdW5jdGlvbiB2ZW5kb3JQcm9wTmFtZSggbmFtZSApIHtcclxuXHJcblx0Ly8gU2hvcnRjdXQgZm9yIG5hbWVzIHRoYXQgYXJlIG5vdCB2ZW5kb3IgcHJlZml4ZWRcclxuXHRpZiAoIG5hbWUgaW4gZW1wdHlTdHlsZSApIHtcclxuXHRcdHJldHVybiBuYW1lO1xyXG5cdH1cclxuXHJcblx0Ly8gQ2hlY2sgZm9yIHZlbmRvciBwcmVmaXhlZCBuYW1lc1xyXG5cdHZhciBjYXBOYW1lID0gbmFtZVsgMCBdLnRvVXBwZXJDYXNlKCkgKyBuYW1lLnNsaWNlKCAxICksXHJcblx0XHRpID0gY3NzUHJlZml4ZXMubGVuZ3RoO1xyXG5cclxuXHR3aGlsZSAoIGktLSApIHtcclxuXHRcdG5hbWUgPSBjc3NQcmVmaXhlc1sgaSBdICsgY2FwTmFtZTtcclxuXHRcdGlmICggbmFtZSBpbiBlbXB0eVN0eWxlICkge1xyXG5cdFx0XHRyZXR1cm4gbmFtZTtcclxuXHRcdH1cclxuXHR9XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHNldFBvc2l0aXZlTnVtYmVyKCBlbGVtLCB2YWx1ZSwgc3VidHJhY3QgKSB7XHJcblxyXG5cdC8vIEFueSByZWxhdGl2ZSAoKy8tKSB2YWx1ZXMgaGF2ZSBhbHJlYWR5IGJlZW5cclxuXHQvLyBub3JtYWxpemVkIGF0IHRoaXMgcG9pbnRcclxuXHR2YXIgbWF0Y2hlcyA9IHJjc3NOdW0uZXhlYyggdmFsdWUgKTtcclxuXHRyZXR1cm4gbWF0Y2hlcyA/XHJcblxyXG5cdFx0Ly8gR3VhcmQgYWdhaW5zdCB1bmRlZmluZWQgXCJzdWJ0cmFjdFwiLCBlLmcuLCB3aGVuIHVzZWQgYXMgaW4gY3NzSG9va3NcclxuXHRcdE1hdGgubWF4KCAwLCBtYXRjaGVzWyAyIF0gLSAoIHN1YnRyYWN0IHx8IDAgKSApICsgKCBtYXRjaGVzWyAzIF0gfHwgXCJweFwiICkgOlxyXG5cdFx0dmFsdWU7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGF1Z21lbnRXaWR0aE9ySGVpZ2h0KCBlbGVtLCBuYW1lLCBleHRyYSwgaXNCb3JkZXJCb3gsIHN0eWxlcyApIHtcclxuXHR2YXIgaSA9IGV4dHJhID09PSAoIGlzQm9yZGVyQm94ID8gXCJib3JkZXJcIiA6IFwiY29udGVudFwiICkgP1xyXG5cclxuXHRcdC8vIElmIHdlIGFscmVhZHkgaGF2ZSB0aGUgcmlnaHQgbWVhc3VyZW1lbnQsIGF2b2lkIGF1Z21lbnRhdGlvblxyXG5cdFx0NCA6XHJcblxyXG5cdFx0Ly8gT3RoZXJ3aXNlIGluaXRpYWxpemUgZm9yIGhvcml6b250YWwgb3IgdmVydGljYWwgcHJvcGVydGllc1xyXG5cdFx0bmFtZSA9PT0gXCJ3aWR0aFwiID8gMSA6IDAsXHJcblxyXG5cdFx0dmFsID0gMDtcclxuXHJcblx0Zm9yICggOyBpIDwgNDsgaSArPSAyICkge1xyXG5cclxuXHRcdC8vIEJvdGggYm94IG1vZGVscyBleGNsdWRlIG1hcmdpbiwgc28gYWRkIGl0IGlmIHdlIHdhbnQgaXRcclxuXHRcdGlmICggZXh0cmEgPT09IFwibWFyZ2luXCIgKSB7XHJcblx0XHRcdHZhbCArPSBqUXVlcnkuY3NzKCBlbGVtLCBleHRyYSArIGNzc0V4cGFuZFsgaSBdLCB0cnVlLCBzdHlsZXMgKTtcclxuXHRcdH1cclxuXHJcblx0XHRpZiAoIGlzQm9yZGVyQm94ICkge1xyXG5cclxuXHRcdFx0Ly8gYm9yZGVyLWJveCBpbmNsdWRlcyBwYWRkaW5nLCBzbyByZW1vdmUgaXQgaWYgd2Ugd2FudCBjb250ZW50XHJcblx0XHRcdGlmICggZXh0cmEgPT09IFwiY29udGVudFwiICkge1xyXG5cdFx0XHRcdHZhbCAtPSBqUXVlcnkuY3NzKCBlbGVtLCBcInBhZGRpbmdcIiArIGNzc0V4cGFuZFsgaSBdLCB0cnVlLCBzdHlsZXMgKTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0Ly8gQXQgdGhpcyBwb2ludCwgZXh0cmEgaXNuJ3QgYm9yZGVyIG5vciBtYXJnaW4sIHNvIHJlbW92ZSBib3JkZXJcclxuXHRcdFx0aWYgKCBleHRyYSAhPT0gXCJtYXJnaW5cIiApIHtcclxuXHRcdFx0XHR2YWwgLT0galF1ZXJ5LmNzcyggZWxlbSwgXCJib3JkZXJcIiArIGNzc0V4cGFuZFsgaSBdICsgXCJXaWR0aFwiLCB0cnVlLCBzdHlsZXMgKTtcclxuXHRcdFx0fVxyXG5cdFx0fSBlbHNlIHtcclxuXHJcblx0XHRcdC8vIEF0IHRoaXMgcG9pbnQsIGV4dHJhIGlzbid0IGNvbnRlbnQsIHNvIGFkZCBwYWRkaW5nXHJcblx0XHRcdHZhbCArPSBqUXVlcnkuY3NzKCBlbGVtLCBcInBhZGRpbmdcIiArIGNzc0V4cGFuZFsgaSBdLCB0cnVlLCBzdHlsZXMgKTtcclxuXHJcblx0XHRcdC8vIEF0IHRoaXMgcG9pbnQsIGV4dHJhIGlzbid0IGNvbnRlbnQgbm9yIHBhZGRpbmcsIHNvIGFkZCBib3JkZXJcclxuXHRcdFx0aWYgKCBleHRyYSAhPT0gXCJwYWRkaW5nXCIgKSB7XHJcblx0XHRcdFx0dmFsICs9IGpRdWVyeS5jc3MoIGVsZW0sIFwiYm9yZGVyXCIgKyBjc3NFeHBhbmRbIGkgXSArIFwiV2lkdGhcIiwgdHJ1ZSwgc3R5bGVzICk7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHR9XHJcblxyXG5cdHJldHVybiB2YWw7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGdldFdpZHRoT3JIZWlnaHQoIGVsZW0sIG5hbWUsIGV4dHJhICkge1xyXG5cclxuXHQvLyBTdGFydCB3aXRoIG9mZnNldCBwcm9wZXJ0eSwgd2hpY2ggaXMgZXF1aXZhbGVudCB0byB0aGUgYm9yZGVyLWJveCB2YWx1ZVxyXG5cdHZhciB2YWx1ZUlzQm9yZGVyQm94ID0gdHJ1ZSxcclxuXHRcdHZhbCA9IG5hbWUgPT09IFwid2lkdGhcIiA/IGVsZW0ub2Zmc2V0V2lkdGggOiBlbGVtLm9mZnNldEhlaWdodCxcclxuXHRcdHN0eWxlcyA9IGdldFN0eWxlcyggZWxlbSApLFxyXG5cdFx0aXNCb3JkZXJCb3ggPSBqUXVlcnkuY3NzKCBlbGVtLCBcImJveFNpemluZ1wiLCBmYWxzZSwgc3R5bGVzICkgPT09IFwiYm9yZGVyLWJveFwiO1xyXG5cclxuXHQvLyBTdXBwb3J0OiBJRTExIG9ubHlcclxuXHQvLyBJbiBJRSAxMSBmdWxsc2NyZWVuIGVsZW1lbnRzIGluc2lkZSBvZiBhbiBpZnJhbWUgaGF2ZVxyXG5cdC8vIDEwMHggdG9vIHNtYWxsIGRpbWVuc2lvbnMgKGdoLTE3NjQpLlxyXG5cdGlmICggZG9jdW1lbnQubXNGdWxsc2NyZWVuRWxlbWVudCAmJiB3aW5kb3cudG9wICE9PSB3aW5kb3cgKSB7XHJcblxyXG5cdFx0Ly8gU3VwcG9ydDogSUUxMSBvbmx5XHJcblx0XHQvLyBSdW5uaW5nIGdldEJvdW5kaW5nQ2xpZW50UmVjdCBvbiBhIGRpc2Nvbm5lY3RlZCBub2RlXHJcblx0XHQvLyBpbiBJRSB0aHJvd3MgYW4gZXJyb3IuXHJcblx0XHRpZiAoIGVsZW0uZ2V0Q2xpZW50UmVjdHMoKS5sZW5ndGggKSB7XHJcblx0XHRcdHZhbCA9IE1hdGgucm91bmQoIGVsZW0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KClbIG5hbWUgXSAqIDEwMCApO1xyXG5cdFx0fVxyXG5cdH1cclxuXHJcblx0Ly8gU29tZSBub24taHRtbCBlbGVtZW50cyByZXR1cm4gdW5kZWZpbmVkIGZvciBvZmZzZXRXaWR0aCwgc28gY2hlY2sgZm9yIG51bGwvdW5kZWZpbmVkXHJcblx0Ly8gc3ZnIC0gaHR0cHM6Ly9idWd6aWxsYS5tb3ppbGxhLm9yZy9zaG93X2J1Zy5jZ2k/aWQ9NjQ5Mjg1XHJcblx0Ly8gTWF0aE1MIC0gaHR0cHM6Ly9idWd6aWxsYS5tb3ppbGxhLm9yZy9zaG93X2J1Zy5jZ2k/aWQ9NDkxNjY4XHJcblx0aWYgKCB2YWwgPD0gMCB8fCB2YWwgPT0gbnVsbCApIHtcclxuXHJcblx0XHQvLyBGYWxsIGJhY2sgdG8gY29tcHV0ZWQgdGhlbiB1bmNvbXB1dGVkIGNzcyBpZiBuZWNlc3NhcnlcclxuXHRcdHZhbCA9IGN1ckNTUyggZWxlbSwgbmFtZSwgc3R5bGVzICk7XHJcblx0XHRpZiAoIHZhbCA8IDAgfHwgdmFsID09IG51bGwgKSB7XHJcblx0XHRcdHZhbCA9IGVsZW0uc3R5bGVbIG5hbWUgXTtcclxuXHRcdH1cclxuXHJcblx0XHQvLyBDb21wdXRlZCB1bml0IGlzIG5vdCBwaXhlbHMuIFN0b3AgaGVyZSBhbmQgcmV0dXJuLlxyXG5cdFx0aWYgKCBybnVtbm9ucHgudGVzdCggdmFsICkgKSB7XHJcblx0XHRcdHJldHVybiB2YWw7XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gQ2hlY2sgZm9yIHN0eWxlIGluIGNhc2UgYSBicm93c2VyIHdoaWNoIHJldHVybnMgdW5yZWxpYWJsZSB2YWx1ZXNcclxuXHRcdC8vIGZvciBnZXRDb21wdXRlZFN0eWxlIHNpbGVudGx5IGZhbGxzIGJhY2sgdG8gdGhlIHJlbGlhYmxlIGVsZW0uc3R5bGVcclxuXHRcdHZhbHVlSXNCb3JkZXJCb3ggPSBpc0JvcmRlckJveCAmJlxyXG5cdFx0XHQoIHN1cHBvcnQuYm94U2l6aW5nUmVsaWFibGUoKSB8fCB2YWwgPT09IGVsZW0uc3R5bGVbIG5hbWUgXSApO1xyXG5cclxuXHRcdC8vIE5vcm1hbGl6ZSBcIlwiLCBhdXRvLCBhbmQgcHJlcGFyZSBmb3IgZXh0cmFcclxuXHRcdHZhbCA9IHBhcnNlRmxvYXQoIHZhbCApIHx8IDA7XHJcblx0fVxyXG5cclxuXHQvLyBVc2UgdGhlIGFjdGl2ZSBib3gtc2l6aW5nIG1vZGVsIHRvIGFkZC9zdWJ0cmFjdCBpcnJlbGV2YW50IHN0eWxlc1xyXG5cdHJldHVybiAoIHZhbCArXHJcblx0XHRhdWdtZW50V2lkdGhPckhlaWdodChcclxuXHRcdFx0ZWxlbSxcclxuXHRcdFx0bmFtZSxcclxuXHRcdFx0ZXh0cmEgfHwgKCBpc0JvcmRlckJveCA/IFwiYm9yZGVyXCIgOiBcImNvbnRlbnRcIiApLFxyXG5cdFx0XHR2YWx1ZUlzQm9yZGVyQm94LFxyXG5cdFx0XHRzdHlsZXNcclxuXHRcdClcclxuXHQpICsgXCJweFwiO1xyXG59XHJcblxyXG5mdW5jdGlvbiBzaG93SGlkZSggZWxlbWVudHMsIHNob3cgKSB7XHJcblx0dmFyIGRpc3BsYXksIGVsZW0sIGhpZGRlbixcclxuXHRcdHZhbHVlcyA9IFtdLFxyXG5cdFx0aW5kZXggPSAwLFxyXG5cdFx0bGVuZ3RoID0gZWxlbWVudHMubGVuZ3RoO1xyXG5cclxuXHRmb3IgKCA7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrICkge1xyXG5cdFx0ZWxlbSA9IGVsZW1lbnRzWyBpbmRleCBdO1xyXG5cdFx0aWYgKCAhZWxlbS5zdHlsZSApIHtcclxuXHRcdFx0Y29udGludWU7XHJcblx0XHR9XHJcblxyXG5cdFx0dmFsdWVzWyBpbmRleCBdID0gZGF0YVByaXYuZ2V0KCBlbGVtLCBcIm9sZGRpc3BsYXlcIiApO1xyXG5cdFx0ZGlzcGxheSA9IGVsZW0uc3R5bGUuZGlzcGxheTtcclxuXHRcdGlmICggc2hvdyApIHtcclxuXHJcblx0XHRcdC8vIFJlc2V0IHRoZSBpbmxpbmUgZGlzcGxheSBvZiB0aGlzIGVsZW1lbnQgdG8gbGVhcm4gaWYgaXQgaXNcclxuXHRcdFx0Ly8gYmVpbmcgaGlkZGVuIGJ5IGNhc2NhZGVkIHJ1bGVzIG9yIG5vdFxyXG5cdFx0XHRpZiAoICF2YWx1ZXNbIGluZGV4IF0gJiYgZGlzcGxheSA9PT0gXCJub25lXCIgKSB7XHJcblx0XHRcdFx0ZWxlbS5zdHlsZS5kaXNwbGF5ID0gXCJcIjtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0Ly8gU2V0IGVsZW1lbnRzIHdoaWNoIGhhdmUgYmVlbiBvdmVycmlkZGVuIHdpdGggZGlzcGxheTogbm9uZVxyXG5cdFx0XHQvLyBpbiBhIHN0eWxlc2hlZXQgdG8gd2hhdGV2ZXIgdGhlIGRlZmF1bHQgYnJvd3NlciBzdHlsZSBpc1xyXG5cdFx0XHQvLyBmb3Igc3VjaCBhbiBlbGVtZW50XHJcblx0XHRcdGlmICggZWxlbS5zdHlsZS5kaXNwbGF5ID09PSBcIlwiICYmIGlzSGlkZGVuKCBlbGVtICkgKSB7XHJcblx0XHRcdFx0dmFsdWVzWyBpbmRleCBdID0gZGF0YVByaXYuYWNjZXNzKFxyXG5cdFx0XHRcdFx0ZWxlbSxcclxuXHRcdFx0XHRcdFwib2xkZGlzcGxheVwiLFxyXG5cdFx0XHRcdFx0ZGVmYXVsdERpc3BsYXkoIGVsZW0ubm9kZU5hbWUgKVxyXG5cdFx0XHRcdCk7XHJcblx0XHRcdH1cclxuXHRcdH0gZWxzZSB7XHJcblx0XHRcdGhpZGRlbiA9IGlzSGlkZGVuKCBlbGVtICk7XHJcblxyXG5cdFx0XHRpZiAoIGRpc3BsYXkgIT09IFwibm9uZVwiIHx8ICFoaWRkZW4gKSB7XHJcblx0XHRcdFx0ZGF0YVByaXYuc2V0KFxyXG5cdFx0XHRcdFx0ZWxlbSxcclxuXHRcdFx0XHRcdFwib2xkZGlzcGxheVwiLFxyXG5cdFx0XHRcdFx0aGlkZGVuID8gZGlzcGxheSA6IGpRdWVyeS5jc3MoIGVsZW0sIFwiZGlzcGxheVwiIClcclxuXHRcdFx0XHQpO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0fVxyXG5cclxuXHQvLyBTZXQgdGhlIGRpc3BsYXkgb2YgbW9zdCBvZiB0aGUgZWxlbWVudHMgaW4gYSBzZWNvbmQgbG9vcFxyXG5cdC8vIHRvIGF2b2lkIHRoZSBjb25zdGFudCByZWZsb3dcclxuXHRmb3IgKCBpbmRleCA9IDA7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrICkge1xyXG5cdFx0ZWxlbSA9IGVsZW1lbnRzWyBpbmRleCBdO1xyXG5cdFx0aWYgKCAhZWxlbS5zdHlsZSApIHtcclxuXHRcdFx0Y29udGludWU7XHJcblx0XHR9XHJcblx0XHRpZiAoICFzaG93IHx8IGVsZW0uc3R5bGUuZGlzcGxheSA9PT0gXCJub25lXCIgfHwgZWxlbS5zdHlsZS5kaXNwbGF5ID09PSBcIlwiICkge1xyXG5cdFx0XHRlbGVtLnN0eWxlLmRpc3BsYXkgPSBzaG93ID8gdmFsdWVzWyBpbmRleCBdIHx8IFwiXCIgOiBcIm5vbmVcIjtcclxuXHRcdH1cclxuXHR9XHJcblxyXG5cdHJldHVybiBlbGVtZW50cztcclxufVxyXG5cclxualF1ZXJ5LmV4dGVuZCgge1xyXG5cclxuXHQvLyBBZGQgaW4gc3R5bGUgcHJvcGVydHkgaG9va3MgZm9yIG92ZXJyaWRpbmcgdGhlIGRlZmF1bHRcclxuXHQvLyBiZWhhdmlvciBvZiBnZXR0aW5nIGFuZCBzZXR0aW5nIGEgc3R5bGUgcHJvcGVydHlcclxuXHRjc3NIb29rczoge1xyXG5cdFx0b3BhY2l0eToge1xyXG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCBlbGVtLCBjb21wdXRlZCApIHtcclxuXHRcdFx0XHRpZiAoIGNvbXB1dGVkICkge1xyXG5cclxuXHRcdFx0XHRcdC8vIFdlIHNob3VsZCBhbHdheXMgZ2V0IGEgbnVtYmVyIGJhY2sgZnJvbSBvcGFjaXR5XHJcblx0XHRcdFx0XHR2YXIgcmV0ID0gY3VyQ1NTKCBlbGVtLCBcIm9wYWNpdHlcIiApO1xyXG5cdFx0XHRcdFx0cmV0dXJuIHJldCA9PT0gXCJcIiA/IFwiMVwiIDogcmV0O1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdH0sXHJcblxyXG5cdC8vIERvbid0IGF1dG9tYXRpY2FsbHkgYWRkIFwicHhcIiB0byB0aGVzZSBwb3NzaWJseS11bml0bGVzcyBwcm9wZXJ0aWVzXHJcblx0Y3NzTnVtYmVyOiB7XHJcblx0XHRcImFuaW1hdGlvbkl0ZXJhdGlvbkNvdW50XCI6IHRydWUsXHJcblx0XHRcImNvbHVtbkNvdW50XCI6IHRydWUsXHJcblx0XHRcImZpbGxPcGFjaXR5XCI6IHRydWUsXHJcblx0XHRcImZsZXhHcm93XCI6IHRydWUsXHJcblx0XHRcImZsZXhTaHJpbmtcIjogdHJ1ZSxcclxuXHRcdFwiZm9udFdlaWdodFwiOiB0cnVlLFxyXG5cdFx0XCJsaW5lSGVpZ2h0XCI6IHRydWUsXHJcblx0XHRcIm9wYWNpdHlcIjogdHJ1ZSxcclxuXHRcdFwib3JkZXJcIjogdHJ1ZSxcclxuXHRcdFwib3JwaGFuc1wiOiB0cnVlLFxyXG5cdFx0XCJ3aWRvd3NcIjogdHJ1ZSxcclxuXHRcdFwiekluZGV4XCI6IHRydWUsXHJcblx0XHRcInpvb21cIjogdHJ1ZVxyXG5cdH0sXHJcblxyXG5cdC8vIEFkZCBpbiBwcm9wZXJ0aWVzIHdob3NlIG5hbWVzIHlvdSB3aXNoIHRvIGZpeCBiZWZvcmVcclxuXHQvLyBzZXR0aW5nIG9yIGdldHRpbmcgdGhlIHZhbHVlXHJcblx0Y3NzUHJvcHM6IHtcclxuXHRcdFwiZmxvYXRcIjogXCJjc3NGbG9hdFwiXHJcblx0fSxcclxuXHJcblx0Ly8gR2V0IGFuZCBzZXQgdGhlIHN0eWxlIHByb3BlcnR5IG9uIGEgRE9NIE5vZGVcclxuXHRzdHlsZTogZnVuY3Rpb24oIGVsZW0sIG5hbWUsIHZhbHVlLCBleHRyYSApIHtcclxuXHJcblx0XHQvLyBEb24ndCBzZXQgc3R5bGVzIG9uIHRleHQgYW5kIGNvbW1lbnQgbm9kZXNcclxuXHRcdGlmICggIWVsZW0gfHwgZWxlbS5ub2RlVHlwZSA9PT0gMyB8fCBlbGVtLm5vZGVUeXBlID09PSA4IHx8ICFlbGVtLnN0eWxlICkge1xyXG5cdFx0XHRyZXR1cm47XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gTWFrZSBzdXJlIHRoYXQgd2UncmUgd29ya2luZyB3aXRoIHRoZSByaWdodCBuYW1lXHJcblx0XHR2YXIgcmV0LCB0eXBlLCBob29rcyxcclxuXHRcdFx0b3JpZ05hbWUgPSBqUXVlcnkuY2FtZWxDYXNlKCBuYW1lICksXHJcblx0XHRcdHN0eWxlID0gZWxlbS5zdHlsZTtcclxuXHJcblx0XHRuYW1lID0galF1ZXJ5LmNzc1Byb3BzWyBvcmlnTmFtZSBdIHx8XHJcblx0XHRcdCggalF1ZXJ5LmNzc1Byb3BzWyBvcmlnTmFtZSBdID0gdmVuZG9yUHJvcE5hbWUoIG9yaWdOYW1lICkgfHwgb3JpZ05hbWUgKTtcclxuXHJcblx0XHQvLyBHZXRzIGhvb2sgZm9yIHRoZSBwcmVmaXhlZCB2ZXJzaW9uLCB0aGVuIHVucHJlZml4ZWQgdmVyc2lvblxyXG5cdFx0aG9va3MgPSBqUXVlcnkuY3NzSG9va3NbIG5hbWUgXSB8fCBqUXVlcnkuY3NzSG9va3NbIG9yaWdOYW1lIF07XHJcblxyXG5cdFx0Ly8gQ2hlY2sgaWYgd2UncmUgc2V0dGluZyBhIHZhbHVlXHJcblx0XHRpZiAoIHZhbHVlICE9PSB1bmRlZmluZWQgKSB7XHJcblx0XHRcdHR5cGUgPSB0eXBlb2YgdmFsdWU7XHJcblxyXG5cdFx0XHQvLyBDb252ZXJ0IFwiKz1cIiBvciBcIi09XCIgdG8gcmVsYXRpdmUgbnVtYmVycyAoIzczNDUpXHJcblx0XHRcdGlmICggdHlwZSA9PT0gXCJzdHJpbmdcIiAmJiAoIHJldCA9IHJjc3NOdW0uZXhlYyggdmFsdWUgKSApICYmIHJldFsgMSBdICkge1xyXG5cdFx0XHRcdHZhbHVlID0gYWRqdXN0Q1NTKCBlbGVtLCBuYW1lLCByZXQgKTtcclxuXHJcblx0XHRcdFx0Ly8gRml4ZXMgYnVnICM5MjM3XHJcblx0XHRcdFx0dHlwZSA9IFwibnVtYmVyXCI7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdC8vIE1ha2Ugc3VyZSB0aGF0IG51bGwgYW5kIE5hTiB2YWx1ZXMgYXJlbid0IHNldCAoIzcxMTYpXHJcblx0XHRcdGlmICggdmFsdWUgPT0gbnVsbCB8fCB2YWx1ZSAhPT0gdmFsdWUgKSB7XHJcblx0XHRcdFx0cmV0dXJuO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHQvLyBJZiBhIG51bWJlciB3YXMgcGFzc2VkIGluLCBhZGQgdGhlIHVuaXQgKGV4Y2VwdCBmb3IgY2VydGFpbiBDU1MgcHJvcGVydGllcylcclxuXHRcdFx0aWYgKCB0eXBlID09PSBcIm51bWJlclwiICkge1xyXG5cdFx0XHRcdHZhbHVlICs9IHJldCAmJiByZXRbIDMgXSB8fCAoIGpRdWVyeS5jc3NOdW1iZXJbIG9yaWdOYW1lIF0gPyBcIlwiIDogXCJweFwiICk7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdC8vIFN1cHBvcnQ6IElFOS0xMStcclxuXHRcdFx0Ly8gYmFja2dyb3VuZC0qIHByb3BzIGFmZmVjdCBvcmlnaW5hbCBjbG9uZSdzIHZhbHVlc1xyXG5cdFx0XHRpZiAoICFzdXBwb3J0LmNsZWFyQ2xvbmVTdHlsZSAmJiB2YWx1ZSA9PT0gXCJcIiAmJiBuYW1lLmluZGV4T2YoIFwiYmFja2dyb3VuZFwiICkgPT09IDAgKSB7XHJcblx0XHRcdFx0c3R5bGVbIG5hbWUgXSA9IFwiaW5oZXJpdFwiO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHQvLyBJZiBhIGhvb2sgd2FzIHByb3ZpZGVkLCB1c2UgdGhhdCB2YWx1ZSwgb3RoZXJ3aXNlIGp1c3Qgc2V0IHRoZSBzcGVjaWZpZWQgdmFsdWVcclxuXHRcdFx0aWYgKCAhaG9va3MgfHwgISggXCJzZXRcIiBpbiBob29rcyApIHx8XHJcblx0XHRcdFx0KCB2YWx1ZSA9IGhvb2tzLnNldCggZWxlbSwgdmFsdWUsIGV4dHJhICkgKSAhPT0gdW5kZWZpbmVkICkge1xyXG5cclxuXHRcdFx0XHRzdHlsZVsgbmFtZSBdID0gdmFsdWU7XHJcblx0XHRcdH1cclxuXHJcblx0XHR9IGVsc2Uge1xyXG5cclxuXHRcdFx0Ly8gSWYgYSBob29rIHdhcyBwcm92aWRlZCBnZXQgdGhlIG5vbi1jb21wdXRlZCB2YWx1ZSBmcm9tIHRoZXJlXHJcblx0XHRcdGlmICggaG9va3MgJiYgXCJnZXRcIiBpbiBob29rcyAmJlxyXG5cdFx0XHRcdCggcmV0ID0gaG9va3MuZ2V0KCBlbGVtLCBmYWxzZSwgZXh0cmEgKSApICE9PSB1bmRlZmluZWQgKSB7XHJcblxyXG5cdFx0XHRcdHJldHVybiByZXQ7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdC8vIE90aGVyd2lzZSBqdXN0IGdldCB0aGUgdmFsdWUgZnJvbSB0aGUgc3R5bGUgb2JqZWN0XHJcblx0XHRcdHJldHVybiBzdHlsZVsgbmFtZSBdO1xyXG5cdFx0fVxyXG5cdH0sXHJcblxyXG5cdGNzczogZnVuY3Rpb24oIGVsZW0sIG5hbWUsIGV4dHJhLCBzdHlsZXMgKSB7XHJcblx0XHR2YXIgdmFsLCBudW0sIGhvb2tzLFxyXG5cdFx0XHRvcmlnTmFtZSA9IGpRdWVyeS5jYW1lbENhc2UoIG5hbWUgKTtcclxuXHJcblx0XHQvLyBNYWtlIHN1cmUgdGhhdCB3ZSdyZSB3b3JraW5nIHdpdGggdGhlIHJpZ2h0IG5hbWVcclxuXHRcdG5hbWUgPSBqUXVlcnkuY3NzUHJvcHNbIG9yaWdOYW1lIF0gfHxcclxuXHRcdFx0KCBqUXVlcnkuY3NzUHJvcHNbIG9yaWdOYW1lIF0gPSB2ZW5kb3JQcm9wTmFtZSggb3JpZ05hbWUgKSB8fCBvcmlnTmFtZSApO1xyXG5cclxuXHRcdC8vIFRyeSBwcmVmaXhlZCBuYW1lIGZvbGxvd2VkIGJ5IHRoZSB1bnByZWZpeGVkIG5hbWVcclxuXHRcdGhvb2tzID0galF1ZXJ5LmNzc0hvb2tzWyBuYW1lIF0gfHwgalF1ZXJ5LmNzc0hvb2tzWyBvcmlnTmFtZSBdO1xyXG5cclxuXHRcdC8vIElmIGEgaG9vayB3YXMgcHJvdmlkZWQgZ2V0IHRoZSBjb21wdXRlZCB2YWx1ZSBmcm9tIHRoZXJlXHJcblx0XHRpZiAoIGhvb2tzICYmIFwiZ2V0XCIgaW4gaG9va3MgKSB7XHJcblx0XHRcdHZhbCA9IGhvb2tzLmdldCggZWxlbSwgdHJ1ZSwgZXh0cmEgKTtcclxuXHRcdH1cclxuXHJcblx0XHQvLyBPdGhlcndpc2UsIGlmIGEgd2F5IHRvIGdldCB0aGUgY29tcHV0ZWQgdmFsdWUgZXhpc3RzLCB1c2UgdGhhdFxyXG5cdFx0aWYgKCB2YWwgPT09IHVuZGVmaW5lZCApIHtcclxuXHRcdFx0dmFsID0gY3VyQ1NTKCBlbGVtLCBuYW1lLCBzdHlsZXMgKTtcclxuXHRcdH1cclxuXHJcblx0XHQvLyBDb252ZXJ0IFwibm9ybWFsXCIgdG8gY29tcHV0ZWQgdmFsdWVcclxuXHRcdGlmICggdmFsID09PSBcIm5vcm1hbFwiICYmIG5hbWUgaW4gY3NzTm9ybWFsVHJhbnNmb3JtICkge1xyXG5cdFx0XHR2YWwgPSBjc3NOb3JtYWxUcmFuc2Zvcm1bIG5hbWUgXTtcclxuXHRcdH1cclxuXHJcblx0XHQvLyBNYWtlIG51bWVyaWMgaWYgZm9yY2VkIG9yIGEgcXVhbGlmaWVyIHdhcyBwcm92aWRlZCBhbmQgdmFsIGxvb2tzIG51bWVyaWNcclxuXHRcdGlmICggZXh0cmEgPT09IFwiXCIgfHwgZXh0cmEgKSB7XHJcblx0XHRcdG51bSA9IHBhcnNlRmxvYXQoIHZhbCApO1xyXG5cdFx0XHRyZXR1cm4gZXh0cmEgPT09IHRydWUgfHwgaXNGaW5pdGUoIG51bSApID8gbnVtIHx8IDAgOiB2YWw7XHJcblx0XHR9XHJcblx0XHRyZXR1cm4gdmFsO1xyXG5cdH1cclxufSApO1xyXG5cclxualF1ZXJ5LmVhY2goIFsgXCJoZWlnaHRcIiwgXCJ3aWR0aFwiIF0sIGZ1bmN0aW9uKCBpLCBuYW1lICkge1xyXG5cdGpRdWVyeS5jc3NIb29rc1sgbmFtZSBdID0ge1xyXG5cdFx0Z2V0OiBmdW5jdGlvbiggZWxlbSwgY29tcHV0ZWQsIGV4dHJhICkge1xyXG5cdFx0XHRpZiAoIGNvbXB1dGVkICkge1xyXG5cclxuXHRcdFx0XHQvLyBDZXJ0YWluIGVsZW1lbnRzIGNhbiBoYXZlIGRpbWVuc2lvbiBpbmZvIGlmIHdlIGludmlzaWJseSBzaG93IHRoZW1cclxuXHRcdFx0XHQvLyBidXQgaXQgbXVzdCBoYXZlIGEgY3VycmVudCBkaXNwbGF5IHN0eWxlIHRoYXQgd291bGQgYmVuZWZpdFxyXG5cdFx0XHRcdHJldHVybiByZGlzcGxheXN3YXAudGVzdCggalF1ZXJ5LmNzcyggZWxlbSwgXCJkaXNwbGF5XCIgKSApICYmXHJcblx0XHRcdFx0XHRlbGVtLm9mZnNldFdpZHRoID09PSAwID9cclxuXHRcdFx0XHRcdFx0c3dhcCggZWxlbSwgY3NzU2hvdywgZnVuY3Rpb24oKSB7XHJcblx0XHRcdFx0XHRcdFx0cmV0dXJuIGdldFdpZHRoT3JIZWlnaHQoIGVsZW0sIG5hbWUsIGV4dHJhICk7XHJcblx0XHRcdFx0XHRcdH0gKSA6XHJcblx0XHRcdFx0XHRcdGdldFdpZHRoT3JIZWlnaHQoIGVsZW0sIG5hbWUsIGV4dHJhICk7XHJcblx0XHRcdH1cclxuXHRcdH0sXHJcblxyXG5cdFx0c2V0OiBmdW5jdGlvbiggZWxlbSwgdmFsdWUsIGV4dHJhICkge1xyXG5cdFx0XHR2YXIgbWF0Y2hlcyxcclxuXHRcdFx0XHRzdHlsZXMgPSBleHRyYSAmJiBnZXRTdHlsZXMoIGVsZW0gKSxcclxuXHRcdFx0XHRzdWJ0cmFjdCA9IGV4dHJhICYmIGF1Z21lbnRXaWR0aE9ySGVpZ2h0KFxyXG5cdFx0XHRcdFx0ZWxlbSxcclxuXHRcdFx0XHRcdG5hbWUsXHJcblx0XHRcdFx0XHRleHRyYSxcclxuXHRcdFx0XHRcdGpRdWVyeS5jc3MoIGVsZW0sIFwiYm94U2l6aW5nXCIsIGZhbHNlLCBzdHlsZXMgKSA9PT0gXCJib3JkZXItYm94XCIsXHJcblx0XHRcdFx0XHRzdHlsZXNcclxuXHRcdFx0XHQpO1xyXG5cclxuXHRcdFx0Ly8gQ29udmVydCB0byBwaXhlbHMgaWYgdmFsdWUgYWRqdXN0bWVudCBpcyBuZWVkZWRcclxuXHRcdFx0aWYgKCBzdWJ0cmFjdCAmJiAoIG1hdGNoZXMgPSByY3NzTnVtLmV4ZWMoIHZhbHVlICkgKSAmJlxyXG5cdFx0XHRcdCggbWF0Y2hlc1sgMyBdIHx8IFwicHhcIiApICE9PSBcInB4XCIgKSB7XHJcblxyXG5cdFx0XHRcdGVsZW0uc3R5bGVbIG5hbWUgXSA9IHZhbHVlO1xyXG5cdFx0XHRcdHZhbHVlID0galF1ZXJ5LmNzcyggZWxlbSwgbmFtZSApO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRyZXR1cm4gc2V0UG9zaXRpdmVOdW1iZXIoIGVsZW0sIHZhbHVlLCBzdWJ0cmFjdCApO1xyXG5cdFx0fVxyXG5cdH07XHJcbn0gKTtcclxuXHJcbmpRdWVyeS5jc3NIb29rcy5tYXJnaW5MZWZ0ID0gYWRkR2V0SG9va0lmKCBzdXBwb3J0LnJlbGlhYmxlTWFyZ2luTGVmdCxcclxuXHRmdW5jdGlvbiggZWxlbSwgY29tcHV0ZWQgKSB7XHJcblx0XHRpZiAoIGNvbXB1dGVkICkge1xyXG5cdFx0XHRyZXR1cm4gKCBwYXJzZUZsb2F0KCBjdXJDU1MoIGVsZW0sIFwibWFyZ2luTGVmdFwiICkgKSB8fFxyXG5cdFx0XHRcdGVsZW0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkubGVmdCAtXHJcblx0XHRcdFx0XHRzd2FwKCBlbGVtLCB7IG1hcmdpbkxlZnQ6IDAgfSwgZnVuY3Rpb24oKSB7XHJcblx0XHRcdFx0XHRcdHJldHVybiBlbGVtLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmxlZnQ7XHJcblx0XHRcdFx0XHR9IClcclxuXHRcdFx0XHQpICsgXCJweFwiO1xyXG5cdFx0fVxyXG5cdH1cclxuKTtcclxuXHJcbi8vIFN1cHBvcnQ6IEFuZHJvaWQgMi4zXHJcbmpRdWVyeS5jc3NIb29rcy5tYXJnaW5SaWdodCA9IGFkZEdldEhvb2tJZiggc3VwcG9ydC5yZWxpYWJsZU1hcmdpblJpZ2h0LFxyXG5cdGZ1bmN0aW9uKCBlbGVtLCBjb21wdXRlZCApIHtcclxuXHRcdGlmICggY29tcHV0ZWQgKSB7XHJcblx0XHRcdHJldHVybiBzd2FwKCBlbGVtLCB7IFwiZGlzcGxheVwiOiBcImlubGluZS1ibG9ja1wiIH0sXHJcblx0XHRcdFx0Y3VyQ1NTLCBbIGVsZW0sIFwibWFyZ2luUmlnaHRcIiBdICk7XHJcblx0XHR9XHJcblx0fVxyXG4pO1xyXG5cclxuLy8gVGhlc2UgaG9va3MgYXJlIHVzZWQgYnkgYW5pbWF0ZSB0byBleHBhbmQgcHJvcGVydGllc1xyXG5qUXVlcnkuZWFjaCgge1xyXG5cdG1hcmdpbjogXCJcIixcclxuXHRwYWRkaW5nOiBcIlwiLFxyXG5cdGJvcmRlcjogXCJXaWR0aFwiXHJcbn0sIGZ1bmN0aW9uKCBwcmVmaXgsIHN1ZmZpeCApIHtcclxuXHRqUXVlcnkuY3NzSG9va3NbIHByZWZpeCArIHN1ZmZpeCBdID0ge1xyXG5cdFx0ZXhwYW5kOiBmdW5jdGlvbiggdmFsdWUgKSB7XHJcblx0XHRcdHZhciBpID0gMCxcclxuXHRcdFx0XHRleHBhbmRlZCA9IHt9LFxyXG5cclxuXHRcdFx0XHQvLyBBc3N1bWVzIGEgc2luZ2xlIG51bWJlciBpZiBub3QgYSBzdHJpbmdcclxuXHRcdFx0XHRwYXJ0cyA9IHR5cGVvZiB2YWx1ZSA9PT0gXCJzdHJpbmdcIiA/IHZhbHVlLnNwbGl0KCBcIiBcIiApIDogWyB2YWx1ZSBdO1xyXG5cclxuXHRcdFx0Zm9yICggOyBpIDwgNDsgaSsrICkge1xyXG5cdFx0XHRcdGV4cGFuZGVkWyBwcmVmaXggKyBjc3NFeHBhbmRbIGkgXSArIHN1ZmZpeCBdID1cclxuXHRcdFx0XHRcdHBhcnRzWyBpIF0gfHwgcGFydHNbIGkgLSAyIF0gfHwgcGFydHNbIDAgXTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0cmV0dXJuIGV4cGFuZGVkO1xyXG5cdFx0fVxyXG5cdH07XHJcblxyXG5cdGlmICggIXJtYXJnaW4udGVzdCggcHJlZml4ICkgKSB7XHJcblx0XHRqUXVlcnkuY3NzSG9va3NbIHByZWZpeCArIHN1ZmZpeCBdLnNldCA9IHNldFBvc2l0aXZlTnVtYmVyO1xyXG5cdH1cclxufSApO1xyXG5cclxualF1ZXJ5LmZuLmV4dGVuZCgge1xyXG5cdGNzczogZnVuY3Rpb24oIG5hbWUsIHZhbHVlICkge1xyXG5cdFx0cmV0dXJuIGFjY2VzcyggdGhpcywgZnVuY3Rpb24oIGVsZW0sIG5hbWUsIHZhbHVlICkge1xyXG5cdFx0XHR2YXIgc3R5bGVzLCBsZW4sXHJcblx0XHRcdFx0bWFwID0ge30sXHJcblx0XHRcdFx0aSA9IDA7XHJcblxyXG5cdFx0XHRpZiAoIGpRdWVyeS5pc0FycmF5KCBuYW1lICkgKSB7XHJcblx0XHRcdFx0c3R5bGVzID0gZ2V0U3R5bGVzKCBlbGVtICk7XHJcblx0XHRcdFx0bGVuID0gbmFtZS5sZW5ndGg7XHJcblxyXG5cdFx0XHRcdGZvciAoIDsgaSA8IGxlbjsgaSsrICkge1xyXG5cdFx0XHRcdFx0bWFwWyBuYW1lWyBpIF0gXSA9IGpRdWVyeS5jc3MoIGVsZW0sIG5hbWVbIGkgXSwgZmFsc2UsIHN0eWxlcyApO1xyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0cmV0dXJuIG1hcDtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0cmV0dXJuIHZhbHVlICE9PSB1bmRlZmluZWQgP1xyXG5cdFx0XHRcdGpRdWVyeS5zdHlsZSggZWxlbSwgbmFtZSwgdmFsdWUgKSA6XHJcblx0XHRcdFx0alF1ZXJ5LmNzcyggZWxlbSwgbmFtZSApO1xyXG5cdFx0fSwgbmFtZSwgdmFsdWUsIGFyZ3VtZW50cy5sZW5ndGggPiAxICk7XHJcblx0fSxcclxuXHRzaG93OiBmdW5jdGlvbigpIHtcclxuXHRcdHJldHVybiBzaG93SGlkZSggdGhpcywgdHJ1ZSApO1xyXG5cdH0sXHJcblx0aGlkZTogZnVuY3Rpb24oKSB7XHJcblx0XHRyZXR1cm4gc2hvd0hpZGUoIHRoaXMgKTtcclxuXHR9LFxyXG5cdHRvZ2dsZTogZnVuY3Rpb24oIHN0YXRlICkge1xyXG5cdFx0aWYgKCB0eXBlb2Ygc3RhdGUgPT09IFwiYm9vbGVhblwiICkge1xyXG5cdFx0XHRyZXR1cm4gc3RhdGUgPyB0aGlzLnNob3coKSA6IHRoaXMuaGlkZSgpO1xyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRpZiAoIGlzSGlkZGVuKCB0aGlzICkgKSB7XHJcblx0XHRcdFx0alF1ZXJ5KCB0aGlzICkuc2hvdygpO1xyXG5cdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdGpRdWVyeSggdGhpcyApLmhpZGUoKTtcclxuXHRcdFx0fVxyXG5cdFx0fSApO1xyXG5cdH1cclxufSApO1xyXG5cclxuXHJcbmZ1bmN0aW9uIFR3ZWVuKCBlbGVtLCBvcHRpb25zLCBwcm9wLCBlbmQsIGVhc2luZyApIHtcclxuXHRyZXR1cm4gbmV3IFR3ZWVuLnByb3RvdHlwZS5pbml0KCBlbGVtLCBvcHRpb25zLCBwcm9wLCBlbmQsIGVhc2luZyApO1xyXG59XHJcbmpRdWVyeS5Ud2VlbiA9IFR3ZWVuO1xyXG5cclxuVHdlZW4ucHJvdG90eXBlID0ge1xyXG5cdGNvbnN0cnVjdG9yOiBUd2VlbixcclxuXHRpbml0OiBmdW5jdGlvbiggZWxlbSwgb3B0aW9ucywgcHJvcCwgZW5kLCBlYXNpbmcsIHVuaXQgKSB7XHJcblx0XHR0aGlzLmVsZW0gPSBlbGVtO1xyXG5cdFx0dGhpcy5wcm9wID0gcHJvcDtcclxuXHRcdHRoaXMuZWFzaW5nID0gZWFzaW5nIHx8IGpRdWVyeS5lYXNpbmcuX2RlZmF1bHQ7XHJcblx0XHR0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xyXG5cdFx0dGhpcy5zdGFydCA9IHRoaXMubm93ID0gdGhpcy5jdXIoKTtcclxuXHRcdHRoaXMuZW5kID0gZW5kO1xyXG5cdFx0dGhpcy51bml0ID0gdW5pdCB8fCAoIGpRdWVyeS5jc3NOdW1iZXJbIHByb3AgXSA/IFwiXCIgOiBcInB4XCIgKTtcclxuXHR9LFxyXG5cdGN1cjogZnVuY3Rpb24oKSB7XHJcblx0XHR2YXIgaG9va3MgPSBUd2Vlbi5wcm9wSG9va3NbIHRoaXMucHJvcCBdO1xyXG5cclxuXHRcdHJldHVybiBob29rcyAmJiBob29rcy5nZXQgP1xyXG5cdFx0XHRob29rcy5nZXQoIHRoaXMgKSA6XHJcblx0XHRcdFR3ZWVuLnByb3BIb29rcy5fZGVmYXVsdC5nZXQoIHRoaXMgKTtcclxuXHR9LFxyXG5cdHJ1bjogZnVuY3Rpb24oIHBlcmNlbnQgKSB7XHJcblx0XHR2YXIgZWFzZWQsXHJcblx0XHRcdGhvb2tzID0gVHdlZW4ucHJvcEhvb2tzWyB0aGlzLnByb3AgXTtcclxuXHJcblx0XHRpZiAoIHRoaXMub3B0aW9ucy5kdXJhdGlvbiApIHtcclxuXHRcdFx0dGhpcy5wb3MgPSBlYXNlZCA9IGpRdWVyeS5lYXNpbmdbIHRoaXMuZWFzaW5nIF0oXHJcblx0XHRcdFx0cGVyY2VudCwgdGhpcy5vcHRpb25zLmR1cmF0aW9uICogcGVyY2VudCwgMCwgMSwgdGhpcy5vcHRpb25zLmR1cmF0aW9uXHJcblx0XHRcdCk7XHJcblx0XHR9IGVsc2Uge1xyXG5cdFx0XHR0aGlzLnBvcyA9IGVhc2VkID0gcGVyY2VudDtcclxuXHRcdH1cclxuXHRcdHRoaXMubm93ID0gKCB0aGlzLmVuZCAtIHRoaXMuc3RhcnQgKSAqIGVhc2VkICsgdGhpcy5zdGFydDtcclxuXHJcblx0XHRpZiAoIHRoaXMub3B0aW9ucy5zdGVwICkge1xyXG5cdFx0XHR0aGlzLm9wdGlvbnMuc3RlcC5jYWxsKCB0aGlzLmVsZW0sIHRoaXMubm93LCB0aGlzICk7XHJcblx0XHR9XHJcblxyXG5cdFx0aWYgKCBob29rcyAmJiBob29rcy5zZXQgKSB7XHJcblx0XHRcdGhvb2tzLnNldCggdGhpcyApO1xyXG5cdFx0fSBlbHNlIHtcclxuXHRcdFx0VHdlZW4ucHJvcEhvb2tzLl9kZWZhdWx0LnNldCggdGhpcyApO1xyXG5cdFx0fVxyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblx0fVxyXG59O1xyXG5cclxuVHdlZW4ucHJvdG90eXBlLmluaXQucHJvdG90eXBlID0gVHdlZW4ucHJvdG90eXBlO1xyXG5cclxuVHdlZW4ucHJvcEhvb2tzID0ge1xyXG5cdF9kZWZhdWx0OiB7XHJcblx0XHRnZXQ6IGZ1bmN0aW9uKCB0d2VlbiApIHtcclxuXHRcdFx0dmFyIHJlc3VsdDtcclxuXHJcblx0XHRcdC8vIFVzZSBhIHByb3BlcnR5IG9uIHRoZSBlbGVtZW50IGRpcmVjdGx5IHdoZW4gaXQgaXMgbm90IGEgRE9NIGVsZW1lbnQsXHJcblx0XHRcdC8vIG9yIHdoZW4gdGhlcmUgaXMgbm8gbWF0Y2hpbmcgc3R5bGUgcHJvcGVydHkgdGhhdCBleGlzdHMuXHJcblx0XHRcdGlmICggdHdlZW4uZWxlbS5ub2RlVHlwZSAhPT0gMSB8fFxyXG5cdFx0XHRcdHR3ZWVuLmVsZW1bIHR3ZWVuLnByb3AgXSAhPSBudWxsICYmIHR3ZWVuLmVsZW0uc3R5bGVbIHR3ZWVuLnByb3AgXSA9PSBudWxsICkge1xyXG5cdFx0XHRcdHJldHVybiB0d2Vlbi5lbGVtWyB0d2Vlbi5wcm9wIF07XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdC8vIFBhc3NpbmcgYW4gZW1wdHkgc3RyaW5nIGFzIGEgM3JkIHBhcmFtZXRlciB0byAuY3NzIHdpbGwgYXV0b21hdGljYWxseVxyXG5cdFx0XHQvLyBhdHRlbXB0IGEgcGFyc2VGbG9hdCBhbmQgZmFsbGJhY2sgdG8gYSBzdHJpbmcgaWYgdGhlIHBhcnNlIGZhaWxzLlxyXG5cdFx0XHQvLyBTaW1wbGUgdmFsdWVzIHN1Y2ggYXMgXCIxMHB4XCIgYXJlIHBhcnNlZCB0byBGbG9hdDtcclxuXHRcdFx0Ly8gY29tcGxleCB2YWx1ZXMgc3VjaCBhcyBcInJvdGF0ZSgxcmFkKVwiIGFyZSByZXR1cm5lZCBhcy1pcy5cclxuXHRcdFx0cmVzdWx0ID0galF1ZXJ5LmNzcyggdHdlZW4uZWxlbSwgdHdlZW4ucHJvcCwgXCJcIiApO1xyXG5cclxuXHRcdFx0Ly8gRW1wdHkgc3RyaW5ncywgbnVsbCwgdW5kZWZpbmVkIGFuZCBcImF1dG9cIiBhcmUgY29udmVydGVkIHRvIDAuXHJcblx0XHRcdHJldHVybiAhcmVzdWx0IHx8IHJlc3VsdCA9PT0gXCJhdXRvXCIgPyAwIDogcmVzdWx0O1xyXG5cdFx0fSxcclxuXHRcdHNldDogZnVuY3Rpb24oIHR3ZWVuICkge1xyXG5cclxuXHRcdFx0Ly8gVXNlIHN0ZXAgaG9vayBmb3IgYmFjayBjb21wYXQuXHJcblx0XHRcdC8vIFVzZSBjc3NIb29rIGlmIGl0cyB0aGVyZS5cclxuXHRcdFx0Ly8gVXNlIC5zdHlsZSBpZiBhdmFpbGFibGUgYW5kIHVzZSBwbGFpbiBwcm9wZXJ0aWVzIHdoZXJlIGF2YWlsYWJsZS5cclxuXHRcdFx0aWYgKCBqUXVlcnkuZnguc3RlcFsgdHdlZW4ucHJvcCBdICkge1xyXG5cdFx0XHRcdGpRdWVyeS5meC5zdGVwWyB0d2Vlbi5wcm9wIF0oIHR3ZWVuICk7XHJcblx0XHRcdH0gZWxzZSBpZiAoIHR3ZWVuLmVsZW0ubm9kZVR5cGUgPT09IDEgJiZcclxuXHRcdFx0XHQoIHR3ZWVuLmVsZW0uc3R5bGVbIGpRdWVyeS5jc3NQcm9wc1sgdHdlZW4ucHJvcCBdIF0gIT0gbnVsbCB8fFxyXG5cdFx0XHRcdFx0alF1ZXJ5LmNzc0hvb2tzWyB0d2Vlbi5wcm9wIF0gKSApIHtcclxuXHRcdFx0XHRqUXVlcnkuc3R5bGUoIHR3ZWVuLmVsZW0sIHR3ZWVuLnByb3AsIHR3ZWVuLm5vdyArIHR3ZWVuLnVuaXQgKTtcclxuXHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHR0d2Vlbi5lbGVtWyB0d2Vlbi5wcm9wIF0gPSB0d2Vlbi5ub3c7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHR9XHJcbn07XHJcblxyXG4vLyBTdXBwb3J0OiBJRTlcclxuLy8gUGFuaWMgYmFzZWQgYXBwcm9hY2ggdG8gc2V0dGluZyB0aGluZ3Mgb24gZGlzY29ubmVjdGVkIG5vZGVzXHJcblR3ZWVuLnByb3BIb29rcy5zY3JvbGxUb3AgPSBUd2Vlbi5wcm9wSG9va3Muc2Nyb2xsTGVmdCA9IHtcclxuXHRzZXQ6IGZ1bmN0aW9uKCB0d2VlbiApIHtcclxuXHRcdGlmICggdHdlZW4uZWxlbS5ub2RlVHlwZSAmJiB0d2Vlbi5lbGVtLnBhcmVudE5vZGUgKSB7XHJcblx0XHRcdHR3ZWVuLmVsZW1bIHR3ZWVuLnByb3AgXSA9IHR3ZWVuLm5vdztcclxuXHRcdH1cclxuXHR9XHJcbn07XHJcblxyXG5qUXVlcnkuZWFzaW5nID0ge1xyXG5cdGxpbmVhcjogZnVuY3Rpb24oIHAgKSB7XHJcblx0XHRyZXR1cm4gcDtcclxuXHR9LFxyXG5cdHN3aW5nOiBmdW5jdGlvbiggcCApIHtcclxuXHRcdHJldHVybiAwLjUgLSBNYXRoLmNvcyggcCAqIE1hdGguUEkgKSAvIDI7XHJcblx0fSxcclxuXHRfZGVmYXVsdDogXCJzd2luZ1wiXHJcbn07XHJcblxyXG5qUXVlcnkuZnggPSBUd2Vlbi5wcm90b3R5cGUuaW5pdDtcclxuXHJcbi8vIEJhY2sgQ29tcGF0IDwxLjggZXh0ZW5zaW9uIHBvaW50XHJcbmpRdWVyeS5meC5zdGVwID0ge307XHJcblxyXG5cclxuXHJcblxyXG52YXJcclxuXHRmeE5vdywgdGltZXJJZCxcclxuXHRyZnh0eXBlcyA9IC9eKD86dG9nZ2xlfHNob3d8aGlkZSkkLyxcclxuXHRycnVuID0gL3F1ZXVlSG9va3MkLztcclxuXHJcbi8vIEFuaW1hdGlvbnMgY3JlYXRlZCBzeW5jaHJvbm91c2x5IHdpbGwgcnVuIHN5bmNocm9ub3VzbHlcclxuZnVuY3Rpb24gY3JlYXRlRnhOb3coKSB7XHJcblx0d2luZG93LnNldFRpbWVvdXQoIGZ1bmN0aW9uKCkge1xyXG5cdFx0ZnhOb3cgPSB1bmRlZmluZWQ7XHJcblx0fSApO1xyXG5cdHJldHVybiAoIGZ4Tm93ID0galF1ZXJ5Lm5vdygpICk7XHJcbn1cclxuXHJcbi8vIEdlbmVyYXRlIHBhcmFtZXRlcnMgdG8gY3JlYXRlIGEgc3RhbmRhcmQgYW5pbWF0aW9uXHJcbmZ1bmN0aW9uIGdlbkZ4KCB0eXBlLCBpbmNsdWRlV2lkdGggKSB7XHJcblx0dmFyIHdoaWNoLFxyXG5cdFx0aSA9IDAsXHJcblx0XHRhdHRycyA9IHsgaGVpZ2h0OiB0eXBlIH07XHJcblxyXG5cdC8vIElmIHdlIGluY2x1ZGUgd2lkdGgsIHN0ZXAgdmFsdWUgaXMgMSB0byBkbyBhbGwgY3NzRXhwYW5kIHZhbHVlcyxcclxuXHQvLyBvdGhlcndpc2Ugc3RlcCB2YWx1ZSBpcyAyIHRvIHNraXAgb3ZlciBMZWZ0IGFuZCBSaWdodFxyXG5cdGluY2x1ZGVXaWR0aCA9IGluY2x1ZGVXaWR0aCA/IDEgOiAwO1xyXG5cdGZvciAoIDsgaSA8IDQgOyBpICs9IDIgLSBpbmNsdWRlV2lkdGggKSB7XHJcblx0XHR3aGljaCA9IGNzc0V4cGFuZFsgaSBdO1xyXG5cdFx0YXR0cnNbIFwibWFyZ2luXCIgKyB3aGljaCBdID0gYXR0cnNbIFwicGFkZGluZ1wiICsgd2hpY2ggXSA9IHR5cGU7XHJcblx0fVxyXG5cclxuXHRpZiAoIGluY2x1ZGVXaWR0aCApIHtcclxuXHRcdGF0dHJzLm9wYWNpdHkgPSBhdHRycy53aWR0aCA9IHR5cGU7XHJcblx0fVxyXG5cclxuXHRyZXR1cm4gYXR0cnM7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGNyZWF0ZVR3ZWVuKCB2YWx1ZSwgcHJvcCwgYW5pbWF0aW9uICkge1xyXG5cdHZhciB0d2VlbixcclxuXHRcdGNvbGxlY3Rpb24gPSAoIEFuaW1hdGlvbi50d2VlbmVyc1sgcHJvcCBdIHx8IFtdICkuY29uY2F0KCBBbmltYXRpb24udHdlZW5lcnNbIFwiKlwiIF0gKSxcclxuXHRcdGluZGV4ID0gMCxcclxuXHRcdGxlbmd0aCA9IGNvbGxlY3Rpb24ubGVuZ3RoO1xyXG5cdGZvciAoIDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KysgKSB7XHJcblx0XHRpZiAoICggdHdlZW4gPSBjb2xsZWN0aW9uWyBpbmRleCBdLmNhbGwoIGFuaW1hdGlvbiwgcHJvcCwgdmFsdWUgKSApICkge1xyXG5cclxuXHRcdFx0Ly8gV2UncmUgZG9uZSB3aXRoIHRoaXMgcHJvcGVydHlcclxuXHRcdFx0cmV0dXJuIHR3ZWVuO1xyXG5cdFx0fVxyXG5cdH1cclxufVxyXG5cclxuZnVuY3Rpb24gZGVmYXVsdFByZWZpbHRlciggZWxlbSwgcHJvcHMsIG9wdHMgKSB7XHJcblx0LyoganNoaW50IHZhbGlkdGhpczogdHJ1ZSAqL1xyXG5cdHZhciBwcm9wLCB2YWx1ZSwgdG9nZ2xlLCB0d2VlbiwgaG9va3MsIG9sZGZpcmUsIGRpc3BsYXksIGNoZWNrRGlzcGxheSxcclxuXHRcdGFuaW0gPSB0aGlzLFxyXG5cdFx0b3JpZyA9IHt9LFxyXG5cdFx0c3R5bGUgPSBlbGVtLnN0eWxlLFxyXG5cdFx0aGlkZGVuID0gZWxlbS5ub2RlVHlwZSAmJiBpc0hpZGRlbiggZWxlbSApLFxyXG5cdFx0ZGF0YVNob3cgPSBkYXRhUHJpdi5nZXQoIGVsZW0sIFwiZnhzaG93XCIgKTtcclxuXHJcblx0Ly8gSGFuZGxlIHF1ZXVlOiBmYWxzZSBwcm9taXNlc1xyXG5cdGlmICggIW9wdHMucXVldWUgKSB7XHJcblx0XHRob29rcyA9IGpRdWVyeS5fcXVldWVIb29rcyggZWxlbSwgXCJmeFwiICk7XHJcblx0XHRpZiAoIGhvb2tzLnVucXVldWVkID09IG51bGwgKSB7XHJcblx0XHRcdGhvb2tzLnVucXVldWVkID0gMDtcclxuXHRcdFx0b2xkZmlyZSA9IGhvb2tzLmVtcHR5LmZpcmU7XHJcblx0XHRcdGhvb2tzLmVtcHR5LmZpcmUgPSBmdW5jdGlvbigpIHtcclxuXHRcdFx0XHRpZiAoICFob29rcy51bnF1ZXVlZCApIHtcclxuXHRcdFx0XHRcdG9sZGZpcmUoKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH07XHJcblx0XHR9XHJcblx0XHRob29rcy51bnF1ZXVlZCsrO1xyXG5cclxuXHRcdGFuaW0uYWx3YXlzKCBmdW5jdGlvbigpIHtcclxuXHJcblx0XHRcdC8vIEVuc3VyZSB0aGUgY29tcGxldGUgaGFuZGxlciBpcyBjYWxsZWQgYmVmb3JlIHRoaXMgY29tcGxldGVzXHJcblx0XHRcdGFuaW0uYWx3YXlzKCBmdW5jdGlvbigpIHtcclxuXHRcdFx0XHRob29rcy51bnF1ZXVlZC0tO1xyXG5cdFx0XHRcdGlmICggIWpRdWVyeS5xdWV1ZSggZWxlbSwgXCJmeFwiICkubGVuZ3RoICkge1xyXG5cdFx0XHRcdFx0aG9va3MuZW1wdHkuZmlyZSgpO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fSApO1xyXG5cdFx0fSApO1xyXG5cdH1cclxuXHJcblx0Ly8gSGVpZ2h0L3dpZHRoIG92ZXJmbG93IHBhc3NcclxuXHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgJiYgKCBcImhlaWdodFwiIGluIHByb3BzIHx8IFwid2lkdGhcIiBpbiBwcm9wcyApICkge1xyXG5cclxuXHRcdC8vIE1ha2Ugc3VyZSB0aGF0IG5vdGhpbmcgc25lYWtzIG91dFxyXG5cdFx0Ly8gUmVjb3JkIGFsbCAzIG92ZXJmbG93IGF0dHJpYnV0ZXMgYmVjYXVzZSBJRTktMTAgZG8gbm90XHJcblx0XHQvLyBjaGFuZ2UgdGhlIG92ZXJmbG93IGF0dHJpYnV0ZSB3aGVuIG92ZXJmbG93WCBhbmRcclxuXHRcdC8vIG92ZXJmbG93WSBhcmUgc2V0IHRvIHRoZSBzYW1lIHZhbHVlXHJcblx0XHRvcHRzLm92ZXJmbG93ID0gWyBzdHlsZS5vdmVyZmxvdywgc3R5bGUub3ZlcmZsb3dYLCBzdHlsZS5vdmVyZmxvd1kgXTtcclxuXHJcblx0XHQvLyBTZXQgZGlzcGxheSBwcm9wZXJ0eSB0byBpbmxpbmUtYmxvY2sgZm9yIGhlaWdodC93aWR0aFxyXG5cdFx0Ly8gYW5pbWF0aW9ucyBvbiBpbmxpbmUgZWxlbWVudHMgdGhhdCBhcmUgaGF2aW5nIHdpZHRoL2hlaWdodCBhbmltYXRlZFxyXG5cdFx0ZGlzcGxheSA9IGpRdWVyeS5jc3MoIGVsZW0sIFwiZGlzcGxheVwiICk7XHJcblxyXG5cdFx0Ly8gVGVzdCBkZWZhdWx0IGRpc3BsYXkgaWYgZGlzcGxheSBpcyBjdXJyZW50bHkgXCJub25lXCJcclxuXHRcdGNoZWNrRGlzcGxheSA9IGRpc3BsYXkgPT09IFwibm9uZVwiID9cclxuXHRcdFx0ZGF0YVByaXYuZ2V0KCBlbGVtLCBcIm9sZGRpc3BsYXlcIiApIHx8IGRlZmF1bHREaXNwbGF5KCBlbGVtLm5vZGVOYW1lICkgOiBkaXNwbGF5O1xyXG5cclxuXHRcdGlmICggY2hlY2tEaXNwbGF5ID09PSBcImlubGluZVwiICYmIGpRdWVyeS5jc3MoIGVsZW0sIFwiZmxvYXRcIiApID09PSBcIm5vbmVcIiApIHtcclxuXHRcdFx0c3R5bGUuZGlzcGxheSA9IFwiaW5saW5lLWJsb2NrXCI7XHJcblx0XHR9XHJcblx0fVxyXG5cclxuXHRpZiAoIG9wdHMub3ZlcmZsb3cgKSB7XHJcblx0XHRzdHlsZS5vdmVyZmxvdyA9IFwiaGlkZGVuXCI7XHJcblx0XHRhbmltLmFsd2F5cyggZnVuY3Rpb24oKSB7XHJcblx0XHRcdHN0eWxlLm92ZXJmbG93ID0gb3B0cy5vdmVyZmxvd1sgMCBdO1xyXG5cdFx0XHRzdHlsZS5vdmVyZmxvd1ggPSBvcHRzLm92ZXJmbG93WyAxIF07XHJcblx0XHRcdHN0eWxlLm92ZXJmbG93WSA9IG9wdHMub3ZlcmZsb3dbIDIgXTtcclxuXHRcdH0gKTtcclxuXHR9XHJcblxyXG5cdC8vIHNob3cvaGlkZSBwYXNzXHJcblx0Zm9yICggcHJvcCBpbiBwcm9wcyApIHtcclxuXHRcdHZhbHVlID0gcHJvcHNbIHByb3AgXTtcclxuXHRcdGlmICggcmZ4dHlwZXMuZXhlYyggdmFsdWUgKSApIHtcclxuXHRcdFx0ZGVsZXRlIHByb3BzWyBwcm9wIF07XHJcblx0XHRcdHRvZ2dsZSA9IHRvZ2dsZSB8fCB2YWx1ZSA9PT0gXCJ0b2dnbGVcIjtcclxuXHRcdFx0aWYgKCB2YWx1ZSA9PT0gKCBoaWRkZW4gPyBcImhpZGVcIiA6IFwic2hvd1wiICkgKSB7XHJcblxyXG5cdFx0XHRcdC8vIElmIHRoZXJlIGlzIGRhdGFTaG93IGxlZnQgb3ZlciBmcm9tIGEgc3RvcHBlZCBoaWRlIG9yIHNob3dcclxuXHRcdFx0XHQvLyBhbmQgd2UgYXJlIGdvaW5nIHRvIHByb2NlZWQgd2l0aCBzaG93LCB3ZSBzaG91bGQgcHJldGVuZCB0byBiZSBoaWRkZW5cclxuXHRcdFx0XHRpZiAoIHZhbHVlID09PSBcInNob3dcIiAmJiBkYXRhU2hvdyAmJiBkYXRhU2hvd1sgcHJvcCBdICE9PSB1bmRlZmluZWQgKSB7XHJcblx0XHRcdFx0XHRoaWRkZW4gPSB0cnVlO1xyXG5cdFx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0XHRjb250aW51ZTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdFx0b3JpZ1sgcHJvcCBdID0gZGF0YVNob3cgJiYgZGF0YVNob3dbIHByb3AgXSB8fCBqUXVlcnkuc3R5bGUoIGVsZW0sIHByb3AgKTtcclxuXHJcblx0XHQvLyBBbnkgbm9uLWZ4IHZhbHVlIHN0b3BzIHVzIGZyb20gcmVzdG9yaW5nIHRoZSBvcmlnaW5hbCBkaXNwbGF5IHZhbHVlXHJcblx0XHR9IGVsc2Uge1xyXG5cdFx0XHRkaXNwbGF5ID0gdW5kZWZpbmVkO1xyXG5cdFx0fVxyXG5cdH1cclxuXHJcblx0aWYgKCAhalF1ZXJ5LmlzRW1wdHlPYmplY3QoIG9yaWcgKSApIHtcclxuXHRcdGlmICggZGF0YVNob3cgKSB7XHJcblx0XHRcdGlmICggXCJoaWRkZW5cIiBpbiBkYXRhU2hvdyApIHtcclxuXHRcdFx0XHRoaWRkZW4gPSBkYXRhU2hvdy5oaWRkZW47XHJcblx0XHRcdH1cclxuXHRcdH0gZWxzZSB7XHJcblx0XHRcdGRhdGFTaG93ID0gZGF0YVByaXYuYWNjZXNzKCBlbGVtLCBcImZ4c2hvd1wiLCB7fSApO1xyXG5cdFx0fVxyXG5cclxuXHRcdC8vIFN0b3JlIHN0YXRlIGlmIGl0cyB0b2dnbGUgLSBlbmFibGVzIC5zdG9wKCkudG9nZ2xlKCkgdG8gXCJyZXZlcnNlXCJcclxuXHRcdGlmICggdG9nZ2xlICkge1xyXG5cdFx0XHRkYXRhU2hvdy5oaWRkZW4gPSAhaGlkZGVuO1xyXG5cdFx0fVxyXG5cdFx0aWYgKCBoaWRkZW4gKSB7XHJcblx0XHRcdGpRdWVyeSggZWxlbSApLnNob3coKTtcclxuXHRcdH0gZWxzZSB7XHJcblx0XHRcdGFuaW0uZG9uZSggZnVuY3Rpb24oKSB7XHJcblx0XHRcdFx0alF1ZXJ5KCBlbGVtICkuaGlkZSgpO1xyXG5cdFx0XHR9ICk7XHJcblx0XHR9XHJcblx0XHRhbmltLmRvbmUoIGZ1bmN0aW9uKCkge1xyXG5cdFx0XHR2YXIgcHJvcDtcclxuXHJcblx0XHRcdGRhdGFQcml2LnJlbW92ZSggZWxlbSwgXCJmeHNob3dcIiApO1xyXG5cdFx0XHRmb3IgKCBwcm9wIGluIG9yaWcgKSB7XHJcblx0XHRcdFx0alF1ZXJ5LnN0eWxlKCBlbGVtLCBwcm9wLCBvcmlnWyBwcm9wIF0gKTtcclxuXHRcdFx0fVxyXG5cdFx0fSApO1xyXG5cdFx0Zm9yICggcHJvcCBpbiBvcmlnICkge1xyXG5cdFx0XHR0d2VlbiA9IGNyZWF0ZVR3ZWVuKCBoaWRkZW4gPyBkYXRhU2hvd1sgcHJvcCBdIDogMCwgcHJvcCwgYW5pbSApO1xyXG5cclxuXHRcdFx0aWYgKCAhKCBwcm9wIGluIGRhdGFTaG93ICkgKSB7XHJcblx0XHRcdFx0ZGF0YVNob3dbIHByb3AgXSA9IHR3ZWVuLnN0YXJ0O1xyXG5cdFx0XHRcdGlmICggaGlkZGVuICkge1xyXG5cdFx0XHRcdFx0dHdlZW4uZW5kID0gdHdlZW4uc3RhcnQ7XHJcblx0XHRcdFx0XHR0d2Vlbi5zdGFydCA9IHByb3AgPT09IFwid2lkdGhcIiB8fCBwcm9wID09PSBcImhlaWdodFwiID8gMSA6IDA7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHR9XHJcblxyXG5cdC8vIElmIHRoaXMgaXMgYSBub29wIGxpa2UgLmhpZGUoKS5oaWRlKCksIHJlc3RvcmUgYW4gb3ZlcndyaXR0ZW4gZGlzcGxheSB2YWx1ZVxyXG5cdH0gZWxzZSBpZiAoICggZGlzcGxheSA9PT0gXCJub25lXCIgPyBkZWZhdWx0RGlzcGxheSggZWxlbS5ub2RlTmFtZSApIDogZGlzcGxheSApID09PSBcImlubGluZVwiICkge1xyXG5cdFx0c3R5bGUuZGlzcGxheSA9IGRpc3BsYXk7XHJcblx0fVxyXG59XHJcblxyXG5mdW5jdGlvbiBwcm9wRmlsdGVyKCBwcm9wcywgc3BlY2lhbEVhc2luZyApIHtcclxuXHR2YXIgaW5kZXgsIG5hbWUsIGVhc2luZywgdmFsdWUsIGhvb2tzO1xyXG5cclxuXHQvLyBjYW1lbENhc2UsIHNwZWNpYWxFYXNpbmcgYW5kIGV4cGFuZCBjc3NIb29rIHBhc3NcclxuXHRmb3IgKCBpbmRleCBpbiBwcm9wcyApIHtcclxuXHRcdG5hbWUgPSBqUXVlcnkuY2FtZWxDYXNlKCBpbmRleCApO1xyXG5cdFx0ZWFzaW5nID0gc3BlY2lhbEVhc2luZ1sgbmFtZSBdO1xyXG5cdFx0dmFsdWUgPSBwcm9wc1sgaW5kZXggXTtcclxuXHRcdGlmICggalF1ZXJ5LmlzQXJyYXkoIHZhbHVlICkgKSB7XHJcblx0XHRcdGVhc2luZyA9IHZhbHVlWyAxIF07XHJcblx0XHRcdHZhbHVlID0gcHJvcHNbIGluZGV4IF0gPSB2YWx1ZVsgMCBdO1xyXG5cdFx0fVxyXG5cclxuXHRcdGlmICggaW5kZXggIT09IG5hbWUgKSB7XHJcblx0XHRcdHByb3BzWyBuYW1lIF0gPSB2YWx1ZTtcclxuXHRcdFx0ZGVsZXRlIHByb3BzWyBpbmRleCBdO1xyXG5cdFx0fVxyXG5cclxuXHRcdGhvb2tzID0galF1ZXJ5LmNzc0hvb2tzWyBuYW1lIF07XHJcblx0XHRpZiAoIGhvb2tzICYmIFwiZXhwYW5kXCIgaW4gaG9va3MgKSB7XHJcblx0XHRcdHZhbHVlID0gaG9va3MuZXhwYW5kKCB2YWx1ZSApO1xyXG5cdFx0XHRkZWxldGUgcHJvcHNbIG5hbWUgXTtcclxuXHJcblx0XHRcdC8vIE5vdCBxdWl0ZSAkLmV4dGVuZCwgdGhpcyB3b24ndCBvdmVyd3JpdGUgZXhpc3Rpbmcga2V5cy5cclxuXHRcdFx0Ly8gUmV1c2luZyAnaW5kZXgnIGJlY2F1c2Ugd2UgaGF2ZSB0aGUgY29ycmVjdCBcIm5hbWVcIlxyXG5cdFx0XHRmb3IgKCBpbmRleCBpbiB2YWx1ZSApIHtcclxuXHRcdFx0XHRpZiAoICEoIGluZGV4IGluIHByb3BzICkgKSB7XHJcblx0XHRcdFx0XHRwcm9wc1sgaW5kZXggXSA9IHZhbHVlWyBpbmRleCBdO1xyXG5cdFx0XHRcdFx0c3BlY2lhbEVhc2luZ1sgaW5kZXggXSA9IGVhc2luZztcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdH0gZWxzZSB7XHJcblx0XHRcdHNwZWNpYWxFYXNpbmdbIG5hbWUgXSA9IGVhc2luZztcclxuXHRcdH1cclxuXHR9XHJcbn1cclxuXHJcbmZ1bmN0aW9uIEFuaW1hdGlvbiggZWxlbSwgcHJvcGVydGllcywgb3B0aW9ucyApIHtcclxuXHR2YXIgcmVzdWx0LFxyXG5cdFx0c3RvcHBlZCxcclxuXHRcdGluZGV4ID0gMCxcclxuXHRcdGxlbmd0aCA9IEFuaW1hdGlvbi5wcmVmaWx0ZXJzLmxlbmd0aCxcclxuXHRcdGRlZmVycmVkID0galF1ZXJ5LkRlZmVycmVkKCkuYWx3YXlzKCBmdW5jdGlvbigpIHtcclxuXHJcblx0XHRcdC8vIERvbid0IG1hdGNoIGVsZW0gaW4gdGhlIDphbmltYXRlZCBzZWxlY3RvclxyXG5cdFx0XHRkZWxldGUgdGljay5lbGVtO1xyXG5cdFx0fSApLFxyXG5cdFx0dGljayA9IGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRpZiAoIHN0b3BwZWQgKSB7XHJcblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xyXG5cdFx0XHR9XHJcblx0XHRcdHZhciBjdXJyZW50VGltZSA9IGZ4Tm93IHx8IGNyZWF0ZUZ4Tm93KCksXHJcblx0XHRcdFx0cmVtYWluaW5nID0gTWF0aC5tYXgoIDAsIGFuaW1hdGlvbi5zdGFydFRpbWUgKyBhbmltYXRpb24uZHVyYXRpb24gLSBjdXJyZW50VGltZSApLFxyXG5cclxuXHRcdFx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDIuM1xyXG5cdFx0XHRcdC8vIEFyY2hhaWMgY3Jhc2ggYnVnIHdvbid0IGFsbG93IHVzIHRvIHVzZSBgMSAtICggMC41IHx8IDAgKWAgKCMxMjQ5NylcclxuXHRcdFx0XHR0ZW1wID0gcmVtYWluaW5nIC8gYW5pbWF0aW9uLmR1cmF0aW9uIHx8IDAsXHJcblx0XHRcdFx0cGVyY2VudCA9IDEgLSB0ZW1wLFxyXG5cdFx0XHRcdGluZGV4ID0gMCxcclxuXHRcdFx0XHRsZW5ndGggPSBhbmltYXRpb24udHdlZW5zLmxlbmd0aDtcclxuXHJcblx0XHRcdGZvciAoIDsgaW5kZXggPCBsZW5ndGggOyBpbmRleCsrICkge1xyXG5cdFx0XHRcdGFuaW1hdGlvbi50d2VlbnNbIGluZGV4IF0ucnVuKCBwZXJjZW50ICk7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdGRlZmVycmVkLm5vdGlmeVdpdGgoIGVsZW0sIFsgYW5pbWF0aW9uLCBwZXJjZW50LCByZW1haW5pbmcgXSApO1xyXG5cclxuXHRcdFx0aWYgKCBwZXJjZW50IDwgMSAmJiBsZW5ndGggKSB7XHJcblx0XHRcdFx0cmV0dXJuIHJlbWFpbmluZztcclxuXHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRkZWZlcnJlZC5yZXNvbHZlV2l0aCggZWxlbSwgWyBhbmltYXRpb24gXSApO1xyXG5cdFx0XHRcdHJldHVybiBmYWxzZTtcclxuXHRcdFx0fVxyXG5cdFx0fSxcclxuXHRcdGFuaW1hdGlvbiA9IGRlZmVycmVkLnByb21pc2UoIHtcclxuXHRcdFx0ZWxlbTogZWxlbSxcclxuXHRcdFx0cHJvcHM6IGpRdWVyeS5leHRlbmQoIHt9LCBwcm9wZXJ0aWVzICksXHJcblx0XHRcdG9wdHM6IGpRdWVyeS5leHRlbmQoIHRydWUsIHtcclxuXHRcdFx0XHRzcGVjaWFsRWFzaW5nOiB7fSxcclxuXHRcdFx0XHRlYXNpbmc6IGpRdWVyeS5lYXNpbmcuX2RlZmF1bHRcclxuXHRcdFx0fSwgb3B0aW9ucyApLFxyXG5cdFx0XHRvcmlnaW5hbFByb3BlcnRpZXM6IHByb3BlcnRpZXMsXHJcblx0XHRcdG9yaWdpbmFsT3B0aW9uczogb3B0aW9ucyxcclxuXHRcdFx0c3RhcnRUaW1lOiBmeE5vdyB8fCBjcmVhdGVGeE5vdygpLFxyXG5cdFx0XHRkdXJhdGlvbjogb3B0aW9ucy5kdXJhdGlvbixcclxuXHRcdFx0dHdlZW5zOiBbXSxcclxuXHRcdFx0Y3JlYXRlVHdlZW46IGZ1bmN0aW9uKCBwcm9wLCBlbmQgKSB7XHJcblx0XHRcdFx0dmFyIHR3ZWVuID0galF1ZXJ5LlR3ZWVuKCBlbGVtLCBhbmltYXRpb24ub3B0cywgcHJvcCwgZW5kLFxyXG5cdFx0XHRcdFx0XHRhbmltYXRpb24ub3B0cy5zcGVjaWFsRWFzaW5nWyBwcm9wIF0gfHwgYW5pbWF0aW9uLm9wdHMuZWFzaW5nICk7XHJcblx0XHRcdFx0YW5pbWF0aW9uLnR3ZWVucy5wdXNoKCB0d2VlbiApO1xyXG5cdFx0XHRcdHJldHVybiB0d2VlbjtcclxuXHRcdFx0fSxcclxuXHRcdFx0c3RvcDogZnVuY3Rpb24oIGdvdG9FbmQgKSB7XHJcblx0XHRcdFx0dmFyIGluZGV4ID0gMCxcclxuXHJcblx0XHRcdFx0XHQvLyBJZiB3ZSBhcmUgZ29pbmcgdG8gdGhlIGVuZCwgd2Ugd2FudCB0byBydW4gYWxsIHRoZSB0d2VlbnNcclxuXHRcdFx0XHRcdC8vIG90aGVyd2lzZSB3ZSBza2lwIHRoaXMgcGFydFxyXG5cdFx0XHRcdFx0bGVuZ3RoID0gZ290b0VuZCA/IGFuaW1hdGlvbi50d2VlbnMubGVuZ3RoIDogMDtcclxuXHRcdFx0XHRpZiAoIHN0b3BwZWQgKSB7XHJcblx0XHRcdFx0XHRyZXR1cm4gdGhpcztcclxuXHRcdFx0XHR9XHJcblx0XHRcdFx0c3RvcHBlZCA9IHRydWU7XHJcblx0XHRcdFx0Zm9yICggOyBpbmRleCA8IGxlbmd0aCA7IGluZGV4KysgKSB7XHJcblx0XHRcdFx0XHRhbmltYXRpb24udHdlZW5zWyBpbmRleCBdLnJ1biggMSApO1xyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0Ly8gUmVzb2x2ZSB3aGVuIHdlIHBsYXllZCB0aGUgbGFzdCBmcmFtZTsgb3RoZXJ3aXNlLCByZWplY3RcclxuXHRcdFx0XHRpZiAoIGdvdG9FbmQgKSB7XHJcblx0XHRcdFx0XHRkZWZlcnJlZC5ub3RpZnlXaXRoKCBlbGVtLCBbIGFuaW1hdGlvbiwgMSwgMCBdICk7XHJcblx0XHRcdFx0XHRkZWZlcnJlZC5yZXNvbHZlV2l0aCggZWxlbSwgWyBhbmltYXRpb24sIGdvdG9FbmQgXSApO1xyXG5cdFx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0XHRkZWZlcnJlZC5yZWplY3RXaXRoKCBlbGVtLCBbIGFuaW1hdGlvbiwgZ290b0VuZCBdICk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHRcdHJldHVybiB0aGlzO1xyXG5cdFx0XHR9XHJcblx0XHR9ICksXHJcblx0XHRwcm9wcyA9IGFuaW1hdGlvbi5wcm9wcztcclxuXHJcblx0cHJvcEZpbHRlciggcHJvcHMsIGFuaW1hdGlvbi5vcHRzLnNwZWNpYWxFYXNpbmcgKTtcclxuXHJcblx0Zm9yICggOyBpbmRleCA8IGxlbmd0aCA7IGluZGV4KysgKSB7XHJcblx0XHRyZXN1bHQgPSBBbmltYXRpb24ucHJlZmlsdGVyc1sgaW5kZXggXS5jYWxsKCBhbmltYXRpb24sIGVsZW0sIHByb3BzLCBhbmltYXRpb24ub3B0cyApO1xyXG5cdFx0aWYgKCByZXN1bHQgKSB7XHJcblx0XHRcdGlmICggalF1ZXJ5LmlzRnVuY3Rpb24oIHJlc3VsdC5zdG9wICkgKSB7XHJcblx0XHRcdFx0alF1ZXJ5Ll9xdWV1ZUhvb2tzKCBhbmltYXRpb24uZWxlbSwgYW5pbWF0aW9uLm9wdHMucXVldWUgKS5zdG9wID1cclxuXHRcdFx0XHRcdGpRdWVyeS5wcm94eSggcmVzdWx0LnN0b3AsIHJlc3VsdCApO1xyXG5cdFx0XHR9XHJcblx0XHRcdHJldHVybiByZXN1bHQ7XHJcblx0XHR9XHJcblx0fVxyXG5cclxuXHRqUXVlcnkubWFwKCBwcm9wcywgY3JlYXRlVHdlZW4sIGFuaW1hdGlvbiApO1xyXG5cclxuXHRpZiAoIGpRdWVyeS5pc0Z1bmN0aW9uKCBhbmltYXRpb24ub3B0cy5zdGFydCApICkge1xyXG5cdFx0YW5pbWF0aW9uLm9wdHMuc3RhcnQuY2FsbCggZWxlbSwgYW5pbWF0aW9uICk7XHJcblx0fVxyXG5cclxuXHRqUXVlcnkuZngudGltZXIoXHJcblx0XHRqUXVlcnkuZXh0ZW5kKCB0aWNrLCB7XHJcblx0XHRcdGVsZW06IGVsZW0sXHJcblx0XHRcdGFuaW06IGFuaW1hdGlvbixcclxuXHRcdFx0cXVldWU6IGFuaW1hdGlvbi5vcHRzLnF1ZXVlXHJcblx0XHR9IClcclxuXHQpO1xyXG5cclxuXHQvLyBhdHRhY2ggY2FsbGJhY2tzIGZyb20gb3B0aW9uc1xyXG5cdHJldHVybiBhbmltYXRpb24ucHJvZ3Jlc3MoIGFuaW1hdGlvbi5vcHRzLnByb2dyZXNzIClcclxuXHRcdC5kb25lKCBhbmltYXRpb24ub3B0cy5kb25lLCBhbmltYXRpb24ub3B0cy5jb21wbGV0ZSApXHJcblx0XHQuZmFpbCggYW5pbWF0aW9uLm9wdHMuZmFpbCApXHJcblx0XHQuYWx3YXlzKCBhbmltYXRpb24ub3B0cy5hbHdheXMgKTtcclxufVxyXG5cclxualF1ZXJ5LkFuaW1hdGlvbiA9IGpRdWVyeS5leHRlbmQoIEFuaW1hdGlvbiwge1xyXG5cdHR3ZWVuZXJzOiB7XHJcblx0XHRcIipcIjogWyBmdW5jdGlvbiggcHJvcCwgdmFsdWUgKSB7XHJcblx0XHRcdHZhciB0d2VlbiA9IHRoaXMuY3JlYXRlVHdlZW4oIHByb3AsIHZhbHVlICk7XHJcblx0XHRcdGFkanVzdENTUyggdHdlZW4uZWxlbSwgcHJvcCwgcmNzc051bS5leGVjKCB2YWx1ZSApLCB0d2VlbiApO1xyXG5cdFx0XHRyZXR1cm4gdHdlZW47XHJcblx0XHR9IF1cclxuXHR9LFxyXG5cclxuXHR0d2VlbmVyOiBmdW5jdGlvbiggcHJvcHMsIGNhbGxiYWNrICkge1xyXG5cdFx0aWYgKCBqUXVlcnkuaXNGdW5jdGlvbiggcHJvcHMgKSApIHtcclxuXHRcdFx0Y2FsbGJhY2sgPSBwcm9wcztcclxuXHRcdFx0cHJvcHMgPSBbIFwiKlwiIF07XHJcblx0XHR9IGVsc2Uge1xyXG5cdFx0XHRwcm9wcyA9IHByb3BzLm1hdGNoKCBybm90d2hpdGUgKTtcclxuXHRcdH1cclxuXHJcblx0XHR2YXIgcHJvcCxcclxuXHRcdFx0aW5kZXggPSAwLFxyXG5cdFx0XHRsZW5ndGggPSBwcm9wcy5sZW5ndGg7XHJcblxyXG5cdFx0Zm9yICggOyBpbmRleCA8IGxlbmd0aCA7IGluZGV4KysgKSB7XHJcblx0XHRcdHByb3AgPSBwcm9wc1sgaW5kZXggXTtcclxuXHRcdFx0QW5pbWF0aW9uLnR3ZWVuZXJzWyBwcm9wIF0gPSBBbmltYXRpb24udHdlZW5lcnNbIHByb3AgXSB8fCBbXTtcclxuXHRcdFx0QW5pbWF0aW9uLnR3ZWVuZXJzWyBwcm9wIF0udW5zaGlmdCggY2FsbGJhY2sgKTtcclxuXHRcdH1cclxuXHR9LFxyXG5cclxuXHRwcmVmaWx0ZXJzOiBbIGRlZmF1bHRQcmVmaWx0ZXIgXSxcclxuXHJcblx0cHJlZmlsdGVyOiBmdW5jdGlvbiggY2FsbGJhY2ssIHByZXBlbmQgKSB7XHJcblx0XHRpZiAoIHByZXBlbmQgKSB7XHJcblx0XHRcdEFuaW1hdGlvbi5wcmVmaWx0ZXJzLnVuc2hpZnQoIGNhbGxiYWNrICk7XHJcblx0XHR9IGVsc2Uge1xyXG5cdFx0XHRBbmltYXRpb24ucHJlZmlsdGVycy5wdXNoKCBjYWxsYmFjayApO1xyXG5cdFx0fVxyXG5cdH1cclxufSApO1xyXG5cclxualF1ZXJ5LnNwZWVkID0gZnVuY3Rpb24oIHNwZWVkLCBlYXNpbmcsIGZuICkge1xyXG5cdHZhciBvcHQgPSBzcGVlZCAmJiB0eXBlb2Ygc3BlZWQgPT09IFwib2JqZWN0XCIgPyBqUXVlcnkuZXh0ZW5kKCB7fSwgc3BlZWQgKSA6IHtcclxuXHRcdGNvbXBsZXRlOiBmbiB8fCAhZm4gJiYgZWFzaW5nIHx8XHJcblx0XHRcdGpRdWVyeS5pc0Z1bmN0aW9uKCBzcGVlZCApICYmIHNwZWVkLFxyXG5cdFx0ZHVyYXRpb246IHNwZWVkLFxyXG5cdFx0ZWFzaW5nOiBmbiAmJiBlYXNpbmcgfHwgZWFzaW5nICYmICFqUXVlcnkuaXNGdW5jdGlvbiggZWFzaW5nICkgJiYgZWFzaW5nXHJcblx0fTtcclxuXHJcblx0b3B0LmR1cmF0aW9uID0galF1ZXJ5LmZ4Lm9mZiA/IDAgOiB0eXBlb2Ygb3B0LmR1cmF0aW9uID09PSBcIm51bWJlclwiID9cclxuXHRcdG9wdC5kdXJhdGlvbiA6IG9wdC5kdXJhdGlvbiBpbiBqUXVlcnkuZnguc3BlZWRzID9cclxuXHRcdFx0alF1ZXJ5LmZ4LnNwZWVkc1sgb3B0LmR1cmF0aW9uIF0gOiBqUXVlcnkuZnguc3BlZWRzLl9kZWZhdWx0O1xyXG5cclxuXHQvLyBOb3JtYWxpemUgb3B0LnF1ZXVlIC0gdHJ1ZS91bmRlZmluZWQvbnVsbCAtPiBcImZ4XCJcclxuXHRpZiAoIG9wdC5xdWV1ZSA9PSBudWxsIHx8IG9wdC5xdWV1ZSA9PT0gdHJ1ZSApIHtcclxuXHRcdG9wdC5xdWV1ZSA9IFwiZnhcIjtcclxuXHR9XHJcblxyXG5cdC8vIFF1ZXVlaW5nXHJcblx0b3B0Lm9sZCA9IG9wdC5jb21wbGV0ZTtcclxuXHJcblx0b3B0LmNvbXBsZXRlID0gZnVuY3Rpb24oKSB7XHJcblx0XHRpZiAoIGpRdWVyeS5pc0Z1bmN0aW9uKCBvcHQub2xkICkgKSB7XHJcblx0XHRcdG9wdC5vbGQuY2FsbCggdGhpcyApO1xyXG5cdFx0fVxyXG5cclxuXHRcdGlmICggb3B0LnF1ZXVlICkge1xyXG5cdFx0XHRqUXVlcnkuZGVxdWV1ZSggdGhpcywgb3B0LnF1ZXVlICk7XHJcblx0XHR9XHJcblx0fTtcclxuXHJcblx0cmV0dXJuIG9wdDtcclxufTtcclxuXHJcbmpRdWVyeS5mbi5leHRlbmQoIHtcclxuXHRmYWRlVG86IGZ1bmN0aW9uKCBzcGVlZCwgdG8sIGVhc2luZywgY2FsbGJhY2sgKSB7XHJcblxyXG5cdFx0Ly8gU2hvdyBhbnkgaGlkZGVuIGVsZW1lbnRzIGFmdGVyIHNldHRpbmcgb3BhY2l0eSB0byAwXHJcblx0XHRyZXR1cm4gdGhpcy5maWx0ZXIoIGlzSGlkZGVuICkuY3NzKCBcIm9wYWNpdHlcIiwgMCApLnNob3coKVxyXG5cclxuXHRcdFx0Ly8gQW5pbWF0ZSB0byB0aGUgdmFsdWUgc3BlY2lmaWVkXHJcblx0XHRcdC5lbmQoKS5hbmltYXRlKCB7IG9wYWNpdHk6IHRvIH0sIHNwZWVkLCBlYXNpbmcsIGNhbGxiYWNrICk7XHJcblx0fSxcclxuXHRhbmltYXRlOiBmdW5jdGlvbiggcHJvcCwgc3BlZWQsIGVhc2luZywgY2FsbGJhY2sgKSB7XHJcblx0XHR2YXIgZW1wdHkgPSBqUXVlcnkuaXNFbXB0eU9iamVjdCggcHJvcCApLFxyXG5cdFx0XHRvcHRhbGwgPSBqUXVlcnkuc3BlZWQoIHNwZWVkLCBlYXNpbmcsIGNhbGxiYWNrICksXHJcblx0XHRcdGRvQW5pbWF0aW9uID0gZnVuY3Rpb24oKSB7XHJcblxyXG5cdFx0XHRcdC8vIE9wZXJhdGUgb24gYSBjb3B5IG9mIHByb3Agc28gcGVyLXByb3BlcnR5IGVhc2luZyB3b24ndCBiZSBsb3N0XHJcblx0XHRcdFx0dmFyIGFuaW0gPSBBbmltYXRpb24oIHRoaXMsIGpRdWVyeS5leHRlbmQoIHt9LCBwcm9wICksIG9wdGFsbCApO1xyXG5cclxuXHRcdFx0XHQvLyBFbXB0eSBhbmltYXRpb25zLCBvciBmaW5pc2hpbmcgcmVzb2x2ZXMgaW1tZWRpYXRlbHlcclxuXHRcdFx0XHRpZiAoIGVtcHR5IHx8IGRhdGFQcml2LmdldCggdGhpcywgXCJmaW5pc2hcIiApICkge1xyXG5cdFx0XHRcdFx0YW5pbS5zdG9wKCB0cnVlICk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9O1xyXG5cdFx0XHRkb0FuaW1hdGlvbi5maW5pc2ggPSBkb0FuaW1hdGlvbjtcclxuXHJcblx0XHRyZXR1cm4gZW1wdHkgfHwgb3B0YWxsLnF1ZXVlID09PSBmYWxzZSA/XHJcblx0XHRcdHRoaXMuZWFjaCggZG9BbmltYXRpb24gKSA6XHJcblx0XHRcdHRoaXMucXVldWUoIG9wdGFsbC5xdWV1ZSwgZG9BbmltYXRpb24gKTtcclxuXHR9LFxyXG5cdHN0b3A6IGZ1bmN0aW9uKCB0eXBlLCBjbGVhclF1ZXVlLCBnb3RvRW5kICkge1xyXG5cdFx0dmFyIHN0b3BRdWV1ZSA9IGZ1bmN0aW9uKCBob29rcyApIHtcclxuXHRcdFx0dmFyIHN0b3AgPSBob29rcy5zdG9wO1xyXG5cdFx0XHRkZWxldGUgaG9va3Muc3RvcDtcclxuXHRcdFx0c3RvcCggZ290b0VuZCApO1xyXG5cdFx0fTtcclxuXHJcblx0XHRpZiAoIHR5cGVvZiB0eXBlICE9PSBcInN0cmluZ1wiICkge1xyXG5cdFx0XHRnb3RvRW5kID0gY2xlYXJRdWV1ZTtcclxuXHRcdFx0Y2xlYXJRdWV1ZSA9IHR5cGU7XHJcblx0XHRcdHR5cGUgPSB1bmRlZmluZWQ7XHJcblx0XHR9XHJcblx0XHRpZiAoIGNsZWFyUXVldWUgJiYgdHlwZSAhPT0gZmFsc2UgKSB7XHJcblx0XHRcdHRoaXMucXVldWUoIHR5cGUgfHwgXCJmeFwiLCBbXSApO1xyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xyXG5cdFx0XHR2YXIgZGVxdWV1ZSA9IHRydWUsXHJcblx0XHRcdFx0aW5kZXggPSB0eXBlICE9IG51bGwgJiYgdHlwZSArIFwicXVldWVIb29rc1wiLFxyXG5cdFx0XHRcdHRpbWVycyA9IGpRdWVyeS50aW1lcnMsXHJcblx0XHRcdFx0ZGF0YSA9IGRhdGFQcml2LmdldCggdGhpcyApO1xyXG5cclxuXHRcdFx0aWYgKCBpbmRleCApIHtcclxuXHRcdFx0XHRpZiAoIGRhdGFbIGluZGV4IF0gJiYgZGF0YVsgaW5kZXggXS5zdG9wICkge1xyXG5cdFx0XHRcdFx0c3RvcFF1ZXVlKCBkYXRhWyBpbmRleCBdICk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdGZvciAoIGluZGV4IGluIGRhdGEgKSB7XHJcblx0XHRcdFx0XHRpZiAoIGRhdGFbIGluZGV4IF0gJiYgZGF0YVsgaW5kZXggXS5zdG9wICYmIHJydW4udGVzdCggaW5kZXggKSApIHtcclxuXHRcdFx0XHRcdFx0c3RvcFF1ZXVlKCBkYXRhWyBpbmRleCBdICk7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRmb3IgKCBpbmRleCA9IHRpbWVycy5sZW5ndGg7IGluZGV4LS07ICkge1xyXG5cdFx0XHRcdGlmICggdGltZXJzWyBpbmRleCBdLmVsZW0gPT09IHRoaXMgJiZcclxuXHRcdFx0XHRcdCggdHlwZSA9PSBudWxsIHx8IHRpbWVyc1sgaW5kZXggXS5xdWV1ZSA9PT0gdHlwZSApICkge1xyXG5cclxuXHRcdFx0XHRcdHRpbWVyc1sgaW5kZXggXS5hbmltLnN0b3AoIGdvdG9FbmQgKTtcclxuXHRcdFx0XHRcdGRlcXVldWUgPSBmYWxzZTtcclxuXHRcdFx0XHRcdHRpbWVycy5zcGxpY2UoIGluZGV4LCAxICk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHQvLyBTdGFydCB0aGUgbmV4dCBpbiB0aGUgcXVldWUgaWYgdGhlIGxhc3Qgc3RlcCB3YXNuJ3QgZm9yY2VkLlxyXG5cdFx0XHQvLyBUaW1lcnMgY3VycmVudGx5IHdpbGwgY2FsbCB0aGVpciBjb21wbGV0ZSBjYWxsYmFja3MsIHdoaWNoXHJcblx0XHRcdC8vIHdpbGwgZGVxdWV1ZSBidXQgb25seSBpZiB0aGV5IHdlcmUgZ290b0VuZC5cclxuXHRcdFx0aWYgKCBkZXF1ZXVlIHx8ICFnb3RvRW5kICkge1xyXG5cdFx0XHRcdGpRdWVyeS5kZXF1ZXVlKCB0aGlzLCB0eXBlICk7XHJcblx0XHRcdH1cclxuXHRcdH0gKTtcclxuXHR9LFxyXG5cdGZpbmlzaDogZnVuY3Rpb24oIHR5cGUgKSB7XHJcblx0XHRpZiAoIHR5cGUgIT09IGZhbHNlICkge1xyXG5cdFx0XHR0eXBlID0gdHlwZSB8fCBcImZ4XCI7XHJcblx0XHR9XHJcblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcclxuXHRcdFx0dmFyIGluZGV4LFxyXG5cdFx0XHRcdGRhdGEgPSBkYXRhUHJpdi5nZXQoIHRoaXMgKSxcclxuXHRcdFx0XHRxdWV1ZSA9IGRhdGFbIHR5cGUgKyBcInF1ZXVlXCIgXSxcclxuXHRcdFx0XHRob29rcyA9IGRhdGFbIHR5cGUgKyBcInF1ZXVlSG9va3NcIiBdLFxyXG5cdFx0XHRcdHRpbWVycyA9IGpRdWVyeS50aW1lcnMsXHJcblx0XHRcdFx0bGVuZ3RoID0gcXVldWUgPyBxdWV1ZS5sZW5ndGggOiAwO1xyXG5cclxuXHRcdFx0Ly8gRW5hYmxlIGZpbmlzaGluZyBmbGFnIG9uIHByaXZhdGUgZGF0YVxyXG5cdFx0XHRkYXRhLmZpbmlzaCA9IHRydWU7XHJcblxyXG5cdFx0XHQvLyBFbXB0eSB0aGUgcXVldWUgZmlyc3RcclxuXHRcdFx0alF1ZXJ5LnF1ZXVlKCB0aGlzLCB0eXBlLCBbXSApO1xyXG5cclxuXHRcdFx0aWYgKCBob29rcyAmJiBob29rcy5zdG9wICkge1xyXG5cdFx0XHRcdGhvb2tzLnN0b3AuY2FsbCggdGhpcywgdHJ1ZSApO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHQvLyBMb29rIGZvciBhbnkgYWN0aXZlIGFuaW1hdGlvbnMsIGFuZCBmaW5pc2ggdGhlbVxyXG5cdFx0XHRmb3IgKCBpbmRleCA9IHRpbWVycy5sZW5ndGg7IGluZGV4LS07ICkge1xyXG5cdFx0XHRcdGlmICggdGltZXJzWyBpbmRleCBdLmVsZW0gPT09IHRoaXMgJiYgdGltZXJzWyBpbmRleCBdLnF1ZXVlID09PSB0eXBlICkge1xyXG5cdFx0XHRcdFx0dGltZXJzWyBpbmRleCBdLmFuaW0uc3RvcCggdHJ1ZSApO1xyXG5cdFx0XHRcdFx0dGltZXJzLnNwbGljZSggaW5kZXgsIDEgKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdC8vIExvb2sgZm9yIGFueSBhbmltYXRpb25zIGluIHRoZSBvbGQgcXVldWUgYW5kIGZpbmlzaCB0aGVtXHJcblx0XHRcdGZvciAoIGluZGV4ID0gMDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KysgKSB7XHJcblx0XHRcdFx0aWYgKCBxdWV1ZVsgaW5kZXggXSAmJiBxdWV1ZVsgaW5kZXggXS5maW5pc2ggKSB7XHJcblx0XHRcdFx0XHRxdWV1ZVsgaW5kZXggXS5maW5pc2guY2FsbCggdGhpcyApO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0Ly8gVHVybiBvZmYgZmluaXNoaW5nIGZsYWdcclxuXHRcdFx0ZGVsZXRlIGRhdGEuZmluaXNoO1xyXG5cdFx0fSApO1xyXG5cdH1cclxufSApO1xyXG5cclxualF1ZXJ5LmVhY2goIFsgXCJ0b2dnbGVcIiwgXCJzaG93XCIsIFwiaGlkZVwiIF0sIGZ1bmN0aW9uKCBpLCBuYW1lICkge1xyXG5cdHZhciBjc3NGbiA9IGpRdWVyeS5mblsgbmFtZSBdO1xyXG5cdGpRdWVyeS5mblsgbmFtZSBdID0gZnVuY3Rpb24oIHNwZWVkLCBlYXNpbmcsIGNhbGxiYWNrICkge1xyXG5cdFx0cmV0dXJuIHNwZWVkID09IG51bGwgfHwgdHlwZW9mIHNwZWVkID09PSBcImJvb2xlYW5cIiA/XHJcblx0XHRcdGNzc0ZuLmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKSA6XHJcblx0XHRcdHRoaXMuYW5pbWF0ZSggZ2VuRngoIG5hbWUsIHRydWUgKSwgc3BlZWQsIGVhc2luZywgY2FsbGJhY2sgKTtcclxuXHR9O1xyXG59ICk7XHJcblxyXG4vLyBHZW5lcmF0ZSBzaG9ydGN1dHMgZm9yIGN1c3RvbSBhbmltYXRpb25zXHJcbmpRdWVyeS5lYWNoKCB7XHJcblx0c2xpZGVEb3duOiBnZW5GeCggXCJzaG93XCIgKSxcclxuXHRzbGlkZVVwOiBnZW5GeCggXCJoaWRlXCIgKSxcclxuXHRzbGlkZVRvZ2dsZTogZ2VuRngoIFwidG9nZ2xlXCIgKSxcclxuXHRmYWRlSW46IHsgb3BhY2l0eTogXCJzaG93XCIgfSxcclxuXHRmYWRlT3V0OiB7IG9wYWNpdHk6IFwiaGlkZVwiIH0sXHJcblx0ZmFkZVRvZ2dsZTogeyBvcGFjaXR5OiBcInRvZ2dsZVwiIH1cclxufSwgZnVuY3Rpb24oIG5hbWUsIHByb3BzICkge1xyXG5cdGpRdWVyeS5mblsgbmFtZSBdID0gZnVuY3Rpb24oIHNwZWVkLCBlYXNpbmcsIGNhbGxiYWNrICkge1xyXG5cdFx0cmV0dXJuIHRoaXMuYW5pbWF0ZSggcHJvcHMsIHNwZWVkLCBlYXNpbmcsIGNhbGxiYWNrICk7XHJcblx0fTtcclxufSApO1xyXG5cclxualF1ZXJ5LnRpbWVycyA9IFtdO1xyXG5qUXVlcnkuZngudGljayA9IGZ1bmN0aW9uKCkge1xyXG5cdHZhciB0aW1lcixcclxuXHRcdGkgPSAwLFxyXG5cdFx0dGltZXJzID0galF1ZXJ5LnRpbWVycztcclxuXHJcblx0ZnhOb3cgPSBqUXVlcnkubm93KCk7XHJcblxyXG5cdGZvciAoIDsgaSA8IHRpbWVycy5sZW5ndGg7IGkrKyApIHtcclxuXHRcdHRpbWVyID0gdGltZXJzWyBpIF07XHJcblxyXG5cdFx0Ly8gQ2hlY2tzIHRoZSB0aW1lciBoYXMgbm90IGFscmVhZHkgYmVlbiByZW1vdmVkXHJcblx0XHRpZiAoICF0aW1lcigpICYmIHRpbWVyc1sgaSBdID09PSB0aW1lciApIHtcclxuXHRcdFx0dGltZXJzLnNwbGljZSggaS0tLCAxICk7XHJcblx0XHR9XHJcblx0fVxyXG5cclxuXHRpZiAoICF0aW1lcnMubGVuZ3RoICkge1xyXG5cdFx0alF1ZXJ5LmZ4LnN0b3AoKTtcclxuXHR9XHJcblx0ZnhOb3cgPSB1bmRlZmluZWQ7XHJcbn07XHJcblxyXG5qUXVlcnkuZngudGltZXIgPSBmdW5jdGlvbiggdGltZXIgKSB7XHJcblx0alF1ZXJ5LnRpbWVycy5wdXNoKCB0aW1lciApO1xyXG5cdGlmICggdGltZXIoKSApIHtcclxuXHRcdGpRdWVyeS5meC5zdGFydCgpO1xyXG5cdH0gZWxzZSB7XHJcblx0XHRqUXVlcnkudGltZXJzLnBvcCgpO1xyXG5cdH1cclxufTtcclxuXHJcbmpRdWVyeS5meC5pbnRlcnZhbCA9IDEzO1xyXG5qUXVlcnkuZnguc3RhcnQgPSBmdW5jdGlvbigpIHtcclxuXHRpZiAoICF0aW1lcklkICkge1xyXG5cdFx0dGltZXJJZCA9IHdpbmRvdy5zZXRJbnRlcnZhbCggalF1ZXJ5LmZ4LnRpY2ssIGpRdWVyeS5meC5pbnRlcnZhbCApO1xyXG5cdH1cclxufTtcclxuXHJcbmpRdWVyeS5meC5zdG9wID0gZnVuY3Rpb24oKSB7XHJcblx0d2luZG93LmNsZWFySW50ZXJ2YWwoIHRpbWVySWQgKTtcclxuXHJcblx0dGltZXJJZCA9IG51bGw7XHJcbn07XHJcblxyXG5qUXVlcnkuZnguc3BlZWRzID0ge1xyXG5cdHNsb3c6IDYwMCxcclxuXHRmYXN0OiAyMDAsXHJcblxyXG5cdC8vIERlZmF1bHQgc3BlZWRcclxuXHRfZGVmYXVsdDogNDAwXHJcbn07XHJcblxyXG5cclxuLy8gQmFzZWQgb2ZmIG9mIHRoZSBwbHVnaW4gYnkgQ2xpbnQgSGVsZmVycywgd2l0aCBwZXJtaXNzaW9uLlxyXG4vLyBodHRwOi8vd2ViLmFyY2hpdmUub3JnL3dlYi8yMDEwMDMyNDAxNDc0Ny9odHRwOi8vYmxpbmRzaWduYWxzLmNvbS9pbmRleC5waHAvMjAwOS8wNy9qcXVlcnktZGVsYXkvXHJcbmpRdWVyeS5mbi5kZWxheSA9IGZ1bmN0aW9uKCB0aW1lLCB0eXBlICkge1xyXG5cdHRpbWUgPSBqUXVlcnkuZnggPyBqUXVlcnkuZnguc3BlZWRzWyB0aW1lIF0gfHwgdGltZSA6IHRpbWU7XHJcblx0dHlwZSA9IHR5cGUgfHwgXCJmeFwiO1xyXG5cclxuXHRyZXR1cm4gdGhpcy5xdWV1ZSggdHlwZSwgZnVuY3Rpb24oIG5leHQsIGhvb2tzICkge1xyXG5cdFx0dmFyIHRpbWVvdXQgPSB3aW5kb3cuc2V0VGltZW91dCggbmV4dCwgdGltZSApO1xyXG5cdFx0aG9va3Muc3RvcCA9IGZ1bmN0aW9uKCkge1xyXG5cdFx0XHR3aW5kb3cuY2xlYXJUaW1lb3V0KCB0aW1lb3V0ICk7XHJcblx0XHR9O1xyXG5cdH0gKTtcclxufTtcclxuXHJcblxyXG4oIGZ1bmN0aW9uKCkge1xyXG5cdHZhciBpbnB1dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiaW5wdXRcIiApLFxyXG5cdFx0c2VsZWN0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJzZWxlY3RcIiApLFxyXG5cdFx0b3B0ID0gc2VsZWN0LmFwcGVuZENoaWxkKCBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcIm9wdGlvblwiICkgKTtcclxuXHJcblx0aW5wdXQudHlwZSA9IFwiY2hlY2tib3hcIjtcclxuXHJcblx0Ly8gU3VwcG9ydDogaU9TPD01LjEsIEFuZHJvaWQ8PTQuMitcclxuXHQvLyBEZWZhdWx0IHZhbHVlIGZvciBhIGNoZWNrYm94IHNob3VsZCBiZSBcIm9uXCJcclxuXHRzdXBwb3J0LmNoZWNrT24gPSBpbnB1dC52YWx1ZSAhPT0gXCJcIjtcclxuXHJcblx0Ly8gU3VwcG9ydDogSUU8PTExK1xyXG5cdC8vIE11c3QgYWNjZXNzIHNlbGVjdGVkSW5kZXggdG8gbWFrZSBkZWZhdWx0IG9wdGlvbnMgc2VsZWN0XHJcblx0c3VwcG9ydC5vcHRTZWxlY3RlZCA9IG9wdC5zZWxlY3RlZDtcclxuXHJcblx0Ly8gU3VwcG9ydDogQW5kcm9pZDw9Mi4zXHJcblx0Ly8gT3B0aW9ucyBpbnNpZGUgZGlzYWJsZWQgc2VsZWN0cyBhcmUgaW5jb3JyZWN0bHkgbWFya2VkIGFzIGRpc2FibGVkXHJcblx0c2VsZWN0LmRpc2FibGVkID0gdHJ1ZTtcclxuXHRzdXBwb3J0Lm9wdERpc2FibGVkID0gIW9wdC5kaXNhYmxlZDtcclxuXHJcblx0Ly8gU3VwcG9ydDogSUU8PTExK1xyXG5cdC8vIEFuIGlucHV0IGxvc2VzIGl0cyB2YWx1ZSBhZnRlciBiZWNvbWluZyBhIHJhZGlvXHJcblx0aW5wdXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImlucHV0XCIgKTtcclxuXHRpbnB1dC52YWx1ZSA9IFwidFwiO1xyXG5cdGlucHV0LnR5cGUgPSBcInJhZGlvXCI7XHJcblx0c3VwcG9ydC5yYWRpb1ZhbHVlID0gaW5wdXQudmFsdWUgPT09IFwidFwiO1xyXG59ICkoKTtcclxuXHJcblxyXG52YXIgYm9vbEhvb2ssXHJcblx0YXR0ckhhbmRsZSA9IGpRdWVyeS5leHByLmF0dHJIYW5kbGU7XHJcblxyXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XHJcblx0YXR0cjogZnVuY3Rpb24oIG5hbWUsIHZhbHVlICkge1xyXG5cdFx0cmV0dXJuIGFjY2VzcyggdGhpcywgalF1ZXJ5LmF0dHIsIG5hbWUsIHZhbHVlLCBhcmd1bWVudHMubGVuZ3RoID4gMSApO1xyXG5cdH0sXHJcblxyXG5cdHJlbW92ZUF0dHI6IGZ1bmN0aW9uKCBuYW1lICkge1xyXG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XHJcblx0XHRcdGpRdWVyeS5yZW1vdmVBdHRyKCB0aGlzLCBuYW1lICk7XHJcblx0XHR9ICk7XHJcblx0fVxyXG59ICk7XHJcblxyXG5qUXVlcnkuZXh0ZW5kKCB7XHJcblx0YXR0cjogZnVuY3Rpb24oIGVsZW0sIG5hbWUsIHZhbHVlICkge1xyXG5cdFx0dmFyIHJldCwgaG9va3MsXHJcblx0XHRcdG5UeXBlID0gZWxlbS5ub2RlVHlwZTtcclxuXHJcblx0XHQvLyBEb24ndCBnZXQvc2V0IGF0dHJpYnV0ZXMgb24gdGV4dCwgY29tbWVudCBhbmQgYXR0cmlidXRlIG5vZGVzXHJcblx0XHRpZiAoIG5UeXBlID09PSAzIHx8IG5UeXBlID09PSA4IHx8IG5UeXBlID09PSAyICkge1xyXG5cdFx0XHRyZXR1cm47XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gRmFsbGJhY2sgdG8gcHJvcCB3aGVuIGF0dHJpYnV0ZXMgYXJlIG5vdCBzdXBwb3J0ZWRcclxuXHRcdGlmICggdHlwZW9mIGVsZW0uZ2V0QXR0cmlidXRlID09PSBcInVuZGVmaW5lZFwiICkge1xyXG5cdFx0XHRyZXR1cm4galF1ZXJ5LnByb3AoIGVsZW0sIG5hbWUsIHZhbHVlICk7XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gQWxsIGF0dHJpYnV0ZXMgYXJlIGxvd2VyY2FzZVxyXG5cdFx0Ly8gR3JhYiBuZWNlc3NhcnkgaG9vayBpZiBvbmUgaXMgZGVmaW5lZFxyXG5cdFx0aWYgKCBuVHlwZSAhPT0gMSB8fCAhalF1ZXJ5LmlzWE1MRG9jKCBlbGVtICkgKSB7XHJcblx0XHRcdG5hbWUgPSBuYW1lLnRvTG93ZXJDYXNlKCk7XHJcblx0XHRcdGhvb2tzID0galF1ZXJ5LmF0dHJIb29rc1sgbmFtZSBdIHx8XHJcblx0XHRcdFx0KCBqUXVlcnkuZXhwci5tYXRjaC5ib29sLnRlc3QoIG5hbWUgKSA/IGJvb2xIb29rIDogdW5kZWZpbmVkICk7XHJcblx0XHR9XHJcblxyXG5cdFx0aWYgKCB2YWx1ZSAhPT0gdW5kZWZpbmVkICkge1xyXG5cdFx0XHRpZiAoIHZhbHVlID09PSBudWxsICkge1xyXG5cdFx0XHRcdGpRdWVyeS5yZW1vdmVBdHRyKCBlbGVtLCBuYW1lICk7XHJcblx0XHRcdFx0cmV0dXJuO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRpZiAoIGhvb2tzICYmIFwic2V0XCIgaW4gaG9va3MgJiZcclxuXHRcdFx0XHQoIHJldCA9IGhvb2tzLnNldCggZWxlbSwgdmFsdWUsIG5hbWUgKSApICE9PSB1bmRlZmluZWQgKSB7XHJcblx0XHRcdFx0cmV0dXJuIHJldDtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0ZWxlbS5zZXRBdHRyaWJ1dGUoIG5hbWUsIHZhbHVlICsgXCJcIiApO1xyXG5cdFx0XHRyZXR1cm4gdmFsdWU7XHJcblx0XHR9XHJcblxyXG5cdFx0aWYgKCBob29rcyAmJiBcImdldFwiIGluIGhvb2tzICYmICggcmV0ID0gaG9va3MuZ2V0KCBlbGVtLCBuYW1lICkgKSAhPT0gbnVsbCApIHtcclxuXHRcdFx0cmV0dXJuIHJldDtcclxuXHRcdH1cclxuXHJcblx0XHRyZXQgPSBqUXVlcnkuZmluZC5hdHRyKCBlbGVtLCBuYW1lICk7XHJcblxyXG5cdFx0Ly8gTm9uLWV4aXN0ZW50IGF0dHJpYnV0ZXMgcmV0dXJuIG51bGwsIHdlIG5vcm1hbGl6ZSB0byB1bmRlZmluZWRcclxuXHRcdHJldHVybiByZXQgPT0gbnVsbCA/IHVuZGVmaW5lZCA6IHJldDtcclxuXHR9LFxyXG5cclxuXHRhdHRySG9va3M6IHtcclxuXHRcdHR5cGU6IHtcclxuXHRcdFx0c2V0OiBmdW5jdGlvbiggZWxlbSwgdmFsdWUgKSB7XHJcblx0XHRcdFx0aWYgKCAhc3VwcG9ydC5yYWRpb1ZhbHVlICYmIHZhbHVlID09PSBcInJhZGlvXCIgJiZcclxuXHRcdFx0XHRcdGpRdWVyeS5ub2RlTmFtZSggZWxlbSwgXCJpbnB1dFwiICkgKSB7XHJcblx0XHRcdFx0XHR2YXIgdmFsID0gZWxlbS52YWx1ZTtcclxuXHRcdFx0XHRcdGVsZW0uc2V0QXR0cmlidXRlKCBcInR5cGVcIiwgdmFsdWUgKTtcclxuXHRcdFx0XHRcdGlmICggdmFsICkge1xyXG5cdFx0XHRcdFx0XHRlbGVtLnZhbHVlID0gdmFsO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0cmV0dXJuIHZhbHVlO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdH0sXHJcblxyXG5cdHJlbW92ZUF0dHI6IGZ1bmN0aW9uKCBlbGVtLCB2YWx1ZSApIHtcclxuXHRcdHZhciBuYW1lLCBwcm9wTmFtZSxcclxuXHRcdFx0aSA9IDAsXHJcblx0XHRcdGF0dHJOYW1lcyA9IHZhbHVlICYmIHZhbHVlLm1hdGNoKCBybm90d2hpdGUgKTtcclxuXHJcblx0XHRpZiAoIGF0dHJOYW1lcyAmJiBlbGVtLm5vZGVUeXBlID09PSAxICkge1xyXG5cdFx0XHR3aGlsZSAoICggbmFtZSA9IGF0dHJOYW1lc1sgaSsrIF0gKSApIHtcclxuXHRcdFx0XHRwcm9wTmFtZSA9IGpRdWVyeS5wcm9wRml4WyBuYW1lIF0gfHwgbmFtZTtcclxuXHJcblx0XHRcdFx0Ly8gQm9vbGVhbiBhdHRyaWJ1dGVzIGdldCBzcGVjaWFsIHRyZWF0bWVudCAoIzEwODcwKVxyXG5cdFx0XHRcdGlmICggalF1ZXJ5LmV4cHIubWF0Y2guYm9vbC50ZXN0KCBuYW1lICkgKSB7XHJcblxyXG5cdFx0XHRcdFx0Ly8gU2V0IGNvcnJlc3BvbmRpbmcgcHJvcGVydHkgdG8gZmFsc2VcclxuXHRcdFx0XHRcdGVsZW1bIHByb3BOYW1lIF0gPSBmYWxzZTtcclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdGVsZW0ucmVtb3ZlQXR0cmlidXRlKCBuYW1lICk7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHR9XHJcbn0gKTtcclxuXHJcbi8vIEhvb2tzIGZvciBib29sZWFuIGF0dHJpYnV0ZXNcclxuYm9vbEhvb2sgPSB7XHJcblx0c2V0OiBmdW5jdGlvbiggZWxlbSwgdmFsdWUsIG5hbWUgKSB7XHJcblx0XHRpZiAoIHZhbHVlID09PSBmYWxzZSApIHtcclxuXHJcblx0XHRcdC8vIFJlbW92ZSBib29sZWFuIGF0dHJpYnV0ZXMgd2hlbiBzZXQgdG8gZmFsc2VcclxuXHRcdFx0alF1ZXJ5LnJlbW92ZUF0dHIoIGVsZW0sIG5hbWUgKTtcclxuXHRcdH0gZWxzZSB7XHJcblx0XHRcdGVsZW0uc2V0QXR0cmlidXRlKCBuYW1lLCBuYW1lICk7XHJcblx0XHR9XHJcblx0XHRyZXR1cm4gbmFtZTtcclxuXHR9XHJcbn07XHJcbmpRdWVyeS5lYWNoKCBqUXVlcnkuZXhwci5tYXRjaC5ib29sLnNvdXJjZS5tYXRjaCggL1xcdysvZyApLCBmdW5jdGlvbiggaSwgbmFtZSApIHtcclxuXHR2YXIgZ2V0dGVyID0gYXR0ckhhbmRsZVsgbmFtZSBdIHx8IGpRdWVyeS5maW5kLmF0dHI7XHJcblxyXG5cdGF0dHJIYW5kbGVbIG5hbWUgXSA9IGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCBpc1hNTCApIHtcclxuXHRcdHZhciByZXQsIGhhbmRsZTtcclxuXHRcdGlmICggIWlzWE1MICkge1xyXG5cclxuXHRcdFx0Ly8gQXZvaWQgYW4gaW5maW5pdGUgbG9vcCBieSB0ZW1wb3JhcmlseSByZW1vdmluZyB0aGlzIGZ1bmN0aW9uIGZyb20gdGhlIGdldHRlclxyXG5cdFx0XHRoYW5kbGUgPSBhdHRySGFuZGxlWyBuYW1lIF07XHJcblx0XHRcdGF0dHJIYW5kbGVbIG5hbWUgXSA9IHJldDtcclxuXHRcdFx0cmV0ID0gZ2V0dGVyKCBlbGVtLCBuYW1lLCBpc1hNTCApICE9IG51bGwgP1xyXG5cdFx0XHRcdG5hbWUudG9Mb3dlckNhc2UoKSA6XHJcblx0XHRcdFx0bnVsbDtcclxuXHRcdFx0YXR0ckhhbmRsZVsgbmFtZSBdID0gaGFuZGxlO1xyXG5cdFx0fVxyXG5cdFx0cmV0dXJuIHJldDtcclxuXHR9O1xyXG59ICk7XHJcblxyXG5cclxuXHJcblxyXG52YXIgcmZvY3VzYWJsZSA9IC9eKD86aW5wdXR8c2VsZWN0fHRleHRhcmVhfGJ1dHRvbikkL2ksXHJcblx0cmNsaWNrYWJsZSA9IC9eKD86YXxhcmVhKSQvaTtcclxuXHJcbmpRdWVyeS5mbi5leHRlbmQoIHtcclxuXHRwcm9wOiBmdW5jdGlvbiggbmFtZSwgdmFsdWUgKSB7XHJcblx0XHRyZXR1cm4gYWNjZXNzKCB0aGlzLCBqUXVlcnkucHJvcCwgbmFtZSwgdmFsdWUsIGFyZ3VtZW50cy5sZW5ndGggPiAxICk7XHJcblx0fSxcclxuXHJcblx0cmVtb3ZlUHJvcDogZnVuY3Rpb24oIG5hbWUgKSB7XHJcblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcclxuXHRcdFx0ZGVsZXRlIHRoaXNbIGpRdWVyeS5wcm9wRml4WyBuYW1lIF0gfHwgbmFtZSBdO1xyXG5cdFx0fSApO1xyXG5cdH1cclxufSApO1xyXG5cclxualF1ZXJ5LmV4dGVuZCgge1xyXG5cdHByb3A6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCB2YWx1ZSApIHtcclxuXHRcdHZhciByZXQsIGhvb2tzLFxyXG5cdFx0XHRuVHlwZSA9IGVsZW0ubm9kZVR5cGU7XHJcblxyXG5cdFx0Ly8gRG9uJ3QgZ2V0L3NldCBwcm9wZXJ0aWVzIG9uIHRleHQsIGNvbW1lbnQgYW5kIGF0dHJpYnV0ZSBub2Rlc1xyXG5cdFx0aWYgKCBuVHlwZSA9PT0gMyB8fCBuVHlwZSA9PT0gOCB8fCBuVHlwZSA9PT0gMiApIHtcclxuXHRcdFx0cmV0dXJuO1xyXG5cdFx0fVxyXG5cclxuXHRcdGlmICggblR5cGUgIT09IDEgfHwgIWpRdWVyeS5pc1hNTERvYyggZWxlbSApICkge1xyXG5cclxuXHRcdFx0Ly8gRml4IG5hbWUgYW5kIGF0dGFjaCBob29rc1xyXG5cdFx0XHRuYW1lID0galF1ZXJ5LnByb3BGaXhbIG5hbWUgXSB8fCBuYW1lO1xyXG5cdFx0XHRob29rcyA9IGpRdWVyeS5wcm9wSG9va3NbIG5hbWUgXTtcclxuXHRcdH1cclxuXHJcblx0XHRpZiAoIHZhbHVlICE9PSB1bmRlZmluZWQgKSB7XHJcblx0XHRcdGlmICggaG9va3MgJiYgXCJzZXRcIiBpbiBob29rcyAmJlxyXG5cdFx0XHRcdCggcmV0ID0gaG9va3Muc2V0KCBlbGVtLCB2YWx1ZSwgbmFtZSApICkgIT09IHVuZGVmaW5lZCApIHtcclxuXHRcdFx0XHRyZXR1cm4gcmV0O1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRyZXR1cm4gKCBlbGVtWyBuYW1lIF0gPSB2YWx1ZSApO1xyXG5cdFx0fVxyXG5cclxuXHRcdGlmICggaG9va3MgJiYgXCJnZXRcIiBpbiBob29rcyAmJiAoIHJldCA9IGhvb2tzLmdldCggZWxlbSwgbmFtZSApICkgIT09IG51bGwgKSB7XHJcblx0XHRcdHJldHVybiByZXQ7XHJcblx0XHR9XHJcblxyXG5cdFx0cmV0dXJuIGVsZW1bIG5hbWUgXTtcclxuXHR9LFxyXG5cclxuXHRwcm9wSG9va3M6IHtcclxuXHRcdHRhYkluZGV4OiB7XHJcblx0XHRcdGdldDogZnVuY3Rpb24oIGVsZW0gKSB7XHJcblxyXG5cdFx0XHRcdC8vIGVsZW0udGFiSW5kZXggZG9lc24ndCBhbHdheXMgcmV0dXJuIHRoZVxyXG5cdFx0XHRcdC8vIGNvcnJlY3QgdmFsdWUgd2hlbiBpdCBoYXNuJ3QgYmVlbiBleHBsaWNpdGx5IHNldFxyXG5cdFx0XHRcdC8vIGh0dHA6Ly9mbHVpZHByb2plY3Qub3JnL2Jsb2cvMjAwOC8wMS8wOS9nZXR0aW5nLXNldHRpbmctYW5kLXJlbW92aW5nLXRhYmluZGV4LXZhbHVlcy13aXRoLWphdmFzY3JpcHQvXHJcblx0XHRcdFx0Ly8gVXNlIHByb3BlciBhdHRyaWJ1dGUgcmV0cmlldmFsKCMxMjA3MilcclxuXHRcdFx0XHR2YXIgdGFiaW5kZXggPSBqUXVlcnkuZmluZC5hdHRyKCBlbGVtLCBcInRhYmluZGV4XCIgKTtcclxuXHJcblx0XHRcdFx0cmV0dXJuIHRhYmluZGV4ID9cclxuXHRcdFx0XHRcdHBhcnNlSW50KCB0YWJpbmRleCwgMTAgKSA6XHJcblx0XHRcdFx0XHRyZm9jdXNhYmxlLnRlc3QoIGVsZW0ubm9kZU5hbWUgKSB8fFxyXG5cdFx0XHRcdFx0XHRyY2xpY2thYmxlLnRlc3QoIGVsZW0ubm9kZU5hbWUgKSAmJiBlbGVtLmhyZWYgP1xyXG5cdFx0XHRcdFx0XHRcdDAgOlxyXG5cdFx0XHRcdFx0XHRcdC0xO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0fSxcclxuXHJcblx0cHJvcEZpeDoge1xyXG5cdFx0XCJmb3JcIjogXCJodG1sRm9yXCIsXHJcblx0XHRcImNsYXNzXCI6IFwiY2xhc3NOYW1lXCJcclxuXHR9XHJcbn0gKTtcclxuXHJcbmlmICggIXN1cHBvcnQub3B0U2VsZWN0ZWQgKSB7XHJcblx0alF1ZXJ5LnByb3BIb29rcy5zZWxlY3RlZCA9IHtcclxuXHRcdGdldDogZnVuY3Rpb24oIGVsZW0gKSB7XHJcblx0XHRcdHZhciBwYXJlbnQgPSBlbGVtLnBhcmVudE5vZGU7XHJcblx0XHRcdGlmICggcGFyZW50ICYmIHBhcmVudC5wYXJlbnROb2RlICkge1xyXG5cdFx0XHRcdHBhcmVudC5wYXJlbnROb2RlLnNlbGVjdGVkSW5kZXg7XHJcblx0XHRcdH1cclxuXHRcdFx0cmV0dXJuIG51bGw7XHJcblx0XHR9XHJcblx0fTtcclxufVxyXG5cclxualF1ZXJ5LmVhY2goIFtcclxuXHRcInRhYkluZGV4XCIsXHJcblx0XCJyZWFkT25seVwiLFxyXG5cdFwibWF4TGVuZ3RoXCIsXHJcblx0XCJjZWxsU3BhY2luZ1wiLFxyXG5cdFwiY2VsbFBhZGRpbmdcIixcclxuXHRcInJvd1NwYW5cIixcclxuXHRcImNvbFNwYW5cIixcclxuXHRcInVzZU1hcFwiLFxyXG5cdFwiZnJhbWVCb3JkZXJcIixcclxuXHRcImNvbnRlbnRFZGl0YWJsZVwiXHJcbl0sIGZ1bmN0aW9uKCkge1xyXG5cdGpRdWVyeS5wcm9wRml4WyB0aGlzLnRvTG93ZXJDYXNlKCkgXSA9IHRoaXM7XHJcbn0gKTtcclxuXHJcblxyXG5cclxuXHJcbnZhciByY2xhc3MgPSAvW1xcdFxcclxcblxcZl0vZztcclxuXHJcbmZ1bmN0aW9uIGdldENsYXNzKCBlbGVtICkge1xyXG5cdHJldHVybiBlbGVtLmdldEF0dHJpYnV0ZSAmJiBlbGVtLmdldEF0dHJpYnV0ZSggXCJjbGFzc1wiICkgfHwgXCJcIjtcclxufVxyXG5cclxualF1ZXJ5LmZuLmV4dGVuZCgge1xyXG5cdGFkZENsYXNzOiBmdW5jdGlvbiggdmFsdWUgKSB7XHJcblx0XHR2YXIgY2xhc3NlcywgZWxlbSwgY3VyLCBjdXJWYWx1ZSwgY2xhenosIGosIGZpbmFsVmFsdWUsXHJcblx0XHRcdGkgPSAwO1xyXG5cclxuXHRcdGlmICggalF1ZXJ5LmlzRnVuY3Rpb24oIHZhbHVlICkgKSB7XHJcblx0XHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCBqICkge1xyXG5cdFx0XHRcdGpRdWVyeSggdGhpcyApLmFkZENsYXNzKCB2YWx1ZS5jYWxsKCB0aGlzLCBqLCBnZXRDbGFzcyggdGhpcyApICkgKTtcclxuXHRcdFx0fSApO1xyXG5cdFx0fVxyXG5cclxuXHRcdGlmICggdHlwZW9mIHZhbHVlID09PSBcInN0cmluZ1wiICYmIHZhbHVlICkge1xyXG5cdFx0XHRjbGFzc2VzID0gdmFsdWUubWF0Y2goIHJub3R3aGl0ZSApIHx8IFtdO1xyXG5cclxuXHRcdFx0d2hpbGUgKCAoIGVsZW0gPSB0aGlzWyBpKysgXSApICkge1xyXG5cdFx0XHRcdGN1clZhbHVlID0gZ2V0Q2xhc3MoIGVsZW0gKTtcclxuXHRcdFx0XHRjdXIgPSBlbGVtLm5vZGVUeXBlID09PSAxICYmXHJcblx0XHRcdFx0XHQoIFwiIFwiICsgY3VyVmFsdWUgKyBcIiBcIiApLnJlcGxhY2UoIHJjbGFzcywgXCIgXCIgKTtcclxuXHJcblx0XHRcdFx0aWYgKCBjdXIgKSB7XHJcblx0XHRcdFx0XHRqID0gMDtcclxuXHRcdFx0XHRcdHdoaWxlICggKCBjbGF6eiA9IGNsYXNzZXNbIGorKyBdICkgKSB7XHJcblx0XHRcdFx0XHRcdGlmICggY3VyLmluZGV4T2YoIFwiIFwiICsgY2xhenogKyBcIiBcIiApIDwgMCApIHtcclxuXHRcdFx0XHRcdFx0XHRjdXIgKz0gY2xhenogKyBcIiBcIjtcclxuXHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRcdC8vIE9ubHkgYXNzaWduIGlmIGRpZmZlcmVudCB0byBhdm9pZCB1bm5lZWRlZCByZW5kZXJpbmcuXHJcblx0XHRcdFx0XHRmaW5hbFZhbHVlID0galF1ZXJ5LnRyaW0oIGN1ciApO1xyXG5cdFx0XHRcdFx0aWYgKCBjdXJWYWx1ZSAhPT0gZmluYWxWYWx1ZSApIHtcclxuXHRcdFx0XHRcdFx0ZWxlbS5zZXRBdHRyaWJ1dGUoIFwiY2xhc3NcIiwgZmluYWxWYWx1ZSApO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cdH0sXHJcblxyXG5cdHJlbW92ZUNsYXNzOiBmdW5jdGlvbiggdmFsdWUgKSB7XHJcblx0XHR2YXIgY2xhc3NlcywgZWxlbSwgY3VyLCBjdXJWYWx1ZSwgY2xhenosIGosIGZpbmFsVmFsdWUsXHJcblx0XHRcdGkgPSAwO1xyXG5cclxuXHRcdGlmICggalF1ZXJ5LmlzRnVuY3Rpb24oIHZhbHVlICkgKSB7XHJcblx0XHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCBqICkge1xyXG5cdFx0XHRcdGpRdWVyeSggdGhpcyApLnJlbW92ZUNsYXNzKCB2YWx1ZS5jYWxsKCB0aGlzLCBqLCBnZXRDbGFzcyggdGhpcyApICkgKTtcclxuXHRcdFx0fSApO1xyXG5cdFx0fVxyXG5cclxuXHRcdGlmICggIWFyZ3VtZW50cy5sZW5ndGggKSB7XHJcblx0XHRcdHJldHVybiB0aGlzLmF0dHIoIFwiY2xhc3NcIiwgXCJcIiApO1xyXG5cdFx0fVxyXG5cclxuXHRcdGlmICggdHlwZW9mIHZhbHVlID09PSBcInN0cmluZ1wiICYmIHZhbHVlICkge1xyXG5cdFx0XHRjbGFzc2VzID0gdmFsdWUubWF0Y2goIHJub3R3aGl0ZSApIHx8IFtdO1xyXG5cclxuXHRcdFx0d2hpbGUgKCAoIGVsZW0gPSB0aGlzWyBpKysgXSApICkge1xyXG5cdFx0XHRcdGN1clZhbHVlID0gZ2V0Q2xhc3MoIGVsZW0gKTtcclxuXHJcblx0XHRcdFx0Ly8gVGhpcyBleHByZXNzaW9uIGlzIGhlcmUgZm9yIGJldHRlciBjb21wcmVzc2liaWxpdHkgKHNlZSBhZGRDbGFzcylcclxuXHRcdFx0XHRjdXIgPSBlbGVtLm5vZGVUeXBlID09PSAxICYmXHJcblx0XHRcdFx0XHQoIFwiIFwiICsgY3VyVmFsdWUgKyBcIiBcIiApLnJlcGxhY2UoIHJjbGFzcywgXCIgXCIgKTtcclxuXHJcblx0XHRcdFx0aWYgKCBjdXIgKSB7XHJcblx0XHRcdFx0XHRqID0gMDtcclxuXHRcdFx0XHRcdHdoaWxlICggKCBjbGF6eiA9IGNsYXNzZXNbIGorKyBdICkgKSB7XHJcblxyXG5cdFx0XHRcdFx0XHQvLyBSZW1vdmUgKmFsbCogaW5zdGFuY2VzXHJcblx0XHRcdFx0XHRcdHdoaWxlICggY3VyLmluZGV4T2YoIFwiIFwiICsgY2xhenogKyBcIiBcIiApID4gLTEgKSB7XHJcblx0XHRcdFx0XHRcdFx0Y3VyID0gY3VyLnJlcGxhY2UoIFwiIFwiICsgY2xhenogKyBcIiBcIiwgXCIgXCIgKTtcclxuXHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRcdC8vIE9ubHkgYXNzaWduIGlmIGRpZmZlcmVudCB0byBhdm9pZCB1bm5lZWRlZCByZW5kZXJpbmcuXHJcblx0XHRcdFx0XHRmaW5hbFZhbHVlID0galF1ZXJ5LnRyaW0oIGN1ciApO1xyXG5cdFx0XHRcdFx0aWYgKCBjdXJWYWx1ZSAhPT0gZmluYWxWYWx1ZSApIHtcclxuXHRcdFx0XHRcdFx0ZWxlbS5zZXRBdHRyaWJ1dGUoIFwiY2xhc3NcIiwgZmluYWxWYWx1ZSApO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cdH0sXHJcblxyXG5cdHRvZ2dsZUNsYXNzOiBmdW5jdGlvbiggdmFsdWUsIHN0YXRlVmFsICkge1xyXG5cdFx0dmFyIHR5cGUgPSB0eXBlb2YgdmFsdWU7XHJcblxyXG5cdFx0aWYgKCB0eXBlb2Ygc3RhdGVWYWwgPT09IFwiYm9vbGVhblwiICYmIHR5cGUgPT09IFwic3RyaW5nXCIgKSB7XHJcblx0XHRcdHJldHVybiBzdGF0ZVZhbCA/IHRoaXMuYWRkQ2xhc3MoIHZhbHVlICkgOiB0aGlzLnJlbW92ZUNsYXNzKCB2YWx1ZSApO1xyXG5cdFx0fVxyXG5cclxuXHRcdGlmICggalF1ZXJ5LmlzRnVuY3Rpb24oIHZhbHVlICkgKSB7XHJcblx0XHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCBpICkge1xyXG5cdFx0XHRcdGpRdWVyeSggdGhpcyApLnRvZ2dsZUNsYXNzKFxyXG5cdFx0XHRcdFx0dmFsdWUuY2FsbCggdGhpcywgaSwgZ2V0Q2xhc3MoIHRoaXMgKSwgc3RhdGVWYWwgKSxcclxuXHRcdFx0XHRcdHN0YXRlVmFsXHJcblx0XHRcdFx0KTtcclxuXHRcdFx0fSApO1xyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xyXG5cdFx0XHR2YXIgY2xhc3NOYW1lLCBpLCBzZWxmLCBjbGFzc05hbWVzO1xyXG5cclxuXHRcdFx0aWYgKCB0eXBlID09PSBcInN0cmluZ1wiICkge1xyXG5cclxuXHRcdFx0XHQvLyBUb2dnbGUgaW5kaXZpZHVhbCBjbGFzcyBuYW1lc1xyXG5cdFx0XHRcdGkgPSAwO1xyXG5cdFx0XHRcdHNlbGYgPSBqUXVlcnkoIHRoaXMgKTtcclxuXHRcdFx0XHRjbGFzc05hbWVzID0gdmFsdWUubWF0Y2goIHJub3R3aGl0ZSApIHx8IFtdO1xyXG5cclxuXHRcdFx0XHR3aGlsZSAoICggY2xhc3NOYW1lID0gY2xhc3NOYW1lc1sgaSsrIF0gKSApIHtcclxuXHJcblx0XHRcdFx0XHQvLyBDaGVjayBlYWNoIGNsYXNzTmFtZSBnaXZlbiwgc3BhY2Ugc2VwYXJhdGVkIGxpc3RcclxuXHRcdFx0XHRcdGlmICggc2VsZi5oYXNDbGFzcyggY2xhc3NOYW1lICkgKSB7XHJcblx0XHRcdFx0XHRcdHNlbGYucmVtb3ZlQ2xhc3MoIGNsYXNzTmFtZSApO1xyXG5cdFx0XHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRcdFx0c2VsZi5hZGRDbGFzcyggY2xhc3NOYW1lICk7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0Ly8gVG9nZ2xlIHdob2xlIGNsYXNzIG5hbWVcclxuXHRcdFx0fSBlbHNlIGlmICggdmFsdWUgPT09IHVuZGVmaW5lZCB8fCB0eXBlID09PSBcImJvb2xlYW5cIiApIHtcclxuXHRcdFx0XHRjbGFzc05hbWUgPSBnZXRDbGFzcyggdGhpcyApO1xyXG5cdFx0XHRcdGlmICggY2xhc3NOYW1lICkge1xyXG5cclxuXHRcdFx0XHRcdC8vIFN0b3JlIGNsYXNzTmFtZSBpZiBzZXRcclxuXHRcdFx0XHRcdGRhdGFQcml2LnNldCggdGhpcywgXCJfX2NsYXNzTmFtZV9fXCIsIGNsYXNzTmFtZSApO1xyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0Ly8gSWYgdGhlIGVsZW1lbnQgaGFzIGEgY2xhc3MgbmFtZSBvciBpZiB3ZSdyZSBwYXNzZWQgYGZhbHNlYCxcclxuXHRcdFx0XHQvLyB0aGVuIHJlbW92ZSB0aGUgd2hvbGUgY2xhc3NuYW1lIChpZiB0aGVyZSB3YXMgb25lLCB0aGUgYWJvdmUgc2F2ZWQgaXQpLlxyXG5cdFx0XHRcdC8vIE90aGVyd2lzZSBicmluZyBiYWNrIHdoYXRldmVyIHdhcyBwcmV2aW91c2x5IHNhdmVkIChpZiBhbnl0aGluZyksXHJcblx0XHRcdFx0Ly8gZmFsbGluZyBiYWNrIHRvIHRoZSBlbXB0eSBzdHJpbmcgaWYgbm90aGluZyB3YXMgc3RvcmVkLlxyXG5cdFx0XHRcdGlmICggdGhpcy5zZXRBdHRyaWJ1dGUgKSB7XHJcblx0XHRcdFx0XHR0aGlzLnNldEF0dHJpYnV0ZSggXCJjbGFzc1wiLFxyXG5cdFx0XHRcdFx0XHRjbGFzc05hbWUgfHwgdmFsdWUgPT09IGZhbHNlID9cclxuXHRcdFx0XHRcdFx0XCJcIiA6XHJcblx0XHRcdFx0XHRcdGRhdGFQcml2LmdldCggdGhpcywgXCJfX2NsYXNzTmFtZV9fXCIgKSB8fCBcIlwiXHJcblx0XHRcdFx0XHQpO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0fSApO1xyXG5cdH0sXHJcblxyXG5cdGhhc0NsYXNzOiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XHJcblx0XHR2YXIgY2xhc3NOYW1lLCBlbGVtLFxyXG5cdFx0XHRpID0gMDtcclxuXHJcblx0XHRjbGFzc05hbWUgPSBcIiBcIiArIHNlbGVjdG9yICsgXCIgXCI7XHJcblx0XHR3aGlsZSAoICggZWxlbSA9IHRoaXNbIGkrKyBdICkgKSB7XHJcblx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSAmJlxyXG5cdFx0XHRcdCggXCIgXCIgKyBnZXRDbGFzcyggZWxlbSApICsgXCIgXCIgKS5yZXBsYWNlKCByY2xhc3MsIFwiIFwiIClcclxuXHRcdFx0XHRcdC5pbmRleE9mKCBjbGFzc05hbWUgKSA+IC0xXHJcblx0XHRcdCkge1xyXG5cdFx0XHRcdHJldHVybiB0cnVlO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblxyXG5cdFx0cmV0dXJuIGZhbHNlO1xyXG5cdH1cclxufSApO1xyXG5cclxuXHJcblxyXG5cclxudmFyIHJyZXR1cm4gPSAvXFxyL2c7XHJcblxyXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XHJcblx0dmFsOiBmdW5jdGlvbiggdmFsdWUgKSB7XHJcblx0XHR2YXIgaG9va3MsIHJldCwgaXNGdW5jdGlvbixcclxuXHRcdFx0ZWxlbSA9IHRoaXNbIDAgXTtcclxuXHJcblx0XHRpZiAoICFhcmd1bWVudHMubGVuZ3RoICkge1xyXG5cdFx0XHRpZiAoIGVsZW0gKSB7XHJcblx0XHRcdFx0aG9va3MgPSBqUXVlcnkudmFsSG9va3NbIGVsZW0udHlwZSBdIHx8XHJcblx0XHRcdFx0XHRqUXVlcnkudmFsSG9va3NbIGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKSBdO1xyXG5cclxuXHRcdFx0XHRpZiAoIGhvb2tzICYmXHJcblx0XHRcdFx0XHRcImdldFwiIGluIGhvb2tzICYmXHJcblx0XHRcdFx0XHQoIHJldCA9IGhvb2tzLmdldCggZWxlbSwgXCJ2YWx1ZVwiICkgKSAhPT0gdW5kZWZpbmVkXHJcblx0XHRcdFx0KSB7XHJcblx0XHRcdFx0XHRyZXR1cm4gcmV0O1xyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0cmV0ID0gZWxlbS52YWx1ZTtcclxuXHJcblx0XHRcdFx0cmV0dXJuIHR5cGVvZiByZXQgPT09IFwic3RyaW5nXCIgP1xyXG5cclxuXHRcdFx0XHRcdC8vIEhhbmRsZSBtb3N0IGNvbW1vbiBzdHJpbmcgY2FzZXNcclxuXHRcdFx0XHRcdHJldC5yZXBsYWNlKCBycmV0dXJuLCBcIlwiICkgOlxyXG5cclxuXHRcdFx0XHRcdC8vIEhhbmRsZSBjYXNlcyB3aGVyZSB2YWx1ZSBpcyBudWxsL3VuZGVmIG9yIG51bWJlclxyXG5cdFx0XHRcdFx0cmV0ID09IG51bGwgPyBcIlwiIDogcmV0O1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRyZXR1cm47XHJcblx0XHR9XHJcblxyXG5cdFx0aXNGdW5jdGlvbiA9IGpRdWVyeS5pc0Z1bmN0aW9uKCB2YWx1ZSApO1xyXG5cclxuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCBpICkge1xyXG5cdFx0XHR2YXIgdmFsO1xyXG5cclxuXHRcdFx0aWYgKCB0aGlzLm5vZGVUeXBlICE9PSAxICkge1xyXG5cdFx0XHRcdHJldHVybjtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0aWYgKCBpc0Z1bmN0aW9uICkge1xyXG5cdFx0XHRcdHZhbCA9IHZhbHVlLmNhbGwoIHRoaXMsIGksIGpRdWVyeSggdGhpcyApLnZhbCgpICk7XHJcblx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0dmFsID0gdmFsdWU7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdC8vIFRyZWF0IG51bGwvdW5kZWZpbmVkIGFzIFwiXCI7IGNvbnZlcnQgbnVtYmVycyB0byBzdHJpbmdcclxuXHRcdFx0aWYgKCB2YWwgPT0gbnVsbCApIHtcclxuXHRcdFx0XHR2YWwgPSBcIlwiO1xyXG5cclxuXHRcdFx0fSBlbHNlIGlmICggdHlwZW9mIHZhbCA9PT0gXCJudW1iZXJcIiApIHtcclxuXHRcdFx0XHR2YWwgKz0gXCJcIjtcclxuXHJcblx0XHRcdH0gZWxzZSBpZiAoIGpRdWVyeS5pc0FycmF5KCB2YWwgKSApIHtcclxuXHRcdFx0XHR2YWwgPSBqUXVlcnkubWFwKCB2YWwsIGZ1bmN0aW9uKCB2YWx1ZSApIHtcclxuXHRcdFx0XHRcdHJldHVybiB2YWx1ZSA9PSBudWxsID8gXCJcIiA6IHZhbHVlICsgXCJcIjtcclxuXHRcdFx0XHR9ICk7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdGhvb2tzID0galF1ZXJ5LnZhbEhvb2tzWyB0aGlzLnR5cGUgXSB8fCBqUXVlcnkudmFsSG9va3NbIHRoaXMubm9kZU5hbWUudG9Mb3dlckNhc2UoKSBdO1xyXG5cclxuXHRcdFx0Ly8gSWYgc2V0IHJldHVybnMgdW5kZWZpbmVkLCBmYWxsIGJhY2sgdG8gbm9ybWFsIHNldHRpbmdcclxuXHRcdFx0aWYgKCAhaG9va3MgfHwgISggXCJzZXRcIiBpbiBob29rcyApIHx8IGhvb2tzLnNldCggdGhpcywgdmFsLCBcInZhbHVlXCIgKSA9PT0gdW5kZWZpbmVkICkge1xyXG5cdFx0XHRcdHRoaXMudmFsdWUgPSB2YWw7XHJcblx0XHRcdH1cclxuXHRcdH0gKTtcclxuXHR9XHJcbn0gKTtcclxuXHJcbmpRdWVyeS5leHRlbmQoIHtcclxuXHR2YWxIb29rczoge1xyXG5cdFx0b3B0aW9uOiB7XHJcblx0XHRcdGdldDogZnVuY3Rpb24oIGVsZW0gKSB7XHJcblxyXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IElFPDExXHJcblx0XHRcdFx0Ly8gb3B0aW9uLnZhbHVlIG5vdCB0cmltbWVkICgjMTQ4NTgpXHJcblx0XHRcdFx0cmV0dXJuIGpRdWVyeS50cmltKCBlbGVtLnZhbHVlICk7XHJcblx0XHRcdH1cclxuXHRcdH0sXHJcblx0XHRzZWxlY3Q6IHtcclxuXHRcdFx0Z2V0OiBmdW5jdGlvbiggZWxlbSApIHtcclxuXHRcdFx0XHR2YXIgdmFsdWUsIG9wdGlvbixcclxuXHRcdFx0XHRcdG9wdGlvbnMgPSBlbGVtLm9wdGlvbnMsXHJcblx0XHRcdFx0XHRpbmRleCA9IGVsZW0uc2VsZWN0ZWRJbmRleCxcclxuXHRcdFx0XHRcdG9uZSA9IGVsZW0udHlwZSA9PT0gXCJzZWxlY3Qtb25lXCIgfHwgaW5kZXggPCAwLFxyXG5cdFx0XHRcdFx0dmFsdWVzID0gb25lID8gbnVsbCA6IFtdLFxyXG5cdFx0XHRcdFx0bWF4ID0gb25lID8gaW5kZXggKyAxIDogb3B0aW9ucy5sZW5ndGgsXHJcblx0XHRcdFx0XHRpID0gaW5kZXggPCAwID9cclxuXHRcdFx0XHRcdFx0bWF4IDpcclxuXHRcdFx0XHRcdFx0b25lID8gaW5kZXggOiAwO1xyXG5cclxuXHRcdFx0XHQvLyBMb29wIHRocm91Z2ggYWxsIHRoZSBzZWxlY3RlZCBvcHRpb25zXHJcblx0XHRcdFx0Zm9yICggOyBpIDwgbWF4OyBpKysgKSB7XHJcblx0XHRcdFx0XHRvcHRpb24gPSBvcHRpb25zWyBpIF07XHJcblxyXG5cdFx0XHRcdFx0Ly8gSUU4LTkgZG9lc24ndCB1cGRhdGUgc2VsZWN0ZWQgYWZ0ZXIgZm9ybSByZXNldCAoIzI1NTEpXHJcblx0XHRcdFx0XHRpZiAoICggb3B0aW9uLnNlbGVjdGVkIHx8IGkgPT09IGluZGV4ICkgJiZcclxuXHJcblx0XHRcdFx0XHRcdFx0Ly8gRG9uJ3QgcmV0dXJuIG9wdGlvbnMgdGhhdCBhcmUgZGlzYWJsZWQgb3IgaW4gYSBkaXNhYmxlZCBvcHRncm91cFxyXG5cdFx0XHRcdFx0XHRcdCggc3VwcG9ydC5vcHREaXNhYmxlZCA/XHJcblx0XHRcdFx0XHRcdFx0XHQhb3B0aW9uLmRpc2FibGVkIDogb3B0aW9uLmdldEF0dHJpYnV0ZSggXCJkaXNhYmxlZFwiICkgPT09IG51bGwgKSAmJlxyXG5cdFx0XHRcdFx0XHRcdCggIW9wdGlvbi5wYXJlbnROb2RlLmRpc2FibGVkIHx8XHJcblx0XHRcdFx0XHRcdFx0XHQhalF1ZXJ5Lm5vZGVOYW1lKCBvcHRpb24ucGFyZW50Tm9kZSwgXCJvcHRncm91cFwiICkgKSApIHtcclxuXHJcblx0XHRcdFx0XHRcdC8vIEdldCB0aGUgc3BlY2lmaWMgdmFsdWUgZm9yIHRoZSBvcHRpb25cclxuXHRcdFx0XHRcdFx0dmFsdWUgPSBqUXVlcnkoIG9wdGlvbiApLnZhbCgpO1xyXG5cclxuXHRcdFx0XHRcdFx0Ly8gV2UgZG9uJ3QgbmVlZCBhbiBhcnJheSBmb3Igb25lIHNlbGVjdHNcclxuXHRcdFx0XHRcdFx0aWYgKCBvbmUgKSB7XHJcblx0XHRcdFx0XHRcdFx0cmV0dXJuIHZhbHVlO1xyXG5cdFx0XHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdFx0XHQvLyBNdWx0aS1TZWxlY3RzIHJldHVybiBhbiBhcnJheVxyXG5cdFx0XHRcdFx0XHR2YWx1ZXMucHVzaCggdmFsdWUgKTtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdHJldHVybiB2YWx1ZXM7XHJcblx0XHRcdH0sXHJcblxyXG5cdFx0XHRzZXQ6IGZ1bmN0aW9uKCBlbGVtLCB2YWx1ZSApIHtcclxuXHRcdFx0XHR2YXIgb3B0aW9uU2V0LCBvcHRpb24sXHJcblx0XHRcdFx0XHRvcHRpb25zID0gZWxlbS5vcHRpb25zLFxyXG5cdFx0XHRcdFx0dmFsdWVzID0galF1ZXJ5Lm1ha2VBcnJheSggdmFsdWUgKSxcclxuXHRcdFx0XHRcdGkgPSBvcHRpb25zLmxlbmd0aDtcclxuXHJcblx0XHRcdFx0d2hpbGUgKCBpLS0gKSB7XHJcblx0XHRcdFx0XHRvcHRpb24gPSBvcHRpb25zWyBpIF07XHJcblx0XHRcdFx0XHRpZiAoIG9wdGlvbi5zZWxlY3RlZCA9XHJcblx0XHRcdFx0XHRcdFx0alF1ZXJ5LmluQXJyYXkoIGpRdWVyeS52YWxIb29rcy5vcHRpb24uZ2V0KCBvcHRpb24gKSwgdmFsdWVzICkgPiAtMVxyXG5cdFx0XHRcdFx0KSB7XHJcblx0XHRcdFx0XHRcdG9wdGlvblNldCA9IHRydWU7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHQvLyBGb3JjZSBicm93c2VycyB0byBiZWhhdmUgY29uc2lzdGVudGx5IHdoZW4gbm9uLW1hdGNoaW5nIHZhbHVlIGlzIHNldFxyXG5cdFx0XHRcdGlmICggIW9wdGlvblNldCApIHtcclxuXHRcdFx0XHRcdGVsZW0uc2VsZWN0ZWRJbmRleCA9IC0xO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHRyZXR1cm4gdmFsdWVzO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0fVxyXG59ICk7XHJcblxyXG4vLyBSYWRpb3MgYW5kIGNoZWNrYm94ZXMgZ2V0dGVyL3NldHRlclxyXG5qUXVlcnkuZWFjaCggWyBcInJhZGlvXCIsIFwiY2hlY2tib3hcIiBdLCBmdW5jdGlvbigpIHtcclxuXHRqUXVlcnkudmFsSG9va3NbIHRoaXMgXSA9IHtcclxuXHRcdHNldDogZnVuY3Rpb24oIGVsZW0sIHZhbHVlICkge1xyXG5cdFx0XHRpZiAoIGpRdWVyeS5pc0FycmF5KCB2YWx1ZSApICkge1xyXG5cdFx0XHRcdHJldHVybiAoIGVsZW0uY2hlY2tlZCA9IGpRdWVyeS5pbkFycmF5KCBqUXVlcnkoIGVsZW0gKS52YWwoKSwgdmFsdWUgKSA+IC0xICk7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHR9O1xyXG5cdGlmICggIXN1cHBvcnQuY2hlY2tPbiApIHtcclxuXHRcdGpRdWVyeS52YWxIb29rc1sgdGhpcyBdLmdldCA9IGZ1bmN0aW9uKCBlbGVtICkge1xyXG5cdFx0XHRyZXR1cm4gZWxlbS5nZXRBdHRyaWJ1dGUoIFwidmFsdWVcIiApID09PSBudWxsID8gXCJvblwiIDogZWxlbS52YWx1ZTtcclxuXHRcdH07XHJcblx0fVxyXG59ICk7XHJcblxyXG5cclxuXHJcblxyXG4vLyBSZXR1cm4galF1ZXJ5IGZvciBhdHRyaWJ1dGVzLW9ubHkgaW5jbHVzaW9uXHJcblxyXG5cclxudmFyIHJmb2N1c01vcnBoID0gL14oPzpmb2N1c2luZm9jdXN8Zm9jdXNvdXRibHVyKSQvO1xyXG5cclxualF1ZXJ5LmV4dGVuZCggalF1ZXJ5LmV2ZW50LCB7XHJcblxyXG5cdHRyaWdnZXI6IGZ1bmN0aW9uKCBldmVudCwgZGF0YSwgZWxlbSwgb25seUhhbmRsZXJzICkge1xyXG5cclxuXHRcdHZhciBpLCBjdXIsIHRtcCwgYnViYmxlVHlwZSwgb250eXBlLCBoYW5kbGUsIHNwZWNpYWwsXHJcblx0XHRcdGV2ZW50UGF0aCA9IFsgZWxlbSB8fCBkb2N1bWVudCBdLFxyXG5cdFx0XHR0eXBlID0gaGFzT3duLmNhbGwoIGV2ZW50LCBcInR5cGVcIiApID8gZXZlbnQudHlwZSA6IGV2ZW50LFxyXG5cdFx0XHRuYW1lc3BhY2VzID0gaGFzT3duLmNhbGwoIGV2ZW50LCBcIm5hbWVzcGFjZVwiICkgPyBldmVudC5uYW1lc3BhY2Uuc3BsaXQoIFwiLlwiICkgOiBbXTtcclxuXHJcblx0XHRjdXIgPSB0bXAgPSBlbGVtID0gZWxlbSB8fCBkb2N1bWVudDtcclxuXHJcblx0XHQvLyBEb24ndCBkbyBldmVudHMgb24gdGV4dCBhbmQgY29tbWVudCBub2Rlc1xyXG5cdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAzIHx8IGVsZW0ubm9kZVR5cGUgPT09IDggKSB7XHJcblx0XHRcdHJldHVybjtcclxuXHRcdH1cclxuXHJcblx0XHQvLyBmb2N1cy9ibHVyIG1vcnBocyB0byBmb2N1c2luL291dDsgZW5zdXJlIHdlJ3JlIG5vdCBmaXJpbmcgdGhlbSByaWdodCBub3dcclxuXHRcdGlmICggcmZvY3VzTW9ycGgudGVzdCggdHlwZSArIGpRdWVyeS5ldmVudC50cmlnZ2VyZWQgKSApIHtcclxuXHRcdFx0cmV0dXJuO1xyXG5cdFx0fVxyXG5cclxuXHRcdGlmICggdHlwZS5pbmRleE9mKCBcIi5cIiApID4gLTEgKSB7XHJcblxyXG5cdFx0XHQvLyBOYW1lc3BhY2VkIHRyaWdnZXI7IGNyZWF0ZSBhIHJlZ2V4cCB0byBtYXRjaCBldmVudCB0eXBlIGluIGhhbmRsZSgpXHJcblx0XHRcdG5hbWVzcGFjZXMgPSB0eXBlLnNwbGl0KCBcIi5cIiApO1xyXG5cdFx0XHR0eXBlID0gbmFtZXNwYWNlcy5zaGlmdCgpO1xyXG5cdFx0XHRuYW1lc3BhY2VzLnNvcnQoKTtcclxuXHRcdH1cclxuXHRcdG9udHlwZSA9IHR5cGUuaW5kZXhPZiggXCI6XCIgKSA8IDAgJiYgXCJvblwiICsgdHlwZTtcclxuXHJcblx0XHQvLyBDYWxsZXIgY2FuIHBhc3MgaW4gYSBqUXVlcnkuRXZlbnQgb2JqZWN0LCBPYmplY3QsIG9yIGp1c3QgYW4gZXZlbnQgdHlwZSBzdHJpbmdcclxuXHRcdGV2ZW50ID0gZXZlbnRbIGpRdWVyeS5leHBhbmRvIF0gP1xyXG5cdFx0XHRldmVudCA6XHJcblx0XHRcdG5ldyBqUXVlcnkuRXZlbnQoIHR5cGUsIHR5cGVvZiBldmVudCA9PT0gXCJvYmplY3RcIiAmJiBldmVudCApO1xyXG5cclxuXHRcdC8vIFRyaWdnZXIgYml0bWFzazogJiAxIGZvciBuYXRpdmUgaGFuZGxlcnM7ICYgMiBmb3IgalF1ZXJ5IChhbHdheXMgdHJ1ZSlcclxuXHRcdGV2ZW50LmlzVHJpZ2dlciA9IG9ubHlIYW5kbGVycyA/IDIgOiAzO1xyXG5cdFx0ZXZlbnQubmFtZXNwYWNlID0gbmFtZXNwYWNlcy5qb2luKCBcIi5cIiApO1xyXG5cdFx0ZXZlbnQucm5hbWVzcGFjZSA9IGV2ZW50Lm5hbWVzcGFjZSA/XHJcblx0XHRcdG5ldyBSZWdFeHAoIFwiKF58XFxcXC4pXCIgKyBuYW1lc3BhY2VzLmpvaW4oIFwiXFxcXC4oPzouKlxcXFwufClcIiApICsgXCIoXFxcXC58JClcIiApIDpcclxuXHRcdFx0bnVsbDtcclxuXHJcblx0XHQvLyBDbGVhbiB1cCB0aGUgZXZlbnQgaW4gY2FzZSBpdCBpcyBiZWluZyByZXVzZWRcclxuXHRcdGV2ZW50LnJlc3VsdCA9IHVuZGVmaW5lZDtcclxuXHRcdGlmICggIWV2ZW50LnRhcmdldCApIHtcclxuXHRcdFx0ZXZlbnQudGFyZ2V0ID0gZWxlbTtcclxuXHRcdH1cclxuXHJcblx0XHQvLyBDbG9uZSBhbnkgaW5jb21pbmcgZGF0YSBhbmQgcHJlcGVuZCB0aGUgZXZlbnQsIGNyZWF0aW5nIHRoZSBoYW5kbGVyIGFyZyBsaXN0XHJcblx0XHRkYXRhID0gZGF0YSA9PSBudWxsID9cclxuXHRcdFx0WyBldmVudCBdIDpcclxuXHRcdFx0alF1ZXJ5Lm1ha2VBcnJheSggZGF0YSwgWyBldmVudCBdICk7XHJcblxyXG5cdFx0Ly8gQWxsb3cgc3BlY2lhbCBldmVudHMgdG8gZHJhdyBvdXRzaWRlIHRoZSBsaW5lc1xyXG5cdFx0c3BlY2lhbCA9IGpRdWVyeS5ldmVudC5zcGVjaWFsWyB0eXBlIF0gfHwge307XHJcblx0XHRpZiAoICFvbmx5SGFuZGxlcnMgJiYgc3BlY2lhbC50cmlnZ2VyICYmIHNwZWNpYWwudHJpZ2dlci5hcHBseSggZWxlbSwgZGF0YSApID09PSBmYWxzZSApIHtcclxuXHRcdFx0cmV0dXJuO1xyXG5cdFx0fVxyXG5cclxuXHRcdC8vIERldGVybWluZSBldmVudCBwcm9wYWdhdGlvbiBwYXRoIGluIGFkdmFuY2UsIHBlciBXM0MgZXZlbnRzIHNwZWMgKCM5OTUxKVxyXG5cdFx0Ly8gQnViYmxlIHVwIHRvIGRvY3VtZW50LCB0aGVuIHRvIHdpbmRvdzsgd2F0Y2ggZm9yIGEgZ2xvYmFsIG93bmVyRG9jdW1lbnQgdmFyICgjOTcyNClcclxuXHRcdGlmICggIW9ubHlIYW5kbGVycyAmJiAhc3BlY2lhbC5ub0J1YmJsZSAmJiAhalF1ZXJ5LmlzV2luZG93KCBlbGVtICkgKSB7XHJcblxyXG5cdFx0XHRidWJibGVUeXBlID0gc3BlY2lhbC5kZWxlZ2F0ZVR5cGUgfHwgdHlwZTtcclxuXHRcdFx0aWYgKCAhcmZvY3VzTW9ycGgudGVzdCggYnViYmxlVHlwZSArIHR5cGUgKSApIHtcclxuXHRcdFx0XHRjdXIgPSBjdXIucGFyZW50Tm9kZTtcclxuXHRcdFx0fVxyXG5cdFx0XHRmb3IgKCA7IGN1cjsgY3VyID0gY3VyLnBhcmVudE5vZGUgKSB7XHJcblx0XHRcdFx0ZXZlbnRQYXRoLnB1c2goIGN1ciApO1xyXG5cdFx0XHRcdHRtcCA9IGN1cjtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0Ly8gT25seSBhZGQgd2luZG93IGlmIHdlIGdvdCB0byBkb2N1bWVudCAoZS5nLiwgbm90IHBsYWluIG9iaiBvciBkZXRhY2hlZCBET00pXHJcblx0XHRcdGlmICggdG1wID09PSAoIGVsZW0ub3duZXJEb2N1bWVudCB8fCBkb2N1bWVudCApICkge1xyXG5cdFx0XHRcdGV2ZW50UGF0aC5wdXNoKCB0bXAuZGVmYXVsdFZpZXcgfHwgdG1wLnBhcmVudFdpbmRvdyB8fCB3aW5kb3cgKTtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cclxuXHRcdC8vIEZpcmUgaGFuZGxlcnMgb24gdGhlIGV2ZW50IHBhdGhcclxuXHRcdGkgPSAwO1xyXG5cdFx0d2hpbGUgKCAoIGN1ciA9IGV2ZW50UGF0aFsgaSsrIF0gKSAmJiAhZXZlbnQuaXNQcm9wYWdhdGlvblN0b3BwZWQoKSApIHtcclxuXHJcblx0XHRcdGV2ZW50LnR5cGUgPSBpID4gMSA/XHJcblx0XHRcdFx0YnViYmxlVHlwZSA6XHJcblx0XHRcdFx0c3BlY2lhbC5iaW5kVHlwZSB8fCB0eXBlO1xyXG5cclxuXHRcdFx0Ly8galF1ZXJ5IGhhbmRsZXJcclxuXHRcdFx0aGFuZGxlID0gKCBkYXRhUHJpdi5nZXQoIGN1ciwgXCJldmVudHNcIiApIHx8IHt9IClbIGV2ZW50LnR5cGUgXSAmJlxyXG5cdFx0XHRcdGRhdGFQcml2LmdldCggY3VyLCBcImhhbmRsZVwiICk7XHJcblx0XHRcdGlmICggaGFuZGxlICkge1xyXG5cdFx0XHRcdGhhbmRsZS5hcHBseSggY3VyLCBkYXRhICk7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdC8vIE5hdGl2ZSBoYW5kbGVyXHJcblx0XHRcdGhhbmRsZSA9IG9udHlwZSAmJiBjdXJbIG9udHlwZSBdO1xyXG5cdFx0XHRpZiAoIGhhbmRsZSAmJiBoYW5kbGUuYXBwbHkgJiYgYWNjZXB0RGF0YSggY3VyICkgKSB7XHJcblx0XHRcdFx0ZXZlbnQucmVzdWx0ID0gaGFuZGxlLmFwcGx5KCBjdXIsIGRhdGEgKTtcclxuXHRcdFx0XHRpZiAoIGV2ZW50LnJlc3VsdCA9PT0gZmFsc2UgKSB7XHJcblx0XHRcdFx0XHRldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdFx0ZXZlbnQudHlwZSA9IHR5cGU7XHJcblxyXG5cdFx0Ly8gSWYgbm9ib2R5IHByZXZlbnRlZCB0aGUgZGVmYXVsdCBhY3Rpb24sIGRvIGl0IG5vd1xyXG5cdFx0aWYgKCAhb25seUhhbmRsZXJzICYmICFldmVudC5pc0RlZmF1bHRQcmV2ZW50ZWQoKSApIHtcclxuXHJcblx0XHRcdGlmICggKCAhc3BlY2lhbC5fZGVmYXVsdCB8fFxyXG5cdFx0XHRcdHNwZWNpYWwuX2RlZmF1bHQuYXBwbHkoIGV2ZW50UGF0aC5wb3AoKSwgZGF0YSApID09PSBmYWxzZSApICYmXHJcblx0XHRcdFx0YWNjZXB0RGF0YSggZWxlbSApICkge1xyXG5cclxuXHRcdFx0XHQvLyBDYWxsIGEgbmF0aXZlIERPTSBtZXRob2Qgb24gdGhlIHRhcmdldCB3aXRoIHRoZSBzYW1lIG5hbWUgbmFtZSBhcyB0aGUgZXZlbnQuXHJcblx0XHRcdFx0Ly8gRG9uJ3QgZG8gZGVmYXVsdCBhY3Rpb25zIG9uIHdpbmRvdywgdGhhdCdzIHdoZXJlIGdsb2JhbCB2YXJpYWJsZXMgYmUgKCM2MTcwKVxyXG5cdFx0XHRcdGlmICggb250eXBlICYmIGpRdWVyeS5pc0Z1bmN0aW9uKCBlbGVtWyB0eXBlIF0gKSAmJiAhalF1ZXJ5LmlzV2luZG93KCBlbGVtICkgKSB7XHJcblxyXG5cdFx0XHRcdFx0Ly8gRG9uJ3QgcmUtdHJpZ2dlciBhbiBvbkZPTyBldmVudCB3aGVuIHdlIGNhbGwgaXRzIEZPTygpIG1ldGhvZFxyXG5cdFx0XHRcdFx0dG1wID0gZWxlbVsgb250eXBlIF07XHJcblxyXG5cdFx0XHRcdFx0aWYgKCB0bXAgKSB7XHJcblx0XHRcdFx0XHRcdGVsZW1bIG9udHlwZSBdID0gbnVsbDtcclxuXHRcdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0XHQvLyBQcmV2ZW50IHJlLXRyaWdnZXJpbmcgb2YgdGhlIHNhbWUgZXZlbnQsIHNpbmNlIHdlIGFscmVhZHkgYnViYmxlZCBpdCBhYm92ZVxyXG5cdFx0XHRcdFx0alF1ZXJ5LmV2ZW50LnRyaWdnZXJlZCA9IHR5cGU7XHJcblx0XHRcdFx0XHRlbGVtWyB0eXBlIF0oKTtcclxuXHRcdFx0XHRcdGpRdWVyeS5ldmVudC50cmlnZ2VyZWQgPSB1bmRlZmluZWQ7XHJcblxyXG5cdFx0XHRcdFx0aWYgKCB0bXAgKSB7XHJcblx0XHRcdFx0XHRcdGVsZW1bIG9udHlwZSBdID0gdG1wO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiBldmVudC5yZXN1bHQ7XHJcblx0fSxcclxuXHJcblx0Ly8gUGlnZ3liYWNrIG9uIGEgZG9ub3IgZXZlbnQgdG8gc2ltdWxhdGUgYSBkaWZmZXJlbnQgb25lXHJcblx0c2ltdWxhdGU6IGZ1bmN0aW9uKCB0eXBlLCBlbGVtLCBldmVudCApIHtcclxuXHRcdHZhciBlID0galF1ZXJ5LmV4dGVuZChcclxuXHRcdFx0bmV3IGpRdWVyeS5FdmVudCgpLFxyXG5cdFx0XHRldmVudCxcclxuXHRcdFx0e1xyXG5cdFx0XHRcdHR5cGU6IHR5cGUsXHJcblx0XHRcdFx0aXNTaW11bGF0ZWQ6IHRydWVcclxuXHJcblx0XHRcdFx0Ly8gUHJldmlvdXNseSwgYG9yaWdpbmFsRXZlbnQ6IHt9YCB3YXMgc2V0IGhlcmUsIHNvIHN0b3BQcm9wYWdhdGlvbiBjYWxsXHJcblx0XHRcdFx0Ly8gd291bGQgbm90IGJlIHRyaWdnZXJlZCBvbiBkb25vciBldmVudCwgc2luY2UgaW4gb3VyIG93blxyXG5cdFx0XHRcdC8vIGpRdWVyeS5ldmVudC5zdG9wUHJvcGFnYXRpb24gZnVuY3Rpb24gd2UgaGFkIGEgY2hlY2sgZm9yIGV4aXN0ZW5jZSBvZlxyXG5cdFx0XHRcdC8vIG9yaWdpbmFsRXZlbnQuc3RvcFByb3BhZ2F0aW9uIG1ldGhvZCwgc28sIGNvbnNlcXVlbnRseSBpdCB3b3VsZCBiZSBhIG5vb3AuXHJcblx0XHRcdFx0Ly9cclxuXHRcdFx0XHQvLyBCdXQgbm93LCB0aGlzIFwic2ltdWxhdGVcIiBmdW5jdGlvbiBpcyB1c2VkIG9ubHkgZm9yIGV2ZW50c1xyXG5cdFx0XHRcdC8vIGZvciB3aGljaCBzdG9wUHJvcGFnYXRpb24oKSBpcyBub29wLCBzbyB0aGVyZSBpcyBubyBuZWVkIGZvciB0aGF0IGFueW1vcmUuXHJcblx0XHRcdFx0Ly9cclxuXHRcdFx0XHQvLyBGb3IgdGhlIDEueCBicmFuY2ggdGhvdWdoLCBndWFyZCBmb3IgXCJjbGlja1wiIGFuZCBcInN1Ym1pdFwiXHJcblx0XHRcdFx0Ly8gZXZlbnRzIGlzIHN0aWxsIHVzZWQsIGJ1dCB3YXMgbW92ZWQgdG8galF1ZXJ5LmV2ZW50LnN0b3BQcm9wYWdhdGlvbiBmdW5jdGlvblxyXG5cdFx0XHRcdC8vIGJlY2F1c2UgYG9yaWdpbmFsRXZlbnRgIHNob3VsZCBwb2ludCB0byB0aGUgb3JpZ2luYWwgZXZlbnQgZm9yIHRoZSBjb25zdGFuY3lcclxuXHRcdFx0XHQvLyB3aXRoIG90aGVyIGV2ZW50cyBhbmQgZm9yIG1vcmUgZm9jdXNlZCBsb2dpY1xyXG5cdFx0XHR9XHJcblx0XHQpO1xyXG5cclxuXHRcdGpRdWVyeS5ldmVudC50cmlnZ2VyKCBlLCBudWxsLCBlbGVtICk7XHJcblxyXG5cdFx0aWYgKCBlLmlzRGVmYXVsdFByZXZlbnRlZCgpICkge1xyXG5cdFx0XHRldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xyXG5cdFx0fVxyXG5cdH1cclxuXHJcbn0gKTtcclxuXHJcbmpRdWVyeS5mbi5leHRlbmQoIHtcclxuXHJcblx0dHJpZ2dlcjogZnVuY3Rpb24oIHR5cGUsIGRhdGEgKSB7XHJcblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcclxuXHRcdFx0alF1ZXJ5LmV2ZW50LnRyaWdnZXIoIHR5cGUsIGRhdGEsIHRoaXMgKTtcclxuXHRcdH0gKTtcclxuXHR9LFxyXG5cdHRyaWdnZXJIYW5kbGVyOiBmdW5jdGlvbiggdHlwZSwgZGF0YSApIHtcclxuXHRcdHZhciBlbGVtID0gdGhpc1sgMCBdO1xyXG5cdFx0aWYgKCBlbGVtICkge1xyXG5cdFx0XHRyZXR1cm4galF1ZXJ5LmV2ZW50LnRyaWdnZXIoIHR5cGUsIGRhdGEsIGVsZW0sIHRydWUgKTtcclxuXHRcdH1cclxuXHR9XHJcbn0gKTtcclxuXHJcblxyXG5qUXVlcnkuZWFjaCggKCBcImJsdXIgZm9jdXMgZm9jdXNpbiBmb2N1c291dCBsb2FkIHJlc2l6ZSBzY3JvbGwgdW5sb2FkIGNsaWNrIGRibGNsaWNrIFwiICtcclxuXHRcIm1vdXNlZG93biBtb3VzZXVwIG1vdXNlbW92ZSBtb3VzZW92ZXIgbW91c2VvdXQgbW91c2VlbnRlciBtb3VzZWxlYXZlIFwiICtcclxuXHRcImNoYW5nZSBzZWxlY3Qgc3VibWl0IGtleWRvd24ga2V5cHJlc3Mga2V5dXAgZXJyb3IgY29udGV4dG1lbnVcIiApLnNwbGl0KCBcIiBcIiApLFxyXG5cdGZ1bmN0aW9uKCBpLCBuYW1lICkge1xyXG5cclxuXHQvLyBIYW5kbGUgZXZlbnQgYmluZGluZ1xyXG5cdGpRdWVyeS5mblsgbmFtZSBdID0gZnVuY3Rpb24oIGRhdGEsIGZuICkge1xyXG5cdFx0cmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPiAwID9cclxuXHRcdFx0dGhpcy5vbiggbmFtZSwgbnVsbCwgZGF0YSwgZm4gKSA6XHJcblx0XHRcdHRoaXMudHJpZ2dlciggbmFtZSApO1xyXG5cdH07XHJcbn0gKTtcclxuXHJcbmpRdWVyeS5mbi5leHRlbmQoIHtcclxuXHRob3ZlcjogZnVuY3Rpb24oIGZuT3ZlciwgZm5PdXQgKSB7XHJcblx0XHRyZXR1cm4gdGhpcy5tb3VzZWVudGVyKCBmbk92ZXIgKS5tb3VzZWxlYXZlKCBmbk91dCB8fCBmbk92ZXIgKTtcclxuXHR9XHJcbn0gKTtcclxuXHJcblxyXG5cclxuXHJcbnN1cHBvcnQuZm9jdXNpbiA9IFwib25mb2N1c2luXCIgaW4gd2luZG93O1xyXG5cclxuXHJcbi8vIFN1cHBvcnQ6IEZpcmVmb3hcclxuLy8gRmlyZWZveCBkb2Vzbid0IGhhdmUgZm9jdXMoaW4gfCBvdXQpIGV2ZW50c1xyXG4vLyBSZWxhdGVkIHRpY2tldCAtIGh0dHBzOi8vYnVnemlsbGEubW96aWxsYS5vcmcvc2hvd19idWcuY2dpP2lkPTY4Nzc4N1xyXG4vL1xyXG4vLyBTdXBwb3J0OiBDaHJvbWUsIFNhZmFyaVxyXG4vLyBmb2N1cyhpbiB8IG91dCkgZXZlbnRzIGZpcmUgYWZ0ZXIgZm9jdXMgJiBibHVyIGV2ZW50cyxcclxuLy8gd2hpY2ggaXMgc3BlYyB2aW9sYXRpb24gLSBodHRwOi8vd3d3LnczLm9yZy9UUi9ET00tTGV2ZWwtMy1FdmVudHMvI2V2ZW50cy1mb2N1c2V2ZW50LWV2ZW50LW9yZGVyXHJcbi8vIFJlbGF0ZWQgdGlja2V0IC0gaHR0cHM6Ly9jb2RlLmdvb2dsZS5jb20vcC9jaHJvbWl1bS9pc3N1ZXMvZGV0YWlsP2lkPTQ0OTg1N1xyXG5pZiAoICFzdXBwb3J0LmZvY3VzaW4gKSB7XHJcblx0alF1ZXJ5LmVhY2goIHsgZm9jdXM6IFwiZm9jdXNpblwiLCBibHVyOiBcImZvY3Vzb3V0XCIgfSwgZnVuY3Rpb24oIG9yaWcsIGZpeCApIHtcclxuXHJcblx0XHQvLyBBdHRhY2ggYSBzaW5nbGUgY2FwdHVyaW5nIGhhbmRsZXIgb24gdGhlIGRvY3VtZW50IHdoaWxlIHNvbWVvbmUgd2FudHMgZm9jdXNpbi9mb2N1c291dFxyXG5cdFx0dmFyIGhhbmRsZXIgPSBmdW5jdGlvbiggZXZlbnQgKSB7XHJcblx0XHRcdGpRdWVyeS5ldmVudC5zaW11bGF0ZSggZml4LCBldmVudC50YXJnZXQsIGpRdWVyeS5ldmVudC5maXgoIGV2ZW50ICkgKTtcclxuXHRcdH07XHJcblxyXG5cdFx0alF1ZXJ5LmV2ZW50LnNwZWNpYWxbIGZpeCBdID0ge1xyXG5cdFx0XHRzZXR1cDogZnVuY3Rpb24oKSB7XHJcblx0XHRcdFx0dmFyIGRvYyA9IHRoaXMub3duZXJEb2N1bWVudCB8fCB0aGlzLFxyXG5cdFx0XHRcdFx0YXR0YWNoZXMgPSBkYXRhUHJpdi5hY2Nlc3MoIGRvYywgZml4ICk7XHJcblxyXG5cdFx0XHRcdGlmICggIWF0dGFjaGVzICkge1xyXG5cdFx0XHRcdFx0ZG9jLmFkZEV2ZW50TGlzdGVuZXIoIG9yaWcsIGhhbmRsZXIsIHRydWUgKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdFx0ZGF0YVByaXYuYWNjZXNzKCBkb2MsIGZpeCwgKCBhdHRhY2hlcyB8fCAwICkgKyAxICk7XHJcblx0XHRcdH0sXHJcblx0XHRcdHRlYXJkb3duOiBmdW5jdGlvbigpIHtcclxuXHRcdFx0XHR2YXIgZG9jID0gdGhpcy5vd25lckRvY3VtZW50IHx8IHRoaXMsXHJcblx0XHRcdFx0XHRhdHRhY2hlcyA9IGRhdGFQcml2LmFjY2VzcyggZG9jLCBmaXggKSAtIDE7XHJcblxyXG5cdFx0XHRcdGlmICggIWF0dGFjaGVzICkge1xyXG5cdFx0XHRcdFx0ZG9jLnJlbW92ZUV2ZW50TGlzdGVuZXIoIG9yaWcsIGhhbmRsZXIsIHRydWUgKTtcclxuXHRcdFx0XHRcdGRhdGFQcml2LnJlbW92ZSggZG9jLCBmaXggKTtcclxuXHJcblx0XHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRcdGRhdGFQcml2LmFjY2VzcyggZG9jLCBmaXgsIGF0dGFjaGVzICk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHR9O1xyXG5cdH0gKTtcclxufVxyXG52YXIgbG9jYXRpb24gPSB3aW5kb3cubG9jYXRpb247XHJcblxyXG52YXIgbm9uY2UgPSBqUXVlcnkubm93KCk7XHJcblxyXG52YXIgcnF1ZXJ5ID0gKCAvXFw/LyApO1xyXG5cclxuXHJcblxyXG4vLyBTdXBwb3J0OiBBbmRyb2lkIDIuM1xyXG4vLyBXb3JrYXJvdW5kIGZhaWx1cmUgdG8gc3RyaW5nLWNhc3QgbnVsbCBpbnB1dFxyXG5qUXVlcnkucGFyc2VKU09OID0gZnVuY3Rpb24oIGRhdGEgKSB7XHJcblx0cmV0dXJuIEpTT04ucGFyc2UoIGRhdGEgKyBcIlwiICk7XHJcbn07XHJcblxyXG5cclxuLy8gQ3Jvc3MtYnJvd3NlciB4bWwgcGFyc2luZ1xyXG5qUXVlcnkucGFyc2VYTUwgPSBmdW5jdGlvbiggZGF0YSApIHtcclxuXHR2YXIgeG1sO1xyXG5cdGlmICggIWRhdGEgfHwgdHlwZW9mIGRhdGEgIT09IFwic3RyaW5nXCIgKSB7XHJcblx0XHRyZXR1cm4gbnVsbDtcclxuXHR9XHJcblxyXG5cdC8vIFN1cHBvcnQ6IElFOVxyXG5cdHRyeSB7XHJcblx0XHR4bWwgPSAoIG5ldyB3aW5kb3cuRE9NUGFyc2VyKCkgKS5wYXJzZUZyb21TdHJpbmcoIGRhdGEsIFwidGV4dC94bWxcIiApO1xyXG5cdH0gY2F0Y2ggKCBlICkge1xyXG5cdFx0eG1sID0gdW5kZWZpbmVkO1xyXG5cdH1cclxuXHJcblx0aWYgKCAheG1sIHx8IHhtbC5nZXRFbGVtZW50c0J5VGFnTmFtZSggXCJwYXJzZXJlcnJvclwiICkubGVuZ3RoICkge1xyXG5cdFx0alF1ZXJ5LmVycm9yKCBcIkludmFsaWQgWE1MOiBcIiArIGRhdGEgKTtcclxuXHR9XHJcblx0cmV0dXJuIHhtbDtcclxufTtcclxuXHJcblxyXG52YXJcclxuXHRyaGFzaCA9IC8jLiokLyxcclxuXHRydHMgPSAvKFs/Jl0pXz1bXiZdKi8sXHJcblx0cmhlYWRlcnMgPSAvXiguKj8pOlsgXFx0XSooW15cXHJcXG5dKikkL21nLFxyXG5cclxuXHQvLyAjNzY1MywgIzgxMjUsICM4MTUyOiBsb2NhbCBwcm90b2NvbCBkZXRlY3Rpb25cclxuXHRybG9jYWxQcm90b2NvbCA9IC9eKD86YWJvdXR8YXBwfGFwcC1zdG9yYWdlfC4rLWV4dGVuc2lvbnxmaWxlfHJlc3x3aWRnZXQpOiQvLFxyXG5cdHJub0NvbnRlbnQgPSAvXig/OkdFVHxIRUFEKSQvLFxyXG5cdHJwcm90b2NvbCA9IC9eXFwvXFwvLyxcclxuXHJcblx0LyogUHJlZmlsdGVyc1xyXG5cdCAqIDEpIFRoZXkgYXJlIHVzZWZ1bCB0byBpbnRyb2R1Y2UgY3VzdG9tIGRhdGFUeXBlcyAoc2VlIGFqYXgvanNvbnAuanMgZm9yIGFuIGV4YW1wbGUpXHJcblx0ICogMikgVGhlc2UgYXJlIGNhbGxlZDpcclxuXHQgKiAgICAtIEJFRk9SRSBhc2tpbmcgZm9yIGEgdHJhbnNwb3J0XHJcblx0ICogICAgLSBBRlRFUiBwYXJhbSBzZXJpYWxpemF0aW9uIChzLmRhdGEgaXMgYSBzdHJpbmcgaWYgcy5wcm9jZXNzRGF0YSBpcyB0cnVlKVxyXG5cdCAqIDMpIGtleSBpcyB0aGUgZGF0YVR5cGVcclxuXHQgKiA0KSB0aGUgY2F0Y2hhbGwgc3ltYm9sIFwiKlwiIGNhbiBiZSB1c2VkXHJcblx0ICogNSkgZXhlY3V0aW9uIHdpbGwgc3RhcnQgd2l0aCB0cmFuc3BvcnQgZGF0YVR5cGUgYW5kIFRIRU4gY29udGludWUgZG93biB0byBcIipcIiBpZiBuZWVkZWRcclxuXHQgKi9cclxuXHRwcmVmaWx0ZXJzID0ge30sXHJcblxyXG5cdC8qIFRyYW5zcG9ydHMgYmluZGluZ3NcclxuXHQgKiAxKSBrZXkgaXMgdGhlIGRhdGFUeXBlXHJcblx0ICogMikgdGhlIGNhdGNoYWxsIHN5bWJvbCBcIipcIiBjYW4gYmUgdXNlZFxyXG5cdCAqIDMpIHNlbGVjdGlvbiB3aWxsIHN0YXJ0IHdpdGggdHJhbnNwb3J0IGRhdGFUeXBlIGFuZCBUSEVOIGdvIHRvIFwiKlwiIGlmIG5lZWRlZFxyXG5cdCAqL1xyXG5cdHRyYW5zcG9ydHMgPSB7fSxcclxuXHJcblx0Ly8gQXZvaWQgY29tbWVudC1wcm9sb2cgY2hhciBzZXF1ZW5jZSAoIzEwMDk4KTsgbXVzdCBhcHBlYXNlIGxpbnQgYW5kIGV2YWRlIGNvbXByZXNzaW9uXHJcblx0YWxsVHlwZXMgPSBcIiovXCIuY29uY2F0KCBcIipcIiApLFxyXG5cclxuXHQvLyBBbmNob3IgdGFnIGZvciBwYXJzaW5nIHRoZSBkb2N1bWVudCBvcmlnaW5cclxuXHRvcmlnaW5BbmNob3IgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImFcIiApO1xyXG5cdG9yaWdpbkFuY2hvci5ocmVmID0gbG9jYXRpb24uaHJlZjtcclxuXHJcbi8vIEJhc2UgXCJjb25zdHJ1Y3RvclwiIGZvciBqUXVlcnkuYWpheFByZWZpbHRlciBhbmQgalF1ZXJ5LmFqYXhUcmFuc3BvcnRcclxuZnVuY3Rpb24gYWRkVG9QcmVmaWx0ZXJzT3JUcmFuc3BvcnRzKCBzdHJ1Y3R1cmUgKSB7XHJcblxyXG5cdC8vIGRhdGFUeXBlRXhwcmVzc2lvbiBpcyBvcHRpb25hbCBhbmQgZGVmYXVsdHMgdG8gXCIqXCJcclxuXHRyZXR1cm4gZnVuY3Rpb24oIGRhdGFUeXBlRXhwcmVzc2lvbiwgZnVuYyApIHtcclxuXHJcblx0XHRpZiAoIHR5cGVvZiBkYXRhVHlwZUV4cHJlc3Npb24gIT09IFwic3RyaW5nXCIgKSB7XHJcblx0XHRcdGZ1bmMgPSBkYXRhVHlwZUV4cHJlc3Npb247XHJcblx0XHRcdGRhdGFUeXBlRXhwcmVzc2lvbiA9IFwiKlwiO1xyXG5cdFx0fVxyXG5cclxuXHRcdHZhciBkYXRhVHlwZSxcclxuXHRcdFx0aSA9IDAsXHJcblx0XHRcdGRhdGFUeXBlcyA9IGRhdGFUeXBlRXhwcmVzc2lvbi50b0xvd2VyQ2FzZSgpLm1hdGNoKCBybm90d2hpdGUgKSB8fCBbXTtcclxuXHJcblx0XHRpZiAoIGpRdWVyeS5pc0Z1bmN0aW9uKCBmdW5jICkgKSB7XHJcblxyXG5cdFx0XHQvLyBGb3IgZWFjaCBkYXRhVHlwZSBpbiB0aGUgZGF0YVR5cGVFeHByZXNzaW9uXHJcblx0XHRcdHdoaWxlICggKCBkYXRhVHlwZSA9IGRhdGFUeXBlc1sgaSsrIF0gKSApIHtcclxuXHJcblx0XHRcdFx0Ly8gUHJlcGVuZCBpZiByZXF1ZXN0ZWRcclxuXHRcdFx0XHRpZiAoIGRhdGFUeXBlWyAwIF0gPT09IFwiK1wiICkge1xyXG5cdFx0XHRcdFx0ZGF0YVR5cGUgPSBkYXRhVHlwZS5zbGljZSggMSApIHx8IFwiKlwiO1xyXG5cdFx0XHRcdFx0KCBzdHJ1Y3R1cmVbIGRhdGFUeXBlIF0gPSBzdHJ1Y3R1cmVbIGRhdGFUeXBlIF0gfHwgW10gKS51bnNoaWZ0KCBmdW5jICk7XHJcblxyXG5cdFx0XHRcdC8vIE90aGVyd2lzZSBhcHBlbmRcclxuXHRcdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdFx0KCBzdHJ1Y3R1cmVbIGRhdGFUeXBlIF0gPSBzdHJ1Y3R1cmVbIGRhdGFUeXBlIF0gfHwgW10gKS5wdXNoKCBmdW5jICk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0fTtcclxufVxyXG5cclxuLy8gQmFzZSBpbnNwZWN0aW9uIGZ1bmN0aW9uIGZvciBwcmVmaWx0ZXJzIGFuZCB0cmFuc3BvcnRzXHJcbmZ1bmN0aW9uIGluc3BlY3RQcmVmaWx0ZXJzT3JUcmFuc3BvcnRzKCBzdHJ1Y3R1cmUsIG9wdGlvbnMsIG9yaWdpbmFsT3B0aW9ucywganFYSFIgKSB7XHJcblxyXG5cdHZhciBpbnNwZWN0ZWQgPSB7fSxcclxuXHRcdHNlZWtpbmdUcmFuc3BvcnQgPSAoIHN0cnVjdHVyZSA9PT0gdHJhbnNwb3J0cyApO1xyXG5cclxuXHRmdW5jdGlvbiBpbnNwZWN0KCBkYXRhVHlwZSApIHtcclxuXHRcdHZhciBzZWxlY3RlZDtcclxuXHRcdGluc3BlY3RlZFsgZGF0YVR5cGUgXSA9IHRydWU7XHJcblx0XHRqUXVlcnkuZWFjaCggc3RydWN0dXJlWyBkYXRhVHlwZSBdIHx8IFtdLCBmdW5jdGlvbiggXywgcHJlZmlsdGVyT3JGYWN0b3J5ICkge1xyXG5cdFx0XHR2YXIgZGF0YVR5cGVPclRyYW5zcG9ydCA9IHByZWZpbHRlck9yRmFjdG9yeSggb3B0aW9ucywgb3JpZ2luYWxPcHRpb25zLCBqcVhIUiApO1xyXG5cdFx0XHRpZiAoIHR5cGVvZiBkYXRhVHlwZU9yVHJhbnNwb3J0ID09PSBcInN0cmluZ1wiICYmXHJcblx0XHRcdFx0IXNlZWtpbmdUcmFuc3BvcnQgJiYgIWluc3BlY3RlZFsgZGF0YVR5cGVPclRyYW5zcG9ydCBdICkge1xyXG5cclxuXHRcdFx0XHRvcHRpb25zLmRhdGFUeXBlcy51bnNoaWZ0KCBkYXRhVHlwZU9yVHJhbnNwb3J0ICk7XHJcblx0XHRcdFx0aW5zcGVjdCggZGF0YVR5cGVPclRyYW5zcG9ydCApO1xyXG5cdFx0XHRcdHJldHVybiBmYWxzZTtcclxuXHRcdFx0fSBlbHNlIGlmICggc2Vla2luZ1RyYW5zcG9ydCApIHtcclxuXHRcdFx0XHRyZXR1cm4gISggc2VsZWN0ZWQgPSBkYXRhVHlwZU9yVHJhbnNwb3J0ICk7XHJcblx0XHRcdH1cclxuXHRcdH0gKTtcclxuXHRcdHJldHVybiBzZWxlY3RlZDtcclxuXHR9XHJcblxyXG5cdHJldHVybiBpbnNwZWN0KCBvcHRpb25zLmRhdGFUeXBlc1sgMCBdICkgfHwgIWluc3BlY3RlZFsgXCIqXCIgXSAmJiBpbnNwZWN0KCBcIipcIiApO1xyXG59XHJcblxyXG4vLyBBIHNwZWNpYWwgZXh0ZW5kIGZvciBhamF4IG9wdGlvbnNcclxuLy8gdGhhdCB0YWtlcyBcImZsYXRcIiBvcHRpb25zIChub3QgdG8gYmUgZGVlcCBleHRlbmRlZClcclxuLy8gRml4ZXMgIzk4ODdcclxuZnVuY3Rpb24gYWpheEV4dGVuZCggdGFyZ2V0LCBzcmMgKSB7XHJcblx0dmFyIGtleSwgZGVlcCxcclxuXHRcdGZsYXRPcHRpb25zID0galF1ZXJ5LmFqYXhTZXR0aW5ncy5mbGF0T3B0aW9ucyB8fCB7fTtcclxuXHJcblx0Zm9yICgga2V5IGluIHNyYyApIHtcclxuXHRcdGlmICggc3JjWyBrZXkgXSAhPT0gdW5kZWZpbmVkICkge1xyXG5cdFx0XHQoIGZsYXRPcHRpb25zWyBrZXkgXSA/IHRhcmdldCA6ICggZGVlcCB8fCAoIGRlZXAgPSB7fSApICkgKVsga2V5IF0gPSBzcmNbIGtleSBdO1xyXG5cdFx0fVxyXG5cdH1cclxuXHRpZiAoIGRlZXAgKSB7XHJcblx0XHRqUXVlcnkuZXh0ZW5kKCB0cnVlLCB0YXJnZXQsIGRlZXAgKTtcclxuXHR9XHJcblxyXG5cdHJldHVybiB0YXJnZXQ7XHJcbn1cclxuXHJcbi8qIEhhbmRsZXMgcmVzcG9uc2VzIHRvIGFuIGFqYXggcmVxdWVzdDpcclxuICogLSBmaW5kcyB0aGUgcmlnaHQgZGF0YVR5cGUgKG1lZGlhdGVzIGJldHdlZW4gY29udGVudC10eXBlIGFuZCBleHBlY3RlZCBkYXRhVHlwZSlcclxuICogLSByZXR1cm5zIHRoZSBjb3JyZXNwb25kaW5nIHJlc3BvbnNlXHJcbiAqL1xyXG5mdW5jdGlvbiBhamF4SGFuZGxlUmVzcG9uc2VzKCBzLCBqcVhIUiwgcmVzcG9uc2VzICkge1xyXG5cclxuXHR2YXIgY3QsIHR5cGUsIGZpbmFsRGF0YVR5cGUsIGZpcnN0RGF0YVR5cGUsXHJcblx0XHRjb250ZW50cyA9IHMuY29udGVudHMsXHJcblx0XHRkYXRhVHlwZXMgPSBzLmRhdGFUeXBlcztcclxuXHJcblx0Ly8gUmVtb3ZlIGF1dG8gZGF0YVR5cGUgYW5kIGdldCBjb250ZW50LXR5cGUgaW4gdGhlIHByb2Nlc3NcclxuXHR3aGlsZSAoIGRhdGFUeXBlc1sgMCBdID09PSBcIipcIiApIHtcclxuXHRcdGRhdGFUeXBlcy5zaGlmdCgpO1xyXG5cdFx0aWYgKCBjdCA9PT0gdW5kZWZpbmVkICkge1xyXG5cdFx0XHRjdCA9IHMubWltZVR5cGUgfHwganFYSFIuZ2V0UmVzcG9uc2VIZWFkZXIoIFwiQ29udGVudC1UeXBlXCIgKTtcclxuXHRcdH1cclxuXHR9XHJcblxyXG5cdC8vIENoZWNrIGlmIHdlJ3JlIGRlYWxpbmcgd2l0aCBhIGtub3duIGNvbnRlbnQtdHlwZVxyXG5cdGlmICggY3QgKSB7XHJcblx0XHRmb3IgKCB0eXBlIGluIGNvbnRlbnRzICkge1xyXG5cdFx0XHRpZiAoIGNvbnRlbnRzWyB0eXBlIF0gJiYgY29udGVudHNbIHR5cGUgXS50ZXN0KCBjdCApICkge1xyXG5cdFx0XHRcdGRhdGFUeXBlcy51bnNoaWZ0KCB0eXBlICk7XHJcblx0XHRcdFx0YnJlYWs7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHR9XHJcblxyXG5cdC8vIENoZWNrIHRvIHNlZSBpZiB3ZSBoYXZlIGEgcmVzcG9uc2UgZm9yIHRoZSBleHBlY3RlZCBkYXRhVHlwZVxyXG5cdGlmICggZGF0YVR5cGVzWyAwIF0gaW4gcmVzcG9uc2VzICkge1xyXG5cdFx0ZmluYWxEYXRhVHlwZSA9IGRhdGFUeXBlc1sgMCBdO1xyXG5cdH0gZWxzZSB7XHJcblxyXG5cdFx0Ly8gVHJ5IGNvbnZlcnRpYmxlIGRhdGFUeXBlc1xyXG5cdFx0Zm9yICggdHlwZSBpbiByZXNwb25zZXMgKSB7XHJcblx0XHRcdGlmICggIWRhdGFUeXBlc1sgMCBdIHx8IHMuY29udmVydGVyc1sgdHlwZSArIFwiIFwiICsgZGF0YVR5cGVzWyAwIF0gXSApIHtcclxuXHRcdFx0XHRmaW5hbERhdGFUeXBlID0gdHlwZTtcclxuXHRcdFx0XHRicmVhaztcclxuXHRcdFx0fVxyXG5cdFx0XHRpZiAoICFmaXJzdERhdGFUeXBlICkge1xyXG5cdFx0XHRcdGZpcnN0RGF0YVR5cGUgPSB0eXBlO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gT3IganVzdCB1c2UgZmlyc3Qgb25lXHJcblx0XHRmaW5hbERhdGFUeXBlID0gZmluYWxEYXRhVHlwZSB8fCBmaXJzdERhdGFUeXBlO1xyXG5cdH1cclxuXHJcblx0Ly8gSWYgd2UgZm91bmQgYSBkYXRhVHlwZVxyXG5cdC8vIFdlIGFkZCB0aGUgZGF0YVR5cGUgdG8gdGhlIGxpc3QgaWYgbmVlZGVkXHJcblx0Ly8gYW5kIHJldHVybiB0aGUgY29ycmVzcG9uZGluZyByZXNwb25zZVxyXG5cdGlmICggZmluYWxEYXRhVHlwZSApIHtcclxuXHRcdGlmICggZmluYWxEYXRhVHlwZSAhPT0gZGF0YVR5cGVzWyAwIF0gKSB7XHJcblx0XHRcdGRhdGFUeXBlcy51bnNoaWZ0KCBmaW5hbERhdGFUeXBlICk7XHJcblx0XHR9XHJcblx0XHRyZXR1cm4gcmVzcG9uc2VzWyBmaW5hbERhdGFUeXBlIF07XHJcblx0fVxyXG59XHJcblxyXG4vKiBDaGFpbiBjb252ZXJzaW9ucyBnaXZlbiB0aGUgcmVxdWVzdCBhbmQgdGhlIG9yaWdpbmFsIHJlc3BvbnNlXHJcbiAqIEFsc28gc2V0cyB0aGUgcmVzcG9uc2VYWFggZmllbGRzIG9uIHRoZSBqcVhIUiBpbnN0YW5jZVxyXG4gKi9cclxuZnVuY3Rpb24gYWpheENvbnZlcnQoIHMsIHJlc3BvbnNlLCBqcVhIUiwgaXNTdWNjZXNzICkge1xyXG5cdHZhciBjb252MiwgY3VycmVudCwgY29udiwgdG1wLCBwcmV2LFxyXG5cdFx0Y29udmVydGVycyA9IHt9LFxyXG5cclxuXHRcdC8vIFdvcmsgd2l0aCBhIGNvcHkgb2YgZGF0YVR5cGVzIGluIGNhc2Ugd2UgbmVlZCB0byBtb2RpZnkgaXQgZm9yIGNvbnZlcnNpb25cclxuXHRcdGRhdGFUeXBlcyA9IHMuZGF0YVR5cGVzLnNsaWNlKCk7XHJcblxyXG5cdC8vIENyZWF0ZSBjb252ZXJ0ZXJzIG1hcCB3aXRoIGxvd2VyY2FzZWQga2V5c1xyXG5cdGlmICggZGF0YVR5cGVzWyAxIF0gKSB7XHJcblx0XHRmb3IgKCBjb252IGluIHMuY29udmVydGVycyApIHtcclxuXHRcdFx0Y29udmVydGVyc1sgY29udi50b0xvd2VyQ2FzZSgpIF0gPSBzLmNvbnZlcnRlcnNbIGNvbnYgXTtcclxuXHRcdH1cclxuXHR9XHJcblxyXG5cdGN1cnJlbnQgPSBkYXRhVHlwZXMuc2hpZnQoKTtcclxuXHJcblx0Ly8gQ29udmVydCB0byBlYWNoIHNlcXVlbnRpYWwgZGF0YVR5cGVcclxuXHR3aGlsZSAoIGN1cnJlbnQgKSB7XHJcblxyXG5cdFx0aWYgKCBzLnJlc3BvbnNlRmllbGRzWyBjdXJyZW50IF0gKSB7XHJcblx0XHRcdGpxWEhSWyBzLnJlc3BvbnNlRmllbGRzWyBjdXJyZW50IF0gXSA9IHJlc3BvbnNlO1xyXG5cdFx0fVxyXG5cclxuXHRcdC8vIEFwcGx5IHRoZSBkYXRhRmlsdGVyIGlmIHByb3ZpZGVkXHJcblx0XHRpZiAoICFwcmV2ICYmIGlzU3VjY2VzcyAmJiBzLmRhdGFGaWx0ZXIgKSB7XHJcblx0XHRcdHJlc3BvbnNlID0gcy5kYXRhRmlsdGVyKCByZXNwb25zZSwgcy5kYXRhVHlwZSApO1xyXG5cdFx0fVxyXG5cclxuXHRcdHByZXYgPSBjdXJyZW50O1xyXG5cdFx0Y3VycmVudCA9IGRhdGFUeXBlcy5zaGlmdCgpO1xyXG5cclxuXHRcdGlmICggY3VycmVudCApIHtcclxuXHJcblx0XHQvLyBUaGVyZSdzIG9ubHkgd29yayB0byBkbyBpZiBjdXJyZW50IGRhdGFUeXBlIGlzIG5vbi1hdXRvXHJcblx0XHRcdGlmICggY3VycmVudCA9PT0gXCIqXCIgKSB7XHJcblxyXG5cdFx0XHRcdGN1cnJlbnQgPSBwcmV2O1xyXG5cclxuXHRcdFx0Ly8gQ29udmVydCByZXNwb25zZSBpZiBwcmV2IGRhdGFUeXBlIGlzIG5vbi1hdXRvIGFuZCBkaWZmZXJzIGZyb20gY3VycmVudFxyXG5cdFx0XHR9IGVsc2UgaWYgKCBwcmV2ICE9PSBcIipcIiAmJiBwcmV2ICE9PSBjdXJyZW50ICkge1xyXG5cclxuXHRcdFx0XHQvLyBTZWVrIGEgZGlyZWN0IGNvbnZlcnRlclxyXG5cdFx0XHRcdGNvbnYgPSBjb252ZXJ0ZXJzWyBwcmV2ICsgXCIgXCIgKyBjdXJyZW50IF0gfHwgY29udmVydGVyc1sgXCIqIFwiICsgY3VycmVudCBdO1xyXG5cclxuXHRcdFx0XHQvLyBJZiBub25lIGZvdW5kLCBzZWVrIGEgcGFpclxyXG5cdFx0XHRcdGlmICggIWNvbnYgKSB7XHJcblx0XHRcdFx0XHRmb3IgKCBjb252MiBpbiBjb252ZXJ0ZXJzICkge1xyXG5cclxuXHRcdFx0XHRcdFx0Ly8gSWYgY29udjIgb3V0cHV0cyBjdXJyZW50XHJcblx0XHRcdFx0XHRcdHRtcCA9IGNvbnYyLnNwbGl0KCBcIiBcIiApO1xyXG5cdFx0XHRcdFx0XHRpZiAoIHRtcFsgMSBdID09PSBjdXJyZW50ICkge1xyXG5cclxuXHRcdFx0XHRcdFx0XHQvLyBJZiBwcmV2IGNhbiBiZSBjb252ZXJ0ZWQgdG8gYWNjZXB0ZWQgaW5wdXRcclxuXHRcdFx0XHRcdFx0XHRjb252ID0gY29udmVydGVyc1sgcHJldiArIFwiIFwiICsgdG1wWyAwIF0gXSB8fFxyXG5cdFx0XHRcdFx0XHRcdFx0Y29udmVydGVyc1sgXCIqIFwiICsgdG1wWyAwIF0gXTtcclxuXHRcdFx0XHRcdFx0XHRpZiAoIGNvbnYgKSB7XHJcblxyXG5cdFx0XHRcdFx0XHRcdFx0Ly8gQ29uZGVuc2UgZXF1aXZhbGVuY2UgY29udmVydGVyc1xyXG5cdFx0XHRcdFx0XHRcdFx0aWYgKCBjb252ID09PSB0cnVlICkge1xyXG5cdFx0XHRcdFx0XHRcdFx0XHRjb252ID0gY29udmVydGVyc1sgY29udjIgXTtcclxuXHJcblx0XHRcdFx0XHRcdFx0XHQvLyBPdGhlcndpc2UsIGluc2VydCB0aGUgaW50ZXJtZWRpYXRlIGRhdGFUeXBlXHJcblx0XHRcdFx0XHRcdFx0XHR9IGVsc2UgaWYgKCBjb252ZXJ0ZXJzWyBjb252MiBdICE9PSB0cnVlICkge1xyXG5cdFx0XHRcdFx0XHRcdFx0XHRjdXJyZW50ID0gdG1wWyAwIF07XHJcblx0XHRcdFx0XHRcdFx0XHRcdGRhdGFUeXBlcy51bnNoaWZ0KCB0bXBbIDEgXSApO1xyXG5cdFx0XHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHRcdFx0YnJlYWs7XHJcblx0XHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHQvLyBBcHBseSBjb252ZXJ0ZXIgKGlmIG5vdCBhbiBlcXVpdmFsZW5jZSlcclxuXHRcdFx0XHRpZiAoIGNvbnYgIT09IHRydWUgKSB7XHJcblxyXG5cdFx0XHRcdFx0Ly8gVW5sZXNzIGVycm9ycyBhcmUgYWxsb3dlZCB0byBidWJibGUsIGNhdGNoIGFuZCByZXR1cm4gdGhlbVxyXG5cdFx0XHRcdFx0aWYgKCBjb252ICYmIHMudGhyb3dzICkge1xyXG5cdFx0XHRcdFx0XHRyZXNwb25zZSA9IGNvbnYoIHJlc3BvbnNlICk7XHJcblx0XHRcdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdFx0XHR0cnkge1xyXG5cdFx0XHRcdFx0XHRcdHJlc3BvbnNlID0gY29udiggcmVzcG9uc2UgKTtcclxuXHRcdFx0XHRcdFx0fSBjYXRjaCAoIGUgKSB7XHJcblx0XHRcdFx0XHRcdFx0cmV0dXJuIHtcclxuXHRcdFx0XHRcdFx0XHRcdHN0YXRlOiBcInBhcnNlcmVycm9yXCIsXHJcblx0XHRcdFx0XHRcdFx0XHRlcnJvcjogY29udiA/IGUgOiBcIk5vIGNvbnZlcnNpb24gZnJvbSBcIiArIHByZXYgKyBcIiB0byBcIiArIGN1cnJlbnRcclxuXHRcdFx0XHRcdFx0XHR9O1xyXG5cdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0fVxyXG5cclxuXHRyZXR1cm4geyBzdGF0ZTogXCJzdWNjZXNzXCIsIGRhdGE6IHJlc3BvbnNlIH07XHJcbn1cclxuXHJcbmpRdWVyeS5leHRlbmQoIHtcclxuXHJcblx0Ly8gQ291bnRlciBmb3IgaG9sZGluZyB0aGUgbnVtYmVyIG9mIGFjdGl2ZSBxdWVyaWVzXHJcblx0YWN0aXZlOiAwLFxyXG5cclxuXHQvLyBMYXN0LU1vZGlmaWVkIGhlYWRlciBjYWNoZSBmb3IgbmV4dCByZXF1ZXN0XHJcblx0bGFzdE1vZGlmaWVkOiB7fSxcclxuXHRldGFnOiB7fSxcclxuXHJcblx0YWpheFNldHRpbmdzOiB7XHJcblx0XHR1cmw6IGxvY2F0aW9uLmhyZWYsXHJcblx0XHR0eXBlOiBcIkdFVFwiLFxyXG5cdFx0aXNMb2NhbDogcmxvY2FsUHJvdG9jb2wudGVzdCggbG9jYXRpb24ucHJvdG9jb2wgKSxcclxuXHRcdGdsb2JhbDogdHJ1ZSxcclxuXHRcdHByb2Nlc3NEYXRhOiB0cnVlLFxyXG5cdFx0YXN5bmM6IHRydWUsXHJcblx0XHRjb250ZW50VHlwZTogXCJhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQ7IGNoYXJzZXQ9VVRGLThcIixcclxuXHRcdC8qXHJcblx0XHR0aW1lb3V0OiAwLFxyXG5cdFx0ZGF0YTogbnVsbCxcclxuXHRcdGRhdGFUeXBlOiBudWxsLFxyXG5cdFx0dXNlcm5hbWU6IG51bGwsXHJcblx0XHRwYXNzd29yZDogbnVsbCxcclxuXHRcdGNhY2hlOiBudWxsLFxyXG5cdFx0dGhyb3dzOiBmYWxzZSxcclxuXHRcdHRyYWRpdGlvbmFsOiBmYWxzZSxcclxuXHRcdGhlYWRlcnM6IHt9LFxyXG5cdFx0Ki9cclxuXHJcblx0XHRhY2NlcHRzOiB7XHJcblx0XHRcdFwiKlwiOiBhbGxUeXBlcyxcclxuXHRcdFx0dGV4dDogXCJ0ZXh0L3BsYWluXCIsXHJcblx0XHRcdGh0bWw6IFwidGV4dC9odG1sXCIsXHJcblx0XHRcdHhtbDogXCJhcHBsaWNhdGlvbi94bWwsIHRleHQveG1sXCIsXHJcblx0XHRcdGpzb246IFwiYXBwbGljYXRpb24vanNvbiwgdGV4dC9qYXZhc2NyaXB0XCJcclxuXHRcdH0sXHJcblxyXG5cdFx0Y29udGVudHM6IHtcclxuXHRcdFx0eG1sOiAvXFxieG1sXFxiLyxcclxuXHRcdFx0aHRtbDogL1xcYmh0bWwvLFxyXG5cdFx0XHRqc29uOiAvXFxianNvblxcYi9cclxuXHRcdH0sXHJcblxyXG5cdFx0cmVzcG9uc2VGaWVsZHM6IHtcclxuXHRcdFx0eG1sOiBcInJlc3BvbnNlWE1MXCIsXHJcblx0XHRcdHRleHQ6IFwicmVzcG9uc2VUZXh0XCIsXHJcblx0XHRcdGpzb246IFwicmVzcG9uc2VKU09OXCJcclxuXHRcdH0sXHJcblxyXG5cdFx0Ly8gRGF0YSBjb252ZXJ0ZXJzXHJcblx0XHQvLyBLZXlzIHNlcGFyYXRlIHNvdXJjZSAob3IgY2F0Y2hhbGwgXCIqXCIpIGFuZCBkZXN0aW5hdGlvbiB0eXBlcyB3aXRoIGEgc2luZ2xlIHNwYWNlXHJcblx0XHRjb252ZXJ0ZXJzOiB7XHJcblxyXG5cdFx0XHQvLyBDb252ZXJ0IGFueXRoaW5nIHRvIHRleHRcclxuXHRcdFx0XCIqIHRleHRcIjogU3RyaW5nLFxyXG5cclxuXHRcdFx0Ly8gVGV4dCB0byBodG1sICh0cnVlID0gbm8gdHJhbnNmb3JtYXRpb24pXHJcblx0XHRcdFwidGV4dCBodG1sXCI6IHRydWUsXHJcblxyXG5cdFx0XHQvLyBFdmFsdWF0ZSB0ZXh0IGFzIGEganNvbiBleHByZXNzaW9uXHJcblx0XHRcdFwidGV4dCBqc29uXCI6IGpRdWVyeS5wYXJzZUpTT04sXHJcblxyXG5cdFx0XHQvLyBQYXJzZSB0ZXh0IGFzIHhtbFxyXG5cdFx0XHRcInRleHQgeG1sXCI6IGpRdWVyeS5wYXJzZVhNTFxyXG5cdFx0fSxcclxuXHJcblx0XHQvLyBGb3Igb3B0aW9ucyB0aGF0IHNob3VsZG4ndCBiZSBkZWVwIGV4dGVuZGVkOlxyXG5cdFx0Ly8geW91IGNhbiBhZGQgeW91ciBvd24gY3VzdG9tIG9wdGlvbnMgaGVyZSBpZlxyXG5cdFx0Ly8gYW5kIHdoZW4geW91IGNyZWF0ZSBvbmUgdGhhdCBzaG91bGRuJ3QgYmVcclxuXHRcdC8vIGRlZXAgZXh0ZW5kZWQgKHNlZSBhamF4RXh0ZW5kKVxyXG5cdFx0ZmxhdE9wdGlvbnM6IHtcclxuXHRcdFx0dXJsOiB0cnVlLFxyXG5cdFx0XHRjb250ZXh0OiB0cnVlXHJcblx0XHR9XHJcblx0fSxcclxuXHJcblx0Ly8gQ3JlYXRlcyBhIGZ1bGwgZmxlZGdlZCBzZXR0aW5ncyBvYmplY3QgaW50byB0YXJnZXRcclxuXHQvLyB3aXRoIGJvdGggYWpheFNldHRpbmdzIGFuZCBzZXR0aW5ncyBmaWVsZHMuXHJcblx0Ly8gSWYgdGFyZ2V0IGlzIG9taXR0ZWQsIHdyaXRlcyBpbnRvIGFqYXhTZXR0aW5ncy5cclxuXHRhamF4U2V0dXA6IGZ1bmN0aW9uKCB0YXJnZXQsIHNldHRpbmdzICkge1xyXG5cdFx0cmV0dXJuIHNldHRpbmdzID9cclxuXHJcblx0XHRcdC8vIEJ1aWxkaW5nIGEgc2V0dGluZ3Mgb2JqZWN0XHJcblx0XHRcdGFqYXhFeHRlbmQoIGFqYXhFeHRlbmQoIHRhcmdldCwgalF1ZXJ5LmFqYXhTZXR0aW5ncyApLCBzZXR0aW5ncyApIDpcclxuXHJcblx0XHRcdC8vIEV4dGVuZGluZyBhamF4U2V0dGluZ3NcclxuXHRcdFx0YWpheEV4dGVuZCggalF1ZXJ5LmFqYXhTZXR0aW5ncywgdGFyZ2V0ICk7XHJcblx0fSxcclxuXHJcblx0YWpheFByZWZpbHRlcjogYWRkVG9QcmVmaWx0ZXJzT3JUcmFuc3BvcnRzKCBwcmVmaWx0ZXJzICksXHJcblx0YWpheFRyYW5zcG9ydDogYWRkVG9QcmVmaWx0ZXJzT3JUcmFuc3BvcnRzKCB0cmFuc3BvcnRzICksXHJcblxyXG5cdC8vIE1haW4gbWV0aG9kXHJcblx0YWpheDogZnVuY3Rpb24oIHVybCwgb3B0aW9ucyApIHtcclxuXHJcblx0XHQvLyBJZiB1cmwgaXMgYW4gb2JqZWN0LCBzaW11bGF0ZSBwcmUtMS41IHNpZ25hdHVyZVxyXG5cdFx0aWYgKCB0eXBlb2YgdXJsID09PSBcIm9iamVjdFwiICkge1xyXG5cdFx0XHRvcHRpb25zID0gdXJsO1xyXG5cdFx0XHR1cmwgPSB1bmRlZmluZWQ7XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gRm9yY2Ugb3B0aW9ucyB0byBiZSBhbiBvYmplY3RcclxuXHRcdG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xyXG5cclxuXHRcdHZhciB0cmFuc3BvcnQsXHJcblxyXG5cdFx0XHQvLyBVUkwgd2l0aG91dCBhbnRpLWNhY2hlIHBhcmFtXHJcblx0XHRcdGNhY2hlVVJMLFxyXG5cclxuXHRcdFx0Ly8gUmVzcG9uc2UgaGVhZGVyc1xyXG5cdFx0XHRyZXNwb25zZUhlYWRlcnNTdHJpbmcsXHJcblx0XHRcdHJlc3BvbnNlSGVhZGVycyxcclxuXHJcblx0XHRcdC8vIHRpbWVvdXQgaGFuZGxlXHJcblx0XHRcdHRpbWVvdXRUaW1lcixcclxuXHJcblx0XHRcdC8vIFVybCBjbGVhbnVwIHZhclxyXG5cdFx0XHR1cmxBbmNob3IsXHJcblxyXG5cdFx0XHQvLyBUbyBrbm93IGlmIGdsb2JhbCBldmVudHMgYXJlIHRvIGJlIGRpc3BhdGNoZWRcclxuXHRcdFx0ZmlyZUdsb2JhbHMsXHJcblxyXG5cdFx0XHQvLyBMb29wIHZhcmlhYmxlXHJcblx0XHRcdGksXHJcblxyXG5cdFx0XHQvLyBDcmVhdGUgdGhlIGZpbmFsIG9wdGlvbnMgb2JqZWN0XHJcblx0XHRcdHMgPSBqUXVlcnkuYWpheFNldHVwKCB7fSwgb3B0aW9ucyApLFxyXG5cclxuXHRcdFx0Ly8gQ2FsbGJhY2tzIGNvbnRleHRcclxuXHRcdFx0Y2FsbGJhY2tDb250ZXh0ID0gcy5jb250ZXh0IHx8IHMsXHJcblxyXG5cdFx0XHQvLyBDb250ZXh0IGZvciBnbG9iYWwgZXZlbnRzIGlzIGNhbGxiYWNrQ29udGV4dCBpZiBpdCBpcyBhIERPTSBub2RlIG9yIGpRdWVyeSBjb2xsZWN0aW9uXHJcblx0XHRcdGdsb2JhbEV2ZW50Q29udGV4dCA9IHMuY29udGV4dCAmJlxyXG5cdFx0XHRcdCggY2FsbGJhY2tDb250ZXh0Lm5vZGVUeXBlIHx8IGNhbGxiYWNrQ29udGV4dC5qcXVlcnkgKSA/XHJcblx0XHRcdFx0XHRqUXVlcnkoIGNhbGxiYWNrQ29udGV4dCApIDpcclxuXHRcdFx0XHRcdGpRdWVyeS5ldmVudCxcclxuXHJcblx0XHRcdC8vIERlZmVycmVkc1xyXG5cdFx0XHRkZWZlcnJlZCA9IGpRdWVyeS5EZWZlcnJlZCgpLFxyXG5cdFx0XHRjb21wbGV0ZURlZmVycmVkID0galF1ZXJ5LkNhbGxiYWNrcyggXCJvbmNlIG1lbW9yeVwiICksXHJcblxyXG5cdFx0XHQvLyBTdGF0dXMtZGVwZW5kZW50IGNhbGxiYWNrc1xyXG5cdFx0XHRzdGF0dXNDb2RlID0gcy5zdGF0dXNDb2RlIHx8IHt9LFxyXG5cclxuXHRcdFx0Ly8gSGVhZGVycyAodGhleSBhcmUgc2VudCBhbGwgYXQgb25jZSlcclxuXHRcdFx0cmVxdWVzdEhlYWRlcnMgPSB7fSxcclxuXHRcdFx0cmVxdWVzdEhlYWRlcnNOYW1lcyA9IHt9LFxyXG5cclxuXHRcdFx0Ly8gVGhlIGpxWEhSIHN0YXRlXHJcblx0XHRcdHN0YXRlID0gMCxcclxuXHJcblx0XHRcdC8vIERlZmF1bHQgYWJvcnQgbWVzc2FnZVxyXG5cdFx0XHRzdHJBYm9ydCA9IFwiY2FuY2VsZWRcIixcclxuXHJcblx0XHRcdC8vIEZha2UgeGhyXHJcblx0XHRcdGpxWEhSID0ge1xyXG5cdFx0XHRcdHJlYWR5U3RhdGU6IDAsXHJcblxyXG5cdFx0XHRcdC8vIEJ1aWxkcyBoZWFkZXJzIGhhc2h0YWJsZSBpZiBuZWVkZWRcclxuXHRcdFx0XHRnZXRSZXNwb25zZUhlYWRlcjogZnVuY3Rpb24oIGtleSApIHtcclxuXHRcdFx0XHRcdHZhciBtYXRjaDtcclxuXHRcdFx0XHRcdGlmICggc3RhdGUgPT09IDIgKSB7XHJcblx0XHRcdFx0XHRcdGlmICggIXJlc3BvbnNlSGVhZGVycyApIHtcclxuXHRcdFx0XHRcdFx0XHRyZXNwb25zZUhlYWRlcnMgPSB7fTtcclxuXHRcdFx0XHRcdFx0XHR3aGlsZSAoICggbWF0Y2ggPSByaGVhZGVycy5leGVjKCByZXNwb25zZUhlYWRlcnNTdHJpbmcgKSApICkge1xyXG5cdFx0XHRcdFx0XHRcdFx0cmVzcG9uc2VIZWFkZXJzWyBtYXRjaFsgMSBdLnRvTG93ZXJDYXNlKCkgXSA9IG1hdGNoWyAyIF07XHJcblx0XHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdG1hdGNoID0gcmVzcG9uc2VIZWFkZXJzWyBrZXkudG9Mb3dlckNhc2UoKSBdO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0cmV0dXJuIG1hdGNoID09IG51bGwgPyBudWxsIDogbWF0Y2g7XHJcblx0XHRcdFx0fSxcclxuXHJcblx0XHRcdFx0Ly8gUmF3IHN0cmluZ1xyXG5cdFx0XHRcdGdldEFsbFJlc3BvbnNlSGVhZGVyczogZnVuY3Rpb24oKSB7XHJcblx0XHRcdFx0XHRyZXR1cm4gc3RhdGUgPT09IDIgPyByZXNwb25zZUhlYWRlcnNTdHJpbmcgOiBudWxsO1xyXG5cdFx0XHRcdH0sXHJcblxyXG5cdFx0XHRcdC8vIENhY2hlcyB0aGUgaGVhZGVyXHJcblx0XHRcdFx0c2V0UmVxdWVzdEhlYWRlcjogZnVuY3Rpb24oIG5hbWUsIHZhbHVlICkge1xyXG5cdFx0XHRcdFx0dmFyIGxuYW1lID0gbmFtZS50b0xvd2VyQ2FzZSgpO1xyXG5cdFx0XHRcdFx0aWYgKCAhc3RhdGUgKSB7XHJcblx0XHRcdFx0XHRcdG5hbWUgPSByZXF1ZXN0SGVhZGVyc05hbWVzWyBsbmFtZSBdID0gcmVxdWVzdEhlYWRlcnNOYW1lc1sgbG5hbWUgXSB8fCBuYW1lO1xyXG5cdFx0XHRcdFx0XHRyZXF1ZXN0SGVhZGVyc1sgbmFtZSBdID0gdmFsdWU7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRyZXR1cm4gdGhpcztcclxuXHRcdFx0XHR9LFxyXG5cclxuXHRcdFx0XHQvLyBPdmVycmlkZXMgcmVzcG9uc2UgY29udGVudC10eXBlIGhlYWRlclxyXG5cdFx0XHRcdG92ZXJyaWRlTWltZVR5cGU6IGZ1bmN0aW9uKCB0eXBlICkge1xyXG5cdFx0XHRcdFx0aWYgKCAhc3RhdGUgKSB7XHJcblx0XHRcdFx0XHRcdHMubWltZVR5cGUgPSB0eXBlO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0cmV0dXJuIHRoaXM7XHJcblx0XHRcdFx0fSxcclxuXHJcblx0XHRcdFx0Ly8gU3RhdHVzLWRlcGVuZGVudCBjYWxsYmFja3NcclxuXHRcdFx0XHRzdGF0dXNDb2RlOiBmdW5jdGlvbiggbWFwICkge1xyXG5cdFx0XHRcdFx0dmFyIGNvZGU7XHJcblx0XHRcdFx0XHRpZiAoIG1hcCApIHtcclxuXHRcdFx0XHRcdFx0aWYgKCBzdGF0ZSA8IDIgKSB7XHJcblx0XHRcdFx0XHRcdFx0Zm9yICggY29kZSBpbiBtYXAgKSB7XHJcblxyXG5cdFx0XHRcdFx0XHRcdFx0Ly8gTGF6eS1hZGQgdGhlIG5ldyBjYWxsYmFjayBpbiBhIHdheSB0aGF0IHByZXNlcnZlcyBvbGQgb25lc1xyXG5cdFx0XHRcdFx0XHRcdFx0c3RhdHVzQ29kZVsgY29kZSBdID0gWyBzdGF0dXNDb2RlWyBjb2RlIF0sIG1hcFsgY29kZSBdIF07XHJcblx0XHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xyXG5cclxuXHRcdFx0XHRcdFx0XHQvLyBFeGVjdXRlIHRoZSBhcHByb3ByaWF0ZSBjYWxsYmFja3NcclxuXHRcdFx0XHRcdFx0XHRqcVhIUi5hbHdheXMoIG1hcFsganFYSFIuc3RhdHVzIF0gKTtcclxuXHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0cmV0dXJuIHRoaXM7XHJcblx0XHRcdFx0fSxcclxuXHJcblx0XHRcdFx0Ly8gQ2FuY2VsIHRoZSByZXF1ZXN0XHJcblx0XHRcdFx0YWJvcnQ6IGZ1bmN0aW9uKCBzdGF0dXNUZXh0ICkge1xyXG5cdFx0XHRcdFx0dmFyIGZpbmFsVGV4dCA9IHN0YXR1c1RleHQgfHwgc3RyQWJvcnQ7XHJcblx0XHRcdFx0XHRpZiAoIHRyYW5zcG9ydCApIHtcclxuXHRcdFx0XHRcdFx0dHJhbnNwb3J0LmFib3J0KCBmaW5hbFRleHQgKTtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdGRvbmUoIDAsIGZpbmFsVGV4dCApO1xyXG5cdFx0XHRcdFx0cmV0dXJuIHRoaXM7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9O1xyXG5cclxuXHRcdC8vIEF0dGFjaCBkZWZlcnJlZHNcclxuXHRcdGRlZmVycmVkLnByb21pc2UoIGpxWEhSICkuY29tcGxldGUgPSBjb21wbGV0ZURlZmVycmVkLmFkZDtcclxuXHRcdGpxWEhSLnN1Y2Nlc3MgPSBqcVhIUi5kb25lO1xyXG5cdFx0anFYSFIuZXJyb3IgPSBqcVhIUi5mYWlsO1xyXG5cclxuXHRcdC8vIFJlbW92ZSBoYXNoIGNoYXJhY3RlciAoIzc1MzE6IGFuZCBzdHJpbmcgcHJvbW90aW9uKVxyXG5cdFx0Ly8gQWRkIHByb3RvY29sIGlmIG5vdCBwcm92aWRlZCAocHJlZmlsdGVycyBtaWdodCBleHBlY3QgaXQpXHJcblx0XHQvLyBIYW5kbGUgZmFsc3kgdXJsIGluIHRoZSBzZXR0aW5ncyBvYmplY3QgKCMxMDA5MzogY29uc2lzdGVuY3kgd2l0aCBvbGQgc2lnbmF0dXJlKVxyXG5cdFx0Ly8gV2UgYWxzbyB1c2UgdGhlIHVybCBwYXJhbWV0ZXIgaWYgYXZhaWxhYmxlXHJcblx0XHRzLnVybCA9ICggKCB1cmwgfHwgcy51cmwgfHwgbG9jYXRpb24uaHJlZiApICsgXCJcIiApLnJlcGxhY2UoIHJoYXNoLCBcIlwiIClcclxuXHRcdFx0LnJlcGxhY2UoIHJwcm90b2NvbCwgbG9jYXRpb24ucHJvdG9jb2wgKyBcIi8vXCIgKTtcclxuXHJcblx0XHQvLyBBbGlhcyBtZXRob2Qgb3B0aW9uIHRvIHR5cGUgYXMgcGVyIHRpY2tldCAjMTIwMDRcclxuXHRcdHMudHlwZSA9IG9wdGlvbnMubWV0aG9kIHx8IG9wdGlvbnMudHlwZSB8fCBzLm1ldGhvZCB8fCBzLnR5cGU7XHJcblxyXG5cdFx0Ly8gRXh0cmFjdCBkYXRhVHlwZXMgbGlzdFxyXG5cdFx0cy5kYXRhVHlwZXMgPSBqUXVlcnkudHJpbSggcy5kYXRhVHlwZSB8fCBcIipcIiApLnRvTG93ZXJDYXNlKCkubWF0Y2goIHJub3R3aGl0ZSApIHx8IFsgXCJcIiBdO1xyXG5cclxuXHRcdC8vIEEgY3Jvc3MtZG9tYWluIHJlcXVlc3QgaXMgaW4gb3JkZXIgd2hlbiB0aGUgb3JpZ2luIGRvZXNuJ3QgbWF0Y2ggdGhlIGN1cnJlbnQgb3JpZ2luLlxyXG5cdFx0aWYgKCBzLmNyb3NzRG9tYWluID09IG51bGwgKSB7XHJcblx0XHRcdHVybEFuY2hvciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiYVwiICk7XHJcblxyXG5cdFx0XHQvLyBTdXBwb3J0OiBJRTgtMTErXHJcblx0XHRcdC8vIElFIHRocm93cyBleGNlcHRpb24gaWYgdXJsIGlzIG1hbGZvcm1lZCwgZS5nLiBodHRwOi8vZXhhbXBsZS5jb206ODB4L1xyXG5cdFx0XHR0cnkge1xyXG5cdFx0XHRcdHVybEFuY2hvci5ocmVmID0gcy51cmw7XHJcblxyXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IElFOC0xMStcclxuXHRcdFx0XHQvLyBBbmNob3IncyBob3N0IHByb3BlcnR5IGlzbid0IGNvcnJlY3RseSBzZXQgd2hlbiBzLnVybCBpcyByZWxhdGl2ZVxyXG5cdFx0XHRcdHVybEFuY2hvci5ocmVmID0gdXJsQW5jaG9yLmhyZWY7XHJcblx0XHRcdFx0cy5jcm9zc0RvbWFpbiA9IG9yaWdpbkFuY2hvci5wcm90b2NvbCArIFwiLy9cIiArIG9yaWdpbkFuY2hvci5ob3N0ICE9PVxyXG5cdFx0XHRcdFx0dXJsQW5jaG9yLnByb3RvY29sICsgXCIvL1wiICsgdXJsQW5jaG9yLmhvc3Q7XHJcblx0XHRcdH0gY2F0Y2ggKCBlICkge1xyXG5cclxuXHRcdFx0XHQvLyBJZiB0aGVyZSBpcyBhbiBlcnJvciBwYXJzaW5nIHRoZSBVUkwsIGFzc3VtZSBpdCBpcyBjcm9zc0RvbWFpbixcclxuXHRcdFx0XHQvLyBpdCBjYW4gYmUgcmVqZWN0ZWQgYnkgdGhlIHRyYW5zcG9ydCBpZiBpdCBpcyBpbnZhbGlkXHJcblx0XHRcdFx0cy5jcm9zc0RvbWFpbiA9IHRydWU7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHJcblx0XHQvLyBDb252ZXJ0IGRhdGEgaWYgbm90IGFscmVhZHkgYSBzdHJpbmdcclxuXHRcdGlmICggcy5kYXRhICYmIHMucHJvY2Vzc0RhdGEgJiYgdHlwZW9mIHMuZGF0YSAhPT0gXCJzdHJpbmdcIiApIHtcclxuXHRcdFx0cy5kYXRhID0galF1ZXJ5LnBhcmFtKCBzLmRhdGEsIHMudHJhZGl0aW9uYWwgKTtcclxuXHRcdH1cclxuXHJcblx0XHQvLyBBcHBseSBwcmVmaWx0ZXJzXHJcblx0XHRpbnNwZWN0UHJlZmlsdGVyc09yVHJhbnNwb3J0cyggcHJlZmlsdGVycywgcywgb3B0aW9ucywganFYSFIgKTtcclxuXHJcblx0XHQvLyBJZiByZXF1ZXN0IHdhcyBhYm9ydGVkIGluc2lkZSBhIHByZWZpbHRlciwgc3RvcCB0aGVyZVxyXG5cdFx0aWYgKCBzdGF0ZSA9PT0gMiApIHtcclxuXHRcdFx0cmV0dXJuIGpxWEhSO1xyXG5cdFx0fVxyXG5cclxuXHRcdC8vIFdlIGNhbiBmaXJlIGdsb2JhbCBldmVudHMgYXMgb2Ygbm93IGlmIGFza2VkIHRvXHJcblx0XHQvLyBEb24ndCBmaXJlIGV2ZW50cyBpZiBqUXVlcnkuZXZlbnQgaXMgdW5kZWZpbmVkIGluIGFuIEFNRC11c2FnZSBzY2VuYXJpbyAoIzE1MTE4KVxyXG5cdFx0ZmlyZUdsb2JhbHMgPSBqUXVlcnkuZXZlbnQgJiYgcy5nbG9iYWw7XHJcblxyXG5cdFx0Ly8gV2F0Y2ggZm9yIGEgbmV3IHNldCBvZiByZXF1ZXN0c1xyXG5cdFx0aWYgKCBmaXJlR2xvYmFscyAmJiBqUXVlcnkuYWN0aXZlKysgPT09IDAgKSB7XHJcblx0XHRcdGpRdWVyeS5ldmVudC50cmlnZ2VyKCBcImFqYXhTdGFydFwiICk7XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gVXBwZXJjYXNlIHRoZSB0eXBlXHJcblx0XHRzLnR5cGUgPSBzLnR5cGUudG9VcHBlckNhc2UoKTtcclxuXHJcblx0XHQvLyBEZXRlcm1pbmUgaWYgcmVxdWVzdCBoYXMgY29udGVudFxyXG5cdFx0cy5oYXNDb250ZW50ID0gIXJub0NvbnRlbnQudGVzdCggcy50eXBlICk7XHJcblxyXG5cdFx0Ly8gU2F2ZSB0aGUgVVJMIGluIGNhc2Ugd2UncmUgdG95aW5nIHdpdGggdGhlIElmLU1vZGlmaWVkLVNpbmNlXHJcblx0XHQvLyBhbmQvb3IgSWYtTm9uZS1NYXRjaCBoZWFkZXIgbGF0ZXIgb25cclxuXHRcdGNhY2hlVVJMID0gcy51cmw7XHJcblxyXG5cdFx0Ly8gTW9yZSBvcHRpb25zIGhhbmRsaW5nIGZvciByZXF1ZXN0cyB3aXRoIG5vIGNvbnRlbnRcclxuXHRcdGlmICggIXMuaGFzQ29udGVudCApIHtcclxuXHJcblx0XHRcdC8vIElmIGRhdGEgaXMgYXZhaWxhYmxlLCBhcHBlbmQgZGF0YSB0byB1cmxcclxuXHRcdFx0aWYgKCBzLmRhdGEgKSB7XHJcblx0XHRcdFx0Y2FjaGVVUkwgPSAoIHMudXJsICs9ICggcnF1ZXJ5LnRlc3QoIGNhY2hlVVJMICkgPyBcIiZcIiA6IFwiP1wiICkgKyBzLmRhdGEgKTtcclxuXHJcblx0XHRcdFx0Ly8gIzk2ODI6IHJlbW92ZSBkYXRhIHNvIHRoYXQgaXQncyBub3QgdXNlZCBpbiBhbiBldmVudHVhbCByZXRyeVxyXG5cdFx0XHRcdGRlbGV0ZSBzLmRhdGE7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdC8vIEFkZCBhbnRpLWNhY2hlIGluIHVybCBpZiBuZWVkZWRcclxuXHRcdFx0aWYgKCBzLmNhY2hlID09PSBmYWxzZSApIHtcclxuXHRcdFx0XHRzLnVybCA9IHJ0cy50ZXN0KCBjYWNoZVVSTCApID9cclxuXHJcblx0XHRcdFx0XHQvLyBJZiB0aGVyZSBpcyBhbHJlYWR5IGEgJ18nIHBhcmFtZXRlciwgc2V0IGl0cyB2YWx1ZVxyXG5cdFx0XHRcdFx0Y2FjaGVVUkwucmVwbGFjZSggcnRzLCBcIiQxXz1cIiArIG5vbmNlKysgKSA6XHJcblxyXG5cdFx0XHRcdFx0Ly8gT3RoZXJ3aXNlIGFkZCBvbmUgdG8gdGhlIGVuZFxyXG5cdFx0XHRcdFx0Y2FjaGVVUkwgKyAoIHJxdWVyeS50ZXN0KCBjYWNoZVVSTCApID8gXCImXCIgOiBcIj9cIiApICsgXCJfPVwiICsgbm9uY2UrKztcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cclxuXHRcdC8vIFNldCB0aGUgSWYtTW9kaWZpZWQtU2luY2UgYW5kL29yIElmLU5vbmUtTWF0Y2ggaGVhZGVyLCBpZiBpbiBpZk1vZGlmaWVkIG1vZGUuXHJcblx0XHRpZiAoIHMuaWZNb2RpZmllZCApIHtcclxuXHRcdFx0aWYgKCBqUXVlcnkubGFzdE1vZGlmaWVkWyBjYWNoZVVSTCBdICkge1xyXG5cdFx0XHRcdGpxWEhSLnNldFJlcXVlc3RIZWFkZXIoIFwiSWYtTW9kaWZpZWQtU2luY2VcIiwgalF1ZXJ5Lmxhc3RNb2RpZmllZFsgY2FjaGVVUkwgXSApO1xyXG5cdFx0XHR9XHJcblx0XHRcdGlmICggalF1ZXJ5LmV0YWdbIGNhY2hlVVJMIF0gKSB7XHJcblx0XHRcdFx0anFYSFIuc2V0UmVxdWVzdEhlYWRlciggXCJJZi1Ob25lLU1hdGNoXCIsIGpRdWVyeS5ldGFnWyBjYWNoZVVSTCBdICk7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHJcblx0XHQvLyBTZXQgdGhlIGNvcnJlY3QgaGVhZGVyLCBpZiBkYXRhIGlzIGJlaW5nIHNlbnRcclxuXHRcdGlmICggcy5kYXRhICYmIHMuaGFzQ29udGVudCAmJiBzLmNvbnRlbnRUeXBlICE9PSBmYWxzZSB8fCBvcHRpb25zLmNvbnRlbnRUeXBlICkge1xyXG5cdFx0XHRqcVhIUi5zZXRSZXF1ZXN0SGVhZGVyKCBcIkNvbnRlbnQtVHlwZVwiLCBzLmNvbnRlbnRUeXBlICk7XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gU2V0IHRoZSBBY2NlcHRzIGhlYWRlciBmb3IgdGhlIHNlcnZlciwgZGVwZW5kaW5nIG9uIHRoZSBkYXRhVHlwZVxyXG5cdFx0anFYSFIuc2V0UmVxdWVzdEhlYWRlcihcclxuXHRcdFx0XCJBY2NlcHRcIixcclxuXHRcdFx0cy5kYXRhVHlwZXNbIDAgXSAmJiBzLmFjY2VwdHNbIHMuZGF0YVR5cGVzWyAwIF0gXSA/XHJcblx0XHRcdFx0cy5hY2NlcHRzWyBzLmRhdGFUeXBlc1sgMCBdIF0gK1xyXG5cdFx0XHRcdFx0KCBzLmRhdGFUeXBlc1sgMCBdICE9PSBcIipcIiA/IFwiLCBcIiArIGFsbFR5cGVzICsgXCI7IHE9MC4wMVwiIDogXCJcIiApIDpcclxuXHRcdFx0XHRzLmFjY2VwdHNbIFwiKlwiIF1cclxuXHRcdCk7XHJcblxyXG5cdFx0Ly8gQ2hlY2sgZm9yIGhlYWRlcnMgb3B0aW9uXHJcblx0XHRmb3IgKCBpIGluIHMuaGVhZGVycyApIHtcclxuXHRcdFx0anFYSFIuc2V0UmVxdWVzdEhlYWRlciggaSwgcy5oZWFkZXJzWyBpIF0gKTtcclxuXHRcdH1cclxuXHJcblx0XHQvLyBBbGxvdyBjdXN0b20gaGVhZGVycy9taW1ldHlwZXMgYW5kIGVhcmx5IGFib3J0XHJcblx0XHRpZiAoIHMuYmVmb3JlU2VuZCAmJlxyXG5cdFx0XHQoIHMuYmVmb3JlU2VuZC5jYWxsKCBjYWxsYmFja0NvbnRleHQsIGpxWEhSLCBzICkgPT09IGZhbHNlIHx8IHN0YXRlID09PSAyICkgKSB7XHJcblxyXG5cdFx0XHQvLyBBYm9ydCBpZiBub3QgZG9uZSBhbHJlYWR5IGFuZCByZXR1cm5cclxuXHRcdFx0cmV0dXJuIGpxWEhSLmFib3J0KCk7XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gQWJvcnRpbmcgaXMgbm8gbG9uZ2VyIGEgY2FuY2VsbGF0aW9uXHJcblx0XHRzdHJBYm9ydCA9IFwiYWJvcnRcIjtcclxuXHJcblx0XHQvLyBJbnN0YWxsIGNhbGxiYWNrcyBvbiBkZWZlcnJlZHNcclxuXHRcdGZvciAoIGkgaW4geyBzdWNjZXNzOiAxLCBlcnJvcjogMSwgY29tcGxldGU6IDEgfSApIHtcclxuXHRcdFx0anFYSFJbIGkgXSggc1sgaSBdICk7XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gR2V0IHRyYW5zcG9ydFxyXG5cdFx0dHJhbnNwb3J0ID0gaW5zcGVjdFByZWZpbHRlcnNPclRyYW5zcG9ydHMoIHRyYW5zcG9ydHMsIHMsIG9wdGlvbnMsIGpxWEhSICk7XHJcblxyXG5cdFx0Ly8gSWYgbm8gdHJhbnNwb3J0LCB3ZSBhdXRvLWFib3J0XHJcblx0XHRpZiAoICF0cmFuc3BvcnQgKSB7XHJcblx0XHRcdGRvbmUoIC0xLCBcIk5vIFRyYW5zcG9ydFwiICk7XHJcblx0XHR9IGVsc2Uge1xyXG5cdFx0XHRqcVhIUi5yZWFkeVN0YXRlID0gMTtcclxuXHJcblx0XHRcdC8vIFNlbmQgZ2xvYmFsIGV2ZW50XHJcblx0XHRcdGlmICggZmlyZUdsb2JhbHMgKSB7XHJcblx0XHRcdFx0Z2xvYmFsRXZlbnRDb250ZXh0LnRyaWdnZXIoIFwiYWpheFNlbmRcIiwgWyBqcVhIUiwgcyBdICk7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdC8vIElmIHJlcXVlc3Qgd2FzIGFib3J0ZWQgaW5zaWRlIGFqYXhTZW5kLCBzdG9wIHRoZXJlXHJcblx0XHRcdGlmICggc3RhdGUgPT09IDIgKSB7XHJcblx0XHRcdFx0cmV0dXJuIGpxWEhSO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHQvLyBUaW1lb3V0XHJcblx0XHRcdGlmICggcy5hc3luYyAmJiBzLnRpbWVvdXQgPiAwICkge1xyXG5cdFx0XHRcdHRpbWVvdXRUaW1lciA9IHdpbmRvdy5zZXRUaW1lb3V0KCBmdW5jdGlvbigpIHtcclxuXHRcdFx0XHRcdGpxWEhSLmFib3J0KCBcInRpbWVvdXRcIiApO1xyXG5cdFx0XHRcdH0sIHMudGltZW91dCApO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHR0cnkge1xyXG5cdFx0XHRcdHN0YXRlID0gMTtcclxuXHRcdFx0XHR0cmFuc3BvcnQuc2VuZCggcmVxdWVzdEhlYWRlcnMsIGRvbmUgKTtcclxuXHRcdFx0fSBjYXRjaCAoIGUgKSB7XHJcblxyXG5cdFx0XHRcdC8vIFByb3BhZ2F0ZSBleGNlcHRpb24gYXMgZXJyb3IgaWYgbm90IGRvbmVcclxuXHRcdFx0XHRpZiAoIHN0YXRlIDwgMiApIHtcclxuXHRcdFx0XHRcdGRvbmUoIC0xLCBlICk7XHJcblxyXG5cdFx0XHRcdC8vIFNpbXBseSByZXRocm93IG90aGVyd2lzZVxyXG5cdFx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0XHR0aHJvdyBlO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cclxuXHRcdC8vIENhbGxiYWNrIGZvciB3aGVuIGV2ZXJ5dGhpbmcgaXMgZG9uZVxyXG5cdFx0ZnVuY3Rpb24gZG9uZSggc3RhdHVzLCBuYXRpdmVTdGF0dXNUZXh0LCByZXNwb25zZXMsIGhlYWRlcnMgKSB7XHJcblx0XHRcdHZhciBpc1N1Y2Nlc3MsIHN1Y2Nlc3MsIGVycm9yLCByZXNwb25zZSwgbW9kaWZpZWQsXHJcblx0XHRcdFx0c3RhdHVzVGV4dCA9IG5hdGl2ZVN0YXR1c1RleHQ7XHJcblxyXG5cdFx0XHQvLyBDYWxsZWQgb25jZVxyXG5cdFx0XHRpZiAoIHN0YXRlID09PSAyICkge1xyXG5cdFx0XHRcdHJldHVybjtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0Ly8gU3RhdGUgaXMgXCJkb25lXCIgbm93XHJcblx0XHRcdHN0YXRlID0gMjtcclxuXHJcblx0XHRcdC8vIENsZWFyIHRpbWVvdXQgaWYgaXQgZXhpc3RzXHJcblx0XHRcdGlmICggdGltZW91dFRpbWVyICkge1xyXG5cdFx0XHRcdHdpbmRvdy5jbGVhclRpbWVvdXQoIHRpbWVvdXRUaW1lciApO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHQvLyBEZXJlZmVyZW5jZSB0cmFuc3BvcnQgZm9yIGVhcmx5IGdhcmJhZ2UgY29sbGVjdGlvblxyXG5cdFx0XHQvLyAobm8gbWF0dGVyIGhvdyBsb25nIHRoZSBqcVhIUiBvYmplY3Qgd2lsbCBiZSB1c2VkKVxyXG5cdFx0XHR0cmFuc3BvcnQgPSB1bmRlZmluZWQ7XHJcblxyXG5cdFx0XHQvLyBDYWNoZSByZXNwb25zZSBoZWFkZXJzXHJcblx0XHRcdHJlc3BvbnNlSGVhZGVyc1N0cmluZyA9IGhlYWRlcnMgfHwgXCJcIjtcclxuXHJcblx0XHRcdC8vIFNldCByZWFkeVN0YXRlXHJcblx0XHRcdGpxWEhSLnJlYWR5U3RhdGUgPSBzdGF0dXMgPiAwID8gNCA6IDA7XHJcblxyXG5cdFx0XHQvLyBEZXRlcm1pbmUgaWYgc3VjY2Vzc2Z1bFxyXG5cdFx0XHRpc1N1Y2Nlc3MgPSBzdGF0dXMgPj0gMjAwICYmIHN0YXR1cyA8IDMwMCB8fCBzdGF0dXMgPT09IDMwNDtcclxuXHJcblx0XHRcdC8vIEdldCByZXNwb25zZSBkYXRhXHJcblx0XHRcdGlmICggcmVzcG9uc2VzICkge1xyXG5cdFx0XHRcdHJlc3BvbnNlID0gYWpheEhhbmRsZVJlc3BvbnNlcyggcywganFYSFIsIHJlc3BvbnNlcyApO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHQvLyBDb252ZXJ0IG5vIG1hdHRlciB3aGF0ICh0aGF0IHdheSByZXNwb25zZVhYWCBmaWVsZHMgYXJlIGFsd2F5cyBzZXQpXHJcblx0XHRcdHJlc3BvbnNlID0gYWpheENvbnZlcnQoIHMsIHJlc3BvbnNlLCBqcVhIUiwgaXNTdWNjZXNzICk7XHJcblxyXG5cdFx0XHQvLyBJZiBzdWNjZXNzZnVsLCBoYW5kbGUgdHlwZSBjaGFpbmluZ1xyXG5cdFx0XHRpZiAoIGlzU3VjY2VzcyApIHtcclxuXHJcblx0XHRcdFx0Ly8gU2V0IHRoZSBJZi1Nb2RpZmllZC1TaW5jZSBhbmQvb3IgSWYtTm9uZS1NYXRjaCBoZWFkZXIsIGlmIGluIGlmTW9kaWZpZWQgbW9kZS5cclxuXHRcdFx0XHRpZiAoIHMuaWZNb2RpZmllZCApIHtcclxuXHRcdFx0XHRcdG1vZGlmaWVkID0ganFYSFIuZ2V0UmVzcG9uc2VIZWFkZXIoIFwiTGFzdC1Nb2RpZmllZFwiICk7XHJcblx0XHRcdFx0XHRpZiAoIG1vZGlmaWVkICkge1xyXG5cdFx0XHRcdFx0XHRqUXVlcnkubGFzdE1vZGlmaWVkWyBjYWNoZVVSTCBdID0gbW9kaWZpZWQ7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRtb2RpZmllZCA9IGpxWEhSLmdldFJlc3BvbnNlSGVhZGVyKCBcImV0YWdcIiApO1xyXG5cdFx0XHRcdFx0aWYgKCBtb2RpZmllZCApIHtcclxuXHRcdFx0XHRcdFx0alF1ZXJ5LmV0YWdbIGNhY2hlVVJMIF0gPSBtb2RpZmllZDtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdC8vIGlmIG5vIGNvbnRlbnRcclxuXHRcdFx0XHRpZiAoIHN0YXR1cyA9PT0gMjA0IHx8IHMudHlwZSA9PT0gXCJIRUFEXCIgKSB7XHJcblx0XHRcdFx0XHRzdGF0dXNUZXh0ID0gXCJub2NvbnRlbnRcIjtcclxuXHJcblx0XHRcdFx0Ly8gaWYgbm90IG1vZGlmaWVkXHJcblx0XHRcdFx0fSBlbHNlIGlmICggc3RhdHVzID09PSAzMDQgKSB7XHJcblx0XHRcdFx0XHRzdGF0dXNUZXh0ID0gXCJub3Rtb2RpZmllZFwiO1xyXG5cclxuXHRcdFx0XHQvLyBJZiB3ZSBoYXZlIGRhdGEsIGxldCdzIGNvbnZlcnQgaXRcclxuXHRcdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdFx0c3RhdHVzVGV4dCA9IHJlc3BvbnNlLnN0YXRlO1xyXG5cdFx0XHRcdFx0c3VjY2VzcyA9IHJlc3BvbnNlLmRhdGE7XHJcblx0XHRcdFx0XHRlcnJvciA9IHJlc3BvbnNlLmVycm9yO1xyXG5cdFx0XHRcdFx0aXNTdWNjZXNzID0gIWVycm9yO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fSBlbHNlIHtcclxuXHJcblx0XHRcdFx0Ly8gRXh0cmFjdCBlcnJvciBmcm9tIHN0YXR1c1RleHQgYW5kIG5vcm1hbGl6ZSBmb3Igbm9uLWFib3J0c1xyXG5cdFx0XHRcdGVycm9yID0gc3RhdHVzVGV4dDtcclxuXHRcdFx0XHRpZiAoIHN0YXR1cyB8fCAhc3RhdHVzVGV4dCApIHtcclxuXHRcdFx0XHRcdHN0YXR1c1RleHQgPSBcImVycm9yXCI7XHJcblx0XHRcdFx0XHRpZiAoIHN0YXR1cyA8IDAgKSB7XHJcblx0XHRcdFx0XHRcdHN0YXR1cyA9IDA7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHQvLyBTZXQgZGF0YSBmb3IgdGhlIGZha2UgeGhyIG9iamVjdFxyXG5cdFx0XHRqcVhIUi5zdGF0dXMgPSBzdGF0dXM7XHJcblx0XHRcdGpxWEhSLnN0YXR1c1RleHQgPSAoIG5hdGl2ZVN0YXR1c1RleHQgfHwgc3RhdHVzVGV4dCApICsgXCJcIjtcclxuXHJcblx0XHRcdC8vIFN1Y2Nlc3MvRXJyb3JcclxuXHRcdFx0aWYgKCBpc1N1Y2Nlc3MgKSB7XHJcblx0XHRcdFx0ZGVmZXJyZWQucmVzb2x2ZVdpdGgoIGNhbGxiYWNrQ29udGV4dCwgWyBzdWNjZXNzLCBzdGF0dXNUZXh0LCBqcVhIUiBdICk7XHJcblx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0ZGVmZXJyZWQucmVqZWN0V2l0aCggY2FsbGJhY2tDb250ZXh0LCBbIGpxWEhSLCBzdGF0dXNUZXh0LCBlcnJvciBdICk7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdC8vIFN0YXR1cy1kZXBlbmRlbnQgY2FsbGJhY2tzXHJcblx0XHRcdGpxWEhSLnN0YXR1c0NvZGUoIHN0YXR1c0NvZGUgKTtcclxuXHRcdFx0c3RhdHVzQ29kZSA9IHVuZGVmaW5lZDtcclxuXHJcblx0XHRcdGlmICggZmlyZUdsb2JhbHMgKSB7XHJcblx0XHRcdFx0Z2xvYmFsRXZlbnRDb250ZXh0LnRyaWdnZXIoIGlzU3VjY2VzcyA/IFwiYWpheFN1Y2Nlc3NcIiA6IFwiYWpheEVycm9yXCIsXHJcblx0XHRcdFx0XHRbIGpxWEhSLCBzLCBpc1N1Y2Nlc3MgPyBzdWNjZXNzIDogZXJyb3IgXSApO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHQvLyBDb21wbGV0ZVxyXG5cdFx0XHRjb21wbGV0ZURlZmVycmVkLmZpcmVXaXRoKCBjYWxsYmFja0NvbnRleHQsIFsganFYSFIsIHN0YXR1c1RleHQgXSApO1xyXG5cclxuXHRcdFx0aWYgKCBmaXJlR2xvYmFscyApIHtcclxuXHRcdFx0XHRnbG9iYWxFdmVudENvbnRleHQudHJpZ2dlciggXCJhamF4Q29tcGxldGVcIiwgWyBqcVhIUiwgcyBdICk7XHJcblxyXG5cdFx0XHRcdC8vIEhhbmRsZSB0aGUgZ2xvYmFsIEFKQVggY291bnRlclxyXG5cdFx0XHRcdGlmICggISggLS1qUXVlcnkuYWN0aXZlICkgKSB7XHJcblx0XHRcdFx0XHRqUXVlcnkuZXZlbnQudHJpZ2dlciggXCJhamF4U3RvcFwiICk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHR9XHJcblxyXG5cdFx0cmV0dXJuIGpxWEhSO1xyXG5cdH0sXHJcblxyXG5cdGdldEpTT046IGZ1bmN0aW9uKCB1cmwsIGRhdGEsIGNhbGxiYWNrICkge1xyXG5cdFx0cmV0dXJuIGpRdWVyeS5nZXQoIHVybCwgZGF0YSwgY2FsbGJhY2ssIFwianNvblwiICk7XHJcblx0fSxcclxuXHJcblx0Z2V0U2NyaXB0OiBmdW5jdGlvbiggdXJsLCBjYWxsYmFjayApIHtcclxuXHRcdHJldHVybiBqUXVlcnkuZ2V0KCB1cmwsIHVuZGVmaW5lZCwgY2FsbGJhY2ssIFwic2NyaXB0XCIgKTtcclxuXHR9XHJcbn0gKTtcclxuXHJcbmpRdWVyeS5lYWNoKCBbIFwiZ2V0XCIsIFwicG9zdFwiIF0sIGZ1bmN0aW9uKCBpLCBtZXRob2QgKSB7XHJcblx0alF1ZXJ5WyBtZXRob2QgXSA9IGZ1bmN0aW9uKCB1cmwsIGRhdGEsIGNhbGxiYWNrLCB0eXBlICkge1xyXG5cclxuXHRcdC8vIFNoaWZ0IGFyZ3VtZW50cyBpZiBkYXRhIGFyZ3VtZW50IHdhcyBvbWl0dGVkXHJcblx0XHRpZiAoIGpRdWVyeS5pc0Z1bmN0aW9uKCBkYXRhICkgKSB7XHJcblx0XHRcdHR5cGUgPSB0eXBlIHx8IGNhbGxiYWNrO1xyXG5cdFx0XHRjYWxsYmFjayA9IGRhdGE7XHJcblx0XHRcdGRhdGEgPSB1bmRlZmluZWQ7XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gVGhlIHVybCBjYW4gYmUgYW4gb3B0aW9ucyBvYmplY3QgKHdoaWNoIHRoZW4gbXVzdCBoYXZlIC51cmwpXHJcblx0XHRyZXR1cm4galF1ZXJ5LmFqYXgoIGpRdWVyeS5leHRlbmQoIHtcclxuXHRcdFx0dXJsOiB1cmwsXHJcblx0XHRcdHR5cGU6IG1ldGhvZCxcclxuXHRcdFx0ZGF0YVR5cGU6IHR5cGUsXHJcblx0XHRcdGRhdGE6IGRhdGEsXHJcblx0XHRcdHN1Y2Nlc3M6IGNhbGxiYWNrXHJcblx0XHR9LCBqUXVlcnkuaXNQbGFpbk9iamVjdCggdXJsICkgJiYgdXJsICkgKTtcclxuXHR9O1xyXG59ICk7XHJcblxyXG5cclxualF1ZXJ5Ll9ldmFsVXJsID0gZnVuY3Rpb24oIHVybCApIHtcclxuXHRyZXR1cm4galF1ZXJ5LmFqYXgoIHtcclxuXHRcdHVybDogdXJsLFxyXG5cclxuXHRcdC8vIE1ha2UgdGhpcyBleHBsaWNpdCwgc2luY2UgdXNlciBjYW4gb3ZlcnJpZGUgdGhpcyB0aHJvdWdoIGFqYXhTZXR1cCAoIzExMjY0KVxyXG5cdFx0dHlwZTogXCJHRVRcIixcclxuXHRcdGRhdGFUeXBlOiBcInNjcmlwdFwiLFxyXG5cdFx0YXN5bmM6IGZhbHNlLFxyXG5cdFx0Z2xvYmFsOiBmYWxzZSxcclxuXHRcdFwidGhyb3dzXCI6IHRydWVcclxuXHR9ICk7XHJcbn07XHJcblxyXG5cclxualF1ZXJ5LmZuLmV4dGVuZCgge1xyXG5cdHdyYXBBbGw6IGZ1bmN0aW9uKCBodG1sICkge1xyXG5cdFx0dmFyIHdyYXA7XHJcblxyXG5cdFx0aWYgKCBqUXVlcnkuaXNGdW5jdGlvbiggaHRtbCApICkge1xyXG5cdFx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbiggaSApIHtcclxuXHRcdFx0XHRqUXVlcnkoIHRoaXMgKS53cmFwQWxsKCBodG1sLmNhbGwoIHRoaXMsIGkgKSApO1xyXG5cdFx0XHR9ICk7XHJcblx0XHR9XHJcblxyXG5cdFx0aWYgKCB0aGlzWyAwIF0gKSB7XHJcblxyXG5cdFx0XHQvLyBUaGUgZWxlbWVudHMgdG8gd3JhcCB0aGUgdGFyZ2V0IGFyb3VuZFxyXG5cdFx0XHR3cmFwID0galF1ZXJ5KCBodG1sLCB0aGlzWyAwIF0ub3duZXJEb2N1bWVudCApLmVxKCAwICkuY2xvbmUoIHRydWUgKTtcclxuXHJcblx0XHRcdGlmICggdGhpc1sgMCBdLnBhcmVudE5vZGUgKSB7XHJcblx0XHRcdFx0d3JhcC5pbnNlcnRCZWZvcmUoIHRoaXNbIDAgXSApO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHR3cmFwLm1hcCggZnVuY3Rpb24oKSB7XHJcblx0XHRcdFx0dmFyIGVsZW0gPSB0aGlzO1xyXG5cclxuXHRcdFx0XHR3aGlsZSAoIGVsZW0uZmlyc3RFbGVtZW50Q2hpbGQgKSB7XHJcblx0XHRcdFx0XHRlbGVtID0gZWxlbS5maXJzdEVsZW1lbnRDaGlsZDtcclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdHJldHVybiBlbGVtO1xyXG5cdFx0XHR9ICkuYXBwZW5kKCB0aGlzICk7XHJcblx0XHR9XHJcblxyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblx0fSxcclxuXHJcblx0d3JhcElubmVyOiBmdW5jdGlvbiggaHRtbCApIHtcclxuXHRcdGlmICggalF1ZXJ5LmlzRnVuY3Rpb24oIGh0bWwgKSApIHtcclxuXHRcdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oIGkgKSB7XHJcblx0XHRcdFx0alF1ZXJ5KCB0aGlzICkud3JhcElubmVyKCBodG1sLmNhbGwoIHRoaXMsIGkgKSApO1xyXG5cdFx0XHR9ICk7XHJcblx0XHR9XHJcblxyXG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XHJcblx0XHRcdHZhciBzZWxmID0galF1ZXJ5KCB0aGlzICksXHJcblx0XHRcdFx0Y29udGVudHMgPSBzZWxmLmNvbnRlbnRzKCk7XHJcblxyXG5cdFx0XHRpZiAoIGNvbnRlbnRzLmxlbmd0aCApIHtcclxuXHRcdFx0XHRjb250ZW50cy53cmFwQWxsKCBodG1sICk7XHJcblxyXG5cdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdHNlbGYuYXBwZW5kKCBodG1sICk7XHJcblx0XHRcdH1cclxuXHRcdH0gKTtcclxuXHR9LFxyXG5cclxuXHR3cmFwOiBmdW5jdGlvbiggaHRtbCApIHtcclxuXHRcdHZhciBpc0Z1bmN0aW9uID0galF1ZXJ5LmlzRnVuY3Rpb24oIGh0bWwgKTtcclxuXHJcblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbiggaSApIHtcclxuXHRcdFx0alF1ZXJ5KCB0aGlzICkud3JhcEFsbCggaXNGdW5jdGlvbiA/IGh0bWwuY2FsbCggdGhpcywgaSApIDogaHRtbCApO1xyXG5cdFx0fSApO1xyXG5cdH0sXHJcblxyXG5cdHVud3JhcDogZnVuY3Rpb24oKSB7XHJcblx0XHRyZXR1cm4gdGhpcy5wYXJlbnQoKS5lYWNoKCBmdW5jdGlvbigpIHtcclxuXHRcdFx0aWYgKCAhalF1ZXJ5Lm5vZGVOYW1lKCB0aGlzLCBcImJvZHlcIiApICkge1xyXG5cdFx0XHRcdGpRdWVyeSggdGhpcyApLnJlcGxhY2VXaXRoKCB0aGlzLmNoaWxkTm9kZXMgKTtcclxuXHRcdFx0fVxyXG5cdFx0fSApLmVuZCgpO1xyXG5cdH1cclxufSApO1xyXG5cclxuXHJcbmpRdWVyeS5leHByLmZpbHRlcnMuaGlkZGVuID0gZnVuY3Rpb24oIGVsZW0gKSB7XHJcblx0cmV0dXJuICFqUXVlcnkuZXhwci5maWx0ZXJzLnZpc2libGUoIGVsZW0gKTtcclxufTtcclxualF1ZXJ5LmV4cHIuZmlsdGVycy52aXNpYmxlID0gZnVuY3Rpb24oIGVsZW0gKSB7XHJcblxyXG5cdC8vIFN1cHBvcnQ6IE9wZXJhIDw9IDEyLjEyXHJcblx0Ly8gT3BlcmEgcmVwb3J0cyBvZmZzZXRXaWR0aHMgYW5kIG9mZnNldEhlaWdodHMgbGVzcyB0aGFuIHplcm8gb24gc29tZSBlbGVtZW50c1xyXG5cdC8vIFVzZSBPUiBpbnN0ZWFkIG9mIEFORCBhcyB0aGUgZWxlbWVudCBpcyBub3QgdmlzaWJsZSBpZiBlaXRoZXIgaXMgdHJ1ZVxyXG5cdC8vIFNlZSB0aWNrZXRzICMxMDQwNiBhbmQgIzEzMTMyXHJcblx0cmV0dXJuIGVsZW0ub2Zmc2V0V2lkdGggPiAwIHx8IGVsZW0ub2Zmc2V0SGVpZ2h0ID4gMCB8fCBlbGVtLmdldENsaWVudFJlY3RzKCkubGVuZ3RoID4gMDtcclxufTtcclxuXHJcblxyXG5cclxuXHJcbnZhciByMjAgPSAvJTIwL2csXHJcblx0cmJyYWNrZXQgPSAvXFxbXFxdJC8sXHJcblx0ckNSTEYgPSAvXFxyP1xcbi9nLFxyXG5cdHJzdWJtaXR0ZXJUeXBlcyA9IC9eKD86c3VibWl0fGJ1dHRvbnxpbWFnZXxyZXNldHxmaWxlKSQvaSxcclxuXHRyc3VibWl0dGFibGUgPSAvXig/OmlucHV0fHNlbGVjdHx0ZXh0YXJlYXxrZXlnZW4pL2k7XHJcblxyXG5mdW5jdGlvbiBidWlsZFBhcmFtcyggcHJlZml4LCBvYmosIHRyYWRpdGlvbmFsLCBhZGQgKSB7XHJcblx0dmFyIG5hbWU7XHJcblxyXG5cdGlmICggalF1ZXJ5LmlzQXJyYXkoIG9iaiApICkge1xyXG5cclxuXHRcdC8vIFNlcmlhbGl6ZSBhcnJheSBpdGVtLlxyXG5cdFx0alF1ZXJ5LmVhY2goIG9iaiwgZnVuY3Rpb24oIGksIHYgKSB7XHJcblx0XHRcdGlmICggdHJhZGl0aW9uYWwgfHwgcmJyYWNrZXQudGVzdCggcHJlZml4ICkgKSB7XHJcblxyXG5cdFx0XHRcdC8vIFRyZWF0IGVhY2ggYXJyYXkgaXRlbSBhcyBhIHNjYWxhci5cclxuXHRcdFx0XHRhZGQoIHByZWZpeCwgdiApO1xyXG5cclxuXHRcdFx0fSBlbHNlIHtcclxuXHJcblx0XHRcdFx0Ly8gSXRlbSBpcyBub24tc2NhbGFyIChhcnJheSBvciBvYmplY3QpLCBlbmNvZGUgaXRzIG51bWVyaWMgaW5kZXguXHJcblx0XHRcdFx0YnVpbGRQYXJhbXMoXHJcblx0XHRcdFx0XHRwcmVmaXggKyBcIltcIiArICggdHlwZW9mIHYgPT09IFwib2JqZWN0XCIgJiYgdiAhPSBudWxsID8gaSA6IFwiXCIgKSArIFwiXVwiLFxyXG5cdFx0XHRcdFx0dixcclxuXHRcdFx0XHRcdHRyYWRpdGlvbmFsLFxyXG5cdFx0XHRcdFx0YWRkXHJcblx0XHRcdFx0KTtcclxuXHRcdFx0fVxyXG5cdFx0fSApO1xyXG5cclxuXHR9IGVsc2UgaWYgKCAhdHJhZGl0aW9uYWwgJiYgalF1ZXJ5LnR5cGUoIG9iaiApID09PSBcIm9iamVjdFwiICkge1xyXG5cclxuXHRcdC8vIFNlcmlhbGl6ZSBvYmplY3QgaXRlbS5cclxuXHRcdGZvciAoIG5hbWUgaW4gb2JqICkge1xyXG5cdFx0XHRidWlsZFBhcmFtcyggcHJlZml4ICsgXCJbXCIgKyBuYW1lICsgXCJdXCIsIG9ialsgbmFtZSBdLCB0cmFkaXRpb25hbCwgYWRkICk7XHJcblx0XHR9XHJcblxyXG5cdH0gZWxzZSB7XHJcblxyXG5cdFx0Ly8gU2VyaWFsaXplIHNjYWxhciBpdGVtLlxyXG5cdFx0YWRkKCBwcmVmaXgsIG9iaiApO1xyXG5cdH1cclxufVxyXG5cclxuLy8gU2VyaWFsaXplIGFuIGFycmF5IG9mIGZvcm0gZWxlbWVudHMgb3IgYSBzZXQgb2ZcclxuLy8ga2V5L3ZhbHVlcyBpbnRvIGEgcXVlcnkgc3RyaW5nXHJcbmpRdWVyeS5wYXJhbSA9IGZ1bmN0aW9uKCBhLCB0cmFkaXRpb25hbCApIHtcclxuXHR2YXIgcHJlZml4LFxyXG5cdFx0cyA9IFtdLFxyXG5cdFx0YWRkID0gZnVuY3Rpb24oIGtleSwgdmFsdWUgKSB7XHJcblxyXG5cdFx0XHQvLyBJZiB2YWx1ZSBpcyBhIGZ1bmN0aW9uLCBpbnZva2UgaXQgYW5kIHJldHVybiBpdHMgdmFsdWVcclxuXHRcdFx0dmFsdWUgPSBqUXVlcnkuaXNGdW5jdGlvbiggdmFsdWUgKSA/IHZhbHVlKCkgOiAoIHZhbHVlID09IG51bGwgPyBcIlwiIDogdmFsdWUgKTtcclxuXHRcdFx0c1sgcy5sZW5ndGggXSA9IGVuY29kZVVSSUNvbXBvbmVudCgga2V5ICkgKyBcIj1cIiArIGVuY29kZVVSSUNvbXBvbmVudCggdmFsdWUgKTtcclxuXHRcdH07XHJcblxyXG5cdC8vIFNldCB0cmFkaXRpb25hbCB0byB0cnVlIGZvciBqUXVlcnkgPD0gMS4zLjIgYmVoYXZpb3IuXHJcblx0aWYgKCB0cmFkaXRpb25hbCA9PT0gdW5kZWZpbmVkICkge1xyXG5cdFx0dHJhZGl0aW9uYWwgPSBqUXVlcnkuYWpheFNldHRpbmdzICYmIGpRdWVyeS5hamF4U2V0dGluZ3MudHJhZGl0aW9uYWw7XHJcblx0fVxyXG5cclxuXHQvLyBJZiBhbiBhcnJheSB3YXMgcGFzc2VkIGluLCBhc3N1bWUgdGhhdCBpdCBpcyBhbiBhcnJheSBvZiBmb3JtIGVsZW1lbnRzLlxyXG5cdGlmICggalF1ZXJ5LmlzQXJyYXkoIGEgKSB8fCAoIGEuanF1ZXJ5ICYmICFqUXVlcnkuaXNQbGFpbk9iamVjdCggYSApICkgKSB7XHJcblxyXG5cdFx0Ly8gU2VyaWFsaXplIHRoZSBmb3JtIGVsZW1lbnRzXHJcblx0XHRqUXVlcnkuZWFjaCggYSwgZnVuY3Rpb24oKSB7XHJcblx0XHRcdGFkZCggdGhpcy5uYW1lLCB0aGlzLnZhbHVlICk7XHJcblx0XHR9ICk7XHJcblxyXG5cdH0gZWxzZSB7XHJcblxyXG5cdFx0Ly8gSWYgdHJhZGl0aW9uYWwsIGVuY29kZSB0aGUgXCJvbGRcIiB3YXkgKHRoZSB3YXkgMS4zLjIgb3Igb2xkZXJcclxuXHRcdC8vIGRpZCBpdCksIG90aGVyd2lzZSBlbmNvZGUgcGFyYW1zIHJlY3Vyc2l2ZWx5LlxyXG5cdFx0Zm9yICggcHJlZml4IGluIGEgKSB7XHJcblx0XHRcdGJ1aWxkUGFyYW1zKCBwcmVmaXgsIGFbIHByZWZpeCBdLCB0cmFkaXRpb25hbCwgYWRkICk7XHJcblx0XHR9XHJcblx0fVxyXG5cclxuXHQvLyBSZXR1cm4gdGhlIHJlc3VsdGluZyBzZXJpYWxpemF0aW9uXHJcblx0cmV0dXJuIHMuam9pbiggXCImXCIgKS5yZXBsYWNlKCByMjAsIFwiK1wiICk7XHJcbn07XHJcblxyXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XHJcblx0c2VyaWFsaXplOiBmdW5jdGlvbigpIHtcclxuXHRcdHJldHVybiBqUXVlcnkucGFyYW0oIHRoaXMuc2VyaWFsaXplQXJyYXkoKSApO1xyXG5cdH0sXHJcblx0c2VyaWFsaXplQXJyYXk6IGZ1bmN0aW9uKCkge1xyXG5cdFx0cmV0dXJuIHRoaXMubWFwKCBmdW5jdGlvbigpIHtcclxuXHJcblx0XHRcdC8vIENhbiBhZGQgcHJvcEhvb2sgZm9yIFwiZWxlbWVudHNcIiB0byBmaWx0ZXIgb3IgYWRkIGZvcm0gZWxlbWVudHNcclxuXHRcdFx0dmFyIGVsZW1lbnRzID0galF1ZXJ5LnByb3AoIHRoaXMsIFwiZWxlbWVudHNcIiApO1xyXG5cdFx0XHRyZXR1cm4gZWxlbWVudHMgPyBqUXVlcnkubWFrZUFycmF5KCBlbGVtZW50cyApIDogdGhpcztcclxuXHRcdH0gKVxyXG5cdFx0LmZpbHRlciggZnVuY3Rpb24oKSB7XHJcblx0XHRcdHZhciB0eXBlID0gdGhpcy50eXBlO1xyXG5cclxuXHRcdFx0Ly8gVXNlIC5pcyggXCI6ZGlzYWJsZWRcIiApIHNvIHRoYXQgZmllbGRzZXRbZGlzYWJsZWRdIHdvcmtzXHJcblx0XHRcdHJldHVybiB0aGlzLm5hbWUgJiYgIWpRdWVyeSggdGhpcyApLmlzKCBcIjpkaXNhYmxlZFwiICkgJiZcclxuXHRcdFx0XHRyc3VibWl0dGFibGUudGVzdCggdGhpcy5ub2RlTmFtZSApICYmICFyc3VibWl0dGVyVHlwZXMudGVzdCggdHlwZSApICYmXHJcblx0XHRcdFx0KCB0aGlzLmNoZWNrZWQgfHwgIXJjaGVja2FibGVUeXBlLnRlc3QoIHR5cGUgKSApO1xyXG5cdFx0fSApXHJcblx0XHQubWFwKCBmdW5jdGlvbiggaSwgZWxlbSApIHtcclxuXHRcdFx0dmFyIHZhbCA9IGpRdWVyeSggdGhpcyApLnZhbCgpO1xyXG5cclxuXHRcdFx0cmV0dXJuIHZhbCA9PSBudWxsID9cclxuXHRcdFx0XHRudWxsIDpcclxuXHRcdFx0XHRqUXVlcnkuaXNBcnJheSggdmFsICkgP1xyXG5cdFx0XHRcdFx0alF1ZXJ5Lm1hcCggdmFsLCBmdW5jdGlvbiggdmFsICkge1xyXG5cdFx0XHRcdFx0XHRyZXR1cm4geyBuYW1lOiBlbGVtLm5hbWUsIHZhbHVlOiB2YWwucmVwbGFjZSggckNSTEYsIFwiXFxyXFxuXCIgKSB9O1xyXG5cdFx0XHRcdFx0fSApIDpcclxuXHRcdFx0XHRcdHsgbmFtZTogZWxlbS5uYW1lLCB2YWx1ZTogdmFsLnJlcGxhY2UoIHJDUkxGLCBcIlxcclxcblwiICkgfTtcclxuXHRcdH0gKS5nZXQoKTtcclxuXHR9XHJcbn0gKTtcclxuXHJcblxyXG5qUXVlcnkuYWpheFNldHRpbmdzLnhociA9IGZ1bmN0aW9uKCkge1xyXG5cdHRyeSB7XHJcblx0XHRyZXR1cm4gbmV3IHdpbmRvdy5YTUxIdHRwUmVxdWVzdCgpO1xyXG5cdH0gY2F0Y2ggKCBlICkge31cclxufTtcclxuXHJcbnZhciB4aHJTdWNjZXNzU3RhdHVzID0ge1xyXG5cclxuXHRcdC8vIEZpbGUgcHJvdG9jb2wgYWx3YXlzIHlpZWxkcyBzdGF0dXMgY29kZSAwLCBhc3N1bWUgMjAwXHJcblx0XHQwOiAyMDAsXHJcblxyXG5cdFx0Ly8gU3VwcG9ydDogSUU5XHJcblx0XHQvLyAjMTQ1MDogc29tZXRpbWVzIElFIHJldHVybnMgMTIyMyB3aGVuIGl0IHNob3VsZCBiZSAyMDRcclxuXHRcdDEyMjM6IDIwNFxyXG5cdH0sXHJcblx0eGhyU3VwcG9ydGVkID0galF1ZXJ5LmFqYXhTZXR0aW5ncy54aHIoKTtcclxuXHJcbnN1cHBvcnQuY29ycyA9ICEheGhyU3VwcG9ydGVkICYmICggXCJ3aXRoQ3JlZGVudGlhbHNcIiBpbiB4aHJTdXBwb3J0ZWQgKTtcclxuc3VwcG9ydC5hamF4ID0geGhyU3VwcG9ydGVkID0gISF4aHJTdXBwb3J0ZWQ7XHJcblxyXG5qUXVlcnkuYWpheFRyYW5zcG9ydCggZnVuY3Rpb24oIG9wdGlvbnMgKSB7XHJcblx0dmFyIGNhbGxiYWNrLCBlcnJvckNhbGxiYWNrO1xyXG5cclxuXHQvLyBDcm9zcyBkb21haW4gb25seSBhbGxvd2VkIGlmIHN1cHBvcnRlZCB0aHJvdWdoIFhNTEh0dHBSZXF1ZXN0XHJcblx0aWYgKCBzdXBwb3J0LmNvcnMgfHwgeGhyU3VwcG9ydGVkICYmICFvcHRpb25zLmNyb3NzRG9tYWluICkge1xyXG5cdFx0cmV0dXJuIHtcclxuXHRcdFx0c2VuZDogZnVuY3Rpb24oIGhlYWRlcnMsIGNvbXBsZXRlICkge1xyXG5cdFx0XHRcdHZhciBpLFxyXG5cdFx0XHRcdFx0eGhyID0gb3B0aW9ucy54aHIoKTtcclxuXHJcblx0XHRcdFx0eGhyLm9wZW4oXHJcblx0XHRcdFx0XHRvcHRpb25zLnR5cGUsXHJcblx0XHRcdFx0XHRvcHRpb25zLnVybCxcclxuXHRcdFx0XHRcdG9wdGlvbnMuYXN5bmMsXHJcblx0XHRcdFx0XHRvcHRpb25zLnVzZXJuYW1lLFxyXG5cdFx0XHRcdFx0b3B0aW9ucy5wYXNzd29yZFxyXG5cdFx0XHRcdCk7XHJcblxyXG5cdFx0XHRcdC8vIEFwcGx5IGN1c3RvbSBmaWVsZHMgaWYgcHJvdmlkZWRcclxuXHRcdFx0XHRpZiAoIG9wdGlvbnMueGhyRmllbGRzICkge1xyXG5cdFx0XHRcdFx0Zm9yICggaSBpbiBvcHRpb25zLnhockZpZWxkcyApIHtcclxuXHRcdFx0XHRcdFx0eGhyWyBpIF0gPSBvcHRpb25zLnhockZpZWxkc1sgaSBdO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0Ly8gT3ZlcnJpZGUgbWltZSB0eXBlIGlmIG5lZWRlZFxyXG5cdFx0XHRcdGlmICggb3B0aW9ucy5taW1lVHlwZSAmJiB4aHIub3ZlcnJpZGVNaW1lVHlwZSApIHtcclxuXHRcdFx0XHRcdHhoci5vdmVycmlkZU1pbWVUeXBlKCBvcHRpb25zLm1pbWVUeXBlICk7XHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHQvLyBYLVJlcXVlc3RlZC1XaXRoIGhlYWRlclxyXG5cdFx0XHRcdC8vIEZvciBjcm9zcy1kb21haW4gcmVxdWVzdHMsIHNlZWluZyBhcyBjb25kaXRpb25zIGZvciBhIHByZWZsaWdodCBhcmVcclxuXHRcdFx0XHQvLyBha2luIHRvIGEgamlnc2F3IHB1enpsZSwgd2Ugc2ltcGx5IG5ldmVyIHNldCBpdCB0byBiZSBzdXJlLlxyXG5cdFx0XHRcdC8vIChpdCBjYW4gYWx3YXlzIGJlIHNldCBvbiBhIHBlci1yZXF1ZXN0IGJhc2lzIG9yIGV2ZW4gdXNpbmcgYWpheFNldHVwKVxyXG5cdFx0XHRcdC8vIEZvciBzYW1lLWRvbWFpbiByZXF1ZXN0cywgd29uJ3QgY2hhbmdlIGhlYWRlciBpZiBhbHJlYWR5IHByb3ZpZGVkLlxyXG5cdFx0XHRcdGlmICggIW9wdGlvbnMuY3Jvc3NEb21haW4gJiYgIWhlYWRlcnNbIFwiWC1SZXF1ZXN0ZWQtV2l0aFwiIF0gKSB7XHJcblx0XHRcdFx0XHRoZWFkZXJzWyBcIlgtUmVxdWVzdGVkLVdpdGhcIiBdID0gXCJYTUxIdHRwUmVxdWVzdFwiO1xyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0Ly8gU2V0IGhlYWRlcnNcclxuXHRcdFx0XHRmb3IgKCBpIGluIGhlYWRlcnMgKSB7XHJcblx0XHRcdFx0XHR4aHIuc2V0UmVxdWVzdEhlYWRlciggaSwgaGVhZGVyc1sgaSBdICk7XHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHQvLyBDYWxsYmFja1xyXG5cdFx0XHRcdGNhbGxiYWNrID0gZnVuY3Rpb24oIHR5cGUgKSB7XHJcblx0XHRcdFx0XHRyZXR1cm4gZnVuY3Rpb24oKSB7XHJcblx0XHRcdFx0XHRcdGlmICggY2FsbGJhY2sgKSB7XHJcblx0XHRcdFx0XHRcdFx0Y2FsbGJhY2sgPSBlcnJvckNhbGxiYWNrID0geGhyLm9ubG9hZCA9XHJcblx0XHRcdFx0XHRcdFx0XHR4aHIub25lcnJvciA9IHhoci5vbmFib3J0ID0geGhyLm9ucmVhZHlzdGF0ZWNoYW5nZSA9IG51bGw7XHJcblxyXG5cdFx0XHRcdFx0XHRcdGlmICggdHlwZSA9PT0gXCJhYm9ydFwiICkge1xyXG5cdFx0XHRcdFx0XHRcdFx0eGhyLmFib3J0KCk7XHJcblx0XHRcdFx0XHRcdFx0fSBlbHNlIGlmICggdHlwZSA9PT0gXCJlcnJvclwiICkge1xyXG5cclxuXHRcdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFOVxyXG5cdFx0XHRcdFx0XHRcdFx0Ly8gT24gYSBtYW51YWwgbmF0aXZlIGFib3J0LCBJRTkgdGhyb3dzXHJcblx0XHRcdFx0XHRcdFx0XHQvLyBlcnJvcnMgb24gYW55IHByb3BlcnR5IGFjY2VzcyB0aGF0IGlzIG5vdCByZWFkeVN0YXRlXHJcblx0XHRcdFx0XHRcdFx0XHRpZiAoIHR5cGVvZiB4aHIuc3RhdHVzICE9PSBcIm51bWJlclwiICkge1xyXG5cdFx0XHRcdFx0XHRcdFx0XHRjb21wbGV0ZSggMCwgXCJlcnJvclwiICk7XHJcblx0XHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdFx0XHRcdFx0XHRjb21wbGV0ZShcclxuXHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gRmlsZTogcHJvdG9jb2wgYWx3YXlzIHlpZWxkcyBzdGF0dXMgMDsgc2VlICM4NjA1LCAjMTQyMDdcclxuXHRcdFx0XHRcdFx0XHRcdFx0XHR4aHIuc3RhdHVzLFxyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdHhoci5zdGF0dXNUZXh0XHJcblx0XHRcdFx0XHRcdFx0XHRcdCk7XHJcblx0XHRcdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRcdFx0XHRcdGNvbXBsZXRlKFxyXG5cdFx0XHRcdFx0XHRcdFx0XHR4aHJTdWNjZXNzU3RhdHVzWyB4aHIuc3RhdHVzIF0gfHwgeGhyLnN0YXR1cyxcclxuXHRcdFx0XHRcdFx0XHRcdFx0eGhyLnN0YXR1c1RleHQsXHJcblxyXG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRTkgb25seVxyXG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBJRTkgaGFzIG5vIFhIUjIgYnV0IHRocm93cyBvbiBiaW5hcnkgKHRyYWMtMTE0MjYpXHJcblx0XHRcdFx0XHRcdFx0XHRcdC8vIEZvciBYSFIyIG5vbi10ZXh0LCBsZXQgdGhlIGNhbGxlciBoYW5kbGUgaXQgKGdoLTI0OTgpXHJcblx0XHRcdFx0XHRcdFx0XHRcdCggeGhyLnJlc3BvbnNlVHlwZSB8fCBcInRleHRcIiApICE9PSBcInRleHRcIiAgfHxcclxuXHRcdFx0XHRcdFx0XHRcdFx0dHlwZW9mIHhoci5yZXNwb25zZVRleHQgIT09IFwic3RyaW5nXCIgP1xyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdHsgYmluYXJ5OiB4aHIucmVzcG9uc2UgfSA6XHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0eyB0ZXh0OiB4aHIucmVzcG9uc2VUZXh0IH0sXHJcblx0XHRcdFx0XHRcdFx0XHRcdHhoci5nZXRBbGxSZXNwb25zZUhlYWRlcnMoKVxyXG5cdFx0XHRcdFx0XHRcdFx0KTtcclxuXHRcdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdH07XHJcblx0XHRcdFx0fTtcclxuXHJcblx0XHRcdFx0Ly8gTGlzdGVuIHRvIGV2ZW50c1xyXG5cdFx0XHRcdHhoci5vbmxvYWQgPSBjYWxsYmFjaygpO1xyXG5cdFx0XHRcdGVycm9yQ2FsbGJhY2sgPSB4aHIub25lcnJvciA9IGNhbGxiYWNrKCBcImVycm9yXCIgKTtcclxuXHJcblx0XHRcdFx0Ly8gU3VwcG9ydDogSUU5XHJcblx0XHRcdFx0Ly8gVXNlIG9ucmVhZHlzdGF0ZWNoYW5nZSB0byByZXBsYWNlIG9uYWJvcnRcclxuXHRcdFx0XHQvLyB0byBoYW5kbGUgdW5jYXVnaHQgYWJvcnRzXHJcblx0XHRcdFx0aWYgKCB4aHIub25hYm9ydCAhPT0gdW5kZWZpbmVkICkge1xyXG5cdFx0XHRcdFx0eGhyLm9uYWJvcnQgPSBlcnJvckNhbGxiYWNrO1xyXG5cdFx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0XHR4aHIub25yZWFkeXN0YXRlY2hhbmdlID0gZnVuY3Rpb24oKSB7XHJcblxyXG5cdFx0XHRcdFx0XHQvLyBDaGVjayByZWFkeVN0YXRlIGJlZm9yZSB0aW1lb3V0IGFzIGl0IGNoYW5nZXNcclxuXHRcdFx0XHRcdFx0aWYgKCB4aHIucmVhZHlTdGF0ZSA9PT0gNCApIHtcclxuXHJcblx0XHRcdFx0XHRcdFx0Ly8gQWxsb3cgb25lcnJvciB0byBiZSBjYWxsZWQgZmlyc3QsXHJcblx0XHRcdFx0XHRcdFx0Ly8gYnV0IHRoYXQgd2lsbCBub3QgaGFuZGxlIGEgbmF0aXZlIGFib3J0XHJcblx0XHRcdFx0XHRcdFx0Ly8gQWxzbywgc2F2ZSBlcnJvckNhbGxiYWNrIHRvIGEgdmFyaWFibGVcclxuXHRcdFx0XHRcdFx0XHQvLyBhcyB4aHIub25lcnJvciBjYW5ub3QgYmUgYWNjZXNzZWRcclxuXHRcdFx0XHRcdFx0XHR3aW5kb3cuc2V0VGltZW91dCggZnVuY3Rpb24oKSB7XHJcblx0XHRcdFx0XHRcdFx0XHRpZiAoIGNhbGxiYWNrICkge1xyXG5cdFx0XHRcdFx0XHRcdFx0XHRlcnJvckNhbGxiYWNrKCk7XHJcblx0XHRcdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdFx0fSApO1xyXG5cdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHR9O1xyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0Ly8gQ3JlYXRlIHRoZSBhYm9ydCBjYWxsYmFja1xyXG5cdFx0XHRcdGNhbGxiYWNrID0gY2FsbGJhY2soIFwiYWJvcnRcIiApO1xyXG5cclxuXHRcdFx0XHR0cnkge1xyXG5cclxuXHRcdFx0XHRcdC8vIERvIHNlbmQgdGhlIHJlcXVlc3QgKHRoaXMgbWF5IHJhaXNlIGFuIGV4Y2VwdGlvbilcclxuXHRcdFx0XHRcdHhoci5zZW5kKCBvcHRpb25zLmhhc0NvbnRlbnQgJiYgb3B0aW9ucy5kYXRhIHx8IG51bGwgKTtcclxuXHRcdFx0XHR9IGNhdGNoICggZSApIHtcclxuXHJcblx0XHRcdFx0XHQvLyAjMTQ2ODM6IE9ubHkgcmV0aHJvdyBpZiB0aGlzIGhhc24ndCBiZWVuIG5vdGlmaWVkIGFzIGFuIGVycm9yIHlldFxyXG5cdFx0XHRcdFx0aWYgKCBjYWxsYmFjayApIHtcclxuXHRcdFx0XHRcdFx0dGhyb3cgZTtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9XHJcblx0XHRcdH0sXHJcblxyXG5cdFx0XHRhYm9ydDogZnVuY3Rpb24oKSB7XHJcblx0XHRcdFx0aWYgKCBjYWxsYmFjayApIHtcclxuXHRcdFx0XHRcdGNhbGxiYWNrKCk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHR9O1xyXG5cdH1cclxufSApO1xyXG5cclxuXHJcblxyXG5cclxuLy8gSW5zdGFsbCBzY3JpcHQgZGF0YVR5cGVcclxualF1ZXJ5LmFqYXhTZXR1cCgge1xyXG5cdGFjY2VwdHM6IHtcclxuXHRcdHNjcmlwdDogXCJ0ZXh0L2phdmFzY3JpcHQsIGFwcGxpY2F0aW9uL2phdmFzY3JpcHQsIFwiICtcclxuXHRcdFx0XCJhcHBsaWNhdGlvbi9lY21hc2NyaXB0LCBhcHBsaWNhdGlvbi94LWVjbWFzY3JpcHRcIlxyXG5cdH0sXHJcblx0Y29udGVudHM6IHtcclxuXHRcdHNjcmlwdDogL1xcYig/OmphdmF8ZWNtYSlzY3JpcHRcXGIvXHJcblx0fSxcclxuXHRjb252ZXJ0ZXJzOiB7XHJcblx0XHRcInRleHQgc2NyaXB0XCI6IGZ1bmN0aW9uKCB0ZXh0ICkge1xyXG5cdFx0XHRqUXVlcnkuZ2xvYmFsRXZhbCggdGV4dCApO1xyXG5cdFx0XHRyZXR1cm4gdGV4dDtcclxuXHRcdH1cclxuXHR9XHJcbn0gKTtcclxuXHJcbi8vIEhhbmRsZSBjYWNoZSdzIHNwZWNpYWwgY2FzZSBhbmQgY3Jvc3NEb21haW5cclxualF1ZXJ5LmFqYXhQcmVmaWx0ZXIoIFwic2NyaXB0XCIsIGZ1bmN0aW9uKCBzICkge1xyXG5cdGlmICggcy5jYWNoZSA9PT0gdW5kZWZpbmVkICkge1xyXG5cdFx0cy5jYWNoZSA9IGZhbHNlO1xyXG5cdH1cclxuXHRpZiAoIHMuY3Jvc3NEb21haW4gKSB7XHJcblx0XHRzLnR5cGUgPSBcIkdFVFwiO1xyXG5cdH1cclxufSApO1xyXG5cclxuLy8gQmluZCBzY3JpcHQgdGFnIGhhY2sgdHJhbnNwb3J0XHJcbmpRdWVyeS5hamF4VHJhbnNwb3J0KCBcInNjcmlwdFwiLCBmdW5jdGlvbiggcyApIHtcclxuXHJcblx0Ly8gVGhpcyB0cmFuc3BvcnQgb25seSBkZWFscyB3aXRoIGNyb3NzIGRvbWFpbiByZXF1ZXN0c1xyXG5cdGlmICggcy5jcm9zc0RvbWFpbiApIHtcclxuXHRcdHZhciBzY3JpcHQsIGNhbGxiYWNrO1xyXG5cdFx0cmV0dXJuIHtcclxuXHRcdFx0c2VuZDogZnVuY3Rpb24oIF8sIGNvbXBsZXRlICkge1xyXG5cdFx0XHRcdHNjcmlwdCA9IGpRdWVyeSggXCI8c2NyaXB0PlwiICkucHJvcCgge1xyXG5cdFx0XHRcdFx0Y2hhcnNldDogcy5zY3JpcHRDaGFyc2V0LFxyXG5cdFx0XHRcdFx0c3JjOiBzLnVybFxyXG5cdFx0XHRcdH0gKS5vbihcclxuXHRcdFx0XHRcdFwibG9hZCBlcnJvclwiLFxyXG5cdFx0XHRcdFx0Y2FsbGJhY2sgPSBmdW5jdGlvbiggZXZ0ICkge1xyXG5cdFx0XHRcdFx0XHRzY3JpcHQucmVtb3ZlKCk7XHJcblx0XHRcdFx0XHRcdGNhbGxiYWNrID0gbnVsbDtcclxuXHRcdFx0XHRcdFx0aWYgKCBldnQgKSB7XHJcblx0XHRcdFx0XHRcdFx0Y29tcGxldGUoIGV2dC50eXBlID09PSBcImVycm9yXCIgPyA0MDQgOiAyMDAsIGV2dC50eXBlICk7XHJcblx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHQpO1xyXG5cclxuXHRcdFx0XHQvLyBVc2UgbmF0aXZlIERPTSBtYW5pcHVsYXRpb24gdG8gYXZvaWQgb3VyIGRvbU1hbmlwIEFKQVggdHJpY2tlcnlcclxuXHRcdFx0XHRkb2N1bWVudC5oZWFkLmFwcGVuZENoaWxkKCBzY3JpcHRbIDAgXSApO1xyXG5cdFx0XHR9LFxyXG5cdFx0XHRhYm9ydDogZnVuY3Rpb24oKSB7XHJcblx0XHRcdFx0aWYgKCBjYWxsYmFjayApIHtcclxuXHRcdFx0XHRcdGNhbGxiYWNrKCk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHR9O1xyXG5cdH1cclxufSApO1xyXG5cclxuXHJcblxyXG5cclxudmFyIG9sZENhbGxiYWNrcyA9IFtdLFxyXG5cdHJqc29ucCA9IC8oPSlcXD8oPz0mfCQpfFxcP1xcPy87XHJcblxyXG4vLyBEZWZhdWx0IGpzb25wIHNldHRpbmdzXHJcbmpRdWVyeS5hamF4U2V0dXAoIHtcclxuXHRqc29ucDogXCJjYWxsYmFja1wiLFxyXG5cdGpzb25wQ2FsbGJhY2s6IGZ1bmN0aW9uKCkge1xyXG5cdFx0dmFyIGNhbGxiYWNrID0gb2xkQ2FsbGJhY2tzLnBvcCgpIHx8ICggalF1ZXJ5LmV4cGFuZG8gKyBcIl9cIiArICggbm9uY2UrKyApICk7XHJcblx0XHR0aGlzWyBjYWxsYmFjayBdID0gdHJ1ZTtcclxuXHRcdHJldHVybiBjYWxsYmFjaztcclxuXHR9XHJcbn0gKTtcclxuXHJcbi8vIERldGVjdCwgbm9ybWFsaXplIG9wdGlvbnMgYW5kIGluc3RhbGwgY2FsbGJhY2tzIGZvciBqc29ucCByZXF1ZXN0c1xyXG5qUXVlcnkuYWpheFByZWZpbHRlciggXCJqc29uIGpzb25wXCIsIGZ1bmN0aW9uKCBzLCBvcmlnaW5hbFNldHRpbmdzLCBqcVhIUiApIHtcclxuXHJcblx0dmFyIGNhbGxiYWNrTmFtZSwgb3ZlcndyaXR0ZW4sIHJlc3BvbnNlQ29udGFpbmVyLFxyXG5cdFx0anNvblByb3AgPSBzLmpzb25wICE9PSBmYWxzZSAmJiAoIHJqc29ucC50ZXN0KCBzLnVybCApID9cclxuXHRcdFx0XCJ1cmxcIiA6XHJcblx0XHRcdHR5cGVvZiBzLmRhdGEgPT09IFwic3RyaW5nXCIgJiZcclxuXHRcdFx0XHQoIHMuY29udGVudFR5cGUgfHwgXCJcIiApXHJcblx0XHRcdFx0XHQuaW5kZXhPZiggXCJhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWRcIiApID09PSAwICYmXHJcblx0XHRcdFx0cmpzb25wLnRlc3QoIHMuZGF0YSApICYmIFwiZGF0YVwiXHJcblx0XHQpO1xyXG5cclxuXHQvLyBIYW5kbGUgaWZmIHRoZSBleHBlY3RlZCBkYXRhIHR5cGUgaXMgXCJqc29ucFwiIG9yIHdlIGhhdmUgYSBwYXJhbWV0ZXIgdG8gc2V0XHJcblx0aWYgKCBqc29uUHJvcCB8fCBzLmRhdGFUeXBlc1sgMCBdID09PSBcImpzb25wXCIgKSB7XHJcblxyXG5cdFx0Ly8gR2V0IGNhbGxiYWNrIG5hbWUsIHJlbWVtYmVyaW5nIHByZWV4aXN0aW5nIHZhbHVlIGFzc29jaWF0ZWQgd2l0aCBpdFxyXG5cdFx0Y2FsbGJhY2tOYW1lID0gcy5qc29ucENhbGxiYWNrID0galF1ZXJ5LmlzRnVuY3Rpb24oIHMuanNvbnBDYWxsYmFjayApID9cclxuXHRcdFx0cy5qc29ucENhbGxiYWNrKCkgOlxyXG5cdFx0XHRzLmpzb25wQ2FsbGJhY2s7XHJcblxyXG5cdFx0Ly8gSW5zZXJ0IGNhbGxiYWNrIGludG8gdXJsIG9yIGZvcm0gZGF0YVxyXG5cdFx0aWYgKCBqc29uUHJvcCApIHtcclxuXHRcdFx0c1sganNvblByb3AgXSA9IHNbIGpzb25Qcm9wIF0ucmVwbGFjZSggcmpzb25wLCBcIiQxXCIgKyBjYWxsYmFja05hbWUgKTtcclxuXHRcdH0gZWxzZSBpZiAoIHMuanNvbnAgIT09IGZhbHNlICkge1xyXG5cdFx0XHRzLnVybCArPSAoIHJxdWVyeS50ZXN0KCBzLnVybCApID8gXCImXCIgOiBcIj9cIiApICsgcy5qc29ucCArIFwiPVwiICsgY2FsbGJhY2tOYW1lO1xyXG5cdFx0fVxyXG5cclxuXHRcdC8vIFVzZSBkYXRhIGNvbnZlcnRlciB0byByZXRyaWV2ZSBqc29uIGFmdGVyIHNjcmlwdCBleGVjdXRpb25cclxuXHRcdHMuY29udmVydGVyc1sgXCJzY3JpcHQganNvblwiIF0gPSBmdW5jdGlvbigpIHtcclxuXHRcdFx0aWYgKCAhcmVzcG9uc2VDb250YWluZXIgKSB7XHJcblx0XHRcdFx0alF1ZXJ5LmVycm9yKCBjYWxsYmFja05hbWUgKyBcIiB3YXMgbm90IGNhbGxlZFwiICk7XHJcblx0XHRcdH1cclxuXHRcdFx0cmV0dXJuIHJlc3BvbnNlQ29udGFpbmVyWyAwIF07XHJcblx0XHR9O1xyXG5cclxuXHRcdC8vIEZvcmNlIGpzb24gZGF0YVR5cGVcclxuXHRcdHMuZGF0YVR5cGVzWyAwIF0gPSBcImpzb25cIjtcclxuXHJcblx0XHQvLyBJbnN0YWxsIGNhbGxiYWNrXHJcblx0XHRvdmVyd3JpdHRlbiA9IHdpbmRvd1sgY2FsbGJhY2tOYW1lIF07XHJcblx0XHR3aW5kb3dbIGNhbGxiYWNrTmFtZSBdID0gZnVuY3Rpb24oKSB7XHJcblx0XHRcdHJlc3BvbnNlQ29udGFpbmVyID0gYXJndW1lbnRzO1xyXG5cdFx0fTtcclxuXHJcblx0XHQvLyBDbGVhbi11cCBmdW5jdGlvbiAoZmlyZXMgYWZ0ZXIgY29udmVydGVycylcclxuXHRcdGpxWEhSLmFsd2F5cyggZnVuY3Rpb24oKSB7XHJcblxyXG5cdFx0XHQvLyBJZiBwcmV2aW91cyB2YWx1ZSBkaWRuJ3QgZXhpc3QgLSByZW1vdmUgaXRcclxuXHRcdFx0aWYgKCBvdmVyd3JpdHRlbiA9PT0gdW5kZWZpbmVkICkge1xyXG5cdFx0XHRcdGpRdWVyeSggd2luZG93ICkucmVtb3ZlUHJvcCggY2FsbGJhY2tOYW1lICk7XHJcblxyXG5cdFx0XHQvLyBPdGhlcndpc2UgcmVzdG9yZSBwcmVleGlzdGluZyB2YWx1ZVxyXG5cdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdHdpbmRvd1sgY2FsbGJhY2tOYW1lIF0gPSBvdmVyd3JpdHRlbjtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0Ly8gU2F2ZSBiYWNrIGFzIGZyZWVcclxuXHRcdFx0aWYgKCBzWyBjYWxsYmFja05hbWUgXSApIHtcclxuXHJcblx0XHRcdFx0Ly8gTWFrZSBzdXJlIHRoYXQgcmUtdXNpbmcgdGhlIG9wdGlvbnMgZG9lc24ndCBzY3JldyB0aGluZ3MgYXJvdW5kXHJcblx0XHRcdFx0cy5qc29ucENhbGxiYWNrID0gb3JpZ2luYWxTZXR0aW5ncy5qc29ucENhbGxiYWNrO1xyXG5cclxuXHRcdFx0XHQvLyBTYXZlIHRoZSBjYWxsYmFjayBuYW1lIGZvciBmdXR1cmUgdXNlXHJcblx0XHRcdFx0b2xkQ2FsbGJhY2tzLnB1c2goIGNhbGxiYWNrTmFtZSApO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHQvLyBDYWxsIGlmIGl0IHdhcyBhIGZ1bmN0aW9uIGFuZCB3ZSBoYXZlIGEgcmVzcG9uc2VcclxuXHRcdFx0aWYgKCByZXNwb25zZUNvbnRhaW5lciAmJiBqUXVlcnkuaXNGdW5jdGlvbiggb3ZlcndyaXR0ZW4gKSApIHtcclxuXHRcdFx0XHRvdmVyd3JpdHRlbiggcmVzcG9uc2VDb250YWluZXJbIDAgXSApO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRyZXNwb25zZUNvbnRhaW5lciA9IG92ZXJ3cml0dGVuID0gdW5kZWZpbmVkO1xyXG5cdFx0fSApO1xyXG5cclxuXHRcdC8vIERlbGVnYXRlIHRvIHNjcmlwdFxyXG5cdFx0cmV0dXJuIFwic2NyaXB0XCI7XHJcblx0fVxyXG59ICk7XHJcblxyXG5cclxuXHJcblxyXG4vLyBTdXBwb3J0OiBTYWZhcmkgOCtcclxuLy8gSW4gU2FmYXJpIDggZG9jdW1lbnRzIGNyZWF0ZWQgdmlhIGRvY3VtZW50LmltcGxlbWVudGF0aW9uLmNyZWF0ZUhUTUxEb2N1bWVudFxyXG4vLyBjb2xsYXBzZSBzaWJsaW5nIGZvcm1zOiB0aGUgc2Vjb25kIG9uZSBiZWNvbWVzIGEgY2hpbGQgb2YgdGhlIGZpcnN0IG9uZS5cclxuLy8gQmVjYXVzZSBvZiB0aGF0LCB0aGlzIHNlY3VyaXR5IG1lYXN1cmUgaGFzIHRvIGJlIGRpc2FibGVkIGluIFNhZmFyaSA4LlxyXG4vLyBodHRwczovL2J1Z3Mud2Via2l0Lm9yZy9zaG93X2J1Zy5jZ2k/aWQ9MTM3MzM3XHJcbnN1cHBvcnQuY3JlYXRlSFRNTERvY3VtZW50ID0gKCBmdW5jdGlvbigpIHtcclxuXHR2YXIgYm9keSA9IGRvY3VtZW50LmltcGxlbWVudGF0aW9uLmNyZWF0ZUhUTUxEb2N1bWVudCggXCJcIiApLmJvZHk7XHJcblx0Ym9keS5pbm5lckhUTUwgPSBcIjxmb3JtPjwvZm9ybT48Zm9ybT48L2Zvcm0+XCI7XHJcblx0cmV0dXJuIGJvZHkuY2hpbGROb2Rlcy5sZW5ndGggPT09IDI7XHJcbn0gKSgpO1xyXG5cclxuXHJcbi8vIEFyZ3VtZW50IFwiZGF0YVwiIHNob3VsZCBiZSBzdHJpbmcgb2YgaHRtbFxyXG4vLyBjb250ZXh0IChvcHRpb25hbCk6IElmIHNwZWNpZmllZCwgdGhlIGZyYWdtZW50IHdpbGwgYmUgY3JlYXRlZCBpbiB0aGlzIGNvbnRleHQsXHJcbi8vIGRlZmF1bHRzIHRvIGRvY3VtZW50XHJcbi8vIGtlZXBTY3JpcHRzIChvcHRpb25hbCk6IElmIHRydWUsIHdpbGwgaW5jbHVkZSBzY3JpcHRzIHBhc3NlZCBpbiB0aGUgaHRtbCBzdHJpbmdcclxualF1ZXJ5LnBhcnNlSFRNTCA9IGZ1bmN0aW9uKCBkYXRhLCBjb250ZXh0LCBrZWVwU2NyaXB0cyApIHtcclxuXHRpZiAoICFkYXRhIHx8IHR5cGVvZiBkYXRhICE9PSBcInN0cmluZ1wiICkge1xyXG5cdFx0cmV0dXJuIG51bGw7XHJcblx0fVxyXG5cdGlmICggdHlwZW9mIGNvbnRleHQgPT09IFwiYm9vbGVhblwiICkge1xyXG5cdFx0a2VlcFNjcmlwdHMgPSBjb250ZXh0O1xyXG5cdFx0Y29udGV4dCA9IGZhbHNlO1xyXG5cdH1cclxuXHJcblx0Ly8gU3RvcCBzY3JpcHRzIG9yIGlubGluZSBldmVudCBoYW5kbGVycyBmcm9tIGJlaW5nIGV4ZWN1dGVkIGltbWVkaWF0ZWx5XHJcblx0Ly8gYnkgdXNpbmcgZG9jdW1lbnQuaW1wbGVtZW50YXRpb25cclxuXHRjb250ZXh0ID0gY29udGV4dCB8fCAoIHN1cHBvcnQuY3JlYXRlSFRNTERvY3VtZW50ID9cclxuXHRcdGRvY3VtZW50LmltcGxlbWVudGF0aW9uLmNyZWF0ZUhUTUxEb2N1bWVudCggXCJcIiApIDpcclxuXHRcdGRvY3VtZW50ICk7XHJcblxyXG5cdHZhciBwYXJzZWQgPSByc2luZ2xlVGFnLmV4ZWMoIGRhdGEgKSxcclxuXHRcdHNjcmlwdHMgPSAha2VlcFNjcmlwdHMgJiYgW107XHJcblxyXG5cdC8vIFNpbmdsZSB0YWdcclxuXHRpZiAoIHBhcnNlZCApIHtcclxuXHRcdHJldHVybiBbIGNvbnRleHQuY3JlYXRlRWxlbWVudCggcGFyc2VkWyAxIF0gKSBdO1xyXG5cdH1cclxuXHJcblx0cGFyc2VkID0gYnVpbGRGcmFnbWVudCggWyBkYXRhIF0sIGNvbnRleHQsIHNjcmlwdHMgKTtcclxuXHJcblx0aWYgKCBzY3JpcHRzICYmIHNjcmlwdHMubGVuZ3RoICkge1xyXG5cdFx0alF1ZXJ5KCBzY3JpcHRzICkucmVtb3ZlKCk7XHJcblx0fVxyXG5cclxuXHRyZXR1cm4galF1ZXJ5Lm1lcmdlKCBbXSwgcGFyc2VkLmNoaWxkTm9kZXMgKTtcclxufTtcclxuXHJcblxyXG4vLyBLZWVwIGEgY29weSBvZiB0aGUgb2xkIGxvYWQgbWV0aG9kXHJcbnZhciBfbG9hZCA9IGpRdWVyeS5mbi5sb2FkO1xyXG5cclxuLyoqXHJcbiAqIExvYWQgYSB1cmwgaW50byBhIHBhZ2VcclxuICovXHJcbmpRdWVyeS5mbi5sb2FkID0gZnVuY3Rpb24oIHVybCwgcGFyYW1zLCBjYWxsYmFjayApIHtcclxuXHRpZiAoIHR5cGVvZiB1cmwgIT09IFwic3RyaW5nXCIgJiYgX2xvYWQgKSB7XHJcblx0XHRyZXR1cm4gX2xvYWQuYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApO1xyXG5cdH1cclxuXHJcblx0dmFyIHNlbGVjdG9yLCB0eXBlLCByZXNwb25zZSxcclxuXHRcdHNlbGYgPSB0aGlzLFxyXG5cdFx0b2ZmID0gdXJsLmluZGV4T2YoIFwiIFwiICk7XHJcblxyXG5cdGlmICggb2ZmID4gLTEgKSB7XHJcblx0XHRzZWxlY3RvciA9IGpRdWVyeS50cmltKCB1cmwuc2xpY2UoIG9mZiApICk7XHJcblx0XHR1cmwgPSB1cmwuc2xpY2UoIDAsIG9mZiApO1xyXG5cdH1cclxuXHJcblx0Ly8gSWYgaXQncyBhIGZ1bmN0aW9uXHJcblx0aWYgKCBqUXVlcnkuaXNGdW5jdGlvbiggcGFyYW1zICkgKSB7XHJcblxyXG5cdFx0Ly8gV2UgYXNzdW1lIHRoYXQgaXQncyB0aGUgY2FsbGJhY2tcclxuXHRcdGNhbGxiYWNrID0gcGFyYW1zO1xyXG5cdFx0cGFyYW1zID0gdW5kZWZpbmVkO1xyXG5cclxuXHQvLyBPdGhlcndpc2UsIGJ1aWxkIGEgcGFyYW0gc3RyaW5nXHJcblx0fSBlbHNlIGlmICggcGFyYW1zICYmIHR5cGVvZiBwYXJhbXMgPT09IFwib2JqZWN0XCIgKSB7XHJcblx0XHR0eXBlID0gXCJQT1NUXCI7XHJcblx0fVxyXG5cclxuXHQvLyBJZiB3ZSBoYXZlIGVsZW1lbnRzIHRvIG1vZGlmeSwgbWFrZSB0aGUgcmVxdWVzdFxyXG5cdGlmICggc2VsZi5sZW5ndGggPiAwICkge1xyXG5cdFx0alF1ZXJ5LmFqYXgoIHtcclxuXHRcdFx0dXJsOiB1cmwsXHJcblxyXG5cdFx0XHQvLyBJZiBcInR5cGVcIiB2YXJpYWJsZSBpcyB1bmRlZmluZWQsIHRoZW4gXCJHRVRcIiBtZXRob2Qgd2lsbCBiZSB1c2VkLlxyXG5cdFx0XHQvLyBNYWtlIHZhbHVlIG9mIHRoaXMgZmllbGQgZXhwbGljaXQgc2luY2VcclxuXHRcdFx0Ly8gdXNlciBjYW4gb3ZlcnJpZGUgaXQgdGhyb3VnaCBhamF4U2V0dXAgbWV0aG9kXHJcblx0XHRcdHR5cGU6IHR5cGUgfHwgXCJHRVRcIixcclxuXHRcdFx0ZGF0YVR5cGU6IFwiaHRtbFwiLFxyXG5cdFx0XHRkYXRhOiBwYXJhbXNcclxuXHRcdH0gKS5kb25lKCBmdW5jdGlvbiggcmVzcG9uc2VUZXh0ICkge1xyXG5cclxuXHRcdFx0Ly8gU2F2ZSByZXNwb25zZSBmb3IgdXNlIGluIGNvbXBsZXRlIGNhbGxiYWNrXHJcblx0XHRcdHJlc3BvbnNlID0gYXJndW1lbnRzO1xyXG5cclxuXHRcdFx0c2VsZi5odG1sKCBzZWxlY3RvciA/XHJcblxyXG5cdFx0XHRcdC8vIElmIGEgc2VsZWN0b3Igd2FzIHNwZWNpZmllZCwgbG9jYXRlIHRoZSByaWdodCBlbGVtZW50cyBpbiBhIGR1bW15IGRpdlxyXG5cdFx0XHRcdC8vIEV4Y2x1ZGUgc2NyaXB0cyB0byBhdm9pZCBJRSAnUGVybWlzc2lvbiBEZW5pZWQnIGVycm9yc1xyXG5cdFx0XHRcdGpRdWVyeSggXCI8ZGl2PlwiICkuYXBwZW5kKCBqUXVlcnkucGFyc2VIVE1MKCByZXNwb25zZVRleHQgKSApLmZpbmQoIHNlbGVjdG9yICkgOlxyXG5cclxuXHRcdFx0XHQvLyBPdGhlcndpc2UgdXNlIHRoZSBmdWxsIHJlc3VsdFxyXG5cdFx0XHRcdHJlc3BvbnNlVGV4dCApO1xyXG5cclxuXHRcdC8vIElmIHRoZSByZXF1ZXN0IHN1Y2NlZWRzLCB0aGlzIGZ1bmN0aW9uIGdldHMgXCJkYXRhXCIsIFwic3RhdHVzXCIsIFwianFYSFJcIlxyXG5cdFx0Ly8gYnV0IHRoZXkgYXJlIGlnbm9yZWQgYmVjYXVzZSByZXNwb25zZSB3YXMgc2V0IGFib3ZlLlxyXG5cdFx0Ly8gSWYgaXQgZmFpbHMsIHRoaXMgZnVuY3Rpb24gZ2V0cyBcImpxWEhSXCIsIFwic3RhdHVzXCIsIFwiZXJyb3JcIlxyXG5cdFx0fSApLmFsd2F5cyggY2FsbGJhY2sgJiYgZnVuY3Rpb24oIGpxWEhSLCBzdGF0dXMgKSB7XHJcblx0XHRcdHNlbGYuZWFjaCggZnVuY3Rpb24oKSB7XHJcblx0XHRcdFx0Y2FsbGJhY2suYXBwbHkoIHNlbGYsIHJlc3BvbnNlIHx8IFsganFYSFIucmVzcG9uc2VUZXh0LCBzdGF0dXMsIGpxWEhSIF0gKTtcclxuXHRcdFx0fSApO1xyXG5cdFx0fSApO1xyXG5cdH1cclxuXHJcblx0cmV0dXJuIHRoaXM7XHJcbn07XHJcblxyXG5cclxuXHJcblxyXG4vLyBBdHRhY2ggYSBidW5jaCBvZiBmdW5jdGlvbnMgZm9yIGhhbmRsaW5nIGNvbW1vbiBBSkFYIGV2ZW50c1xyXG5qUXVlcnkuZWFjaCggW1xyXG5cdFwiYWpheFN0YXJ0XCIsXHJcblx0XCJhamF4U3RvcFwiLFxyXG5cdFwiYWpheENvbXBsZXRlXCIsXHJcblx0XCJhamF4RXJyb3JcIixcclxuXHRcImFqYXhTdWNjZXNzXCIsXHJcblx0XCJhamF4U2VuZFwiXHJcbl0sIGZ1bmN0aW9uKCBpLCB0eXBlICkge1xyXG5cdGpRdWVyeS5mblsgdHlwZSBdID0gZnVuY3Rpb24oIGZuICkge1xyXG5cdFx0cmV0dXJuIHRoaXMub24oIHR5cGUsIGZuICk7XHJcblx0fTtcclxufSApO1xyXG5cclxuXHJcblxyXG5cclxualF1ZXJ5LmV4cHIuZmlsdGVycy5hbmltYXRlZCA9IGZ1bmN0aW9uKCBlbGVtICkge1xyXG5cdHJldHVybiBqUXVlcnkuZ3JlcCggalF1ZXJ5LnRpbWVycywgZnVuY3Rpb24oIGZuICkge1xyXG5cdFx0cmV0dXJuIGVsZW0gPT09IGZuLmVsZW07XHJcblx0fSApLmxlbmd0aDtcclxufTtcclxuXHJcblxyXG5cclxuXHJcbi8qKlxyXG4gKiBHZXRzIGEgd2luZG93IGZyb20gYW4gZWxlbWVudFxyXG4gKi9cclxuZnVuY3Rpb24gZ2V0V2luZG93KCBlbGVtICkge1xyXG5cdHJldHVybiBqUXVlcnkuaXNXaW5kb3coIGVsZW0gKSA/IGVsZW0gOiBlbGVtLm5vZGVUeXBlID09PSA5ICYmIGVsZW0uZGVmYXVsdFZpZXc7XHJcbn1cclxuXHJcbmpRdWVyeS5vZmZzZXQgPSB7XHJcblx0c2V0T2Zmc2V0OiBmdW5jdGlvbiggZWxlbSwgb3B0aW9ucywgaSApIHtcclxuXHRcdHZhciBjdXJQb3NpdGlvbiwgY3VyTGVmdCwgY3VyQ1NTVG9wLCBjdXJUb3AsIGN1ck9mZnNldCwgY3VyQ1NTTGVmdCwgY2FsY3VsYXRlUG9zaXRpb24sXHJcblx0XHRcdHBvc2l0aW9uID0galF1ZXJ5LmNzcyggZWxlbSwgXCJwb3NpdGlvblwiICksXHJcblx0XHRcdGN1ckVsZW0gPSBqUXVlcnkoIGVsZW0gKSxcclxuXHRcdFx0cHJvcHMgPSB7fTtcclxuXHJcblx0XHQvLyBTZXQgcG9zaXRpb24gZmlyc3QsIGluLWNhc2UgdG9wL2xlZnQgYXJlIHNldCBldmVuIG9uIHN0YXRpYyBlbGVtXHJcblx0XHRpZiAoIHBvc2l0aW9uID09PSBcInN0YXRpY1wiICkge1xyXG5cdFx0XHRlbGVtLnN0eWxlLnBvc2l0aW9uID0gXCJyZWxhdGl2ZVwiO1xyXG5cdFx0fVxyXG5cclxuXHRcdGN1ck9mZnNldCA9IGN1ckVsZW0ub2Zmc2V0KCk7XHJcblx0XHRjdXJDU1NUb3AgPSBqUXVlcnkuY3NzKCBlbGVtLCBcInRvcFwiICk7XHJcblx0XHRjdXJDU1NMZWZ0ID0galF1ZXJ5LmNzcyggZWxlbSwgXCJsZWZ0XCIgKTtcclxuXHRcdGNhbGN1bGF0ZVBvc2l0aW9uID0gKCBwb3NpdGlvbiA9PT0gXCJhYnNvbHV0ZVwiIHx8IHBvc2l0aW9uID09PSBcImZpeGVkXCIgKSAmJlxyXG5cdFx0XHQoIGN1ckNTU1RvcCArIGN1ckNTU0xlZnQgKS5pbmRleE9mKCBcImF1dG9cIiApID4gLTE7XHJcblxyXG5cdFx0Ly8gTmVlZCB0byBiZSBhYmxlIHRvIGNhbGN1bGF0ZSBwb3NpdGlvbiBpZiBlaXRoZXJcclxuXHRcdC8vIHRvcCBvciBsZWZ0IGlzIGF1dG8gYW5kIHBvc2l0aW9uIGlzIGVpdGhlciBhYnNvbHV0ZSBvciBmaXhlZFxyXG5cdFx0aWYgKCBjYWxjdWxhdGVQb3NpdGlvbiApIHtcclxuXHRcdFx0Y3VyUG9zaXRpb24gPSBjdXJFbGVtLnBvc2l0aW9uKCk7XHJcblx0XHRcdGN1clRvcCA9IGN1clBvc2l0aW9uLnRvcDtcclxuXHRcdFx0Y3VyTGVmdCA9IGN1clBvc2l0aW9uLmxlZnQ7XHJcblxyXG5cdFx0fSBlbHNlIHtcclxuXHRcdFx0Y3VyVG9wID0gcGFyc2VGbG9hdCggY3VyQ1NTVG9wICkgfHwgMDtcclxuXHRcdFx0Y3VyTGVmdCA9IHBhcnNlRmxvYXQoIGN1ckNTU0xlZnQgKSB8fCAwO1xyXG5cdFx0fVxyXG5cclxuXHRcdGlmICggalF1ZXJ5LmlzRnVuY3Rpb24oIG9wdGlvbnMgKSApIHtcclxuXHJcblx0XHRcdC8vIFVzZSBqUXVlcnkuZXh0ZW5kIGhlcmUgdG8gYWxsb3cgbW9kaWZpY2F0aW9uIG9mIGNvb3JkaW5hdGVzIGFyZ3VtZW50IChnaC0xODQ4KVxyXG5cdFx0XHRvcHRpb25zID0gb3B0aW9ucy5jYWxsKCBlbGVtLCBpLCBqUXVlcnkuZXh0ZW5kKCB7fSwgY3VyT2Zmc2V0ICkgKTtcclxuXHRcdH1cclxuXHJcblx0XHRpZiAoIG9wdGlvbnMudG9wICE9IG51bGwgKSB7XHJcblx0XHRcdHByb3BzLnRvcCA9ICggb3B0aW9ucy50b3AgLSBjdXJPZmZzZXQudG9wICkgKyBjdXJUb3A7XHJcblx0XHR9XHJcblx0XHRpZiAoIG9wdGlvbnMubGVmdCAhPSBudWxsICkge1xyXG5cdFx0XHRwcm9wcy5sZWZ0ID0gKCBvcHRpb25zLmxlZnQgLSBjdXJPZmZzZXQubGVmdCApICsgY3VyTGVmdDtcclxuXHRcdH1cclxuXHJcblx0XHRpZiAoIFwidXNpbmdcIiBpbiBvcHRpb25zICkge1xyXG5cdFx0XHRvcHRpb25zLnVzaW5nLmNhbGwoIGVsZW0sIHByb3BzICk7XHJcblxyXG5cdFx0fSBlbHNlIHtcclxuXHRcdFx0Y3VyRWxlbS5jc3MoIHByb3BzICk7XHJcblx0XHR9XHJcblx0fVxyXG59O1xyXG5cclxualF1ZXJ5LmZuLmV4dGVuZCgge1xyXG5cdG9mZnNldDogZnVuY3Rpb24oIG9wdGlvbnMgKSB7XHJcblx0XHRpZiAoIGFyZ3VtZW50cy5sZW5ndGggKSB7XHJcblx0XHRcdHJldHVybiBvcHRpb25zID09PSB1bmRlZmluZWQgP1xyXG5cdFx0XHRcdHRoaXMgOlxyXG5cdFx0XHRcdHRoaXMuZWFjaCggZnVuY3Rpb24oIGkgKSB7XHJcblx0XHRcdFx0XHRqUXVlcnkub2Zmc2V0LnNldE9mZnNldCggdGhpcywgb3B0aW9ucywgaSApO1xyXG5cdFx0XHRcdH0gKTtcclxuXHRcdH1cclxuXHJcblx0XHR2YXIgZG9jRWxlbSwgd2luLFxyXG5cdFx0XHRlbGVtID0gdGhpc1sgMCBdLFxyXG5cdFx0XHRib3ggPSB7IHRvcDogMCwgbGVmdDogMCB9LFxyXG5cdFx0XHRkb2MgPSBlbGVtICYmIGVsZW0ub3duZXJEb2N1bWVudDtcclxuXHJcblx0XHRpZiAoICFkb2MgKSB7XHJcblx0XHRcdHJldHVybjtcclxuXHRcdH1cclxuXHJcblx0XHRkb2NFbGVtID0gZG9jLmRvY3VtZW50RWxlbWVudDtcclxuXHJcblx0XHQvLyBNYWtlIHN1cmUgaXQncyBub3QgYSBkaXNjb25uZWN0ZWQgRE9NIG5vZGVcclxuXHRcdGlmICggIWpRdWVyeS5jb250YWlucyggZG9jRWxlbSwgZWxlbSApICkge1xyXG5cdFx0XHRyZXR1cm4gYm94O1xyXG5cdFx0fVxyXG5cclxuXHRcdGJveCA9IGVsZW0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XHJcblx0XHR3aW4gPSBnZXRXaW5kb3coIGRvYyApO1xyXG5cdFx0cmV0dXJuIHtcclxuXHRcdFx0dG9wOiBib3gudG9wICsgd2luLnBhZ2VZT2Zmc2V0IC0gZG9jRWxlbS5jbGllbnRUb3AsXHJcblx0XHRcdGxlZnQ6IGJveC5sZWZ0ICsgd2luLnBhZ2VYT2Zmc2V0IC0gZG9jRWxlbS5jbGllbnRMZWZ0XHJcblx0XHR9O1xyXG5cdH0sXHJcblxyXG5cdHBvc2l0aW9uOiBmdW5jdGlvbigpIHtcclxuXHRcdGlmICggIXRoaXNbIDAgXSApIHtcclxuXHRcdFx0cmV0dXJuO1xyXG5cdFx0fVxyXG5cclxuXHRcdHZhciBvZmZzZXRQYXJlbnQsIG9mZnNldCxcclxuXHRcdFx0ZWxlbSA9IHRoaXNbIDAgXSxcclxuXHRcdFx0cGFyZW50T2Zmc2V0ID0geyB0b3A6IDAsIGxlZnQ6IDAgfTtcclxuXHJcblx0XHQvLyBGaXhlZCBlbGVtZW50cyBhcmUgb2Zmc2V0IGZyb20gd2luZG93IChwYXJlbnRPZmZzZXQgPSB7dG9wOjAsIGxlZnQ6IDB9LFxyXG5cdFx0Ly8gYmVjYXVzZSBpdCBpcyBpdHMgb25seSBvZmZzZXQgcGFyZW50XHJcblx0XHRpZiAoIGpRdWVyeS5jc3MoIGVsZW0sIFwicG9zaXRpb25cIiApID09PSBcImZpeGVkXCIgKSB7XHJcblxyXG5cdFx0XHQvLyBBc3N1bWUgZ2V0Qm91bmRpbmdDbGllbnRSZWN0IGlzIHRoZXJlIHdoZW4gY29tcHV0ZWQgcG9zaXRpb24gaXMgZml4ZWRcclxuXHRcdFx0b2Zmc2V0ID0gZWxlbS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcclxuXHJcblx0XHR9IGVsc2Uge1xyXG5cclxuXHRcdFx0Ly8gR2V0ICpyZWFsKiBvZmZzZXRQYXJlbnRcclxuXHRcdFx0b2Zmc2V0UGFyZW50ID0gdGhpcy5vZmZzZXRQYXJlbnQoKTtcclxuXHJcblx0XHRcdC8vIEdldCBjb3JyZWN0IG9mZnNldHNcclxuXHRcdFx0b2Zmc2V0ID0gdGhpcy5vZmZzZXQoKTtcclxuXHRcdFx0aWYgKCAhalF1ZXJ5Lm5vZGVOYW1lKCBvZmZzZXRQYXJlbnRbIDAgXSwgXCJodG1sXCIgKSApIHtcclxuXHRcdFx0XHRwYXJlbnRPZmZzZXQgPSBvZmZzZXRQYXJlbnQub2Zmc2V0KCk7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdC8vIEFkZCBvZmZzZXRQYXJlbnQgYm9yZGVyc1xyXG5cdFx0XHRwYXJlbnRPZmZzZXQudG9wICs9IGpRdWVyeS5jc3MoIG9mZnNldFBhcmVudFsgMCBdLCBcImJvcmRlclRvcFdpZHRoXCIsIHRydWUgKTtcclxuXHRcdFx0cGFyZW50T2Zmc2V0LmxlZnQgKz0galF1ZXJ5LmNzcyggb2Zmc2V0UGFyZW50WyAwIF0sIFwiYm9yZGVyTGVmdFdpZHRoXCIsIHRydWUgKTtcclxuXHRcdH1cclxuXHJcblx0XHQvLyBTdWJ0cmFjdCBwYXJlbnQgb2Zmc2V0cyBhbmQgZWxlbWVudCBtYXJnaW5zXHJcblx0XHRyZXR1cm4ge1xyXG5cdFx0XHR0b3A6IG9mZnNldC50b3AgLSBwYXJlbnRPZmZzZXQudG9wIC0galF1ZXJ5LmNzcyggZWxlbSwgXCJtYXJnaW5Ub3BcIiwgdHJ1ZSApLFxyXG5cdFx0XHRsZWZ0OiBvZmZzZXQubGVmdCAtIHBhcmVudE9mZnNldC5sZWZ0IC0galF1ZXJ5LmNzcyggZWxlbSwgXCJtYXJnaW5MZWZ0XCIsIHRydWUgKVxyXG5cdFx0fTtcclxuXHR9LFxyXG5cclxuXHQvLyBUaGlzIG1ldGhvZCB3aWxsIHJldHVybiBkb2N1bWVudEVsZW1lbnQgaW4gdGhlIGZvbGxvd2luZyBjYXNlczpcclxuXHQvLyAxKSBGb3IgdGhlIGVsZW1lbnQgaW5zaWRlIHRoZSBpZnJhbWUgd2l0aG91dCBvZmZzZXRQYXJlbnQsIHRoaXMgbWV0aG9kIHdpbGwgcmV0dXJuXHJcblx0Ly8gICAgZG9jdW1lbnRFbGVtZW50IG9mIHRoZSBwYXJlbnQgd2luZG93XHJcblx0Ly8gMikgRm9yIHRoZSBoaWRkZW4gb3IgZGV0YWNoZWQgZWxlbWVudFxyXG5cdC8vIDMpIEZvciBib2R5IG9yIGh0bWwgZWxlbWVudCwgaS5lLiBpbiBjYXNlIG9mIHRoZSBodG1sIG5vZGUgLSBpdCB3aWxsIHJldHVybiBpdHNlbGZcclxuXHQvL1xyXG5cdC8vIGJ1dCB0aG9zZSBleGNlcHRpb25zIHdlcmUgbmV2ZXIgcHJlc2VudGVkIGFzIGEgcmVhbCBsaWZlIHVzZS1jYXNlc1xyXG5cdC8vIGFuZCBtaWdodCBiZSBjb25zaWRlcmVkIGFzIG1vcmUgcHJlZmVyYWJsZSByZXN1bHRzLlxyXG5cdC8vXHJcblx0Ly8gVGhpcyBsb2dpYywgaG93ZXZlciwgaXMgbm90IGd1YXJhbnRlZWQgYW5kIGNhbiBjaGFuZ2UgYXQgYW55IHBvaW50IGluIHRoZSBmdXR1cmVcclxuXHRvZmZzZXRQYXJlbnQ6IGZ1bmN0aW9uKCkge1xyXG5cdFx0cmV0dXJuIHRoaXMubWFwKCBmdW5jdGlvbigpIHtcclxuXHRcdFx0dmFyIG9mZnNldFBhcmVudCA9IHRoaXMub2Zmc2V0UGFyZW50O1xyXG5cclxuXHRcdFx0d2hpbGUgKCBvZmZzZXRQYXJlbnQgJiYgalF1ZXJ5LmNzcyggb2Zmc2V0UGFyZW50LCBcInBvc2l0aW9uXCIgKSA9PT0gXCJzdGF0aWNcIiApIHtcclxuXHRcdFx0XHRvZmZzZXRQYXJlbnQgPSBvZmZzZXRQYXJlbnQub2Zmc2V0UGFyZW50O1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRyZXR1cm4gb2Zmc2V0UGFyZW50IHx8IGRvY3VtZW50RWxlbWVudDtcclxuXHRcdH0gKTtcclxuXHR9XHJcbn0gKTtcclxuXHJcbi8vIENyZWF0ZSBzY3JvbGxMZWZ0IGFuZCBzY3JvbGxUb3AgbWV0aG9kc1xyXG5qUXVlcnkuZWFjaCggeyBzY3JvbGxMZWZ0OiBcInBhZ2VYT2Zmc2V0XCIsIHNjcm9sbFRvcDogXCJwYWdlWU9mZnNldFwiIH0sIGZ1bmN0aW9uKCBtZXRob2QsIHByb3AgKSB7XHJcblx0dmFyIHRvcCA9IFwicGFnZVlPZmZzZXRcIiA9PT0gcHJvcDtcclxuXHJcblx0alF1ZXJ5LmZuWyBtZXRob2QgXSA9IGZ1bmN0aW9uKCB2YWwgKSB7XHJcblx0XHRyZXR1cm4gYWNjZXNzKCB0aGlzLCBmdW5jdGlvbiggZWxlbSwgbWV0aG9kLCB2YWwgKSB7XHJcblx0XHRcdHZhciB3aW4gPSBnZXRXaW5kb3coIGVsZW0gKTtcclxuXHJcblx0XHRcdGlmICggdmFsID09PSB1bmRlZmluZWQgKSB7XHJcblx0XHRcdFx0cmV0dXJuIHdpbiA/IHdpblsgcHJvcCBdIDogZWxlbVsgbWV0aG9kIF07XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdGlmICggd2luICkge1xyXG5cdFx0XHRcdHdpbi5zY3JvbGxUbyhcclxuXHRcdFx0XHRcdCF0b3AgPyB2YWwgOiB3aW4ucGFnZVhPZmZzZXQsXHJcblx0XHRcdFx0XHR0b3AgPyB2YWwgOiB3aW4ucGFnZVlPZmZzZXRcclxuXHRcdFx0XHQpO1xyXG5cclxuXHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRlbGVtWyBtZXRob2QgXSA9IHZhbDtcclxuXHRcdFx0fVxyXG5cdFx0fSwgbWV0aG9kLCB2YWwsIGFyZ3VtZW50cy5sZW5ndGggKTtcclxuXHR9O1xyXG59ICk7XHJcblxyXG4vLyBTdXBwb3J0OiBTYWZhcmk8Ny04KywgQ2hyb21lPDM3LTQ0K1xyXG4vLyBBZGQgdGhlIHRvcC9sZWZ0IGNzc0hvb2tzIHVzaW5nIGpRdWVyeS5mbi5wb3NpdGlvblxyXG4vLyBXZWJraXQgYnVnOiBodHRwczovL2J1Z3Mud2Via2l0Lm9yZy9zaG93X2J1Zy5jZ2k/aWQ9MjkwODRcclxuLy8gQmxpbmsgYnVnOiBodHRwczovL2NvZGUuZ29vZ2xlLmNvbS9wL2Nocm9taXVtL2lzc3Vlcy9kZXRhaWw/aWQ9MjI5MjgwXHJcbi8vIGdldENvbXB1dGVkU3R5bGUgcmV0dXJucyBwZXJjZW50IHdoZW4gc3BlY2lmaWVkIGZvciB0b3AvbGVmdC9ib3R0b20vcmlnaHQ7XHJcbi8vIHJhdGhlciB0aGFuIG1ha2UgdGhlIGNzcyBtb2R1bGUgZGVwZW5kIG9uIHRoZSBvZmZzZXQgbW9kdWxlLCBqdXN0IGNoZWNrIGZvciBpdCBoZXJlXHJcbmpRdWVyeS5lYWNoKCBbIFwidG9wXCIsIFwibGVmdFwiIF0sIGZ1bmN0aW9uKCBpLCBwcm9wICkge1xyXG5cdGpRdWVyeS5jc3NIb29rc1sgcHJvcCBdID0gYWRkR2V0SG9va0lmKCBzdXBwb3J0LnBpeGVsUG9zaXRpb24sXHJcblx0XHRmdW5jdGlvbiggZWxlbSwgY29tcHV0ZWQgKSB7XHJcblx0XHRcdGlmICggY29tcHV0ZWQgKSB7XHJcblx0XHRcdFx0Y29tcHV0ZWQgPSBjdXJDU1MoIGVsZW0sIHByb3AgKTtcclxuXHJcblx0XHRcdFx0Ly8gSWYgY3VyQ1NTIHJldHVybnMgcGVyY2VudGFnZSwgZmFsbGJhY2sgdG8gb2Zmc2V0XHJcblx0XHRcdFx0cmV0dXJuIHJudW1ub25weC50ZXN0KCBjb21wdXRlZCApID9cclxuXHRcdFx0XHRcdGpRdWVyeSggZWxlbSApLnBvc2l0aW9uKClbIHByb3AgXSArIFwicHhcIiA6XHJcblx0XHRcdFx0XHRjb21wdXRlZDtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdCk7XHJcbn0gKTtcclxuXHJcblxyXG4vLyBDcmVhdGUgaW5uZXJIZWlnaHQsIGlubmVyV2lkdGgsIGhlaWdodCwgd2lkdGgsIG91dGVySGVpZ2h0IGFuZCBvdXRlcldpZHRoIG1ldGhvZHNcclxualF1ZXJ5LmVhY2goIHsgSGVpZ2h0OiBcImhlaWdodFwiLCBXaWR0aDogXCJ3aWR0aFwiIH0sIGZ1bmN0aW9uKCBuYW1lLCB0eXBlICkge1xyXG5cdGpRdWVyeS5lYWNoKCB7IHBhZGRpbmc6IFwiaW5uZXJcIiArIG5hbWUsIGNvbnRlbnQ6IHR5cGUsIFwiXCI6IFwib3V0ZXJcIiArIG5hbWUgfSxcclxuXHRcdGZ1bmN0aW9uKCBkZWZhdWx0RXh0cmEsIGZ1bmNOYW1lICkge1xyXG5cclxuXHRcdC8vIE1hcmdpbiBpcyBvbmx5IGZvciBvdXRlckhlaWdodCwgb3V0ZXJXaWR0aFxyXG5cdFx0alF1ZXJ5LmZuWyBmdW5jTmFtZSBdID0gZnVuY3Rpb24oIG1hcmdpbiwgdmFsdWUgKSB7XHJcblx0XHRcdHZhciBjaGFpbmFibGUgPSBhcmd1bWVudHMubGVuZ3RoICYmICggZGVmYXVsdEV4dHJhIHx8IHR5cGVvZiBtYXJnaW4gIT09IFwiYm9vbGVhblwiICksXHJcblx0XHRcdFx0ZXh0cmEgPSBkZWZhdWx0RXh0cmEgfHwgKCBtYXJnaW4gPT09IHRydWUgfHwgdmFsdWUgPT09IHRydWUgPyBcIm1hcmdpblwiIDogXCJib3JkZXJcIiApO1xyXG5cclxuXHRcdFx0cmV0dXJuIGFjY2VzcyggdGhpcywgZnVuY3Rpb24oIGVsZW0sIHR5cGUsIHZhbHVlICkge1xyXG5cdFx0XHRcdHZhciBkb2M7XHJcblxyXG5cdFx0XHRcdGlmICggalF1ZXJ5LmlzV2luZG93KCBlbGVtICkgKSB7XHJcblxyXG5cdFx0XHRcdFx0Ly8gQXMgb2YgNS84LzIwMTIgdGhpcyB3aWxsIHlpZWxkIGluY29ycmVjdCByZXN1bHRzIGZvciBNb2JpbGUgU2FmYXJpLCBidXQgdGhlcmVcclxuXHRcdFx0XHRcdC8vIGlzbid0IGEgd2hvbGUgbG90IHdlIGNhbiBkby4gU2VlIHB1bGwgcmVxdWVzdCBhdCB0aGlzIFVSTCBmb3IgZGlzY3Vzc2lvbjpcclxuXHRcdFx0XHRcdC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9qcXVlcnkvanF1ZXJ5L3B1bGwvNzY0XHJcblx0XHRcdFx0XHRyZXR1cm4gZWxlbS5kb2N1bWVudC5kb2N1bWVudEVsZW1lbnRbIFwiY2xpZW50XCIgKyBuYW1lIF07XHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHQvLyBHZXQgZG9jdW1lbnQgd2lkdGggb3IgaGVpZ2h0XHJcblx0XHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSA5ICkge1xyXG5cdFx0XHRcdFx0ZG9jID0gZWxlbS5kb2N1bWVudEVsZW1lbnQ7XHJcblxyXG5cdFx0XHRcdFx0Ly8gRWl0aGVyIHNjcm9sbFtXaWR0aC9IZWlnaHRdIG9yIG9mZnNldFtXaWR0aC9IZWlnaHRdIG9yIGNsaWVudFtXaWR0aC9IZWlnaHRdLFxyXG5cdFx0XHRcdFx0Ly8gd2hpY2hldmVyIGlzIGdyZWF0ZXN0XHJcblx0XHRcdFx0XHRyZXR1cm4gTWF0aC5tYXgoXHJcblx0XHRcdFx0XHRcdGVsZW0uYm9keVsgXCJzY3JvbGxcIiArIG5hbWUgXSwgZG9jWyBcInNjcm9sbFwiICsgbmFtZSBdLFxyXG5cdFx0XHRcdFx0XHRlbGVtLmJvZHlbIFwib2Zmc2V0XCIgKyBuYW1lIF0sIGRvY1sgXCJvZmZzZXRcIiArIG5hbWUgXSxcclxuXHRcdFx0XHRcdFx0ZG9jWyBcImNsaWVudFwiICsgbmFtZSBdXHJcblx0XHRcdFx0XHQpO1xyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0cmV0dXJuIHZhbHVlID09PSB1bmRlZmluZWQgP1xyXG5cclxuXHRcdFx0XHRcdC8vIEdldCB3aWR0aCBvciBoZWlnaHQgb24gdGhlIGVsZW1lbnQsIHJlcXVlc3RpbmcgYnV0IG5vdCBmb3JjaW5nIHBhcnNlRmxvYXRcclxuXHRcdFx0XHRcdGpRdWVyeS5jc3MoIGVsZW0sIHR5cGUsIGV4dHJhICkgOlxyXG5cclxuXHRcdFx0XHRcdC8vIFNldCB3aWR0aCBvciBoZWlnaHQgb24gdGhlIGVsZW1lbnRcclxuXHRcdFx0XHRcdGpRdWVyeS5zdHlsZSggZWxlbSwgdHlwZSwgdmFsdWUsIGV4dHJhICk7XHJcblx0XHRcdH0sIHR5cGUsIGNoYWluYWJsZSA/IG1hcmdpbiA6IHVuZGVmaW5lZCwgY2hhaW5hYmxlLCBudWxsICk7XHJcblx0XHR9O1xyXG5cdH0gKTtcclxufSApO1xyXG5cclxuXHJcbmpRdWVyeS5mbi5leHRlbmQoIHtcclxuXHJcblx0YmluZDogZnVuY3Rpb24oIHR5cGVzLCBkYXRhLCBmbiApIHtcclxuXHRcdHJldHVybiB0aGlzLm9uKCB0eXBlcywgbnVsbCwgZGF0YSwgZm4gKTtcclxuXHR9LFxyXG5cdHVuYmluZDogZnVuY3Rpb24oIHR5cGVzLCBmbiApIHtcclxuXHRcdHJldHVybiB0aGlzLm9mZiggdHlwZXMsIG51bGwsIGZuICk7XHJcblx0fSxcclxuXHJcblx0ZGVsZWdhdGU6IGZ1bmN0aW9uKCBzZWxlY3RvciwgdHlwZXMsIGRhdGEsIGZuICkge1xyXG5cdFx0cmV0dXJuIHRoaXMub24oIHR5cGVzLCBzZWxlY3RvciwgZGF0YSwgZm4gKTtcclxuXHR9LFxyXG5cdHVuZGVsZWdhdGU6IGZ1bmN0aW9uKCBzZWxlY3RvciwgdHlwZXMsIGZuICkge1xyXG5cclxuXHRcdC8vICggbmFtZXNwYWNlICkgb3IgKCBzZWxlY3RvciwgdHlwZXMgWywgZm5dIClcclxuXHRcdHJldHVybiBhcmd1bWVudHMubGVuZ3RoID09PSAxID9cclxuXHRcdFx0dGhpcy5vZmYoIHNlbGVjdG9yLCBcIioqXCIgKSA6XHJcblx0XHRcdHRoaXMub2ZmKCB0eXBlcywgc2VsZWN0b3IgfHwgXCIqKlwiLCBmbiApO1xyXG5cdH0sXHJcblx0c2l6ZTogZnVuY3Rpb24oKSB7XHJcblx0XHRyZXR1cm4gdGhpcy5sZW5ndGg7XHJcblx0fVxyXG59ICk7XHJcblxyXG5qUXVlcnkuZm4uYW5kU2VsZiA9IGpRdWVyeS5mbi5hZGRCYWNrO1xyXG5cclxuXHJcblxyXG5cclxuLy8gUmVnaXN0ZXIgYXMgYSBuYW1lZCBBTUQgbW9kdWxlLCBzaW5jZSBqUXVlcnkgY2FuIGJlIGNvbmNhdGVuYXRlZCB3aXRoIG90aGVyXHJcbi8vIGZpbGVzIHRoYXQgbWF5IHVzZSBkZWZpbmUsIGJ1dCBub3QgdmlhIGEgcHJvcGVyIGNvbmNhdGVuYXRpb24gc2NyaXB0IHRoYXRcclxuLy8gdW5kZXJzdGFuZHMgYW5vbnltb3VzIEFNRCBtb2R1bGVzLiBBIG5hbWVkIEFNRCBpcyBzYWZlc3QgYW5kIG1vc3Qgcm9idXN0XHJcbi8vIHdheSB0byByZWdpc3Rlci4gTG93ZXJjYXNlIGpxdWVyeSBpcyB1c2VkIGJlY2F1c2UgQU1EIG1vZHVsZSBuYW1lcyBhcmVcclxuLy8gZGVyaXZlZCBmcm9tIGZpbGUgbmFtZXMsIGFuZCBqUXVlcnkgaXMgbm9ybWFsbHkgZGVsaXZlcmVkIGluIGEgbG93ZXJjYXNlXHJcbi8vIGZpbGUgbmFtZS4gRG8gdGhpcyBhZnRlciBjcmVhdGluZyB0aGUgZ2xvYmFsIHNvIHRoYXQgaWYgYW4gQU1EIG1vZHVsZSB3YW50c1xyXG4vLyB0byBjYWxsIG5vQ29uZmxpY3QgdG8gaGlkZSB0aGlzIHZlcnNpb24gb2YgalF1ZXJ5LCBpdCB3aWxsIHdvcmsuXHJcblxyXG4vLyBOb3RlIHRoYXQgZm9yIG1heGltdW0gcG9ydGFiaWxpdHksIGxpYnJhcmllcyB0aGF0IGFyZSBub3QgalF1ZXJ5IHNob3VsZFxyXG4vLyBkZWNsYXJlIHRoZW1zZWx2ZXMgYXMgYW5vbnltb3VzIG1vZHVsZXMsIGFuZCBhdm9pZCBzZXR0aW5nIGEgZ2xvYmFsIGlmIGFuXHJcbi8vIEFNRCBsb2FkZXIgaXMgcHJlc2VudC4galF1ZXJ5IGlzIGEgc3BlY2lhbCBjYXNlLiBGb3IgbW9yZSBpbmZvcm1hdGlvbiwgc2VlXHJcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9qcmJ1cmtlL3JlcXVpcmVqcy93aWtpL1VwZGF0aW5nLWV4aXN0aW5nLWxpYnJhcmllcyN3aWtpLWFub25cclxuXHJcbmlmICggdHlwZW9mIGRlZmluZSA9PT0gXCJmdW5jdGlvblwiICYmIGRlZmluZS5hbWQgKSB7XHJcblx0ZGVmaW5lKCBcImpxdWVyeVwiLCBbXSwgZnVuY3Rpb24oKSB7XHJcblx0XHRyZXR1cm4galF1ZXJ5O1xyXG5cdH0gKTtcclxufVxyXG5cclxuXHJcblxyXG52YXJcclxuXHJcblx0Ly8gTWFwIG92ZXIgalF1ZXJ5IGluIGNhc2Ugb2Ygb3ZlcndyaXRlXHJcblx0X2pRdWVyeSA9IHdpbmRvdy5qUXVlcnksXHJcblxyXG5cdC8vIE1hcCBvdmVyIHRoZSAkIGluIGNhc2Ugb2Ygb3ZlcndyaXRlXHJcblx0XyQgPSB3aW5kb3cuJDtcclxuXHJcbmpRdWVyeS5ub0NvbmZsaWN0ID0gZnVuY3Rpb24oIGRlZXAgKSB7XHJcblx0aWYgKCB3aW5kb3cuJCA9PT0galF1ZXJ5ICkge1xyXG5cdFx0d2luZG93LiQgPSBfJDtcclxuXHR9XHJcblxyXG5cdGlmICggZGVlcCAmJiB3aW5kb3cualF1ZXJ5ID09PSBqUXVlcnkgKSB7XHJcblx0XHR3aW5kb3cualF1ZXJ5ID0gX2pRdWVyeTtcclxuXHR9XHJcblxyXG5cdHJldHVybiBqUXVlcnk7XHJcbn07XHJcblxyXG4vLyBFeHBvc2UgalF1ZXJ5IGFuZCAkIGlkZW50aWZpZXJzLCBldmVuIGluIEFNRFxyXG4vLyAoIzcxMDIjY29tbWVudDoxMCwgaHR0cHM6Ly9naXRodWIuY29tL2pxdWVyeS9qcXVlcnkvcHVsbC81NTcpXHJcbi8vIGFuZCBDb21tb25KUyBmb3IgYnJvd3NlciBlbXVsYXRvcnMgKCMxMzU2NilcclxuaWYgKCAhbm9HbG9iYWwgKSB7XHJcblx0d2luZG93LmpRdWVyeSA9IHdpbmRvdy4kID0galF1ZXJ5O1xyXG59XHJcblxyXG5yZXR1cm4galF1ZXJ5O1xyXG59KSk7XHJcbi8qISBqQ2Fyb3VzZWwgLSB2MC4zLjQgLSAyMDE1LTA5LTIzXHJcbiogaHR0cDovL3NvcmdhbGxhLmNvbS9qY2Fyb3VzZWwvXHJcbiogQ29weXJpZ2h0IChjKSAyMDA2LTIwMTUgSmFuIFNvcmdhbGxhOyBMaWNlbnNlZCBNSVQgKi9cclxuKGZ1bmN0aW9uKCQpIHtcclxuICAgICd1c2Ugc3RyaWN0JztcclxuXHJcbiAgICB2YXIgakNhcm91c2VsID0gJC5qQ2Fyb3VzZWwgPSB7fTtcclxuXHJcbiAgICBqQ2Fyb3VzZWwudmVyc2lvbiA9ICcwLjMuNCc7XHJcblxyXG4gICAgdmFyIHJSZWxhdGl2ZVRhcmdldCA9IC9eKFsrXFwtXT0pPyguKykkLztcclxuXHJcbiAgICBqQ2Fyb3VzZWwucGFyc2VUYXJnZXQgPSBmdW5jdGlvbih0YXJnZXQpIHtcclxuICAgICAgICB2YXIgcmVsYXRpdmUgPSBmYWxzZSxcclxuICAgICAgICAgICAgcGFydHMgICAgPSB0eXBlb2YgdGFyZ2V0ICE9PSAnb2JqZWN0JyA/XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIHJSZWxhdGl2ZVRhcmdldC5leGVjKHRhcmdldCkgOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICBudWxsO1xyXG5cclxuICAgICAgICBpZiAocGFydHMpIHtcclxuICAgICAgICAgICAgdGFyZ2V0ID0gcGFyc2VJbnQocGFydHNbMl0sIDEwKSB8fCAwO1xyXG5cclxuICAgICAgICAgICAgaWYgKHBhcnRzWzFdKSB7XHJcbiAgICAgICAgICAgICAgICByZWxhdGl2ZSA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICBpZiAocGFydHNbMV0gPT09ICctPScpIHtcclxuICAgICAgICAgICAgICAgICAgICB0YXJnZXQgKj0gLTE7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiB0YXJnZXQgIT09ICdvYmplY3QnKSB7XHJcbiAgICAgICAgICAgIHRhcmdldCA9IHBhcnNlSW50KHRhcmdldCwgMTApIHx8IDA7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICB0YXJnZXQ6IHRhcmdldCxcclxuICAgICAgICAgICAgcmVsYXRpdmU6IHJlbGF0aXZlXHJcbiAgICAgICAgfTtcclxuICAgIH07XHJcblxyXG4gICAgakNhcm91c2VsLmRldGVjdENhcm91c2VsID0gZnVuY3Rpb24oZWxlbWVudCkge1xyXG4gICAgICAgIHZhciBjYXJvdXNlbDtcclxuXHJcbiAgICAgICAgd2hpbGUgKGVsZW1lbnQubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICBjYXJvdXNlbCA9IGVsZW1lbnQuZmlsdGVyKCdbZGF0YS1qY2Fyb3VzZWxdJyk7XHJcblxyXG4gICAgICAgICAgICBpZiAoY2Fyb3VzZWwubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGNhcm91c2VsO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBjYXJvdXNlbCA9IGVsZW1lbnQuZmluZCgnW2RhdGEtamNhcm91c2VsXScpO1xyXG5cclxuICAgICAgICAgICAgaWYgKGNhcm91c2VsLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBjYXJvdXNlbDtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgZWxlbWVudCA9IGVsZW1lbnQucGFyZW50KCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgIH07XHJcblxyXG4gICAgakNhcm91c2VsLmJhc2UgPSBmdW5jdGlvbihwbHVnaW5OYW1lKSB7XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgdmVyc2lvbjogIGpDYXJvdXNlbC52ZXJzaW9uLFxyXG4gICAgICAgICAgICBfb3B0aW9uczogIHt9LFxyXG4gICAgICAgICAgICBfZWxlbWVudDogIG51bGwsXHJcbiAgICAgICAgICAgIF9jYXJvdXNlbDogbnVsbCxcclxuICAgICAgICAgICAgX2luaXQ6ICAgICAkLm5vb3AsXHJcbiAgICAgICAgICAgIF9jcmVhdGU6ICAgJC5ub29wLFxyXG4gICAgICAgICAgICBfZGVzdHJveTogICQubm9vcCxcclxuICAgICAgICAgICAgX3JlbG9hZDogICAkLm5vb3AsXHJcbiAgICAgICAgICAgIGNyZWF0ZTogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9lbGVtZW50XHJcbiAgICAgICAgICAgICAgICAgICAgLmF0dHIoJ2RhdGEtJyArIHBsdWdpbk5hbWUudG9Mb3dlckNhc2UoKSwgdHJ1ZSlcclxuICAgICAgICAgICAgICAgICAgICAuZGF0YShwbHVnaW5OYW1lLCB0aGlzKTtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoZmFsc2UgPT09IHRoaXMuX3RyaWdnZXIoJ2NyZWF0ZScpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgdGhpcy5fY3JlYXRlKCk7XHJcblxyXG4gICAgICAgICAgICAgICAgdGhpcy5fdHJpZ2dlcignY3JlYXRlZW5kJyk7XHJcblxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGRlc3Ryb3k6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKGZhbHNlID09PSB0aGlzLl90cmlnZ2VyKCdkZXN0cm95JykpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcztcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICB0aGlzLl9kZXN0cm95KCk7XHJcblxyXG4gICAgICAgICAgICAgICAgdGhpcy5fdHJpZ2dlcignZGVzdHJveWVuZCcpO1xyXG5cclxuICAgICAgICAgICAgICAgIHRoaXMuX2VsZW1lbnRcclxuICAgICAgICAgICAgICAgICAgICAucmVtb3ZlRGF0YShwbHVnaW5OYW1lKVxyXG4gICAgICAgICAgICAgICAgICAgIC5yZW1vdmVBdHRyKCdkYXRhLScgKyBwbHVnaW5OYW1lLnRvTG93ZXJDYXNlKCkpO1xyXG5cclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICByZWxvYWQ6IGZ1bmN0aW9uKG9wdGlvbnMpIHtcclxuICAgICAgICAgICAgICAgIGlmIChmYWxzZSA9PT0gdGhpcy5fdHJpZ2dlcigncmVsb2FkJykpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcztcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBpZiAob3B0aW9ucykge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMub3B0aW9ucyhvcHRpb25zKTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICB0aGlzLl9yZWxvYWQoKTtcclxuXHJcbiAgICAgICAgICAgICAgICB0aGlzLl90cmlnZ2VyKCdyZWxvYWRlbmQnKTtcclxuXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcztcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgZWxlbWVudDogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fZWxlbWVudDtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgb3B0aW9uczogZnVuY3Rpb24oa2V5LCB2YWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDApIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gJC5leHRlbmQoe30sIHRoaXMuX29wdGlvbnMpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2Yga2V5ID09PSAnc3RyaW5nJykge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICd1bmRlZmluZWQnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0eXBlb2YgdGhpcy5fb3B0aW9uc1trZXldID09PSAndW5kZWZpbmVkJyA/XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbnVsbCA6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fb3B0aW9uc1trZXldO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fb3B0aW9uc1trZXldID0gdmFsdWU7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX29wdGlvbnMgPSAkLmV4dGVuZCh7fSwgdGhpcy5fb3B0aW9ucywga2V5KTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcztcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgY2Fyb3VzZWw6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKCF0aGlzLl9jYXJvdXNlbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2Nhcm91c2VsID0gakNhcm91c2VsLmRldGVjdENhcm91c2VsKHRoaXMub3B0aW9ucygnY2Fyb3VzZWwnKSB8fCB0aGlzLl9lbGVtZW50KTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCF0aGlzLl9jYXJvdXNlbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkLmVycm9yKCdDb3VsZCBub3QgZGV0ZWN0IGNhcm91c2VsIGZvciBwbHVnaW4gXCInICsgcGx1Z2luTmFtZSArICdcIicpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fY2Fyb3VzZWw7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIF90cmlnZ2VyOiBmdW5jdGlvbih0eXBlLCBlbGVtZW50LCBkYXRhKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgZXZlbnQsXHJcbiAgICAgICAgICAgICAgICAgICAgZGVmYXVsdFByZXZlbnRlZCA9IGZhbHNlO1xyXG5cclxuICAgICAgICAgICAgICAgIGRhdGEgPSBbdGhpc10uY29uY2F0KGRhdGEgfHwgW10pO1xyXG5cclxuICAgICAgICAgICAgICAgIChlbGVtZW50IHx8IHRoaXMuX2VsZW1lbnQpLmVhY2goZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZXZlbnQgPSAkLkV2ZW50KChwbHVnaW5OYW1lICsgJzonICsgdHlwZSkudG9Mb3dlckNhc2UoKSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICQodGhpcykudHJpZ2dlcihldmVudCwgZGF0YSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChldmVudC5pc0RlZmF1bHRQcmV2ZW50ZWQoKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0UHJldmVudGVkID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gIWRlZmF1bHRQcmV2ZW50ZWQ7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG4gICAgfTtcclxuXHJcbiAgICBqQ2Fyb3VzZWwucGx1Z2luID0gZnVuY3Rpb24ocGx1Z2luTmFtZSwgcGx1Z2luUHJvdG90eXBlKSB7XHJcbiAgICAgICAgdmFyIFBsdWdpbiA9ICRbcGx1Z2luTmFtZV0gPSBmdW5jdGlvbihlbGVtZW50LCBvcHRpb25zKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX2VsZW1lbnQgPSAkKGVsZW1lbnQpO1xyXG4gICAgICAgICAgICB0aGlzLm9wdGlvbnMob3B0aW9ucyk7XHJcblxyXG4gICAgICAgICAgICB0aGlzLl9pbml0KCk7XHJcbiAgICAgICAgICAgIHRoaXMuY3JlYXRlKCk7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgUGx1Z2luLmZuID0gUGx1Z2luLnByb3RvdHlwZSA9ICQuZXh0ZW5kKFxyXG4gICAgICAgICAgICB7fSxcclxuICAgICAgICAgICAgakNhcm91c2VsLmJhc2UocGx1Z2luTmFtZSksXHJcbiAgICAgICAgICAgIHBsdWdpblByb3RvdHlwZVxyXG4gICAgICAgICk7XHJcblxyXG4gICAgICAgICQuZm5bcGx1Z2luTmFtZV0gPSBmdW5jdGlvbihvcHRpb25zKSB7XHJcbiAgICAgICAgICAgIHZhciBhcmdzICAgICAgICA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywgMSksXHJcbiAgICAgICAgICAgICAgICByZXR1cm5WYWx1ZSA9IHRoaXM7XHJcblxyXG4gICAgICAgICAgICBpZiAodHlwZW9mIG9wdGlvbnMgPT09ICdzdHJpbmcnKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmVhY2goZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGluc3RhbmNlID0gJCh0aGlzKS5kYXRhKHBsdWdpbk5hbWUpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAoIWluc3RhbmNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAkLmVycm9yKFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ0Nhbm5vdCBjYWxsIG1ldGhvZHMgb24gJyArIHBsdWdpbk5hbWUgKyAnIHByaW9yIHRvIGluaXRpYWxpemF0aW9uOyAnICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdhdHRlbXB0ZWQgdG8gY2FsbCBtZXRob2QgXCInICsgb3B0aW9ucyArICdcIidcclxuICAgICAgICAgICAgICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmICghJC5pc0Z1bmN0aW9uKGluc3RhbmNlW29wdGlvbnNdKSB8fCBvcHRpb25zLmNoYXJBdCgwKSA9PT0gJ18nKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAkLmVycm9yKFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ05vIHN1Y2ggbWV0aG9kIFwiJyArIG9wdGlvbnMgKyAnXCIgZm9yICcgKyBwbHVnaW5OYW1lICsgJyBpbnN0YW5jZSdcclxuICAgICAgICAgICAgICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHZhciBtZXRob2RWYWx1ZSA9IGluc3RhbmNlW29wdGlvbnNdLmFwcGx5KGluc3RhbmNlLCBhcmdzKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG1ldGhvZFZhbHVlICE9PSBpbnN0YW5jZSAmJiB0eXBlb2YgbWV0aG9kVmFsdWUgIT09ICd1bmRlZmluZWQnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVyblZhbHVlID0gbWV0aG9kVmFsdWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuZWFjaChmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgaW5zdGFuY2UgPSAkKHRoaXMpLmRhdGEocGx1Z2luTmFtZSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChpbnN0YW5jZSBpbnN0YW5jZW9mIFBsdWdpbikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpbnN0YW5jZS5yZWxvYWQob3B0aW9ucyk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbmV3IFBsdWdpbih0aGlzLCBvcHRpb25zKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgcmV0dXJuIHJldHVyblZhbHVlO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHJldHVybiBQbHVnaW47XHJcbiAgICB9O1xyXG59KGpRdWVyeSkpO1xyXG5cclxuKGZ1bmN0aW9uKCQsIHdpbmRvdykge1xyXG4gICAgJ3VzZSBzdHJpY3QnO1xyXG5cclxuICAgIHZhciB0b0Zsb2F0ID0gZnVuY3Rpb24odmFsKSB7XHJcbiAgICAgICAgcmV0dXJuIHBhcnNlRmxvYXQodmFsKSB8fCAwO1xyXG4gICAgfTtcclxuXHJcbiAgICAkLmpDYXJvdXNlbC5wbHVnaW4oJ2pjYXJvdXNlbCcsIHtcclxuICAgICAgICBhbmltYXRpbmc6ICAgZmFsc2UsXHJcbiAgICAgICAgdGFpbDogICAgICAgIDAsXHJcbiAgICAgICAgaW5UYWlsOiAgICAgIGZhbHNlLFxyXG4gICAgICAgIHJlc2l6ZVRpbWVyOiBudWxsLFxyXG4gICAgICAgIGx0OiAgICAgICAgICBudWxsLFxyXG4gICAgICAgIHZlcnRpY2FsOiAgICBmYWxzZSxcclxuICAgICAgICBydGw6ICAgICAgICAgZmFsc2UsXHJcbiAgICAgICAgY2lyY3VsYXI6ICAgIGZhbHNlLFxyXG4gICAgICAgIHVuZGVyZmxvdzogICBmYWxzZSxcclxuICAgICAgICByZWxhdGl2ZTogICAgZmFsc2UsXHJcblxyXG4gICAgICAgIF9vcHRpb25zOiB7XHJcbiAgICAgICAgICAgIGxpc3Q6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZWxlbWVudCgpLmNoaWxkcmVuKCkuZXEoMCk7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGl0ZW1zOiBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmxpc3QoKS5jaGlsZHJlbigpO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBhbmltYXRpb246ICAgNDAwLFxyXG4gICAgICAgICAgICB0cmFuc2l0aW9uczogZmFsc2UsXHJcbiAgICAgICAgICAgIHdyYXA6ICAgICAgICBudWxsLFxyXG4gICAgICAgICAgICB2ZXJ0aWNhbDogICAgbnVsbCxcclxuICAgICAgICAgICAgcnRsOiAgICAgICAgIG51bGwsXHJcbiAgICAgICAgICAgIGNlbnRlcjogICAgICBmYWxzZVxyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIC8vIFByb3RlY3RlZCwgZG9uJ3QgYWNjZXNzIGRpcmVjdGx5XHJcbiAgICAgICAgX2xpc3Q6ICAgICAgICAgbnVsbCxcclxuICAgICAgICBfaXRlbXM6ICAgICAgICBudWxsLFxyXG4gICAgICAgIF90YXJnZXQ6ICAgICAgICQoKSxcclxuICAgICAgICBfZmlyc3Q6ICAgICAgICAkKCksXHJcbiAgICAgICAgX2xhc3Q6ICAgICAgICAgJCgpLFxyXG4gICAgICAgIF92aXNpYmxlOiAgICAgICQoKSxcclxuICAgICAgICBfZnVsbHl2aXNpYmxlOiAkKCksXHJcbiAgICAgICAgX2luaXQ6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICB2YXIgc2VsZiA9IHRoaXM7XHJcblxyXG4gICAgICAgICAgICB0aGlzLm9uV2luZG93UmVzaXplID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoc2VsZi5yZXNpemVUaW1lcikge1xyXG4gICAgICAgICAgICAgICAgICAgIGNsZWFyVGltZW91dChzZWxmLnJlc2l6ZVRpbWVyKTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBzZWxmLnJlc2l6ZVRpbWVyID0gc2V0VGltZW91dChmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgICAgICBzZWxmLnJlbG9hZCgpO1xyXG4gICAgICAgICAgICAgICAgfSwgMTAwKTtcclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgX2NyZWF0ZTogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX3JlbG9hZCgpO1xyXG5cclxuICAgICAgICAgICAgJCh3aW5kb3cpLm9uKCdyZXNpemUuamNhcm91c2VsJywgdGhpcy5vbldpbmRvd1Jlc2l6ZSk7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBfZGVzdHJveTogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICQod2luZG93KS5vZmYoJ3Jlc2l6ZS5qY2Fyb3VzZWwnLCB0aGlzLm9uV2luZG93UmVzaXplKTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIF9yZWxvYWQ6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICB0aGlzLnZlcnRpY2FsID0gdGhpcy5vcHRpb25zKCd2ZXJ0aWNhbCcpO1xyXG5cclxuICAgICAgICAgICAgaWYgKHRoaXMudmVydGljYWwgPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy52ZXJ0aWNhbCA9IHRoaXMubGlzdCgpLmhlaWdodCgpID4gdGhpcy5saXN0KCkud2lkdGgoKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgdGhpcy5ydGwgPSB0aGlzLm9wdGlvbnMoJ3J0bCcpO1xyXG5cclxuICAgICAgICAgICAgaWYgKHRoaXMucnRsID09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMucnRsID0gKGZ1bmN0aW9uKGVsZW1lbnQpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoKCcnICsgZWxlbWVudC5hdHRyKCdkaXInKSkudG9Mb3dlckNhc2UoKSA9PT0gJ3J0bCcpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICB2YXIgZm91bmQgPSBmYWxzZTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgZWxlbWVudC5wYXJlbnRzKCdbZGlyXScpLmVhY2goZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICgoL3J0bC9pKS50ZXN0KCQodGhpcykuYXR0cignZGlyJykpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3VuZCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZvdW5kO1xyXG4gICAgICAgICAgICAgICAgfSh0aGlzLl9lbGVtZW50KSk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHRoaXMubHQgPSB0aGlzLnZlcnRpY2FsID8gJ3RvcCcgOiAnbGVmdCc7XHJcblxyXG4gICAgICAgICAgICAvLyBFbnN1cmUgYmVmb3JlIGNsb3Nlc3QoKSBjYWxsXHJcbiAgICAgICAgICAgIHRoaXMucmVsYXRpdmUgPSB0aGlzLmxpc3QoKS5jc3MoJ3Bvc2l0aW9uJykgPT09ICdyZWxhdGl2ZSc7XHJcblxyXG4gICAgICAgICAgICAvLyBGb3JjZSBsaXN0IGFuZCBpdGVtcyByZWxvYWRcclxuICAgICAgICAgICAgdGhpcy5fbGlzdCAgPSBudWxsO1xyXG4gICAgICAgICAgICB0aGlzLl9pdGVtcyA9IG51bGw7XHJcblxyXG4gICAgICAgICAgICB2YXIgaXRlbSA9IHRoaXMuaW5kZXgodGhpcy5fdGFyZ2V0KSA+PSAwID9cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fdGFyZ2V0IDpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jbG9zZXN0KCk7XHJcblxyXG4gICAgICAgICAgICAvLyBfcHJlcGFyZSgpIG5lZWRzIHRoaXMgaGVyZVxyXG4gICAgICAgICAgICB0aGlzLmNpcmN1bGFyICA9IHRoaXMub3B0aW9ucygnd3JhcCcpID09PSAnY2lyY3VsYXInO1xyXG4gICAgICAgICAgICB0aGlzLnVuZGVyZmxvdyA9IGZhbHNlO1xyXG5cclxuICAgICAgICAgICAgdmFyIHByb3BzID0geydsZWZ0JzogMCwgJ3RvcCc6IDB9O1xyXG5cclxuICAgICAgICAgICAgaWYgKGl0ZW0ubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fcHJlcGFyZShpdGVtKTtcclxuICAgICAgICAgICAgICAgIHRoaXMubGlzdCgpLmZpbmQoJ1tkYXRhLWpjYXJvdXNlbC1jbG9uZV0nKS5yZW1vdmUoKTtcclxuXHJcbiAgICAgICAgICAgICAgICAvLyBGb3JjZSBpdGVtcyByZWxvYWRcclxuICAgICAgICAgICAgICAgIHRoaXMuX2l0ZW1zID0gbnVsbDtcclxuXHJcbiAgICAgICAgICAgICAgICB0aGlzLnVuZGVyZmxvdyA9IHRoaXMuX2Z1bGx5dmlzaWJsZS5sZW5ndGggPj0gdGhpcy5pdGVtcygpLmxlbmd0aDtcclxuICAgICAgICAgICAgICAgIHRoaXMuY2lyY3VsYXIgID0gdGhpcy5jaXJjdWxhciAmJiAhdGhpcy51bmRlcmZsb3c7XHJcblxyXG4gICAgICAgICAgICAgICAgcHJvcHNbdGhpcy5sdF0gPSB0aGlzLl9wb3NpdGlvbihpdGVtKSArICdweCc7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHRoaXMubW92ZShwcm9wcyk7XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gdGhpcztcclxuICAgICAgICB9LFxyXG4gICAgICAgIGxpc3Q6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5fbGlzdCA9PT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgdmFyIG9wdGlvbiA9IHRoaXMub3B0aW9ucygnbGlzdCcpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fbGlzdCA9ICQuaXNGdW5jdGlvbihvcHRpb24pID8gb3B0aW9uLmNhbGwodGhpcykgOiB0aGlzLl9lbGVtZW50LmZpbmQob3B0aW9uKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2xpc3Q7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBpdGVtczogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLl9pdGVtcyA9PT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgdmFyIG9wdGlvbiA9IHRoaXMub3B0aW9ucygnaXRlbXMnKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2l0ZW1zID0gKCQuaXNGdW5jdGlvbihvcHRpb24pID8gb3B0aW9uLmNhbGwodGhpcykgOiB0aGlzLmxpc3QoKS5maW5kKG9wdGlvbikpLm5vdCgnW2RhdGEtamNhcm91c2VsLWNsb25lXScpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5faXRlbXM7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBpbmRleDogZnVuY3Rpb24oaXRlbSkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5pdGVtcygpLmluZGV4KGl0ZW0pO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgY2xvc2VzdDogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIHZhciBzZWxmICAgID0gdGhpcyxcclxuICAgICAgICAgICAgICAgIHBvcyAgICAgPSB0aGlzLmxpc3QoKS5wb3NpdGlvbigpW3RoaXMubHRdLFxyXG4gICAgICAgICAgICAgICAgY2xvc2VzdCA9ICQoKSwgLy8gRW5zdXJlIHdlJ3JlIHJldHVybmluZyBhIGpRdWVyeSBpbnN0YW5jZVxyXG4gICAgICAgICAgICAgICAgc3RvcCAgICA9IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgbHJiICAgICA9IHRoaXMudmVydGljYWwgPyAnYm90dG9tJyA6ICh0aGlzLnJ0bCAmJiAhdGhpcy5yZWxhdGl2ZSA/ICdsZWZ0JyA6ICdyaWdodCcpLFxyXG4gICAgICAgICAgICAgICAgd2lkdGg7XHJcblxyXG4gICAgICAgICAgICBpZiAodGhpcy5ydGwgJiYgdGhpcy5yZWxhdGl2ZSAmJiAhdGhpcy52ZXJ0aWNhbCkge1xyXG4gICAgICAgICAgICAgICAgcG9zICs9IHRoaXMubGlzdCgpLndpZHRoKCkgLSB0aGlzLmNsaXBwaW5nKCk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHRoaXMuaXRlbXMoKS5lYWNoKGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgY2xvc2VzdCA9ICQodGhpcyk7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKHN0b3ApIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgdmFyIGRpbSA9IHNlbGYuZGltZW5zaW9uKGNsb3Nlc3QpO1xyXG5cclxuICAgICAgICAgICAgICAgIHBvcyArPSBkaW07XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKHBvcyA+PSAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgd2lkdGggPSBkaW0gLSB0b0Zsb2F0KGNsb3Nlc3QuY3NzKCdtYXJnaW4tJyArIGxyYikpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAoKE1hdGguYWJzKHBvcykgLSBkaW0gKyAod2lkdGggLyAyKSkgPD0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzdG9wID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuXHJcblxyXG4gICAgICAgICAgICByZXR1cm4gY2xvc2VzdDtcclxuICAgICAgICB9LFxyXG4gICAgICAgIHRhcmdldDogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl90YXJnZXQ7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBmaXJzdDogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9maXJzdDtcclxuICAgICAgICB9LFxyXG4gICAgICAgIGxhc3Q6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fbGFzdDtcclxuICAgICAgICB9LFxyXG4gICAgICAgIHZpc2libGU6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fdmlzaWJsZTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIGZ1bGx5dmlzaWJsZTogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9mdWxseXZpc2libGU7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBoYXNOZXh0OiBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgaWYgKGZhbHNlID09PSB0aGlzLl90cmlnZ2VyKCdoYXNuZXh0JykpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB2YXIgd3JhcCA9IHRoaXMub3B0aW9ucygnd3JhcCcpLFxyXG4gICAgICAgICAgICAgICAgZW5kID0gdGhpcy5pdGVtcygpLmxlbmd0aCAtIDEsXHJcbiAgICAgICAgICAgICAgICBjaGVjayA9IHRoaXMub3B0aW9ucygnY2VudGVyJykgPyB0aGlzLl90YXJnZXQgOiB0aGlzLl9sYXN0O1xyXG5cclxuICAgICAgICAgICAgcmV0dXJuIGVuZCA+PSAwICYmICF0aGlzLnVuZGVyZmxvdyAmJlxyXG4gICAgICAgICAgICAgICAgKCh3cmFwICYmIHdyYXAgIT09ICdmaXJzdCcpIHx8XHJcbiAgICAgICAgICAgICAgICAgICAgKHRoaXMuaW5kZXgoY2hlY2spIDwgZW5kKSB8fFxyXG4gICAgICAgICAgICAgICAgICAgICh0aGlzLnRhaWwgJiYgIXRoaXMuaW5UYWlsKSkgPyB0cnVlIDogZmFsc2U7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBoYXNQcmV2OiBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgaWYgKGZhbHNlID09PSB0aGlzLl90cmlnZ2VyKCdoYXNwcmV2JykpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB2YXIgd3JhcCA9IHRoaXMub3B0aW9ucygnd3JhcCcpO1xyXG5cclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuaXRlbXMoKS5sZW5ndGggPiAwICYmICF0aGlzLnVuZGVyZmxvdyAmJlxyXG4gICAgICAgICAgICAgICAgKCh3cmFwICYmIHdyYXAgIT09ICdsYXN0JykgfHxcclxuICAgICAgICAgICAgICAgICAgICAodGhpcy5pbmRleCh0aGlzLl9maXJzdCkgPiAwKSB8fFxyXG4gICAgICAgICAgICAgICAgICAgICh0aGlzLnRhaWwgJiYgdGhpcy5pblRhaWwpKSA/IHRydWUgOiBmYWxzZTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIGNsaXBwaW5nOiBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2VsZW1lbnRbJ2lubmVyJyArICh0aGlzLnZlcnRpY2FsID8gJ0hlaWdodCcgOiAnV2lkdGgnKV0oKTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIGRpbWVuc2lvbjogZnVuY3Rpb24oZWxlbWVudCkge1xyXG4gICAgICAgICAgICByZXR1cm4gZWxlbWVudFsnb3V0ZXInICsgKHRoaXMudmVydGljYWwgPyAnSGVpZ2h0JyA6ICdXaWR0aCcpXSh0cnVlKTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIHNjcm9sbDogZnVuY3Rpb24odGFyZ2V0LCBhbmltYXRlLCBjYWxsYmFjaykge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5hbmltYXRpbmcpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAoZmFsc2UgPT09IHRoaXMuX3RyaWdnZXIoJ3Njcm9sbCcsIG51bGwsIFt0YXJnZXQsIGFuaW1hdGVdKSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmICgkLmlzRnVuY3Rpb24oYW5pbWF0ZSkpIHtcclxuICAgICAgICAgICAgICAgIGNhbGxiYWNrID0gYW5pbWF0ZTtcclxuICAgICAgICAgICAgICAgIGFuaW1hdGUgID0gdHJ1ZTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgdmFyIHBhcnNlZCA9ICQuakNhcm91c2VsLnBhcnNlVGFyZ2V0KHRhcmdldCk7XHJcblxyXG4gICAgICAgICAgICBpZiAocGFyc2VkLnJlbGF0aXZlKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgZW5kICAgID0gdGhpcy5pdGVtcygpLmxlbmd0aCAtIDEsXHJcbiAgICAgICAgICAgICAgICAgICAgc2Nyb2xsID0gTWF0aC5hYnMocGFyc2VkLnRhcmdldCksXHJcbiAgICAgICAgICAgICAgICAgICAgd3JhcCAgID0gdGhpcy5vcHRpb25zKCd3cmFwJyksXHJcbiAgICAgICAgICAgICAgICAgICAgY3VycmVudCxcclxuICAgICAgICAgICAgICAgICAgICBmaXJzdCxcclxuICAgICAgICAgICAgICAgICAgICBpbmRleCxcclxuICAgICAgICAgICAgICAgICAgICBzdGFydCxcclxuICAgICAgICAgICAgICAgICAgICBjdXJyLFxyXG4gICAgICAgICAgICAgICAgICAgIGlzVmlzaWJsZSxcclxuICAgICAgICAgICAgICAgICAgICBwcm9wcyxcclxuICAgICAgICAgICAgICAgICAgICBpO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmIChwYXJzZWQudGFyZ2V0ID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBsYXN0ID0gdGhpcy5pbmRleCh0aGlzLl9sYXN0KTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGxhc3QgPj0gZW5kICYmIHRoaXMudGFpbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXRoaXMuaW5UYWlsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9zY3JvbGxUYWlsKGFuaW1hdGUsIGNhbGxiYWNrKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh3cmFwID09PSAnYm90aCcgfHwgd3JhcCA9PT0gJ2xhc3QnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fc2Nyb2xsKDAsIGFuaW1hdGUsIGNhbGxiYWNrKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCQuaXNGdW5jdGlvbihjYWxsYmFjaykpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2suY2FsbCh0aGlzLCBmYWxzZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudCA9IHRoaXMuaW5kZXgodGhpcy5fdGFyZ2V0KTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICgodGhpcy51bmRlcmZsb3cgJiYgY3VycmVudCA9PT0gZW5kICYmICh3cmFwID09PSAnY2lyY3VsYXInIHx8IHdyYXAgPT09ICdib3RoJyB8fCB3cmFwID09PSAnbGFzdCcpKSB8fFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKCF0aGlzLnVuZGVyZmxvdyAmJiBsYXN0ID09PSBlbmQgJiYgKHdyYXAgPT09ICdib3RoJyB8fCB3cmFwID09PSAnbGFzdCcpKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fc2Nyb2xsKDAsIGFuaW1hdGUsIGNhbGxiYWNrKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluZGV4ID0gY3VycmVudCArIHNjcm9sbDtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5jaXJjdWxhciAmJiBpbmRleCA+IGVuZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGkgPSBlbmQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY3VyciA9IHRoaXMuaXRlbXMoKS5nZXQoLTEpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aGlsZSAoaSsrIDwgaW5kZXgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY3VyciA9IHRoaXMuaXRlbXMoKS5lcSgwKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaXNWaXNpYmxlID0gdGhpcy5fdmlzaWJsZS5pbmRleChjdXJyKSA+PSAwO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGlzVmlzaWJsZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY3Vyci5hZnRlcihjdXJyLmNsb25lKHRydWUpLmF0dHIoJ2RhdGEtamNhcm91c2VsLWNsb25lJywgdHJ1ZSkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmxpc3QoKS5hcHBlbmQoY3Vycik7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWlzVmlzaWJsZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJvcHMgPSB7fTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByb3BzW3RoaXMubHRdID0gdGhpcy5kaW1lbnNpb24oY3Vycik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm1vdmVCeShwcm9wcyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEZvcmNlIGl0ZW1zIHJlbG9hZFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9pdGVtcyA9IG51bGw7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9zY3JvbGwoY3VyciwgYW5pbWF0ZSwgY2FsbGJhY2spO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9zY3JvbGwoTWF0aC5taW4oaW5kZXgsIGVuZCksIGFuaW1hdGUsIGNhbGxiYWNrKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuaW5UYWlsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3Njcm9sbChNYXRoLm1heCgodGhpcy5pbmRleCh0aGlzLl9maXJzdCkgLSBzY3JvbGwpICsgMSwgMCksIGFuaW1hdGUsIGNhbGxiYWNrKTtcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBmaXJzdCAgPSB0aGlzLmluZGV4KHRoaXMuX2ZpcnN0KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudCA9IHRoaXMuaW5kZXgodGhpcy5fdGFyZ2V0KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc3RhcnQgID0gdGhpcy51bmRlcmZsb3cgPyBjdXJyZW50IDogZmlyc3Q7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGluZGV4ICA9IHN0YXJ0IC0gc2Nyb2xsO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHN0YXJ0IDw9IDAgJiYgKCh0aGlzLnVuZGVyZmxvdyAmJiB3cmFwID09PSAnY2lyY3VsYXInKSB8fCB3cmFwID09PSAnYm90aCcgfHwgd3JhcCA9PT0gJ2ZpcnN0JykpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3Njcm9sbChlbmQsIGFuaW1hdGUsIGNhbGxiYWNrKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmNpcmN1bGFyICYmIGluZGV4IDwgMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGkgICAgPSBpbmRleDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdXJyID0gdGhpcy5pdGVtcygpLmdldCgwKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2hpbGUgKGkrKyA8IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY3VyciA9IHRoaXMuaXRlbXMoKS5lcSgtMSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlzVmlzaWJsZSA9IHRoaXMuX3Zpc2libGUuaW5kZXgoY3VycikgPj0gMDtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpc1Zpc2libGUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN1cnIuYWZ0ZXIoY3Vyci5jbG9uZSh0cnVlKS5hdHRyKCdkYXRhLWpjYXJvdXNlbC1jbG9uZScsIHRydWUpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5saXN0KCkucHJlcGVuZChjdXJyKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEZvcmNlIGl0ZW1zIHJlbG9hZFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9pdGVtcyA9IG51bGw7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgZGltID0gdGhpcy5kaW1lbnNpb24oY3Vycik7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcm9wcyA9IHt9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcm9wc1t0aGlzLmx0XSA9IC1kaW07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubW92ZUJ5KHByb3BzKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9zY3JvbGwoY3VyciwgYW5pbWF0ZSwgY2FsbGJhY2spO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9zY3JvbGwoTWF0aC5tYXgoaW5kZXgsIDApLCBhbmltYXRlLCBjYWxsYmFjayk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9zY3JvbGwocGFyc2VkLnRhcmdldCwgYW5pbWF0ZSwgY2FsbGJhY2spO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB0aGlzLl90cmlnZ2VyKCdzY3JvbGxlbmQnKTtcclxuXHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgbW92ZUJ5OiBmdW5jdGlvbihwcm9wZXJ0aWVzLCBvcHRzKSB7XHJcbiAgICAgICAgICAgIHZhciBwb3NpdGlvbiA9IHRoaXMubGlzdCgpLnBvc2l0aW9uKCksXHJcbiAgICAgICAgICAgICAgICBtdWx0aXBsaWVyID0gMSxcclxuICAgICAgICAgICAgICAgIGNvcnJlY3Rpb24gPSAwO1xyXG5cclxuICAgICAgICAgICAgaWYgKHRoaXMucnRsICYmICF0aGlzLnZlcnRpY2FsKSB7XHJcbiAgICAgICAgICAgICAgICBtdWx0aXBsaWVyID0gLTE7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMucmVsYXRpdmUpIHtcclxuICAgICAgICAgICAgICAgICAgICBjb3JyZWN0aW9uID0gdGhpcy5saXN0KCkud2lkdGgoKSAtIHRoaXMuY2xpcHBpbmcoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKHByb3BlcnRpZXMubGVmdCkge1xyXG4gICAgICAgICAgICAgICAgcHJvcGVydGllcy5sZWZ0ID0gKHBvc2l0aW9uLmxlZnQgKyBjb3JyZWN0aW9uICsgdG9GbG9hdChwcm9wZXJ0aWVzLmxlZnQpICogbXVsdGlwbGllcikgKyAncHgnO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAocHJvcGVydGllcy50b3ApIHtcclxuICAgICAgICAgICAgICAgIHByb3BlcnRpZXMudG9wID0gKHBvc2l0aW9uLnRvcCArIGNvcnJlY3Rpb24gKyB0b0Zsb2F0KHByb3BlcnRpZXMudG9wKSAqIG11bHRpcGxpZXIpICsgJ3B4JztcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMubW92ZShwcm9wZXJ0aWVzLCBvcHRzKTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIG1vdmU6IGZ1bmN0aW9uKHByb3BlcnRpZXMsIG9wdHMpIHtcclxuICAgICAgICAgICAgb3B0cyA9IG9wdHMgfHwge307XHJcblxyXG4gICAgICAgICAgICB2YXIgb3B0aW9uICAgICAgID0gdGhpcy5vcHRpb25zKCd0cmFuc2l0aW9ucycpLFxyXG4gICAgICAgICAgICAgICAgdHJhbnNpdGlvbnMgID0gISFvcHRpb24sXHJcbiAgICAgICAgICAgICAgICB0cmFuc2Zvcm1zICAgPSAhIW9wdGlvbi50cmFuc2Zvcm1zLFxyXG4gICAgICAgICAgICAgICAgdHJhbnNmb3JtczNkID0gISFvcHRpb24udHJhbnNmb3JtczNkLFxyXG4gICAgICAgICAgICAgICAgZHVyYXRpb24gICAgID0gb3B0cy5kdXJhdGlvbiB8fCAwLFxyXG4gICAgICAgICAgICAgICAgbGlzdCAgICAgICAgID0gdGhpcy5saXN0KCk7XHJcblxyXG4gICAgICAgICAgICBpZiAoIXRyYW5zaXRpb25zICYmIGR1cmF0aW9uID4gMCkge1xyXG4gICAgICAgICAgICAgICAgbGlzdC5hbmltYXRlKHByb3BlcnRpZXMsIG9wdHMpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB2YXIgY29tcGxldGUgPSBvcHRzLmNvbXBsZXRlIHx8ICQubm9vcCxcclxuICAgICAgICAgICAgICAgIGNzcyA9IHt9O1xyXG5cclxuICAgICAgICAgICAgaWYgKHRyYW5zaXRpb25zKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgYmFja3VwID0ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0cmFuc2l0aW9uRHVyYXRpb246IGxpc3QuY3NzKCd0cmFuc2l0aW9uRHVyYXRpb24nKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgdHJhbnNpdGlvblRpbWluZ0Z1bmN0aW9uOiBsaXN0LmNzcygndHJhbnNpdGlvblRpbWluZ0Z1bmN0aW9uJyksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRyYW5zaXRpb25Qcm9wZXJ0eTogbGlzdC5jc3MoJ3RyYW5zaXRpb25Qcm9wZXJ0eScpXHJcbiAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICBvbGRDb21wbGV0ZSA9IGNvbXBsZXRlO1xyXG5cclxuICAgICAgICAgICAgICAgIGNvbXBsZXRlID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgJCh0aGlzKS5jc3MoYmFja3VwKTtcclxuICAgICAgICAgICAgICAgICAgICBvbGRDb21wbGV0ZS5jYWxsKHRoaXMpO1xyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgIGNzcyA9IHtcclxuICAgICAgICAgICAgICAgICAgICB0cmFuc2l0aW9uRHVyYXRpb246IChkdXJhdGlvbiA+IDAgPyBkdXJhdGlvbiAvIDEwMDAgOiAwKSArICdzJyxcclxuICAgICAgICAgICAgICAgICAgICB0cmFuc2l0aW9uVGltaW5nRnVuY3Rpb246IG9wdGlvbi5lYXNpbmcgfHwgb3B0cy5lYXNpbmcsXHJcbiAgICAgICAgICAgICAgICAgICAgdHJhbnNpdGlvblByb3BlcnR5OiBkdXJhdGlvbiA+IDAgPyAoZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0cmFuc2Zvcm1zIHx8IHRyYW5zZm9ybXMzZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gV2UgaGF2ZSB0byB1c2UgJ2FsbCcgYmVjYXVzZSBqUXVlcnkgZG9lc24ndCBwcmVmaXhcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGNzcyB2YWx1ZXMsIGxpa2UgdHJhbnNpdGlvbi1wcm9wZXJ0eTogdHJhbnNmb3JtO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdhbGwnO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcHJvcGVydGllcy5sZWZ0ID8gJ2xlZnQnIDogJ3RvcCc7XHJcbiAgICAgICAgICAgICAgICAgICAgfSkoKSA6ICdub25lJyxcclxuICAgICAgICAgICAgICAgICAgICB0cmFuc2Zvcm06ICdub25lJ1xyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKHRyYW5zZm9ybXMzZCkge1xyXG4gICAgICAgICAgICAgICAgY3NzLnRyYW5zZm9ybSA9ICd0cmFuc2xhdGUzZCgnICsgKHByb3BlcnRpZXMubGVmdCB8fCAwKSArICcsJyArIChwcm9wZXJ0aWVzLnRvcCB8fCAwKSArICcsMCknO1xyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKHRyYW5zZm9ybXMpIHtcclxuICAgICAgICAgICAgICAgIGNzcy50cmFuc2Zvcm0gPSAndHJhbnNsYXRlKCcgKyAocHJvcGVydGllcy5sZWZ0IHx8IDApICsgJywnICsgKHByb3BlcnRpZXMudG9wIHx8IDApICsgJyknO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgJC5leHRlbmQoY3NzLCBwcm9wZXJ0aWVzKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKHRyYW5zaXRpb25zICYmIGR1cmF0aW9uID4gMCkge1xyXG4gICAgICAgICAgICAgICAgbGlzdC5vbmUoJ3RyYW5zaXRpb25lbmQgd2Via2l0VHJhbnNpdGlvbkVuZCBvVHJhbnNpdGlvbkVuZCBvdHJhbnNpdGlvbmVuZCBNU1RyYW5zaXRpb25FbmQnLCBjb21wbGV0ZSk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGxpc3QuY3NzKGNzcyk7XHJcblxyXG4gICAgICAgICAgICBpZiAoZHVyYXRpb24gPD0gMCkge1xyXG4gICAgICAgICAgICAgICAgbGlzdC5lYWNoKGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbXBsZXRlLmNhbGwodGhpcyk7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgX3Njcm9sbDogZnVuY3Rpb24oaXRlbSwgYW5pbWF0ZSwgY2FsbGJhY2spIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMuYW5pbWF0aW5nKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoJC5pc0Z1bmN0aW9uKGNhbGxiYWNrKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrLmNhbGwodGhpcywgZmFsc2UpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAodHlwZW9mIGl0ZW0gIT09ICdvYmplY3QnKSB7XHJcbiAgICAgICAgICAgICAgICBpdGVtID0gdGhpcy5pdGVtcygpLmVxKGl0ZW0pO1xyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiBpdGVtLmpxdWVyeSA9PT0gJ3VuZGVmaW5lZCcpIHtcclxuICAgICAgICAgICAgICAgIGl0ZW0gPSAkKGl0ZW0pO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAoaXRlbS5sZW5ndGggPT09IDApIHtcclxuICAgICAgICAgICAgICAgIGlmICgkLmlzRnVuY3Rpb24oY2FsbGJhY2spKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2suY2FsbCh0aGlzLCBmYWxzZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHRoaXMuaW5UYWlsID0gZmFsc2U7XHJcblxyXG4gICAgICAgICAgICB0aGlzLl9wcmVwYXJlKGl0ZW0pO1xyXG5cclxuICAgICAgICAgICAgdmFyIHBvcyAgICAgPSB0aGlzLl9wb3NpdGlvbihpdGVtKSxcclxuICAgICAgICAgICAgICAgIGN1cnJQb3MgPSB0aGlzLmxpc3QoKS5wb3NpdGlvbigpW3RoaXMubHRdO1xyXG5cclxuICAgICAgICAgICAgaWYgKHBvcyA9PT0gY3VyclBvcykge1xyXG4gICAgICAgICAgICAgICAgaWYgKCQuaXNGdW5jdGlvbihjYWxsYmFjaykpIHtcclxuICAgICAgICAgICAgICAgICAgICBjYWxsYmFjay5jYWxsKHRoaXMsIGZhbHNlKTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcztcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgdmFyIHByb3BlcnRpZXMgPSB7fTtcclxuICAgICAgICAgICAgcHJvcGVydGllc1t0aGlzLmx0XSA9IHBvcyArICdweCc7XHJcblxyXG4gICAgICAgICAgICB0aGlzLl9hbmltYXRlKHByb3BlcnRpZXMsIGFuaW1hdGUsIGNhbGxiYWNrKTtcclxuXHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgX3Njcm9sbFRhaWw6IGZ1bmN0aW9uKGFuaW1hdGUsIGNhbGxiYWNrKSB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLmFuaW1hdGluZyB8fCAhdGhpcy50YWlsKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoJC5pc0Z1bmN0aW9uKGNhbGxiYWNrKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrLmNhbGwodGhpcywgZmFsc2UpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB2YXIgcG9zID0gdGhpcy5saXN0KCkucG9zaXRpb24oKVt0aGlzLmx0XTtcclxuXHJcbiAgICAgICAgICAgIGlmICh0aGlzLnJ0bCAmJiB0aGlzLnJlbGF0aXZlICYmICF0aGlzLnZlcnRpY2FsKSB7XHJcbiAgICAgICAgICAgICAgICBwb3MgKz0gdGhpcy5saXN0KCkud2lkdGgoKSAtIHRoaXMuY2xpcHBpbmcoKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKHRoaXMucnRsICYmICF0aGlzLnZlcnRpY2FsKSB7XHJcbiAgICAgICAgICAgICAgICBwb3MgKz0gdGhpcy50YWlsO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgcG9zIC09IHRoaXMudGFpbDtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgdGhpcy5pblRhaWwgPSB0cnVlO1xyXG5cclxuICAgICAgICAgICAgdmFyIHByb3BlcnRpZXMgPSB7fTtcclxuICAgICAgICAgICAgcHJvcGVydGllc1t0aGlzLmx0XSA9IHBvcyArICdweCc7XHJcblxyXG4gICAgICAgICAgICB0aGlzLl91cGRhdGUoe1xyXG4gICAgICAgICAgICAgICAgdGFyZ2V0OiAgICAgICB0aGlzLl90YXJnZXQubmV4dCgpLFxyXG4gICAgICAgICAgICAgICAgZnVsbHl2aXNpYmxlOiB0aGlzLl9mdWxseXZpc2libGUuc2xpY2UoMSkuYWRkKHRoaXMuX3Zpc2libGUubGFzdCgpKVxyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMuX2FuaW1hdGUocHJvcGVydGllcywgYW5pbWF0ZSwgY2FsbGJhY2spO1xyXG5cclxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBfYW5pbWF0ZTogZnVuY3Rpb24ocHJvcGVydGllcywgYW5pbWF0ZSwgY2FsbGJhY2spIHtcclxuICAgICAgICAgICAgY2FsbGJhY2sgPSBjYWxsYmFjayB8fCAkLm5vb3A7XHJcblxyXG4gICAgICAgICAgICBpZiAoZmFsc2UgPT09IHRoaXMuX3RyaWdnZXIoJ2FuaW1hdGUnKSkge1xyXG4gICAgICAgICAgICAgICAgY2FsbGJhY2suY2FsbCh0aGlzLCBmYWxzZSk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcztcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgdGhpcy5hbmltYXRpbmcgPSB0cnVlO1xyXG5cclxuICAgICAgICAgICAgdmFyIGFuaW1hdGlvbiA9IHRoaXMub3B0aW9ucygnYW5pbWF0aW9uJyksXHJcbiAgICAgICAgICAgICAgICBjb21wbGV0ZSAgPSAkLnByb3h5KGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYW5pbWF0aW5nID0gZmFsc2U7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHZhciBjID0gdGhpcy5saXN0KCkuZmluZCgnW2RhdGEtamNhcm91c2VsLWNsb25lXScpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAoYy5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGMucmVtb3ZlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3JlbG9hZCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fdHJpZ2dlcignYW5pbWF0ZWVuZCcpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBjYWxsYmFjay5jYWxsKHRoaXMsIHRydWUpO1xyXG4gICAgICAgICAgICAgICAgfSwgdGhpcyk7XHJcblxyXG4gICAgICAgICAgICB2YXIgb3B0cyA9IHR5cGVvZiBhbmltYXRpb24gPT09ICdvYmplY3QnID9cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgJC5leHRlbmQoe30sIGFuaW1hdGlvbikgOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICB7ZHVyYXRpb246IGFuaW1hdGlvbn0sXHJcbiAgICAgICAgICAgICAgICBvbGRDb21wbGV0ZSA9IG9wdHMuY29tcGxldGUgfHwgJC5ub29wO1xyXG5cclxuICAgICAgICAgICAgaWYgKGFuaW1hdGUgPT09IGZhbHNlKSB7XHJcbiAgICAgICAgICAgICAgICBvcHRzLmR1cmF0aW9uID0gMDtcclxuICAgICAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgJC5meC5zcGVlZHNbb3B0cy5kdXJhdGlvbl0gIT09ICd1bmRlZmluZWQnKSB7XHJcbiAgICAgICAgICAgICAgICBvcHRzLmR1cmF0aW9uID0gJC5meC5zcGVlZHNbb3B0cy5kdXJhdGlvbl07XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIG9wdHMuY29tcGxldGUgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgIGNvbXBsZXRlKCk7XHJcbiAgICAgICAgICAgICAgICBvbGRDb21wbGV0ZS5jYWxsKHRoaXMpO1xyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgdGhpcy5tb3ZlKHByb3BlcnRpZXMsIG9wdHMpO1xyXG5cclxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBfcHJlcGFyZTogZnVuY3Rpb24oaXRlbSkge1xyXG4gICAgICAgICAgICB2YXIgaW5kZXggID0gdGhpcy5pbmRleChpdGVtKSxcclxuICAgICAgICAgICAgICAgIGlkeCAgICA9IGluZGV4LFxyXG4gICAgICAgICAgICAgICAgd2ggICAgID0gdGhpcy5kaW1lbnNpb24oaXRlbSksXHJcbiAgICAgICAgICAgICAgICBjbGlwICAgPSB0aGlzLmNsaXBwaW5nKCksXHJcbiAgICAgICAgICAgICAgICBscmIgICAgPSB0aGlzLnZlcnRpY2FsID8gJ2JvdHRvbScgOiAodGhpcy5ydGwgPyAnbGVmdCcgIDogJ3JpZ2h0JyksXHJcbiAgICAgICAgICAgICAgICBjZW50ZXIgPSB0aGlzLm9wdGlvbnMoJ2NlbnRlcicpLFxyXG4gICAgICAgICAgICAgICAgdXBkYXRlID0ge1xyXG4gICAgICAgICAgICAgICAgICAgIHRhcmdldDogICAgICAgaXRlbSxcclxuICAgICAgICAgICAgICAgICAgICBmaXJzdDogICAgICAgIGl0ZW0sXHJcbiAgICAgICAgICAgICAgICAgICAgbGFzdDogICAgICAgICBpdGVtLFxyXG4gICAgICAgICAgICAgICAgICAgIHZpc2libGU6ICAgICAgaXRlbSxcclxuICAgICAgICAgICAgICAgICAgICBmdWxseXZpc2libGU6IHdoIDw9IGNsaXAgPyBpdGVtIDogJCgpXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgY3VycixcclxuICAgICAgICAgICAgICAgIGlzVmlzaWJsZSxcclxuICAgICAgICAgICAgICAgIG1hcmdpbixcclxuICAgICAgICAgICAgICAgIGRpbTtcclxuXHJcbiAgICAgICAgICAgIGlmIChjZW50ZXIpIHtcclxuICAgICAgICAgICAgICAgIHdoIC89IDI7XHJcbiAgICAgICAgICAgICAgICBjbGlwIC89IDI7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmICh3aCA8IGNsaXApIHtcclxuICAgICAgICAgICAgICAgIHdoaWxlICh0cnVlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY3VyciA9IHRoaXMuaXRlbXMoKS5lcSgrK2lkeCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChjdXJyLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXRoaXMuY2lyY3VsYXIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjdXJyID0gdGhpcy5pdGVtcygpLmVxKDApO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGl0ZW0uZ2V0KDApID09PSBjdXJyLmdldCgwKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlzVmlzaWJsZSA9IHRoaXMuX3Zpc2libGUuaW5kZXgoY3VycikgPj0gMDtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpc1Zpc2libGUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN1cnIuYWZ0ZXIoY3Vyci5jbG9uZSh0cnVlKS5hdHRyKCdkYXRhLWpjYXJvdXNlbC1jbG9uZScsIHRydWUpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5saXN0KCkuYXBwZW5kKGN1cnIpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFpc1Zpc2libGUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBwcm9wcyA9IHt9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJvcHNbdGhpcy5sdF0gPSB0aGlzLmRpbWVuc2lvbihjdXJyKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubW92ZUJ5KHByb3BzKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gRm9yY2UgaXRlbXMgcmVsb2FkXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2l0ZW1zID0gbnVsbDtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGRpbSA9IHRoaXMuZGltZW5zaW9uKGN1cnIpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAoZGltID09PSAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgd2ggKz0gZGltO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICB1cGRhdGUubGFzdCAgICA9IGN1cnI7XHJcbiAgICAgICAgICAgICAgICAgICAgdXBkYXRlLnZpc2libGUgPSB1cGRhdGUudmlzaWJsZS5hZGQoY3Vycik7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIC8vIFJlbW92ZSByaWdodC9ib3R0b20gbWFyZ2luIGZyb20gdG90YWwgd2lkdGhcclxuICAgICAgICAgICAgICAgICAgICBtYXJnaW4gPSB0b0Zsb2F0KGN1cnIuY3NzKCdtYXJnaW4tJyArIGxyYikpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAoKHdoIC0gbWFyZ2luKSA8PSBjbGlwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHVwZGF0ZS5mdWxseXZpc2libGUgPSB1cGRhdGUuZnVsbHl2aXNpYmxlLmFkZChjdXJyKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmICh3aCA+PSBjbGlwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKCF0aGlzLmNpcmN1bGFyICYmICFjZW50ZXIgJiYgd2ggPCBjbGlwKSB7XHJcbiAgICAgICAgICAgICAgICBpZHggPSBpbmRleDtcclxuXHJcbiAgICAgICAgICAgICAgICB3aGlsZSAodHJ1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICgtLWlkeCA8IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICBjdXJyID0gdGhpcy5pdGVtcygpLmVxKGlkeCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChjdXJyLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGRpbSA9IHRoaXMuZGltZW5zaW9uKGN1cnIpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAoZGltID09PSAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgd2ggKz0gZGltO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICB1cGRhdGUuZmlyc3QgICA9IGN1cnI7XHJcbiAgICAgICAgICAgICAgICAgICAgdXBkYXRlLnZpc2libGUgPSB1cGRhdGUudmlzaWJsZS5hZGQoY3Vycik7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIC8vIFJlbW92ZSByaWdodC9ib3R0b20gbWFyZ2luIGZyb20gdG90YWwgd2lkdGhcclxuICAgICAgICAgICAgICAgICAgICBtYXJnaW4gPSB0b0Zsb2F0KGN1cnIuY3NzKCdtYXJnaW4tJyArIGxyYikpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAoKHdoIC0gbWFyZ2luKSA8PSBjbGlwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHVwZGF0ZS5mdWxseXZpc2libGUgPSB1cGRhdGUuZnVsbHl2aXNpYmxlLmFkZChjdXJyKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmICh3aCA+PSBjbGlwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgdGhpcy5fdXBkYXRlKHVwZGF0ZSk7XHJcblxyXG4gICAgICAgICAgICB0aGlzLnRhaWwgPSAwO1xyXG5cclxuICAgICAgICAgICAgaWYgKCFjZW50ZXIgJiZcclxuICAgICAgICAgICAgICAgIHRoaXMub3B0aW9ucygnd3JhcCcpICE9PSAnY2lyY3VsYXInICYmXHJcbiAgICAgICAgICAgICAgICB0aGlzLm9wdGlvbnMoJ3dyYXAnKSAhPT0gJ2N1c3RvbScgJiZcclxuICAgICAgICAgICAgICAgIHRoaXMuaW5kZXgodXBkYXRlLmxhc3QpID09PSAodGhpcy5pdGVtcygpLmxlbmd0aCAtIDEpKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gUmVtb3ZlIHJpZ2h0L2JvdHRvbSBtYXJnaW4gZnJvbSB0b3RhbCB3aWR0aFxyXG4gICAgICAgICAgICAgICAgd2ggLT0gdG9GbG9hdCh1cGRhdGUubGFzdC5jc3MoJ21hcmdpbi0nICsgbHJiKSk7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKHdoID4gY2xpcCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMudGFpbCA9IHdoIC0gY2xpcDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBfcG9zaXRpb246IGZ1bmN0aW9uKGl0ZW0pIHtcclxuICAgICAgICAgICAgdmFyIGZpcnN0ICA9IHRoaXMuX2ZpcnN0LFxyXG4gICAgICAgICAgICAgICAgcG9zICAgID0gZmlyc3QucG9zaXRpb24oKVt0aGlzLmx0XSxcclxuICAgICAgICAgICAgICAgIGNlbnRlciA9IHRoaXMub3B0aW9ucygnY2VudGVyJyksXHJcbiAgICAgICAgICAgICAgICBjZW50ZXJPZmZzZXQgPSBjZW50ZXIgPyAodGhpcy5jbGlwcGluZygpIC8gMikgLSAodGhpcy5kaW1lbnNpb24oZmlyc3QpIC8gMikgOiAwO1xyXG5cclxuICAgICAgICAgICAgaWYgKHRoaXMucnRsICYmICF0aGlzLnZlcnRpY2FsKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5yZWxhdGl2ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHBvcyAtPSB0aGlzLmxpc3QoKS53aWR0aCgpIC0gdGhpcy5kaW1lbnNpb24oZmlyc3QpO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBwb3MgLT0gdGhpcy5jbGlwcGluZygpIC0gdGhpcy5kaW1lbnNpb24oZmlyc3QpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIHBvcyArPSBjZW50ZXJPZmZzZXQ7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBwb3MgLT0gY2VudGVyT2Zmc2V0O1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAoIWNlbnRlciAmJlxyXG4gICAgICAgICAgICAgICAgKHRoaXMuaW5kZXgoaXRlbSkgPiB0aGlzLmluZGV4KGZpcnN0KSB8fCB0aGlzLmluVGFpbCkgJiZcclxuICAgICAgICAgICAgICAgIHRoaXMudGFpbCkge1xyXG4gICAgICAgICAgICAgICAgcG9zID0gdGhpcy5ydGwgJiYgIXRoaXMudmVydGljYWwgPyBwb3MgLSB0aGlzLnRhaWwgOiBwb3MgKyB0aGlzLnRhaWw7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmluVGFpbCA9IHRydWU7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmluVGFpbCA9IGZhbHNlO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gLXBvcztcclxuICAgICAgICB9LFxyXG4gICAgICAgIF91cGRhdGU6IGZ1bmN0aW9uKHVwZGF0ZSkge1xyXG4gICAgICAgICAgICB2YXIgc2VsZiA9IHRoaXMsXHJcbiAgICAgICAgICAgICAgICBjdXJyZW50ID0ge1xyXG4gICAgICAgICAgICAgICAgICAgIHRhcmdldDogICAgICAgdGhpcy5fdGFyZ2V0LFxyXG4gICAgICAgICAgICAgICAgICAgIGZpcnN0OiAgICAgICAgdGhpcy5fZmlyc3QsXHJcbiAgICAgICAgICAgICAgICAgICAgbGFzdDogICAgICAgICB0aGlzLl9sYXN0LFxyXG4gICAgICAgICAgICAgICAgICAgIHZpc2libGU6ICAgICAgdGhpcy5fdmlzaWJsZSxcclxuICAgICAgICAgICAgICAgICAgICBmdWxseXZpc2libGU6IHRoaXMuX2Z1bGx5dmlzaWJsZVxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIGJhY2sgPSB0aGlzLmluZGV4KHVwZGF0ZS5maXJzdCB8fCBjdXJyZW50LmZpcnN0KSA8IHRoaXMuaW5kZXgoY3VycmVudC5maXJzdCksXHJcbiAgICAgICAgICAgICAgICBrZXksXHJcbiAgICAgICAgICAgICAgICBkb1VwZGF0ZSA9IGZ1bmN0aW9uKGtleSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBlbEluICA9IFtdLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBlbE91dCA9IFtdO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICB1cGRhdGVba2V5XS5lYWNoKGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoY3VycmVudFtrZXldLmluZGV4KHRoaXMpIDwgMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxJbi5wdXNoKHRoaXMpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGN1cnJlbnRba2V5XS5lYWNoKGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodXBkYXRlW2tleV0uaW5kZXgodGhpcykgPCAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbE91dC5wdXNoKHRoaXMpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChiYWNrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsSW4gPSBlbEluLnJldmVyc2UoKTtcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBlbE91dCA9IGVsT3V0LnJldmVyc2UoKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHNlbGYuX3RyaWdnZXIoa2V5ICsgJ2luJywgJChlbEluKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgc2VsZi5fdHJpZ2dlcihrZXkgKyAnb3V0JywgJChlbE91dCkpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBzZWxmWydfJyArIGtleV0gPSB1cGRhdGVba2V5XTtcclxuICAgICAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICBmb3IgKGtleSBpbiB1cGRhdGUpIHtcclxuICAgICAgICAgICAgICAgIGRvVXBkYXRlKGtleSk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgICAgIH1cclxuICAgIH0pO1xyXG59KGpRdWVyeSwgd2luZG93KSk7XHJcblxyXG4oZnVuY3Rpb24oJCkge1xyXG4gICAgJ3VzZSBzdHJpY3QnO1xyXG5cclxuICAgICQuamNhcm91c2VsLmZuLnNjcm9sbEludG9WaWV3ID0gZnVuY3Rpb24odGFyZ2V0LCBhbmltYXRlLCBjYWxsYmFjaykge1xyXG4gICAgICAgIHZhciBwYXJzZWQgPSAkLmpDYXJvdXNlbC5wYXJzZVRhcmdldCh0YXJnZXQpLFxyXG4gICAgICAgICAgICBmaXJzdCAgPSB0aGlzLmluZGV4KHRoaXMuX2Z1bGx5dmlzaWJsZS5maXJzdCgpKSxcclxuICAgICAgICAgICAgbGFzdCAgID0gdGhpcy5pbmRleCh0aGlzLl9mdWxseXZpc2libGUubGFzdCgpKSxcclxuICAgICAgICAgICAgaW5kZXg7XHJcblxyXG4gICAgICAgIGlmIChwYXJzZWQucmVsYXRpdmUpIHtcclxuICAgICAgICAgICAgaW5kZXggPSBwYXJzZWQudGFyZ2V0IDwgMCA/IE1hdGgubWF4KDAsIGZpcnN0ICsgcGFyc2VkLnRhcmdldCkgOiBsYXN0ICsgcGFyc2VkLnRhcmdldDtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBpbmRleCA9IHR5cGVvZiBwYXJzZWQudGFyZ2V0ICE9PSAnb2JqZWN0JyA/IHBhcnNlZC50YXJnZXQgOiB0aGlzLmluZGV4KHBhcnNlZC50YXJnZXQpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKGluZGV4IDwgZmlyc3QpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuc2Nyb2xsKGluZGV4LCBhbmltYXRlLCBjYWxsYmFjayk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoaW5kZXggPj0gZmlyc3QgJiYgaW5kZXggPD0gbGFzdCkge1xyXG4gICAgICAgICAgICBpZiAoJC5pc0Z1bmN0aW9uKGNhbGxiYWNrKSkge1xyXG4gICAgICAgICAgICAgICAgY2FsbGJhY2suY2FsbCh0aGlzLCBmYWxzZSk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdmFyIGl0ZW1zID0gdGhpcy5pdGVtcygpLFxyXG4gICAgICAgICAgICBjbGlwID0gdGhpcy5jbGlwcGluZygpLFxyXG4gICAgICAgICAgICBscmIgID0gdGhpcy52ZXJ0aWNhbCA/ICdib3R0b20nIDogKHRoaXMucnRsID8gJ2xlZnQnICA6ICdyaWdodCcpLFxyXG4gICAgICAgICAgICB3aCAgID0gMCxcclxuICAgICAgICAgICAgY3VycjtcclxuXHJcbiAgICAgICAgd2hpbGUgKHRydWUpIHtcclxuICAgICAgICAgICAgY3VyciA9IGl0ZW1zLmVxKGluZGV4KTtcclxuXHJcbiAgICAgICAgICAgIGlmIChjdXJyLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHdoICs9IHRoaXMuZGltZW5zaW9uKGN1cnIpO1xyXG5cclxuICAgICAgICAgICAgaWYgKHdoID49IGNsaXApIHtcclxuICAgICAgICAgICAgICAgIHZhciBtYXJnaW4gPSBwYXJzZUZsb2F0KGN1cnIuY3NzKCdtYXJnaW4tJyArIGxyYikpIHx8IDA7XHJcbiAgICAgICAgICAgICAgICBpZiAoKHdoIC0gbWFyZ2luKSAhPT0gY2xpcCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGluZGV4Kys7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKGluZGV4IDw9IDApIHtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpbmRleC0tO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIHRoaXMuc2Nyb2xsKGluZGV4LCBhbmltYXRlLCBjYWxsYmFjayk7XHJcbiAgICB9O1xyXG59KGpRdWVyeSkpO1xyXG5cclxuKGZ1bmN0aW9uKCQpIHtcclxuICAgICd1c2Ugc3RyaWN0JztcclxuXHJcbiAgICAkLmpDYXJvdXNlbC5wbHVnaW4oJ2pjYXJvdXNlbENvbnRyb2wnLCB7XHJcbiAgICAgICAgX29wdGlvbnM6IHtcclxuICAgICAgICAgICAgdGFyZ2V0OiAnKz0xJyxcclxuICAgICAgICAgICAgZXZlbnQ6ICAnY2xpY2snLFxyXG4gICAgICAgICAgICBtZXRob2Q6ICdzY3JvbGwnXHJcbiAgICAgICAgfSxcclxuICAgICAgICBfYWN0aXZlOiBudWxsLFxyXG4gICAgICAgIF9pbml0OiBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgdGhpcy5vbkRlc3Ryb3kgPSAkLnByb3h5KGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fZGVzdHJveSgpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jYXJvdXNlbCgpXHJcbiAgICAgICAgICAgICAgICAgICAgLm9uZSgnamNhcm91c2VsOmNyZWF0ZWVuZCcsICQucHJveHkodGhpcy5fY3JlYXRlLCB0aGlzKSk7XHJcbiAgICAgICAgICAgIH0sIHRoaXMpO1xyXG4gICAgICAgICAgICB0aGlzLm9uUmVsb2FkID0gJC5wcm94eSh0aGlzLl9yZWxvYWQsIHRoaXMpO1xyXG4gICAgICAgICAgICB0aGlzLm9uRXZlbnQgPSAkLnByb3h5KGZ1bmN0aW9uKGUpIHtcclxuICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuXHJcbiAgICAgICAgICAgICAgICB2YXIgbWV0aG9kID0gdGhpcy5vcHRpb25zKCdtZXRob2QnKTtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoJC5pc0Z1bmN0aW9uKG1ldGhvZCkpIHtcclxuICAgICAgICAgICAgICAgICAgICBtZXRob2QuY2FsbCh0aGlzKTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jYXJvdXNlbCgpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC5qY2Fyb3VzZWwodGhpcy5vcHRpb25zKCdtZXRob2QnKSwgdGhpcy5vcHRpb25zKCd0YXJnZXQnKSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0sIHRoaXMpO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgX2NyZWF0ZTogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIHRoaXMuY2Fyb3VzZWwoKVxyXG4gICAgICAgICAgICAgICAgLm9uZSgnamNhcm91c2VsOmRlc3Ryb3knLCB0aGlzLm9uRGVzdHJveSlcclxuICAgICAgICAgICAgICAgIC5vbignamNhcm91c2VsOnJlbG9hZGVuZCBqY2Fyb3VzZWw6c2Nyb2xsZW5kJywgdGhpcy5vblJlbG9hZCk7XHJcblxyXG4gICAgICAgICAgICB0aGlzLl9lbGVtZW50XHJcbiAgICAgICAgICAgICAgICAub24odGhpcy5vcHRpb25zKCdldmVudCcpICsgJy5qY2Fyb3VzZWxjb250cm9sJywgdGhpcy5vbkV2ZW50KTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMuX3JlbG9hZCgpO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgX2Rlc3Ryb3k6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICB0aGlzLl9lbGVtZW50XHJcbiAgICAgICAgICAgICAgICAub2ZmKCcuamNhcm91c2VsY29udHJvbCcsIHRoaXMub25FdmVudCk7XHJcblxyXG4gICAgICAgICAgICB0aGlzLmNhcm91c2VsKClcclxuICAgICAgICAgICAgICAgIC5vZmYoJ2pjYXJvdXNlbDpkZXN0cm95JywgdGhpcy5vbkRlc3Ryb3kpXHJcbiAgICAgICAgICAgICAgICAub2ZmKCdqY2Fyb3VzZWw6cmVsb2FkZW5kIGpjYXJvdXNlbDpzY3JvbGxlbmQnLCB0aGlzLm9uUmVsb2FkKTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIF9yZWxvYWQ6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICB2YXIgcGFyc2VkICAgPSAkLmpDYXJvdXNlbC5wYXJzZVRhcmdldCh0aGlzLm9wdGlvbnMoJ3RhcmdldCcpKSxcclxuICAgICAgICAgICAgICAgIGNhcm91c2VsID0gdGhpcy5jYXJvdXNlbCgpLFxyXG4gICAgICAgICAgICAgICAgYWN0aXZlO1xyXG5cclxuICAgICAgICAgICAgaWYgKHBhcnNlZC5yZWxhdGl2ZSkge1xyXG4gICAgICAgICAgICAgICAgYWN0aXZlID0gY2Fyb3VzZWxcclxuICAgICAgICAgICAgICAgICAgICAuamNhcm91c2VsKHBhcnNlZC50YXJnZXQgPiAwID8gJ2hhc05leHQnIDogJ2hhc1ByZXYnKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHZhciB0YXJnZXQgPSB0eXBlb2YgcGFyc2VkLnRhcmdldCAhPT0gJ29iamVjdCcgP1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhcm91c2VsLmpjYXJvdXNlbCgnaXRlbXMnKS5lcShwYXJzZWQudGFyZ2V0KSA6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFyc2VkLnRhcmdldDtcclxuXHJcbiAgICAgICAgICAgICAgICBhY3RpdmUgPSBjYXJvdXNlbC5qY2Fyb3VzZWwoJ3RhcmdldCcpLmluZGV4KHRhcmdldCkgPj0gMDtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKHRoaXMuX2FjdGl2ZSAhPT0gYWN0aXZlKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl90cmlnZ2VyKGFjdGl2ZSA/ICdhY3RpdmUnIDogJ2luYWN0aXZlJyk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9hY3RpdmUgPSBhY3RpdmU7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgICAgIH1cclxuICAgIH0pO1xyXG59KGpRdWVyeSkpO1xyXG5cclxuKGZ1bmN0aW9uKCQpIHtcclxuICAgICd1c2Ugc3RyaWN0JztcclxuXHJcbiAgICAkLmpDYXJvdXNlbC5wbHVnaW4oJ2pjYXJvdXNlbFBhZ2luYXRpb24nLCB7XHJcbiAgICAgICAgX29wdGlvbnM6IHtcclxuICAgICAgICAgICAgcGVyUGFnZTogbnVsbCxcclxuICAgICAgICAgICAgaXRlbTogZnVuY3Rpb24ocGFnZSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuICc8YSBocmVmPVwiIycgKyBwYWdlICsgJ1wiPicgKyBwYWdlICsgJzwvYT4nO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBldmVudDogICdjbGljaycsXHJcbiAgICAgICAgICAgIG1ldGhvZDogJ3Njcm9sbCdcclxuICAgICAgICB9LFxyXG4gICAgICAgIF9jYXJvdXNlbEl0ZW1zOiBudWxsLFxyXG4gICAgICAgIF9wYWdlczoge30sXHJcbiAgICAgICAgX2l0ZW1zOiB7fSxcclxuICAgICAgICBfY3VycmVudFBhZ2U6IG51bGwsXHJcbiAgICAgICAgX2luaXQ6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICB0aGlzLm9uRGVzdHJveSA9ICQucHJveHkoZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9kZXN0cm95KCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNhcm91c2VsKClcclxuICAgICAgICAgICAgICAgICAgICAub25lKCdqY2Fyb3VzZWw6Y3JlYXRlZW5kJywgJC5wcm94eSh0aGlzLl9jcmVhdGUsIHRoaXMpKTtcclxuICAgICAgICAgICAgfSwgdGhpcyk7XHJcbiAgICAgICAgICAgIHRoaXMub25SZWxvYWQgPSAkLnByb3h5KHRoaXMuX3JlbG9hZCwgdGhpcyk7XHJcbiAgICAgICAgICAgIHRoaXMub25TY3JvbGwgPSAkLnByb3h5KHRoaXMuX3VwZGF0ZSwgdGhpcyk7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBfY3JlYXRlOiBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgdGhpcy5jYXJvdXNlbCgpXHJcbiAgICAgICAgICAgICAgICAub25lKCdqY2Fyb3VzZWw6ZGVzdHJveScsIHRoaXMub25EZXN0cm95KVxyXG4gICAgICAgICAgICAgICAgLm9uKCdqY2Fyb3VzZWw6cmVsb2FkZW5kJywgdGhpcy5vblJlbG9hZClcclxuICAgICAgICAgICAgICAgIC5vbignamNhcm91c2VsOnNjcm9sbGVuZCcsIHRoaXMub25TY3JvbGwpO1xyXG5cclxuICAgICAgICAgICAgdGhpcy5fcmVsb2FkKCk7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBfZGVzdHJveTogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX2NsZWFyKCk7XHJcblxyXG4gICAgICAgICAgICB0aGlzLmNhcm91c2VsKClcclxuICAgICAgICAgICAgICAgIC5vZmYoJ2pjYXJvdXNlbDpkZXN0cm95JywgdGhpcy5vbkRlc3Ryb3kpXHJcbiAgICAgICAgICAgICAgICAub2ZmKCdqY2Fyb3VzZWw6cmVsb2FkZW5kJywgdGhpcy5vblJlbG9hZClcclxuICAgICAgICAgICAgICAgIC5vZmYoJ2pjYXJvdXNlbDpzY3JvbGxlbmQnLCB0aGlzLm9uU2Nyb2xsKTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMuX2Nhcm91c2VsSXRlbXMgPSBudWxsO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgX3JlbG9hZDogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIHZhciBwZXJQYWdlID0gdGhpcy5vcHRpb25zKCdwZXJQYWdlJyk7XHJcblxyXG4gICAgICAgICAgICB0aGlzLl9wYWdlcyA9IHt9O1xyXG4gICAgICAgICAgICB0aGlzLl9pdGVtcyA9IHt9O1xyXG5cclxuICAgICAgICAgICAgLy8gQ2FsY3VsYXRlIHBhZ2VzXHJcbiAgICAgICAgICAgIGlmICgkLmlzRnVuY3Rpb24ocGVyUGFnZSkpIHtcclxuICAgICAgICAgICAgICAgIHBlclBhZ2UgPSBwZXJQYWdlLmNhbGwodGhpcyk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmIChwZXJQYWdlID09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX3BhZ2VzID0gdGhpcy5fY2FsY3VsYXRlUGFnZXMoKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHZhciBwcCAgICA9IHBhcnNlSW50KHBlclBhZ2UsIDEwKSB8fCAwLFxyXG4gICAgICAgICAgICAgICAgICAgIGl0ZW1zID0gdGhpcy5fZ2V0Q2Fyb3VzZWxJdGVtcygpLFxyXG4gICAgICAgICAgICAgICAgICAgIHBhZ2UgID0gMSxcclxuICAgICAgICAgICAgICAgICAgICBpICAgICA9IDAsXHJcbiAgICAgICAgICAgICAgICAgICAgY3VycjtcclxuXHJcbiAgICAgICAgICAgICAgICB3aGlsZSAodHJ1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGN1cnIgPSBpdGVtcy5lcShpKyspO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAoY3Vyci5sZW5ndGggPT09IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAoIXRoaXMuX3BhZ2VzW3BhZ2VdKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3BhZ2VzW3BhZ2VdID0gY3VycjtcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9wYWdlc1twYWdlXSA9IHRoaXMuX3BhZ2VzW3BhZ2VdLmFkZChjdXJyKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChpICUgcHAgPT09IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcGFnZSsrO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgdGhpcy5fY2xlYXIoKTtcclxuXHJcbiAgICAgICAgICAgIHZhciBzZWxmICAgICA9IHRoaXMsXHJcbiAgICAgICAgICAgICAgICBjYXJvdXNlbCA9IHRoaXMuY2Fyb3VzZWwoKS5kYXRhKCdqY2Fyb3VzZWwnKSxcclxuICAgICAgICAgICAgICAgIGVsZW1lbnQgID0gdGhpcy5fZWxlbWVudCxcclxuICAgICAgICAgICAgICAgIGl0ZW0gICAgID0gdGhpcy5vcHRpb25zKCdpdGVtJyksXHJcbiAgICAgICAgICAgICAgICBudW1DYXJvdXNlbEl0ZW1zID0gdGhpcy5fZ2V0Q2Fyb3VzZWxJdGVtcygpLmxlbmd0aDtcclxuXHJcbiAgICAgICAgICAgICQuZWFjaCh0aGlzLl9wYWdlcywgZnVuY3Rpb24ocGFnZSwgY2Fyb3VzZWxJdGVtcykge1xyXG4gICAgICAgICAgICAgICAgdmFyIGN1cnJJdGVtID0gc2VsZi5faXRlbXNbcGFnZV0gPSAkKGl0ZW0uY2FsbChzZWxmLCBwYWdlLCBjYXJvdXNlbEl0ZW1zKSk7XHJcblxyXG4gICAgICAgICAgICAgICAgY3Vyckl0ZW0ub24oc2VsZi5vcHRpb25zKCdldmVudCcpICsgJy5qY2Fyb3VzZWxwYWdpbmF0aW9uJywgJC5wcm94eShmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgdGFyZ2V0ID0gY2Fyb3VzZWxJdGVtcy5lcSgwKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gSWYgY2lyY3VsYXIgd3JhcHBpbmcgZW5hYmxlZCwgZW5zdXJlIGNvcnJlY3Qgc2Nyb2xsaW5nIGRpcmVjdGlvblxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChjYXJvdXNlbC5jaXJjdWxhcikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgY3VycmVudEluZGV4ID0gY2Fyb3VzZWwuaW5kZXgoY2Fyb3VzZWwudGFyZ2V0KCkpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3SW5kZXggICAgID0gY2Fyb3VzZWwuaW5kZXgodGFyZ2V0KTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwYXJzZUZsb2F0KHBhZ2UpID4gcGFyc2VGbG9hdChzZWxmLl9jdXJyZW50UGFnZSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChuZXdJbmRleCA8IGN1cnJlbnRJbmRleCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhcmdldCA9ICcrPScgKyAobnVtQ2Fyb3VzZWxJdGVtcyAtIGN1cnJlbnRJbmRleCArIG5ld0luZGV4KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChuZXdJbmRleCA+IGN1cnJlbnRJbmRleCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhcmdldCA9ICctPScgKyAoY3VycmVudEluZGV4ICsgKG51bUNhcm91c2VsSXRlbXMgLSBuZXdJbmRleCkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICBjYXJvdXNlbFt0aGlzLm9wdGlvbnMoJ21ldGhvZCcpXSh0YXJnZXQpO1xyXG4gICAgICAgICAgICAgICAgfSwgc2VsZikpO1xyXG5cclxuICAgICAgICAgICAgICAgIGVsZW1lbnQuYXBwZW5kKGN1cnJJdGVtKTtcclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICB0aGlzLl91cGRhdGUoKTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIF91cGRhdGU6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICB2YXIgdGFyZ2V0ID0gdGhpcy5jYXJvdXNlbCgpLmpjYXJvdXNlbCgndGFyZ2V0JyksXHJcbiAgICAgICAgICAgICAgICBjdXJyZW50UGFnZTtcclxuXHJcbiAgICAgICAgICAgICQuZWFjaCh0aGlzLl9wYWdlcywgZnVuY3Rpb24ocGFnZSwgY2Fyb3VzZWxJdGVtcykge1xyXG4gICAgICAgICAgICAgICAgY2Fyb3VzZWxJdGVtcy5lYWNoKGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0YXJnZXQuaXModGhpcykpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudFBhZ2UgPSBwYWdlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKGN1cnJlbnRQYWdlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgIGlmICh0aGlzLl9jdXJyZW50UGFnZSAhPT0gY3VycmVudFBhZ2UpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX3RyaWdnZXIoJ2luYWN0aXZlJywgdGhpcy5faXRlbXNbdGhpcy5fY3VycmVudFBhZ2VdKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuX3RyaWdnZXIoJ2FjdGl2ZScsIHRoaXMuX2l0ZW1zW2N1cnJlbnRQYWdlXSk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHRoaXMuX2N1cnJlbnRQYWdlID0gY3VycmVudFBhZ2U7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBpdGVtczogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9pdGVtcztcclxuICAgICAgICB9LFxyXG4gICAgICAgIHJlbG9hZENhcm91c2VsSXRlbXM6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICB0aGlzLl9jYXJvdXNlbEl0ZW1zID0gbnVsbDtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBfY2xlYXI6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICB0aGlzLl9lbGVtZW50LmVtcHR5KCk7XHJcbiAgICAgICAgICAgIHRoaXMuX2N1cnJlbnRQYWdlID0gbnVsbDtcclxuICAgICAgICB9LFxyXG4gICAgICAgIF9jYWxjdWxhdGVQYWdlczogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIHZhciBjYXJvdXNlbCA9IHRoaXMuY2Fyb3VzZWwoKS5kYXRhKCdqY2Fyb3VzZWwnKSxcclxuICAgICAgICAgICAgICAgIGl0ZW1zICAgID0gdGhpcy5fZ2V0Q2Fyb3VzZWxJdGVtcygpLFxyXG4gICAgICAgICAgICAgICAgY2xpcCAgICAgPSBjYXJvdXNlbC5jbGlwcGluZygpLFxyXG4gICAgICAgICAgICAgICAgd2ggICAgICAgPSAwLFxyXG4gICAgICAgICAgICAgICAgaWR4ICAgICAgPSAwLFxyXG4gICAgICAgICAgICAgICAgcGFnZSAgICAgPSAxLFxyXG4gICAgICAgICAgICAgICAgcGFnZXMgICAgPSB7fSxcclxuICAgICAgICAgICAgICAgIGN1cnIsXHJcbiAgICAgICAgICAgICAgICBkaW07XHJcblxyXG4gICAgICAgICAgICB3aGlsZSAodHJ1ZSkge1xyXG4gICAgICAgICAgICAgICAgY3VyciA9IGl0ZW1zLmVxKGlkeCsrKTtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoY3Vyci5sZW5ndGggPT09IDApIHtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBkaW0gPSBjYXJvdXNlbC5kaW1lbnNpb24oY3Vycik7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKCh3aCArIGRpbSkgPiBjbGlwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcGFnZSsrO1xyXG4gICAgICAgICAgICAgICAgICAgIHdoID0gMDtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICB3aCArPSBkaW07XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKCFwYWdlc1twYWdlXSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHBhZ2VzW3BhZ2VdID0gY3VycjtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcGFnZXNbcGFnZV0gPSBwYWdlc1twYWdlXS5hZGQoY3Vycik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHJldHVybiBwYWdlcztcclxuICAgICAgICB9LFxyXG4gICAgICAgIF9nZXRDYXJvdXNlbEl0ZW1zOiBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgaWYgKCF0aGlzLl9jYXJvdXNlbEl0ZW1zKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9jYXJvdXNlbEl0ZW1zID0gdGhpcy5jYXJvdXNlbCgpLmpjYXJvdXNlbCgnaXRlbXMnKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2Nhcm91c2VsSXRlbXM7XHJcbiAgICAgICAgfVxyXG4gICAgfSk7XHJcbn0oalF1ZXJ5KSk7XHJcblxyXG4oZnVuY3Rpb24oJCwgZG9jdW1lbnQpIHtcclxuICAgICd1c2Ugc3RyaWN0JztcclxuXHJcbiAgICB2YXIgaGlkZGVuUHJvcCxcclxuICAgICAgICB2aXNpYmlsaXR5Q2hhbmdlRXZlbnQsXHJcbiAgICAgICAgdmlzaWJpbGl0eUNoYW5nZUV2ZW50TmFtZXMgPSB7XHJcbiAgICAgICAgICAgIGhpZGRlbjogJ3Zpc2liaWxpdHljaGFuZ2UnLFxyXG4gICAgICAgICAgICBtb3pIaWRkZW46ICdtb3p2aXNpYmlsaXR5Y2hhbmdlJyxcclxuICAgICAgICAgICAgbXNIaWRkZW46ICdtc3Zpc2liaWxpdHljaGFuZ2UnLFxyXG4gICAgICAgICAgICB3ZWJraXRIaWRkZW46ICd3ZWJraXR2aXNpYmlsaXR5Y2hhbmdlJ1xyXG4gICAgICAgIH1cclxuICAgIDtcclxuXHJcbiAgICAkLmVhY2godmlzaWJpbGl0eUNoYW5nZUV2ZW50TmFtZXMsIGZ1bmN0aW9uKGtleSwgdmFsKSB7XHJcbiAgICAgICAgaWYgKHR5cGVvZiBkb2N1bWVudFtrZXldICE9PSAndW5kZWZpbmVkJykge1xyXG4gICAgICAgICAgICBoaWRkZW5Qcm9wID0ga2V5O1xyXG4gICAgICAgICAgICB2aXNpYmlsaXR5Q2hhbmdlRXZlbnQgPSB2YWw7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICB9KTtcclxuXHJcbiAgICAkLmpDYXJvdXNlbC5wbHVnaW4oJ2pjYXJvdXNlbEF1dG9zY3JvbGwnLCB7XHJcbiAgICAgICAgX29wdGlvbnM6IHtcclxuICAgICAgICAgICAgdGFyZ2V0OiAgICAnKz0xJyxcclxuICAgICAgICAgICAgaW50ZXJ2YWw6ICAzMDAwLFxyXG4gICAgICAgICAgICBhdXRvc3RhcnQ6IHRydWVcclxuICAgICAgICB9LFxyXG4gICAgICAgIF90aW1lcjogbnVsbCxcclxuICAgICAgICBfc3RhcnRlZDogZmFsc2UsXHJcbiAgICAgICAgX2luaXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdGhpcy5vbkRlc3Ryb3kgPSAkLnByb3h5KGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fZGVzdHJveSgpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jYXJvdXNlbCgpXHJcbiAgICAgICAgICAgICAgICAgICAgLm9uZSgnamNhcm91c2VsOmNyZWF0ZWVuZCcsICQucHJveHkodGhpcy5fY3JlYXRlLCB0aGlzKSk7XHJcbiAgICAgICAgICAgIH0sIHRoaXMpO1xyXG5cclxuICAgICAgICAgICAgdGhpcy5vbkFuaW1hdGVFbmQgPSAkLnByb3h5KHRoaXMuX3N0YXJ0LCB0aGlzKTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMub25WaXNpYmlsaXR5Q2hhbmdlID0gJC5wcm94eShmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgIGlmIChkb2N1bWVudFtoaWRkZW5Qcm9wXSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3N0b3AoKTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fc3RhcnQoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSwgdGhpcyk7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBfY3JlYXRlOiBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgdGhpcy5jYXJvdXNlbCgpXHJcbiAgICAgICAgICAgICAgICAub25lKCdqY2Fyb3VzZWw6ZGVzdHJveScsIHRoaXMub25EZXN0cm95KTtcclxuXHJcbiAgICAgICAgICAgICQoZG9jdW1lbnQpXHJcbiAgICAgICAgICAgICAgICAub24odmlzaWJpbGl0eUNoYW5nZUV2ZW50LCB0aGlzLm9uVmlzaWJpbGl0eUNoYW5nZSk7XHJcblxyXG4gICAgICAgICAgICBpZiAodGhpcy5vcHRpb25zKCdhdXRvc3RhcnQnKSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zdGFydCgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuICAgICAgICBfZGVzdHJveTogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX3N0b3AoKTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMuY2Fyb3VzZWwoKVxyXG4gICAgICAgICAgICAgICAgLm9mZignamNhcm91c2VsOmRlc3Ryb3knLCB0aGlzLm9uRGVzdHJveSk7XHJcblxyXG4gICAgICAgICAgICAkKGRvY3VtZW50KVxyXG4gICAgICAgICAgICAgICAgLm9mZih2aXNpYmlsaXR5Q2hhbmdlRXZlbnQsIHRoaXMub25WaXNpYmlsaXR5Q2hhbmdlKTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIF9zdGFydDogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX3N0b3AoKTtcclxuXHJcbiAgICAgICAgICAgIGlmICghdGhpcy5fc3RhcnRlZCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB0aGlzLmNhcm91c2VsKClcclxuICAgICAgICAgICAgICAgIC5vbmUoJ2pjYXJvdXNlbDphbmltYXRlZW5kJywgdGhpcy5vbkFuaW1hdGVFbmQpO1xyXG5cclxuICAgICAgICAgICAgdGhpcy5fdGltZXIgPSBzZXRUaW1lb3V0KCQucHJveHkoZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNhcm91c2VsKCkuamNhcm91c2VsKCdzY3JvbGwnLCB0aGlzLm9wdGlvbnMoJ3RhcmdldCcpKTtcclxuICAgICAgICAgICAgfSwgdGhpcyksIHRoaXMub3B0aW9ucygnaW50ZXJ2YWwnKSk7XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gdGhpcztcclxuICAgICAgICB9LFxyXG4gICAgICAgIF9zdG9wOiBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMuX3RpbWVyKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl90aW1lciA9IGNsZWFyVGltZW91dCh0aGlzLl90aW1lcik7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHRoaXMuY2Fyb3VzZWwoKVxyXG4gICAgICAgICAgICAgICAgLm9mZignamNhcm91c2VsOmFuaW1hdGVlbmQnLCB0aGlzLm9uQW5pbWF0ZUVuZCk7XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gdGhpcztcclxuICAgICAgICB9LFxyXG4gICAgICAgIHN0YXJ0OiBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgdGhpcy5fc3RhcnRlZCA9IHRydWU7XHJcbiAgICAgICAgICAgIHRoaXMuX3N0YXJ0KCk7XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gdGhpcztcclxuICAgICAgICB9LFxyXG4gICAgICAgIHN0b3A6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICB0aGlzLl9zdGFydGVkID0gZmFsc2U7XHJcbiAgICAgICAgICAgIHRoaXMuX3N0b3AoKTtcclxuXHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgICAgIH1cclxuICAgIH0pO1xyXG59KGpRdWVyeSwgZG9jdW1lbnQpKTtcclxuLyohXHJcbiAqIElzb3RvcGUgUEFDS0FHRUQgdjIuMi4yXHJcbiAqXHJcbiAqIExpY2Vuc2VkIEdQTHYzIGZvciBvcGVuIHNvdXJjZSB1c2VcclxuICogb3IgSXNvdG9wZSBDb21tZXJjaWFsIExpY2Vuc2UgZm9yIGNvbW1lcmNpYWwgdXNlXHJcbiAqXHJcbiAqIGh0dHA6Ly9pc290b3BlLm1ldGFmaXp6eS5jb1xyXG4gKiBDb3B5cmlnaHQgMjAxNSBNZXRhZml6enlcclxuICovXHJcblxyXG4vKipcclxuICogQnJpZGdldCBtYWtlcyBqUXVlcnkgd2lkZ2V0c1xyXG4gKiB2MS4xLjBcclxuICogTUlUIGxpY2Vuc2VcclxuICovXHJcblxyXG4oIGZ1bmN0aW9uKCB3aW5kb3cgKSB7XHJcblxyXG5cclxuXHJcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIHV0aWxzIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIC8vXHJcblxyXG52YXIgc2xpY2UgPSBBcnJheS5wcm90b3R5cGUuc2xpY2U7XHJcblxyXG5mdW5jdGlvbiBub29wKCkge31cclxuXHJcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIGRlZmluaXRpb24gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gLy9cclxuXHJcbmZ1bmN0aW9uIGRlZmluZUJyaWRnZXQoICQgKSB7XHJcblxyXG4vLyBiYWlsIGlmIG5vIGpRdWVyeVxyXG5pZiAoICEkICkge1xyXG4gIHJldHVybjtcclxufVxyXG5cclxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gYWRkT3B0aW9uTWV0aG9kIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIC8vXHJcblxyXG4vKipcclxuICogYWRkcyBvcHRpb24gbWV0aG9kIC0+ICQoKS5wbHVnaW4oJ29wdGlvbicsIHsuLi59KVxyXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBQbHVnaW5DbGFzcyAtIGNvbnN0cnVjdG9yIGNsYXNzXHJcbiAqL1xyXG5mdW5jdGlvbiBhZGRPcHRpb25NZXRob2QoIFBsdWdpbkNsYXNzICkge1xyXG4gIC8vIGRvbid0IG92ZXJ3cml0ZSBvcmlnaW5hbCBvcHRpb24gbWV0aG9kXHJcbiAgaWYgKCBQbHVnaW5DbGFzcy5wcm90b3R5cGUub3B0aW9uICkge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgLy8gb3B0aW9uIHNldHRlclxyXG4gIFBsdWdpbkNsYXNzLnByb3RvdHlwZS5vcHRpb24gPSBmdW5jdGlvbiggb3B0cyApIHtcclxuICAgIC8vIGJhaWwgb3V0IGlmIG5vdCBhbiBvYmplY3RcclxuICAgIGlmICggISQuaXNQbGFpbk9iamVjdCggb3B0cyApICl7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIHRoaXMub3B0aW9ucyA9ICQuZXh0ZW5kKCB0cnVlLCB0aGlzLm9wdGlvbnMsIG9wdHMgKTtcclxuICB9O1xyXG59XHJcblxyXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBwbHVnaW4gYnJpZGdlIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIC8vXHJcblxyXG4vLyBoZWxwZXIgZnVuY3Rpb24gZm9yIGxvZ2dpbmcgZXJyb3JzXHJcbi8vICQuZXJyb3IgYnJlYWtzIGpRdWVyeSBjaGFpbmluZ1xyXG52YXIgbG9nRXJyb3IgPSB0eXBlb2YgY29uc29sZSA9PT0gJ3VuZGVmaW5lZCcgPyBub29wIDpcclxuICBmdW5jdGlvbiggbWVzc2FnZSApIHtcclxuICAgIGNvbnNvbGUuZXJyb3IoIG1lc3NhZ2UgKTtcclxuICB9O1xyXG5cclxuLyoqXHJcbiAqIGpRdWVyeSBwbHVnaW4gYnJpZGdlLCBhY2Nlc3MgbWV0aG9kcyBsaWtlICRlbGVtLnBsdWdpbignbWV0aG9kJylcclxuICogQHBhcmFtIHtTdHJpbmd9IG5hbWVzcGFjZSAtIHBsdWdpbiBuYW1lXHJcbiAqIEBwYXJhbSB7RnVuY3Rpb259IFBsdWdpbkNsYXNzIC0gY29uc3RydWN0b3IgY2xhc3NcclxuICovXHJcbmZ1bmN0aW9uIGJyaWRnZSggbmFtZXNwYWNlLCBQbHVnaW5DbGFzcyApIHtcclxuICAvLyBhZGQgdG8galF1ZXJ5IGZuIG5hbWVzcGFjZVxyXG4gICQuZm5bIG5hbWVzcGFjZSBdID0gZnVuY3Rpb24oIG9wdGlvbnMgKSB7XHJcbiAgICBpZiAoIHR5cGVvZiBvcHRpb25zID09PSAnc3RyaW5nJyApIHtcclxuICAgICAgLy8gY2FsbCBwbHVnaW4gbWV0aG9kIHdoZW4gZmlyc3QgYXJndW1lbnQgaXMgYSBzdHJpbmdcclxuICAgICAgLy8gZ2V0IGFyZ3VtZW50cyBmb3IgbWV0aG9kXHJcbiAgICAgIHZhciBhcmdzID0gc2xpY2UuY2FsbCggYXJndW1lbnRzLCAxICk7XHJcblxyXG4gICAgICBmb3IgKCB2YXIgaT0wLCBsZW4gPSB0aGlzLmxlbmd0aDsgaSA8IGxlbjsgaSsrICkge1xyXG4gICAgICAgIHZhciBlbGVtID0gdGhpc1tpXTtcclxuICAgICAgICB2YXIgaW5zdGFuY2UgPSAkLmRhdGEoIGVsZW0sIG5hbWVzcGFjZSApO1xyXG4gICAgICAgIGlmICggIWluc3RhbmNlICkge1xyXG4gICAgICAgICAgbG9nRXJyb3IoIFwiY2Fubm90IGNhbGwgbWV0aG9kcyBvbiBcIiArIG5hbWVzcGFjZSArIFwiIHByaW9yIHRvIGluaXRpYWxpemF0aW9uOyBcIiArXHJcbiAgICAgICAgICAgIFwiYXR0ZW1wdGVkIHRvIGNhbGwgJ1wiICsgb3B0aW9ucyArIFwiJ1wiICk7XHJcbiAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKCAhJC5pc0Z1bmN0aW9uKCBpbnN0YW5jZVtvcHRpb25zXSApIHx8IG9wdGlvbnMuY2hhckF0KDApID09PSAnXycgKSB7XHJcbiAgICAgICAgICBsb2dFcnJvciggXCJubyBzdWNoIG1ldGhvZCAnXCIgKyBvcHRpb25zICsgXCInIGZvciBcIiArIG5hbWVzcGFjZSArIFwiIGluc3RhbmNlXCIgKTtcclxuICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gdHJpZ2dlciBtZXRob2Qgd2l0aCBhcmd1bWVudHNcclxuICAgICAgICB2YXIgcmV0dXJuVmFsdWUgPSBpbnN0YW5jZVsgb3B0aW9ucyBdLmFwcGx5KCBpbnN0YW5jZSwgYXJncyApO1xyXG5cclxuICAgICAgICAvLyBicmVhayBsb29rIGFuZCByZXR1cm4gZmlyc3QgdmFsdWUgaWYgcHJvdmlkZWRcclxuICAgICAgICBpZiAoIHJldHVyblZhbHVlICE9PSB1bmRlZmluZWQgKSB7XHJcbiAgICAgICAgICByZXR1cm4gcmV0dXJuVmFsdWU7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICAgIC8vIHJldHVybiB0aGlzIGlmIG5vIHJldHVybiB2YWx1ZVxyXG4gICAgICByZXR1cm4gdGhpcztcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHZhciBpbnN0YW5jZSA9ICQuZGF0YSggdGhpcywgbmFtZXNwYWNlICk7XHJcbiAgICAgICAgaWYgKCBpbnN0YW5jZSApIHtcclxuICAgICAgICAgIC8vIGFwcGx5IG9wdGlvbnMgJiBpbml0XHJcbiAgICAgICAgICBpbnN0YW5jZS5vcHRpb24oIG9wdGlvbnMgKTtcclxuICAgICAgICAgIGluc3RhbmNlLl9pbml0KCk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIC8vIGluaXRpYWxpemUgbmV3IGluc3RhbmNlXHJcbiAgICAgICAgICBpbnN0YW5jZSA9IG5ldyBQbHVnaW5DbGFzcyggdGhpcywgb3B0aW9ucyApO1xyXG4gICAgICAgICAgJC5kYXRhKCB0aGlzLCBuYW1lc3BhY2UsIGluc3RhbmNlICk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9KTtcclxuICAgIH1cclxuICB9O1xyXG5cclxufVxyXG5cclxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gYnJpZGdldCAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAvL1xyXG5cclxuLyoqXHJcbiAqIGNvbnZlcnRzIGEgUHJvdG90eXBpY2FsIGNsYXNzIGludG8gYSBwcm9wZXIgalF1ZXJ5IHBsdWdpblxyXG4gKiAgIHRoZSBjbGFzcyBtdXN0IGhhdmUgYSAuX2luaXQgbWV0aG9kXHJcbiAqIEBwYXJhbSB7U3RyaW5nfSBuYW1lc3BhY2UgLSBwbHVnaW4gbmFtZSwgdXNlZCBpbiAkKCkucGx1Z2luTmFtZVxyXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBQbHVnaW5DbGFzcyAtIGNvbnN0cnVjdG9yIGNsYXNzXHJcbiAqL1xyXG4kLmJyaWRnZXQgPSBmdW5jdGlvbiggbmFtZXNwYWNlLCBQbHVnaW5DbGFzcyApIHtcclxuICBhZGRPcHRpb25NZXRob2QoIFBsdWdpbkNsYXNzICk7XHJcbiAgYnJpZGdlKCBuYW1lc3BhY2UsIFBsdWdpbkNsYXNzICk7XHJcbn07XHJcblxyXG5yZXR1cm4gJC5icmlkZ2V0O1xyXG5cclxufVxyXG5cclxuLy8gdHJhbnNwb3J0XHJcbmlmICggdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kICkge1xyXG4gIC8vIEFNRFxyXG4gIGRlZmluZSggJ2pxdWVyeS1icmlkZ2V0L2pxdWVyeS5icmlkZ2V0JyxbICdqcXVlcnknIF0sIGRlZmluZUJyaWRnZXQgKTtcclxufSBlbHNlIGlmICggdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICkge1xyXG4gIGRlZmluZUJyaWRnZXQoIHJlcXVpcmUoJ2pxdWVyeScpICk7XHJcbn0gZWxzZSB7XHJcbiAgLy8gZ2V0IGpxdWVyeSBmcm9tIGJyb3dzZXIgZ2xvYmFsXHJcbiAgZGVmaW5lQnJpZGdldCggd2luZG93LmpRdWVyeSApO1xyXG59XHJcblxyXG59KSggd2luZG93ICk7XHJcblxyXG4vKiFcclxuICogZXZlbnRpZSB2MS4wLjZcclxuICogZXZlbnQgYmluZGluZyBoZWxwZXJcclxuICogICBldmVudGllLmJpbmQoIGVsZW0sICdjbGljaycsIG15Rm4gKVxyXG4gKiAgIGV2ZW50aWUudW5iaW5kKCBlbGVtLCAnY2xpY2snLCBteUZuIClcclxuICogTUlUIGxpY2Vuc2VcclxuICovXHJcblxyXG4vKmpzaGludCBicm93c2VyOiB0cnVlLCB1bmRlZjogdHJ1ZSwgdW51c2VkOiB0cnVlICovXHJcbi8qZ2xvYmFsIGRlZmluZTogZmFsc2UsIG1vZHVsZTogZmFsc2UgKi9cclxuXHJcbiggZnVuY3Rpb24oIHdpbmRvdyApIHtcclxuXHJcblxyXG5cclxudmFyIGRvY0VsZW0gPSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XHJcblxyXG52YXIgYmluZCA9IGZ1bmN0aW9uKCkge307XHJcblxyXG5mdW5jdGlvbiBnZXRJRUV2ZW50KCBvYmogKSB7XHJcbiAgdmFyIGV2ZW50ID0gd2luZG93LmV2ZW50O1xyXG4gIC8vIGFkZCBldmVudC50YXJnZXRcclxuICBldmVudC50YXJnZXQgPSBldmVudC50YXJnZXQgfHwgZXZlbnQuc3JjRWxlbWVudCB8fCBvYmo7XHJcbiAgcmV0dXJuIGV2ZW50O1xyXG59XHJcblxyXG5pZiAoIGRvY0VsZW0uYWRkRXZlbnRMaXN0ZW5lciApIHtcclxuICBiaW5kID0gZnVuY3Rpb24oIG9iaiwgdHlwZSwgZm4gKSB7XHJcbiAgICBvYmouYWRkRXZlbnRMaXN0ZW5lciggdHlwZSwgZm4sIGZhbHNlICk7XHJcbiAgfTtcclxufSBlbHNlIGlmICggZG9jRWxlbS5hdHRhY2hFdmVudCApIHtcclxuICBiaW5kID0gZnVuY3Rpb24oIG9iaiwgdHlwZSwgZm4gKSB7XHJcbiAgICBvYmpbIHR5cGUgKyBmbiBdID0gZm4uaGFuZGxlRXZlbnQgP1xyXG4gICAgICBmdW5jdGlvbigpIHtcclxuICAgICAgICB2YXIgZXZlbnQgPSBnZXRJRUV2ZW50KCBvYmogKTtcclxuICAgICAgICBmbi5oYW5kbGVFdmVudC5jYWxsKCBmbiwgZXZlbnQgKTtcclxuICAgICAgfSA6XHJcbiAgICAgIGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHZhciBldmVudCA9IGdldElFRXZlbnQoIG9iaiApO1xyXG4gICAgICAgIGZuLmNhbGwoIG9iaiwgZXZlbnQgKTtcclxuICAgICAgfTtcclxuICAgIG9iai5hdHRhY2hFdmVudCggXCJvblwiICsgdHlwZSwgb2JqWyB0eXBlICsgZm4gXSApO1xyXG4gIH07XHJcbn1cclxuXHJcbnZhciB1bmJpbmQgPSBmdW5jdGlvbigpIHt9O1xyXG5cclxuaWYgKCBkb2NFbGVtLnJlbW92ZUV2ZW50TGlzdGVuZXIgKSB7XHJcbiAgdW5iaW5kID0gZnVuY3Rpb24oIG9iaiwgdHlwZSwgZm4gKSB7XHJcbiAgICBvYmoucmVtb3ZlRXZlbnRMaXN0ZW5lciggdHlwZSwgZm4sIGZhbHNlICk7XHJcbiAgfTtcclxufSBlbHNlIGlmICggZG9jRWxlbS5kZXRhY2hFdmVudCApIHtcclxuICB1bmJpbmQgPSBmdW5jdGlvbiggb2JqLCB0eXBlLCBmbiApIHtcclxuICAgIG9iai5kZXRhY2hFdmVudCggXCJvblwiICsgdHlwZSwgb2JqWyB0eXBlICsgZm4gXSApO1xyXG4gICAgdHJ5IHtcclxuICAgICAgZGVsZXRlIG9ialsgdHlwZSArIGZuIF07XHJcbiAgICB9IGNhdGNoICggZXJyICkge1xyXG4gICAgICAvLyBjYW4ndCBkZWxldGUgd2luZG93IG9iamVjdCBwcm9wZXJ0aWVzXHJcbiAgICAgIG9ialsgdHlwZSArIGZuIF0gPSB1bmRlZmluZWQ7XHJcbiAgICB9XHJcbiAgfTtcclxufVxyXG5cclxudmFyIGV2ZW50aWUgPSB7XHJcbiAgYmluZDogYmluZCxcclxuICB1bmJpbmQ6IHVuYmluZFxyXG59O1xyXG5cclxuLy8gLS0tLS0gbW9kdWxlIGRlZmluaXRpb24gLS0tLS0gLy9cclxuXHJcbmlmICggdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kICkge1xyXG4gIC8vIEFNRFxyXG4gIGRlZmluZSggJ2V2ZW50aWUvZXZlbnRpZScsZXZlbnRpZSApO1xyXG59IGVsc2UgaWYgKCB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgKSB7XHJcbiAgLy8gQ29tbW9uSlNcclxuICBtb2R1bGUuZXhwb3J0cyA9IGV2ZW50aWU7XHJcbn0gZWxzZSB7XHJcbiAgLy8gYnJvd3NlciBnbG9iYWxcclxuICB3aW5kb3cuZXZlbnRpZSA9IGV2ZW50aWU7XHJcbn1cclxuXHJcbn0pKCB3aW5kb3cgKTtcclxuXHJcbi8qIVxyXG4gKiBFdmVudEVtaXR0ZXIgdjQuMi4xMSAtIGdpdC5pby9lZVxyXG4gKiBVbmxpY2Vuc2UgLSBodHRwOi8vdW5saWNlbnNlLm9yZy9cclxuICogT2xpdmVyIENhbGR3ZWxsIC0gaHR0cDovL29saS5tZS51ay9cclxuICogQHByZXNlcnZlXHJcbiAqL1xyXG5cclxuOyhmdW5jdGlvbiAoKSB7XHJcbiAgICAndXNlIHN0cmljdCc7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBDbGFzcyBmb3IgbWFuYWdpbmcgZXZlbnRzLlxyXG4gICAgICogQ2FuIGJlIGV4dGVuZGVkIHRvIHByb3ZpZGUgZXZlbnQgZnVuY3Rpb25hbGl0eSBpbiBvdGhlciBjbGFzc2VzLlxyXG4gICAgICpcclxuICAgICAqIEBjbGFzcyBFdmVudEVtaXR0ZXIgTWFuYWdlcyBldmVudCByZWdpc3RlcmluZyBhbmQgZW1pdHRpbmcuXHJcbiAgICAgKi9cclxuICAgIGZ1bmN0aW9uIEV2ZW50RW1pdHRlcigpIHt9XHJcblxyXG4gICAgLy8gU2hvcnRjdXRzIHRvIGltcHJvdmUgc3BlZWQgYW5kIHNpemVcclxuICAgIHZhciBwcm90byA9IEV2ZW50RW1pdHRlci5wcm90b3R5cGU7XHJcbiAgICB2YXIgZXhwb3J0cyA9IHRoaXM7XHJcbiAgICB2YXIgb3JpZ2luYWxHbG9iYWxWYWx1ZSA9IGV4cG9ydHMuRXZlbnRFbWl0dGVyO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogRmluZHMgdGhlIGluZGV4IG9mIHRoZSBsaXN0ZW5lciBmb3IgdGhlIGV2ZW50IGluIGl0cyBzdG9yYWdlIGFycmF5LlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb25bXX0gbGlzdGVuZXJzIEFycmF5IG9mIGxpc3RlbmVycyB0byBzZWFyY2ggdGhyb3VnaC5cclxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGxpc3RlbmVyIE1ldGhvZCB0byBsb29rIGZvci5cclxuICAgICAqIEByZXR1cm4ge051bWJlcn0gSW5kZXggb2YgdGhlIHNwZWNpZmllZCBsaXN0ZW5lciwgLTEgaWYgbm90IGZvdW5kXHJcbiAgICAgKiBAYXBpIHByaXZhdGVcclxuICAgICAqL1xyXG4gICAgZnVuY3Rpb24gaW5kZXhPZkxpc3RlbmVyKGxpc3RlbmVycywgbGlzdGVuZXIpIHtcclxuICAgICAgICB2YXIgaSA9IGxpc3RlbmVycy5sZW5ndGg7XHJcbiAgICAgICAgd2hpbGUgKGktLSkge1xyXG4gICAgICAgICAgICBpZiAobGlzdGVuZXJzW2ldLmxpc3RlbmVyID09PSBsaXN0ZW5lcikge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiAtMTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEFsaWFzIGEgbWV0aG9kIHdoaWxlIGtlZXBpbmcgdGhlIGNvbnRleHQgY29ycmVjdCwgdG8gYWxsb3cgZm9yIG92ZXJ3cml0aW5nIG9mIHRhcmdldCBtZXRob2QuXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IG5hbWUgVGhlIG5hbWUgb2YgdGhlIHRhcmdldCBtZXRob2QuXHJcbiAgICAgKiBAcmV0dXJuIHtGdW5jdGlvbn0gVGhlIGFsaWFzZWQgbWV0aG9kXHJcbiAgICAgKiBAYXBpIHByaXZhdGVcclxuICAgICAqL1xyXG4gICAgZnVuY3Rpb24gYWxpYXMobmFtZSkge1xyXG4gICAgICAgIHJldHVybiBmdW5jdGlvbiBhbGlhc0Nsb3N1cmUoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzW25hbWVdLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XHJcbiAgICAgICAgfTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFJldHVybnMgdGhlIGxpc3RlbmVyIGFycmF5IGZvciB0aGUgc3BlY2lmaWVkIGV2ZW50LlxyXG4gICAgICogV2lsbCBpbml0aWFsaXNlIHRoZSBldmVudCBvYmplY3QgYW5kIGxpc3RlbmVyIGFycmF5cyBpZiByZXF1aXJlZC5cclxuICAgICAqIFdpbGwgcmV0dXJuIGFuIG9iamVjdCBpZiB5b3UgdXNlIGEgcmVnZXggc2VhcmNoLiBUaGUgb2JqZWN0IGNvbnRhaW5zIGtleXMgZm9yIGVhY2ggbWF0Y2hlZCBldmVudC4gU28gL2JhW3J6XS8gbWlnaHQgcmV0dXJuIGFuIG9iamVjdCBjb250YWluaW5nIGJhciBhbmQgYmF6LiBCdXQgb25seSBpZiB5b3UgaGF2ZSBlaXRoZXIgZGVmaW5lZCB0aGVtIHdpdGggZGVmaW5lRXZlbnQgb3IgYWRkZWQgc29tZSBsaXN0ZW5lcnMgdG8gdGhlbS5cclxuICAgICAqIEVhY2ggcHJvcGVydHkgaW4gdGhlIG9iamVjdCByZXNwb25zZSBpcyBhbiBhcnJheSBvZiBsaXN0ZW5lciBmdW5jdGlvbnMuXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHtTdHJpbmd8UmVnRXhwfSBldnQgTmFtZSBvZiB0aGUgZXZlbnQgdG8gcmV0dXJuIHRoZSBsaXN0ZW5lcnMgZnJvbS5cclxuICAgICAqIEByZXR1cm4ge0Z1bmN0aW9uW118T2JqZWN0fSBBbGwgbGlzdGVuZXIgZnVuY3Rpb25zIGZvciB0aGUgZXZlbnQuXHJcbiAgICAgKi9cclxuICAgIHByb3RvLmdldExpc3RlbmVycyA9IGZ1bmN0aW9uIGdldExpc3RlbmVycyhldnQpIHtcclxuICAgICAgICB2YXIgZXZlbnRzID0gdGhpcy5fZ2V0RXZlbnRzKCk7XHJcbiAgICAgICAgdmFyIHJlc3BvbnNlO1xyXG4gICAgICAgIHZhciBrZXk7XHJcblxyXG4gICAgICAgIC8vIFJldHVybiBhIGNvbmNhdGVuYXRlZCBhcnJheSBvZiBhbGwgbWF0Y2hpbmcgZXZlbnRzIGlmXHJcbiAgICAgICAgLy8gdGhlIHNlbGVjdG9yIGlzIGEgcmVndWxhciBleHByZXNzaW9uLlxyXG4gICAgICAgIGlmIChldnQgaW5zdGFuY2VvZiBSZWdFeHApIHtcclxuICAgICAgICAgICAgcmVzcG9uc2UgPSB7fTtcclxuICAgICAgICAgICAgZm9yIChrZXkgaW4gZXZlbnRzKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoZXZlbnRzLmhhc093blByb3BlcnR5KGtleSkgJiYgZXZ0LnRlc3Qoa2V5KSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJlc3BvbnNlW2tleV0gPSBldmVudHNba2V5XTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgcmVzcG9uc2UgPSBldmVudHNbZXZ0XSB8fCAoZXZlbnRzW2V2dF0gPSBbXSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gcmVzcG9uc2U7XHJcbiAgICB9O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogVGFrZXMgYSBsaXN0IG9mIGxpc3RlbmVyIG9iamVjdHMgYW5kIGZsYXR0ZW5zIGl0IGludG8gYSBsaXN0IG9mIGxpc3RlbmVyIGZ1bmN0aW9ucy5cclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0ge09iamVjdFtdfSBsaXN0ZW5lcnMgUmF3IGxpc3RlbmVyIG9iamVjdHMuXHJcbiAgICAgKiBAcmV0dXJuIHtGdW5jdGlvbltdfSBKdXN0IHRoZSBsaXN0ZW5lciBmdW5jdGlvbnMuXHJcbiAgICAgKi9cclxuICAgIHByb3RvLmZsYXR0ZW5MaXN0ZW5lcnMgPSBmdW5jdGlvbiBmbGF0dGVuTGlzdGVuZXJzKGxpc3RlbmVycykge1xyXG4gICAgICAgIHZhciBmbGF0TGlzdGVuZXJzID0gW107XHJcbiAgICAgICAgdmFyIGk7XHJcblxyXG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBsaXN0ZW5lcnMubGVuZ3RoOyBpICs9IDEpIHtcclxuICAgICAgICAgICAgZmxhdExpc3RlbmVycy5wdXNoKGxpc3RlbmVyc1tpXS5saXN0ZW5lcik7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gZmxhdExpc3RlbmVycztcclxuICAgIH07XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBGZXRjaGVzIHRoZSByZXF1ZXN0ZWQgbGlzdGVuZXJzIHZpYSBnZXRMaXN0ZW5lcnMgYnV0IHdpbGwgYWx3YXlzIHJldHVybiB0aGUgcmVzdWx0cyBpbnNpZGUgYW4gb2JqZWN0LiBUaGlzIGlzIG1haW5seSBmb3IgaW50ZXJuYWwgdXNlIGJ1dCBvdGhlcnMgbWF5IGZpbmQgaXQgdXNlZnVsLlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7U3RyaW5nfFJlZ0V4cH0gZXZ0IE5hbWUgb2YgdGhlIGV2ZW50IHRvIHJldHVybiB0aGUgbGlzdGVuZXJzIGZyb20uXHJcbiAgICAgKiBAcmV0dXJuIHtPYmplY3R9IEFsbCBsaXN0ZW5lciBmdW5jdGlvbnMgZm9yIGFuIGV2ZW50IGluIGFuIG9iamVjdC5cclxuICAgICAqL1xyXG4gICAgcHJvdG8uZ2V0TGlzdGVuZXJzQXNPYmplY3QgPSBmdW5jdGlvbiBnZXRMaXN0ZW5lcnNBc09iamVjdChldnQpIHtcclxuICAgICAgICB2YXIgbGlzdGVuZXJzID0gdGhpcy5nZXRMaXN0ZW5lcnMoZXZ0KTtcclxuICAgICAgICB2YXIgcmVzcG9uc2U7XHJcblxyXG4gICAgICAgIGlmIChsaXN0ZW5lcnMgaW5zdGFuY2VvZiBBcnJheSkge1xyXG4gICAgICAgICAgICByZXNwb25zZSA9IHt9O1xyXG4gICAgICAgICAgICByZXNwb25zZVtldnRdID0gbGlzdGVuZXJzO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIHJlc3BvbnNlIHx8IGxpc3RlbmVycztcclxuICAgIH07XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBBZGRzIGEgbGlzdGVuZXIgZnVuY3Rpb24gdG8gdGhlIHNwZWNpZmllZCBldmVudC5cclxuICAgICAqIFRoZSBsaXN0ZW5lciB3aWxsIG5vdCBiZSBhZGRlZCBpZiBpdCBpcyBhIGR1cGxpY2F0ZS5cclxuICAgICAqIElmIHRoZSBsaXN0ZW5lciByZXR1cm5zIHRydWUgdGhlbiBpdCB3aWxsIGJlIHJlbW92ZWQgYWZ0ZXIgaXQgaXMgY2FsbGVkLlxyXG4gICAgICogSWYgeW91IHBhc3MgYSByZWd1bGFyIGV4cHJlc3Npb24gYXMgdGhlIGV2ZW50IG5hbWUgdGhlbiB0aGUgbGlzdGVuZXIgd2lsbCBiZSBhZGRlZCB0byBhbGwgZXZlbnRzIHRoYXQgbWF0Y2ggaXQuXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHtTdHJpbmd8UmVnRXhwfSBldnQgTmFtZSBvZiB0aGUgZXZlbnQgdG8gYXR0YWNoIHRoZSBsaXN0ZW5lciB0by5cclxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGxpc3RlbmVyIE1ldGhvZCB0byBiZSBjYWxsZWQgd2hlbiB0aGUgZXZlbnQgaXMgZW1pdHRlZC4gSWYgdGhlIGZ1bmN0aW9uIHJldHVybnMgdHJ1ZSB0aGVuIGl0IHdpbGwgYmUgcmVtb3ZlZCBhZnRlciBjYWxsaW5nLlxyXG4gICAgICogQHJldHVybiB7T2JqZWN0fSBDdXJyZW50IGluc3RhbmNlIG9mIEV2ZW50RW1pdHRlciBmb3IgY2hhaW5pbmcuXHJcbiAgICAgKi9cclxuICAgIHByb3RvLmFkZExpc3RlbmVyID0gZnVuY3Rpb24gYWRkTGlzdGVuZXIoZXZ0LCBsaXN0ZW5lcikge1xyXG4gICAgICAgIHZhciBsaXN0ZW5lcnMgPSB0aGlzLmdldExpc3RlbmVyc0FzT2JqZWN0KGV2dCk7XHJcbiAgICAgICAgdmFyIGxpc3RlbmVySXNXcmFwcGVkID0gdHlwZW9mIGxpc3RlbmVyID09PSAnb2JqZWN0JztcclxuICAgICAgICB2YXIga2V5O1xyXG5cclxuICAgICAgICBmb3IgKGtleSBpbiBsaXN0ZW5lcnMpIHtcclxuICAgICAgICAgICAgaWYgKGxpc3RlbmVycy5oYXNPd25Qcm9wZXJ0eShrZXkpICYmIGluZGV4T2ZMaXN0ZW5lcihsaXN0ZW5lcnNba2V5XSwgbGlzdGVuZXIpID09PSAtMSkge1xyXG4gICAgICAgICAgICAgICAgbGlzdGVuZXJzW2tleV0ucHVzaChsaXN0ZW5lcklzV3JhcHBlZCA/IGxpc3RlbmVyIDoge1xyXG4gICAgICAgICAgICAgICAgICAgIGxpc3RlbmVyOiBsaXN0ZW5lcixcclxuICAgICAgICAgICAgICAgICAgICBvbmNlOiBmYWxzZVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIEFsaWFzIG9mIGFkZExpc3RlbmVyXHJcbiAgICAgKi9cclxuICAgIHByb3RvLm9uID0gYWxpYXMoJ2FkZExpc3RlbmVyJyk7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBTZW1pLWFsaWFzIG9mIGFkZExpc3RlbmVyLiBJdCB3aWxsIGFkZCBhIGxpc3RlbmVyIHRoYXQgd2lsbCBiZVxyXG4gICAgICogYXV0b21hdGljYWxseSByZW1vdmVkIGFmdGVyIGl0cyBmaXJzdCBleGVjdXRpb24uXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHtTdHJpbmd8UmVnRXhwfSBldnQgTmFtZSBvZiB0aGUgZXZlbnQgdG8gYXR0YWNoIHRoZSBsaXN0ZW5lciB0by5cclxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGxpc3RlbmVyIE1ldGhvZCB0byBiZSBjYWxsZWQgd2hlbiB0aGUgZXZlbnQgaXMgZW1pdHRlZC4gSWYgdGhlIGZ1bmN0aW9uIHJldHVybnMgdHJ1ZSB0aGVuIGl0IHdpbGwgYmUgcmVtb3ZlZCBhZnRlciBjYWxsaW5nLlxyXG4gICAgICogQHJldHVybiB7T2JqZWN0fSBDdXJyZW50IGluc3RhbmNlIG9mIEV2ZW50RW1pdHRlciBmb3IgY2hhaW5pbmcuXHJcbiAgICAgKi9cclxuICAgIHByb3RvLmFkZE9uY2VMaXN0ZW5lciA9IGZ1bmN0aW9uIGFkZE9uY2VMaXN0ZW5lcihldnQsIGxpc3RlbmVyKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuYWRkTGlzdGVuZXIoZXZ0LCB7XHJcbiAgICAgICAgICAgIGxpc3RlbmVyOiBsaXN0ZW5lcixcclxuICAgICAgICAgICAgb25jZTogdHJ1ZVxyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIEFsaWFzIG9mIGFkZE9uY2VMaXN0ZW5lci5cclxuICAgICAqL1xyXG4gICAgcHJvdG8ub25jZSA9IGFsaWFzKCdhZGRPbmNlTGlzdGVuZXInKTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIERlZmluZXMgYW4gZXZlbnQgbmFtZS4gVGhpcyBpcyByZXF1aXJlZCBpZiB5b3Ugd2FudCB0byB1c2UgYSByZWdleCB0byBhZGQgYSBsaXN0ZW5lciB0byBtdWx0aXBsZSBldmVudHMgYXQgb25jZS4gSWYgeW91IGRvbid0IGRvIHRoaXMgdGhlbiBob3cgZG8geW91IGV4cGVjdCBpdCB0byBrbm93IHdoYXQgZXZlbnQgdG8gYWRkIHRvPyBTaG91bGQgaXQganVzdCBhZGQgdG8gZXZlcnkgcG9zc2libGUgbWF0Y2ggZm9yIGEgcmVnZXg/IE5vLiBUaGF0IGlzIHNjYXJ5IGFuZCBiYWQuXHJcbiAgICAgKiBZb3UgbmVlZCB0byB0ZWxsIGl0IHdoYXQgZXZlbnQgbmFtZXMgc2hvdWxkIGJlIG1hdGNoZWQgYnkgYSByZWdleC5cclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gZXZ0IE5hbWUgb2YgdGhlIGV2ZW50IHRvIGNyZWF0ZS5cclxuICAgICAqIEByZXR1cm4ge09iamVjdH0gQ3VycmVudCBpbnN0YW5jZSBvZiBFdmVudEVtaXR0ZXIgZm9yIGNoYWluaW5nLlxyXG4gICAgICovXHJcbiAgICBwcm90by5kZWZpbmVFdmVudCA9IGZ1bmN0aW9uIGRlZmluZUV2ZW50KGV2dCkge1xyXG4gICAgICAgIHRoaXMuZ2V0TGlzdGVuZXJzKGV2dCk7XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogVXNlcyBkZWZpbmVFdmVudCB0byBkZWZpbmUgbXVsdGlwbGUgZXZlbnRzLlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7U3RyaW5nW119IGV2dHMgQW4gYXJyYXkgb2YgZXZlbnQgbmFtZXMgdG8gZGVmaW5lLlxyXG4gICAgICogQHJldHVybiB7T2JqZWN0fSBDdXJyZW50IGluc3RhbmNlIG9mIEV2ZW50RW1pdHRlciBmb3IgY2hhaW5pbmcuXHJcbiAgICAgKi9cclxuICAgIHByb3RvLmRlZmluZUV2ZW50cyA9IGZ1bmN0aW9uIGRlZmluZUV2ZW50cyhldnRzKSB7XHJcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBldnRzLmxlbmd0aDsgaSArPSAxKSB7XHJcbiAgICAgICAgICAgIHRoaXMuZGVmaW5lRXZlbnQoZXZ0c1tpXSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFJlbW92ZXMgYSBsaXN0ZW5lciBmdW5jdGlvbiBmcm9tIHRoZSBzcGVjaWZpZWQgZXZlbnQuXHJcbiAgICAgKiBXaGVuIHBhc3NlZCBhIHJlZ3VsYXIgZXhwcmVzc2lvbiBhcyB0aGUgZXZlbnQgbmFtZSwgaXQgd2lsbCByZW1vdmUgdGhlIGxpc3RlbmVyIGZyb20gYWxsIGV2ZW50cyB0aGF0IG1hdGNoIGl0LlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7U3RyaW5nfFJlZ0V4cH0gZXZ0IE5hbWUgb2YgdGhlIGV2ZW50IHRvIHJlbW92ZSB0aGUgbGlzdGVuZXIgZnJvbS5cclxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGxpc3RlbmVyIE1ldGhvZCB0byByZW1vdmUgZnJvbSB0aGUgZXZlbnQuXHJcbiAgICAgKiBAcmV0dXJuIHtPYmplY3R9IEN1cnJlbnQgaW5zdGFuY2Ugb2YgRXZlbnRFbWl0dGVyIGZvciBjaGFpbmluZy5cclxuICAgICAqL1xyXG4gICAgcHJvdG8ucmVtb3ZlTGlzdGVuZXIgPSBmdW5jdGlvbiByZW1vdmVMaXN0ZW5lcihldnQsIGxpc3RlbmVyKSB7XHJcbiAgICAgICAgdmFyIGxpc3RlbmVycyA9IHRoaXMuZ2V0TGlzdGVuZXJzQXNPYmplY3QoZXZ0KTtcclxuICAgICAgICB2YXIgaW5kZXg7XHJcbiAgICAgICAgdmFyIGtleTtcclxuXHJcbiAgICAgICAgZm9yIChrZXkgaW4gbGlzdGVuZXJzKSB7XHJcbiAgICAgICAgICAgIGlmIChsaXN0ZW5lcnMuaGFzT3duUHJvcGVydHkoa2V5KSkge1xyXG4gICAgICAgICAgICAgICAgaW5kZXggPSBpbmRleE9mTGlzdGVuZXIobGlzdGVuZXJzW2tleV0sIGxpc3RlbmVyKTtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoaW5kZXggIT09IC0xKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGlzdGVuZXJzW2tleV0uc3BsaWNlKGluZGV4LCAxKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogQWxpYXMgb2YgcmVtb3ZlTGlzdGVuZXJcclxuICAgICAqL1xyXG4gICAgcHJvdG8ub2ZmID0gYWxpYXMoJ3JlbW92ZUxpc3RlbmVyJyk7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBBZGRzIGxpc3RlbmVycyBpbiBidWxrIHVzaW5nIHRoZSBtYW5pcHVsYXRlTGlzdGVuZXJzIG1ldGhvZC5cclxuICAgICAqIElmIHlvdSBwYXNzIGFuIG9iamVjdCBhcyB0aGUgc2Vjb25kIGFyZ3VtZW50IHlvdSBjYW4gYWRkIHRvIG11bHRpcGxlIGV2ZW50cyBhdCBvbmNlLiBUaGUgb2JqZWN0IHNob3VsZCBjb250YWluIGtleSB2YWx1ZSBwYWlycyBvZiBldmVudHMgYW5kIGxpc3RlbmVycyBvciBsaXN0ZW5lciBhcnJheXMuIFlvdSBjYW4gYWxzbyBwYXNzIGl0IGFuIGV2ZW50IG5hbWUgYW5kIGFuIGFycmF5IG9mIGxpc3RlbmVycyB0byBiZSBhZGRlZC5cclxuICAgICAqIFlvdSBjYW4gYWxzbyBwYXNzIGl0IGEgcmVndWxhciBleHByZXNzaW9uIHRvIGFkZCB0aGUgYXJyYXkgb2YgbGlzdGVuZXJzIHRvIGFsbCBldmVudHMgdGhhdCBtYXRjaCBpdC5cclxuICAgICAqIFllYWgsIHRoaXMgZnVuY3Rpb24gZG9lcyBxdWl0ZSBhIGJpdC4gVGhhdCdzIHByb2JhYmx5IGEgYmFkIHRoaW5nLlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7U3RyaW5nfE9iamVjdHxSZWdFeHB9IGV2dCBBbiBldmVudCBuYW1lIGlmIHlvdSB3aWxsIHBhc3MgYW4gYXJyYXkgb2YgbGlzdGVuZXJzIG5leHQuIEFuIG9iamVjdCBpZiB5b3Ugd2lzaCB0byBhZGQgdG8gbXVsdGlwbGUgZXZlbnRzIGF0IG9uY2UuXHJcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9uW119IFtsaXN0ZW5lcnNdIEFuIG9wdGlvbmFsIGFycmF5IG9mIGxpc3RlbmVyIGZ1bmN0aW9ucyB0byBhZGQuXHJcbiAgICAgKiBAcmV0dXJuIHtPYmplY3R9IEN1cnJlbnQgaW5zdGFuY2Ugb2YgRXZlbnRFbWl0dGVyIGZvciBjaGFpbmluZy5cclxuICAgICAqL1xyXG4gICAgcHJvdG8uYWRkTGlzdGVuZXJzID0gZnVuY3Rpb24gYWRkTGlzdGVuZXJzKGV2dCwgbGlzdGVuZXJzKSB7XHJcbiAgICAgICAgLy8gUGFzcyB0aHJvdWdoIHRvIG1hbmlwdWxhdGVMaXN0ZW5lcnNcclxuICAgICAgICByZXR1cm4gdGhpcy5tYW5pcHVsYXRlTGlzdGVuZXJzKGZhbHNlLCBldnQsIGxpc3RlbmVycyk7XHJcbiAgICB9O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogUmVtb3ZlcyBsaXN0ZW5lcnMgaW4gYnVsayB1c2luZyB0aGUgbWFuaXB1bGF0ZUxpc3RlbmVycyBtZXRob2QuXHJcbiAgICAgKiBJZiB5b3UgcGFzcyBhbiBvYmplY3QgYXMgdGhlIHNlY29uZCBhcmd1bWVudCB5b3UgY2FuIHJlbW92ZSBmcm9tIG11bHRpcGxlIGV2ZW50cyBhdCBvbmNlLiBUaGUgb2JqZWN0IHNob3VsZCBjb250YWluIGtleSB2YWx1ZSBwYWlycyBvZiBldmVudHMgYW5kIGxpc3RlbmVycyBvciBsaXN0ZW5lciBhcnJheXMuXHJcbiAgICAgKiBZb3UgY2FuIGFsc28gcGFzcyBpdCBhbiBldmVudCBuYW1lIGFuZCBhbiBhcnJheSBvZiBsaXN0ZW5lcnMgdG8gYmUgcmVtb3ZlZC5cclxuICAgICAqIFlvdSBjYW4gYWxzbyBwYXNzIGl0IGEgcmVndWxhciBleHByZXNzaW9uIHRvIHJlbW92ZSB0aGUgbGlzdGVuZXJzIGZyb20gYWxsIGV2ZW50cyB0aGF0IG1hdGNoIGl0LlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7U3RyaW5nfE9iamVjdHxSZWdFeHB9IGV2dCBBbiBldmVudCBuYW1lIGlmIHlvdSB3aWxsIHBhc3MgYW4gYXJyYXkgb2YgbGlzdGVuZXJzIG5leHQuIEFuIG9iamVjdCBpZiB5b3Ugd2lzaCB0byByZW1vdmUgZnJvbSBtdWx0aXBsZSBldmVudHMgYXQgb25jZS5cclxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb25bXX0gW2xpc3RlbmVyc10gQW4gb3B0aW9uYWwgYXJyYXkgb2YgbGlzdGVuZXIgZnVuY3Rpb25zIHRvIHJlbW92ZS5cclxuICAgICAqIEByZXR1cm4ge09iamVjdH0gQ3VycmVudCBpbnN0YW5jZSBvZiBFdmVudEVtaXR0ZXIgZm9yIGNoYWluaW5nLlxyXG4gICAgICovXHJcbiAgICBwcm90by5yZW1vdmVMaXN0ZW5lcnMgPSBmdW5jdGlvbiByZW1vdmVMaXN0ZW5lcnMoZXZ0LCBsaXN0ZW5lcnMpIHtcclxuICAgICAgICAvLyBQYXNzIHRocm91Z2ggdG8gbWFuaXB1bGF0ZUxpc3RlbmVyc1xyXG4gICAgICAgIHJldHVybiB0aGlzLm1hbmlwdWxhdGVMaXN0ZW5lcnModHJ1ZSwgZXZ0LCBsaXN0ZW5lcnMpO1xyXG4gICAgfTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIEVkaXRzIGxpc3RlbmVycyBpbiBidWxrLiBUaGUgYWRkTGlzdGVuZXJzIGFuZCByZW1vdmVMaXN0ZW5lcnMgbWV0aG9kcyBib3RoIHVzZSB0aGlzIHRvIGRvIHRoZWlyIGpvYi4gWW91IHNob3VsZCByZWFsbHkgdXNlIHRob3NlIGluc3RlYWQsIHRoaXMgaXMgYSBsaXR0bGUgbG93ZXIgbGV2ZWwuXHJcbiAgICAgKiBUaGUgZmlyc3QgYXJndW1lbnQgd2lsbCBkZXRlcm1pbmUgaWYgdGhlIGxpc3RlbmVycyBhcmUgcmVtb3ZlZCAodHJ1ZSkgb3IgYWRkZWQgKGZhbHNlKS5cclxuICAgICAqIElmIHlvdSBwYXNzIGFuIG9iamVjdCBhcyB0aGUgc2Vjb25kIGFyZ3VtZW50IHlvdSBjYW4gYWRkL3JlbW92ZSBmcm9tIG11bHRpcGxlIGV2ZW50cyBhdCBvbmNlLiBUaGUgb2JqZWN0IHNob3VsZCBjb250YWluIGtleSB2YWx1ZSBwYWlycyBvZiBldmVudHMgYW5kIGxpc3RlbmVycyBvciBsaXN0ZW5lciBhcnJheXMuXHJcbiAgICAgKiBZb3UgY2FuIGFsc28gcGFzcyBpdCBhbiBldmVudCBuYW1lIGFuZCBhbiBhcnJheSBvZiBsaXN0ZW5lcnMgdG8gYmUgYWRkZWQvcmVtb3ZlZC5cclxuICAgICAqIFlvdSBjYW4gYWxzbyBwYXNzIGl0IGEgcmVndWxhciBleHByZXNzaW9uIHRvIG1hbmlwdWxhdGUgdGhlIGxpc3RlbmVycyBvZiBhbGwgZXZlbnRzIHRoYXQgbWF0Y2ggaXQuXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHtCb29sZWFufSByZW1vdmUgVHJ1ZSBpZiB5b3Ugd2FudCB0byByZW1vdmUgbGlzdGVuZXJzLCBmYWxzZSBpZiB5b3Ugd2FudCB0byBhZGQuXHJcbiAgICAgKiBAcGFyYW0ge1N0cmluZ3xPYmplY3R8UmVnRXhwfSBldnQgQW4gZXZlbnQgbmFtZSBpZiB5b3Ugd2lsbCBwYXNzIGFuIGFycmF5IG9mIGxpc3RlbmVycyBuZXh0LiBBbiBvYmplY3QgaWYgeW91IHdpc2ggdG8gYWRkL3JlbW92ZSBmcm9tIG11bHRpcGxlIGV2ZW50cyBhdCBvbmNlLlxyXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbltdfSBbbGlzdGVuZXJzXSBBbiBvcHRpb25hbCBhcnJheSBvZiBsaXN0ZW5lciBmdW5jdGlvbnMgdG8gYWRkL3JlbW92ZS5cclxuICAgICAqIEByZXR1cm4ge09iamVjdH0gQ3VycmVudCBpbnN0YW5jZSBvZiBFdmVudEVtaXR0ZXIgZm9yIGNoYWluaW5nLlxyXG4gICAgICovXHJcbiAgICBwcm90by5tYW5pcHVsYXRlTGlzdGVuZXJzID0gZnVuY3Rpb24gbWFuaXB1bGF0ZUxpc3RlbmVycyhyZW1vdmUsIGV2dCwgbGlzdGVuZXJzKSB7XHJcbiAgICAgICAgdmFyIGk7XHJcbiAgICAgICAgdmFyIHZhbHVlO1xyXG4gICAgICAgIHZhciBzaW5nbGUgPSByZW1vdmUgPyB0aGlzLnJlbW92ZUxpc3RlbmVyIDogdGhpcy5hZGRMaXN0ZW5lcjtcclxuICAgICAgICB2YXIgbXVsdGlwbGUgPSByZW1vdmUgPyB0aGlzLnJlbW92ZUxpc3RlbmVycyA6IHRoaXMuYWRkTGlzdGVuZXJzO1xyXG5cclxuICAgICAgICAvLyBJZiBldnQgaXMgYW4gb2JqZWN0IHRoZW4gcGFzcyBlYWNoIG9mIGl0cyBwcm9wZXJ0aWVzIHRvIHRoaXMgbWV0aG9kXHJcbiAgICAgICAgaWYgKHR5cGVvZiBldnQgPT09ICdvYmplY3QnICYmICEoZXZ0IGluc3RhbmNlb2YgUmVnRXhwKSkge1xyXG4gICAgICAgICAgICBmb3IgKGkgaW4gZXZ0KSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoZXZ0Lmhhc093blByb3BlcnR5KGkpICYmICh2YWx1ZSA9IGV2dFtpXSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAvLyBQYXNzIHRoZSBzaW5nbGUgbGlzdGVuZXIgc3RyYWlnaHQgdGhyb3VnaCB0byB0aGUgc2luZ3VsYXIgbWV0aG9kXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ2Z1bmN0aW9uJykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzaW5nbGUuY2FsbCh0aGlzLCBpLCB2YWx1ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBPdGhlcndpc2UgcGFzcyBiYWNrIHRvIHRoZSBtdWx0aXBsZSBmdW5jdGlvblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBtdWx0aXBsZS5jYWxsKHRoaXMsIGksIHZhbHVlKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIC8vIFNvIGV2dCBtdXN0IGJlIGEgc3RyaW5nXHJcbiAgICAgICAgICAgIC8vIEFuZCBsaXN0ZW5lcnMgbXVzdCBiZSBhbiBhcnJheSBvZiBsaXN0ZW5lcnNcclxuICAgICAgICAgICAgLy8gTG9vcCBvdmVyIGl0IGFuZCBwYXNzIGVhY2ggb25lIHRvIHRoZSBtdWx0aXBsZSBtZXRob2RcclxuICAgICAgICAgICAgaSA9IGxpc3RlbmVycy5sZW5ndGg7XHJcbiAgICAgICAgICAgIHdoaWxlIChpLS0pIHtcclxuICAgICAgICAgICAgICAgIHNpbmdsZS5jYWxsKHRoaXMsIGV2dCwgbGlzdGVuZXJzW2ldKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogUmVtb3ZlcyBhbGwgbGlzdGVuZXJzIGZyb20gYSBzcGVjaWZpZWQgZXZlbnQuXHJcbiAgICAgKiBJZiB5b3UgZG8gbm90IHNwZWNpZnkgYW4gZXZlbnQgdGhlbiBhbGwgbGlzdGVuZXJzIHdpbGwgYmUgcmVtb3ZlZC5cclxuICAgICAqIFRoYXQgbWVhbnMgZXZlcnkgZXZlbnQgd2lsbCBiZSBlbXB0aWVkLlxyXG4gICAgICogWW91IGNhbiBhbHNvIHBhc3MgYSByZWdleCB0byByZW1vdmUgYWxsIGV2ZW50cyB0aGF0IG1hdGNoIGl0LlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7U3RyaW5nfFJlZ0V4cH0gW2V2dF0gT3B0aW9uYWwgbmFtZSBvZiB0aGUgZXZlbnQgdG8gcmVtb3ZlIGFsbCBsaXN0ZW5lcnMgZm9yLiBXaWxsIHJlbW92ZSBmcm9tIGV2ZXJ5IGV2ZW50IGlmIG5vdCBwYXNzZWQuXHJcbiAgICAgKiBAcmV0dXJuIHtPYmplY3R9IEN1cnJlbnQgaW5zdGFuY2Ugb2YgRXZlbnRFbWl0dGVyIGZvciBjaGFpbmluZy5cclxuICAgICAqL1xyXG4gICAgcHJvdG8ucmVtb3ZlRXZlbnQgPSBmdW5jdGlvbiByZW1vdmVFdmVudChldnQpIHtcclxuICAgICAgICB2YXIgdHlwZSA9IHR5cGVvZiBldnQ7XHJcbiAgICAgICAgdmFyIGV2ZW50cyA9IHRoaXMuX2dldEV2ZW50cygpO1xyXG4gICAgICAgIHZhciBrZXk7XHJcblxyXG4gICAgICAgIC8vIFJlbW92ZSBkaWZmZXJlbnQgdGhpbmdzIGRlcGVuZGluZyBvbiB0aGUgc3RhdGUgb2YgZXZ0XHJcbiAgICAgICAgaWYgKHR5cGUgPT09ICdzdHJpbmcnKSB7XHJcbiAgICAgICAgICAgIC8vIFJlbW92ZSBhbGwgbGlzdGVuZXJzIGZvciB0aGUgc3BlY2lmaWVkIGV2ZW50XHJcbiAgICAgICAgICAgIGRlbGV0ZSBldmVudHNbZXZ0XTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAoZXZ0IGluc3RhbmNlb2YgUmVnRXhwKSB7XHJcbiAgICAgICAgICAgIC8vIFJlbW92ZSBhbGwgZXZlbnRzIG1hdGNoaW5nIHRoZSByZWdleC5cclxuICAgICAgICAgICAgZm9yIChrZXkgaW4gZXZlbnRzKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoZXZlbnRzLmhhc093blByb3BlcnR5KGtleSkgJiYgZXZ0LnRlc3Qoa2V5KSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGRlbGV0ZSBldmVudHNba2V5XTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgLy8gUmVtb3ZlIGFsbCBsaXN0ZW5lcnMgaW4gYWxsIGV2ZW50c1xyXG4gICAgICAgICAgICBkZWxldGUgdGhpcy5fZXZlbnRzO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogQWxpYXMgb2YgcmVtb3ZlRXZlbnQuXHJcbiAgICAgKlxyXG4gICAgICogQWRkZWQgdG8gbWlycm9yIHRoZSBub2RlIEFQSS5cclxuICAgICAqL1xyXG4gICAgcHJvdG8ucmVtb3ZlQWxsTGlzdGVuZXJzID0gYWxpYXMoJ3JlbW92ZUV2ZW50Jyk7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBFbWl0cyBhbiBldmVudCBvZiB5b3VyIGNob2ljZS5cclxuICAgICAqIFdoZW4gZW1pdHRlZCwgZXZlcnkgbGlzdGVuZXIgYXR0YWNoZWQgdG8gdGhhdCBldmVudCB3aWxsIGJlIGV4ZWN1dGVkLlxyXG4gICAgICogSWYgeW91IHBhc3MgdGhlIG9wdGlvbmFsIGFyZ3VtZW50IGFycmF5IHRoZW4gdGhvc2UgYXJndW1lbnRzIHdpbGwgYmUgcGFzc2VkIHRvIGV2ZXJ5IGxpc3RlbmVyIHVwb24gZXhlY3V0aW9uLlxyXG4gICAgICogQmVjYXVzZSBpdCB1c2VzIGBhcHBseWAsIHlvdXIgYXJyYXkgb2YgYXJndW1lbnRzIHdpbGwgYmUgcGFzc2VkIGFzIGlmIHlvdSB3cm90ZSB0aGVtIG91dCBzZXBhcmF0ZWx5LlxyXG4gICAgICogU28gdGhleSB3aWxsIG5vdCBhcnJpdmUgd2l0aGluIHRoZSBhcnJheSBvbiB0aGUgb3RoZXIgc2lkZSwgdGhleSB3aWxsIGJlIHNlcGFyYXRlLlxyXG4gICAgICogWW91IGNhbiBhbHNvIHBhc3MgYSByZWd1bGFyIGV4cHJlc3Npb24gdG8gZW1pdCB0byBhbGwgZXZlbnRzIHRoYXQgbWF0Y2ggaXQuXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHtTdHJpbmd8UmVnRXhwfSBldnQgTmFtZSBvZiB0aGUgZXZlbnQgdG8gZW1pdCBhbmQgZXhlY3V0ZSBsaXN0ZW5lcnMgZm9yLlxyXG4gICAgICogQHBhcmFtIHtBcnJheX0gW2FyZ3NdIE9wdGlvbmFsIGFycmF5IG9mIGFyZ3VtZW50cyB0byBiZSBwYXNzZWQgdG8gZWFjaCBsaXN0ZW5lci5cclxuICAgICAqIEByZXR1cm4ge09iamVjdH0gQ3VycmVudCBpbnN0YW5jZSBvZiBFdmVudEVtaXR0ZXIgZm9yIGNoYWluaW5nLlxyXG4gICAgICovXHJcbiAgICBwcm90by5lbWl0RXZlbnQgPSBmdW5jdGlvbiBlbWl0RXZlbnQoZXZ0LCBhcmdzKSB7XHJcbiAgICAgICAgdmFyIGxpc3RlbmVycyA9IHRoaXMuZ2V0TGlzdGVuZXJzQXNPYmplY3QoZXZ0KTtcclxuICAgICAgICB2YXIgbGlzdGVuZXI7XHJcbiAgICAgICAgdmFyIGk7XHJcbiAgICAgICAgdmFyIGtleTtcclxuICAgICAgICB2YXIgcmVzcG9uc2U7XHJcblxyXG4gICAgICAgIGZvciAoa2V5IGluIGxpc3RlbmVycykge1xyXG4gICAgICAgICAgICBpZiAobGlzdGVuZXJzLmhhc093blByb3BlcnR5KGtleSkpIHtcclxuICAgICAgICAgICAgICAgIGkgPSBsaXN0ZW5lcnNba2V5XS5sZW5ndGg7XHJcblxyXG4gICAgICAgICAgICAgICAgd2hpbGUgKGktLSkge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIElmIHRoZSBsaXN0ZW5lciByZXR1cm5zIHRydWUgdGhlbiBpdCBzaGFsbCBiZSByZW1vdmVkIGZyb20gdGhlIGV2ZW50XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gVGhlIGZ1bmN0aW9uIGlzIGV4ZWN1dGVkIGVpdGhlciB3aXRoIGEgYmFzaWMgY2FsbCBvciBhbiBhcHBseSBpZiB0aGVyZSBpcyBhbiBhcmdzIGFycmF5XHJcbiAgICAgICAgICAgICAgICAgICAgbGlzdGVuZXIgPSBsaXN0ZW5lcnNba2V5XVtpXTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGxpc3RlbmVyLm9uY2UgPT09IHRydWUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5yZW1vdmVMaXN0ZW5lcihldnQsIGxpc3RlbmVyLmxpc3RlbmVyKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHJlc3BvbnNlID0gbGlzdGVuZXIubGlzdGVuZXIuYXBwbHkodGhpcywgYXJncyB8fCBbXSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChyZXNwb25zZSA9PT0gdGhpcy5fZ2V0T25jZVJldHVyblZhbHVlKCkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5yZW1vdmVMaXN0ZW5lcihldnQsIGxpc3RlbmVyLmxpc3RlbmVyKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIEFsaWFzIG9mIGVtaXRFdmVudFxyXG4gICAgICovXHJcbiAgICBwcm90by50cmlnZ2VyID0gYWxpYXMoJ2VtaXRFdmVudCcpO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogU3VidGx5IGRpZmZlcmVudCBmcm9tIGVtaXRFdmVudCBpbiB0aGF0IGl0IHdpbGwgcGFzcyBpdHMgYXJndW1lbnRzIG9uIHRvIHRoZSBsaXN0ZW5lcnMsIGFzIG9wcG9zZWQgdG8gdGFraW5nIGEgc2luZ2xlIGFycmF5IG9mIGFyZ3VtZW50cyB0byBwYXNzIG9uLlxyXG4gICAgICogQXMgd2l0aCBlbWl0RXZlbnQsIHlvdSBjYW4gcGFzcyBhIHJlZ2V4IGluIHBsYWNlIG9mIHRoZSBldmVudCBuYW1lIHRvIGVtaXQgdG8gYWxsIGV2ZW50cyB0aGF0IG1hdGNoIGl0LlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7U3RyaW5nfFJlZ0V4cH0gZXZ0IE5hbWUgb2YgdGhlIGV2ZW50IHRvIGVtaXQgYW5kIGV4ZWN1dGUgbGlzdGVuZXJzIGZvci5cclxuICAgICAqIEBwYXJhbSB7Li4uKn0gT3B0aW9uYWwgYWRkaXRpb25hbCBhcmd1bWVudHMgdG8gYmUgcGFzc2VkIHRvIGVhY2ggbGlzdGVuZXIuXHJcbiAgICAgKiBAcmV0dXJuIHtPYmplY3R9IEN1cnJlbnQgaW5zdGFuY2Ugb2YgRXZlbnRFbWl0dGVyIGZvciBjaGFpbmluZy5cclxuICAgICAqL1xyXG4gICAgcHJvdG8uZW1pdCA9IGZ1bmN0aW9uIGVtaXQoZXZ0KSB7XHJcbiAgICAgICAgdmFyIGFyZ3MgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMsIDEpO1xyXG4gICAgICAgIHJldHVybiB0aGlzLmVtaXRFdmVudChldnQsIGFyZ3MpO1xyXG4gICAgfTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFNldHMgdGhlIGN1cnJlbnQgdmFsdWUgdG8gY2hlY2sgYWdhaW5zdCB3aGVuIGV4ZWN1dGluZyBsaXN0ZW5lcnMuIElmIGFcclxuICAgICAqIGxpc3RlbmVycyByZXR1cm4gdmFsdWUgbWF0Y2hlcyB0aGUgb25lIHNldCBoZXJlIHRoZW4gaXQgd2lsbCBiZSByZW1vdmVkXHJcbiAgICAgKiBhZnRlciBleGVjdXRpb24uIFRoaXMgdmFsdWUgZGVmYXVsdHMgdG8gdHJ1ZS5cclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSBuZXcgdmFsdWUgdG8gY2hlY2sgZm9yIHdoZW4gZXhlY3V0aW5nIGxpc3RlbmVycy5cclxuICAgICAqIEByZXR1cm4ge09iamVjdH0gQ3VycmVudCBpbnN0YW5jZSBvZiBFdmVudEVtaXR0ZXIgZm9yIGNoYWluaW5nLlxyXG4gICAgICovXHJcbiAgICBwcm90by5zZXRPbmNlUmV0dXJuVmFsdWUgPSBmdW5jdGlvbiBzZXRPbmNlUmV0dXJuVmFsdWUodmFsdWUpIHtcclxuICAgICAgICB0aGlzLl9vbmNlUmV0dXJuVmFsdWUgPSB2YWx1ZTtcclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH07XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBGZXRjaGVzIHRoZSBjdXJyZW50IHZhbHVlIHRvIGNoZWNrIGFnYWluc3Qgd2hlbiBleGVjdXRpbmcgbGlzdGVuZXJzLiBJZlxyXG4gICAgICogdGhlIGxpc3RlbmVycyByZXR1cm4gdmFsdWUgbWF0Y2hlcyB0aGlzIG9uZSB0aGVuIGl0IHNob3VsZCBiZSByZW1vdmVkXHJcbiAgICAgKiBhdXRvbWF0aWNhbGx5LiBJdCB3aWxsIHJldHVybiB0cnVlIGJ5IGRlZmF1bHQuXHJcbiAgICAgKlxyXG4gICAgICogQHJldHVybiB7KnxCb29sZWFufSBUaGUgY3VycmVudCB2YWx1ZSB0byBjaGVjayBmb3Igb3IgdGhlIGRlZmF1bHQsIHRydWUuXHJcbiAgICAgKiBAYXBpIHByaXZhdGVcclxuICAgICAqL1xyXG4gICAgcHJvdG8uX2dldE9uY2VSZXR1cm5WYWx1ZSA9IGZ1bmN0aW9uIF9nZXRPbmNlUmV0dXJuVmFsdWUoKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuaGFzT3duUHJvcGVydHkoJ19vbmNlUmV0dXJuVmFsdWUnKSkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fb25jZVJldHVyblZhbHVlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIEZldGNoZXMgdGhlIGV2ZW50cyBvYmplY3QgYW5kIGNyZWF0ZXMgb25lIGlmIHJlcXVpcmVkLlxyXG4gICAgICpcclxuICAgICAqIEByZXR1cm4ge09iamVjdH0gVGhlIGV2ZW50cyBzdG9yYWdlIG9iamVjdC5cclxuICAgICAqIEBhcGkgcHJpdmF0ZVxyXG4gICAgICovXHJcbiAgICBwcm90by5fZ2V0RXZlbnRzID0gZnVuY3Rpb24gX2dldEV2ZW50cygpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fZXZlbnRzIHx8ICh0aGlzLl9ldmVudHMgPSB7fSk7XHJcbiAgICB9O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogUmV2ZXJ0cyB0aGUgZ2xvYmFsIHtAbGluayBFdmVudEVtaXR0ZXJ9IHRvIGl0cyBwcmV2aW91cyB2YWx1ZSBhbmQgcmV0dXJucyBhIHJlZmVyZW5jZSB0byB0aGlzIHZlcnNpb24uXHJcbiAgICAgKlxyXG4gICAgICogQHJldHVybiB7RnVuY3Rpb259IE5vbiBjb25mbGljdGluZyBFdmVudEVtaXR0ZXIgY2xhc3MuXHJcbiAgICAgKi9cclxuICAgIEV2ZW50RW1pdHRlci5ub0NvbmZsaWN0ID0gZnVuY3Rpb24gbm9Db25mbGljdCgpIHtcclxuICAgICAgICBleHBvcnRzLkV2ZW50RW1pdHRlciA9IG9yaWdpbmFsR2xvYmFsVmFsdWU7XHJcbiAgICAgICAgcmV0dXJuIEV2ZW50RW1pdHRlcjtcclxuICAgIH07XHJcblxyXG4gICAgLy8gRXhwb3NlIHRoZSBjbGFzcyBlaXRoZXIgdmlhIEFNRCwgQ29tbW9uSlMgb3IgdGhlIGdsb2JhbCBvYmplY3RcclxuICAgIGlmICh0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQpIHtcclxuICAgICAgICBkZWZpbmUoJ2V2ZW50RW1pdHRlci9FdmVudEVtaXR0ZXInLFtdLGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIEV2ZW50RW1pdHRlcjtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICAgIGVsc2UgaWYgKHR5cGVvZiBtb2R1bGUgPT09ICdvYmplY3QnICYmIG1vZHVsZS5leHBvcnRzKXtcclxuICAgICAgICBtb2R1bGUuZXhwb3J0cyA9IEV2ZW50RW1pdHRlcjtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICAgIGV4cG9ydHMuRXZlbnRFbWl0dGVyID0gRXZlbnRFbWl0dGVyO1xyXG4gICAgfVxyXG59LmNhbGwodGhpcykpO1xyXG5cclxuLyohXHJcbiAqIGdldFN0eWxlUHJvcGVydHkgdjEuMC40XHJcbiAqIG9yaWdpbmFsIGJ5IGthbmdheFxyXG4gKiBodHRwOi8vcGVyZmVjdGlvbmtpbGxzLmNvbS9mZWF0dXJlLXRlc3RpbmctY3NzLXByb3BlcnRpZXMvXHJcbiAqIE1JVCBsaWNlbnNlXHJcbiAqL1xyXG5cclxuLypqc2hpbnQgYnJvd3NlcjogdHJ1ZSwgc3RyaWN0OiB0cnVlLCB1bmRlZjogdHJ1ZSAqL1xyXG4vKmdsb2JhbCBkZWZpbmU6IGZhbHNlLCBleHBvcnRzOiBmYWxzZSwgbW9kdWxlOiBmYWxzZSAqL1xyXG5cclxuKCBmdW5jdGlvbiggd2luZG93ICkge1xyXG5cclxuXHJcblxyXG52YXIgcHJlZml4ZXMgPSAnV2Via2l0IE1veiBtcyBNcyBPJy5zcGxpdCgnICcpO1xyXG52YXIgZG9jRWxlbVN0eWxlID0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnN0eWxlO1xyXG5cclxuZnVuY3Rpb24gZ2V0U3R5bGVQcm9wZXJ0eSggcHJvcE5hbWUgKSB7XHJcbiAgaWYgKCAhcHJvcE5hbWUgKSB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICAvLyB0ZXN0IHN0YW5kYXJkIHByb3BlcnR5IGZpcnN0XHJcbiAgaWYgKCB0eXBlb2YgZG9jRWxlbVN0eWxlWyBwcm9wTmFtZSBdID09PSAnc3RyaW5nJyApIHtcclxuICAgIHJldHVybiBwcm9wTmFtZTtcclxuICB9XHJcblxyXG4gIC8vIGNhcGl0YWxpemVcclxuICBwcm9wTmFtZSA9IHByb3BOYW1lLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsgcHJvcE5hbWUuc2xpY2UoMSk7XHJcblxyXG4gIC8vIHRlc3QgdmVuZG9yIHNwZWNpZmljIHByb3BlcnRpZXNcclxuICB2YXIgcHJlZml4ZWQ7XHJcbiAgZm9yICggdmFyIGk9MCwgbGVuID0gcHJlZml4ZXMubGVuZ3RoOyBpIDwgbGVuOyBpKysgKSB7XHJcbiAgICBwcmVmaXhlZCA9IHByZWZpeGVzW2ldICsgcHJvcE5hbWU7XHJcbiAgICBpZiAoIHR5cGVvZiBkb2NFbGVtU3R5bGVbIHByZWZpeGVkIF0gPT09ICdzdHJpbmcnICkge1xyXG4gICAgICByZXR1cm4gcHJlZml4ZWQ7XHJcbiAgICB9XHJcbiAgfVxyXG59XHJcblxyXG4vLyB0cmFuc3BvcnRcclxuaWYgKCB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgKSB7XHJcbiAgLy8gQU1EXHJcbiAgZGVmaW5lKCAnZ2V0LXN0eWxlLXByb3BlcnR5L2dldC1zdHlsZS1wcm9wZXJ0eScsW10sZnVuY3Rpb24oKSB7XHJcbiAgICByZXR1cm4gZ2V0U3R5bGVQcm9wZXJ0eTtcclxuICB9KTtcclxufSBlbHNlIGlmICggdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICkge1xyXG4gIC8vIENvbW1vbkpTIGZvciBDb21wb25lbnRcclxuICBtb2R1bGUuZXhwb3J0cyA9IGdldFN0eWxlUHJvcGVydHk7XHJcbn0gZWxzZSB7XHJcbiAgLy8gYnJvd3NlciBnbG9iYWxcclxuICB3aW5kb3cuZ2V0U3R5bGVQcm9wZXJ0eSA9IGdldFN0eWxlUHJvcGVydHk7XHJcbn1cclxuXHJcbn0pKCB3aW5kb3cgKTtcclxuXHJcbi8qIVxyXG4gKiBnZXRTaXplIHYxLjIuMlxyXG4gKiBtZWFzdXJlIHNpemUgb2YgZWxlbWVudHNcclxuICogTUlUIGxpY2Vuc2VcclxuICovXHJcblxyXG4vKmpzaGludCBicm93c2VyOiB0cnVlLCBzdHJpY3Q6IHRydWUsIHVuZGVmOiB0cnVlLCB1bnVzZWQ6IHRydWUgKi9cclxuLypnbG9iYWwgZGVmaW5lOiBmYWxzZSwgZXhwb3J0czogZmFsc2UsIHJlcXVpcmU6IGZhbHNlLCBtb2R1bGU6IGZhbHNlLCBjb25zb2xlOiBmYWxzZSAqL1xyXG5cclxuKCBmdW5jdGlvbiggd2luZG93LCB1bmRlZmluZWQgKSB7XHJcblxyXG5cclxuXHJcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIGhlbHBlcnMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gLy9cclxuXHJcbi8vIGdldCBhIG51bWJlciBmcm9tIGEgc3RyaW5nLCBub3QgYSBwZXJjZW50YWdlXHJcbmZ1bmN0aW9uIGdldFN0eWxlU2l6ZSggdmFsdWUgKSB7XHJcbiAgdmFyIG51bSA9IHBhcnNlRmxvYXQoIHZhbHVlICk7XHJcbiAgLy8gbm90IGEgcGVyY2VudCBsaWtlICcxMDAlJywgYW5kIGEgbnVtYmVyXHJcbiAgdmFyIGlzVmFsaWQgPSB2YWx1ZS5pbmRleE9mKCclJykgPT09IC0xICYmICFpc05hTiggbnVtICk7XHJcbiAgcmV0dXJuIGlzVmFsaWQgJiYgbnVtO1xyXG59XHJcblxyXG5mdW5jdGlvbiBub29wKCkge31cclxuXHJcbnZhciBsb2dFcnJvciA9IHR5cGVvZiBjb25zb2xlID09PSAndW5kZWZpbmVkJyA/IG5vb3AgOlxyXG4gIGZ1bmN0aW9uKCBtZXNzYWdlICkge1xyXG4gICAgY29uc29sZS5lcnJvciggbWVzc2FnZSApO1xyXG4gIH07XHJcblxyXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBtZWFzdXJlbWVudHMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gLy9cclxuXHJcbnZhciBtZWFzdXJlbWVudHMgPSBbXHJcbiAgJ3BhZGRpbmdMZWZ0JyxcclxuICAncGFkZGluZ1JpZ2h0JyxcclxuICAncGFkZGluZ1RvcCcsXHJcbiAgJ3BhZGRpbmdCb3R0b20nLFxyXG4gICdtYXJnaW5MZWZ0JyxcclxuICAnbWFyZ2luUmlnaHQnLFxyXG4gICdtYXJnaW5Ub3AnLFxyXG4gICdtYXJnaW5Cb3R0b20nLFxyXG4gICdib3JkZXJMZWZ0V2lkdGgnLFxyXG4gICdib3JkZXJSaWdodFdpZHRoJyxcclxuICAnYm9yZGVyVG9wV2lkdGgnLFxyXG4gICdib3JkZXJCb3R0b21XaWR0aCdcclxuXTtcclxuXHJcbmZ1bmN0aW9uIGdldFplcm9TaXplKCkge1xyXG4gIHZhciBzaXplID0ge1xyXG4gICAgd2lkdGg6IDAsXHJcbiAgICBoZWlnaHQ6IDAsXHJcbiAgICBpbm5lcldpZHRoOiAwLFxyXG4gICAgaW5uZXJIZWlnaHQ6IDAsXHJcbiAgICBvdXRlcldpZHRoOiAwLFxyXG4gICAgb3V0ZXJIZWlnaHQ6IDBcclxuICB9O1xyXG4gIGZvciAoIHZhciBpPTAsIGxlbiA9IG1lYXN1cmVtZW50cy5sZW5ndGg7IGkgPCBsZW47IGkrKyApIHtcclxuICAgIHZhciBtZWFzdXJlbWVudCA9IG1lYXN1cmVtZW50c1tpXTtcclxuICAgIHNpemVbIG1lYXN1cmVtZW50IF0gPSAwO1xyXG4gIH1cclxuICByZXR1cm4gc2l6ZTtcclxufVxyXG5cclxuXHJcblxyXG5mdW5jdGlvbiBkZWZpbmVHZXRTaXplKCBnZXRTdHlsZVByb3BlcnR5ICkge1xyXG5cclxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gc2V0dXAgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gLy9cclxuXHJcbnZhciBpc1NldHVwID0gZmFsc2U7XHJcblxyXG52YXIgZ2V0U3R5bGUsIGJveFNpemluZ1Byb3AsIGlzQm94U2l6ZU91dGVyO1xyXG5cclxuLyoqXHJcbiAqIHNldHVwIHZhcnMgYW5kIGZ1bmN0aW9uc1xyXG4gKiBkbyBpdCBvbiBpbml0aWFsIGdldFNpemUoKSwgcmF0aGVyIHRoYW4gb24gc2NyaXB0IGxvYWRcclxuICogRm9yIEZpcmVmb3ggYnVnIGh0dHBzOi8vYnVnemlsbGEubW96aWxsYS5vcmcvc2hvd19idWcuY2dpP2lkPTU0ODM5N1xyXG4gKi9cclxuZnVuY3Rpb24gc2V0dXAoKSB7XHJcbiAgLy8gc2V0dXAgb25jZVxyXG4gIGlmICggaXNTZXR1cCApIHtcclxuICAgIHJldHVybjtcclxuICB9XHJcbiAgaXNTZXR1cCA9IHRydWU7XHJcblxyXG4gIHZhciBnZXRDb21wdXRlZFN0eWxlID0gd2luZG93LmdldENvbXB1dGVkU3R5bGU7XHJcbiAgZ2V0U3R5bGUgPSAoIGZ1bmN0aW9uKCkge1xyXG4gICAgdmFyIGdldFN0eWxlRm4gPSBnZXRDb21wdXRlZFN0eWxlID9cclxuICAgICAgZnVuY3Rpb24oIGVsZW0gKSB7XHJcbiAgICAgICAgcmV0dXJuIGdldENvbXB1dGVkU3R5bGUoIGVsZW0sIG51bGwgKTtcclxuICAgICAgfSA6XHJcbiAgICAgIGZ1bmN0aW9uKCBlbGVtICkge1xyXG4gICAgICAgIHJldHVybiBlbGVtLmN1cnJlbnRTdHlsZTtcclxuICAgICAgfTtcclxuXHJcbiAgICAgIHJldHVybiBmdW5jdGlvbiBnZXRTdHlsZSggZWxlbSApIHtcclxuICAgICAgICB2YXIgc3R5bGUgPSBnZXRTdHlsZUZuKCBlbGVtICk7XHJcbiAgICAgICAgaWYgKCAhc3R5bGUgKSB7XHJcbiAgICAgICAgICBsb2dFcnJvciggJ1N0eWxlIHJldHVybmVkICcgKyBzdHlsZSArXHJcbiAgICAgICAgICAgICcuIEFyZSB5b3UgcnVubmluZyB0aGlzIGNvZGUgaW4gYSBoaWRkZW4gaWZyYW1lIG9uIEZpcmVmb3g/ICcgK1xyXG4gICAgICAgICAgICAnU2VlIGh0dHA6Ly9iaXQubHkvZ2V0c2l6ZWJ1ZzEnICk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBzdHlsZTtcclxuICAgICAgfTtcclxuICB9KSgpO1xyXG5cclxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBib3ggc2l6aW5nIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIC8vXHJcblxyXG4gIGJveFNpemluZ1Byb3AgPSBnZXRTdHlsZVByb3BlcnR5KCdib3hTaXppbmcnKTtcclxuXHJcbiAgLyoqXHJcbiAgICogV2ViS2l0IG1lYXN1cmVzIHRoZSBvdXRlci13aWR0aCBvbiBzdHlsZS53aWR0aCBvbiBib3JkZXItYm94IGVsZW1zXHJcbiAgICogSUUgJiBGaXJlZm94IG1lYXN1cmVzIHRoZSBpbm5lci13aWR0aFxyXG4gICAqL1xyXG4gIGlmICggYm94U2l6aW5nUHJvcCApIHtcclxuICAgIHZhciBkaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgIGRpdi5zdHlsZS53aWR0aCA9ICcyMDBweCc7XHJcbiAgICBkaXYuc3R5bGUucGFkZGluZyA9ICcxcHggMnB4IDNweCA0cHgnO1xyXG4gICAgZGl2LnN0eWxlLmJvcmRlclN0eWxlID0gJ3NvbGlkJztcclxuICAgIGRpdi5zdHlsZS5ib3JkZXJXaWR0aCA9ICcxcHggMnB4IDNweCA0cHgnO1xyXG4gICAgZGl2LnN0eWxlWyBib3hTaXppbmdQcm9wIF0gPSAnYm9yZGVyLWJveCc7XHJcblxyXG4gICAgdmFyIGJvZHkgPSBkb2N1bWVudC5ib2R5IHx8IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcclxuICAgIGJvZHkuYXBwZW5kQ2hpbGQoIGRpdiApO1xyXG4gICAgdmFyIHN0eWxlID0gZ2V0U3R5bGUoIGRpdiApO1xyXG5cclxuICAgIGlzQm94U2l6ZU91dGVyID0gZ2V0U3R5bGVTaXplKCBzdHlsZS53aWR0aCApID09PSAyMDA7XHJcbiAgICBib2R5LnJlbW92ZUNoaWxkKCBkaXYgKTtcclxuICB9XHJcblxyXG59XHJcblxyXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBnZXRTaXplIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIC8vXHJcblxyXG5mdW5jdGlvbiBnZXRTaXplKCBlbGVtICkge1xyXG4gIHNldHVwKCk7XHJcblxyXG4gIC8vIHVzZSBxdWVyeVNlbGV0b3IgaWYgZWxlbSBpcyBzdHJpbmdcclxuICBpZiAoIHR5cGVvZiBlbGVtID09PSAnc3RyaW5nJyApIHtcclxuICAgIGVsZW0gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCBlbGVtICk7XHJcbiAgfVxyXG5cclxuICAvLyBkbyBub3QgcHJvY2VlZCBvbiBub24tb2JqZWN0c1xyXG4gIGlmICggIWVsZW0gfHwgdHlwZW9mIGVsZW0gIT09ICdvYmplY3QnIHx8ICFlbGVtLm5vZGVUeXBlICkge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgdmFyIHN0eWxlID0gZ2V0U3R5bGUoIGVsZW0gKTtcclxuXHJcbiAgLy8gaWYgaGlkZGVuLCBldmVyeXRoaW5nIGlzIDBcclxuICBpZiAoIHN0eWxlLmRpc3BsYXkgPT09ICdub25lJyApIHtcclxuICAgIHJldHVybiBnZXRaZXJvU2l6ZSgpO1xyXG4gIH1cclxuXHJcbiAgdmFyIHNpemUgPSB7fTtcclxuICBzaXplLndpZHRoID0gZWxlbS5vZmZzZXRXaWR0aDtcclxuICBzaXplLmhlaWdodCA9IGVsZW0ub2Zmc2V0SGVpZ2h0O1xyXG5cclxuICB2YXIgaXNCb3JkZXJCb3ggPSBzaXplLmlzQm9yZGVyQm94ID0gISEoIGJveFNpemluZ1Byb3AgJiZcclxuICAgIHN0eWxlWyBib3hTaXppbmdQcm9wIF0gJiYgc3R5bGVbIGJveFNpemluZ1Byb3AgXSA9PT0gJ2JvcmRlci1ib3gnICk7XHJcblxyXG4gIC8vIGdldCBhbGwgbWVhc3VyZW1lbnRzXHJcbiAgZm9yICggdmFyIGk9MCwgbGVuID0gbWVhc3VyZW1lbnRzLmxlbmd0aDsgaSA8IGxlbjsgaSsrICkge1xyXG4gICAgdmFyIG1lYXN1cmVtZW50ID0gbWVhc3VyZW1lbnRzW2ldO1xyXG4gICAgdmFyIHZhbHVlID0gc3R5bGVbIG1lYXN1cmVtZW50IF07XHJcbiAgICB2YWx1ZSA9IG11bmdlTm9uUGl4ZWwoIGVsZW0sIHZhbHVlICk7XHJcbiAgICB2YXIgbnVtID0gcGFyc2VGbG9hdCggdmFsdWUgKTtcclxuICAgIC8vIGFueSAnYXV0bycsICdtZWRpdW0nIHZhbHVlIHdpbGwgYmUgMFxyXG4gICAgc2l6ZVsgbWVhc3VyZW1lbnQgXSA9ICFpc05hTiggbnVtICkgPyBudW0gOiAwO1xyXG4gIH1cclxuXHJcbiAgdmFyIHBhZGRpbmdXaWR0aCA9IHNpemUucGFkZGluZ0xlZnQgKyBzaXplLnBhZGRpbmdSaWdodDtcclxuICB2YXIgcGFkZGluZ0hlaWdodCA9IHNpemUucGFkZGluZ1RvcCArIHNpemUucGFkZGluZ0JvdHRvbTtcclxuICB2YXIgbWFyZ2luV2lkdGggPSBzaXplLm1hcmdpbkxlZnQgKyBzaXplLm1hcmdpblJpZ2h0O1xyXG4gIHZhciBtYXJnaW5IZWlnaHQgPSBzaXplLm1hcmdpblRvcCArIHNpemUubWFyZ2luQm90dG9tO1xyXG4gIHZhciBib3JkZXJXaWR0aCA9IHNpemUuYm9yZGVyTGVmdFdpZHRoICsgc2l6ZS5ib3JkZXJSaWdodFdpZHRoO1xyXG4gIHZhciBib3JkZXJIZWlnaHQgPSBzaXplLmJvcmRlclRvcFdpZHRoICsgc2l6ZS5ib3JkZXJCb3R0b21XaWR0aDtcclxuXHJcbiAgdmFyIGlzQm9yZGVyQm94U2l6ZU91dGVyID0gaXNCb3JkZXJCb3ggJiYgaXNCb3hTaXplT3V0ZXI7XHJcblxyXG4gIC8vIG92ZXJ3cml0ZSB3aWR0aCBhbmQgaGVpZ2h0IGlmIHdlIGNhbiBnZXQgaXQgZnJvbSBzdHlsZVxyXG4gIHZhciBzdHlsZVdpZHRoID0gZ2V0U3R5bGVTaXplKCBzdHlsZS53aWR0aCApO1xyXG4gIGlmICggc3R5bGVXaWR0aCAhPT0gZmFsc2UgKSB7XHJcbiAgICBzaXplLndpZHRoID0gc3R5bGVXaWR0aCArXHJcbiAgICAgIC8vIGFkZCBwYWRkaW5nIGFuZCBib3JkZXIgdW5sZXNzIGl0J3MgYWxyZWFkeSBpbmNsdWRpbmcgaXRcclxuICAgICAgKCBpc0JvcmRlckJveFNpemVPdXRlciA/IDAgOiBwYWRkaW5nV2lkdGggKyBib3JkZXJXaWR0aCApO1xyXG4gIH1cclxuXHJcbiAgdmFyIHN0eWxlSGVpZ2h0ID0gZ2V0U3R5bGVTaXplKCBzdHlsZS5oZWlnaHQgKTtcclxuICBpZiAoIHN0eWxlSGVpZ2h0ICE9PSBmYWxzZSApIHtcclxuICAgIHNpemUuaGVpZ2h0ID0gc3R5bGVIZWlnaHQgK1xyXG4gICAgICAvLyBhZGQgcGFkZGluZyBhbmQgYm9yZGVyIHVubGVzcyBpdCdzIGFscmVhZHkgaW5jbHVkaW5nIGl0XHJcbiAgICAgICggaXNCb3JkZXJCb3hTaXplT3V0ZXIgPyAwIDogcGFkZGluZ0hlaWdodCArIGJvcmRlckhlaWdodCApO1xyXG4gIH1cclxuXHJcbiAgc2l6ZS5pbm5lcldpZHRoID0gc2l6ZS53aWR0aCAtICggcGFkZGluZ1dpZHRoICsgYm9yZGVyV2lkdGggKTtcclxuICBzaXplLmlubmVySGVpZ2h0ID0gc2l6ZS5oZWlnaHQgLSAoIHBhZGRpbmdIZWlnaHQgKyBib3JkZXJIZWlnaHQgKTtcclxuXHJcbiAgc2l6ZS5vdXRlcldpZHRoID0gc2l6ZS53aWR0aCArIG1hcmdpbldpZHRoO1xyXG4gIHNpemUub3V0ZXJIZWlnaHQgPSBzaXplLmhlaWdodCArIG1hcmdpbkhlaWdodDtcclxuXHJcbiAgcmV0dXJuIHNpemU7XHJcbn1cclxuXHJcbi8vIElFOCByZXR1cm5zIHBlcmNlbnQgdmFsdWVzLCBub3QgcGl4ZWxzXHJcbi8vIHRha2VuIGZyb20galF1ZXJ5J3MgY3VyQ1NTXHJcbmZ1bmN0aW9uIG11bmdlTm9uUGl4ZWwoIGVsZW0sIHZhbHVlICkge1xyXG4gIC8vIElFOCBhbmQgaGFzIHBlcmNlbnQgdmFsdWVcclxuICBpZiAoIHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlIHx8IHZhbHVlLmluZGV4T2YoJyUnKSA9PT0gLTEgKSB7XHJcbiAgICByZXR1cm4gdmFsdWU7XHJcbiAgfVxyXG4gIHZhciBzdHlsZSA9IGVsZW0uc3R5bGU7XHJcbiAgLy8gUmVtZW1iZXIgdGhlIG9yaWdpbmFsIHZhbHVlc1xyXG4gIHZhciBsZWZ0ID0gc3R5bGUubGVmdDtcclxuICB2YXIgcnMgPSBlbGVtLnJ1bnRpbWVTdHlsZTtcclxuICB2YXIgcnNMZWZ0ID0gcnMgJiYgcnMubGVmdDtcclxuXHJcbiAgLy8gUHV0IGluIHRoZSBuZXcgdmFsdWVzIHRvIGdldCBhIGNvbXB1dGVkIHZhbHVlIG91dFxyXG4gIGlmICggcnNMZWZ0ICkge1xyXG4gICAgcnMubGVmdCA9IGVsZW0uY3VycmVudFN0eWxlLmxlZnQ7XHJcbiAgfVxyXG4gIHN0eWxlLmxlZnQgPSB2YWx1ZTtcclxuICB2YWx1ZSA9IHN0eWxlLnBpeGVsTGVmdDtcclxuXHJcbiAgLy8gUmV2ZXJ0IHRoZSBjaGFuZ2VkIHZhbHVlc1xyXG4gIHN0eWxlLmxlZnQgPSBsZWZ0O1xyXG4gIGlmICggcnNMZWZ0ICkge1xyXG4gICAgcnMubGVmdCA9IHJzTGVmdDtcclxuICB9XHJcblxyXG4gIHJldHVybiB2YWx1ZTtcclxufVxyXG5cclxucmV0dXJuIGdldFNpemU7XHJcblxyXG59XHJcblxyXG4vLyB0cmFuc3BvcnRcclxuaWYgKCB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgKSB7XHJcbiAgLy8gQU1EIGZvciBSZXF1aXJlSlNcclxuICBkZWZpbmUoICdnZXQtc2l6ZS9nZXQtc2l6ZScsWyAnZ2V0LXN0eWxlLXByb3BlcnR5L2dldC1zdHlsZS1wcm9wZXJ0eScgXSwgZGVmaW5lR2V0U2l6ZSApO1xyXG59IGVsc2UgaWYgKCB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgKSB7XHJcbiAgLy8gQ29tbW9uSlMgZm9yIENvbXBvbmVudFxyXG4gIG1vZHVsZS5leHBvcnRzID0gZGVmaW5lR2V0U2l6ZSggcmVxdWlyZSgnZGVzYW5kcm8tZ2V0LXN0eWxlLXByb3BlcnR5JykgKTtcclxufSBlbHNlIHtcclxuICAvLyBicm93c2VyIGdsb2JhbFxyXG4gIHdpbmRvdy5nZXRTaXplID0gZGVmaW5lR2V0U2l6ZSggd2luZG93LmdldFN0eWxlUHJvcGVydHkgKTtcclxufVxyXG5cclxufSkoIHdpbmRvdyApO1xyXG5cclxuLyohXHJcbiAqIGRvY1JlYWR5IHYxLjAuNFxyXG4gKiBDcm9zcyBicm93c2VyIERPTUNvbnRlbnRMb2FkZWQgZXZlbnQgZW1pdHRlclxyXG4gKiBNSVQgbGljZW5zZVxyXG4gKi9cclxuXHJcbi8qanNoaW50IGJyb3dzZXI6IHRydWUsIHN0cmljdDogdHJ1ZSwgdW5kZWY6IHRydWUsIHVudXNlZDogdHJ1ZSovXHJcbi8qZ2xvYmFsIGRlZmluZTogZmFsc2UsIHJlcXVpcmU6IGZhbHNlLCBtb2R1bGU6IGZhbHNlICovXHJcblxyXG4oIGZ1bmN0aW9uKCB3aW5kb3cgKSB7XHJcblxyXG5cclxuXHJcbnZhciBkb2N1bWVudCA9IHdpbmRvdy5kb2N1bWVudDtcclxuLy8gY29sbGVjdGlvbiBvZiBmdW5jdGlvbnMgdG8gYmUgdHJpZ2dlcmVkIG9uIHJlYWR5XHJcbnZhciBxdWV1ZSA9IFtdO1xyXG5cclxuZnVuY3Rpb24gZG9jUmVhZHkoIGZuICkge1xyXG4gIC8vIHRocm93IG91dCBub24tZnVuY3Rpb25zXHJcbiAgaWYgKCB0eXBlb2YgZm4gIT09ICdmdW5jdGlvbicgKSB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICBpZiAoIGRvY1JlYWR5LmlzUmVhZHkgKSB7XHJcbiAgICAvLyByZWFkeSBub3csIGhpdCBpdFxyXG4gICAgZm4oKTtcclxuICB9IGVsc2Uge1xyXG4gICAgLy8gcXVldWUgZnVuY3Rpb24gd2hlbiByZWFkeVxyXG4gICAgcXVldWUucHVzaCggZm4gKTtcclxuICB9XHJcbn1cclxuXHJcbmRvY1JlYWR5LmlzUmVhZHkgPSBmYWxzZTtcclxuXHJcbi8vIHRyaWdnZXJlZCBvbiB2YXJpb3VzIGRvYyByZWFkeSBldmVudHNcclxuZnVuY3Rpb24gb25SZWFkeSggZXZlbnQgKSB7XHJcbiAgLy8gYmFpbCBpZiBhbHJlYWR5IHRyaWdnZXJlZCBvciBJRTggZG9jdW1lbnQgaXMgbm90IHJlYWR5IGp1c3QgeWV0XHJcbiAgdmFyIGlzSUU4Tm90UmVhZHkgPSBldmVudC50eXBlID09PSAncmVhZHlzdGF0ZWNoYW5nZScgJiYgZG9jdW1lbnQucmVhZHlTdGF0ZSAhPT0gJ2NvbXBsZXRlJztcclxuICBpZiAoIGRvY1JlYWR5LmlzUmVhZHkgfHwgaXNJRThOb3RSZWFkeSApIHtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIHRyaWdnZXIoKTtcclxufVxyXG5cclxuZnVuY3Rpb24gdHJpZ2dlcigpIHtcclxuICBkb2NSZWFkeS5pc1JlYWR5ID0gdHJ1ZTtcclxuICAvLyBwcm9jZXNzIHF1ZXVlXHJcbiAgZm9yICggdmFyIGk9MCwgbGVuID0gcXVldWUubGVuZ3RoOyBpIDwgbGVuOyBpKysgKSB7XHJcbiAgICB2YXIgZm4gPSBxdWV1ZVtpXTtcclxuICAgIGZuKCk7XHJcbiAgfVxyXG59XHJcblxyXG5mdW5jdGlvbiBkZWZpbmVEb2NSZWFkeSggZXZlbnRpZSApIHtcclxuICAvLyB0cmlnZ2VyIHJlYWR5IGlmIHBhZ2UgaXMgcmVhZHlcclxuICBpZiAoIGRvY3VtZW50LnJlYWR5U3RhdGUgPT09ICdjb21wbGV0ZScgKSB7XHJcbiAgICB0cmlnZ2VyKCk7XHJcbiAgfSBlbHNlIHtcclxuICAgIC8vIGxpc3RlbiBmb3IgZXZlbnRzXHJcbiAgICBldmVudGllLmJpbmQoIGRvY3VtZW50LCAnRE9NQ29udGVudExvYWRlZCcsIG9uUmVhZHkgKTtcclxuICAgIGV2ZW50aWUuYmluZCggZG9jdW1lbnQsICdyZWFkeXN0YXRlY2hhbmdlJywgb25SZWFkeSApO1xyXG4gICAgZXZlbnRpZS5iaW5kKCB3aW5kb3csICdsb2FkJywgb25SZWFkeSApO1xyXG4gIH1cclxuXHJcbiAgcmV0dXJuIGRvY1JlYWR5O1xyXG59XHJcblxyXG4vLyB0cmFuc3BvcnRcclxuaWYgKCB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgKSB7XHJcbiAgLy8gQU1EXHJcbiAgZGVmaW5lKCAnZG9jLXJlYWR5L2RvYy1yZWFkeScsWyAnZXZlbnRpZS9ldmVudGllJyBdLCBkZWZpbmVEb2NSZWFkeSApO1xyXG59IGVsc2UgaWYgKCB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgKSB7XHJcbiAgbW9kdWxlLmV4cG9ydHMgPSBkZWZpbmVEb2NSZWFkeSggcmVxdWlyZSgnZXZlbnRpZScpICk7XHJcbn0gZWxzZSB7XHJcbiAgLy8gYnJvd3NlciBnbG9iYWxcclxuICB3aW5kb3cuZG9jUmVhZHkgPSBkZWZpbmVEb2NSZWFkeSggd2luZG93LmV2ZW50aWUgKTtcclxufVxyXG5cclxufSkoIHdpbmRvdyApO1xyXG5cclxuLyoqXHJcbiAqIG1hdGNoZXNTZWxlY3RvciB2MS4wLjNcclxuICogbWF0Y2hlc1NlbGVjdG9yKCBlbGVtZW50LCAnLnNlbGVjdG9yJyApXHJcbiAqIE1JVCBsaWNlbnNlXHJcbiAqL1xyXG5cclxuLypqc2hpbnQgYnJvd3NlcjogdHJ1ZSwgc3RyaWN0OiB0cnVlLCB1bmRlZjogdHJ1ZSwgdW51c2VkOiB0cnVlICovXHJcbi8qZ2xvYmFsIGRlZmluZTogZmFsc2UsIG1vZHVsZTogZmFsc2UgKi9cclxuXHJcbiggZnVuY3Rpb24oIEVsZW1Qcm90byApIHtcclxuXHJcbiAgJ3VzZSBzdHJpY3QnO1xyXG5cclxuICB2YXIgbWF0Y2hlc01ldGhvZCA9ICggZnVuY3Rpb24oKSB7XHJcbiAgICAvLyBjaGVjayBmb3IgdGhlIHN0YW5kYXJkIG1ldGhvZCBuYW1lIGZpcnN0XHJcbiAgICBpZiAoIEVsZW1Qcm90by5tYXRjaGVzICkge1xyXG4gICAgICByZXR1cm4gJ21hdGNoZXMnO1xyXG4gICAgfVxyXG4gICAgLy8gY2hlY2sgdW4tcHJlZml4ZWRcclxuICAgIGlmICggRWxlbVByb3RvLm1hdGNoZXNTZWxlY3RvciApIHtcclxuICAgICAgcmV0dXJuICdtYXRjaGVzU2VsZWN0b3InO1xyXG4gICAgfVxyXG4gICAgLy8gY2hlY2sgdmVuZG9yIHByZWZpeGVzXHJcbiAgICB2YXIgcHJlZml4ZXMgPSBbICd3ZWJraXQnLCAnbW96JywgJ21zJywgJ28nIF07XHJcblxyXG4gICAgZm9yICggdmFyIGk9MCwgbGVuID0gcHJlZml4ZXMubGVuZ3RoOyBpIDwgbGVuOyBpKysgKSB7XHJcbiAgICAgIHZhciBwcmVmaXggPSBwcmVmaXhlc1tpXTtcclxuICAgICAgdmFyIG1ldGhvZCA9IHByZWZpeCArICdNYXRjaGVzU2VsZWN0b3InO1xyXG4gICAgICBpZiAoIEVsZW1Qcm90b1sgbWV0aG9kIF0gKSB7XHJcbiAgICAgICAgcmV0dXJuIG1ldGhvZDtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH0pKCk7XHJcblxyXG4gIC8vIC0tLS0tIG1hdGNoIC0tLS0tIC8vXHJcblxyXG4gIGZ1bmN0aW9uIG1hdGNoKCBlbGVtLCBzZWxlY3RvciApIHtcclxuICAgIHJldHVybiBlbGVtWyBtYXRjaGVzTWV0aG9kIF0oIHNlbGVjdG9yICk7XHJcbiAgfVxyXG5cclxuICAvLyAtLS0tLSBhcHBlbmRUb0ZyYWdtZW50IC0tLS0tIC8vXHJcblxyXG4gIGZ1bmN0aW9uIGNoZWNrUGFyZW50KCBlbGVtICkge1xyXG4gICAgLy8gbm90IG5lZWRlZCBpZiBhbHJlYWR5IGhhcyBwYXJlbnRcclxuICAgIGlmICggZWxlbS5wYXJlbnROb2RlICkge1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgICB2YXIgZnJhZ21lbnQgPSBkb2N1bWVudC5jcmVhdGVEb2N1bWVudEZyYWdtZW50KCk7XHJcbiAgICBmcmFnbWVudC5hcHBlbmRDaGlsZCggZWxlbSApO1xyXG4gIH1cclxuXHJcbiAgLy8gLS0tLS0gcXVlcnkgLS0tLS0gLy9cclxuXHJcbiAgLy8gZmFsbCBiYWNrIHRvIHVzaW5nIFFTQVxyXG4gIC8vIHRoeCBAam9uYXRoYW50bmVhbCBodHRwczovL2dpc3QuZ2l0aHViLmNvbS8zMDYyOTU1XHJcbiAgZnVuY3Rpb24gcXVlcnkoIGVsZW0sIHNlbGVjdG9yICkge1xyXG4gICAgLy8gYXBwZW5kIHRvIGZyYWdtZW50IGlmIG5vIHBhcmVudFxyXG4gICAgY2hlY2tQYXJlbnQoIGVsZW0gKTtcclxuXHJcbiAgICAvLyBtYXRjaCBlbGVtIHdpdGggYWxsIHNlbGVjdGVkIGVsZW1zIG9mIHBhcmVudFxyXG4gICAgdmFyIGVsZW1zID0gZWxlbS5wYXJlbnROb2RlLnF1ZXJ5U2VsZWN0b3JBbGwoIHNlbGVjdG9yICk7XHJcbiAgICBmb3IgKCB2YXIgaT0wLCBsZW4gPSBlbGVtcy5sZW5ndGg7IGkgPCBsZW47IGkrKyApIHtcclxuICAgICAgLy8gcmV0dXJuIHRydWUgaWYgbWF0Y2hcclxuICAgICAgaWYgKCBlbGVtc1tpXSA9PT0gZWxlbSApIHtcclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgLy8gb3RoZXJ3aXNlIHJldHVybiBmYWxzZVxyXG4gICAgcmV0dXJuIGZhbHNlO1xyXG4gIH1cclxuXHJcbiAgLy8gLS0tLS0gbWF0Y2hDaGlsZCAtLS0tLSAvL1xyXG5cclxuICBmdW5jdGlvbiBtYXRjaENoaWxkKCBlbGVtLCBzZWxlY3RvciApIHtcclxuICAgIGNoZWNrUGFyZW50KCBlbGVtICk7XHJcbiAgICByZXR1cm4gbWF0Y2goIGVsZW0sIHNlbGVjdG9yICk7XHJcbiAgfVxyXG5cclxuICAvLyAtLS0tLSBtYXRjaGVzU2VsZWN0b3IgLS0tLS0gLy9cclxuXHJcbiAgdmFyIG1hdGNoZXNTZWxlY3RvcjtcclxuXHJcbiAgaWYgKCBtYXRjaGVzTWV0aG9kICkge1xyXG4gICAgLy8gSUU5IHN1cHBvcnRzIG1hdGNoZXNTZWxlY3RvciwgYnV0IGRvZXNuJ3Qgd29yayBvbiBvcnBoYW5lZCBlbGVtc1xyXG4gICAgLy8gY2hlY2sgZm9yIHRoYXRcclxuICAgIHZhciBkaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgIHZhciBzdXBwb3J0c09ycGhhbnMgPSBtYXRjaCggZGl2LCAnZGl2JyApO1xyXG4gICAgbWF0Y2hlc1NlbGVjdG9yID0gc3VwcG9ydHNPcnBoYW5zID8gbWF0Y2ggOiBtYXRjaENoaWxkO1xyXG4gIH0gZWxzZSB7XHJcbiAgICBtYXRjaGVzU2VsZWN0b3IgPSBxdWVyeTtcclxuICB9XHJcblxyXG4gIC8vIHRyYW5zcG9ydFxyXG4gIGlmICggdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kICkge1xyXG4gICAgLy8gQU1EXHJcbiAgICBkZWZpbmUoICdtYXRjaGVzLXNlbGVjdG9yL21hdGNoZXMtc2VsZWN0b3InLFtdLGZ1bmN0aW9uKCkge1xyXG4gICAgICByZXR1cm4gbWF0Y2hlc1NlbGVjdG9yO1xyXG4gICAgfSk7XHJcbiAgfSBlbHNlIGlmICggdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICkge1xyXG4gICAgbW9kdWxlLmV4cG9ydHMgPSBtYXRjaGVzU2VsZWN0b3I7XHJcbiAgfVxyXG4gIGVsc2Uge1xyXG4gICAgLy8gYnJvd3NlciBnbG9iYWxcclxuICAgIHdpbmRvdy5tYXRjaGVzU2VsZWN0b3IgPSBtYXRjaGVzU2VsZWN0b3I7XHJcbiAgfVxyXG5cclxufSkoIEVsZW1lbnQucHJvdG90eXBlICk7XHJcblxyXG4vKipcclxuICogRml6enkgVUkgdXRpbHMgdjEuMC4xXHJcbiAqIE1JVCBsaWNlbnNlXHJcbiAqL1xyXG5cclxuLypqc2hpbnQgYnJvd3NlcjogdHJ1ZSwgdW5kZWY6IHRydWUsIHVudXNlZDogdHJ1ZSwgc3RyaWN0OiB0cnVlICovXHJcblxyXG4oIGZ1bmN0aW9uKCB3aW5kb3csIGZhY3RvcnkgKSB7XHJcbiAgLypnbG9iYWwgZGVmaW5lOiBmYWxzZSwgbW9kdWxlOiBmYWxzZSwgcmVxdWlyZTogZmFsc2UgKi9cclxuICAndXNlIHN0cmljdCc7XHJcbiAgLy8gdW5pdmVyc2FsIG1vZHVsZSBkZWZpbml0aW9uXHJcblxyXG4gIGlmICggdHlwZW9mIGRlZmluZSA9PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgKSB7XHJcbiAgICAvLyBBTURcclxuICAgIGRlZmluZSggJ2Zpenp5LXVpLXV0aWxzL3V0aWxzJyxbXHJcbiAgICAgICdkb2MtcmVhZHkvZG9jLXJlYWR5JyxcclxuICAgICAgJ21hdGNoZXMtc2VsZWN0b3IvbWF0Y2hlcy1zZWxlY3RvcidcclxuICAgIF0sIGZ1bmN0aW9uKCBkb2NSZWFkeSwgbWF0Y2hlc1NlbGVjdG9yICkge1xyXG4gICAgICByZXR1cm4gZmFjdG9yeSggd2luZG93LCBkb2NSZWFkeSwgbWF0Y2hlc1NlbGVjdG9yICk7XHJcbiAgICB9KTtcclxuICB9IGVsc2UgaWYgKCB0eXBlb2YgZXhwb3J0cyA9PSAnb2JqZWN0JyApIHtcclxuICAgIC8vIENvbW1vbkpTXHJcbiAgICBtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkoXHJcbiAgICAgIHdpbmRvdyxcclxuICAgICAgcmVxdWlyZSgnZG9jLXJlYWR5JyksXHJcbiAgICAgIHJlcXVpcmUoJ2Rlc2FuZHJvLW1hdGNoZXMtc2VsZWN0b3InKVxyXG4gICAgKTtcclxuICB9IGVsc2Uge1xyXG4gICAgLy8gYnJvd3NlciBnbG9iYWxcclxuICAgIHdpbmRvdy5maXp6eVVJVXRpbHMgPSBmYWN0b3J5KFxyXG4gICAgICB3aW5kb3csXHJcbiAgICAgIHdpbmRvdy5kb2NSZWFkeSxcclxuICAgICAgd2luZG93Lm1hdGNoZXNTZWxlY3RvclxyXG4gICAgKTtcclxuICB9XHJcblxyXG59KCB3aW5kb3csIGZ1bmN0aW9uIGZhY3RvcnkoIHdpbmRvdywgZG9jUmVhZHksIG1hdGNoZXNTZWxlY3RvciApIHtcclxuXHJcblxyXG5cclxudmFyIHV0aWxzID0ge307XHJcblxyXG4vLyAtLS0tLSBleHRlbmQgLS0tLS0gLy9cclxuXHJcbi8vIGV4dGVuZHMgb2JqZWN0c1xyXG51dGlscy5leHRlbmQgPSBmdW5jdGlvbiggYSwgYiApIHtcclxuICBmb3IgKCB2YXIgcHJvcCBpbiBiICkge1xyXG4gICAgYVsgcHJvcCBdID0gYlsgcHJvcCBdO1xyXG4gIH1cclxuICByZXR1cm4gYTtcclxufTtcclxuXHJcbi8vIC0tLS0tIG1vZHVsbyAtLS0tLSAvL1xyXG5cclxudXRpbHMubW9kdWxvID0gZnVuY3Rpb24oIG51bSwgZGl2ICkge1xyXG4gIHJldHVybiAoICggbnVtICUgZGl2ICkgKyBkaXYgKSAlIGRpdjtcclxufTtcclxuXHJcbi8vIC0tLS0tIGlzQXJyYXkgLS0tLS0gLy9cclxuICBcclxudmFyIG9ialRvU3RyaW5nID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZztcclxudXRpbHMuaXNBcnJheSA9IGZ1bmN0aW9uKCBvYmogKSB7XHJcbiAgcmV0dXJuIG9ialRvU3RyaW5nLmNhbGwoIG9iaiApID09ICdbb2JqZWN0IEFycmF5XSc7XHJcbn07XHJcblxyXG4vLyAtLS0tLSBtYWtlQXJyYXkgLS0tLS0gLy9cclxuXHJcbi8vIHR1cm4gZWxlbWVudCBvciBub2RlTGlzdCBpbnRvIGFuIGFycmF5XHJcbnV0aWxzLm1ha2VBcnJheSA9IGZ1bmN0aW9uKCBvYmogKSB7XHJcbiAgdmFyIGFyeSA9IFtdO1xyXG4gIGlmICggdXRpbHMuaXNBcnJheSggb2JqICkgKSB7XHJcbiAgICAvLyB1c2Ugb2JqZWN0IGlmIGFscmVhZHkgYW4gYXJyYXlcclxuICAgIGFyeSA9IG9iajtcclxuICB9IGVsc2UgaWYgKCBvYmogJiYgdHlwZW9mIG9iai5sZW5ndGggPT0gJ251bWJlcicgKSB7XHJcbiAgICAvLyBjb252ZXJ0IG5vZGVMaXN0IHRvIGFycmF5XHJcbiAgICBmb3IgKCB2YXIgaT0wLCBsZW4gPSBvYmoubGVuZ3RoOyBpIDwgbGVuOyBpKysgKSB7XHJcbiAgICAgIGFyeS5wdXNoKCBvYmpbaV0gKTtcclxuICAgIH1cclxuICB9IGVsc2Uge1xyXG4gICAgLy8gYXJyYXkgb2Ygc2luZ2xlIGluZGV4XHJcbiAgICBhcnkucHVzaCggb2JqICk7XHJcbiAgfVxyXG4gIHJldHVybiBhcnk7XHJcbn07XHJcblxyXG4vLyAtLS0tLSBpbmRleE9mIC0tLS0tIC8vXHJcblxyXG4vLyBpbmRleCBvZiBoZWxwZXIgY2F1c2UgSUU4XHJcbnV0aWxzLmluZGV4T2YgPSBBcnJheS5wcm90b3R5cGUuaW5kZXhPZiA/IGZ1bmN0aW9uKCBhcnksIG9iaiApIHtcclxuICAgIHJldHVybiBhcnkuaW5kZXhPZiggb2JqICk7XHJcbiAgfSA6IGZ1bmN0aW9uKCBhcnksIG9iaiApIHtcclxuICAgIGZvciAoIHZhciBpPTAsIGxlbiA9IGFyeS5sZW5ndGg7IGkgPCBsZW47IGkrKyApIHtcclxuICAgICAgaWYgKCBhcnlbaV0gPT09IG9iaiApIHtcclxuICAgICAgICByZXR1cm4gaTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIC0xO1xyXG4gIH07XHJcblxyXG4vLyAtLS0tLSByZW1vdmVGcm9tIC0tLS0tIC8vXHJcblxyXG51dGlscy5yZW1vdmVGcm9tID0gZnVuY3Rpb24oIGFyeSwgb2JqICkge1xyXG4gIHZhciBpbmRleCA9IHV0aWxzLmluZGV4T2YoIGFyeSwgb2JqICk7XHJcbiAgaWYgKCBpbmRleCAhPSAtMSApIHtcclxuICAgIGFyeS5zcGxpY2UoIGluZGV4LCAxICk7XHJcbiAgfVxyXG59O1xyXG5cclxuLy8gLS0tLS0gaXNFbGVtZW50IC0tLS0tIC8vXHJcblxyXG4vLyBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vYS8zODQzODAvMTgyMTgzXHJcbnV0aWxzLmlzRWxlbWVudCA9ICggdHlwZW9mIEhUTUxFbGVtZW50ID09ICdmdW5jdGlvbicgfHwgdHlwZW9mIEhUTUxFbGVtZW50ID09ICdvYmplY3QnICkgP1xyXG4gIGZ1bmN0aW9uIGlzRWxlbWVudERPTTIoIG9iaiApIHtcclxuICAgIHJldHVybiBvYmogaW5zdGFuY2VvZiBIVE1MRWxlbWVudDtcclxuICB9IDpcclxuICBmdW5jdGlvbiBpc0VsZW1lbnRRdWlya3koIG9iaiApIHtcclxuICAgIHJldHVybiBvYmogJiYgdHlwZW9mIG9iaiA9PSAnb2JqZWN0JyAmJlxyXG4gICAgICBvYmoubm9kZVR5cGUgPT0gMSAmJiB0eXBlb2Ygb2JqLm5vZGVOYW1lID09ICdzdHJpbmcnO1xyXG4gIH07XHJcblxyXG4vLyAtLS0tLSBzZXRUZXh0IC0tLS0tIC8vXHJcblxyXG51dGlscy5zZXRUZXh0ID0gKCBmdW5jdGlvbigpIHtcclxuICB2YXIgc2V0VGV4dFByb3BlcnR5O1xyXG4gIGZ1bmN0aW9uIHNldFRleHQoIGVsZW0sIHRleHQgKSB7XHJcbiAgICAvLyBvbmx5IGNoZWNrIHNldFRleHRQcm9wZXJ0eSBvbmNlXHJcbiAgICBzZXRUZXh0UHJvcGVydHkgPSBzZXRUZXh0UHJvcGVydHkgfHwgKCBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQudGV4dENvbnRlbnQgIT09IHVuZGVmaW5lZCA/ICd0ZXh0Q29udGVudCcgOiAnaW5uZXJUZXh0JyApO1xyXG4gICAgZWxlbVsgc2V0VGV4dFByb3BlcnR5IF0gPSB0ZXh0O1xyXG4gIH1cclxuICByZXR1cm4gc2V0VGV4dDtcclxufSkoKTtcclxuXHJcbi8vIC0tLS0tIGdldFBhcmVudCAtLS0tLSAvL1xyXG5cclxudXRpbHMuZ2V0UGFyZW50ID0gZnVuY3Rpb24oIGVsZW0sIHNlbGVjdG9yICkge1xyXG4gIHdoaWxlICggZWxlbSAhPSBkb2N1bWVudC5ib2R5ICkge1xyXG4gICAgZWxlbSA9IGVsZW0ucGFyZW50Tm9kZTtcclxuICAgIGlmICggbWF0Y2hlc1NlbGVjdG9yKCBlbGVtLCBzZWxlY3RvciApICkge1xyXG4gICAgICByZXR1cm4gZWxlbTtcclxuICAgIH1cclxuICB9XHJcbn07XHJcblxyXG4vLyAtLS0tLSBnZXRRdWVyeUVsZW1lbnQgLS0tLS0gLy9cclxuXHJcbi8vIHVzZSBlbGVtZW50IGFzIHNlbGVjdG9yIHN0cmluZ1xyXG51dGlscy5nZXRRdWVyeUVsZW1lbnQgPSBmdW5jdGlvbiggZWxlbSApIHtcclxuICBpZiAoIHR5cGVvZiBlbGVtID09ICdzdHJpbmcnICkge1xyXG4gICAgcmV0dXJuIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoIGVsZW0gKTtcclxuICB9XHJcbiAgcmV0dXJuIGVsZW07XHJcbn07XHJcblxyXG4vLyAtLS0tLSBoYW5kbGVFdmVudCAtLS0tLSAvL1xyXG5cclxuLy8gZW5hYmxlIC5vbnR5cGUgdG8gdHJpZ2dlciBmcm9tIC5hZGRFdmVudExpc3RlbmVyKCBlbGVtLCAndHlwZScgKVxyXG51dGlscy5oYW5kbGVFdmVudCA9IGZ1bmN0aW9uKCBldmVudCApIHtcclxuICB2YXIgbWV0aG9kID0gJ29uJyArIGV2ZW50LnR5cGU7XHJcbiAgaWYgKCB0aGlzWyBtZXRob2QgXSApIHtcclxuICAgIHRoaXNbIG1ldGhvZCBdKCBldmVudCApO1xyXG4gIH1cclxufTtcclxuXHJcbi8vIC0tLS0tIGZpbHRlckZpbmRFbGVtZW50cyAtLS0tLSAvL1xyXG5cclxudXRpbHMuZmlsdGVyRmluZEVsZW1lbnRzID0gZnVuY3Rpb24oIGVsZW1zLCBzZWxlY3RvciApIHtcclxuICAvLyBtYWtlIGFycmF5IG9mIGVsZW1zXHJcbiAgZWxlbXMgPSB1dGlscy5tYWtlQXJyYXkoIGVsZW1zICk7XHJcbiAgdmFyIGZmRWxlbXMgPSBbXTtcclxuXHJcbiAgZm9yICggdmFyIGk9MCwgbGVuID0gZWxlbXMubGVuZ3RoOyBpIDwgbGVuOyBpKysgKSB7XHJcbiAgICB2YXIgZWxlbSA9IGVsZW1zW2ldO1xyXG4gICAgLy8gY2hlY2sgdGhhdCBlbGVtIGlzIGFuIGFjdHVhbCBlbGVtZW50XHJcbiAgICBpZiAoICF1dGlscy5pc0VsZW1lbnQoIGVsZW0gKSApIHtcclxuICAgICAgY29udGludWU7XHJcbiAgICB9XHJcbiAgICAvLyBmaWx0ZXIgJiBmaW5kIGl0ZW1zIGlmIHdlIGhhdmUgYSBzZWxlY3RvclxyXG4gICAgaWYgKCBzZWxlY3RvciApIHtcclxuICAgICAgLy8gZmlsdGVyIHNpYmxpbmdzXHJcbiAgICAgIGlmICggbWF0Y2hlc1NlbGVjdG9yKCBlbGVtLCBzZWxlY3RvciApICkge1xyXG4gICAgICAgIGZmRWxlbXMucHVzaCggZWxlbSApO1xyXG4gICAgICB9XHJcbiAgICAgIC8vIGZpbmQgY2hpbGRyZW5cclxuICAgICAgdmFyIGNoaWxkRWxlbXMgPSBlbGVtLnF1ZXJ5U2VsZWN0b3JBbGwoIHNlbGVjdG9yICk7XHJcbiAgICAgIC8vIGNvbmNhdCBjaGlsZEVsZW1zIHRvIGZpbHRlckZvdW5kIGFycmF5XHJcbiAgICAgIGZvciAoIHZhciBqPTAsIGpMZW4gPSBjaGlsZEVsZW1zLmxlbmd0aDsgaiA8IGpMZW47IGorKyApIHtcclxuICAgICAgICBmZkVsZW1zLnB1c2goIGNoaWxkRWxlbXNbal0gKTtcclxuICAgICAgfVxyXG4gICAgfSBlbHNlIHtcclxuICAgICAgZmZFbGVtcy5wdXNoKCBlbGVtICk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICByZXR1cm4gZmZFbGVtcztcclxufTtcclxuXHJcbi8vIC0tLS0tIGRlYm91bmNlTWV0aG9kIC0tLS0tIC8vXHJcblxyXG51dGlscy5kZWJvdW5jZU1ldGhvZCA9IGZ1bmN0aW9uKCBfY2xhc3MsIG1ldGhvZE5hbWUsIHRocmVzaG9sZCApIHtcclxuICAvLyBvcmlnaW5hbCBtZXRob2RcclxuICB2YXIgbWV0aG9kID0gX2NsYXNzLnByb3RvdHlwZVsgbWV0aG9kTmFtZSBdO1xyXG4gIHZhciB0aW1lb3V0TmFtZSA9IG1ldGhvZE5hbWUgKyAnVGltZW91dCc7XHJcblxyXG4gIF9jbGFzcy5wcm90b3R5cGVbIG1ldGhvZE5hbWUgXSA9IGZ1bmN0aW9uKCkge1xyXG4gICAgdmFyIHRpbWVvdXQgPSB0aGlzWyB0aW1lb3V0TmFtZSBdO1xyXG4gICAgaWYgKCB0aW1lb3V0ICkge1xyXG4gICAgICBjbGVhclRpbWVvdXQoIHRpbWVvdXQgKTtcclxuICAgIH1cclxuICAgIHZhciBhcmdzID0gYXJndW1lbnRzO1xyXG5cclxuICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICB0aGlzWyB0aW1lb3V0TmFtZSBdID0gc2V0VGltZW91dCggZnVuY3Rpb24oKSB7XHJcbiAgICAgIG1ldGhvZC5hcHBseSggX3RoaXMsIGFyZ3MgKTtcclxuICAgICAgZGVsZXRlIF90aGlzWyB0aW1lb3V0TmFtZSBdO1xyXG4gICAgfSwgdGhyZXNob2xkIHx8IDEwMCApO1xyXG4gIH07XHJcbn07XHJcblxyXG4vLyAtLS0tLSBodG1sSW5pdCAtLS0tLSAvL1xyXG5cclxuLy8gaHR0cDovL2phbWVzcm9iZXJ0cy5uYW1lL2Jsb2cvMjAxMC8wMi8yMi9zdHJpbmctZnVuY3Rpb25zLWZvci1qYXZhc2NyaXB0LXRyaW0tdG8tY2FtZWwtY2FzZS10by1kYXNoZWQtYW5kLXRvLXVuZGVyc2NvcmUvXHJcbnV0aWxzLnRvRGFzaGVkID0gZnVuY3Rpb24oIHN0ciApIHtcclxuICByZXR1cm4gc3RyLnJlcGxhY2UoIC8oLikoW0EtWl0pL2csIGZ1bmN0aW9uKCBtYXRjaCwgJDEsICQyICkge1xyXG4gICAgcmV0dXJuICQxICsgJy0nICsgJDI7XHJcbiAgfSkudG9Mb3dlckNhc2UoKTtcclxufTtcclxuXHJcbnZhciBjb25zb2xlID0gd2luZG93LmNvbnNvbGU7XHJcbi8qKlxyXG4gKiBhbGxvdyB1c2VyIHRvIGluaXRpYWxpemUgY2xhc3NlcyB2aWEgLmpzLW5hbWVzcGFjZSBjbGFzc1xyXG4gKiBodG1sSW5pdCggV2lkZ2V0LCAnd2lkZ2V0TmFtZScgKVxyXG4gKiBvcHRpb25zIGFyZSBwYXJzZWQgZnJvbSBkYXRhLW5hbWVzcGFjZS1vcHRpb24gYXR0cmlidXRlXHJcbiAqL1xyXG51dGlscy5odG1sSW5pdCA9IGZ1bmN0aW9uKCBXaWRnZXRDbGFzcywgbmFtZXNwYWNlICkge1xyXG4gIGRvY1JlYWR5KCBmdW5jdGlvbigpIHtcclxuICAgIHZhciBkYXNoZWROYW1lc3BhY2UgPSB1dGlscy50b0Rhc2hlZCggbmFtZXNwYWNlICk7XHJcbiAgICB2YXIgZWxlbXMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCAnLmpzLScgKyBkYXNoZWROYW1lc3BhY2UgKTtcclxuICAgIHZhciBkYXRhQXR0ciA9ICdkYXRhLScgKyBkYXNoZWROYW1lc3BhY2UgKyAnLW9wdGlvbnMnO1xyXG5cclxuICAgIGZvciAoIHZhciBpPTAsIGxlbiA9IGVsZW1zLmxlbmd0aDsgaSA8IGxlbjsgaSsrICkge1xyXG4gICAgICB2YXIgZWxlbSA9IGVsZW1zW2ldO1xyXG4gICAgICB2YXIgYXR0ciA9IGVsZW0uZ2V0QXR0cmlidXRlKCBkYXRhQXR0ciApO1xyXG4gICAgICB2YXIgb3B0aW9ucztcclxuICAgICAgdHJ5IHtcclxuICAgICAgICBvcHRpb25zID0gYXR0ciAmJiBKU09OLnBhcnNlKCBhdHRyICk7XHJcbiAgICAgIH0gY2F0Y2ggKCBlcnJvciApIHtcclxuICAgICAgICAvLyBsb2cgZXJyb3IsIGRvIG5vdCBpbml0aWFsaXplXHJcbiAgICAgICAgaWYgKCBjb25zb2xlICkge1xyXG4gICAgICAgICAgY29uc29sZS5lcnJvciggJ0Vycm9yIHBhcnNpbmcgJyArIGRhdGFBdHRyICsgJyBvbiAnICtcclxuICAgICAgICAgICAgZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpICsgKCBlbGVtLmlkID8gJyMnICsgZWxlbS5pZCA6ICcnICkgKyAnOiAnICtcclxuICAgICAgICAgICAgZXJyb3IgKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29udGludWU7XHJcbiAgICAgIH1cclxuICAgICAgLy8gaW5pdGlhbGl6ZVxyXG4gICAgICB2YXIgaW5zdGFuY2UgPSBuZXcgV2lkZ2V0Q2xhc3MoIGVsZW0sIG9wdGlvbnMgKTtcclxuICAgICAgLy8gbWFrZSBhdmFpbGFibGUgdmlhICQoKS5kYXRhKCdsYXlvdXRuYW1lJylcclxuICAgICAgdmFyIGpRdWVyeSA9IHdpbmRvdy5qUXVlcnk7XHJcbiAgICAgIGlmICggalF1ZXJ5ICkge1xyXG4gICAgICAgIGpRdWVyeS5kYXRhKCBlbGVtLCBuYW1lc3BhY2UsIGluc3RhbmNlICk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9KTtcclxufTtcclxuXHJcbi8vIC0tLS0tICAtLS0tLSAvL1xyXG5cclxucmV0dXJuIHV0aWxzO1xyXG5cclxufSkpO1xyXG5cclxuLyoqXHJcbiAqIE91dGxheWVyIEl0ZW1cclxuICovXHJcblxyXG4oIGZ1bmN0aW9uKCB3aW5kb3csIGZhY3RvcnkgKSB7XHJcbiAgJ3VzZSBzdHJpY3QnO1xyXG4gIC8vIHVuaXZlcnNhbCBtb2R1bGUgZGVmaW5pdGlvblxyXG4gIGlmICggdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kICkge1xyXG4gICAgLy8gQU1EXHJcbiAgICBkZWZpbmUoICdvdXRsYXllci9pdGVtJyxbXHJcbiAgICAgICAgJ2V2ZW50RW1pdHRlci9FdmVudEVtaXR0ZXInLFxyXG4gICAgICAgICdnZXQtc2l6ZS9nZXQtc2l6ZScsXHJcbiAgICAgICAgJ2dldC1zdHlsZS1wcm9wZXJ0eS9nZXQtc3R5bGUtcHJvcGVydHknLFxyXG4gICAgICAgICdmaXp6eS11aS11dGlscy91dGlscydcclxuICAgICAgXSxcclxuICAgICAgZnVuY3Rpb24oIEV2ZW50RW1pdHRlciwgZ2V0U2l6ZSwgZ2V0U3R5bGVQcm9wZXJ0eSwgdXRpbHMgKSB7XHJcbiAgICAgICAgcmV0dXJuIGZhY3RvcnkoIHdpbmRvdywgRXZlbnRFbWl0dGVyLCBnZXRTaXplLCBnZXRTdHlsZVByb3BlcnR5LCB1dGlscyApO1xyXG4gICAgICB9XHJcbiAgICApO1xyXG4gIH0gZWxzZSBpZiAodHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnKSB7XHJcbiAgICAvLyBDb21tb25KU1xyXG4gICAgbW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KFxyXG4gICAgICB3aW5kb3csXHJcbiAgICAgIHJlcXVpcmUoJ3dvbGZ5ODctZXZlbnRlbWl0dGVyJyksXHJcbiAgICAgIHJlcXVpcmUoJ2dldC1zaXplJyksXHJcbiAgICAgIHJlcXVpcmUoJ2Rlc2FuZHJvLWdldC1zdHlsZS1wcm9wZXJ0eScpLFxyXG4gICAgICByZXF1aXJlKCdmaXp6eS11aS11dGlscycpXHJcbiAgICApO1xyXG4gIH0gZWxzZSB7XHJcbiAgICAvLyBicm93c2VyIGdsb2JhbFxyXG4gICAgd2luZG93Lk91dGxheWVyID0ge307XHJcbiAgICB3aW5kb3cuT3V0bGF5ZXIuSXRlbSA9IGZhY3RvcnkoXHJcbiAgICAgIHdpbmRvdyxcclxuICAgICAgd2luZG93LkV2ZW50RW1pdHRlcixcclxuICAgICAgd2luZG93LmdldFNpemUsXHJcbiAgICAgIHdpbmRvdy5nZXRTdHlsZVByb3BlcnR5LFxyXG4gICAgICB3aW5kb3cuZml6enlVSVV0aWxzXHJcbiAgICApO1xyXG4gIH1cclxuXHJcbn0oIHdpbmRvdywgZnVuY3Rpb24gZmFjdG9yeSggd2luZG93LCBFdmVudEVtaXR0ZXIsIGdldFNpemUsIGdldFN0eWxlUHJvcGVydHksIHV0aWxzICkge1xyXG4ndXNlIHN0cmljdCc7XHJcblxyXG4vLyAtLS0tLSBoZWxwZXJzIC0tLS0tIC8vXHJcblxyXG52YXIgZ2V0Q29tcHV0ZWRTdHlsZSA9IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlO1xyXG52YXIgZ2V0U3R5bGUgPSBnZXRDb21wdXRlZFN0eWxlID9cclxuICBmdW5jdGlvbiggZWxlbSApIHtcclxuICAgIHJldHVybiBnZXRDb21wdXRlZFN0eWxlKCBlbGVtLCBudWxsICk7XHJcbiAgfSA6XHJcbiAgZnVuY3Rpb24oIGVsZW0gKSB7XHJcbiAgICByZXR1cm4gZWxlbS5jdXJyZW50U3R5bGU7XHJcbiAgfTtcclxuXHJcblxyXG5mdW5jdGlvbiBpc0VtcHR5T2JqKCBvYmogKSB7XHJcbiAgZm9yICggdmFyIHByb3AgaW4gb2JqICkge1xyXG4gICAgcmV0dXJuIGZhbHNlO1xyXG4gIH1cclxuICBwcm9wID0gbnVsbDtcclxuICByZXR1cm4gdHJ1ZTtcclxufVxyXG5cclxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gQ1NTMyBzdXBwb3J0IC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIC8vXHJcblxyXG52YXIgdHJhbnNpdGlvblByb3BlcnR5ID0gZ2V0U3R5bGVQcm9wZXJ0eSgndHJhbnNpdGlvbicpO1xyXG52YXIgdHJhbnNmb3JtUHJvcGVydHkgPSBnZXRTdHlsZVByb3BlcnR5KCd0cmFuc2Zvcm0nKTtcclxudmFyIHN1cHBvcnRzQ1NTMyA9IHRyYW5zaXRpb25Qcm9wZXJ0eSAmJiB0cmFuc2Zvcm1Qcm9wZXJ0eTtcclxudmFyIGlzM2QgPSAhIWdldFN0eWxlUHJvcGVydHkoJ3BlcnNwZWN0aXZlJyk7XHJcblxyXG52YXIgdHJhbnNpdGlvbkVuZEV2ZW50ID0ge1xyXG4gIFdlYmtpdFRyYW5zaXRpb246ICd3ZWJraXRUcmFuc2l0aW9uRW5kJyxcclxuICBNb3pUcmFuc2l0aW9uOiAndHJhbnNpdGlvbmVuZCcsXHJcbiAgT1RyYW5zaXRpb246ICdvdHJhbnNpdGlvbmVuZCcsXHJcbiAgdHJhbnNpdGlvbjogJ3RyYW5zaXRpb25lbmQnXHJcbn1bIHRyYW5zaXRpb25Qcm9wZXJ0eSBdO1xyXG5cclxuLy8gcHJvcGVydGllcyB0aGF0IGNvdWxkIGhhdmUgdmVuZG9yIHByZWZpeFxyXG52YXIgcHJlZml4YWJsZVByb3BlcnRpZXMgPSBbXHJcbiAgJ3RyYW5zZm9ybScsXHJcbiAgJ3RyYW5zaXRpb24nLFxyXG4gICd0cmFuc2l0aW9uRHVyYXRpb24nLFxyXG4gICd0cmFuc2l0aW9uUHJvcGVydHknXHJcbl07XHJcblxyXG4vLyBjYWNoZSBhbGwgdmVuZG9yIHByb3BlcnRpZXNcclxudmFyIHZlbmRvclByb3BlcnRpZXMgPSAoIGZ1bmN0aW9uKCkge1xyXG4gIHZhciBjYWNoZSA9IHt9O1xyXG4gIGZvciAoIHZhciBpPTAsIGxlbiA9IHByZWZpeGFibGVQcm9wZXJ0aWVzLmxlbmd0aDsgaSA8IGxlbjsgaSsrICkge1xyXG4gICAgdmFyIHByb3AgPSBwcmVmaXhhYmxlUHJvcGVydGllc1tpXTtcclxuICAgIHZhciBzdXBwb3J0ZWRQcm9wID0gZ2V0U3R5bGVQcm9wZXJ0eSggcHJvcCApO1xyXG4gICAgaWYgKCBzdXBwb3J0ZWRQcm9wICYmIHN1cHBvcnRlZFByb3AgIT09IHByb3AgKSB7XHJcbiAgICAgIGNhY2hlWyBwcm9wIF0gPSBzdXBwb3J0ZWRQcm9wO1xyXG4gICAgfVxyXG4gIH1cclxuICByZXR1cm4gY2FjaGU7XHJcbn0pKCk7XHJcblxyXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBJdGVtIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIC8vXHJcblxyXG5mdW5jdGlvbiBJdGVtKCBlbGVtZW50LCBsYXlvdXQgKSB7XHJcbiAgaWYgKCAhZWxlbWVudCApIHtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIHRoaXMuZWxlbWVudCA9IGVsZW1lbnQ7XHJcbiAgLy8gcGFyZW50IGxheW91dCBjbGFzcywgaS5lLiBNYXNvbnJ5LCBJc290b3BlLCBvciBQYWNrZXJ5XHJcbiAgdGhpcy5sYXlvdXQgPSBsYXlvdXQ7XHJcbiAgdGhpcy5wb3NpdGlvbiA9IHtcclxuICAgIHg6IDAsXHJcbiAgICB5OiAwXHJcbiAgfTtcclxuXHJcbiAgdGhpcy5fY3JlYXRlKCk7XHJcbn1cclxuXHJcbi8vIGluaGVyaXQgRXZlbnRFbWl0dGVyXHJcbnV0aWxzLmV4dGVuZCggSXRlbS5wcm90b3R5cGUsIEV2ZW50RW1pdHRlci5wcm90b3R5cGUgKTtcclxuXHJcbkl0ZW0ucHJvdG90eXBlLl9jcmVhdGUgPSBmdW5jdGlvbigpIHtcclxuICAvLyB0cmFuc2l0aW9uIG9iamVjdHNcclxuICB0aGlzLl90cmFuc24gPSB7XHJcbiAgICBpbmdQcm9wZXJ0aWVzOiB7fSxcclxuICAgIGNsZWFuOiB7fSxcclxuICAgIG9uRW5kOiB7fVxyXG4gIH07XHJcblxyXG4gIHRoaXMuY3NzKHtcclxuICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnXHJcbiAgfSk7XHJcbn07XHJcblxyXG4vLyB0cmlnZ2VyIHNwZWNpZmllZCBoYW5kbGVyIGZvciBldmVudCB0eXBlXHJcbkl0ZW0ucHJvdG90eXBlLmhhbmRsZUV2ZW50ID0gZnVuY3Rpb24oIGV2ZW50ICkge1xyXG4gIHZhciBtZXRob2QgPSAnb24nICsgZXZlbnQudHlwZTtcclxuICBpZiAoIHRoaXNbIG1ldGhvZCBdICkge1xyXG4gICAgdGhpc1sgbWV0aG9kIF0oIGV2ZW50ICk7XHJcbiAgfVxyXG59O1xyXG5cclxuSXRlbS5wcm90b3R5cGUuZ2V0U2l6ZSA9IGZ1bmN0aW9uKCkge1xyXG4gIHRoaXMuc2l6ZSA9IGdldFNpemUoIHRoaXMuZWxlbWVudCApO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIGFwcGx5IENTUyBzdHlsZXMgdG8gZWxlbWVudFxyXG4gKiBAcGFyYW0ge09iamVjdH0gc3R5bGVcclxuICovXHJcbkl0ZW0ucHJvdG90eXBlLmNzcyA9IGZ1bmN0aW9uKCBzdHlsZSApIHtcclxuICB2YXIgZWxlbVN0eWxlID0gdGhpcy5lbGVtZW50LnN0eWxlO1xyXG5cclxuICBmb3IgKCB2YXIgcHJvcCBpbiBzdHlsZSApIHtcclxuICAgIC8vIHVzZSB2ZW5kb3IgcHJvcGVydHkgaWYgYXZhaWxhYmxlXHJcbiAgICB2YXIgc3VwcG9ydGVkUHJvcCA9IHZlbmRvclByb3BlcnRpZXNbIHByb3AgXSB8fCBwcm9wO1xyXG4gICAgZWxlbVN0eWxlWyBzdXBwb3J0ZWRQcm9wIF0gPSBzdHlsZVsgcHJvcCBdO1xyXG4gIH1cclxufTtcclxuXHJcbiAvLyBtZWFzdXJlIHBvc2l0aW9uLCBhbmQgc2V0cyBpdFxyXG5JdGVtLnByb3RvdHlwZS5nZXRQb3NpdGlvbiA9IGZ1bmN0aW9uKCkge1xyXG4gIHZhciBzdHlsZSA9IGdldFN0eWxlKCB0aGlzLmVsZW1lbnQgKTtcclxuICB2YXIgbGF5b3V0T3B0aW9ucyA9IHRoaXMubGF5b3V0Lm9wdGlvbnM7XHJcbiAgdmFyIGlzT3JpZ2luTGVmdCA9IGxheW91dE9wdGlvbnMuaXNPcmlnaW5MZWZ0O1xyXG4gIHZhciBpc09yaWdpblRvcCA9IGxheW91dE9wdGlvbnMuaXNPcmlnaW5Ub3A7XHJcbiAgdmFyIHhWYWx1ZSA9IHN0eWxlWyBpc09yaWdpbkxlZnQgPyAnbGVmdCcgOiAncmlnaHQnIF07XHJcbiAgdmFyIHlWYWx1ZSA9IHN0eWxlWyBpc09yaWdpblRvcCA/ICd0b3AnIDogJ2JvdHRvbScgXTtcclxuICAvLyBjb252ZXJ0IHBlcmNlbnQgdG8gcGl4ZWxzXHJcbiAgdmFyIGxheW91dFNpemUgPSB0aGlzLmxheW91dC5zaXplO1xyXG4gIHZhciB4ID0geFZhbHVlLmluZGV4T2YoJyUnKSAhPSAtMSA/XHJcbiAgICAoIHBhcnNlRmxvYXQoIHhWYWx1ZSApIC8gMTAwICkgKiBsYXlvdXRTaXplLndpZHRoIDogcGFyc2VJbnQoIHhWYWx1ZSwgMTAgKTtcclxuICB2YXIgeSA9IHlWYWx1ZS5pbmRleE9mKCclJykgIT0gLTEgP1xyXG4gICAgKCBwYXJzZUZsb2F0KCB5VmFsdWUgKSAvIDEwMCApICogbGF5b3V0U2l6ZS5oZWlnaHQgOiBwYXJzZUludCggeVZhbHVlLCAxMCApO1xyXG5cclxuICAvLyBjbGVhbiB1cCAnYXV0bycgb3Igb3RoZXIgbm9uLWludGVnZXIgdmFsdWVzXHJcbiAgeCA9IGlzTmFOKCB4ICkgPyAwIDogeDtcclxuICB5ID0gaXNOYU4oIHkgKSA/IDAgOiB5O1xyXG4gIC8vIHJlbW92ZSBwYWRkaW5nIGZyb20gbWVhc3VyZW1lbnRcclxuICB4IC09IGlzT3JpZ2luTGVmdCA/IGxheW91dFNpemUucGFkZGluZ0xlZnQgOiBsYXlvdXRTaXplLnBhZGRpbmdSaWdodDtcclxuICB5IC09IGlzT3JpZ2luVG9wID8gbGF5b3V0U2l6ZS5wYWRkaW5nVG9wIDogbGF5b3V0U2l6ZS5wYWRkaW5nQm90dG9tO1xyXG5cclxuICB0aGlzLnBvc2l0aW9uLnggPSB4O1xyXG4gIHRoaXMucG9zaXRpb24ueSA9IHk7XHJcbn07XHJcblxyXG4vLyBzZXQgc2V0dGxlZCBwb3NpdGlvbiwgYXBwbHkgcGFkZGluZ1xyXG5JdGVtLnByb3RvdHlwZS5sYXlvdXRQb3NpdGlvbiA9IGZ1bmN0aW9uKCkge1xyXG4gIHZhciBsYXlvdXRTaXplID0gdGhpcy5sYXlvdXQuc2l6ZTtcclxuICB2YXIgbGF5b3V0T3B0aW9ucyA9IHRoaXMubGF5b3V0Lm9wdGlvbnM7XHJcbiAgdmFyIHN0eWxlID0ge307XHJcblxyXG4gIC8vIHhcclxuICB2YXIgeFBhZGRpbmcgPSBsYXlvdXRPcHRpb25zLmlzT3JpZ2luTGVmdCA/ICdwYWRkaW5nTGVmdCcgOiAncGFkZGluZ1JpZ2h0JztcclxuICB2YXIgeFByb3BlcnR5ID0gbGF5b3V0T3B0aW9ucy5pc09yaWdpbkxlZnQgPyAnbGVmdCcgOiAncmlnaHQnO1xyXG4gIHZhciB4UmVzZXRQcm9wZXJ0eSA9IGxheW91dE9wdGlvbnMuaXNPcmlnaW5MZWZ0ID8gJ3JpZ2h0JyA6ICdsZWZ0JztcclxuXHJcbiAgdmFyIHggPSB0aGlzLnBvc2l0aW9uLnggKyBsYXlvdXRTaXplWyB4UGFkZGluZyBdO1xyXG4gIC8vIHNldCBpbiBwZXJjZW50YWdlIG9yIHBpeGVsc1xyXG4gIHN0eWxlWyB4UHJvcGVydHkgXSA9IHRoaXMuZ2V0WFZhbHVlKCB4ICk7XHJcbiAgLy8gcmVzZXQgb3RoZXIgcHJvcGVydHlcclxuICBzdHlsZVsgeFJlc2V0UHJvcGVydHkgXSA9ICcnO1xyXG5cclxuICAvLyB5XHJcbiAgdmFyIHlQYWRkaW5nID0gbGF5b3V0T3B0aW9ucy5pc09yaWdpblRvcCA/ICdwYWRkaW5nVG9wJyA6ICdwYWRkaW5nQm90dG9tJztcclxuICB2YXIgeVByb3BlcnR5ID0gbGF5b3V0T3B0aW9ucy5pc09yaWdpblRvcCA/ICd0b3AnIDogJ2JvdHRvbSc7XHJcbiAgdmFyIHlSZXNldFByb3BlcnR5ID0gbGF5b3V0T3B0aW9ucy5pc09yaWdpblRvcCA/ICdib3R0b20nIDogJ3RvcCc7XHJcblxyXG4gIHZhciB5ID0gdGhpcy5wb3NpdGlvbi55ICsgbGF5b3V0U2l6ZVsgeVBhZGRpbmcgXTtcclxuICAvLyBzZXQgaW4gcGVyY2VudGFnZSBvciBwaXhlbHNcclxuICBzdHlsZVsgeVByb3BlcnR5IF0gPSB0aGlzLmdldFlWYWx1ZSggeSApO1xyXG4gIC8vIHJlc2V0IG90aGVyIHByb3BlcnR5XHJcbiAgc3R5bGVbIHlSZXNldFByb3BlcnR5IF0gPSAnJztcclxuXHJcbiAgdGhpcy5jc3MoIHN0eWxlICk7XHJcbiAgdGhpcy5lbWl0RXZlbnQoICdsYXlvdXQnLCBbIHRoaXMgXSApO1xyXG59O1xyXG5cclxuSXRlbS5wcm90b3R5cGUuZ2V0WFZhbHVlID0gZnVuY3Rpb24oIHggKSB7XHJcbiAgdmFyIGxheW91dE9wdGlvbnMgPSB0aGlzLmxheW91dC5vcHRpb25zO1xyXG4gIHJldHVybiBsYXlvdXRPcHRpb25zLnBlcmNlbnRQb3NpdGlvbiAmJiAhbGF5b3V0T3B0aW9ucy5pc0hvcml6b250YWwgP1xyXG4gICAgKCAoIHggLyB0aGlzLmxheW91dC5zaXplLndpZHRoICkgKiAxMDAgKSArICclJyA6IHggKyAncHgnO1xyXG59O1xyXG5cclxuSXRlbS5wcm90b3R5cGUuZ2V0WVZhbHVlID0gZnVuY3Rpb24oIHkgKSB7XHJcbiAgdmFyIGxheW91dE9wdGlvbnMgPSB0aGlzLmxheW91dC5vcHRpb25zO1xyXG4gIHJldHVybiBsYXlvdXRPcHRpb25zLnBlcmNlbnRQb3NpdGlvbiAmJiBsYXlvdXRPcHRpb25zLmlzSG9yaXpvbnRhbCA/XHJcbiAgICAoICggeSAvIHRoaXMubGF5b3V0LnNpemUuaGVpZ2h0ICkgKiAxMDAgKSArICclJyA6IHkgKyAncHgnO1xyXG59O1xyXG5cclxuXHJcbkl0ZW0ucHJvdG90eXBlLl90cmFuc2l0aW9uVG8gPSBmdW5jdGlvbiggeCwgeSApIHtcclxuICB0aGlzLmdldFBvc2l0aW9uKCk7XHJcbiAgLy8gZ2V0IGN1cnJlbnQgeCAmIHkgZnJvbSB0b3AvbGVmdFxyXG4gIHZhciBjdXJYID0gdGhpcy5wb3NpdGlvbi54O1xyXG4gIHZhciBjdXJZID0gdGhpcy5wb3NpdGlvbi55O1xyXG5cclxuICB2YXIgY29tcGFyZVggPSBwYXJzZUludCggeCwgMTAgKTtcclxuICB2YXIgY29tcGFyZVkgPSBwYXJzZUludCggeSwgMTAgKTtcclxuICB2YXIgZGlkTm90TW92ZSA9IGNvbXBhcmVYID09PSB0aGlzLnBvc2l0aW9uLnggJiYgY29tcGFyZVkgPT09IHRoaXMucG9zaXRpb24ueTtcclxuXHJcbiAgLy8gc2F2ZSBlbmQgcG9zaXRpb25cclxuICB0aGlzLnNldFBvc2l0aW9uKCB4LCB5ICk7XHJcblxyXG4gIC8vIGlmIGRpZCBub3QgbW92ZSBhbmQgbm90IHRyYW5zaXRpb25pbmcsIGp1c3QgZ28gdG8gbGF5b3V0XHJcbiAgaWYgKCBkaWROb3RNb3ZlICYmICF0aGlzLmlzVHJhbnNpdGlvbmluZyApIHtcclxuICAgIHRoaXMubGF5b3V0UG9zaXRpb24oKTtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIHZhciB0cmFuc1ggPSB4IC0gY3VyWDtcclxuICB2YXIgdHJhbnNZID0geSAtIGN1clk7XHJcbiAgdmFyIHRyYW5zaXRpb25TdHlsZSA9IHt9O1xyXG4gIHRyYW5zaXRpb25TdHlsZS50cmFuc2Zvcm0gPSB0aGlzLmdldFRyYW5zbGF0ZSggdHJhbnNYLCB0cmFuc1kgKTtcclxuXHJcbiAgdGhpcy50cmFuc2l0aW9uKHtcclxuICAgIHRvOiB0cmFuc2l0aW9uU3R5bGUsXHJcbiAgICBvblRyYW5zaXRpb25FbmQ6IHtcclxuICAgICAgdHJhbnNmb3JtOiB0aGlzLmxheW91dFBvc2l0aW9uXHJcbiAgICB9LFxyXG4gICAgaXNDbGVhbmluZzogdHJ1ZVxyXG4gIH0pO1xyXG59O1xyXG5cclxuSXRlbS5wcm90b3R5cGUuZ2V0VHJhbnNsYXRlID0gZnVuY3Rpb24oIHgsIHkgKSB7XHJcbiAgLy8gZmxpcCBjb29yaWRpbmF0ZXMgaWYgb3JpZ2luIG9uIHJpZ2h0IG9yIGJvdHRvbVxyXG4gIHZhciBsYXlvdXRPcHRpb25zID0gdGhpcy5sYXlvdXQub3B0aW9ucztcclxuICB4ID0gbGF5b3V0T3B0aW9ucy5pc09yaWdpbkxlZnQgPyB4IDogLXg7XHJcbiAgeSA9IGxheW91dE9wdGlvbnMuaXNPcmlnaW5Ub3AgPyB5IDogLXk7XHJcblxyXG4gIGlmICggaXMzZCApIHtcclxuICAgIHJldHVybiAndHJhbnNsYXRlM2QoJyArIHggKyAncHgsICcgKyB5ICsgJ3B4LCAwKSc7XHJcbiAgfVxyXG5cclxuICByZXR1cm4gJ3RyYW5zbGF0ZSgnICsgeCArICdweCwgJyArIHkgKyAncHgpJztcclxufTtcclxuXHJcbi8vIG5vbiB0cmFuc2l0aW9uICsgdHJhbnNmb3JtIHN1cHBvcnRcclxuSXRlbS5wcm90b3R5cGUuZ29UbyA9IGZ1bmN0aW9uKCB4LCB5ICkge1xyXG4gIHRoaXMuc2V0UG9zaXRpb24oIHgsIHkgKTtcclxuICB0aGlzLmxheW91dFBvc2l0aW9uKCk7XHJcbn07XHJcblxyXG4vLyB1c2UgdHJhbnNpdGlvbiBhbmQgdHJhbnNmb3JtcyBpZiBzdXBwb3J0ZWRcclxuSXRlbS5wcm90b3R5cGUubW92ZVRvID0gc3VwcG9ydHNDU1MzID9cclxuICBJdGVtLnByb3RvdHlwZS5fdHJhbnNpdGlvblRvIDogSXRlbS5wcm90b3R5cGUuZ29UbztcclxuXHJcbkl0ZW0ucHJvdG90eXBlLnNldFBvc2l0aW9uID0gZnVuY3Rpb24oIHgsIHkgKSB7XHJcbiAgdGhpcy5wb3NpdGlvbi54ID0gcGFyc2VJbnQoIHgsIDEwICk7XHJcbiAgdGhpcy5wb3NpdGlvbi55ID0gcGFyc2VJbnQoIHksIDEwICk7XHJcbn07XHJcblxyXG4vLyAtLS0tLSB0cmFuc2l0aW9uIC0tLS0tIC8vXHJcblxyXG4vKipcclxuICogQHBhcmFtIHtPYmplY3R9IHN0eWxlIC0gQ1NTXHJcbiAqIEBwYXJhbSB7RnVuY3Rpb259IG9uVHJhbnNpdGlvbkVuZFxyXG4gKi9cclxuXHJcbi8vIG5vbiB0cmFuc2l0aW9uLCBqdXN0IHRyaWdnZXIgY2FsbGJhY2tcclxuSXRlbS5wcm90b3R5cGUuX25vblRyYW5zaXRpb24gPSBmdW5jdGlvbiggYXJncyApIHtcclxuICB0aGlzLmNzcyggYXJncy50byApO1xyXG4gIGlmICggYXJncy5pc0NsZWFuaW5nICkge1xyXG4gICAgdGhpcy5fcmVtb3ZlU3R5bGVzKCBhcmdzLnRvICk7XHJcbiAgfVxyXG4gIGZvciAoIHZhciBwcm9wIGluIGFyZ3Mub25UcmFuc2l0aW9uRW5kICkge1xyXG4gICAgYXJncy5vblRyYW5zaXRpb25FbmRbIHByb3AgXS5jYWxsKCB0aGlzICk7XHJcbiAgfVxyXG59O1xyXG5cclxuLyoqXHJcbiAqIHByb3BlciB0cmFuc2l0aW9uXHJcbiAqIEBwYXJhbSB7T2JqZWN0fSBhcmdzIC0gYXJndW1lbnRzXHJcbiAqICAgQHBhcmFtIHtPYmplY3R9IHRvIC0gc3R5bGUgdG8gdHJhbnNpdGlvbiB0b1xyXG4gKiAgIEBwYXJhbSB7T2JqZWN0fSBmcm9tIC0gc3R5bGUgdG8gc3RhcnQgdHJhbnNpdGlvbiBmcm9tXHJcbiAqICAgQHBhcmFtIHtCb29sZWFufSBpc0NsZWFuaW5nIC0gcmVtb3ZlcyB0cmFuc2l0aW9uIHN0eWxlcyBhZnRlciB0cmFuc2l0aW9uXHJcbiAqICAgQHBhcmFtIHtGdW5jdGlvbn0gb25UcmFuc2l0aW9uRW5kIC0gY2FsbGJhY2tcclxuICovXHJcbkl0ZW0ucHJvdG90eXBlLl90cmFuc2l0aW9uID0gZnVuY3Rpb24oIGFyZ3MgKSB7XHJcbiAgLy8gcmVkaXJlY3QgdG8gbm9uVHJhbnNpdGlvbiBpZiBubyB0cmFuc2l0aW9uIGR1cmF0aW9uXHJcbiAgaWYgKCAhcGFyc2VGbG9hdCggdGhpcy5sYXlvdXQub3B0aW9ucy50cmFuc2l0aW9uRHVyYXRpb24gKSApIHtcclxuICAgIHRoaXMuX25vblRyYW5zaXRpb24oIGFyZ3MgKTtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIHZhciBfdHJhbnNpdGlvbiA9IHRoaXMuX3RyYW5zbjtcclxuICAvLyBrZWVwIHRyYWNrIG9mIG9uVHJhbnNpdGlvbkVuZCBjYWxsYmFjayBieSBjc3MgcHJvcGVydHlcclxuICBmb3IgKCB2YXIgcHJvcCBpbiBhcmdzLm9uVHJhbnNpdGlvbkVuZCApIHtcclxuICAgIF90cmFuc2l0aW9uLm9uRW5kWyBwcm9wIF0gPSBhcmdzLm9uVHJhbnNpdGlvbkVuZFsgcHJvcCBdO1xyXG4gIH1cclxuICAvLyBrZWVwIHRyYWNrIG9mIHByb3BlcnRpZXMgdGhhdCBhcmUgdHJhbnNpdGlvbmluZ1xyXG4gIGZvciAoIHByb3AgaW4gYXJncy50byApIHtcclxuICAgIF90cmFuc2l0aW9uLmluZ1Byb3BlcnRpZXNbIHByb3AgXSA9IHRydWU7XHJcbiAgICAvLyBrZWVwIHRyYWNrIG9mIHByb3BlcnRpZXMgdG8gY2xlYW4gdXAgd2hlbiB0cmFuc2l0aW9uIGlzIGRvbmVcclxuICAgIGlmICggYXJncy5pc0NsZWFuaW5nICkge1xyXG4gICAgICBfdHJhbnNpdGlvbi5jbGVhblsgcHJvcCBdID0gdHJ1ZTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8vIHNldCBmcm9tIHN0eWxlc1xyXG4gIGlmICggYXJncy5mcm9tICkge1xyXG4gICAgdGhpcy5jc3MoIGFyZ3MuZnJvbSApO1xyXG4gICAgLy8gZm9yY2UgcmVkcmF3LiBodHRwOi8vYmxvZy5hbGV4bWFjY2F3LmNvbS9jc3MtdHJhbnNpdGlvbnNcclxuICAgIHZhciBoID0gdGhpcy5lbGVtZW50Lm9mZnNldEhlaWdodDtcclxuICAgIC8vIGhhY2sgZm9yIEpTSGludCB0byBodXNoIGFib3V0IHVudXNlZCB2YXJcclxuICAgIGggPSBudWxsO1xyXG4gIH1cclxuICAvLyBlbmFibGUgdHJhbnNpdGlvblxyXG4gIHRoaXMuZW5hYmxlVHJhbnNpdGlvbiggYXJncy50byApO1xyXG4gIC8vIHNldCBzdHlsZXMgdGhhdCBhcmUgdHJhbnNpdGlvbmluZ1xyXG4gIHRoaXMuY3NzKCBhcmdzLnRvICk7XHJcblxyXG4gIHRoaXMuaXNUcmFuc2l0aW9uaW5nID0gdHJ1ZTtcclxuXHJcbn07XHJcblxyXG4vLyBkYXNoIGJlZm9yZSBhbGwgY2FwIGxldHRlcnMsIGluY2x1ZGluZyBmaXJzdCBmb3JcclxuLy8gV2Via2l0VHJhbnNmb3JtID0+IC13ZWJraXQtdHJhbnNmb3JtXHJcbmZ1bmN0aW9uIHRvRGFzaGVkQWxsKCBzdHIgKSB7XHJcbiAgcmV0dXJuIHN0ci5yZXBsYWNlKCAvKFtBLVpdKS9nLCBmdW5jdGlvbiggJDEgKSB7XHJcbiAgICByZXR1cm4gJy0nICsgJDEudG9Mb3dlckNhc2UoKTtcclxuICB9KTtcclxufVxyXG5cclxudmFyIHRyYW5zaXRpb25Qcm9wcyA9ICdvcGFjaXR5LCcgK1xyXG4gIHRvRGFzaGVkQWxsKCB2ZW5kb3JQcm9wZXJ0aWVzLnRyYW5zZm9ybSB8fCAndHJhbnNmb3JtJyApO1xyXG5cclxuSXRlbS5wcm90b3R5cGUuZW5hYmxlVHJhbnNpdGlvbiA9IGZ1bmN0aW9uKC8qIHN0eWxlICovKSB7XHJcbiAgLy8gSEFDSyBjaGFuZ2luZyB0cmFuc2l0aW9uUHJvcGVydHkgZHVyaW5nIGEgdHJhbnNpdGlvblxyXG4gIC8vIHdpbGwgY2F1c2UgdHJhbnNpdGlvbiB0byBqdW1wXHJcbiAgaWYgKCB0aGlzLmlzVHJhbnNpdGlvbmluZyApIHtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIC8vIG1ha2UgYHRyYW5zaXRpb246IGZvbywgYmFyLCBiYXpgIGZyb20gc3R5bGUgb2JqZWN0XHJcbiAgLy8gSEFDSyB1bi1jb21tZW50IHRoaXMgd2hlbiBlbmFibGVUcmFuc2l0aW9uIGNhbiB3b3JrXHJcbiAgLy8gd2hpbGUgYSB0cmFuc2l0aW9uIGlzIGhhcHBlbmluZ1xyXG4gIC8vIHZhciB0cmFuc2l0aW9uVmFsdWVzID0gW107XHJcbiAgLy8gZm9yICggdmFyIHByb3AgaW4gc3R5bGUgKSB7XHJcbiAgLy8gICAvLyBkYXNoLWlmeSBjYW1lbENhc2VkIHByb3BlcnRpZXMgbGlrZSBXZWJraXRUcmFuc2l0aW9uXHJcbiAgLy8gICBwcm9wID0gdmVuZG9yUHJvcGVydGllc1sgcHJvcCBdIHx8IHByb3A7XHJcbiAgLy8gICB0cmFuc2l0aW9uVmFsdWVzLnB1c2goIHRvRGFzaGVkQWxsKCBwcm9wICkgKTtcclxuICAvLyB9XHJcbiAgLy8gZW5hYmxlIHRyYW5zaXRpb24gc3R5bGVzXHJcbiAgdGhpcy5jc3Moe1xyXG4gICAgdHJhbnNpdGlvblByb3BlcnR5OiB0cmFuc2l0aW9uUHJvcHMsXHJcbiAgICB0cmFuc2l0aW9uRHVyYXRpb246IHRoaXMubGF5b3V0Lm9wdGlvbnMudHJhbnNpdGlvbkR1cmF0aW9uXHJcbiAgfSk7XHJcbiAgLy8gbGlzdGVuIGZvciB0cmFuc2l0aW9uIGVuZCBldmVudFxyXG4gIHRoaXMuZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCB0cmFuc2l0aW9uRW5kRXZlbnQsIHRoaXMsIGZhbHNlICk7XHJcbn07XHJcblxyXG5JdGVtLnByb3RvdHlwZS50cmFuc2l0aW9uID0gSXRlbS5wcm90b3R5cGVbIHRyYW5zaXRpb25Qcm9wZXJ0eSA/ICdfdHJhbnNpdGlvbicgOiAnX25vblRyYW5zaXRpb24nIF07XHJcblxyXG4vLyAtLS0tLSBldmVudHMgLS0tLS0gLy9cclxuXHJcbkl0ZW0ucHJvdG90eXBlLm9ud2Via2l0VHJhbnNpdGlvbkVuZCA9IGZ1bmN0aW9uKCBldmVudCApIHtcclxuICB0aGlzLm9udHJhbnNpdGlvbmVuZCggZXZlbnQgKTtcclxufTtcclxuXHJcbkl0ZW0ucHJvdG90eXBlLm9ub3RyYW5zaXRpb25lbmQgPSBmdW5jdGlvbiggZXZlbnQgKSB7XHJcbiAgdGhpcy5vbnRyYW5zaXRpb25lbmQoIGV2ZW50ICk7XHJcbn07XHJcblxyXG4vLyBwcm9wZXJ0aWVzIHRoYXQgSSBtdW5nZSB0byBtYWtlIG15IGxpZmUgZWFzaWVyXHJcbnZhciBkYXNoZWRWZW5kb3JQcm9wZXJ0aWVzID0ge1xyXG4gICctd2Via2l0LXRyYW5zZm9ybSc6ICd0cmFuc2Zvcm0nLFxyXG4gICctbW96LXRyYW5zZm9ybSc6ICd0cmFuc2Zvcm0nLFxyXG4gICctby10cmFuc2Zvcm0nOiAndHJhbnNmb3JtJ1xyXG59O1xyXG5cclxuSXRlbS5wcm90b3R5cGUub250cmFuc2l0aW9uZW5kID0gZnVuY3Rpb24oIGV2ZW50ICkge1xyXG4gIC8vIGRpc3JlZ2FyZCBidWJibGVkIGV2ZW50cyBmcm9tIGNoaWxkcmVuXHJcbiAgaWYgKCBldmVudC50YXJnZXQgIT09IHRoaXMuZWxlbWVudCApIHtcclxuICAgIHJldHVybjtcclxuICB9XHJcbiAgdmFyIF90cmFuc2l0aW9uID0gdGhpcy5fdHJhbnNuO1xyXG4gIC8vIGdldCBwcm9wZXJ0eSBuYW1lIG9mIHRyYW5zaXRpb25lZCBwcm9wZXJ0eSwgY29udmVydCB0byBwcmVmaXgtZnJlZVxyXG4gIHZhciBwcm9wZXJ0eU5hbWUgPSBkYXNoZWRWZW5kb3JQcm9wZXJ0aWVzWyBldmVudC5wcm9wZXJ0eU5hbWUgXSB8fCBldmVudC5wcm9wZXJ0eU5hbWU7XHJcblxyXG4gIC8vIHJlbW92ZSBwcm9wZXJ0eSB0aGF0IGhhcyBjb21wbGV0ZWQgdHJhbnNpdGlvbmluZ1xyXG4gIGRlbGV0ZSBfdHJhbnNpdGlvbi5pbmdQcm9wZXJ0aWVzWyBwcm9wZXJ0eU5hbWUgXTtcclxuICAvLyBjaGVjayBpZiBhbnkgcHJvcGVydGllcyBhcmUgc3RpbGwgdHJhbnNpdGlvbmluZ1xyXG4gIGlmICggaXNFbXB0eU9iaiggX3RyYW5zaXRpb24uaW5nUHJvcGVydGllcyApICkge1xyXG4gICAgLy8gYWxsIHByb3BlcnRpZXMgaGF2ZSBjb21wbGV0ZWQgdHJhbnNpdGlvbmluZ1xyXG4gICAgdGhpcy5kaXNhYmxlVHJhbnNpdGlvbigpO1xyXG4gIH1cclxuICAvLyBjbGVhbiBzdHlsZVxyXG4gIGlmICggcHJvcGVydHlOYW1lIGluIF90cmFuc2l0aW9uLmNsZWFuICkge1xyXG4gICAgLy8gY2xlYW4gdXAgc3R5bGVcclxuICAgIHRoaXMuZWxlbWVudC5zdHlsZVsgZXZlbnQucHJvcGVydHlOYW1lIF0gPSAnJztcclxuICAgIGRlbGV0ZSBfdHJhbnNpdGlvbi5jbGVhblsgcHJvcGVydHlOYW1lIF07XHJcbiAgfVxyXG4gIC8vIHRyaWdnZXIgb25UcmFuc2l0aW9uRW5kIGNhbGxiYWNrXHJcbiAgaWYgKCBwcm9wZXJ0eU5hbWUgaW4gX3RyYW5zaXRpb24ub25FbmQgKSB7XHJcbiAgICB2YXIgb25UcmFuc2l0aW9uRW5kID0gX3RyYW5zaXRpb24ub25FbmRbIHByb3BlcnR5TmFtZSBdO1xyXG4gICAgb25UcmFuc2l0aW9uRW5kLmNhbGwoIHRoaXMgKTtcclxuICAgIGRlbGV0ZSBfdHJhbnNpdGlvbi5vbkVuZFsgcHJvcGVydHlOYW1lIF07XHJcbiAgfVxyXG5cclxuICB0aGlzLmVtaXRFdmVudCggJ3RyYW5zaXRpb25FbmQnLCBbIHRoaXMgXSApO1xyXG59O1xyXG5cclxuSXRlbS5wcm90b3R5cGUuZGlzYWJsZVRyYW5zaXRpb24gPSBmdW5jdGlvbigpIHtcclxuICB0aGlzLnJlbW92ZVRyYW5zaXRpb25TdHlsZXMoKTtcclxuICB0aGlzLmVsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lciggdHJhbnNpdGlvbkVuZEV2ZW50LCB0aGlzLCBmYWxzZSApO1xyXG4gIHRoaXMuaXNUcmFuc2l0aW9uaW5nID0gZmFsc2U7XHJcbn07XHJcblxyXG4vKipcclxuICogcmVtb3ZlcyBzdHlsZSBwcm9wZXJ0eSBmcm9tIGVsZW1lbnRcclxuICogQHBhcmFtIHtPYmplY3R9IHN0eWxlXHJcbioqL1xyXG5JdGVtLnByb3RvdHlwZS5fcmVtb3ZlU3R5bGVzID0gZnVuY3Rpb24oIHN0eWxlICkge1xyXG4gIC8vIGNsZWFuIHVwIHRyYW5zaXRpb24gc3R5bGVzXHJcbiAgdmFyIGNsZWFuU3R5bGUgPSB7fTtcclxuICBmb3IgKCB2YXIgcHJvcCBpbiBzdHlsZSApIHtcclxuICAgIGNsZWFuU3R5bGVbIHByb3AgXSA9ICcnO1xyXG4gIH1cclxuICB0aGlzLmNzcyggY2xlYW5TdHlsZSApO1xyXG59O1xyXG5cclxudmFyIGNsZWFuVHJhbnNpdGlvblN0eWxlID0ge1xyXG4gIHRyYW5zaXRpb25Qcm9wZXJ0eTogJycsXHJcbiAgdHJhbnNpdGlvbkR1cmF0aW9uOiAnJ1xyXG59O1xyXG5cclxuSXRlbS5wcm90b3R5cGUucmVtb3ZlVHJhbnNpdGlvblN0eWxlcyA9IGZ1bmN0aW9uKCkge1xyXG4gIC8vIHJlbW92ZSB0cmFuc2l0aW9uXHJcbiAgdGhpcy5jc3MoIGNsZWFuVHJhbnNpdGlvblN0eWxlICk7XHJcbn07XHJcblxyXG4vLyAtLS0tLSBzaG93L2hpZGUvcmVtb3ZlIC0tLS0tIC8vXHJcblxyXG4vLyByZW1vdmUgZWxlbWVudCBmcm9tIERPTVxyXG5JdGVtLnByb3RvdHlwZS5yZW1vdmVFbGVtID0gZnVuY3Rpb24oKSB7XHJcbiAgdGhpcy5lbGVtZW50LnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoIHRoaXMuZWxlbWVudCApO1xyXG4gIC8vIHJlbW92ZSBkaXNwbGF5OiBub25lXHJcbiAgdGhpcy5jc3MoeyBkaXNwbGF5OiAnJyB9KTtcclxuICB0aGlzLmVtaXRFdmVudCggJ3JlbW92ZScsIFsgdGhpcyBdICk7XHJcbn07XHJcblxyXG5JdGVtLnByb3RvdHlwZS5yZW1vdmUgPSBmdW5jdGlvbigpIHtcclxuICAvLyBqdXN0IHJlbW92ZSBlbGVtZW50IGlmIG5vIHRyYW5zaXRpb24gc3VwcG9ydCBvciBubyB0cmFuc2l0aW9uXHJcbiAgaWYgKCAhdHJhbnNpdGlvblByb3BlcnR5IHx8ICFwYXJzZUZsb2F0KCB0aGlzLmxheW91dC5vcHRpb25zLnRyYW5zaXRpb25EdXJhdGlvbiApICkge1xyXG4gICAgdGhpcy5yZW1vdmVFbGVtKCk7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICAvLyBzdGFydCB0cmFuc2l0aW9uXHJcbiAgdmFyIF90aGlzID0gdGhpcztcclxuICB0aGlzLm9uY2UoICd0cmFuc2l0aW9uRW5kJywgZnVuY3Rpb24oKSB7XHJcbiAgICBfdGhpcy5yZW1vdmVFbGVtKCk7XHJcbiAgfSk7XHJcbiAgdGhpcy5oaWRlKCk7XHJcbn07XHJcblxyXG5JdGVtLnByb3RvdHlwZS5yZXZlYWwgPSBmdW5jdGlvbigpIHtcclxuICBkZWxldGUgdGhpcy5pc0hpZGRlbjtcclxuICAvLyByZW1vdmUgZGlzcGxheTogbm9uZVxyXG4gIHRoaXMuY3NzKHsgZGlzcGxheTogJycgfSk7XHJcblxyXG4gIHZhciBvcHRpb25zID0gdGhpcy5sYXlvdXQub3B0aW9ucztcclxuXHJcbiAgdmFyIG9uVHJhbnNpdGlvbkVuZCA9IHt9O1xyXG4gIHZhciB0cmFuc2l0aW9uRW5kUHJvcGVydHkgPSB0aGlzLmdldEhpZGVSZXZlYWxUcmFuc2l0aW9uRW5kUHJvcGVydHkoJ3Zpc2libGVTdHlsZScpO1xyXG4gIG9uVHJhbnNpdGlvbkVuZFsgdHJhbnNpdGlvbkVuZFByb3BlcnR5IF0gPSB0aGlzLm9uUmV2ZWFsVHJhbnNpdGlvbkVuZDtcclxuXHJcbiAgdGhpcy50cmFuc2l0aW9uKHtcclxuICAgIGZyb206IG9wdGlvbnMuaGlkZGVuU3R5bGUsXHJcbiAgICB0bzogb3B0aW9ucy52aXNpYmxlU3R5bGUsXHJcbiAgICBpc0NsZWFuaW5nOiB0cnVlLFxyXG4gICAgb25UcmFuc2l0aW9uRW5kOiBvblRyYW5zaXRpb25FbmRcclxuICB9KTtcclxufTtcclxuXHJcbkl0ZW0ucHJvdG90eXBlLm9uUmV2ZWFsVHJhbnNpdGlvbkVuZCA9IGZ1bmN0aW9uKCkge1xyXG4gIC8vIGNoZWNrIGlmIHN0aWxsIHZpc2libGVcclxuICAvLyBkdXJpbmcgdHJhbnNpdGlvbiwgaXRlbSBtYXkgaGF2ZSBiZWVuIGhpZGRlblxyXG4gIGlmICggIXRoaXMuaXNIaWRkZW4gKSB7XHJcbiAgICB0aGlzLmVtaXRFdmVudCgncmV2ZWFsJyk7XHJcbiAgfVxyXG59O1xyXG5cclxuLyoqXHJcbiAqIGdldCBzdHlsZSBwcm9wZXJ0eSB1c2UgZm9yIGhpZGUvcmV2ZWFsIHRyYW5zaXRpb24gZW5kXHJcbiAqIEBwYXJhbSB7U3RyaW5nfSBzdHlsZVByb3BlcnR5IC0gaGlkZGVuU3R5bGUvdmlzaWJsZVN0eWxlXHJcbiAqIEByZXR1cm5zIHtTdHJpbmd9XHJcbiAqL1xyXG5JdGVtLnByb3RvdHlwZS5nZXRIaWRlUmV2ZWFsVHJhbnNpdGlvbkVuZFByb3BlcnR5ID0gZnVuY3Rpb24oIHN0eWxlUHJvcGVydHkgKSB7XHJcbiAgdmFyIG9wdGlvblN0eWxlID0gdGhpcy5sYXlvdXQub3B0aW9uc1sgc3R5bGVQcm9wZXJ0eSBdO1xyXG4gIC8vIHVzZSBvcGFjaXR5XHJcbiAgaWYgKCBvcHRpb25TdHlsZS5vcGFjaXR5ICkge1xyXG4gICAgcmV0dXJuICdvcGFjaXR5JztcclxuICB9XHJcbiAgLy8gZ2V0IGZpcnN0IHByb3BlcnR5XHJcbiAgZm9yICggdmFyIHByb3AgaW4gb3B0aW9uU3R5bGUgKSB7XHJcbiAgICByZXR1cm4gcHJvcDtcclxuICB9XHJcbn07XHJcblxyXG5JdGVtLnByb3RvdHlwZS5oaWRlID0gZnVuY3Rpb24oKSB7XHJcbiAgLy8gc2V0IGZsYWdcclxuICB0aGlzLmlzSGlkZGVuID0gdHJ1ZTtcclxuICAvLyByZW1vdmUgZGlzcGxheTogbm9uZVxyXG4gIHRoaXMuY3NzKHsgZGlzcGxheTogJycgfSk7XHJcblxyXG4gIHZhciBvcHRpb25zID0gdGhpcy5sYXlvdXQub3B0aW9ucztcclxuXHJcbiAgdmFyIG9uVHJhbnNpdGlvbkVuZCA9IHt9O1xyXG4gIHZhciB0cmFuc2l0aW9uRW5kUHJvcGVydHkgPSB0aGlzLmdldEhpZGVSZXZlYWxUcmFuc2l0aW9uRW5kUHJvcGVydHkoJ2hpZGRlblN0eWxlJyk7XHJcbiAgb25UcmFuc2l0aW9uRW5kWyB0cmFuc2l0aW9uRW5kUHJvcGVydHkgXSA9IHRoaXMub25IaWRlVHJhbnNpdGlvbkVuZDtcclxuXHJcbiAgdGhpcy50cmFuc2l0aW9uKHtcclxuICAgIGZyb206IG9wdGlvbnMudmlzaWJsZVN0eWxlLFxyXG4gICAgdG86IG9wdGlvbnMuaGlkZGVuU3R5bGUsXHJcbiAgICAvLyBrZWVwIGhpZGRlbiBzdHVmZiBoaWRkZW5cclxuICAgIGlzQ2xlYW5pbmc6IHRydWUsXHJcbiAgICBvblRyYW5zaXRpb25FbmQ6IG9uVHJhbnNpdGlvbkVuZFxyXG4gIH0pO1xyXG59O1xyXG5cclxuSXRlbS5wcm90b3R5cGUub25IaWRlVHJhbnNpdGlvbkVuZCA9IGZ1bmN0aW9uKCkge1xyXG4gIC8vIGNoZWNrIGlmIHN0aWxsIGhpZGRlblxyXG4gIC8vIGR1cmluZyB0cmFuc2l0aW9uLCBpdGVtIG1heSBoYXZlIGJlZW4gdW4taGlkZGVuXHJcbiAgaWYgKCB0aGlzLmlzSGlkZGVuICkge1xyXG4gICAgdGhpcy5jc3MoeyBkaXNwbGF5OiAnbm9uZScgfSk7XHJcbiAgICB0aGlzLmVtaXRFdmVudCgnaGlkZScpO1xyXG4gIH1cclxufTtcclxuXHJcbkl0ZW0ucHJvdG90eXBlLmRlc3Ryb3kgPSBmdW5jdGlvbigpIHtcclxuICB0aGlzLmNzcyh7XHJcbiAgICBwb3NpdGlvbjogJycsXHJcbiAgICBsZWZ0OiAnJyxcclxuICAgIHJpZ2h0OiAnJyxcclxuICAgIHRvcDogJycsXHJcbiAgICBib3R0b206ICcnLFxyXG4gICAgdHJhbnNpdGlvbjogJycsXHJcbiAgICB0cmFuc2Zvcm06ICcnXHJcbiAgfSk7XHJcbn07XHJcblxyXG5yZXR1cm4gSXRlbTtcclxuXHJcbn0pKTtcclxuXHJcbi8qIVxyXG4gKiBPdXRsYXllciB2MS40LjJcclxuICogdGhlIGJyYWlucyBhbmQgZ3V0cyBvZiBhIGxheW91dCBsaWJyYXJ5XHJcbiAqIE1JVCBsaWNlbnNlXHJcbiAqL1xyXG5cclxuKCBmdW5jdGlvbiggd2luZG93LCBmYWN0b3J5ICkge1xyXG4gICd1c2Ugc3RyaWN0JztcclxuICAvLyB1bml2ZXJzYWwgbW9kdWxlIGRlZmluaXRpb25cclxuXHJcbiAgaWYgKCB0eXBlb2YgZGVmaW5lID09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCApIHtcclxuICAgIC8vIEFNRFxyXG4gICAgZGVmaW5lKCAnb3V0bGF5ZXIvb3V0bGF5ZXInLFtcclxuICAgICAgICAnZXZlbnRpZS9ldmVudGllJyxcclxuICAgICAgICAnZXZlbnRFbWl0dGVyL0V2ZW50RW1pdHRlcicsXHJcbiAgICAgICAgJ2dldC1zaXplL2dldC1zaXplJyxcclxuICAgICAgICAnZml6enktdWktdXRpbHMvdXRpbHMnLFxyXG4gICAgICAgICcuL2l0ZW0nXHJcbiAgICAgIF0sXHJcbiAgICAgIGZ1bmN0aW9uKCBldmVudGllLCBFdmVudEVtaXR0ZXIsIGdldFNpemUsIHV0aWxzLCBJdGVtICkge1xyXG4gICAgICAgIHJldHVybiBmYWN0b3J5KCB3aW5kb3csIGV2ZW50aWUsIEV2ZW50RW1pdHRlciwgZ2V0U2l6ZSwgdXRpbHMsIEl0ZW0pO1xyXG4gICAgICB9XHJcbiAgICApO1xyXG4gIH0gZWxzZSBpZiAoIHR5cGVvZiBleHBvcnRzID09ICdvYmplY3QnICkge1xyXG4gICAgLy8gQ29tbW9uSlNcclxuICAgIG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeShcclxuICAgICAgd2luZG93LFxyXG4gICAgICByZXF1aXJlKCdldmVudGllJyksXHJcbiAgICAgIHJlcXVpcmUoJ3dvbGZ5ODctZXZlbnRlbWl0dGVyJyksXHJcbiAgICAgIHJlcXVpcmUoJ2dldC1zaXplJyksXHJcbiAgICAgIHJlcXVpcmUoJ2Zpenp5LXVpLXV0aWxzJyksXHJcbiAgICAgIHJlcXVpcmUoJy4vaXRlbScpXHJcbiAgICApO1xyXG4gIH0gZWxzZSB7XHJcbiAgICAvLyBicm93c2VyIGdsb2JhbFxyXG4gICAgd2luZG93Lk91dGxheWVyID0gZmFjdG9yeShcclxuICAgICAgd2luZG93LFxyXG4gICAgICB3aW5kb3cuZXZlbnRpZSxcclxuICAgICAgd2luZG93LkV2ZW50RW1pdHRlcixcclxuICAgICAgd2luZG93LmdldFNpemUsXHJcbiAgICAgIHdpbmRvdy5maXp6eVVJVXRpbHMsXHJcbiAgICAgIHdpbmRvdy5PdXRsYXllci5JdGVtXHJcbiAgICApO1xyXG4gIH1cclxuXHJcbn0oIHdpbmRvdywgZnVuY3Rpb24gZmFjdG9yeSggd2luZG93LCBldmVudGllLCBFdmVudEVtaXR0ZXIsIGdldFNpemUsIHV0aWxzLCBJdGVtICkge1xyXG4ndXNlIHN0cmljdCc7XHJcblxyXG4vLyAtLS0tLSB2YXJzIC0tLS0tIC8vXHJcblxyXG52YXIgY29uc29sZSA9IHdpbmRvdy5jb25zb2xlO1xyXG52YXIgalF1ZXJ5ID0gd2luZG93LmpRdWVyeTtcclxudmFyIG5vb3AgPSBmdW5jdGlvbigpIHt9O1xyXG5cclxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gT3V0bGF5ZXIgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gLy9cclxuXHJcbi8vIGdsb2JhbGx5IHVuaXF1ZSBpZGVudGlmaWVyc1xyXG52YXIgR1VJRCA9IDA7XHJcbi8vIGludGVybmFsIHN0b3JlIG9mIGFsbCBPdXRsYXllciBpbnRhbmNlc1xyXG52YXIgaW5zdGFuY2VzID0ge307XHJcblxyXG5cclxuLyoqXHJcbiAqIEBwYXJhbSB7RWxlbWVudCwgU3RyaW5nfSBlbGVtZW50XHJcbiAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zXHJcbiAqIEBjb25zdHJ1Y3RvclxyXG4gKi9cclxuZnVuY3Rpb24gT3V0bGF5ZXIoIGVsZW1lbnQsIG9wdGlvbnMgKSB7XHJcbiAgdmFyIHF1ZXJ5RWxlbWVudCA9IHV0aWxzLmdldFF1ZXJ5RWxlbWVudCggZWxlbWVudCApO1xyXG4gIGlmICggIXF1ZXJ5RWxlbWVudCApIHtcclxuICAgIGlmICggY29uc29sZSApIHtcclxuICAgICAgY29uc29sZS5lcnJvciggJ0JhZCBlbGVtZW50IGZvciAnICsgdGhpcy5jb25zdHJ1Y3Rvci5uYW1lc3BhY2UgK1xyXG4gICAgICAgICc6ICcgKyAoIHF1ZXJ5RWxlbWVudCB8fCBlbGVtZW50ICkgKTtcclxuICAgIH1cclxuICAgIHJldHVybjtcclxuICB9XHJcbiAgdGhpcy5lbGVtZW50ID0gcXVlcnlFbGVtZW50O1xyXG4gIC8vIGFkZCBqUXVlcnlcclxuICBpZiAoIGpRdWVyeSApIHtcclxuICAgIHRoaXMuJGVsZW1lbnQgPSBqUXVlcnkoIHRoaXMuZWxlbWVudCApO1xyXG4gIH1cclxuXHJcbiAgLy8gb3B0aW9uc1xyXG4gIHRoaXMub3B0aW9ucyA9IHV0aWxzLmV4dGVuZCgge30sIHRoaXMuY29uc3RydWN0b3IuZGVmYXVsdHMgKTtcclxuICB0aGlzLm9wdGlvbiggb3B0aW9ucyApO1xyXG5cclxuICAvLyBhZGQgaWQgZm9yIE91dGxheWVyLmdldEZyb21FbGVtZW50XHJcbiAgdmFyIGlkID0gKytHVUlEO1xyXG4gIHRoaXMuZWxlbWVudC5vdXRsYXllckdVSUQgPSBpZDsgLy8gZXhwYW5kb1xyXG4gIGluc3RhbmNlc1sgaWQgXSA9IHRoaXM7IC8vIGFzc29jaWF0ZSB2aWEgaWRcclxuXHJcbiAgLy8ga2ljayBpdCBvZmZcclxuICB0aGlzLl9jcmVhdGUoKTtcclxuXHJcbiAgaWYgKCB0aGlzLm9wdGlvbnMuaXNJbml0TGF5b3V0ICkge1xyXG4gICAgdGhpcy5sYXlvdXQoKTtcclxuICB9XHJcbn1cclxuXHJcbi8vIHNldHRpbmdzIGFyZSBmb3IgaW50ZXJuYWwgdXNlIG9ubHlcclxuT3V0bGF5ZXIubmFtZXNwYWNlID0gJ291dGxheWVyJztcclxuT3V0bGF5ZXIuSXRlbSA9IEl0ZW07XHJcblxyXG4vLyBkZWZhdWx0IG9wdGlvbnNcclxuT3V0bGF5ZXIuZGVmYXVsdHMgPSB7XHJcbiAgY29udGFpbmVyU3R5bGU6IHtcclxuICAgIHBvc2l0aW9uOiAncmVsYXRpdmUnXHJcbiAgfSxcclxuICBpc0luaXRMYXlvdXQ6IHRydWUsXHJcbiAgaXNPcmlnaW5MZWZ0OiB0cnVlLFxyXG4gIGlzT3JpZ2luVG9wOiB0cnVlLFxyXG4gIGlzUmVzaXplQm91bmQ6IHRydWUsXHJcbiAgaXNSZXNpemluZ0NvbnRhaW5lcjogdHJ1ZSxcclxuICAvLyBpdGVtIG9wdGlvbnNcclxuICB0cmFuc2l0aW9uRHVyYXRpb246ICcwLjRzJyxcclxuICBoaWRkZW5TdHlsZToge1xyXG4gICAgb3BhY2l0eTogMCxcclxuICAgIHRyYW5zZm9ybTogJ3NjYWxlKDAuMDAxKSdcclxuICB9LFxyXG4gIHZpc2libGVTdHlsZToge1xyXG4gICAgb3BhY2l0eTogMSxcclxuICAgIHRyYW5zZm9ybTogJ3NjYWxlKDEpJ1xyXG4gIH1cclxufTtcclxuXHJcbi8vIGluaGVyaXQgRXZlbnRFbWl0dGVyXHJcbnV0aWxzLmV4dGVuZCggT3V0bGF5ZXIucHJvdG90eXBlLCBFdmVudEVtaXR0ZXIucHJvdG90eXBlICk7XHJcblxyXG4vKipcclxuICogc2V0IG9wdGlvbnNcclxuICogQHBhcmFtIHtPYmplY3R9IG9wdHNcclxuICovXHJcbk91dGxheWVyLnByb3RvdHlwZS5vcHRpb24gPSBmdW5jdGlvbiggb3B0cyApIHtcclxuICB1dGlscy5leHRlbmQoIHRoaXMub3B0aW9ucywgb3B0cyApO1xyXG59O1xyXG5cclxuT3V0bGF5ZXIucHJvdG90eXBlLl9jcmVhdGUgPSBmdW5jdGlvbigpIHtcclxuICAvLyBnZXQgaXRlbXMgZnJvbSBjaGlsZHJlblxyXG4gIHRoaXMucmVsb2FkSXRlbXMoKTtcclxuICAvLyBlbGVtZW50cyB0aGF0IGFmZmVjdCBsYXlvdXQsIGJ1dCBhcmUgbm90IGxhaWQgb3V0XHJcbiAgdGhpcy5zdGFtcHMgPSBbXTtcclxuICB0aGlzLnN0YW1wKCB0aGlzLm9wdGlvbnMuc3RhbXAgKTtcclxuICAvLyBzZXQgY29udGFpbmVyIHN0eWxlXHJcbiAgdXRpbHMuZXh0ZW5kKCB0aGlzLmVsZW1lbnQuc3R5bGUsIHRoaXMub3B0aW9ucy5jb250YWluZXJTdHlsZSApO1xyXG5cclxuICAvLyBiaW5kIHJlc2l6ZSBtZXRob2RcclxuICBpZiAoIHRoaXMub3B0aW9ucy5pc1Jlc2l6ZUJvdW5kICkge1xyXG4gICAgdGhpcy5iaW5kUmVzaXplKCk7XHJcbiAgfVxyXG59O1xyXG5cclxuLy8gZ29lcyB0aHJvdWdoIGFsbCBjaGlsZHJlbiBhZ2FpbiBhbmQgZ2V0cyBicmlja3MgaW4gcHJvcGVyIG9yZGVyXHJcbk91dGxheWVyLnByb3RvdHlwZS5yZWxvYWRJdGVtcyA9IGZ1bmN0aW9uKCkge1xyXG4gIC8vIGNvbGxlY3Rpb24gb2YgaXRlbSBlbGVtZW50c1xyXG4gIHRoaXMuaXRlbXMgPSB0aGlzLl9pdGVtaXplKCB0aGlzLmVsZW1lbnQuY2hpbGRyZW4gKTtcclxufTtcclxuXHJcblxyXG4vKipcclxuICogdHVybiBlbGVtZW50cyBpbnRvIE91dGxheWVyLkl0ZW1zIHRvIGJlIHVzZWQgaW4gbGF5b3V0XHJcbiAqIEBwYXJhbSB7QXJyYXkgb3IgTm9kZUxpc3Qgb3IgSFRNTEVsZW1lbnR9IGVsZW1zXHJcbiAqIEByZXR1cm5zIHtBcnJheX0gaXRlbXMgLSBjb2xsZWN0aW9uIG9mIG5ldyBPdXRsYXllciBJdGVtc1xyXG4gKi9cclxuT3V0bGF5ZXIucHJvdG90eXBlLl9pdGVtaXplID0gZnVuY3Rpb24oIGVsZW1zICkge1xyXG5cclxuICB2YXIgaXRlbUVsZW1zID0gdGhpcy5fZmlsdGVyRmluZEl0ZW1FbGVtZW50cyggZWxlbXMgKTtcclxuICB2YXIgSXRlbSA9IHRoaXMuY29uc3RydWN0b3IuSXRlbTtcclxuXHJcbiAgLy8gY3JlYXRlIG5ldyBPdXRsYXllciBJdGVtcyBmb3IgY29sbGVjdGlvblxyXG4gIHZhciBpdGVtcyA9IFtdO1xyXG4gIGZvciAoIHZhciBpPTAsIGxlbiA9IGl0ZW1FbGVtcy5sZW5ndGg7IGkgPCBsZW47IGkrKyApIHtcclxuICAgIHZhciBlbGVtID0gaXRlbUVsZW1zW2ldO1xyXG4gICAgdmFyIGl0ZW0gPSBuZXcgSXRlbSggZWxlbSwgdGhpcyApO1xyXG4gICAgaXRlbXMucHVzaCggaXRlbSApO1xyXG4gIH1cclxuXHJcbiAgcmV0dXJuIGl0ZW1zO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIGdldCBpdGVtIGVsZW1lbnRzIHRvIGJlIHVzZWQgaW4gbGF5b3V0XHJcbiAqIEBwYXJhbSB7QXJyYXkgb3IgTm9kZUxpc3Qgb3IgSFRNTEVsZW1lbnR9IGVsZW1zXHJcbiAqIEByZXR1cm5zIHtBcnJheX0gaXRlbXMgLSBpdGVtIGVsZW1lbnRzXHJcbiAqL1xyXG5PdXRsYXllci5wcm90b3R5cGUuX2ZpbHRlckZpbmRJdGVtRWxlbWVudHMgPSBmdW5jdGlvbiggZWxlbXMgKSB7XHJcbiAgcmV0dXJuIHV0aWxzLmZpbHRlckZpbmRFbGVtZW50cyggZWxlbXMsIHRoaXMub3B0aW9ucy5pdGVtU2VsZWN0b3IgKTtcclxufTtcclxuXHJcbi8qKlxyXG4gKiBnZXR0ZXIgbWV0aG9kIGZvciBnZXR0aW5nIGl0ZW0gZWxlbWVudHNcclxuICogQHJldHVybnMge0FycmF5fSBlbGVtcyAtIGNvbGxlY3Rpb24gb2YgaXRlbSBlbGVtZW50c1xyXG4gKi9cclxuT3V0bGF5ZXIucHJvdG90eXBlLmdldEl0ZW1FbGVtZW50cyA9IGZ1bmN0aW9uKCkge1xyXG4gIHZhciBlbGVtcyA9IFtdO1xyXG4gIGZvciAoIHZhciBpPTAsIGxlbiA9IHRoaXMuaXRlbXMubGVuZ3RoOyBpIDwgbGVuOyBpKysgKSB7XHJcbiAgICBlbGVtcy5wdXNoKCB0aGlzLml0ZW1zW2ldLmVsZW1lbnQgKTtcclxuICB9XHJcbiAgcmV0dXJuIGVsZW1zO1xyXG59O1xyXG5cclxuLy8gLS0tLS0gaW5pdCAmIGxheW91dCAtLS0tLSAvL1xyXG5cclxuLyoqXHJcbiAqIGxheXMgb3V0IGFsbCBpdGVtc1xyXG4gKi9cclxuT3V0bGF5ZXIucHJvdG90eXBlLmxheW91dCA9IGZ1bmN0aW9uKCkge1xyXG4gIHRoaXMuX3Jlc2V0TGF5b3V0KCk7XHJcbiAgdGhpcy5fbWFuYWdlU3RhbXBzKCk7XHJcblxyXG4gIC8vIGRvbid0IGFuaW1hdGUgZmlyc3QgbGF5b3V0XHJcbiAgdmFyIGlzSW5zdGFudCA9IHRoaXMub3B0aW9ucy5pc0xheW91dEluc3RhbnQgIT09IHVuZGVmaW5lZCA/XHJcbiAgICB0aGlzLm9wdGlvbnMuaXNMYXlvdXRJbnN0YW50IDogIXRoaXMuX2lzTGF5b3V0SW5pdGVkO1xyXG4gIHRoaXMubGF5b3V0SXRlbXMoIHRoaXMuaXRlbXMsIGlzSW5zdGFudCApO1xyXG5cclxuICAvLyBmbGFnIGZvciBpbml0YWxpemVkXHJcbiAgdGhpcy5faXNMYXlvdXRJbml0ZWQgPSB0cnVlO1xyXG59O1xyXG5cclxuLy8gX2luaXQgaXMgYWxpYXMgZm9yIGxheW91dFxyXG5PdXRsYXllci5wcm90b3R5cGUuX2luaXQgPSBPdXRsYXllci5wcm90b3R5cGUubGF5b3V0O1xyXG5cclxuLyoqXHJcbiAqIGxvZ2ljIGJlZm9yZSBhbnkgbmV3IGxheW91dFxyXG4gKi9cclxuT3V0bGF5ZXIucHJvdG90eXBlLl9yZXNldExheW91dCA9IGZ1bmN0aW9uKCkge1xyXG4gIHRoaXMuZ2V0U2l6ZSgpO1xyXG59O1xyXG5cclxuXHJcbk91dGxheWVyLnByb3RvdHlwZS5nZXRTaXplID0gZnVuY3Rpb24oKSB7XHJcbiAgdGhpcy5zaXplID0gZ2V0U2l6ZSggdGhpcy5lbGVtZW50ICk7XHJcbn07XHJcblxyXG4vKipcclxuICogZ2V0IG1lYXN1cmVtZW50IGZyb20gb3B0aW9uLCBmb3IgY29sdW1uV2lkdGgsIHJvd0hlaWdodCwgZ3V0dGVyXHJcbiAqIGlmIG9wdGlvbiBpcyBTdHJpbmcgLT4gZ2V0IGVsZW1lbnQgZnJvbSBzZWxlY3RvciBzdHJpbmcsICYgZ2V0IHNpemUgb2YgZWxlbWVudFxyXG4gKiBpZiBvcHRpb24gaXMgRWxlbWVudCAtPiBnZXQgc2l6ZSBvZiBlbGVtZW50XHJcbiAqIGVsc2UgdXNlIG9wdGlvbiBhcyBhIG51bWJlclxyXG4gKlxyXG4gKiBAcGFyYW0ge1N0cmluZ30gbWVhc3VyZW1lbnRcclxuICogQHBhcmFtIHtTdHJpbmd9IHNpemUgLSB3aWR0aCBvciBoZWlnaHRcclxuICogQHByaXZhdGVcclxuICovXHJcbk91dGxheWVyLnByb3RvdHlwZS5fZ2V0TWVhc3VyZW1lbnQgPSBmdW5jdGlvbiggbWVhc3VyZW1lbnQsIHNpemUgKSB7XHJcbiAgdmFyIG9wdGlvbiA9IHRoaXMub3B0aW9uc1sgbWVhc3VyZW1lbnQgXTtcclxuICB2YXIgZWxlbTtcclxuICBpZiAoICFvcHRpb24gKSB7XHJcbiAgICAvLyBkZWZhdWx0IHRvIDBcclxuICAgIHRoaXNbIG1lYXN1cmVtZW50IF0gPSAwO1xyXG4gIH0gZWxzZSB7XHJcbiAgICAvLyB1c2Ugb3B0aW9uIGFzIGFuIGVsZW1lbnRcclxuICAgIGlmICggdHlwZW9mIG9wdGlvbiA9PT0gJ3N0cmluZycgKSB7XHJcbiAgICAgIGVsZW0gPSB0aGlzLmVsZW1lbnQucXVlcnlTZWxlY3Rvciggb3B0aW9uICk7XHJcbiAgICB9IGVsc2UgaWYgKCB1dGlscy5pc0VsZW1lbnQoIG9wdGlvbiApICkge1xyXG4gICAgICBlbGVtID0gb3B0aW9uO1xyXG4gICAgfVxyXG4gICAgLy8gdXNlIHNpemUgb2YgZWxlbWVudCwgaWYgZWxlbWVudFxyXG4gICAgdGhpc1sgbWVhc3VyZW1lbnQgXSA9IGVsZW0gPyBnZXRTaXplKCBlbGVtIClbIHNpemUgXSA6IG9wdGlvbjtcclxuICB9XHJcbn07XHJcblxyXG4vKipcclxuICogbGF5b3V0IGEgY29sbGVjdGlvbiBvZiBpdGVtIGVsZW1lbnRzXHJcbiAqIEBhcGkgcHVibGljXHJcbiAqL1xyXG5PdXRsYXllci5wcm90b3R5cGUubGF5b3V0SXRlbXMgPSBmdW5jdGlvbiggaXRlbXMsIGlzSW5zdGFudCApIHtcclxuICBpdGVtcyA9IHRoaXMuX2dldEl0ZW1zRm9yTGF5b3V0KCBpdGVtcyApO1xyXG5cclxuICB0aGlzLl9sYXlvdXRJdGVtcyggaXRlbXMsIGlzSW5zdGFudCApO1xyXG5cclxuICB0aGlzLl9wb3N0TGF5b3V0KCk7XHJcbn07XHJcblxyXG4vKipcclxuICogZ2V0IHRoZSBpdGVtcyB0byBiZSBsYWlkIG91dFxyXG4gKiB5b3UgbWF5IHdhbnQgdG8gc2tpcCBvdmVyIHNvbWUgaXRlbXNcclxuICogQHBhcmFtIHtBcnJheX0gaXRlbXNcclxuICogQHJldHVybnMge0FycmF5fSBpdGVtc1xyXG4gKi9cclxuT3V0bGF5ZXIucHJvdG90eXBlLl9nZXRJdGVtc0ZvckxheW91dCA9IGZ1bmN0aW9uKCBpdGVtcyApIHtcclxuICB2YXIgbGF5b3V0SXRlbXMgPSBbXTtcclxuICBmb3IgKCB2YXIgaT0wLCBsZW4gPSBpdGVtcy5sZW5ndGg7IGkgPCBsZW47IGkrKyApIHtcclxuICAgIHZhciBpdGVtID0gaXRlbXNbaV07XHJcbiAgICBpZiAoICFpdGVtLmlzSWdub3JlZCApIHtcclxuICAgICAgbGF5b3V0SXRlbXMucHVzaCggaXRlbSApO1xyXG4gICAgfVxyXG4gIH1cclxuICByZXR1cm4gbGF5b3V0SXRlbXM7XHJcbn07XHJcblxyXG4vKipcclxuICogbGF5b3V0IGl0ZW1zXHJcbiAqIEBwYXJhbSB7QXJyYXl9IGl0ZW1zXHJcbiAqIEBwYXJhbSB7Qm9vbGVhbn0gaXNJbnN0YW50XHJcbiAqL1xyXG5PdXRsYXllci5wcm90b3R5cGUuX2xheW91dEl0ZW1zID0gZnVuY3Rpb24oIGl0ZW1zLCBpc0luc3RhbnQgKSB7XHJcbiAgdGhpcy5fZW1pdENvbXBsZXRlT25JdGVtcyggJ2xheW91dCcsIGl0ZW1zICk7XHJcblxyXG4gIGlmICggIWl0ZW1zIHx8ICFpdGVtcy5sZW5ndGggKSB7XHJcbiAgICAvLyBubyBpdGVtcywgZW1pdCBldmVudCB3aXRoIGVtcHR5IGFycmF5XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICB2YXIgcXVldWUgPSBbXTtcclxuXHJcbiAgZm9yICggdmFyIGk9MCwgbGVuID0gaXRlbXMubGVuZ3RoOyBpIDwgbGVuOyBpKysgKSB7XHJcbiAgICB2YXIgaXRlbSA9IGl0ZW1zW2ldO1xyXG4gICAgLy8gZ2V0IHgveSBvYmplY3QgZnJvbSBtZXRob2RcclxuICAgIHZhciBwb3NpdGlvbiA9IHRoaXMuX2dldEl0ZW1MYXlvdXRQb3NpdGlvbiggaXRlbSApO1xyXG4gICAgLy8gZW5xdWV1ZVxyXG4gICAgcG9zaXRpb24uaXRlbSA9IGl0ZW07XHJcbiAgICBwb3NpdGlvbi5pc0luc3RhbnQgPSBpc0luc3RhbnQgfHwgaXRlbS5pc0xheW91dEluc3RhbnQ7XHJcbiAgICBxdWV1ZS5wdXNoKCBwb3NpdGlvbiApO1xyXG4gIH1cclxuXHJcbiAgdGhpcy5fcHJvY2Vzc0xheW91dFF1ZXVlKCBxdWV1ZSApO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIGdldCBpdGVtIGxheW91dCBwb3NpdGlvblxyXG4gKiBAcGFyYW0ge091dGxheWVyLkl0ZW19IGl0ZW1cclxuICogQHJldHVybnMge09iamVjdH0geCBhbmQgeSBwb3NpdGlvblxyXG4gKi9cclxuT3V0bGF5ZXIucHJvdG90eXBlLl9nZXRJdGVtTGF5b3V0UG9zaXRpb24gPSBmdW5jdGlvbiggLyogaXRlbSAqLyApIHtcclxuICByZXR1cm4ge1xyXG4gICAgeDogMCxcclxuICAgIHk6IDBcclxuICB9O1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIGl0ZXJhdGUgb3ZlciBhcnJheSBhbmQgcG9zaXRpb24gZWFjaCBpdGVtXHJcbiAqIFJlYXNvbiBiZWluZyAtIHNlcGFyYXRpbmcgdGhpcyBsb2dpYyBwcmV2ZW50cyAnbGF5b3V0IGludmFsaWRhdGlvbidcclxuICogdGh4IEBwYXVsX2lyaXNoXHJcbiAqIEBwYXJhbSB7QXJyYXl9IHF1ZXVlXHJcbiAqL1xyXG5PdXRsYXllci5wcm90b3R5cGUuX3Byb2Nlc3NMYXlvdXRRdWV1ZSA9IGZ1bmN0aW9uKCBxdWV1ZSApIHtcclxuICBmb3IgKCB2YXIgaT0wLCBsZW4gPSBxdWV1ZS5sZW5ndGg7IGkgPCBsZW47IGkrKyApIHtcclxuICAgIHZhciBvYmogPSBxdWV1ZVtpXTtcclxuICAgIHRoaXMuX3Bvc2l0aW9uSXRlbSggb2JqLml0ZW0sIG9iai54LCBvYmoueSwgb2JqLmlzSW5zdGFudCApO1xyXG4gIH1cclxufTtcclxuXHJcbi8qKlxyXG4gKiBTZXRzIHBvc2l0aW9uIG9mIGl0ZW0gaW4gRE9NXHJcbiAqIEBwYXJhbSB7T3V0bGF5ZXIuSXRlbX0gaXRlbVxyXG4gKiBAcGFyYW0ge051bWJlcn0geCAtIGhvcml6b250YWwgcG9zaXRpb25cclxuICogQHBhcmFtIHtOdW1iZXJ9IHkgLSB2ZXJ0aWNhbCBwb3NpdGlvblxyXG4gKiBAcGFyYW0ge0Jvb2xlYW59IGlzSW5zdGFudCAtIGRpc2FibGVzIHRyYW5zaXRpb25zXHJcbiAqL1xyXG5PdXRsYXllci5wcm90b3R5cGUuX3Bvc2l0aW9uSXRlbSA9IGZ1bmN0aW9uKCBpdGVtLCB4LCB5LCBpc0luc3RhbnQgKSB7XHJcbiAgaWYgKCBpc0luc3RhbnQgKSB7XHJcbiAgICAvLyBpZiBub3QgdHJhbnNpdGlvbiwganVzdCBzZXQgQ1NTXHJcbiAgICBpdGVtLmdvVG8oIHgsIHkgKTtcclxuICB9IGVsc2Uge1xyXG4gICAgaXRlbS5tb3ZlVG8oIHgsIHkgKTtcclxuICB9XHJcbn07XHJcblxyXG4vKipcclxuICogQW55IGxvZ2ljIHlvdSB3YW50IHRvIGRvIGFmdGVyIGVhY2ggbGF5b3V0LFxyXG4gKiBpLmUuIHNpemUgdGhlIGNvbnRhaW5lclxyXG4gKi9cclxuT3V0bGF5ZXIucHJvdG90eXBlLl9wb3N0TGF5b3V0ID0gZnVuY3Rpb24oKSB7XHJcbiAgdGhpcy5yZXNpemVDb250YWluZXIoKTtcclxufTtcclxuXHJcbk91dGxheWVyLnByb3RvdHlwZS5yZXNpemVDb250YWluZXIgPSBmdW5jdGlvbigpIHtcclxuICBpZiAoICF0aGlzLm9wdGlvbnMuaXNSZXNpemluZ0NvbnRhaW5lciApIHtcclxuICAgIHJldHVybjtcclxuICB9XHJcbiAgdmFyIHNpemUgPSB0aGlzLl9nZXRDb250YWluZXJTaXplKCk7XHJcbiAgaWYgKCBzaXplICkge1xyXG4gICAgdGhpcy5fc2V0Q29udGFpbmVyTWVhc3VyZSggc2l6ZS53aWR0aCwgdHJ1ZSApO1xyXG4gICAgdGhpcy5fc2V0Q29udGFpbmVyTWVhc3VyZSggc2l6ZS5oZWlnaHQsIGZhbHNlICk7XHJcbiAgfVxyXG59O1xyXG5cclxuLyoqXHJcbiAqIFNldHMgd2lkdGggb3IgaGVpZ2h0IG9mIGNvbnRhaW5lciBpZiByZXR1cm5lZFxyXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBzaXplXHJcbiAqICAgQHBhcmFtIHtOdW1iZXJ9IHdpZHRoXHJcbiAqICAgQHBhcmFtIHtOdW1iZXJ9IGhlaWdodFxyXG4gKi9cclxuT3V0bGF5ZXIucHJvdG90eXBlLl9nZXRDb250YWluZXJTaXplID0gbm9vcDtcclxuXHJcbi8qKlxyXG4gKiBAcGFyYW0ge051bWJlcn0gbWVhc3VyZSAtIHNpemUgb2Ygd2lkdGggb3IgaGVpZ2h0XHJcbiAqIEBwYXJhbSB7Qm9vbGVhbn0gaXNXaWR0aFxyXG4gKi9cclxuT3V0bGF5ZXIucHJvdG90eXBlLl9zZXRDb250YWluZXJNZWFzdXJlID0gZnVuY3Rpb24oIG1lYXN1cmUsIGlzV2lkdGggKSB7XHJcbiAgaWYgKCBtZWFzdXJlID09PSB1bmRlZmluZWQgKSB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICB2YXIgZWxlbVNpemUgPSB0aGlzLnNpemU7XHJcbiAgLy8gYWRkIHBhZGRpbmcgYW5kIGJvcmRlciB3aWR0aCBpZiBib3JkZXIgYm94XHJcbiAgaWYgKCBlbGVtU2l6ZS5pc0JvcmRlckJveCApIHtcclxuICAgIG1lYXN1cmUgKz0gaXNXaWR0aCA/IGVsZW1TaXplLnBhZGRpbmdMZWZ0ICsgZWxlbVNpemUucGFkZGluZ1JpZ2h0ICtcclxuICAgICAgZWxlbVNpemUuYm9yZGVyTGVmdFdpZHRoICsgZWxlbVNpemUuYm9yZGVyUmlnaHRXaWR0aCA6XHJcbiAgICAgIGVsZW1TaXplLnBhZGRpbmdCb3R0b20gKyBlbGVtU2l6ZS5wYWRkaW5nVG9wICtcclxuICAgICAgZWxlbVNpemUuYm9yZGVyVG9wV2lkdGggKyBlbGVtU2l6ZS5ib3JkZXJCb3R0b21XaWR0aDtcclxuICB9XHJcblxyXG4gIG1lYXN1cmUgPSBNYXRoLm1heCggbWVhc3VyZSwgMCApO1xyXG4gIHRoaXMuZWxlbWVudC5zdHlsZVsgaXNXaWR0aCA/ICd3aWR0aCcgOiAnaGVpZ2h0JyBdID0gbWVhc3VyZSArICdweCc7XHJcbn07XHJcblxyXG4vKipcclxuICogZW1pdCBldmVudENvbXBsZXRlIG9uIGEgY29sbGVjdGlvbiBvZiBpdGVtcyBldmVudHNcclxuICogQHBhcmFtIHtTdHJpbmd9IGV2ZW50TmFtZVxyXG4gKiBAcGFyYW0ge0FycmF5fSBpdGVtcyAtIE91dGxheWVyLkl0ZW1zXHJcbiAqL1xyXG5PdXRsYXllci5wcm90b3R5cGUuX2VtaXRDb21wbGV0ZU9uSXRlbXMgPSBmdW5jdGlvbiggZXZlbnROYW1lLCBpdGVtcyApIHtcclxuICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gIGZ1bmN0aW9uIG9uQ29tcGxldGUoKSB7XHJcbiAgICBfdGhpcy5kaXNwYXRjaEV2ZW50KCBldmVudE5hbWUgKyAnQ29tcGxldGUnLCBudWxsLCBbIGl0ZW1zIF0gKTtcclxuICB9XHJcblxyXG4gIHZhciBjb3VudCA9IGl0ZW1zLmxlbmd0aDtcclxuICBpZiAoICFpdGVtcyB8fCAhY291bnQgKSB7XHJcbiAgICBvbkNvbXBsZXRlKCk7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICB2YXIgZG9uZUNvdW50ID0gMDtcclxuICBmdW5jdGlvbiB0aWNrKCkge1xyXG4gICAgZG9uZUNvdW50Kys7XHJcbiAgICBpZiAoIGRvbmVDb3VudCA9PT0gY291bnQgKSB7XHJcbiAgICAgIG9uQ29tcGxldGUoKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8vIGJpbmQgY2FsbGJhY2tcclxuICBmb3IgKCB2YXIgaT0wLCBsZW4gPSBpdGVtcy5sZW5ndGg7IGkgPCBsZW47IGkrKyApIHtcclxuICAgIHZhciBpdGVtID0gaXRlbXNbaV07XHJcbiAgICBpdGVtLm9uY2UoIGV2ZW50TmFtZSwgdGljayApO1xyXG4gIH1cclxufTtcclxuXHJcbi8qKlxyXG4gKiBlbWl0cyBldmVudHMgdmlhIGV2ZW50RW1pdHRlciBhbmQgalF1ZXJ5IGV2ZW50c1xyXG4gKiBAcGFyYW0ge1N0cmluZ30gdHlwZSAtIG5hbWUgb2YgZXZlbnRcclxuICogQHBhcmFtIHtFdmVudH0gZXZlbnQgLSBvcmlnaW5hbCBldmVudFxyXG4gKiBAcGFyYW0ge0FycmF5fSBhcmdzIC0gZXh0cmEgYXJndW1lbnRzXHJcbiAqL1xyXG5PdXRsYXllci5wcm90b3R5cGUuZGlzcGF0Y2hFdmVudCA9IGZ1bmN0aW9uKCB0eXBlLCBldmVudCwgYXJncyApIHtcclxuICAvLyBhZGQgb3JpZ2luYWwgZXZlbnQgdG8gYXJndW1lbnRzXHJcbiAgdmFyIGVtaXRBcmdzID0gZXZlbnQgPyBbIGV2ZW50IF0uY29uY2F0KCBhcmdzICkgOiBhcmdzO1xyXG4gIHRoaXMuZW1pdEV2ZW50KCB0eXBlLCBlbWl0QXJncyApO1xyXG5cclxuICBpZiAoIGpRdWVyeSApIHtcclxuICAgIC8vIHNldCB0aGlzLiRlbGVtZW50XHJcbiAgICB0aGlzLiRlbGVtZW50ID0gdGhpcy4kZWxlbWVudCB8fCBqUXVlcnkoIHRoaXMuZWxlbWVudCApO1xyXG4gICAgaWYgKCBldmVudCApIHtcclxuICAgICAgLy8gY3JlYXRlIGpRdWVyeSBldmVudFxyXG4gICAgICB2YXIgJGV2ZW50ID0galF1ZXJ5LkV2ZW50KCBldmVudCApO1xyXG4gICAgICAkZXZlbnQudHlwZSA9IHR5cGU7XHJcbiAgICAgIHRoaXMuJGVsZW1lbnQudHJpZ2dlciggJGV2ZW50LCBhcmdzICk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICAvLyBqdXN0IHRyaWdnZXIgd2l0aCB0eXBlIGlmIG5vIGV2ZW50IGF2YWlsYWJsZVxyXG4gICAgICB0aGlzLiRlbGVtZW50LnRyaWdnZXIoIHR5cGUsIGFyZ3MgKTtcclxuICAgIH1cclxuICB9XHJcbn07XHJcblxyXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBpZ25vcmUgJiBzdGFtcHMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gLy9cclxuXHJcblxyXG4vKipcclxuICoga2VlcCBpdGVtIGluIGNvbGxlY3Rpb24sIGJ1dCBkbyBub3QgbGF5IGl0IG91dFxyXG4gKiBpZ25vcmVkIGl0ZW1zIGRvIG5vdCBnZXQgc2tpcHBlZCBpbiBsYXlvdXRcclxuICogQHBhcmFtIHtFbGVtZW50fSBlbGVtXHJcbiAqL1xyXG5PdXRsYXllci5wcm90b3R5cGUuaWdub3JlID0gZnVuY3Rpb24oIGVsZW0gKSB7XHJcbiAgdmFyIGl0ZW0gPSB0aGlzLmdldEl0ZW0oIGVsZW0gKTtcclxuICBpZiAoIGl0ZW0gKSB7XHJcbiAgICBpdGVtLmlzSWdub3JlZCA9IHRydWU7XHJcbiAgfVxyXG59O1xyXG5cclxuLyoqXHJcbiAqIHJldHVybiBpdGVtIHRvIGxheW91dCBjb2xsZWN0aW9uXHJcbiAqIEBwYXJhbSB7RWxlbWVudH0gZWxlbVxyXG4gKi9cclxuT3V0bGF5ZXIucHJvdG90eXBlLnVuaWdub3JlID0gZnVuY3Rpb24oIGVsZW0gKSB7XHJcbiAgdmFyIGl0ZW0gPSB0aGlzLmdldEl0ZW0oIGVsZW0gKTtcclxuICBpZiAoIGl0ZW0gKSB7XHJcbiAgICBkZWxldGUgaXRlbS5pc0lnbm9yZWQ7XHJcbiAgfVxyXG59O1xyXG5cclxuLyoqXHJcbiAqIGFkZHMgZWxlbWVudHMgdG8gc3RhbXBzXHJcbiAqIEBwYXJhbSB7Tm9kZUxpc3QsIEFycmF5LCBFbGVtZW50LCBvciBTdHJpbmd9IGVsZW1zXHJcbiAqL1xyXG5PdXRsYXllci5wcm90b3R5cGUuc3RhbXAgPSBmdW5jdGlvbiggZWxlbXMgKSB7XHJcbiAgZWxlbXMgPSB0aGlzLl9maW5kKCBlbGVtcyApO1xyXG4gIGlmICggIWVsZW1zICkge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgdGhpcy5zdGFtcHMgPSB0aGlzLnN0YW1wcy5jb25jYXQoIGVsZW1zICk7XHJcbiAgLy8gaWdub3JlXHJcbiAgZm9yICggdmFyIGk9MCwgbGVuID0gZWxlbXMubGVuZ3RoOyBpIDwgbGVuOyBpKysgKSB7XHJcbiAgICB2YXIgZWxlbSA9IGVsZW1zW2ldO1xyXG4gICAgdGhpcy5pZ25vcmUoIGVsZW0gKTtcclxuICB9XHJcbn07XHJcblxyXG4vKipcclxuICogcmVtb3ZlcyBlbGVtZW50cyB0byBzdGFtcHNcclxuICogQHBhcmFtIHtOb2RlTGlzdCwgQXJyYXksIG9yIEVsZW1lbnR9IGVsZW1zXHJcbiAqL1xyXG5PdXRsYXllci5wcm90b3R5cGUudW5zdGFtcCA9IGZ1bmN0aW9uKCBlbGVtcyApIHtcclxuICBlbGVtcyA9IHRoaXMuX2ZpbmQoIGVsZW1zICk7XHJcbiAgaWYgKCAhZWxlbXMgKXtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIGZvciAoIHZhciBpPTAsIGxlbiA9IGVsZW1zLmxlbmd0aDsgaSA8IGxlbjsgaSsrICkge1xyXG4gICAgdmFyIGVsZW0gPSBlbGVtc1tpXTtcclxuICAgIC8vIGZpbHRlciBvdXQgcmVtb3ZlZCBzdGFtcCBlbGVtZW50c1xyXG4gICAgdXRpbHMucmVtb3ZlRnJvbSggdGhpcy5zdGFtcHMsIGVsZW0gKTtcclxuICAgIHRoaXMudW5pZ25vcmUoIGVsZW0gKTtcclxuICB9XHJcblxyXG59O1xyXG5cclxuLyoqXHJcbiAqIGZpbmRzIGNoaWxkIGVsZW1lbnRzXHJcbiAqIEBwYXJhbSB7Tm9kZUxpc3QsIEFycmF5LCBFbGVtZW50LCBvciBTdHJpbmd9IGVsZW1zXHJcbiAqIEByZXR1cm5zIHtBcnJheX0gZWxlbXNcclxuICovXHJcbk91dGxheWVyLnByb3RvdHlwZS5fZmluZCA9IGZ1bmN0aW9uKCBlbGVtcyApIHtcclxuICBpZiAoICFlbGVtcyApIHtcclxuICAgIHJldHVybjtcclxuICB9XHJcbiAgLy8gaWYgc3RyaW5nLCB1c2UgYXJndW1lbnQgYXMgc2VsZWN0b3Igc3RyaW5nXHJcbiAgaWYgKCB0eXBlb2YgZWxlbXMgPT09ICdzdHJpbmcnICkge1xyXG4gICAgZWxlbXMgPSB0aGlzLmVsZW1lbnQucXVlcnlTZWxlY3RvckFsbCggZWxlbXMgKTtcclxuICB9XHJcbiAgZWxlbXMgPSB1dGlscy5tYWtlQXJyYXkoIGVsZW1zICk7XHJcbiAgcmV0dXJuIGVsZW1zO1xyXG59O1xyXG5cclxuT3V0bGF5ZXIucHJvdG90eXBlLl9tYW5hZ2VTdGFtcHMgPSBmdW5jdGlvbigpIHtcclxuICBpZiAoICF0aGlzLnN0YW1wcyB8fCAhdGhpcy5zdGFtcHMubGVuZ3RoICkge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgdGhpcy5fZ2V0Qm91bmRpbmdSZWN0KCk7XHJcblxyXG4gIGZvciAoIHZhciBpPTAsIGxlbiA9IHRoaXMuc3RhbXBzLmxlbmd0aDsgaSA8IGxlbjsgaSsrICkge1xyXG4gICAgdmFyIHN0YW1wID0gdGhpcy5zdGFtcHNbaV07XHJcbiAgICB0aGlzLl9tYW5hZ2VTdGFtcCggc3RhbXAgKTtcclxuICB9XHJcbn07XHJcblxyXG4vLyB1cGRhdGUgYm91bmRpbmdMZWZ0IC8gVG9wXHJcbk91dGxheWVyLnByb3RvdHlwZS5fZ2V0Qm91bmRpbmdSZWN0ID0gZnVuY3Rpb24oKSB7XHJcbiAgLy8gZ2V0IGJvdW5kaW5nIHJlY3QgZm9yIGNvbnRhaW5lciBlbGVtZW50XHJcbiAgdmFyIGJvdW5kaW5nUmVjdCA9IHRoaXMuZWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcclxuICB2YXIgc2l6ZSA9IHRoaXMuc2l6ZTtcclxuICB0aGlzLl9ib3VuZGluZ1JlY3QgPSB7XHJcbiAgICBsZWZ0OiBib3VuZGluZ1JlY3QubGVmdCArIHNpemUucGFkZGluZ0xlZnQgKyBzaXplLmJvcmRlckxlZnRXaWR0aCxcclxuICAgIHRvcDogYm91bmRpbmdSZWN0LnRvcCArIHNpemUucGFkZGluZ1RvcCArIHNpemUuYm9yZGVyVG9wV2lkdGgsXHJcbiAgICByaWdodDogYm91bmRpbmdSZWN0LnJpZ2h0IC0gKCBzaXplLnBhZGRpbmdSaWdodCArIHNpemUuYm9yZGVyUmlnaHRXaWR0aCApLFxyXG4gICAgYm90dG9tOiBib3VuZGluZ1JlY3QuYm90dG9tIC0gKCBzaXplLnBhZGRpbmdCb3R0b20gKyBzaXplLmJvcmRlckJvdHRvbVdpZHRoIClcclxuICB9O1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIEBwYXJhbSB7RWxlbWVudH0gc3RhbXBcclxuKiovXHJcbk91dGxheWVyLnByb3RvdHlwZS5fbWFuYWdlU3RhbXAgPSBub29wO1xyXG5cclxuLyoqXHJcbiAqIGdldCB4L3kgcG9zaXRpb24gb2YgZWxlbWVudCByZWxhdGl2ZSB0byBjb250YWluZXIgZWxlbWVudFxyXG4gKiBAcGFyYW0ge0VsZW1lbnR9IGVsZW1cclxuICogQHJldHVybnMge09iamVjdH0gb2Zmc2V0IC0gaGFzIGxlZnQsIHRvcCwgcmlnaHQsIGJvdHRvbVxyXG4gKi9cclxuT3V0bGF5ZXIucHJvdG90eXBlLl9nZXRFbGVtZW50T2Zmc2V0ID0gZnVuY3Rpb24oIGVsZW0gKSB7XHJcbiAgdmFyIGJvdW5kaW5nUmVjdCA9IGVsZW0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XHJcbiAgdmFyIHRoaXNSZWN0ID0gdGhpcy5fYm91bmRpbmdSZWN0O1xyXG4gIHZhciBzaXplID0gZ2V0U2l6ZSggZWxlbSApO1xyXG4gIHZhciBvZmZzZXQgPSB7XHJcbiAgICBsZWZ0OiBib3VuZGluZ1JlY3QubGVmdCAtIHRoaXNSZWN0LmxlZnQgLSBzaXplLm1hcmdpbkxlZnQsXHJcbiAgICB0b3A6IGJvdW5kaW5nUmVjdC50b3AgLSB0aGlzUmVjdC50b3AgLSBzaXplLm1hcmdpblRvcCxcclxuICAgIHJpZ2h0OiB0aGlzUmVjdC5yaWdodCAtIGJvdW5kaW5nUmVjdC5yaWdodCAtIHNpemUubWFyZ2luUmlnaHQsXHJcbiAgICBib3R0b206IHRoaXNSZWN0LmJvdHRvbSAtIGJvdW5kaW5nUmVjdC5ib3R0b20gLSBzaXplLm1hcmdpbkJvdHRvbVxyXG4gIH07XHJcbiAgcmV0dXJuIG9mZnNldDtcclxufTtcclxuXHJcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIHJlc2l6ZSAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAvL1xyXG5cclxuLy8gZW5hYmxlIGV2ZW50IGhhbmRsZXJzIGZvciBsaXN0ZW5lcnNcclxuLy8gaS5lLiByZXNpemUgLT4gb25yZXNpemVcclxuT3V0bGF5ZXIucHJvdG90eXBlLmhhbmRsZUV2ZW50ID0gZnVuY3Rpb24oIGV2ZW50ICkge1xyXG4gIHZhciBtZXRob2QgPSAnb24nICsgZXZlbnQudHlwZTtcclxuICBpZiAoIHRoaXNbIG1ldGhvZCBdICkge1xyXG4gICAgdGhpc1sgbWV0aG9kIF0oIGV2ZW50ICk7XHJcbiAgfVxyXG59O1xyXG5cclxuLyoqXHJcbiAqIEJpbmQgbGF5b3V0IHRvIHdpbmRvdyByZXNpemluZ1xyXG4gKi9cclxuT3V0bGF5ZXIucHJvdG90eXBlLmJpbmRSZXNpemUgPSBmdW5jdGlvbigpIHtcclxuICAvLyBiaW5kIGp1c3Qgb25lIGxpc3RlbmVyXHJcbiAgaWYgKCB0aGlzLmlzUmVzaXplQm91bmQgKSB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG4gIGV2ZW50aWUuYmluZCggd2luZG93LCAncmVzaXplJywgdGhpcyApO1xyXG4gIHRoaXMuaXNSZXNpemVCb3VuZCA9IHRydWU7XHJcbn07XHJcblxyXG4vKipcclxuICogVW5iaW5kIGxheW91dCB0byB3aW5kb3cgcmVzaXppbmdcclxuICovXHJcbk91dGxheWVyLnByb3RvdHlwZS51bmJpbmRSZXNpemUgPSBmdW5jdGlvbigpIHtcclxuICBpZiAoIHRoaXMuaXNSZXNpemVCb3VuZCApIHtcclxuICAgIGV2ZW50aWUudW5iaW5kKCB3aW5kb3csICdyZXNpemUnLCB0aGlzICk7XHJcbiAgfVxyXG4gIHRoaXMuaXNSZXNpemVCb3VuZCA9IGZhbHNlO1xyXG59O1xyXG5cclxuLy8gb3JpZ2luYWwgZGVib3VuY2UgYnkgSm9obiBIYW5uXHJcbi8vIGh0dHA6Ly91bnNjcmlwdGFibGUuY29tL2luZGV4LnBocC8yMDA5LzAzLzIwL2RlYm91bmNpbmctamF2YXNjcmlwdC1tZXRob2RzL1xyXG5cclxuLy8gdGhpcyBmaXJlcyBldmVyeSByZXNpemVcclxuT3V0bGF5ZXIucHJvdG90eXBlLm9ucmVzaXplID0gZnVuY3Rpb24oKSB7XHJcbiAgaWYgKCB0aGlzLnJlc2l6ZVRpbWVvdXQgKSB7XHJcbiAgICBjbGVhclRpbWVvdXQoIHRoaXMucmVzaXplVGltZW91dCApO1xyXG4gIH1cclxuXHJcbiAgdmFyIF90aGlzID0gdGhpcztcclxuICBmdW5jdGlvbiBkZWxheWVkKCkge1xyXG4gICAgX3RoaXMucmVzaXplKCk7XHJcbiAgICBkZWxldGUgX3RoaXMucmVzaXplVGltZW91dDtcclxuICB9XHJcblxyXG4gIHRoaXMucmVzaXplVGltZW91dCA9IHNldFRpbWVvdXQoIGRlbGF5ZWQsIDEwMCApO1xyXG59O1xyXG5cclxuLy8gZGVib3VuY2VkLCBsYXlvdXQgb24gcmVzaXplXHJcbk91dGxheWVyLnByb3RvdHlwZS5yZXNpemUgPSBmdW5jdGlvbigpIHtcclxuICAvLyBkb24ndCB0cmlnZ2VyIGlmIHNpemUgZGlkIG5vdCBjaGFuZ2VcclxuICAvLyBvciBpZiByZXNpemUgd2FzIHVuYm91bmQuIFNlZSAjOVxyXG4gIGlmICggIXRoaXMuaXNSZXNpemVCb3VuZCB8fCAhdGhpcy5uZWVkc1Jlc2l6ZUxheW91dCgpICkge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgdGhpcy5sYXlvdXQoKTtcclxufTtcclxuXHJcbi8qKlxyXG4gKiBjaGVjayBpZiBsYXlvdXQgaXMgbmVlZGVkIHBvc3QgbGF5b3V0XHJcbiAqIEByZXR1cm5zIEJvb2xlYW5cclxuICovXHJcbk91dGxheWVyLnByb3RvdHlwZS5uZWVkc1Jlc2l6ZUxheW91dCA9IGZ1bmN0aW9uKCkge1xyXG4gIHZhciBzaXplID0gZ2V0U2l6ZSggdGhpcy5lbGVtZW50ICk7XHJcbiAgLy8gY2hlY2sgdGhhdCB0aGlzLnNpemUgYW5kIHNpemUgYXJlIHRoZXJlXHJcbiAgLy8gSUU4IHRyaWdnZXJzIHJlc2l6ZSBvbiBib2R5IHNpemUgY2hhbmdlLCBzbyB0aGV5IG1pZ2h0IG5vdCBiZVxyXG4gIHZhciBoYXNTaXplcyA9IHRoaXMuc2l6ZSAmJiBzaXplO1xyXG4gIHJldHVybiBoYXNTaXplcyAmJiBzaXplLmlubmVyV2lkdGggIT09IHRoaXMuc2l6ZS5pbm5lcldpZHRoO1xyXG59O1xyXG5cclxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gbWV0aG9kcyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAvL1xyXG5cclxuLyoqXHJcbiAqIGFkZCBpdGVtcyB0byBPdXRsYXllciBpbnN0YW5jZVxyXG4gKiBAcGFyYW0ge0FycmF5IG9yIE5vZGVMaXN0IG9yIEVsZW1lbnR9IGVsZW1zXHJcbiAqIEByZXR1cm5zIHtBcnJheX0gaXRlbXMgLSBPdXRsYXllci5JdGVtc1xyXG4qKi9cclxuT3V0bGF5ZXIucHJvdG90eXBlLmFkZEl0ZW1zID0gZnVuY3Rpb24oIGVsZW1zICkge1xyXG4gIHZhciBpdGVtcyA9IHRoaXMuX2l0ZW1pemUoIGVsZW1zICk7XHJcbiAgLy8gYWRkIGl0ZW1zIHRvIGNvbGxlY3Rpb25cclxuICBpZiAoIGl0ZW1zLmxlbmd0aCApIHtcclxuICAgIHRoaXMuaXRlbXMgPSB0aGlzLml0ZW1zLmNvbmNhdCggaXRlbXMgKTtcclxuICB9XHJcbiAgcmV0dXJuIGl0ZW1zO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIExheW91dCBuZXdseS1hcHBlbmRlZCBpdGVtIGVsZW1lbnRzXHJcbiAqIEBwYXJhbSB7QXJyYXkgb3IgTm9kZUxpc3Qgb3IgRWxlbWVudH0gZWxlbXNcclxuICovXHJcbk91dGxheWVyLnByb3RvdHlwZS5hcHBlbmRlZCA9IGZ1bmN0aW9uKCBlbGVtcyApIHtcclxuICB2YXIgaXRlbXMgPSB0aGlzLmFkZEl0ZW1zKCBlbGVtcyApO1xyXG4gIGlmICggIWl0ZW1zLmxlbmd0aCApIHtcclxuICAgIHJldHVybjtcclxuICB9XHJcbiAgLy8gbGF5b3V0IGFuZCByZXZlYWwganVzdCB0aGUgbmV3IGl0ZW1zXHJcbiAgdGhpcy5sYXlvdXRJdGVtcyggaXRlbXMsIHRydWUgKTtcclxuICB0aGlzLnJldmVhbCggaXRlbXMgKTtcclxufTtcclxuXHJcbi8qKlxyXG4gKiBMYXlvdXQgcHJlcGVuZGVkIGVsZW1lbnRzXHJcbiAqIEBwYXJhbSB7QXJyYXkgb3IgTm9kZUxpc3Qgb3IgRWxlbWVudH0gZWxlbXNcclxuICovXHJcbk91dGxheWVyLnByb3RvdHlwZS5wcmVwZW5kZWQgPSBmdW5jdGlvbiggZWxlbXMgKSB7XHJcbiAgdmFyIGl0ZW1zID0gdGhpcy5faXRlbWl6ZSggZWxlbXMgKTtcclxuICBpZiAoICFpdGVtcy5sZW5ndGggKSB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG4gIC8vIGFkZCBpdGVtcyB0byBiZWdpbm5pbmcgb2YgY29sbGVjdGlvblxyXG4gIHZhciBwcmV2aW91c0l0ZW1zID0gdGhpcy5pdGVtcy5zbGljZSgwKTtcclxuICB0aGlzLml0ZW1zID0gaXRlbXMuY29uY2F0KCBwcmV2aW91c0l0ZW1zICk7XHJcbiAgLy8gc3RhcnQgbmV3IGxheW91dFxyXG4gIHRoaXMuX3Jlc2V0TGF5b3V0KCk7XHJcbiAgdGhpcy5fbWFuYWdlU3RhbXBzKCk7XHJcbiAgLy8gbGF5b3V0IG5ldyBzdHVmZiB3aXRob3V0IHRyYW5zaXRpb25cclxuICB0aGlzLmxheW91dEl0ZW1zKCBpdGVtcywgdHJ1ZSApO1xyXG4gIHRoaXMucmV2ZWFsKCBpdGVtcyApO1xyXG4gIC8vIGxheW91dCBwcmV2aW91cyBpdGVtc1xyXG4gIHRoaXMubGF5b3V0SXRlbXMoIHByZXZpb3VzSXRlbXMgKTtcclxufTtcclxuXHJcbi8qKlxyXG4gKiByZXZlYWwgYSBjb2xsZWN0aW9uIG9mIGl0ZW1zXHJcbiAqIEBwYXJhbSB7QXJyYXkgb2YgT3V0bGF5ZXIuSXRlbXN9IGl0ZW1zXHJcbiAqL1xyXG5PdXRsYXllci5wcm90b3R5cGUucmV2ZWFsID0gZnVuY3Rpb24oIGl0ZW1zICkge1xyXG4gIHRoaXMuX2VtaXRDb21wbGV0ZU9uSXRlbXMoICdyZXZlYWwnLCBpdGVtcyApO1xyXG5cclxuICB2YXIgbGVuID0gaXRlbXMgJiYgaXRlbXMubGVuZ3RoO1xyXG4gIGZvciAoIHZhciBpPTA7IGxlbiAmJiBpIDwgbGVuOyBpKysgKSB7XHJcbiAgICB2YXIgaXRlbSA9IGl0ZW1zW2ldO1xyXG4gICAgaXRlbS5yZXZlYWwoKTtcclxuICB9XHJcbn07XHJcblxyXG4vKipcclxuICogaGlkZSBhIGNvbGxlY3Rpb24gb2YgaXRlbXNcclxuICogQHBhcmFtIHtBcnJheSBvZiBPdXRsYXllci5JdGVtc30gaXRlbXNcclxuICovXHJcbk91dGxheWVyLnByb3RvdHlwZS5oaWRlID0gZnVuY3Rpb24oIGl0ZW1zICkge1xyXG4gIHRoaXMuX2VtaXRDb21wbGV0ZU9uSXRlbXMoICdoaWRlJywgaXRlbXMgKTtcclxuXHJcbiAgdmFyIGxlbiA9IGl0ZW1zICYmIGl0ZW1zLmxlbmd0aDtcclxuICBmb3IgKCB2YXIgaT0wOyBsZW4gJiYgaSA8IGxlbjsgaSsrICkge1xyXG4gICAgdmFyIGl0ZW0gPSBpdGVtc1tpXTtcclxuICAgIGl0ZW0uaGlkZSgpO1xyXG4gIH1cclxufTtcclxuXHJcbi8qKlxyXG4gKiByZXZlYWwgaXRlbSBlbGVtZW50c1xyXG4gKiBAcGFyYW0ge0FycmF5fSwge0VsZW1lbnR9LCB7Tm9kZUxpc3R9IGl0ZW1zXHJcbiAqL1xyXG5PdXRsYXllci5wcm90b3R5cGUucmV2ZWFsSXRlbUVsZW1lbnRzID0gZnVuY3Rpb24oIGVsZW1zICkge1xyXG4gIHZhciBpdGVtcyA9IHRoaXMuZ2V0SXRlbXMoIGVsZW1zICk7XHJcbiAgdGhpcy5yZXZlYWwoIGl0ZW1zICk7XHJcbn07XHJcblxyXG4vKipcclxuICogaGlkZSBpdGVtIGVsZW1lbnRzXHJcbiAqIEBwYXJhbSB7QXJyYXl9LCB7RWxlbWVudH0sIHtOb2RlTGlzdH0gaXRlbXNcclxuICovXHJcbk91dGxheWVyLnByb3RvdHlwZS5oaWRlSXRlbUVsZW1lbnRzID0gZnVuY3Rpb24oIGVsZW1zICkge1xyXG4gIHZhciBpdGVtcyA9IHRoaXMuZ2V0SXRlbXMoIGVsZW1zICk7XHJcbiAgdGhpcy5oaWRlKCBpdGVtcyApO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIGdldCBPdXRsYXllci5JdGVtLCBnaXZlbiBhbiBFbGVtZW50XHJcbiAqIEBwYXJhbSB7RWxlbWVudH0gZWxlbVxyXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFja1xyXG4gKiBAcmV0dXJucyB7T3V0bGF5ZXIuSXRlbX0gaXRlbVxyXG4gKi9cclxuT3V0bGF5ZXIucHJvdG90eXBlLmdldEl0ZW0gPSBmdW5jdGlvbiggZWxlbSApIHtcclxuICAvLyBsb29wIHRocm91Z2ggaXRlbXMgdG8gZ2V0IHRoZSBvbmUgdGhhdCBtYXRjaGVzXHJcbiAgZm9yICggdmFyIGk9MCwgbGVuID0gdGhpcy5pdGVtcy5sZW5ndGg7IGkgPCBsZW47IGkrKyApIHtcclxuICAgIHZhciBpdGVtID0gdGhpcy5pdGVtc1tpXTtcclxuICAgIGlmICggaXRlbS5lbGVtZW50ID09PSBlbGVtICkge1xyXG4gICAgICAvLyByZXR1cm4gaXRlbVxyXG4gICAgICByZXR1cm4gaXRlbTtcclxuICAgIH1cclxuICB9XHJcbn07XHJcblxyXG4vKipcclxuICogZ2V0IGNvbGxlY3Rpb24gb2YgT3V0bGF5ZXIuSXRlbXMsIGdpdmVuIEVsZW1lbnRzXHJcbiAqIEBwYXJhbSB7QXJyYXl9IGVsZW1zXHJcbiAqIEByZXR1cm5zIHtBcnJheX0gaXRlbXMgLSBPdXRsYXllci5JdGVtc1xyXG4gKi9cclxuT3V0bGF5ZXIucHJvdG90eXBlLmdldEl0ZW1zID0gZnVuY3Rpb24oIGVsZW1zICkge1xyXG4gIGVsZW1zID0gdXRpbHMubWFrZUFycmF5KCBlbGVtcyApO1xyXG4gIHZhciBpdGVtcyA9IFtdO1xyXG4gIGZvciAoIHZhciBpPTAsIGxlbiA9IGVsZW1zLmxlbmd0aDsgaSA8IGxlbjsgaSsrICkge1xyXG4gICAgdmFyIGVsZW0gPSBlbGVtc1tpXTtcclxuICAgIHZhciBpdGVtID0gdGhpcy5nZXRJdGVtKCBlbGVtICk7XHJcbiAgICBpZiAoIGl0ZW0gKSB7XHJcbiAgICAgIGl0ZW1zLnB1c2goIGl0ZW0gKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHJldHVybiBpdGVtcztcclxufTtcclxuXHJcbi8qKlxyXG4gKiByZW1vdmUgZWxlbWVudChzKSBmcm9tIGluc3RhbmNlIGFuZCBET01cclxuICogQHBhcmFtIHtBcnJheSBvciBOb2RlTGlzdCBvciBFbGVtZW50fSBlbGVtc1xyXG4gKi9cclxuT3V0bGF5ZXIucHJvdG90eXBlLnJlbW92ZSA9IGZ1bmN0aW9uKCBlbGVtcyApIHtcclxuICB2YXIgcmVtb3ZlSXRlbXMgPSB0aGlzLmdldEl0ZW1zKCBlbGVtcyApO1xyXG5cclxuICB0aGlzLl9lbWl0Q29tcGxldGVPbkl0ZW1zKCAncmVtb3ZlJywgcmVtb3ZlSXRlbXMgKTtcclxuXHJcbiAgLy8gYmFpbCBpZiBubyBpdGVtcyB0byByZW1vdmVcclxuICBpZiAoICFyZW1vdmVJdGVtcyB8fCAhcmVtb3ZlSXRlbXMubGVuZ3RoICkge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgZm9yICggdmFyIGk9MCwgbGVuID0gcmVtb3ZlSXRlbXMubGVuZ3RoOyBpIDwgbGVuOyBpKysgKSB7XHJcbiAgICB2YXIgaXRlbSA9IHJlbW92ZUl0ZW1zW2ldO1xyXG4gICAgaXRlbS5yZW1vdmUoKTtcclxuICAgIC8vIHJlbW92ZSBpdGVtIGZyb20gY29sbGVjdGlvblxyXG4gICAgdXRpbHMucmVtb3ZlRnJvbSggdGhpcy5pdGVtcywgaXRlbSApO1xyXG4gIH1cclxufTtcclxuXHJcbi8vIC0tLS0tIGRlc3Ryb3kgLS0tLS0gLy9cclxuXHJcbi8vIHJlbW92ZSBhbmQgZGlzYWJsZSBPdXRsYXllciBpbnN0YW5jZVxyXG5PdXRsYXllci5wcm90b3R5cGUuZGVzdHJveSA9IGZ1bmN0aW9uKCkge1xyXG4gIC8vIGNsZWFuIHVwIGR5bmFtaWMgc3R5bGVzXHJcbiAgdmFyIHN0eWxlID0gdGhpcy5lbGVtZW50LnN0eWxlO1xyXG4gIHN0eWxlLmhlaWdodCA9ICcnO1xyXG4gIHN0eWxlLnBvc2l0aW9uID0gJyc7XHJcbiAgc3R5bGUud2lkdGggPSAnJztcclxuICAvLyBkZXN0cm95IGl0ZW1zXHJcbiAgZm9yICggdmFyIGk9MCwgbGVuID0gdGhpcy5pdGVtcy5sZW5ndGg7IGkgPCBsZW47IGkrKyApIHtcclxuICAgIHZhciBpdGVtID0gdGhpcy5pdGVtc1tpXTtcclxuICAgIGl0ZW0uZGVzdHJveSgpO1xyXG4gIH1cclxuXHJcbiAgdGhpcy51bmJpbmRSZXNpemUoKTtcclxuXHJcbiAgdmFyIGlkID0gdGhpcy5lbGVtZW50Lm91dGxheWVyR1VJRDtcclxuICBkZWxldGUgaW5zdGFuY2VzWyBpZCBdOyAvLyByZW1vdmUgcmVmZXJlbmNlIHRvIGluc3RhbmNlIGJ5IGlkXHJcbiAgZGVsZXRlIHRoaXMuZWxlbWVudC5vdXRsYXllckdVSUQ7XHJcbiAgLy8gcmVtb3ZlIGRhdGEgZm9yIGpRdWVyeVxyXG4gIGlmICggalF1ZXJ5ICkge1xyXG4gICAgalF1ZXJ5LnJlbW92ZURhdGEoIHRoaXMuZWxlbWVudCwgdGhpcy5jb25zdHJ1Y3Rvci5uYW1lc3BhY2UgKTtcclxuICB9XHJcblxyXG59O1xyXG5cclxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gZGF0YSAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAvL1xyXG5cclxuLyoqXHJcbiAqIGdldCBPdXRsYXllciBpbnN0YW5jZSBmcm9tIGVsZW1lbnRcclxuICogQHBhcmFtIHtFbGVtZW50fSBlbGVtXHJcbiAqIEByZXR1cm5zIHtPdXRsYXllcn1cclxuICovXHJcbk91dGxheWVyLmRhdGEgPSBmdW5jdGlvbiggZWxlbSApIHtcclxuICBlbGVtID0gdXRpbHMuZ2V0UXVlcnlFbGVtZW50KCBlbGVtICk7XHJcbiAgdmFyIGlkID0gZWxlbSAmJiBlbGVtLm91dGxheWVyR1VJRDtcclxuICByZXR1cm4gaWQgJiYgaW5zdGFuY2VzWyBpZCBdO1xyXG59O1xyXG5cclxuXHJcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIGNyZWF0ZSBPdXRsYXllciBjbGFzcyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAvL1xyXG5cclxuLyoqXHJcbiAqIGNyZWF0ZSBhIGxheW91dCBjbGFzc1xyXG4gKiBAcGFyYW0ge1N0cmluZ30gbmFtZXNwYWNlXHJcbiAqL1xyXG5PdXRsYXllci5jcmVhdGUgPSBmdW5jdGlvbiggbmFtZXNwYWNlLCBvcHRpb25zICkge1xyXG4gIC8vIHN1Yi1jbGFzcyBPdXRsYXllclxyXG4gIGZ1bmN0aW9uIExheW91dCgpIHtcclxuICAgIE91dGxheWVyLmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKTtcclxuICB9XHJcbiAgLy8gaW5oZXJpdCBPdXRsYXllciBwcm90b3R5cGUsIHVzZSBPYmplY3QuY3JlYXRlIGlmIHRoZXJlXHJcbiAgaWYgKCBPYmplY3QuY3JlYXRlICkge1xyXG4gICAgTGF5b3V0LnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoIE91dGxheWVyLnByb3RvdHlwZSApO1xyXG4gIH0gZWxzZSB7XHJcbiAgICB1dGlscy5leHRlbmQoIExheW91dC5wcm90b3R5cGUsIE91dGxheWVyLnByb3RvdHlwZSApO1xyXG4gIH1cclxuICAvLyBzZXQgY29udHJ1Y3RvciwgdXNlZCBmb3IgbmFtZXNwYWNlIGFuZCBJdGVtXHJcbiAgTGF5b3V0LnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IExheW91dDtcclxuXHJcbiAgTGF5b3V0LmRlZmF1bHRzID0gdXRpbHMuZXh0ZW5kKCB7fSwgT3V0bGF5ZXIuZGVmYXVsdHMgKTtcclxuICAvLyBhcHBseSBuZXcgb3B0aW9uc1xyXG4gIHV0aWxzLmV4dGVuZCggTGF5b3V0LmRlZmF1bHRzLCBvcHRpb25zICk7XHJcbiAgLy8ga2VlcCBwcm90b3R5cGUuc2V0dGluZ3MgZm9yIGJhY2t3YXJkcyBjb21wYXRpYmlsaXR5IChQYWNrZXJ5IHYxLjIuMClcclxuICBMYXlvdXQucHJvdG90eXBlLnNldHRpbmdzID0ge307XHJcblxyXG4gIExheW91dC5uYW1lc3BhY2UgPSBuYW1lc3BhY2U7XHJcblxyXG4gIExheW91dC5kYXRhID0gT3V0bGF5ZXIuZGF0YTtcclxuXHJcbiAgLy8gc3ViLWNsYXNzIEl0ZW1cclxuICBMYXlvdXQuSXRlbSA9IGZ1bmN0aW9uIExheW91dEl0ZW0oKSB7XHJcbiAgICBJdGVtLmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKTtcclxuICB9O1xyXG5cclxuICBMYXlvdXQuSXRlbS5wcm90b3R5cGUgPSBuZXcgSXRlbSgpO1xyXG5cclxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBkZWNsYXJhdGl2ZSAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAvL1xyXG5cclxuICB1dGlscy5odG1sSW5pdCggTGF5b3V0LCBuYW1lc3BhY2UgKTtcclxuXHJcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0galF1ZXJ5IGJyaWRnZSAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAvL1xyXG5cclxuICAvLyBtYWtlIGludG8galF1ZXJ5IHBsdWdpblxyXG4gIGlmICggalF1ZXJ5ICYmIGpRdWVyeS5icmlkZ2V0ICkge1xyXG4gICAgalF1ZXJ5LmJyaWRnZXQoIG5hbWVzcGFjZSwgTGF5b3V0ICk7XHJcbiAgfVxyXG5cclxuICByZXR1cm4gTGF5b3V0O1xyXG59O1xyXG5cclxuLy8gLS0tLS0gZmluIC0tLS0tIC8vXHJcblxyXG4vLyBiYWNrIGluIGdsb2JhbFxyXG5PdXRsYXllci5JdGVtID0gSXRlbTtcclxuXHJcbnJldHVybiBPdXRsYXllcjtcclxuXHJcbn0pKTtcclxuXHJcblxyXG4vKipcclxuICogSXNvdG9wZSBJdGVtXHJcbioqL1xyXG5cclxuKCBmdW5jdGlvbiggd2luZG93LCBmYWN0b3J5ICkge1xyXG4ndXNlIHN0cmljdCc7XHJcbiAgLy8gdW5pdmVyc2FsIG1vZHVsZSBkZWZpbml0aW9uXHJcbiAgaWYgKCB0eXBlb2YgZGVmaW5lID09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCApIHtcclxuICAgIC8vIEFNRFxyXG4gICAgZGVmaW5lKCAnaXNvdG9wZS9qcy9pdGVtJyxbXHJcbiAgICAgICAgJ291dGxheWVyL291dGxheWVyJ1xyXG4gICAgICBdLFxyXG4gICAgICBmYWN0b3J5ICk7XHJcbiAgfSBlbHNlIGlmICggdHlwZW9mIGV4cG9ydHMgPT0gJ29iamVjdCcgKSB7XHJcbiAgICAvLyBDb21tb25KU1xyXG4gICAgbW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KFxyXG4gICAgICByZXF1aXJlKCdvdXRsYXllcicpXHJcbiAgICApO1xyXG4gIH0gZWxzZSB7XHJcbiAgICAvLyBicm93c2VyIGdsb2JhbFxyXG4gICAgd2luZG93Lklzb3RvcGUgPSB3aW5kb3cuSXNvdG9wZSB8fCB7fTtcclxuICAgIHdpbmRvdy5Jc290b3BlLkl0ZW0gPSBmYWN0b3J5KFxyXG4gICAgICB3aW5kb3cuT3V0bGF5ZXJcclxuICAgICk7XHJcbiAgfVxyXG5cclxufSggd2luZG93LCBmdW5jdGlvbiBmYWN0b3J5KCBPdXRsYXllciApIHtcclxuJ3VzZSBzdHJpY3QnO1xyXG5cclxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gSXRlbSAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAvL1xyXG5cclxuLy8gc3ViLWNsYXNzIE91dGxheWVyIEl0ZW1cclxuZnVuY3Rpb24gSXRlbSgpIHtcclxuICBPdXRsYXllci5JdGVtLmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKTtcclxufVxyXG5cclxuSXRlbS5wcm90b3R5cGUgPSBuZXcgT3V0bGF5ZXIuSXRlbSgpO1xyXG5cclxuSXRlbS5wcm90b3R5cGUuX2NyZWF0ZSA9IGZ1bmN0aW9uKCkge1xyXG4gIC8vIGFzc2lnbiBpZCwgdXNlZCBmb3Igb3JpZ2luYWwtb3JkZXIgc29ydGluZ1xyXG4gIHRoaXMuaWQgPSB0aGlzLmxheW91dC5pdGVtR1VJRCsrO1xyXG4gIE91dGxheWVyLkl0ZW0ucHJvdG90eXBlLl9jcmVhdGUuY2FsbCggdGhpcyApO1xyXG4gIHRoaXMuc29ydERhdGEgPSB7fTtcclxufTtcclxuXHJcbkl0ZW0ucHJvdG90eXBlLnVwZGF0ZVNvcnREYXRhID0gZnVuY3Rpb24oKSB7XHJcbiAgaWYgKCB0aGlzLmlzSWdub3JlZCApIHtcclxuICAgIHJldHVybjtcclxuICB9XHJcbiAgLy8gZGVmYXVsdCBzb3J0ZXJzXHJcbiAgdGhpcy5zb3J0RGF0YS5pZCA9IHRoaXMuaWQ7XHJcbiAgLy8gZm9yIGJhY2t3YXJkIGNvbXBhdGliaWxpdHlcclxuICB0aGlzLnNvcnREYXRhWydvcmlnaW5hbC1vcmRlciddID0gdGhpcy5pZDtcclxuICB0aGlzLnNvcnREYXRhLnJhbmRvbSA9IE1hdGgucmFuZG9tKCk7XHJcbiAgLy8gZ28gdGhydSBnZXRTb3J0RGF0YSBvYmogYW5kIGFwcGx5IHRoZSBzb3J0ZXJzXHJcbiAgdmFyIGdldFNvcnREYXRhID0gdGhpcy5sYXlvdXQub3B0aW9ucy5nZXRTb3J0RGF0YTtcclxuICB2YXIgc29ydGVycyA9IHRoaXMubGF5b3V0Ll9zb3J0ZXJzO1xyXG4gIGZvciAoIHZhciBrZXkgaW4gZ2V0U29ydERhdGEgKSB7XHJcbiAgICB2YXIgc29ydGVyID0gc29ydGVyc1sga2V5IF07XHJcbiAgICB0aGlzLnNvcnREYXRhWyBrZXkgXSA9IHNvcnRlciggdGhpcy5lbGVtZW50LCB0aGlzICk7XHJcbiAgfVxyXG59O1xyXG5cclxudmFyIF9kZXN0cm95ID0gSXRlbS5wcm90b3R5cGUuZGVzdHJveTtcclxuSXRlbS5wcm90b3R5cGUuZGVzdHJveSA9IGZ1bmN0aW9uKCkge1xyXG4gIC8vIGNhbGwgc3VwZXJcclxuICBfZGVzdHJveS5hcHBseSggdGhpcywgYXJndW1lbnRzICk7XHJcbiAgLy8gcmVzZXQgZGlzcGxheSwgIzc0MVxyXG4gIHRoaXMuY3NzKHtcclxuICAgIGRpc3BsYXk6ICcnXHJcbiAgfSk7XHJcbn07XHJcblxyXG5yZXR1cm4gSXRlbTtcclxuXHJcbn0pKTtcclxuXHJcbi8qKlxyXG4gKiBJc290b3BlIExheW91dE1vZGVcclxuICovXHJcblxyXG4oIGZ1bmN0aW9uKCB3aW5kb3csIGZhY3RvcnkgKSB7XHJcbiAgJ3VzZSBzdHJpY3QnO1xyXG4gIC8vIHVuaXZlcnNhbCBtb2R1bGUgZGVmaW5pdGlvblxyXG5cclxuICBpZiAoIHR5cGVvZiBkZWZpbmUgPT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kICkge1xyXG4gICAgLy8gQU1EXHJcbiAgICBkZWZpbmUoICdpc290b3BlL2pzL2xheW91dC1tb2RlJyxbXHJcbiAgICAgICAgJ2dldC1zaXplL2dldC1zaXplJyxcclxuICAgICAgICAnb3V0bGF5ZXIvb3V0bGF5ZXInXHJcbiAgICAgIF0sXHJcbiAgICAgIGZhY3RvcnkgKTtcclxuICB9IGVsc2UgaWYgKCB0eXBlb2YgZXhwb3J0cyA9PSAnb2JqZWN0JyApIHtcclxuICAgIC8vIENvbW1vbkpTXHJcbiAgICBtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkoXHJcbiAgICAgIHJlcXVpcmUoJ2dldC1zaXplJyksXHJcbiAgICAgIHJlcXVpcmUoJ291dGxheWVyJylcclxuICAgICk7XHJcbiAgfSBlbHNlIHtcclxuICAgIC8vIGJyb3dzZXIgZ2xvYmFsXHJcbiAgICB3aW5kb3cuSXNvdG9wZSA9IHdpbmRvdy5Jc290b3BlIHx8IHt9O1xyXG4gICAgd2luZG93Lklzb3RvcGUuTGF5b3V0TW9kZSA9IGZhY3RvcnkoXHJcbiAgICAgIHdpbmRvdy5nZXRTaXplLFxyXG4gICAgICB3aW5kb3cuT3V0bGF5ZXJcclxuICAgICk7XHJcbiAgfVxyXG5cclxufSggd2luZG93LCBmdW5jdGlvbiBmYWN0b3J5KCBnZXRTaXplLCBPdXRsYXllciApIHtcclxuICAndXNlIHN0cmljdCc7XHJcblxyXG4gIC8vIGxheW91dCBtb2RlIGNsYXNzXHJcbiAgZnVuY3Rpb24gTGF5b3V0TW9kZSggaXNvdG9wZSApIHtcclxuICAgIHRoaXMuaXNvdG9wZSA9IGlzb3RvcGU7XHJcbiAgICAvLyBsaW5rIHByb3BlcnRpZXNcclxuICAgIGlmICggaXNvdG9wZSApIHtcclxuICAgICAgdGhpcy5vcHRpb25zID0gaXNvdG9wZS5vcHRpb25zWyB0aGlzLm5hbWVzcGFjZSBdO1xyXG4gICAgICB0aGlzLmVsZW1lbnQgPSBpc290b3BlLmVsZW1lbnQ7XHJcbiAgICAgIHRoaXMuaXRlbXMgPSBpc290b3BlLmZpbHRlcmVkSXRlbXM7XHJcbiAgICAgIHRoaXMuc2l6ZSA9IGlzb3RvcGUuc2l6ZTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIHNvbWUgbWV0aG9kcyBzaG91bGQganVzdCBkZWZlciB0byBkZWZhdWx0IE91dGxheWVyIG1ldGhvZFxyXG4gICAqIGFuZCByZWZlcmVuY2UgdGhlIElzb3RvcGUgaW5zdGFuY2UgYXMgYHRoaXNgXHJcbiAgKiovXHJcbiAgKCBmdW5jdGlvbigpIHtcclxuICAgIHZhciBmYWNhZGVNZXRob2RzID0gW1xyXG4gICAgICAnX3Jlc2V0TGF5b3V0JyxcclxuICAgICAgJ19nZXRJdGVtTGF5b3V0UG9zaXRpb24nLFxyXG4gICAgICAnX21hbmFnZVN0YW1wJyxcclxuICAgICAgJ19nZXRDb250YWluZXJTaXplJyxcclxuICAgICAgJ19nZXRFbGVtZW50T2Zmc2V0JyxcclxuICAgICAgJ25lZWRzUmVzaXplTGF5b3V0J1xyXG4gICAgXTtcclxuXHJcbiAgICBmb3IgKCB2YXIgaT0wLCBsZW4gPSBmYWNhZGVNZXRob2RzLmxlbmd0aDsgaSA8IGxlbjsgaSsrICkge1xyXG4gICAgICB2YXIgbWV0aG9kTmFtZSA9IGZhY2FkZU1ldGhvZHNbaV07XHJcbiAgICAgIExheW91dE1vZGUucHJvdG90eXBlWyBtZXRob2ROYW1lIF0gPSBnZXRPdXRsYXllck1ldGhvZCggbWV0aG9kTmFtZSApO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIGdldE91dGxheWVyTWV0aG9kKCBtZXRob2ROYW1lICkge1xyXG4gICAgICByZXR1cm4gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgcmV0dXJuIE91dGxheWVyLnByb3RvdHlwZVsgbWV0aG9kTmFtZSBdLmFwcGx5KCB0aGlzLmlzb3RvcGUsIGFyZ3VtZW50cyApO1xyXG4gICAgICB9O1xyXG4gICAgfVxyXG4gIH0pKCk7XHJcblxyXG4gIC8vIC0tLS0tICAtLS0tLSAvL1xyXG5cclxuICAvLyBmb3IgaG9yaXpvbnRhbCBsYXlvdXQgbW9kZXMsIGNoZWNrIHZlcnRpY2FsIHNpemVcclxuICBMYXlvdXRNb2RlLnByb3RvdHlwZS5uZWVkc1ZlcnRpY2FsUmVzaXplTGF5b3V0ID0gZnVuY3Rpb24oKSB7XHJcbiAgICAvLyBkb24ndCB0cmlnZ2VyIGlmIHNpemUgZGlkIG5vdCBjaGFuZ2VcclxuICAgIHZhciBzaXplID0gZ2V0U2l6ZSggdGhpcy5pc290b3BlLmVsZW1lbnQgKTtcclxuICAgIC8vIGNoZWNrIHRoYXQgdGhpcy5zaXplIGFuZCBzaXplIGFyZSB0aGVyZVxyXG4gICAgLy8gSUU4IHRyaWdnZXJzIHJlc2l6ZSBvbiBib2R5IHNpemUgY2hhbmdlLCBzbyB0aGV5IG1pZ2h0IG5vdCBiZVxyXG4gICAgdmFyIGhhc1NpemVzID0gdGhpcy5pc290b3BlLnNpemUgJiYgc2l6ZTtcclxuICAgIHJldHVybiBoYXNTaXplcyAmJiBzaXplLmlubmVySGVpZ2h0ICE9IHRoaXMuaXNvdG9wZS5zaXplLmlubmVySGVpZ2h0O1xyXG4gIH07XHJcblxyXG4gIC8vIC0tLS0tIG1lYXN1cmVtZW50cyAtLS0tLSAvL1xyXG5cclxuICBMYXlvdXRNb2RlLnByb3RvdHlwZS5fZ2V0TWVhc3VyZW1lbnQgPSBmdW5jdGlvbigpIHtcclxuICAgIHRoaXMuaXNvdG9wZS5fZ2V0TWVhc3VyZW1lbnQuYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApO1xyXG4gIH07XHJcblxyXG4gIExheW91dE1vZGUucHJvdG90eXBlLmdldENvbHVtbldpZHRoID0gZnVuY3Rpb24oKSB7XHJcbiAgICB0aGlzLmdldFNlZ21lbnRTaXplKCAnY29sdW1uJywgJ1dpZHRoJyApO1xyXG4gIH07XHJcblxyXG4gIExheW91dE1vZGUucHJvdG90eXBlLmdldFJvd0hlaWdodCA9IGZ1bmN0aW9uKCkge1xyXG4gICAgdGhpcy5nZXRTZWdtZW50U2l6ZSggJ3JvdycsICdIZWlnaHQnICk7XHJcbiAgfTtcclxuXHJcbiAgLyoqXHJcbiAgICogZ2V0IGNvbHVtbldpZHRoIG9yIHJvd0hlaWdodFxyXG4gICAqIHNlZ21lbnQ6ICdjb2x1bW4nIG9yICdyb3cnXHJcbiAgICogc2l6ZSAnV2lkdGgnIG9yICdIZWlnaHQnXHJcbiAgKiovXHJcbiAgTGF5b3V0TW9kZS5wcm90b3R5cGUuZ2V0U2VnbWVudFNpemUgPSBmdW5jdGlvbiggc2VnbWVudCwgc2l6ZSApIHtcclxuICAgIHZhciBzZWdtZW50TmFtZSA9IHNlZ21lbnQgKyBzaXplO1xyXG4gICAgdmFyIG91dGVyU2l6ZSA9ICdvdXRlcicgKyBzaXplO1xyXG4gICAgLy8gY29sdW1uV2lkdGggLyBvdXRlcldpZHRoIC8vIHJvd0hlaWdodCAvIG91dGVySGVpZ2h0XHJcbiAgICB0aGlzLl9nZXRNZWFzdXJlbWVudCggc2VnbWVudE5hbWUsIG91dGVyU2l6ZSApO1xyXG4gICAgLy8gZ290IHJvd0hlaWdodCBvciBjb2x1bW5XaWR0aCwgd2UgY2FuIGNoaWxsXHJcbiAgICBpZiAoIHRoaXNbIHNlZ21lbnROYW1lIF0gKSB7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIC8vIGZhbGwgYmFjayB0byBpdGVtIG9mIGZpcnN0IGVsZW1lbnRcclxuICAgIHZhciBmaXJzdEl0ZW1TaXplID0gdGhpcy5nZXRGaXJzdEl0ZW1TaXplKCk7XHJcbiAgICB0aGlzWyBzZWdtZW50TmFtZSBdID0gZmlyc3RJdGVtU2l6ZSAmJiBmaXJzdEl0ZW1TaXplWyBvdXRlclNpemUgXSB8fFxyXG4gICAgICAvLyBvciBzaXplIG9mIGNvbnRhaW5lclxyXG4gICAgICB0aGlzLmlzb3RvcGUuc2l6ZVsgJ2lubmVyJyArIHNpemUgXTtcclxuICB9O1xyXG5cclxuICBMYXlvdXRNb2RlLnByb3RvdHlwZS5nZXRGaXJzdEl0ZW1TaXplID0gZnVuY3Rpb24oKSB7XHJcbiAgICB2YXIgZmlyc3RJdGVtID0gdGhpcy5pc290b3BlLmZpbHRlcmVkSXRlbXNbMF07XHJcbiAgICByZXR1cm4gZmlyc3RJdGVtICYmIGZpcnN0SXRlbS5lbGVtZW50ICYmIGdldFNpemUoIGZpcnN0SXRlbS5lbGVtZW50ICk7XHJcbiAgfTtcclxuXHJcbiAgLy8gLS0tLS0gbWV0aG9kcyB0aGF0IHNob3VsZCByZWZlcmVuY2UgaXNvdG9wZSAtLS0tLSAvL1xyXG5cclxuICBMYXlvdXRNb2RlLnByb3RvdHlwZS5sYXlvdXQgPSBmdW5jdGlvbigpIHtcclxuICAgIHRoaXMuaXNvdG9wZS5sYXlvdXQuYXBwbHkoIHRoaXMuaXNvdG9wZSwgYXJndW1lbnRzICk7XHJcbiAgfTtcclxuXHJcbiAgTGF5b3V0TW9kZS5wcm90b3R5cGUuZ2V0U2l6ZSA9IGZ1bmN0aW9uKCkge1xyXG4gICAgdGhpcy5pc290b3BlLmdldFNpemUoKTtcclxuICAgIHRoaXMuc2l6ZSA9IHRoaXMuaXNvdG9wZS5zaXplO1xyXG4gIH07XHJcblxyXG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIGNyZWF0ZSAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAvL1xyXG5cclxuICBMYXlvdXRNb2RlLm1vZGVzID0ge307XHJcblxyXG4gIExheW91dE1vZGUuY3JlYXRlID0gZnVuY3Rpb24oIG5hbWVzcGFjZSwgb3B0aW9ucyApIHtcclxuXHJcbiAgICBmdW5jdGlvbiBNb2RlKCkge1xyXG4gICAgICBMYXlvdXRNb2RlLmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKTtcclxuICAgIH1cclxuXHJcbiAgICBNb2RlLnByb3RvdHlwZSA9IG5ldyBMYXlvdXRNb2RlKCk7XHJcblxyXG4gICAgLy8gZGVmYXVsdCBvcHRpb25zXHJcbiAgICBpZiAoIG9wdGlvbnMgKSB7XHJcbiAgICAgIE1vZGUub3B0aW9ucyA9IG9wdGlvbnM7XHJcbiAgICB9XHJcblxyXG4gICAgTW9kZS5wcm90b3R5cGUubmFtZXNwYWNlID0gbmFtZXNwYWNlO1xyXG4gICAgLy8gcmVnaXN0ZXIgaW4gSXNvdG9wZVxyXG4gICAgTGF5b3V0TW9kZS5tb2Rlc1sgbmFtZXNwYWNlIF0gPSBNb2RlO1xyXG5cclxuICAgIHJldHVybiBNb2RlO1xyXG4gIH07XHJcblxyXG4gIHJldHVybiBMYXlvdXRNb2RlO1xyXG5cclxufSkpO1xyXG5cclxuLyohXHJcbiAqIE1hc29ucnkgdjMuMy4xXHJcbiAqIENhc2NhZGluZyBncmlkIGxheW91dCBsaWJyYXJ5XHJcbiAqIGh0dHA6Ly9tYXNvbnJ5LmRlc2FuZHJvLmNvbVxyXG4gKiBNSVQgTGljZW5zZVxyXG4gKiBieSBEYXZpZCBEZVNhbmRyb1xyXG4gKi9cclxuXHJcbiggZnVuY3Rpb24oIHdpbmRvdywgZmFjdG9yeSApIHtcclxuICAndXNlIHN0cmljdCc7XHJcbiAgLy8gdW5pdmVyc2FsIG1vZHVsZSBkZWZpbml0aW9uXHJcbiAgaWYgKCB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgKSB7XHJcbiAgICAvLyBBTURcclxuICAgIGRlZmluZSggJ21hc29ucnkvbWFzb25yeScsW1xyXG4gICAgICAgICdvdXRsYXllci9vdXRsYXllcicsXHJcbiAgICAgICAgJ2dldC1zaXplL2dldC1zaXplJyxcclxuICAgICAgICAnZml6enktdWktdXRpbHMvdXRpbHMnXHJcbiAgICAgIF0sXHJcbiAgICAgIGZhY3RvcnkgKTtcclxuICB9IGVsc2UgaWYgKCB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgKSB7XHJcbiAgICAvLyBDb21tb25KU1xyXG4gICAgbW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KFxyXG4gICAgICByZXF1aXJlKCdvdXRsYXllcicpLFxyXG4gICAgICByZXF1aXJlKCdnZXQtc2l6ZScpLFxyXG4gICAgICByZXF1aXJlKCdmaXp6eS11aS11dGlscycpXHJcbiAgICApO1xyXG4gIH0gZWxzZSB7XHJcbiAgICAvLyBicm93c2VyIGdsb2JhbFxyXG4gICAgd2luZG93Lk1hc29ucnkgPSBmYWN0b3J5KFxyXG4gICAgICB3aW5kb3cuT3V0bGF5ZXIsXHJcbiAgICAgIHdpbmRvdy5nZXRTaXplLFxyXG4gICAgICB3aW5kb3cuZml6enlVSVV0aWxzXHJcbiAgICApO1xyXG4gIH1cclxuXHJcbn0oIHdpbmRvdywgZnVuY3Rpb24gZmFjdG9yeSggT3V0bGF5ZXIsIGdldFNpemUsIHV0aWxzICkge1xyXG5cclxuXHJcblxyXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBtYXNvbnJ5RGVmaW5pdGlvbiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAvL1xyXG5cclxuICAvLyBjcmVhdGUgYW4gT3V0bGF5ZXIgbGF5b3V0IGNsYXNzXHJcbiAgdmFyIE1hc29ucnkgPSBPdXRsYXllci5jcmVhdGUoJ21hc29ucnknKTtcclxuXHJcbiAgTWFzb25yeS5wcm90b3R5cGUuX3Jlc2V0TGF5b3V0ID0gZnVuY3Rpb24oKSB7XHJcbiAgICB0aGlzLmdldFNpemUoKTtcclxuICAgIHRoaXMuX2dldE1lYXN1cmVtZW50KCAnY29sdW1uV2lkdGgnLCAnb3V0ZXJXaWR0aCcgKTtcclxuICAgIHRoaXMuX2dldE1lYXN1cmVtZW50KCAnZ3V0dGVyJywgJ291dGVyV2lkdGgnICk7XHJcbiAgICB0aGlzLm1lYXN1cmVDb2x1bW5zKCk7XHJcblxyXG4gICAgLy8gcmVzZXQgY29sdW1uIFlcclxuICAgIHZhciBpID0gdGhpcy5jb2xzO1xyXG4gICAgdGhpcy5jb2xZcyA9IFtdO1xyXG4gICAgd2hpbGUgKGktLSkge1xyXG4gICAgICB0aGlzLmNvbFlzLnB1c2goIDAgKTtcclxuICAgIH1cclxuXHJcbiAgICB0aGlzLm1heFkgPSAwO1xyXG4gIH07XHJcblxyXG4gIE1hc29ucnkucHJvdG90eXBlLm1lYXN1cmVDb2x1bW5zID0gZnVuY3Rpb24oKSB7XHJcbiAgICB0aGlzLmdldENvbnRhaW5lcldpZHRoKCk7XHJcbiAgICAvLyBpZiBjb2x1bW5XaWR0aCBpcyAwLCBkZWZhdWx0IHRvIG91dGVyV2lkdGggb2YgZmlyc3QgaXRlbVxyXG4gICAgaWYgKCAhdGhpcy5jb2x1bW5XaWR0aCApIHtcclxuICAgICAgdmFyIGZpcnN0SXRlbSA9IHRoaXMuaXRlbXNbMF07XHJcbiAgICAgIHZhciBmaXJzdEl0ZW1FbGVtID0gZmlyc3RJdGVtICYmIGZpcnN0SXRlbS5lbGVtZW50O1xyXG4gICAgICAvLyBjb2x1bW5XaWR0aCBmYWxsIGJhY2sgdG8gaXRlbSBvZiBmaXJzdCBlbGVtZW50XHJcbiAgICAgIHRoaXMuY29sdW1uV2lkdGggPSBmaXJzdEl0ZW1FbGVtICYmIGdldFNpemUoIGZpcnN0SXRlbUVsZW0gKS5vdXRlcldpZHRoIHx8XHJcbiAgICAgICAgLy8gaWYgZmlyc3QgZWxlbSBoYXMgbm8gd2lkdGgsIGRlZmF1bHQgdG8gc2l6ZSBvZiBjb250YWluZXJcclxuICAgICAgICB0aGlzLmNvbnRhaW5lcldpZHRoO1xyXG4gICAgfVxyXG5cclxuICAgIHZhciBjb2x1bW5XaWR0aCA9IHRoaXMuY29sdW1uV2lkdGggKz0gdGhpcy5ndXR0ZXI7XHJcblxyXG4gICAgLy8gY2FsY3VsYXRlIGNvbHVtbnNcclxuICAgIHZhciBjb250YWluZXJXaWR0aCA9IHRoaXMuY29udGFpbmVyV2lkdGggKyB0aGlzLmd1dHRlcjtcclxuICAgIHZhciBjb2xzID0gY29udGFpbmVyV2lkdGggLyBjb2x1bW5XaWR0aDtcclxuICAgIC8vIGZpeCByb3VuZGluZyBlcnJvcnMsIHR5cGljYWxseSB3aXRoIGd1dHRlcnNcclxuICAgIHZhciBleGNlc3MgPSBjb2x1bW5XaWR0aCAtIGNvbnRhaW5lcldpZHRoICUgY29sdW1uV2lkdGg7XHJcbiAgICAvLyBpZiBvdmVyc2hvb3QgaXMgbGVzcyB0aGFuIGEgcGl4ZWwsIHJvdW5kIHVwLCBvdGhlcndpc2UgZmxvb3IgaXRcclxuICAgIHZhciBtYXRoTWV0aG9kID0gZXhjZXNzICYmIGV4Y2VzcyA8IDEgPyAncm91bmQnIDogJ2Zsb29yJztcclxuICAgIGNvbHMgPSBNYXRoWyBtYXRoTWV0aG9kIF0oIGNvbHMgKTtcclxuICAgIHRoaXMuY29scyA9IE1hdGgubWF4KCBjb2xzLCAxICk7XHJcbiAgfTtcclxuXHJcbiAgTWFzb25yeS5wcm90b3R5cGUuZ2V0Q29udGFpbmVyV2lkdGggPSBmdW5jdGlvbigpIHtcclxuICAgIC8vIGNvbnRhaW5lciBpcyBwYXJlbnQgaWYgZml0IHdpZHRoXHJcbiAgICB2YXIgY29udGFpbmVyID0gdGhpcy5vcHRpb25zLmlzRml0V2lkdGggPyB0aGlzLmVsZW1lbnQucGFyZW50Tm9kZSA6IHRoaXMuZWxlbWVudDtcclxuICAgIC8vIGNoZWNrIHRoYXQgdGhpcy5zaXplIGFuZCBzaXplIGFyZSB0aGVyZVxyXG4gICAgLy8gSUU4IHRyaWdnZXJzIHJlc2l6ZSBvbiBib2R5IHNpemUgY2hhbmdlLCBzbyB0aGV5IG1pZ2h0IG5vdCBiZVxyXG4gICAgdmFyIHNpemUgPSBnZXRTaXplKCBjb250YWluZXIgKTtcclxuICAgIHRoaXMuY29udGFpbmVyV2lkdGggPSBzaXplICYmIHNpemUuaW5uZXJXaWR0aDtcclxuICB9O1xyXG5cclxuICBNYXNvbnJ5LnByb3RvdHlwZS5fZ2V0SXRlbUxheW91dFBvc2l0aW9uID0gZnVuY3Rpb24oIGl0ZW0gKSB7XHJcbiAgICBpdGVtLmdldFNpemUoKTtcclxuICAgIC8vIGhvdyBtYW55IGNvbHVtbnMgZG9lcyB0aGlzIGJyaWNrIHNwYW5cclxuICAgIHZhciByZW1haW5kZXIgPSBpdGVtLnNpemUub3V0ZXJXaWR0aCAlIHRoaXMuY29sdW1uV2lkdGg7XHJcbiAgICB2YXIgbWF0aE1ldGhvZCA9IHJlbWFpbmRlciAmJiByZW1haW5kZXIgPCAxID8gJ3JvdW5kJyA6ICdjZWlsJztcclxuICAgIC8vIHJvdW5kIGlmIG9mZiBieSAxIHBpeGVsLCBvdGhlcndpc2UgdXNlIGNlaWxcclxuICAgIHZhciBjb2xTcGFuID0gTWF0aFsgbWF0aE1ldGhvZCBdKCBpdGVtLnNpemUub3V0ZXJXaWR0aCAvIHRoaXMuY29sdW1uV2lkdGggKTtcclxuICAgIGNvbFNwYW4gPSBNYXRoLm1pbiggY29sU3BhbiwgdGhpcy5jb2xzICk7XHJcblxyXG4gICAgdmFyIGNvbEdyb3VwID0gdGhpcy5fZ2V0Q29sR3JvdXAoIGNvbFNwYW4gKTtcclxuICAgIC8vIGdldCB0aGUgbWluaW11bSBZIHZhbHVlIGZyb20gdGhlIGNvbHVtbnNcclxuICAgIHZhciBtaW5pbXVtWSA9IE1hdGgubWluLmFwcGx5KCBNYXRoLCBjb2xHcm91cCApO1xyXG4gICAgdmFyIHNob3J0Q29sSW5kZXggPSB1dGlscy5pbmRleE9mKCBjb2xHcm91cCwgbWluaW11bVkgKTtcclxuXHJcbiAgICAvLyBwb3NpdGlvbiB0aGUgYnJpY2tcclxuICAgIHZhciBwb3NpdGlvbiA9IHtcclxuICAgICAgeDogdGhpcy5jb2x1bW5XaWR0aCAqIHNob3J0Q29sSW5kZXgsXHJcbiAgICAgIHk6IG1pbmltdW1ZXHJcbiAgICB9O1xyXG5cclxuICAgIC8vIGFwcGx5IHNldEhlaWdodCB0byBuZWNlc3NhcnkgY29sdW1uc1xyXG4gICAgdmFyIHNldEhlaWdodCA9IG1pbmltdW1ZICsgaXRlbS5zaXplLm91dGVySGVpZ2h0O1xyXG4gICAgdmFyIHNldFNwYW4gPSB0aGlzLmNvbHMgKyAxIC0gY29sR3JvdXAubGVuZ3RoO1xyXG4gICAgZm9yICggdmFyIGkgPSAwOyBpIDwgc2V0U3BhbjsgaSsrICkge1xyXG4gICAgICB0aGlzLmNvbFlzWyBzaG9ydENvbEluZGV4ICsgaSBdID0gc2V0SGVpZ2h0O1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBwb3NpdGlvbjtcclxuICB9O1xyXG5cclxuICAvKipcclxuICAgKiBAcGFyYW0ge051bWJlcn0gY29sU3BhbiAtIG51bWJlciBvZiBjb2x1bW5zIHRoZSBlbGVtZW50IHNwYW5zXHJcbiAgICogQHJldHVybnMge0FycmF5fSBjb2xHcm91cFxyXG4gICAqL1xyXG4gIE1hc29ucnkucHJvdG90eXBlLl9nZXRDb2xHcm91cCA9IGZ1bmN0aW9uKCBjb2xTcGFuICkge1xyXG4gICAgaWYgKCBjb2xTcGFuIDwgMiApIHtcclxuICAgICAgLy8gaWYgYnJpY2sgc3BhbnMgb25seSBvbmUgY29sdW1uLCB1c2UgYWxsIHRoZSBjb2x1bW4gWXNcclxuICAgICAgcmV0dXJuIHRoaXMuY29sWXM7XHJcbiAgICB9XHJcblxyXG4gICAgdmFyIGNvbEdyb3VwID0gW107XHJcbiAgICAvLyBob3cgbWFueSBkaWZmZXJlbnQgcGxhY2VzIGNvdWxkIHRoaXMgYnJpY2sgZml0IGhvcml6b250YWxseVxyXG4gICAgdmFyIGdyb3VwQ291bnQgPSB0aGlzLmNvbHMgKyAxIC0gY29sU3BhbjtcclxuICAgIC8vIGZvciBlYWNoIGdyb3VwIHBvdGVudGlhbCBob3Jpem9udGFsIHBvc2l0aW9uXHJcbiAgICBmb3IgKCB2YXIgaSA9IDA7IGkgPCBncm91cENvdW50OyBpKysgKSB7XHJcbiAgICAgIC8vIG1ha2UgYW4gYXJyYXkgb2YgY29sWSB2YWx1ZXMgZm9yIHRoYXQgb25lIGdyb3VwXHJcbiAgICAgIHZhciBncm91cENvbFlzID0gdGhpcy5jb2xZcy5zbGljZSggaSwgaSArIGNvbFNwYW4gKTtcclxuICAgICAgLy8gYW5kIGdldCB0aGUgbWF4IHZhbHVlIG9mIHRoZSBhcnJheVxyXG4gICAgICBjb2xHcm91cFtpXSA9IE1hdGgubWF4LmFwcGx5KCBNYXRoLCBncm91cENvbFlzICk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gY29sR3JvdXA7XHJcbiAgfTtcclxuXHJcbiAgTWFzb25yeS5wcm90b3R5cGUuX21hbmFnZVN0YW1wID0gZnVuY3Rpb24oIHN0YW1wICkge1xyXG4gICAgdmFyIHN0YW1wU2l6ZSA9IGdldFNpemUoIHN0YW1wICk7XHJcbiAgICB2YXIgb2Zmc2V0ID0gdGhpcy5fZ2V0RWxlbWVudE9mZnNldCggc3RhbXAgKTtcclxuICAgIC8vIGdldCB0aGUgY29sdW1ucyB0aGF0IHRoaXMgc3RhbXAgYWZmZWN0c1xyXG4gICAgdmFyIGZpcnN0WCA9IHRoaXMub3B0aW9ucy5pc09yaWdpbkxlZnQgPyBvZmZzZXQubGVmdCA6IG9mZnNldC5yaWdodDtcclxuICAgIHZhciBsYXN0WCA9IGZpcnN0WCArIHN0YW1wU2l6ZS5vdXRlcldpZHRoO1xyXG4gICAgdmFyIGZpcnN0Q29sID0gTWF0aC5mbG9vciggZmlyc3RYIC8gdGhpcy5jb2x1bW5XaWR0aCApO1xyXG4gICAgZmlyc3RDb2wgPSBNYXRoLm1heCggMCwgZmlyc3RDb2wgKTtcclxuICAgIHZhciBsYXN0Q29sID0gTWF0aC5mbG9vciggbGFzdFggLyB0aGlzLmNvbHVtbldpZHRoICk7XHJcbiAgICAvLyBsYXN0Q29sIHNob3VsZCBub3QgZ28gb3ZlciBpZiBtdWx0aXBsZSBvZiBjb2x1bW5XaWR0aCAjNDI1XHJcbiAgICBsYXN0Q29sIC09IGxhc3RYICUgdGhpcy5jb2x1bW5XaWR0aCA/IDAgOiAxO1xyXG4gICAgbGFzdENvbCA9IE1hdGgubWluKCB0aGlzLmNvbHMgLSAxLCBsYXN0Q29sICk7XHJcbiAgICAvLyBzZXQgY29sWXMgdG8gYm90dG9tIG9mIHRoZSBzdGFtcFxyXG4gICAgdmFyIHN0YW1wTWF4WSA9ICggdGhpcy5vcHRpb25zLmlzT3JpZ2luVG9wID8gb2Zmc2V0LnRvcCA6IG9mZnNldC5ib3R0b20gKSArXHJcbiAgICAgIHN0YW1wU2l6ZS5vdXRlckhlaWdodDtcclxuICAgIGZvciAoIHZhciBpID0gZmlyc3RDb2w7IGkgPD0gbGFzdENvbDsgaSsrICkge1xyXG4gICAgICB0aGlzLmNvbFlzW2ldID0gTWF0aC5tYXgoIHN0YW1wTWF4WSwgdGhpcy5jb2xZc1tpXSApO1xyXG4gICAgfVxyXG4gIH07XHJcblxyXG4gIE1hc29ucnkucHJvdG90eXBlLl9nZXRDb250YWluZXJTaXplID0gZnVuY3Rpb24oKSB7XHJcbiAgICB0aGlzLm1heFkgPSBNYXRoLm1heC5hcHBseSggTWF0aCwgdGhpcy5jb2xZcyApO1xyXG4gICAgdmFyIHNpemUgPSB7XHJcbiAgICAgIGhlaWdodDogdGhpcy5tYXhZXHJcbiAgICB9O1xyXG5cclxuICAgIGlmICggdGhpcy5vcHRpb25zLmlzRml0V2lkdGggKSB7XHJcbiAgICAgIHNpemUud2lkdGggPSB0aGlzLl9nZXRDb250YWluZXJGaXRXaWR0aCgpO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBzaXplO1xyXG4gIH07XHJcblxyXG4gIE1hc29ucnkucHJvdG90eXBlLl9nZXRDb250YWluZXJGaXRXaWR0aCA9IGZ1bmN0aW9uKCkge1xyXG4gICAgdmFyIHVudXNlZENvbHMgPSAwO1xyXG4gICAgLy8gY291bnQgdW51c2VkIGNvbHVtbnNcclxuICAgIHZhciBpID0gdGhpcy5jb2xzO1xyXG4gICAgd2hpbGUgKCAtLWkgKSB7XHJcbiAgICAgIGlmICggdGhpcy5jb2xZc1tpXSAhPT0gMCApIHtcclxuICAgICAgICBicmVhaztcclxuICAgICAgfVxyXG4gICAgICB1bnVzZWRDb2xzKys7XHJcbiAgICB9XHJcbiAgICAvLyBmaXQgY29udGFpbmVyIHRvIGNvbHVtbnMgdGhhdCBoYXZlIGJlZW4gdXNlZFxyXG4gICAgcmV0dXJuICggdGhpcy5jb2xzIC0gdW51c2VkQ29scyApICogdGhpcy5jb2x1bW5XaWR0aCAtIHRoaXMuZ3V0dGVyO1xyXG4gIH07XHJcblxyXG4gIE1hc29ucnkucHJvdG90eXBlLm5lZWRzUmVzaXplTGF5b3V0ID0gZnVuY3Rpb24oKSB7XHJcbiAgICB2YXIgcHJldmlvdXNXaWR0aCA9IHRoaXMuY29udGFpbmVyV2lkdGg7XHJcbiAgICB0aGlzLmdldENvbnRhaW5lcldpZHRoKCk7XHJcbiAgICByZXR1cm4gcHJldmlvdXNXaWR0aCAhPT0gdGhpcy5jb250YWluZXJXaWR0aDtcclxuICB9O1xyXG5cclxuICByZXR1cm4gTWFzb25yeTtcclxuXHJcbn0pKTtcclxuXHJcbi8qIVxyXG4gKiBNYXNvbnJ5IGxheW91dCBtb2RlXHJcbiAqIHN1Yi1jbGFzc2VzIE1hc29ucnlcclxuICogaHR0cDovL21hc29ucnkuZGVzYW5kcm8uY29tXHJcbiAqL1xyXG5cclxuKCBmdW5jdGlvbiggd2luZG93LCBmYWN0b3J5ICkge1xyXG4gICd1c2Ugc3RyaWN0JztcclxuICAvLyB1bml2ZXJzYWwgbW9kdWxlIGRlZmluaXRpb25cclxuICBpZiAoIHR5cGVvZiBkZWZpbmUgPT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kICkge1xyXG4gICAgLy8gQU1EXHJcbiAgICBkZWZpbmUoICdpc290b3BlL2pzL2xheW91dC1tb2Rlcy9tYXNvbnJ5JyxbXHJcbiAgICAgICAgJy4uL2xheW91dC1tb2RlJyxcclxuICAgICAgICAnbWFzb25yeS9tYXNvbnJ5J1xyXG4gICAgICBdLFxyXG4gICAgICBmYWN0b3J5ICk7XHJcbiAgfSBlbHNlIGlmICggdHlwZW9mIGV4cG9ydHMgPT0gJ29iamVjdCcgKSB7XHJcbiAgICAvLyBDb21tb25KU1xyXG4gICAgbW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KFxyXG4gICAgICByZXF1aXJlKCcuLi9sYXlvdXQtbW9kZScpLFxyXG4gICAgICByZXF1aXJlKCdtYXNvbnJ5LWxheW91dCcpXHJcbiAgICApO1xyXG4gIH0gZWxzZSB7XHJcbiAgICAvLyBicm93c2VyIGdsb2JhbFxyXG4gICAgZmFjdG9yeShcclxuICAgICAgd2luZG93Lklzb3RvcGUuTGF5b3V0TW9kZSxcclxuICAgICAgd2luZG93Lk1hc29ucnlcclxuICAgICk7XHJcbiAgfVxyXG5cclxufSggd2luZG93LCBmdW5jdGlvbiBmYWN0b3J5KCBMYXlvdXRNb2RlLCBNYXNvbnJ5ICkge1xyXG4ndXNlIHN0cmljdCc7XHJcblxyXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBoZWxwZXJzIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIC8vXHJcblxyXG4vLyBleHRlbmQgb2JqZWN0c1xyXG5mdW5jdGlvbiBleHRlbmQoIGEsIGIgKSB7XHJcbiAgZm9yICggdmFyIHByb3AgaW4gYiApIHtcclxuICAgIGFbIHByb3AgXSA9IGJbIHByb3AgXTtcclxuICB9XHJcbiAgcmV0dXJuIGE7XHJcbn1cclxuXHJcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIG1hc29ucnlEZWZpbml0aW9uIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIC8vXHJcblxyXG4gIC8vIGNyZWF0ZSBhbiBPdXRsYXllciBsYXlvdXQgY2xhc3NcclxuICB2YXIgTWFzb25yeU1vZGUgPSBMYXlvdXRNb2RlLmNyZWF0ZSgnbWFzb25yeScpO1xyXG5cclxuICAvLyBzYXZlIG9uIHRvIHRoZXNlIG1ldGhvZHNcclxuICB2YXIgX2dldEVsZW1lbnRPZmZzZXQgPSBNYXNvbnJ5TW9kZS5wcm90b3R5cGUuX2dldEVsZW1lbnRPZmZzZXQ7XHJcbiAgdmFyIGxheW91dCA9IE1hc29ucnlNb2RlLnByb3RvdHlwZS5sYXlvdXQ7XHJcbiAgdmFyIF9nZXRNZWFzdXJlbWVudCA9IE1hc29ucnlNb2RlLnByb3RvdHlwZS5fZ2V0TWVhc3VyZW1lbnQ7XHJcblxyXG4gIC8vIHN1Yi1jbGFzcyBNYXNvbnJ5XHJcbiAgZXh0ZW5kKCBNYXNvbnJ5TW9kZS5wcm90b3R5cGUsIE1hc29ucnkucHJvdG90eXBlICk7XHJcblxyXG4gIC8vIHNldCBiYWNrLCBhcyBpdCB3YXMgb3ZlcndyaXR0ZW4gYnkgTWFzb25yeVxyXG4gIE1hc29ucnlNb2RlLnByb3RvdHlwZS5fZ2V0RWxlbWVudE9mZnNldCA9IF9nZXRFbGVtZW50T2Zmc2V0O1xyXG4gIE1hc29ucnlNb2RlLnByb3RvdHlwZS5sYXlvdXQgPSBsYXlvdXQ7XHJcbiAgTWFzb25yeU1vZGUucHJvdG90eXBlLl9nZXRNZWFzdXJlbWVudCA9IF9nZXRNZWFzdXJlbWVudDtcclxuXHJcbiAgdmFyIG1lYXN1cmVDb2x1bW5zID0gTWFzb25yeU1vZGUucHJvdG90eXBlLm1lYXN1cmVDb2x1bW5zO1xyXG4gIE1hc29ucnlNb2RlLnByb3RvdHlwZS5tZWFzdXJlQ29sdW1ucyA9IGZ1bmN0aW9uKCkge1xyXG4gICAgLy8gc2V0IGl0ZW1zLCB1c2VkIGlmIG1lYXN1cmluZyBmaXJzdCBpdGVtXHJcbiAgICB0aGlzLml0ZW1zID0gdGhpcy5pc290b3BlLmZpbHRlcmVkSXRlbXM7XHJcbiAgICBtZWFzdXJlQ29sdW1ucy5jYWxsKCB0aGlzICk7XHJcbiAgfTtcclxuXHJcbiAgLy8gSEFDSyBjb3B5IG92ZXIgaXNPcmlnaW5MZWZ0L1RvcCBvcHRpb25zXHJcbiAgdmFyIF9tYW5hZ2VTdGFtcCA9IE1hc29ucnlNb2RlLnByb3RvdHlwZS5fbWFuYWdlU3RhbXA7XHJcbiAgTWFzb25yeU1vZGUucHJvdG90eXBlLl9tYW5hZ2VTdGFtcCA9IGZ1bmN0aW9uKCkge1xyXG4gICAgdGhpcy5vcHRpb25zLmlzT3JpZ2luTGVmdCA9IHRoaXMuaXNvdG9wZS5vcHRpb25zLmlzT3JpZ2luTGVmdDtcclxuICAgIHRoaXMub3B0aW9ucy5pc09yaWdpblRvcCA9IHRoaXMuaXNvdG9wZS5vcHRpb25zLmlzT3JpZ2luVG9wO1xyXG4gICAgX21hbmFnZVN0YW1wLmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKTtcclxuICB9O1xyXG5cclxuICByZXR1cm4gTWFzb25yeU1vZGU7XHJcblxyXG59KSk7XHJcblxyXG4vKipcclxuICogZml0Um93cyBsYXlvdXQgbW9kZVxyXG4gKi9cclxuXHJcbiggZnVuY3Rpb24oIHdpbmRvdywgZmFjdG9yeSApIHtcclxuICAndXNlIHN0cmljdCc7XHJcbiAgLy8gdW5pdmVyc2FsIG1vZHVsZSBkZWZpbml0aW9uXHJcbiAgaWYgKCB0eXBlb2YgZGVmaW5lID09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCApIHtcclxuICAgIC8vIEFNRFxyXG4gICAgZGVmaW5lKCAnaXNvdG9wZS9qcy9sYXlvdXQtbW9kZXMvZml0LXJvd3MnLFtcclxuICAgICAgICAnLi4vbGF5b3V0LW1vZGUnXHJcbiAgICAgIF0sXHJcbiAgICAgIGZhY3RvcnkgKTtcclxuICB9IGVsc2UgaWYgKCB0eXBlb2YgZXhwb3J0cyA9PSAnb2JqZWN0JyApIHtcclxuICAgIC8vIENvbW1vbkpTXHJcbiAgICBtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkoXHJcbiAgICAgIHJlcXVpcmUoJy4uL2xheW91dC1tb2RlJylcclxuICAgICk7XHJcbiAgfSBlbHNlIHtcclxuICAgIC8vIGJyb3dzZXIgZ2xvYmFsXHJcbiAgICBmYWN0b3J5KFxyXG4gICAgICB3aW5kb3cuSXNvdG9wZS5MYXlvdXRNb2RlXHJcbiAgICApO1xyXG4gIH1cclxuXHJcbn0oIHdpbmRvdywgZnVuY3Rpb24gZmFjdG9yeSggTGF5b3V0TW9kZSApIHtcclxuJ3VzZSBzdHJpY3QnO1xyXG5cclxudmFyIEZpdFJvd3MgPSBMYXlvdXRNb2RlLmNyZWF0ZSgnZml0Um93cycpO1xyXG5cclxuRml0Um93cy5wcm90b3R5cGUuX3Jlc2V0TGF5b3V0ID0gZnVuY3Rpb24oKSB7XHJcbiAgdGhpcy54ID0gMDtcclxuICB0aGlzLnkgPSAwO1xyXG4gIHRoaXMubWF4WSA9IDA7XHJcbiAgdGhpcy5fZ2V0TWVhc3VyZW1lbnQoICdndXR0ZXInLCAnb3V0ZXJXaWR0aCcgKTtcclxufTtcclxuXHJcbkZpdFJvd3MucHJvdG90eXBlLl9nZXRJdGVtTGF5b3V0UG9zaXRpb24gPSBmdW5jdGlvbiggaXRlbSApIHtcclxuICBpdGVtLmdldFNpemUoKTtcclxuXHJcbiAgdmFyIGl0ZW1XaWR0aCA9IGl0ZW0uc2l6ZS5vdXRlcldpZHRoICsgdGhpcy5ndXR0ZXI7XHJcbiAgLy8gaWYgdGhpcyBlbGVtZW50IGNhbm5vdCBmaXQgaW4gdGhlIGN1cnJlbnQgcm93XHJcbiAgdmFyIGNvbnRhaW5lcldpZHRoID0gdGhpcy5pc290b3BlLnNpemUuaW5uZXJXaWR0aCArIHRoaXMuZ3V0dGVyO1xyXG4gIGlmICggdGhpcy54ICE9PSAwICYmIGl0ZW1XaWR0aCArIHRoaXMueCA+IGNvbnRhaW5lcldpZHRoICkge1xyXG4gICAgdGhpcy54ID0gMDtcclxuICAgIHRoaXMueSA9IHRoaXMubWF4WTtcclxuICB9XHJcblxyXG4gIHZhciBwb3NpdGlvbiA9IHtcclxuICAgIHg6IHRoaXMueCxcclxuICAgIHk6IHRoaXMueVxyXG4gIH07XHJcblxyXG4gIHRoaXMubWF4WSA9IE1hdGgubWF4KCB0aGlzLm1heFksIHRoaXMueSArIGl0ZW0uc2l6ZS5vdXRlckhlaWdodCApO1xyXG4gIHRoaXMueCArPSBpdGVtV2lkdGg7XHJcblxyXG4gIHJldHVybiBwb3NpdGlvbjtcclxufTtcclxuXHJcbkZpdFJvd3MucHJvdG90eXBlLl9nZXRDb250YWluZXJTaXplID0gZnVuY3Rpb24oKSB7XHJcbiAgcmV0dXJuIHsgaGVpZ2h0OiB0aGlzLm1heFkgfTtcclxufTtcclxuXHJcbnJldHVybiBGaXRSb3dzO1xyXG5cclxufSkpO1xyXG5cclxuLyoqXHJcbiAqIHZlcnRpY2FsIGxheW91dCBtb2RlXHJcbiAqL1xyXG5cclxuKCBmdW5jdGlvbiggd2luZG93LCBmYWN0b3J5ICkge1xyXG4gICd1c2Ugc3RyaWN0JztcclxuICAvLyB1bml2ZXJzYWwgbW9kdWxlIGRlZmluaXRpb25cclxuICBpZiAoIHR5cGVvZiBkZWZpbmUgPT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kICkge1xyXG4gICAgLy8gQU1EXHJcbiAgICBkZWZpbmUoICdpc290b3BlL2pzL2xheW91dC1tb2Rlcy92ZXJ0aWNhbCcsW1xyXG4gICAgICAgICcuLi9sYXlvdXQtbW9kZSdcclxuICAgICAgXSxcclxuICAgICAgZmFjdG9yeSApO1xyXG4gIH0gZWxzZSBpZiAoIHR5cGVvZiBleHBvcnRzID09ICdvYmplY3QnICkge1xyXG4gICAgLy8gQ29tbW9uSlNcclxuICAgIG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeShcclxuICAgICAgcmVxdWlyZSgnLi4vbGF5b3V0LW1vZGUnKVxyXG4gICAgKTtcclxuICB9IGVsc2Uge1xyXG4gICAgLy8gYnJvd3NlciBnbG9iYWxcclxuICAgIGZhY3RvcnkoXHJcbiAgICAgIHdpbmRvdy5Jc290b3BlLkxheW91dE1vZGVcclxuICAgICk7XHJcbiAgfVxyXG5cclxufSggd2luZG93LCBmdW5jdGlvbiBmYWN0b3J5KCBMYXlvdXRNb2RlICkge1xyXG4ndXNlIHN0cmljdCc7XHJcblxyXG52YXIgVmVydGljYWwgPSBMYXlvdXRNb2RlLmNyZWF0ZSggJ3ZlcnRpY2FsJywge1xyXG4gIGhvcml6b250YWxBbGlnbm1lbnQ6IDBcclxufSk7XHJcblxyXG5WZXJ0aWNhbC5wcm90b3R5cGUuX3Jlc2V0TGF5b3V0ID0gZnVuY3Rpb24oKSB7XHJcbiAgdGhpcy55ID0gMDtcclxufTtcclxuXHJcblZlcnRpY2FsLnByb3RvdHlwZS5fZ2V0SXRlbUxheW91dFBvc2l0aW9uID0gZnVuY3Rpb24oIGl0ZW0gKSB7XHJcbiAgaXRlbS5nZXRTaXplKCk7XHJcbiAgdmFyIHggPSAoIHRoaXMuaXNvdG9wZS5zaXplLmlubmVyV2lkdGggLSBpdGVtLnNpemUub3V0ZXJXaWR0aCApICpcclxuICAgIHRoaXMub3B0aW9ucy5ob3Jpem9udGFsQWxpZ25tZW50O1xyXG4gIHZhciB5ID0gdGhpcy55O1xyXG4gIHRoaXMueSArPSBpdGVtLnNpemUub3V0ZXJIZWlnaHQ7XHJcbiAgcmV0dXJuIHsgeDogeCwgeTogeSB9O1xyXG59O1xyXG5cclxuVmVydGljYWwucHJvdG90eXBlLl9nZXRDb250YWluZXJTaXplID0gZnVuY3Rpb24oKSB7XHJcbiAgcmV0dXJuIHsgaGVpZ2h0OiB0aGlzLnkgfTtcclxufTtcclxuXHJcbnJldHVybiBWZXJ0aWNhbDtcclxuXHJcbn0pKTtcclxuXHJcbi8qIVxyXG4gKiBJc290b3BlIHYyLjIuMlxyXG4gKlxyXG4gKiBMaWNlbnNlZCBHUEx2MyBmb3Igb3BlbiBzb3VyY2UgdXNlXHJcbiAqIG9yIElzb3RvcGUgQ29tbWVyY2lhbCBMaWNlbnNlIGZvciBjb21tZXJjaWFsIHVzZVxyXG4gKlxyXG4gKiBodHRwOi8vaXNvdG9wZS5tZXRhZml6enkuY29cclxuICogQ29weXJpZ2h0IDIwMTUgTWV0YWZpenp5XHJcbiAqL1xyXG5cclxuKCBmdW5jdGlvbiggd2luZG93LCBmYWN0b3J5ICkge1xyXG4gICd1c2Ugc3RyaWN0JztcclxuICAvLyB1bml2ZXJzYWwgbW9kdWxlIGRlZmluaXRpb25cclxuXHJcbiAgaWYgKCB0eXBlb2YgZGVmaW5lID09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCApIHtcclxuICAgIC8vIEFNRFxyXG4gICAgZGVmaW5lKCBbXHJcbiAgICAgICAgJ291dGxheWVyL291dGxheWVyJyxcclxuICAgICAgICAnZ2V0LXNpemUvZ2V0LXNpemUnLFxyXG4gICAgICAgICdtYXRjaGVzLXNlbGVjdG9yL21hdGNoZXMtc2VsZWN0b3InLFxyXG4gICAgICAgICdmaXp6eS11aS11dGlscy91dGlscycsXHJcbiAgICAgICAgJ2lzb3RvcGUvanMvaXRlbScsXHJcbiAgICAgICAgJ2lzb3RvcGUvanMvbGF5b3V0LW1vZGUnLFxyXG4gICAgICAgIC8vIGluY2x1ZGUgZGVmYXVsdCBsYXlvdXQgbW9kZXNcclxuICAgICAgICAnaXNvdG9wZS9qcy9sYXlvdXQtbW9kZXMvbWFzb25yeScsXHJcbiAgICAgICAgJ2lzb3RvcGUvanMvbGF5b3V0LW1vZGVzL2ZpdC1yb3dzJyxcclxuICAgICAgICAnaXNvdG9wZS9qcy9sYXlvdXQtbW9kZXMvdmVydGljYWwnXHJcbiAgICAgIF0sXHJcbiAgICAgIGZ1bmN0aW9uKCBPdXRsYXllciwgZ2V0U2l6ZSwgbWF0Y2hlc1NlbGVjdG9yLCB1dGlscywgSXRlbSwgTGF5b3V0TW9kZSApIHtcclxuICAgICAgICByZXR1cm4gZmFjdG9yeSggd2luZG93LCBPdXRsYXllciwgZ2V0U2l6ZSwgbWF0Y2hlc1NlbGVjdG9yLCB1dGlscywgSXRlbSwgTGF5b3V0TW9kZSApO1xyXG4gICAgICB9KTtcclxuICB9IGVsc2UgaWYgKCB0eXBlb2YgZXhwb3J0cyA9PSAnb2JqZWN0JyApIHtcclxuICAgIC8vIENvbW1vbkpTXHJcbiAgICBtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkoXHJcbiAgICAgIHdpbmRvdyxcclxuICAgICAgcmVxdWlyZSgnb3V0bGF5ZXInKSxcclxuICAgICAgcmVxdWlyZSgnZ2V0LXNpemUnKSxcclxuICAgICAgcmVxdWlyZSgnZGVzYW5kcm8tbWF0Y2hlcy1zZWxlY3RvcicpLFxyXG4gICAgICByZXF1aXJlKCdmaXp6eS11aS11dGlscycpLFxyXG4gICAgICByZXF1aXJlKCcuL2l0ZW0nKSxcclxuICAgICAgcmVxdWlyZSgnLi9sYXlvdXQtbW9kZScpLFxyXG4gICAgICAvLyBpbmNsdWRlIGRlZmF1bHQgbGF5b3V0IG1vZGVzXHJcbiAgICAgIHJlcXVpcmUoJy4vbGF5b3V0LW1vZGVzL21hc29ucnknKSxcclxuICAgICAgcmVxdWlyZSgnLi9sYXlvdXQtbW9kZXMvZml0LXJvd3MnKSxcclxuICAgICAgcmVxdWlyZSgnLi9sYXlvdXQtbW9kZXMvdmVydGljYWwnKVxyXG4gICAgKTtcclxuICB9IGVsc2Uge1xyXG4gICAgLy8gYnJvd3NlciBnbG9iYWxcclxuICAgIHdpbmRvdy5Jc290b3BlID0gZmFjdG9yeShcclxuICAgICAgd2luZG93LFxyXG4gICAgICB3aW5kb3cuT3V0bGF5ZXIsXHJcbiAgICAgIHdpbmRvdy5nZXRTaXplLFxyXG4gICAgICB3aW5kb3cubWF0Y2hlc1NlbGVjdG9yLFxyXG4gICAgICB3aW5kb3cuZml6enlVSVV0aWxzLFxyXG4gICAgICB3aW5kb3cuSXNvdG9wZS5JdGVtLFxyXG4gICAgICB3aW5kb3cuSXNvdG9wZS5MYXlvdXRNb2RlXHJcbiAgICApO1xyXG4gIH1cclxuXHJcbn0oIHdpbmRvdywgZnVuY3Rpb24gZmFjdG9yeSggd2luZG93LCBPdXRsYXllciwgZ2V0U2l6ZSwgbWF0Y2hlc1NlbGVjdG9yLCB1dGlscyxcclxuICBJdGVtLCBMYXlvdXRNb2RlICkge1xyXG5cclxuXHJcblxyXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSB2YXJzIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIC8vXHJcblxyXG52YXIgalF1ZXJ5ID0gd2luZG93LmpRdWVyeTtcclxuXHJcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIGhlbHBlcnMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gLy9cclxuXHJcbnZhciB0cmltID0gU3RyaW5nLnByb3RvdHlwZS50cmltID9cclxuICBmdW5jdGlvbiggc3RyICkge1xyXG4gICAgcmV0dXJuIHN0ci50cmltKCk7XHJcbiAgfSA6XHJcbiAgZnVuY3Rpb24oIHN0ciApIHtcclxuICAgIHJldHVybiBzdHIucmVwbGFjZSggL15cXHMrfFxccyskL2csICcnICk7XHJcbiAgfTtcclxuXHJcbnZhciBkb2NFbGVtID0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xyXG5cclxudmFyIGdldFRleHQgPSBkb2NFbGVtLnRleHRDb250ZW50ID9cclxuICBmdW5jdGlvbiggZWxlbSApIHtcclxuICAgIHJldHVybiBlbGVtLnRleHRDb250ZW50O1xyXG4gIH0gOlxyXG4gIGZ1bmN0aW9uKCBlbGVtICkge1xyXG4gICAgcmV0dXJuIGVsZW0uaW5uZXJUZXh0O1xyXG4gIH07XHJcblxyXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBpc290b3BlRGVmaW5pdGlvbiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAvL1xyXG5cclxuICAvLyBjcmVhdGUgYW4gT3V0bGF5ZXIgbGF5b3V0IGNsYXNzXHJcbiAgdmFyIElzb3RvcGUgPSBPdXRsYXllci5jcmVhdGUoICdpc290b3BlJywge1xyXG4gICAgbGF5b3V0TW9kZTogXCJtYXNvbnJ5XCIsXHJcbiAgICBpc0pRdWVyeUZpbHRlcmluZzogdHJ1ZSxcclxuICAgIHNvcnRBc2NlbmRpbmc6IHRydWVcclxuICB9KTtcclxuXHJcbiAgSXNvdG9wZS5JdGVtID0gSXRlbTtcclxuICBJc290b3BlLkxheW91dE1vZGUgPSBMYXlvdXRNb2RlO1xyXG5cclxuICBJc290b3BlLnByb3RvdHlwZS5fY3JlYXRlID0gZnVuY3Rpb24oKSB7XHJcbiAgICB0aGlzLml0ZW1HVUlEID0gMDtcclxuICAgIC8vIGZ1bmN0aW9ucyB0aGF0IHNvcnQgaXRlbXNcclxuICAgIHRoaXMuX3NvcnRlcnMgPSB7fTtcclxuICAgIHRoaXMuX2dldFNvcnRlcnMoKTtcclxuICAgIC8vIGNhbGwgc3VwZXJcclxuICAgIE91dGxheWVyLnByb3RvdHlwZS5fY3JlYXRlLmNhbGwoIHRoaXMgKTtcclxuXHJcbiAgICAvLyBjcmVhdGUgbGF5b3V0IG1vZGVzXHJcbiAgICB0aGlzLm1vZGVzID0ge307XHJcbiAgICAvLyBzdGFydCBmaWx0ZXJlZEl0ZW1zIHdpdGggYWxsIGl0ZW1zXHJcbiAgICB0aGlzLmZpbHRlcmVkSXRlbXMgPSB0aGlzLml0ZW1zO1xyXG4gICAgLy8ga2VlcCBvZiB0cmFjayBvZiBzb3J0QnlzXHJcbiAgICB0aGlzLnNvcnRIaXN0b3J5ID0gWyAnb3JpZ2luYWwtb3JkZXInIF07XHJcbiAgICAvLyBjcmVhdGUgZnJvbSByZWdpc3RlcmVkIGxheW91dCBtb2Rlc1xyXG4gICAgZm9yICggdmFyIG5hbWUgaW4gTGF5b3V0TW9kZS5tb2RlcyApIHtcclxuICAgICAgdGhpcy5faW5pdExheW91dE1vZGUoIG5hbWUgKTtcclxuICAgIH1cclxuICB9O1xyXG5cclxuICBJc290b3BlLnByb3RvdHlwZS5yZWxvYWRJdGVtcyA9IGZ1bmN0aW9uKCkge1xyXG4gICAgLy8gcmVzZXQgaXRlbSBJRCBjb3VudGVyXHJcbiAgICB0aGlzLml0ZW1HVUlEID0gMDtcclxuICAgIC8vIGNhbGwgc3VwZXJcclxuICAgIE91dGxheWVyLnByb3RvdHlwZS5yZWxvYWRJdGVtcy5jYWxsKCB0aGlzICk7XHJcbiAgfTtcclxuXHJcbiAgSXNvdG9wZS5wcm90b3R5cGUuX2l0ZW1pemUgPSBmdW5jdGlvbigpIHtcclxuICAgIHZhciBpdGVtcyA9IE91dGxheWVyLnByb3RvdHlwZS5faXRlbWl6ZS5hcHBseSggdGhpcywgYXJndW1lbnRzICk7XHJcbiAgICAvLyBhc3NpZ24gSUQgZm9yIG9yaWdpbmFsLW9yZGVyXHJcbiAgICBmb3IgKCB2YXIgaT0wLCBsZW4gPSBpdGVtcy5sZW5ndGg7IGkgPCBsZW47IGkrKyApIHtcclxuICAgICAgdmFyIGl0ZW0gPSBpdGVtc1tpXTtcclxuICAgICAgaXRlbS5pZCA9IHRoaXMuaXRlbUdVSUQrKztcclxuICAgIH1cclxuICAgIHRoaXMuX3VwZGF0ZUl0ZW1zU29ydERhdGEoIGl0ZW1zICk7XHJcbiAgICByZXR1cm4gaXRlbXM7XHJcbiAgfTtcclxuXHJcblxyXG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIGxheW91dCAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAvL1xyXG5cclxuICBJc290b3BlLnByb3RvdHlwZS5faW5pdExheW91dE1vZGUgPSBmdW5jdGlvbiggbmFtZSApIHtcclxuICAgIHZhciBNb2RlID0gTGF5b3V0TW9kZS5tb2Rlc1sgbmFtZSBdO1xyXG4gICAgLy8gc2V0IG1vZGUgb3B0aW9uc1xyXG4gICAgLy8gSEFDSyBleHRlbmQgaW5pdGlhbCBvcHRpb25zLCBiYWNrLWZpbGwgaW4gZGVmYXVsdCBvcHRpb25zXHJcbiAgICB2YXIgaW5pdGlhbE9wdHMgPSB0aGlzLm9wdGlvbnNbIG5hbWUgXSB8fCB7fTtcclxuICAgIHRoaXMub3B0aW9uc1sgbmFtZSBdID0gTW9kZS5vcHRpb25zID9cclxuICAgICAgdXRpbHMuZXh0ZW5kKCBNb2RlLm9wdGlvbnMsIGluaXRpYWxPcHRzICkgOiBpbml0aWFsT3B0cztcclxuICAgIC8vIGluaXQgbGF5b3V0IG1vZGUgaW5zdGFuY2VcclxuICAgIHRoaXMubW9kZXNbIG5hbWUgXSA9IG5ldyBNb2RlKCB0aGlzICk7XHJcbiAgfTtcclxuXHJcblxyXG4gIElzb3RvcGUucHJvdG90eXBlLmxheW91dCA9IGZ1bmN0aW9uKCkge1xyXG4gICAgLy8gaWYgZmlyc3QgdGltZSBkb2luZyBsYXlvdXQsIGRvIGFsbCBtYWdpY1xyXG4gICAgaWYgKCAhdGhpcy5faXNMYXlvdXRJbml0ZWQgJiYgdGhpcy5vcHRpb25zLmlzSW5pdExheW91dCApIHtcclxuICAgICAgdGhpcy5hcnJhbmdlKCk7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIHRoaXMuX2xheW91dCgpO1xyXG4gIH07XHJcblxyXG4gIC8vIHByaXZhdGUgbWV0aG9kIHRvIGJlIHVzZWQgaW4gbGF5b3V0KCkgJiBtYWdpYygpXHJcbiAgSXNvdG9wZS5wcm90b3R5cGUuX2xheW91dCA9IGZ1bmN0aW9uKCkge1xyXG4gICAgLy8gZG9uJ3QgYW5pbWF0ZSBmaXJzdCBsYXlvdXRcclxuICAgIHZhciBpc0luc3RhbnQgPSB0aGlzLl9nZXRJc0luc3RhbnQoKTtcclxuICAgIC8vIGxheW91dCBmbG93XHJcbiAgICB0aGlzLl9yZXNldExheW91dCgpO1xyXG4gICAgdGhpcy5fbWFuYWdlU3RhbXBzKCk7XHJcbiAgICB0aGlzLmxheW91dEl0ZW1zKCB0aGlzLmZpbHRlcmVkSXRlbXMsIGlzSW5zdGFudCApO1xyXG5cclxuICAgIC8vIGZsYWcgZm9yIGluaXRhbGl6ZWRcclxuICAgIHRoaXMuX2lzTGF5b3V0SW5pdGVkID0gdHJ1ZTtcclxuICB9O1xyXG5cclxuICAvLyBmaWx0ZXIgKyBzb3J0ICsgbGF5b3V0XHJcbiAgSXNvdG9wZS5wcm90b3R5cGUuYXJyYW5nZSA9IGZ1bmN0aW9uKCBvcHRzICkge1xyXG4gICAgLy8gc2V0IGFueSBvcHRpb25zIHBhc3NcclxuICAgIHRoaXMub3B0aW9uKCBvcHRzICk7XHJcbiAgICB0aGlzLl9nZXRJc0luc3RhbnQoKTtcclxuICAgIC8vIGZpbHRlciwgc29ydCwgYW5kIGxheW91dFxyXG5cclxuICAgIC8vIGZpbHRlclxyXG4gICAgdmFyIGZpbHRlcmVkID0gdGhpcy5fZmlsdGVyKCB0aGlzLml0ZW1zICk7XHJcbiAgICB0aGlzLmZpbHRlcmVkSXRlbXMgPSBmaWx0ZXJlZC5tYXRjaGVzO1xyXG5cclxuICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICBmdW5jdGlvbiBoaWRlUmV2ZWFsKCkge1xyXG4gICAgICBfdGhpcy5yZXZlYWwoIGZpbHRlcmVkLm5lZWRSZXZlYWwgKTtcclxuICAgICAgX3RoaXMuaGlkZSggZmlsdGVyZWQubmVlZEhpZGUgKTtcclxuICAgIH1cclxuXHJcbiAgICB0aGlzLl9iaW5kQXJyYW5nZUNvbXBsZXRlKCk7XHJcblxyXG4gICAgaWYgKCB0aGlzLl9pc0luc3RhbnQgKSB7XHJcbiAgICAgIHRoaXMuX25vVHJhbnNpdGlvbiggaGlkZVJldmVhbCApO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgaGlkZVJldmVhbCgpO1xyXG4gICAgfVxyXG5cclxuICAgIHRoaXMuX3NvcnQoKTtcclxuICAgIHRoaXMuX2xheW91dCgpO1xyXG4gIH07XHJcbiAgLy8gYWxpYXMgdG8gX2luaXQgZm9yIG1haW4gcGx1Z2luIG1ldGhvZFxyXG4gIElzb3RvcGUucHJvdG90eXBlLl9pbml0ID0gSXNvdG9wZS5wcm90b3R5cGUuYXJyYW5nZTtcclxuXHJcbiAgLy8gSEFDS1xyXG4gIC8vIERvbid0IGFuaW1hdGUvdHJhbnNpdGlvbiBmaXJzdCBsYXlvdXRcclxuICAvLyBPciBkb24ndCBhbmltYXRlL3RyYW5zaXRpb24gb3RoZXIgbGF5b3V0c1xyXG4gIElzb3RvcGUucHJvdG90eXBlLl9nZXRJc0luc3RhbnQgPSBmdW5jdGlvbigpIHtcclxuICAgIHZhciBpc0luc3RhbnQgPSB0aGlzLm9wdGlvbnMuaXNMYXlvdXRJbnN0YW50ICE9PSB1bmRlZmluZWQgP1xyXG4gICAgICB0aGlzLm9wdGlvbnMuaXNMYXlvdXRJbnN0YW50IDogIXRoaXMuX2lzTGF5b3V0SW5pdGVkO1xyXG4gICAgdGhpcy5faXNJbnN0YW50ID0gaXNJbnN0YW50O1xyXG4gICAgcmV0dXJuIGlzSW5zdGFudDtcclxuICB9O1xyXG5cclxuICAvLyBsaXN0ZW4gZm9yIGxheW91dENvbXBsZXRlLCBoaWRlQ29tcGxldGUgYW5kIHJldmVhbENvbXBsZXRlXHJcbiAgLy8gdG8gdHJpZ2dlciBhcnJhbmdlQ29tcGxldGVcclxuICBJc290b3BlLnByb3RvdHlwZS5fYmluZEFycmFuZ2VDb21wbGV0ZSA9IGZ1bmN0aW9uKCkge1xyXG4gICAgLy8gbGlzdGVuIGZvciAzIGV2ZW50cyB0byB0cmlnZ2VyIGFycmFuZ2VDb21wbGV0ZVxyXG4gICAgdmFyIGlzTGF5b3V0Q29tcGxldGUsIGlzSGlkZUNvbXBsZXRlLCBpc1JldmVhbENvbXBsZXRlO1xyXG4gICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgIGZ1bmN0aW9uIGFycmFuZ2VQYXJhbGxlbENhbGxiYWNrKCkge1xyXG4gICAgICBpZiAoIGlzTGF5b3V0Q29tcGxldGUgJiYgaXNIaWRlQ29tcGxldGUgJiYgaXNSZXZlYWxDb21wbGV0ZSApIHtcclxuICAgICAgICBfdGhpcy5kaXNwYXRjaEV2ZW50KCAnYXJyYW5nZUNvbXBsZXRlJywgbnVsbCwgWyBfdGhpcy5maWx0ZXJlZEl0ZW1zIF0gKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgdGhpcy5vbmNlKCAnbGF5b3V0Q29tcGxldGUnLCBmdW5jdGlvbigpIHtcclxuICAgICAgaXNMYXlvdXRDb21wbGV0ZSA9IHRydWU7XHJcbiAgICAgIGFycmFuZ2VQYXJhbGxlbENhbGxiYWNrKCk7XHJcbiAgICB9KTtcclxuICAgIHRoaXMub25jZSggJ2hpZGVDb21wbGV0ZScsIGZ1bmN0aW9uKCkge1xyXG4gICAgICBpc0hpZGVDb21wbGV0ZSA9IHRydWU7XHJcbiAgICAgIGFycmFuZ2VQYXJhbGxlbENhbGxiYWNrKCk7XHJcbiAgICB9KTtcclxuICAgIHRoaXMub25jZSggJ3JldmVhbENvbXBsZXRlJywgZnVuY3Rpb24oKSB7XHJcbiAgICAgIGlzUmV2ZWFsQ29tcGxldGUgPSB0cnVlO1xyXG4gICAgICBhcnJhbmdlUGFyYWxsZWxDYWxsYmFjaygpO1xyXG4gICAgfSk7XHJcbiAgfTtcclxuXHJcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gZmlsdGVyIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIC8vXHJcblxyXG4gIElzb3RvcGUucHJvdG90eXBlLl9maWx0ZXIgPSBmdW5jdGlvbiggaXRlbXMgKSB7XHJcbiAgICB2YXIgZmlsdGVyID0gdGhpcy5vcHRpb25zLmZpbHRlcjtcclxuICAgIGZpbHRlciA9IGZpbHRlciB8fCAnKic7XHJcbiAgICB2YXIgbWF0Y2hlcyA9IFtdO1xyXG4gICAgdmFyIGhpZGRlbk1hdGNoZWQgPSBbXTtcclxuICAgIHZhciB2aXNpYmxlVW5tYXRjaGVkID0gW107XHJcblxyXG4gICAgdmFyIHRlc3QgPSB0aGlzLl9nZXRGaWx0ZXJUZXN0KCBmaWx0ZXIgKTtcclxuXHJcbiAgICAvLyB0ZXN0IGVhY2ggaXRlbVxyXG4gICAgZm9yICggdmFyIGk9MCwgbGVuID0gaXRlbXMubGVuZ3RoOyBpIDwgbGVuOyBpKysgKSB7XHJcbiAgICAgIHZhciBpdGVtID0gaXRlbXNbaV07XHJcbiAgICAgIGlmICggaXRlbS5pc0lnbm9yZWQgKSB7XHJcbiAgICAgICAgY29udGludWU7XHJcbiAgICAgIH1cclxuICAgICAgLy8gYWRkIGl0ZW0gdG8gZWl0aGVyIG1hdGNoZWQgb3IgdW5tYXRjaGVkIGdyb3VwXHJcbiAgICAgIHZhciBpc01hdGNoZWQgPSB0ZXN0KCBpdGVtICk7XHJcbiAgICAgIC8vIGl0ZW0uaXNGaWx0ZXJNYXRjaGVkID0gaXNNYXRjaGVkO1xyXG4gICAgICAvLyBhZGQgdG8gbWF0Y2hlcyBpZiBpdHMgYSBtYXRjaFxyXG4gICAgICBpZiAoIGlzTWF0Y2hlZCApIHtcclxuICAgICAgICBtYXRjaGVzLnB1c2goIGl0ZW0gKTtcclxuICAgICAgfVxyXG4gICAgICAvLyBhZGQgdG8gYWRkaXRpb25hbCBncm91cCBpZiBpdGVtIG5lZWRzIHRvIGJlIGhpZGRlbiBvciByZXZlYWxlZFxyXG4gICAgICBpZiAoIGlzTWF0Y2hlZCAmJiBpdGVtLmlzSGlkZGVuICkge1xyXG4gICAgICAgIGhpZGRlbk1hdGNoZWQucHVzaCggaXRlbSApO1xyXG4gICAgICB9IGVsc2UgaWYgKCAhaXNNYXRjaGVkICYmICFpdGVtLmlzSGlkZGVuICkge1xyXG4gICAgICAgIHZpc2libGVVbm1hdGNoZWQucHVzaCggaXRlbSApO1xyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLy8gcmV0dXJuIGNvbGxlY3Rpb25zIG9mIGl0ZW1zIHRvIGJlIG1hbmlwdWxhdGVkXHJcbiAgICByZXR1cm4ge1xyXG4gICAgICBtYXRjaGVzOiBtYXRjaGVzLFxyXG4gICAgICBuZWVkUmV2ZWFsOiBoaWRkZW5NYXRjaGVkLFxyXG4gICAgICBuZWVkSGlkZTogdmlzaWJsZVVubWF0Y2hlZFxyXG4gICAgfTtcclxuICB9O1xyXG5cclxuICAvLyBnZXQgYSBqUXVlcnksIGZ1bmN0aW9uLCBvciBhIG1hdGNoZXNTZWxlY3RvciB0ZXN0IGdpdmVuIHRoZSBmaWx0ZXJcclxuICBJc290b3BlLnByb3RvdHlwZS5fZ2V0RmlsdGVyVGVzdCA9IGZ1bmN0aW9uKCBmaWx0ZXIgKSB7XHJcbiAgICBpZiAoIGpRdWVyeSAmJiB0aGlzLm9wdGlvbnMuaXNKUXVlcnlGaWx0ZXJpbmcgKSB7XHJcbiAgICAgIC8vIHVzZSBqUXVlcnlcclxuICAgICAgcmV0dXJuIGZ1bmN0aW9uKCBpdGVtICkge1xyXG4gICAgICAgIHJldHVybiBqUXVlcnkoIGl0ZW0uZWxlbWVudCApLmlzKCBmaWx0ZXIgKTtcclxuICAgICAgfTtcclxuICAgIH1cclxuICAgIGlmICggdHlwZW9mIGZpbHRlciA9PSAnZnVuY3Rpb24nICkge1xyXG4gICAgICAvLyB1c2UgZmlsdGVyIGFzIGZ1bmN0aW9uXHJcbiAgICAgIHJldHVybiBmdW5jdGlvbiggaXRlbSApIHtcclxuICAgICAgICByZXR1cm4gZmlsdGVyKCBpdGVtLmVsZW1lbnQgKTtcclxuICAgICAgfTtcclxuICAgIH1cclxuICAgIC8vIGRlZmF1bHQsIHVzZSBmaWx0ZXIgYXMgc2VsZWN0b3Igc3RyaW5nXHJcbiAgICByZXR1cm4gZnVuY3Rpb24oIGl0ZW0gKSB7XHJcbiAgICAgIHJldHVybiBtYXRjaGVzU2VsZWN0b3IoIGl0ZW0uZWxlbWVudCwgZmlsdGVyICk7XHJcbiAgICB9O1xyXG4gIH07XHJcblxyXG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIHNvcnRpbmcgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gLy9cclxuXHJcbiAgLyoqXHJcbiAgICogQHBhcmFtcyB7QXJyYXl9IGVsZW1zXHJcbiAgICogQHB1YmxpY1xyXG4gICAqL1xyXG4gIElzb3RvcGUucHJvdG90eXBlLnVwZGF0ZVNvcnREYXRhID0gZnVuY3Rpb24oIGVsZW1zICkge1xyXG4gICAgLy8gZ2V0IGl0ZW1zXHJcbiAgICB2YXIgaXRlbXM7XHJcbiAgICBpZiAoIGVsZW1zICkge1xyXG4gICAgICBlbGVtcyA9IHV0aWxzLm1ha2VBcnJheSggZWxlbXMgKTtcclxuICAgICAgaXRlbXMgPSB0aGlzLmdldEl0ZW1zKCBlbGVtcyApO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgLy8gdXBkYXRlIGFsbCBpdGVtcyBpZiBubyBlbGVtcyBwcm92aWRlZFxyXG4gICAgICBpdGVtcyA9IHRoaXMuaXRlbXM7XHJcbiAgICB9XHJcblxyXG4gICAgdGhpcy5fZ2V0U29ydGVycygpO1xyXG4gICAgdGhpcy5fdXBkYXRlSXRlbXNTb3J0RGF0YSggaXRlbXMgKTtcclxuICB9O1xyXG5cclxuICBJc290b3BlLnByb3RvdHlwZS5fZ2V0U29ydGVycyA9IGZ1bmN0aW9uKCkge1xyXG4gICAgdmFyIGdldFNvcnREYXRhID0gdGhpcy5vcHRpb25zLmdldFNvcnREYXRhO1xyXG4gICAgZm9yICggdmFyIGtleSBpbiBnZXRTb3J0RGF0YSApIHtcclxuICAgICAgdmFyIHNvcnRlciA9IGdldFNvcnREYXRhWyBrZXkgXTtcclxuICAgICAgdGhpcy5fc29ydGVyc1sga2V5IF0gPSBtdW5nZVNvcnRlciggc29ydGVyICk7XHJcbiAgICB9XHJcbiAgfTtcclxuXHJcbiAgLyoqXHJcbiAgICogQHBhcmFtcyB7QXJyYXl9IGl0ZW1zIC0gb2YgSXNvdG9wZS5JdGVtc1xyXG4gICAqIEBwcml2YXRlXHJcbiAgICovXHJcbiAgSXNvdG9wZS5wcm90b3R5cGUuX3VwZGF0ZUl0ZW1zU29ydERhdGEgPSBmdW5jdGlvbiggaXRlbXMgKSB7XHJcbiAgICAvLyBkbyBub3QgdXBkYXRlIGlmIG5vIGl0ZW1zXHJcbiAgICB2YXIgbGVuID0gaXRlbXMgJiYgaXRlbXMubGVuZ3RoO1xyXG5cclxuICAgIGZvciAoIHZhciBpPTA7IGxlbiAmJiBpIDwgbGVuOyBpKysgKSB7XHJcbiAgICAgIHZhciBpdGVtID0gaXRlbXNbaV07XHJcbiAgICAgIGl0ZW0udXBkYXRlU29ydERhdGEoKTtcclxuICAgIH1cclxuICB9O1xyXG5cclxuICAvLyAtLS0tLSBtdW5nZSBzb3J0ZXIgLS0tLS0gLy9cclxuXHJcbiAgLy8gZW5jYXBzdWxhdGUgdGhpcywgYXMgd2UganVzdCBuZWVkIG11bmdlU29ydGVyXHJcbiAgLy8gb3RoZXIgZnVuY3Rpb25zIGluIGhlcmUgYXJlIGp1c3QgZm9yIG11bmdpbmdcclxuICB2YXIgbXVuZ2VTb3J0ZXIgPSAoIGZ1bmN0aW9uKCkge1xyXG4gICAgLy8gYWRkIGEgbWFnaWMgbGF5ZXIgdG8gc29ydGVycyBmb3IgY29udmllbmVudCBzaG9ydGhhbmRzXHJcbiAgICAvLyBgLmZvby1iYXJgIHdpbGwgdXNlIHRoZSB0ZXh0IG9mIC5mb28tYmFyIHF1ZXJ5U2VsZWN0b3JcclxuICAgIC8vIGBbZm9vLWJhcl1gIHdpbGwgdXNlIGF0dHJpYnV0ZVxyXG4gICAgLy8geW91IGNhbiBhbHNvIGFkZCBwYXJzZXJcclxuICAgIC8vIGAuZm9vLWJhciBwYXJzZUludGAgd2lsbCBwYXJzZSB0aGF0IGFzIGEgbnVtYmVyXHJcbiAgICBmdW5jdGlvbiBtdW5nZVNvcnRlciggc29ydGVyICkge1xyXG4gICAgICAvLyBpZiBub3QgYSBzdHJpbmcsIHJldHVybiBmdW5jdGlvbiBvciB3aGF0ZXZlciBpdCBpc1xyXG4gICAgICBpZiAoIHR5cGVvZiBzb3J0ZXIgIT0gJ3N0cmluZycgKSB7XHJcbiAgICAgICAgcmV0dXJuIHNvcnRlcjtcclxuICAgICAgfVxyXG4gICAgICAvLyBwYXJzZSB0aGUgc29ydGVyIHN0cmluZ1xyXG4gICAgICB2YXIgYXJncyA9IHRyaW0oIHNvcnRlciApLnNwbGl0KCcgJyk7XHJcbiAgICAgIHZhciBxdWVyeSA9IGFyZ3NbMF07XHJcbiAgICAgIC8vIGNoZWNrIGlmIHF1ZXJ5IGxvb2tzIGxpa2UgW2FuLWF0dHJpYnV0ZV1cclxuICAgICAgdmFyIGF0dHJNYXRjaCA9IHF1ZXJ5Lm1hdGNoKCAvXlxcWyguKylcXF0kLyApO1xyXG4gICAgICB2YXIgYXR0ciA9IGF0dHJNYXRjaCAmJiBhdHRyTWF0Y2hbMV07XHJcbiAgICAgIHZhciBnZXRWYWx1ZSA9IGdldFZhbHVlR2V0dGVyKCBhdHRyLCBxdWVyeSApO1xyXG4gICAgICAvLyB1c2Ugc2Vjb25kIGFyZ3VtZW50IGFzIGEgcGFyc2VyXHJcbiAgICAgIHZhciBwYXJzZXIgPSBJc290b3BlLnNvcnREYXRhUGFyc2Vyc1sgYXJnc1sxXSBdO1xyXG4gICAgICAvLyBwYXJzZSB0aGUgdmFsdWUsIGlmIHRoZXJlIHdhcyBhIHBhcnNlclxyXG4gICAgICBzb3J0ZXIgPSBwYXJzZXIgPyBmdW5jdGlvbiggZWxlbSApIHtcclxuICAgICAgICByZXR1cm4gZWxlbSAmJiBwYXJzZXIoIGdldFZhbHVlKCBlbGVtICkgKTtcclxuICAgICAgfSA6XHJcbiAgICAgIC8vIG90aGVyd2lzZSBqdXN0IHJldHVybiB2YWx1ZVxyXG4gICAgICBmdW5jdGlvbiggZWxlbSApIHtcclxuICAgICAgICByZXR1cm4gZWxlbSAmJiBnZXRWYWx1ZSggZWxlbSApO1xyXG4gICAgICB9O1xyXG5cclxuICAgICAgcmV0dXJuIHNvcnRlcjtcclxuICAgIH1cclxuXHJcbiAgICAvLyBnZXQgYW4gYXR0cmlidXRlIGdldHRlciwgb3IgZ2V0IHRleHQgb2YgdGhlIHF1ZXJ5U2VsZWN0b3JcclxuICAgIGZ1bmN0aW9uIGdldFZhbHVlR2V0dGVyKCBhdHRyLCBxdWVyeSApIHtcclxuICAgICAgdmFyIGdldFZhbHVlO1xyXG4gICAgICAvLyBpZiBxdWVyeSBsb29rcyBsaWtlIFtmb28tYmFyXSwgZ2V0IGF0dHJpYnV0ZVxyXG4gICAgICBpZiAoIGF0dHIgKSB7XHJcbiAgICAgICAgZ2V0VmFsdWUgPSBmdW5jdGlvbiggZWxlbSApIHtcclxuICAgICAgICAgIHJldHVybiBlbGVtLmdldEF0dHJpYnV0ZSggYXR0ciApO1xyXG4gICAgICAgIH07XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgLy8gb3RoZXJ3aXNlLCBhc3N1bWUgaXRzIGEgcXVlcnlTZWxlY3RvciwgYW5kIGdldCBpdHMgdGV4dFxyXG4gICAgICAgIGdldFZhbHVlID0gZnVuY3Rpb24oIGVsZW0gKSB7XHJcbiAgICAgICAgICB2YXIgY2hpbGQgPSBlbGVtLnF1ZXJ5U2VsZWN0b3IoIHF1ZXJ5ICk7XHJcbiAgICAgICAgICByZXR1cm4gY2hpbGQgJiYgZ2V0VGV4dCggY2hpbGQgKTtcclxuICAgICAgICB9O1xyXG4gICAgICB9XHJcbiAgICAgIHJldHVybiBnZXRWYWx1ZTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gbXVuZ2VTb3J0ZXI7XHJcbiAgfSkoKTtcclxuXHJcbiAgLy8gcGFyc2VycyB1c2VkIGluIGdldFNvcnREYXRhIHNob3J0Y3V0IHN0cmluZ3NcclxuICBJc290b3BlLnNvcnREYXRhUGFyc2VycyA9IHtcclxuICAgICdwYXJzZUludCc6IGZ1bmN0aW9uKCB2YWwgKSB7XHJcbiAgICAgIHJldHVybiBwYXJzZUludCggdmFsLCAxMCApO1xyXG4gICAgfSxcclxuICAgICdwYXJzZUZsb2F0JzogZnVuY3Rpb24oIHZhbCApIHtcclxuICAgICAgcmV0dXJuIHBhcnNlRmxvYXQoIHZhbCApO1xyXG4gICAgfVxyXG4gIH07XHJcblxyXG4gIC8vIC0tLS0tIHNvcnQgbWV0aG9kIC0tLS0tIC8vXHJcblxyXG4gIC8vIHNvcnQgZmlsdGVyZWRJdGVtIG9yZGVyXHJcbiAgSXNvdG9wZS5wcm90b3R5cGUuX3NvcnQgPSBmdW5jdGlvbigpIHtcclxuICAgIHZhciBzb3J0QnlPcHQgPSB0aGlzLm9wdGlvbnMuc29ydEJ5O1xyXG4gICAgaWYgKCAhc29ydEJ5T3B0ICkge1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgICAvLyBjb25jYXQgYWxsIHNvcnRCeSBhbmQgc29ydEhpc3RvcnlcclxuICAgIHZhciBzb3J0QnlzID0gW10uY29uY2F0LmFwcGx5KCBzb3J0QnlPcHQsIHRoaXMuc29ydEhpc3RvcnkgKTtcclxuICAgIC8vIHNvcnQgbWFnaWNcclxuICAgIHZhciBpdGVtU29ydGVyID0gZ2V0SXRlbVNvcnRlciggc29ydEJ5cywgdGhpcy5vcHRpb25zLnNvcnRBc2NlbmRpbmcgKTtcclxuICAgIHRoaXMuZmlsdGVyZWRJdGVtcy5zb3J0KCBpdGVtU29ydGVyICk7XHJcbiAgICAvLyBrZWVwIHRyYWNrIG9mIHNvcnRCeSBIaXN0b3J5XHJcbiAgICBpZiAoIHNvcnRCeU9wdCAhPSB0aGlzLnNvcnRIaXN0b3J5WzBdICkge1xyXG4gICAgICAvLyBhZGQgdG8gZnJvbnQsIG9sZGVzdCBnb2VzIGluIGxhc3RcclxuICAgICAgdGhpcy5zb3J0SGlzdG9yeS51bnNoaWZ0KCBzb3J0QnlPcHQgKTtcclxuICAgIH1cclxuICB9O1xyXG5cclxuICAvLyByZXR1cm5zIGEgZnVuY3Rpb24gdXNlZCBmb3Igc29ydGluZ1xyXG4gIGZ1bmN0aW9uIGdldEl0ZW1Tb3J0ZXIoIHNvcnRCeXMsIHNvcnRBc2MgKSB7XHJcbiAgICByZXR1cm4gZnVuY3Rpb24gc29ydGVyKCBpdGVtQSwgaXRlbUIgKSB7XHJcbiAgICAgIC8vIGN5Y2xlIHRocm91Z2ggYWxsIHNvcnRLZXlzXHJcbiAgICAgIGZvciAoIHZhciBpID0gMCwgbGVuID0gc29ydEJ5cy5sZW5ndGg7IGkgPCBsZW47IGkrKyApIHtcclxuICAgICAgICB2YXIgc29ydEJ5ID0gc29ydEJ5c1tpXTtcclxuICAgICAgICB2YXIgYSA9IGl0ZW1BLnNvcnREYXRhWyBzb3J0QnkgXTtcclxuICAgICAgICB2YXIgYiA9IGl0ZW1CLnNvcnREYXRhWyBzb3J0QnkgXTtcclxuICAgICAgICBpZiAoIGEgPiBiIHx8IGEgPCBiICkge1xyXG4gICAgICAgICAgLy8gaWYgc29ydEFzYyBpcyBhbiBvYmplY3QsIHVzZSB0aGUgdmFsdWUgZ2l2ZW4gdGhlIHNvcnRCeSBrZXlcclxuICAgICAgICAgIHZhciBpc0FzY2VuZGluZyA9IHNvcnRBc2NbIHNvcnRCeSBdICE9PSB1bmRlZmluZWQgPyBzb3J0QXNjWyBzb3J0QnkgXSA6IHNvcnRBc2M7XHJcbiAgICAgICAgICB2YXIgZGlyZWN0aW9uID0gaXNBc2NlbmRpbmcgPyAxIDogLTE7XHJcbiAgICAgICAgICByZXR1cm4gKCBhID4gYiA/IDEgOiAtMSApICogZGlyZWN0aW9uO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgICByZXR1cm4gMDtcclxuICAgIH07XHJcbiAgfVxyXG5cclxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBtZXRob2RzIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIC8vXHJcblxyXG4gIC8vIGdldCBsYXlvdXQgbW9kZVxyXG4gIElzb3RvcGUucHJvdG90eXBlLl9tb2RlID0gZnVuY3Rpb24oKSB7XHJcbiAgICB2YXIgbGF5b3V0TW9kZSA9IHRoaXMub3B0aW9ucy5sYXlvdXRNb2RlO1xyXG4gICAgdmFyIG1vZGUgPSB0aGlzLm1vZGVzWyBsYXlvdXRNb2RlIF07XHJcbiAgICBpZiAoICFtb2RlICkge1xyXG4gICAgICAvLyBUT0RPIGNvbnNvbGUuZXJyb3JcclxuICAgICAgdGhyb3cgbmV3IEVycm9yKCAnTm8gbGF5b3V0IG1vZGU6ICcgKyBsYXlvdXRNb2RlICk7XHJcbiAgICB9XHJcbiAgICAvLyBIQUNLIHN5bmMgbW9kZSdzIG9wdGlvbnNcclxuICAgIC8vIGFueSBvcHRpb25zIHNldCBhZnRlciBpbml0IGZvciBsYXlvdXQgbW9kZSBuZWVkIHRvIGJlIHN5bmNlZFxyXG4gICAgbW9kZS5vcHRpb25zID0gdGhpcy5vcHRpb25zWyBsYXlvdXRNb2RlIF07XHJcbiAgICByZXR1cm4gbW9kZTtcclxuICB9O1xyXG5cclxuICBJc290b3BlLnByb3RvdHlwZS5fcmVzZXRMYXlvdXQgPSBmdW5jdGlvbigpIHtcclxuICAgIC8vIHRyaWdnZXIgb3JpZ2luYWwgcmVzZXQgbGF5b3V0XHJcbiAgICBPdXRsYXllci5wcm90b3R5cGUuX3Jlc2V0TGF5b3V0LmNhbGwoIHRoaXMgKTtcclxuICAgIHRoaXMuX21vZGUoKS5fcmVzZXRMYXlvdXQoKTtcclxuICB9O1xyXG5cclxuICBJc290b3BlLnByb3RvdHlwZS5fZ2V0SXRlbUxheW91dFBvc2l0aW9uID0gZnVuY3Rpb24oIGl0ZW0gICkge1xyXG4gICAgcmV0dXJuIHRoaXMuX21vZGUoKS5fZ2V0SXRlbUxheW91dFBvc2l0aW9uKCBpdGVtICk7XHJcbiAgfTtcclxuXHJcbiAgSXNvdG9wZS5wcm90b3R5cGUuX21hbmFnZVN0YW1wID0gZnVuY3Rpb24oIHN0YW1wICkge1xyXG4gICAgdGhpcy5fbW9kZSgpLl9tYW5hZ2VTdGFtcCggc3RhbXAgKTtcclxuICB9O1xyXG5cclxuICBJc290b3BlLnByb3RvdHlwZS5fZ2V0Q29udGFpbmVyU2l6ZSA9IGZ1bmN0aW9uKCkge1xyXG4gICAgcmV0dXJuIHRoaXMuX21vZGUoKS5fZ2V0Q29udGFpbmVyU2l6ZSgpO1xyXG4gIH07XHJcblxyXG4gIElzb3RvcGUucHJvdG90eXBlLm5lZWRzUmVzaXplTGF5b3V0ID0gZnVuY3Rpb24oKSB7XHJcbiAgICByZXR1cm4gdGhpcy5fbW9kZSgpLm5lZWRzUmVzaXplTGF5b3V0KCk7XHJcbiAgfTtcclxuXHJcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gYWRkaW5nICYgcmVtb3ZpbmcgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gLy9cclxuXHJcbiAgLy8gSEVBRFMgVVAgb3ZlcndyaXRlcyBkZWZhdWx0IE91dGxheWVyIGFwcGVuZGVkXHJcbiAgSXNvdG9wZS5wcm90b3R5cGUuYXBwZW5kZWQgPSBmdW5jdGlvbiggZWxlbXMgKSB7XHJcbiAgICB2YXIgaXRlbXMgPSB0aGlzLmFkZEl0ZW1zKCBlbGVtcyApO1xyXG4gICAgaWYgKCAhaXRlbXMubGVuZ3RoICkge1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgICAvLyBmaWx0ZXIsIGxheW91dCwgcmV2ZWFsIG5ldyBpdGVtc1xyXG4gICAgdmFyIGZpbHRlcmVkSXRlbXMgPSB0aGlzLl9maWx0ZXJSZXZlYWxBZGRlZCggaXRlbXMgKTtcclxuICAgIC8vIGFkZCB0byBmaWx0ZXJlZEl0ZW1zXHJcbiAgICB0aGlzLmZpbHRlcmVkSXRlbXMgPSB0aGlzLmZpbHRlcmVkSXRlbXMuY29uY2F0KCBmaWx0ZXJlZEl0ZW1zICk7XHJcbiAgfTtcclxuXHJcbiAgLy8gSEVBRFMgVVAgb3ZlcndyaXRlcyBkZWZhdWx0IE91dGxheWVyIHByZXBlbmRlZFxyXG4gIElzb3RvcGUucHJvdG90eXBlLnByZXBlbmRlZCA9IGZ1bmN0aW9uKCBlbGVtcyApIHtcclxuICAgIHZhciBpdGVtcyA9IHRoaXMuX2l0ZW1pemUoIGVsZW1zICk7XHJcbiAgICBpZiAoICFpdGVtcy5sZW5ndGggKSB7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIC8vIHN0YXJ0IG5ldyBsYXlvdXRcclxuICAgIHRoaXMuX3Jlc2V0TGF5b3V0KCk7XHJcbiAgICB0aGlzLl9tYW5hZ2VTdGFtcHMoKTtcclxuICAgIC8vIGZpbHRlciwgbGF5b3V0LCByZXZlYWwgbmV3IGl0ZW1zXHJcbiAgICB2YXIgZmlsdGVyZWRJdGVtcyA9IHRoaXMuX2ZpbHRlclJldmVhbEFkZGVkKCBpdGVtcyApO1xyXG4gICAgLy8gbGF5b3V0IHByZXZpb3VzIGl0ZW1zXHJcbiAgICB0aGlzLmxheW91dEl0ZW1zKCB0aGlzLmZpbHRlcmVkSXRlbXMgKTtcclxuICAgIC8vIGFkZCB0byBpdGVtcyBhbmQgZmlsdGVyZWRJdGVtc1xyXG4gICAgdGhpcy5maWx0ZXJlZEl0ZW1zID0gZmlsdGVyZWRJdGVtcy5jb25jYXQoIHRoaXMuZmlsdGVyZWRJdGVtcyApO1xyXG4gICAgdGhpcy5pdGVtcyA9IGl0ZW1zLmNvbmNhdCggdGhpcy5pdGVtcyApO1xyXG4gIH07XHJcblxyXG4gIElzb3RvcGUucHJvdG90eXBlLl9maWx0ZXJSZXZlYWxBZGRlZCA9IGZ1bmN0aW9uKCBpdGVtcyApIHtcclxuICAgIHZhciBmaWx0ZXJlZCA9IHRoaXMuX2ZpbHRlciggaXRlbXMgKTtcclxuICAgIHRoaXMuaGlkZSggZmlsdGVyZWQubmVlZEhpZGUgKTtcclxuICAgIC8vIHJldmVhbCBhbGwgbmV3IGl0ZW1zXHJcbiAgICB0aGlzLnJldmVhbCggZmlsdGVyZWQubWF0Y2hlcyApO1xyXG4gICAgLy8gbGF5b3V0IG5ldyBpdGVtcywgbm8gdHJhbnNpdGlvblxyXG4gICAgdGhpcy5sYXlvdXRJdGVtcyggZmlsdGVyZWQubWF0Y2hlcywgdHJ1ZSApO1xyXG4gICAgcmV0dXJuIGZpbHRlcmVkLm1hdGNoZXM7XHJcbiAgfTtcclxuXHJcbiAgLyoqXHJcbiAgICogRmlsdGVyLCBzb3J0LCBhbmQgbGF5b3V0IG5ld2x5LWFwcGVuZGVkIGl0ZW0gZWxlbWVudHNcclxuICAgKiBAcGFyYW0ge0FycmF5IG9yIE5vZGVMaXN0IG9yIEVsZW1lbnR9IGVsZW1zXHJcbiAgICovXHJcbiAgSXNvdG9wZS5wcm90b3R5cGUuaW5zZXJ0ID0gZnVuY3Rpb24oIGVsZW1zICkge1xyXG4gICAgdmFyIGl0ZW1zID0gdGhpcy5hZGRJdGVtcyggZWxlbXMgKTtcclxuICAgIGlmICggIWl0ZW1zLmxlbmd0aCApIHtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgLy8gYXBwZW5kIGl0ZW0gZWxlbWVudHNcclxuICAgIHZhciBpLCBpdGVtO1xyXG4gICAgdmFyIGxlbiA9IGl0ZW1zLmxlbmd0aDtcclxuICAgIGZvciAoIGk9MDsgaSA8IGxlbjsgaSsrICkge1xyXG4gICAgICBpdGVtID0gaXRlbXNbaV07XHJcbiAgICAgIHRoaXMuZWxlbWVudC5hcHBlbmRDaGlsZCggaXRlbS5lbGVtZW50ICk7XHJcbiAgICB9XHJcbiAgICAvLyBmaWx0ZXIgbmV3IHN0dWZmXHJcbiAgICB2YXIgZmlsdGVyZWRJbnNlcnRJdGVtcyA9IHRoaXMuX2ZpbHRlciggaXRlbXMgKS5tYXRjaGVzO1xyXG4gICAgLy8gc2V0IGZsYWdcclxuICAgIGZvciAoIGk9MDsgaSA8IGxlbjsgaSsrICkge1xyXG4gICAgICBpdGVtc1tpXS5pc0xheW91dEluc3RhbnQgPSB0cnVlO1xyXG4gICAgfVxyXG4gICAgdGhpcy5hcnJhbmdlKCk7XHJcbiAgICAvLyByZXNldCBmbGFnXHJcbiAgICBmb3IgKCBpPTA7IGkgPCBsZW47IGkrKyApIHtcclxuICAgICAgZGVsZXRlIGl0ZW1zW2ldLmlzTGF5b3V0SW5zdGFudDtcclxuICAgIH1cclxuICAgIHRoaXMucmV2ZWFsKCBmaWx0ZXJlZEluc2VydEl0ZW1zICk7XHJcbiAgfTtcclxuXHJcbiAgdmFyIF9yZW1vdmUgPSBJc290b3BlLnByb3RvdHlwZS5yZW1vdmU7XHJcbiAgSXNvdG9wZS5wcm90b3R5cGUucmVtb3ZlID0gZnVuY3Rpb24oIGVsZW1zICkge1xyXG4gICAgZWxlbXMgPSB1dGlscy5tYWtlQXJyYXkoIGVsZW1zICk7XHJcbiAgICB2YXIgcmVtb3ZlSXRlbXMgPSB0aGlzLmdldEl0ZW1zKCBlbGVtcyApO1xyXG4gICAgLy8gZG8gcmVndWxhciB0aGluZ1xyXG4gICAgX3JlbW92ZS5jYWxsKCB0aGlzLCBlbGVtcyApO1xyXG4gICAgLy8gYmFpbCBpZiBubyBpdGVtcyB0byByZW1vdmVcclxuICAgIHZhciBsZW4gPSByZW1vdmVJdGVtcyAmJiByZW1vdmVJdGVtcy5sZW5ndGg7XHJcbiAgICBpZiAoICFsZW4gKSB7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIC8vIHJlbW92ZSBlbGVtcyBmcm9tIGZpbHRlcmVkSXRlbXNcclxuICAgIGZvciAoIHZhciBpPTA7IGkgPCBsZW47IGkrKyApIHtcclxuICAgICAgdmFyIGl0ZW0gPSByZW1vdmVJdGVtc1tpXTtcclxuICAgICAgLy8gcmVtb3ZlIGl0ZW0gZnJvbSBjb2xsZWN0aW9uXHJcbiAgICAgIHV0aWxzLnJlbW92ZUZyb20oIHRoaXMuZmlsdGVyZWRJdGVtcywgaXRlbSApO1xyXG4gICAgfVxyXG4gIH07XHJcblxyXG4gIElzb3RvcGUucHJvdG90eXBlLnNodWZmbGUgPSBmdW5jdGlvbigpIHtcclxuICAgIC8vIHVwZGF0ZSByYW5kb20gc29ydERhdGFcclxuICAgIGZvciAoIHZhciBpPTAsIGxlbiA9IHRoaXMuaXRlbXMubGVuZ3RoOyBpIDwgbGVuOyBpKysgKSB7XHJcbiAgICAgIHZhciBpdGVtID0gdGhpcy5pdGVtc1tpXTtcclxuICAgICAgaXRlbS5zb3J0RGF0YS5yYW5kb20gPSBNYXRoLnJhbmRvbSgpO1xyXG4gICAgfVxyXG4gICAgdGhpcy5vcHRpb25zLnNvcnRCeSA9ICdyYW5kb20nO1xyXG4gICAgdGhpcy5fc29ydCgpO1xyXG4gICAgdGhpcy5fbGF5b3V0KCk7XHJcbiAgfTtcclxuXHJcbiAgLyoqXHJcbiAgICogdHJpZ2dlciBmbiB3aXRob3V0IHRyYW5zaXRpb25cclxuICAgKiBraW5kIG9mIGhhY2t5IHRvIGhhdmUgdGhpcyBpbiB0aGUgZmlyc3QgcGxhY2VcclxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmblxyXG4gICAqIEByZXR1cm5zIHJldFxyXG4gICAqIEBwcml2YXRlXHJcbiAgICovXHJcbiAgSXNvdG9wZS5wcm90b3R5cGUuX25vVHJhbnNpdGlvbiA9IGZ1bmN0aW9uKCBmbiApIHtcclxuICAgIC8vIHNhdmUgdHJhbnNpdGlvbkR1cmF0aW9uIGJlZm9yZSBkaXNhYmxpbmdcclxuICAgIHZhciB0cmFuc2l0aW9uRHVyYXRpb24gPSB0aGlzLm9wdGlvbnMudHJhbnNpdGlvbkR1cmF0aW9uO1xyXG4gICAgLy8gZGlzYWJsZSB0cmFuc2l0aW9uXHJcbiAgICB0aGlzLm9wdGlvbnMudHJhbnNpdGlvbkR1cmF0aW9uID0gMDtcclxuICAgIC8vIGRvIGl0XHJcbiAgICB2YXIgcmV0dXJuVmFsdWUgPSBmbi5jYWxsKCB0aGlzICk7XHJcbiAgICAvLyByZS1lbmFibGUgdHJhbnNpdGlvbiBmb3IgcmV2ZWFsXHJcbiAgICB0aGlzLm9wdGlvbnMudHJhbnNpdGlvbkR1cmF0aW9uID0gdHJhbnNpdGlvbkR1cmF0aW9uO1xyXG4gICAgcmV0dXJuIHJldHVyblZhbHVlO1xyXG4gIH07XHJcblxyXG4gIC8vIC0tLS0tIGhlbHBlciBtZXRob2RzIC0tLS0tIC8vXHJcblxyXG4gIC8qKlxyXG4gICAqIGdldHRlciBtZXRob2QgZm9yIGdldHRpbmcgZmlsdGVyZWQgaXRlbSBlbGVtZW50c1xyXG4gICAqIEByZXR1cm5zIHtBcnJheX0gZWxlbXMgLSBjb2xsZWN0aW9uIG9mIGl0ZW0gZWxlbWVudHNcclxuICAgKi9cclxuICBJc290b3BlLnByb3RvdHlwZS5nZXRGaWx0ZXJlZEl0ZW1FbGVtZW50cyA9IGZ1bmN0aW9uKCkge1xyXG4gICAgdmFyIGVsZW1zID0gW107XHJcbiAgICBmb3IgKCB2YXIgaT0wLCBsZW4gPSB0aGlzLmZpbHRlcmVkSXRlbXMubGVuZ3RoOyBpIDwgbGVuOyBpKysgKSB7XHJcbiAgICAgIGVsZW1zLnB1c2goIHRoaXMuZmlsdGVyZWRJdGVtc1tpXS5lbGVtZW50ICk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gZWxlbXM7XHJcbiAgfTtcclxuXHJcbiAgLy8gLS0tLS0gIC0tLS0tIC8vXHJcblxyXG4gIHJldHVybiBJc290b3BlO1xyXG5cclxufSkpO1xyXG5cclxuLy8gU2ltcGxlIEphdmFTY3JpcHQgVGVtcGxhdGluZ1xyXG4vLyBKb2huIFJlc2lnIC0gaHR0cDovL2Vqb2huLm9yZy8gLSBNSVQgTGljZW5zZWRcclxuKGZ1bmN0aW9uKCl7XHJcbiAgdmFyIGNhY2hlID0ge307XHJcbiBcclxuICB0aGlzLnRtcGwgPSBmdW5jdGlvbiB0bXBsKHN0ciwgZGF0YSl7XHJcbiAgICAvLyBGaWd1cmUgb3V0IGlmIHdlJ3JlIGdldHRpbmcgYSB0ZW1wbGF0ZSwgb3IgaWYgd2UgbmVlZCB0b1xyXG4gICAgLy8gbG9hZCB0aGUgdGVtcGxhdGUgLSBhbmQgYmUgc3VyZSB0byBjYWNoZSB0aGUgcmVzdWx0LlxyXG4gICAgdmFyIGZuID0gIS9cXFcvLnRlc3Qoc3RyKSA/XHJcbiAgICAgIGNhY2hlW3N0cl0gPSBjYWNoZVtzdHJdIHx8XHJcbiAgICAgICAgdG1wbChkb2N1bWVudC5nZXRFbGVtZW50QnlJZChzdHIpLmlubmVySFRNTCkgOlxyXG4gICAgIFxyXG4gICAgICAvLyBHZW5lcmF0ZSBhIHJldXNhYmxlIGZ1bmN0aW9uIHRoYXQgd2lsbCBzZXJ2ZSBhcyBhIHRlbXBsYXRlXHJcbiAgICAgIC8vIGdlbmVyYXRvciAoYW5kIHdoaWNoIHdpbGwgYmUgY2FjaGVkKS5cclxuICAgICAgbmV3IEZ1bmN0aW9uKFwib2JqXCIsXHJcbiAgICAgICAgXCJ2YXIgcD1bXSxwcmludD1mdW5jdGlvbigpe3AucHVzaC5hcHBseShwLGFyZ3VtZW50cyk7fTtcIiArXHJcbiAgICAgICBcclxuICAgICAgICAvLyBJbnRyb2R1Y2UgdGhlIGRhdGEgYXMgbG9jYWwgdmFyaWFibGVzIHVzaW5nIHdpdGgoKXt9XHJcbiAgICAgICAgXCJ3aXRoKG9iail7cC5wdXNoKCdcIiArXHJcbiAgICAgICBcclxuICAgICAgICAvLyBDb252ZXJ0IHRoZSB0ZW1wbGF0ZSBpbnRvIHB1cmUgSmF2YVNjcmlwdFxyXG4gICAgICAgIHN0clxyXG4gICAgICAgICAgLnJlcGxhY2UoL1tcXHJcXHRcXG5dL2csIFwiIFwiKVxyXG4gICAgICAgICAgLnNwbGl0KFwiPCVcIikuam9pbihcIlxcdFwiKVxyXG4gICAgICAgICAgLnJlcGxhY2UoLygoXnwlPilbXlxcdF0qKScvZywgXCIkMVxcclwiKVxyXG4gICAgICAgICAgLnJlcGxhY2UoL1xcdD0oLio/KSU+L2csIFwiJywkMSwnXCIpXHJcbiAgICAgICAgICAuc3BsaXQoXCJcXHRcIikuam9pbihcIicpO1wiKVxyXG4gICAgICAgICAgLnNwbGl0KFwiJT5cIikuam9pbihcInAucHVzaCgnXCIpXHJcbiAgICAgICAgICAuc3BsaXQoXCJcXHJcIikuam9pbihcIlxcXFwnXCIpXHJcbiAgICAgICsgXCInKTt9cmV0dXJuIHAuam9pbignJyk7XCIpO1xyXG4gICBcclxuICAgIC8vIFByb3ZpZGUgc29tZSBiYXNpYyBjdXJyeWluZyB0byB0aGUgdXNlclxyXG4gICAgcmV0dXJuIGRhdGEgPyBmbiggZGF0YSApIDogZm47XHJcbiAgfTtcclxufSkoKTtcclxuJChmdW5jdGlvbigpIHtcclxuXHQkKCcuamNhcm91c2VsJylcclxuXHRcdC5qY2Fyb3VzZWwoe1xyXG5cdFx0XHRhbmltYXRpb246ICdzbG93JyxcclxuXHRcdFx0d3JhcDogJ2NpcmN1bGFyJ1xyXG5cdFx0fSlcclxuXHRcdC5qY2Fyb3VzZWxBdXRvc2Nyb2xsKHtcclxuXHRcdFx0aW50ZXJ2YWw6IDQwMDAsXHJcblx0XHRcdHRhcmdldDogJys9MScsXHJcblx0XHRcdGF1dG9zdGFydDogdHJ1ZVxyXG5cdH0pO1xyXG5cclxuXHQkKCcuamNhcm91c2VsLWNvbnRyb2wtcHJldicpXHJcblx0XHQub24oJ2pjYXJvdXNlbGNvbnRyb2w6YWN0aXZlJywgZnVuY3Rpb24oKSB7XHJcblx0XHRcdCQodGhpcykucmVtb3ZlQ2xhc3MoJ2luYWN0aXZlJyk7XHJcblx0XHR9KVxyXG5cdFx0Lm9uKCdqY2Fyb3VzZWxjb250cm9sOmluYWN0aXZlJywgZnVuY3Rpb24oKSB7XHJcblx0XHRcdCQodGhpcykuYWRkQ2xhc3MoJ2luYWN0aXZlJyk7XHJcblx0XHR9KVxyXG5cdFx0LmpjYXJvdXNlbENvbnRyb2woe1xyXG5cdFx0XHR0YXJnZXQ6ICctPTEnXHJcblx0fSk7XHJcblxyXG5cdCQoJy5qY2Fyb3VzZWwtY29udHJvbC1uZXh0JylcclxuXHRcdC5vbignamNhcm91c2VsY29udHJvbDphY3RpdmUnLCBmdW5jdGlvbigpIHtcclxuXHRcdFx0JCh0aGlzKS5yZW1vdmVDbGFzcygnaW5hY3RpdmUnKTtcclxuXHRcdH0pXHJcblx0XHQub24oJ2pjYXJvdXNlbGNvbnRyb2w6aW5hY3RpdmUnLCBmdW5jdGlvbigpIHtcclxuXHRcdFx0JCh0aGlzKS5hZGRDbGFzcygnaW5hY3RpdmUnKTtcclxuXHRcdH0pXHJcblx0XHQuamNhcm91c2VsQ29udHJvbCh7XHJcblx0XHRcdHRhcmdldDogJys9MSdcclxuXHR9KTtcclxuXHJcblx0dmFyIHF1ZXJ5V29yZCA9ICcnO1xyXG5cdHZhciBBUElfS0VZID0gJzIyNzIxMzgtNzhiZGRmMzBhZDkzYWY1ODc0ZTdhMDc5MSc7XHJcblx0dmFyIHBhZ2UgPSAxO1xyXG5cdHZhciBwZXJQYWdlID0gNztcclxuXHJcblx0ZnVuY3Rpb24gcmVuZGVySW1hZ2VzKHF1ZXJ5V29yZCkge1xyXG5cdFx0JC5hamF4KHtcclxuXHRcdFx0dHlwZTogJ0dFVCcsXHJcblx0XHRcdGRhdGFUeXBlOiAnanNvbicsXHJcblx0XHRcdGNhY2hlOiBmYWxzZSxcclxuXHRcdFx0dXJsOiAnaHR0cHM6Ly9waXhhYmF5LmNvbS9hcGkvP2tleT0nICsgQVBJX0tFWSArICcmcT0nICsgcXVlcnlXb3JkICsgJyZwYWdlPScgKyBwYWdlICsgJyZwZXJfcGFnZT0nICsgcGVyUGFnZSArICcmaW1hZ2VfdHlwZT1waG90bycsXHJcblx0XHRcdHN1Y2Nlc3M6IGZ1bmN0aW9uIChkYXRhKSB7XHJcblx0XHRcdFx0Y29uc29sZS5sb2coZGF0YSk7XHJcblxyXG5cdFx0XHRcdHZhciBodG1sID0gJCgnI2lkZWFzLXRtcGwnKS5odG1sKCk7XHJcblx0XHRcdFx0dmFyIGNvbnRlbnQgPSB0bXBsKCBodG1sLCB7XHJcblx0XHRcdFx0XHRkYXRhOiBkYXRhLmhpdHNcclxuXHRcdFx0XHR9KTtcclxuXHJcblx0XHRcdFx0JCgnLmdyaWQnKS5yZW1vdmUoKTtcclxuXHRcdFx0XHQkKCcuaWRlYXMgLndyYXBwZXInKS5hcHBlbmQoY29udGVudCk7XHJcblxyXG5cdFx0XHRcdCQoJy5ncmlkJykuaXNvdG9wZSh7XHJcblx0XHRcdFx0XHRpdGVtU2VsZWN0b3I6ICcuZ3JpZC1pdGVtJyxcclxuXHRcdFx0XHRcdGxheW91dE1vZGU6ICdtYXNvbnJ5JyxcclxuXHRcdFx0XHRcdG1hc29ucnk6IHtcclxuXHRcdFx0XHRcdFx0Z3V0dGVyOiAyMFxyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH0pO1xyXG5cdFx0XHR9XHJcblx0XHR9KTtcclxuXHR9XHJcblxyXG5cdCQoJy5zZWFyY2hfX2J1dHRvbicpLm9uKCdjbGljaycsIGZ1bmN0aW9uKGUpIHtcclxuXHRcdGUucHJldmVudERlZmF1bHQoKTtcclxuXHRcdHZhciBxdWVyeSA9ICQoJy5zZWFyY2hfX2lucHV0Jyk7XHJcblx0XHRyZW5kZXJJbWFnZXMoZW5jb2RlVVJJQ29tcG9uZW50KCBxdWVyeS52YWwoKSApKTtcclxuXHRcdHF1ZXJ5LnZhbCgnJyk7XHJcblx0fSk7XHJcblxyXG5cdHJlbmRlckltYWdlcyhxdWVyeVdvcmQpO1xyXG59KTsiXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=
