!function(t,e){"object"==typeof module&&"object"==typeof module.exports?module.exports=t.document?e(t,!0):function(t){if(!t.document)throw new Error("jQuery requires a window with a document");return e(t)}:e(t)}("undefined"!=typeof window?window:this,function(t,e){function n(t){var e="length"in t&&t.length,n=rt.type(t);return"function"===n||rt.isWindow(t)?!1:1===t.nodeType&&e?!0:"array"===n||0===e||"number"==typeof e&&e>0&&e-1 in t}function i(t,e,n){if(rt.isFunction(e))return rt.grep(t,function(t,i){return!!e.call(t,i,t)!==n});if(e.nodeType)return rt.grep(t,function(t){return t===e!==n});if("string"==typeof e){if(pt.test(e))return rt.filter(e,t,n);e=rt.filter(e,t)}return rt.grep(t,function(t){return rt.inArray(t,e)>=0!==n})}function r(t,e){do t=t[e];while(t&&1!==t.nodeType);return t}function o(t){var e=bt[t]={};return rt.each(t.match(xt)||[],function(t,n){e[n]=!0}),e}function s(){dt.addEventListener?(dt.removeEventListener("DOMContentLoaded",a,!1),t.removeEventListener("load",a,!1)):(dt.detachEvent("onreadystatechange",a),t.detachEvent("onload",a))}function a(){(dt.addEventListener||"load"===event.type||"complete"===dt.readyState)&&(s(),rt.ready())}function u(t,e,n){if(void 0===n&&1===t.nodeType){var i="data-"+e.replace(Ct,"-$1").toLowerCase();if(n=t.getAttribute(i),"string"==typeof n){try{n="true"===n?!0:"false"===n?!1:"null"===n?null:+n+""===n?+n:Et.test(n)?rt.parseJSON(n):n}catch(r){}rt.data(t,e,n)}else n=void 0}return n}function l(t){var e;for(e in t)if(("data"!==e||!rt.isEmptyObject(t[e]))&&"toJSON"!==e)return!1;return!0}function c(t,e,n,i){if(rt.acceptData(t)){var r,o,s=rt.expando,a=t.nodeType,u=a?rt.cache:t,l=a?t[s]:t[s]&&s;if(l&&u[l]&&(i||u[l].data)||void 0!==n||"string"!=typeof e)return l||(l=a?t[s]=V.pop()||rt.guid++:s),u[l]||(u[l]=a?{}:{toJSON:rt.noop}),"object"!=typeof e&&"function"!=typeof e||(i?u[l]=rt.extend(u[l],e):u[l].data=rt.extend(u[l].data,e)),o=u[l],i||(o.data||(o.data={}),o=o.data),void 0!==n&&(o[rt.camelCase(e)]=n),"string"==typeof e?(r=o[e],null==r&&(r=o[rt.camelCase(e)])):r=o,r}}function h(t,e,n){if(rt.acceptData(t)){var i,r,o=t.nodeType,s=o?rt.cache:t,a=o?t[rt.expando]:rt.expando;if(s[a]){if(e&&(i=n?s[a]:s[a].data)){rt.isArray(e)?e=e.concat(rt.map(e,rt.camelCase)):e in i?e=[e]:(e=rt.camelCase(e),e=e in i?[e]:e.split(" ")),r=e.length;for(;r--;)delete i[e[r]];if(n?!l(i):!rt.isEmptyObject(i))return}(n||(delete s[a].data,l(s[a])))&&(o?rt.cleanData([t],!0):nt.deleteExpando||s!=s.window?delete s[a]:s[a]=null)}}}function p(){return!0}function f(){return!1}function d(){try{return dt.activeElement}catch(t){}}function m(t){var e=qt.split("|"),n=t.createDocumentFragment();if(n.createElement)for(;e.length;)n.createElement(e.pop());return n}function y(t,e){var n,i,r=0,o=typeof t.getElementsByTagName!==Tt?t.getElementsByTagName(e||"*"):typeof t.querySelectorAll!==Tt?t.querySelectorAll(e||"*"):void 0;if(!o)for(o=[],n=t.childNodes||t;null!=(i=n[r]);r++)!e||rt.nodeName(i,e)?o.push(i):rt.merge(o,y(i,e));return void 0===e||e&&rt.nodeName(t,e)?rt.merge([t],o):o}function g(t){kt.test(t.type)&&(t.defaultChecked=t.checked)}function v(t,e){return rt.nodeName(t,"table")&&rt.nodeName(11!==e.nodeType?e:e.firstChild,"tr")?t.getElementsByTagName("tbody")[0]||t.appendChild(t.ownerDocument.createElement("tbody")):t}function x(t){return t.type=(null!==rt.find.attr(t,"type"))+"/"+t.type,t}function b(t){var e=Yt.exec(t.type);return e?t.type=e[1]:t.removeAttribute("type"),t}function _(t,e){for(var n,i=0;null!=(n=t[i]);i++)rt._data(n,"globalEval",!e||rt._data(e[i],"globalEval"))}function w(t,e){if(1===e.nodeType&&rt.hasData(t)){var n,i,r,o=rt._data(t),s=rt._data(e,o),a=o.events;if(a){delete s.handle,s.events={};for(n in a)for(i=0,r=a[n].length;r>i;i++)rt.event.add(e,n,a[n][i])}s.data&&(s.data=rt.extend({},s.data))}}function T(t,e){var n,i,r;if(1===e.nodeType){if(n=e.nodeName.toLowerCase(),!nt.noCloneEvent&&e[rt.expando]){r=rt._data(e);for(i in r.events)rt.removeEvent(e,i,r.handle);e.removeAttribute(rt.expando)}"script"===n&&e.text!==t.text?(x(e).text=t.text,b(e)):"object"===n?(e.parentNode&&(e.outerHTML=t.outerHTML),nt.html5Clone&&t.innerHTML&&!rt.trim(e.innerHTML)&&(e.innerHTML=t.innerHTML)):"input"===n&&kt.test(t.type)?(e.defaultChecked=e.checked=t.checked,e.value!==t.value&&(e.value=t.value)):"option"===n?e.defaultSelected=e.selected=t.defaultSelected:"input"!==n&&"textarea"!==n||(e.defaultValue=t.defaultValue)}}function E(e,n){var i,r=rt(n.createElement(e)).appendTo(n.body),o=t.getDefaultComputedStyle&&(i=t.getDefaultComputedStyle(r[0]))?i.display:rt.css(r[0],"display");return r.detach(),o}function C(t){var e=dt,n=Zt[t];return n||(n=E(t,e),"none"!==n&&n||(Kt=(Kt||rt("<iframe frameborder='0' width='0' height='0'/>")).appendTo(e.documentElement),e=(Kt[0].contentWindow||Kt[0].contentDocument).document,e.write(),e.close(),n=E(t,e),Kt.detach()),Zt[t]=n),n}function S(t,e){return{get:function(){var n=t();if(null!=n)return n?void delete this.get:(this.get=e).apply(this,arguments)}}}function j(t,e){if(e in t)return e;for(var n=e.charAt(0).toUpperCase()+e.slice(1),i=e,r=pe.length;r--;)if(e=pe[r]+n,e in t)return e;return i}function L(t,e){for(var n,i,r,o=[],s=0,a=t.length;a>s;s++)i=t[s],i.style&&(o[s]=rt._data(i,"olddisplay"),n=i.style.display,e?(o[s]||"none"!==n||(i.style.display=""),""===i.style.display&&Lt(i)&&(o[s]=rt._data(i,"olddisplay",C(i.nodeName)))):(r=Lt(i),(n&&"none"!==n||!r)&&rt._data(i,"olddisplay",r?n:rt.css(i,"display"))));for(s=0;a>s;s++)i=t[s],i.style&&(e&&"none"!==i.style.display&&""!==i.style.display||(i.style.display=e?o[s]||"":"none"));return t}function N(t,e,n){var i=ue.exec(e);return i?Math.max(0,i[1]-(n||0))+(i[2]||"px"):e}function k(t,e,n,i,r){for(var o=n===(i?"border":"content")?4:"width"===e?1:0,s=0;4>o;o+=2)"margin"===n&&(s+=rt.css(t,n+jt[o],!0,r)),i?("content"===n&&(s-=rt.css(t,"padding"+jt[o],!0,r)),"margin"!==n&&(s-=rt.css(t,"border"+jt[o]+"Width",!0,r))):(s+=rt.css(t,"padding"+jt[o],!0,r),"padding"!==n&&(s+=rt.css(t,"border"+jt[o]+"Width",!0,r)));return s}function I(t,e,n){var i=!0,r="width"===e?t.offsetWidth:t.offsetHeight,o=te(t),s=nt.boxSizing&&"border-box"===rt.css(t,"boxSizing",!1,o);if(0>=r||null==r){if(r=ee(t,e,o),(0>r||null==r)&&(r=t.style[e]),ie.test(r))return r;i=s&&(nt.boxSizingReliable()||r===t.style[e]),r=parseFloat(r)||0}return r+k(t,e,n||(s?"border":"content"),i,o)+"px"}function z(t,e,n,i,r){return new z.prototype.init(t,e,n,i,r)}function D(){return setTimeout(function(){fe=void 0}),fe=rt.now()}function A(t,e){var n,i={height:t},r=0;for(e=e?1:0;4>r;r+=2-e)n=jt[r],i["margin"+n]=i["padding"+n]=t;return e&&(i.opacity=i.width=t),i}function H(t,e,n){for(var i,r=(xe[e]||[]).concat(xe["*"]),o=0,s=r.length;s>o;o++)if(i=r[o].call(n,e,t))return i}function q(t,e,n){var i,r,o,s,a,u,l,c,h=this,p={},f=t.style,d=t.nodeType&&Lt(t),m=rt._data(t,"fxshow");n.queue||(a=rt._queueHooks(t,"fx"),null==a.unqueued&&(a.unqueued=0,u=a.empty.fire,a.empty.fire=function(){a.unqueued||u()}),a.unqueued++,h.always(function(){h.always(function(){a.unqueued--,rt.queue(t,"fx").length||a.empty.fire()})})),1===t.nodeType&&("height"in e||"width"in e)&&(n.overflow=[f.overflow,f.overflowX,f.overflowY],l=rt.css(t,"display"),c="none"===l?rt._data(t,"olddisplay")||C(t.nodeName):l,"inline"===c&&"none"===rt.css(t,"float")&&(nt.inlineBlockNeedsLayout&&"inline"!==C(t.nodeName)?f.zoom=1:f.display="inline-block")),n.overflow&&(f.overflow="hidden",nt.shrinkWrapBlocks()||h.always(function(){f.overflow=n.overflow[0],f.overflowX=n.overflow[1],f.overflowY=n.overflow[2]}));for(i in e)if(r=e[i],me.exec(r)){if(delete e[i],o=o||"toggle"===r,r===(d?"hide":"show")){if("show"!==r||!m||void 0===m[i])continue;d=!0}p[i]=m&&m[i]||rt.style(t,i)}else l=void 0;if(rt.isEmptyObject(p))"inline"===("none"===l?C(t.nodeName):l)&&(f.display=l);else{m?"hidden"in m&&(d=m.hidden):m=rt._data(t,"fxshow",{}),o&&(m.hidden=!d),d?rt(t).show():h.done(function(){rt(t).hide()}),h.done(function(){var e;rt._removeData(t,"fxshow");for(e in p)rt.style(t,e,p[e])});for(i in p)s=H(d?m[i]:0,i,h),i in m||(m[i]=s.start,d&&(s.end=s.start,s.start="width"===i||"height"===i?1:0))}}function M(t,e){var n,i,r,o,s;for(n in t)if(i=rt.camelCase(n),r=e[i],o=t[n],rt.isArray(o)&&(r=o[1],o=t[n]=o[0]),n!==i&&(t[i]=o,delete t[n]),s=rt.cssHooks[i],s&&"expand"in s){o=s.expand(o),delete t[i];for(n in o)n in t||(t[n]=o[n],e[n]=r)}else e[i]=r}function O(t,e,n){var i,r,o=0,s=ve.length,a=rt.Deferred().always(function(){delete u.elem}),u=function(){if(r)return!1;for(var e=fe||D(),n=Math.max(0,l.startTime+l.duration-e),i=n/l.duration||0,o=1-i,s=0,u=l.tweens.length;u>s;s++)l.tweens[s].run(o);return a.notifyWith(t,[l,o,n]),1>o&&u?n:(a.resolveWith(t,[l]),!1)},l=a.promise({elem:t,props:rt.extend({},e),opts:rt.extend(!0,{specialEasing:{}},n),originalProperties:e,originalOptions:n,startTime:fe||D(),duration:n.duration,tweens:[],createTween:function(e,n){var i=rt.Tween(t,l.opts,e,n,l.opts.specialEasing[e]||l.opts.easing);return l.tweens.push(i),i},stop:function(e){var n=0,i=e?l.tweens.length:0;if(r)return this;for(r=!0;i>n;n++)l.tweens[n].run(1);return e?a.resolveWith(t,[l,e]):a.rejectWith(t,[l,e]),this}}),c=l.props;for(M(c,l.opts.specialEasing);s>o;o++)if(i=ve[o].call(l,t,c,l.opts))return i;return rt.map(c,H,l),rt.isFunction(l.opts.start)&&l.opts.start.call(t,l),rt.fx.timer(rt.extend(u,{elem:t,anim:l,queue:l.opts.queue})),l.progress(l.opts.progress).done(l.opts.done,l.opts.complete).fail(l.opts.fail).always(l.opts.always)}function R(t){return function(e,n){"string"!=typeof e&&(n=e,e="*");var i,r=0,o=e.toLowerCase().match(xt)||[];if(rt.isFunction(n))for(;i=o[r++];)"+"===i.charAt(0)?(i=i.slice(1)||"*",(t[i]=t[i]||[]).unshift(n)):(t[i]=t[i]||[]).push(n)}}function W(t,e,n,i){function r(a){var u;return o[a]=!0,rt.each(t[a]||[],function(t,a){var l=a(e,n,i);return"string"!=typeof l||s||o[l]?s?!(u=l):void 0:(e.dataTypes.unshift(l),r(l),!1)}),u}var o={},s=t===Be;return r(e.dataTypes[0])||!o["*"]&&r("*")}function F(t,e){var n,i,r=rt.ajaxSettings.flatOptions||{};for(i in e)void 0!==e[i]&&((r[i]?t:n||(n={}))[i]=e[i]);return n&&rt.extend(!0,t,n),t}function P(t,e,n){for(var i,r,o,s,a=t.contents,u=t.dataTypes;"*"===u[0];)u.shift(),void 0===r&&(r=t.mimeType||e.getResponseHeader("Content-Type"));if(r)for(s in a)if(a[s]&&a[s].test(r)){u.unshift(s);break}if(u[0]in n)o=u[0];else{for(s in n){if(!u[0]||t.converters[s+" "+u[0]]){o=s;break}i||(i=s)}o=o||i}return o?(o!==u[0]&&u.unshift(o),n[o]):void 0}function B(t,e,n,i){var r,o,s,a,u,l={},c=t.dataTypes.slice();if(c[1])for(s in t.converters)l[s.toLowerCase()]=t.converters[s];for(o=c.shift();o;)if(t.responseFields[o]&&(n[t.responseFields[o]]=e),!u&&i&&t.dataFilter&&(e=t.dataFilter(e,t.dataType)),u=o,o=c.shift())if("*"===o)o=u;else if("*"!==u&&u!==o){if(s=l[u+" "+o]||l["* "+o],!s)for(r in l)if(a=r.split(" "),a[1]===o&&(s=l[u+" "+a[0]]||l["* "+a[0]])){s===!0?s=l[r]:l[r]!==!0&&(o=a[0],c.unshift(a[1]));break}if(s!==!0)if(s&&t["throws"])e=s(e);else try{e=s(e)}catch(h){return{state:"parsererror",error:s?h:"No conversion from "+u+" to "+o}}}return{state:"success",data:e}}function $(t,e,n,i){var r;if(rt.isArray(e))rt.each(e,function(e,r){n||Ye.test(t)?i(t,r):$(t+"["+("object"==typeof r?e:"")+"]",r,n,i)});else if(n||"object"!==rt.type(e))i(t,e);else for(r in e)$(t+"["+r+"]",e[r],n,i)}function X(){try{return new t.XMLHttpRequest}catch(e){}}function U(){try{return new t.ActiveXObject("Microsoft.XMLHTTP")}catch(e){}}function Y(t){return rt.isWindow(t)?t:9===t.nodeType?t.defaultView||t.parentWindow:!1}var V=[],Q=V.slice,G=V.concat,J=V.push,K=V.indexOf,Z={},tt=Z.toString,et=Z.hasOwnProperty,nt={},it="1.11.3",rt=function(t,e){return new rt.fn.init(t,e)},ot=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,st=/^-ms-/,at=/-([\da-z])/gi,ut=function(t,e){return e.toUpperCase()};rt.fn=rt.prototype={jquery:it,constructor:rt,selector:"",length:0,toArray:function(){return Q.call(this)},get:function(t){return null!=t?0>t?this[t+this.length]:this[t]:Q.call(this)},pushStack:function(t){var e=rt.merge(this.constructor(),t);return e.prevObject=this,e.context=this.context,e},each:function(t,e){return rt.each(this,t,e)},map:function(t){return this.pushStack(rt.map(this,function(e,n){return t.call(e,n,e)}))},slice:function(){return this.pushStack(Q.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},eq:function(t){var e=this.length,n=+t+(0>t?e:0);return this.pushStack(n>=0&&e>n?[this[n]]:[])},end:function(){return this.prevObject||this.constructor(null)},push:J,sort:V.sort,splice:V.splice},rt.extend=rt.fn.extend=function(){var t,e,n,i,r,o,s=arguments[0]||{},a=1,u=arguments.length,l=!1;for("boolean"==typeof s&&(l=s,s=arguments[a]||{},a++),"object"==typeof s||rt.isFunction(s)||(s={}),a===u&&(s=this,a--);u>a;a++)if(null!=(r=arguments[a]))for(i in r)t=s[i],n=r[i],s!==n&&(l&&n&&(rt.isPlainObject(n)||(e=rt.isArray(n)))?(e?(e=!1,o=t&&rt.isArray(t)?t:[]):o=t&&rt.isPlainObject(t)?t:{},s[i]=rt.extend(l,o,n)):void 0!==n&&(s[i]=n));return s},rt.extend({expando:"jQuery"+(it+Math.random()).replace(/\D/g,""),isReady:!0,error:function(t){throw new Error(t)},noop:function(){},isFunction:function(t){return"function"===rt.type(t)},isArray:Array.isArray||function(t){return"array"===rt.type(t)},isWindow:function(t){return null!=t&&t==t.window},isNumeric:function(t){return!rt.isArray(t)&&t-parseFloat(t)+1>=0},isEmptyObject:function(t){var e;for(e in t)return!1;return!0},isPlainObject:function(t){var e;if(!t||"object"!==rt.type(t)||t.nodeType||rt.isWindow(t))return!1;try{if(t.constructor&&!et.call(t,"constructor")&&!et.call(t.constructor.prototype,"isPrototypeOf"))return!1}catch(n){return!1}if(nt.ownLast)for(e in t)return et.call(t,e);for(e in t);return void 0===e||et.call(t,e)},type:function(t){return null==t?t+"":"object"==typeof t||"function"==typeof t?Z[tt.call(t)]||"object":typeof t},globalEval:function(e){e&&rt.trim(e)&&(t.execScript||function(e){t.eval.call(t,e)})(e)},camelCase:function(t){return t.replace(st,"ms-").replace(at,ut)},nodeName:function(t,e){return t.nodeName&&t.nodeName.toLowerCase()===e.toLowerCase()},each:function(t,e,i){var r,o=0,s=t.length,a=n(t);if(i){if(a)for(;s>o&&(r=e.apply(t[o],i),r!==!1);o++);else for(o in t)if(r=e.apply(t[o],i),r===!1)break}else if(a)for(;s>o&&(r=e.call(t[o],o,t[o]),r!==!1);o++);else for(o in t)if(r=e.call(t[o],o,t[o]),r===!1)break;return t},trim:function(t){return null==t?"":(t+"").replace(ot,"")},makeArray:function(t,e){var i=e||[];return null!=t&&(n(Object(t))?rt.merge(i,"string"==typeof t?[t]:t):J.call(i,t)),i},inArray:function(t,e,n){var i;if(e){if(K)return K.call(e,t,n);for(i=e.length,n=n?0>n?Math.max(0,i+n):n:0;i>n;n++)if(n in e&&e[n]===t)return n}return-1},merge:function(t,e){for(var n=+e.length,i=0,r=t.length;n>i;)t[r++]=e[i++];if(n!==n)for(;void 0!==e[i];)t[r++]=e[i++];return t.length=r,t},grep:function(t,e,n){for(var i,r=[],o=0,s=t.length,a=!n;s>o;o++)i=!e(t[o],o),i!==a&&r.push(t[o]);return r},map:function(t,e,i){var r,o=0,s=t.length,a=n(t),u=[];if(a)for(;s>o;o++)r=e(t[o],o,i),null!=r&&u.push(r);else for(o in t)r=e(t[o],o,i),null!=r&&u.push(r);return G.apply([],u)},guid:1,proxy:function(t,e){var n,i,r;return"string"==typeof e&&(r=t[e],e=t,t=r),rt.isFunction(t)?(n=Q.call(arguments,2),i=function(){return t.apply(e||this,n.concat(Q.call(arguments)))},i.guid=t.guid=t.guid||rt.guid++,i):void 0},now:function(){return+new Date},support:nt}),rt.each("Boolean Number String Function Array Date RegExp Object Error".split(" "),function(t,e){Z["[object "+e+"]"]=e.toLowerCase()});var lt=function(t){function e(t,e,n,i){var r,o,s,a,u,l,h,f,d,m;if((e?e.ownerDocument||e:W)!==z&&I(e),e=e||z,n=n||[],a=e.nodeType,"string"!=typeof t||!t||1!==a&&9!==a&&11!==a)return n;if(!i&&A){if(11!==a&&(r=vt.exec(t)))if(s=r[1]){if(9===a){if(o=e.getElementById(s),!o||!o.parentNode)return n;if(o.id===s)return n.push(o),n}else if(e.ownerDocument&&(o=e.ownerDocument.getElementById(s))&&O(e,o)&&o.id===s)return n.push(o),n}else{if(r[2])return K.apply(n,e.getElementsByTagName(t)),n;if((s=r[3])&&_.getElementsByClassName)return K.apply(n,e.getElementsByClassName(s)),n}if(_.qsa&&(!H||!H.test(t))){if(f=h=R,d=e,m=1!==a&&t,1===a&&"object"!==e.nodeName.toLowerCase()){for(l=C(t),(h=e.getAttribute("id"))?f=h.replace(bt,"\\$&"):e.setAttribute("id",f),f="[id='"+f+"'] ",u=l.length;u--;)l[u]=f+p(l[u]);d=xt.test(t)&&c(e.parentNode)||e,m=l.join(",")}if(m)try{return K.apply(n,d.querySelectorAll(m)),n}catch(y){}finally{h||e.removeAttribute("id")}}}return j(t.replace(ut,"$1"),e,n,i)}function n(){function t(n,i){return e.push(n+" ")>w.cacheLength&&delete t[e.shift()],t[n+" "]=i}var e=[];return t}function i(t){return t[R]=!0,t}function r(t){var e=z.createElement("div");try{return!!t(e)}catch(n){return!1}finally{e.parentNode&&e.parentNode.removeChild(e),e=null}}function o(t,e){for(var n=t.split("|"),i=t.length;i--;)w.attrHandle[n[i]]=e}function s(t,e){var n=e&&t,i=n&&1===t.nodeType&&1===e.nodeType&&(~e.sourceIndex||Y)-(~t.sourceIndex||Y);if(i)return i;if(n)for(;n=n.nextSibling;)if(n===e)return-1;return t?1:-1}function a(t){return function(e){var n=e.nodeName.toLowerCase();return"input"===n&&e.type===t}}function u(t){return function(e){var n=e.nodeName.toLowerCase();return("input"===n||"button"===n)&&e.type===t}}function l(t){return i(function(e){return e=+e,i(function(n,i){for(var r,o=t([],n.length,e),s=o.length;s--;)n[r=o[s]]&&(n[r]=!(i[r]=n[r]))})})}function c(t){return t&&"undefined"!=typeof t.getElementsByTagName&&t}function h(){}function p(t){for(var e=0,n=t.length,i="";n>e;e++)i+=t[e].value;return i}function f(t,e,n){var i=e.dir,r=n&&"parentNode"===i,o=P++;return e.first?function(e,n,o){for(;e=e[i];)if(1===e.nodeType||r)return t(e,n,o)}:function(e,n,s){var a,u,l=[F,o];if(s){for(;e=e[i];)if((1===e.nodeType||r)&&t(e,n,s))return!0}else for(;e=e[i];)if(1===e.nodeType||r){if(u=e[R]||(e[R]={}),(a=u[i])&&a[0]===F&&a[1]===o)return l[2]=a[2];if(u[i]=l,l[2]=t(e,n,s))return!0}}}function d(t){return t.length>1?function(e,n,i){for(var r=t.length;r--;)if(!t[r](e,n,i))return!1;return!0}:t[0]}function m(t,n,i){for(var r=0,o=n.length;o>r;r++)e(t,n[r],i);return i}function y(t,e,n,i,r){for(var o,s=[],a=0,u=t.length,l=null!=e;u>a;a++)(o=t[a])&&(n&&!n(o,i,r)||(s.push(o),l&&e.push(a)));return s}function g(t,e,n,r,o,s){return r&&!r[R]&&(r=g(r)),o&&!o[R]&&(o=g(o,s)),i(function(i,s,a,u){var l,c,h,p=[],f=[],d=s.length,g=i||m(e||"*",a.nodeType?[a]:a,[]),v=!t||!i&&e?g:y(g,p,t,a,u),x=n?o||(i?t:d||r)?[]:s:v;if(n&&n(v,x,a,u),r)for(l=y(x,f),r(l,[],a,u),c=l.length;c--;)(h=l[c])&&(x[f[c]]=!(v[f[c]]=h));if(i){if(o||t){if(o){for(l=[],c=x.length;c--;)(h=x[c])&&l.push(v[c]=h);o(null,x=[],l,u)}for(c=x.length;c--;)(h=x[c])&&(l=o?tt(i,h):p[c])>-1&&(i[l]=!(s[l]=h))}}else x=y(x===s?x.splice(d,x.length):x),o?o(null,s,x,u):K.apply(s,x)})}function v(t){for(var e,n,i,r=t.length,o=w.relative[t[0].type],s=o||w.relative[" "],a=o?1:0,u=f(function(t){return t===e},s,!0),l=f(function(t){return tt(e,t)>-1},s,!0),c=[function(t,n,i){var r=!o&&(i||n!==L)||((e=n).nodeType?u(t,n,i):l(t,n,i));return e=null,r}];r>a;a++)if(n=w.relative[t[a].type])c=[f(d(c),n)];else{if(n=w.filter[t[a].type].apply(null,t[a].matches),n[R]){for(i=++a;r>i&&!w.relative[t[i].type];i++);return g(a>1&&d(c),a>1&&p(t.slice(0,a-1).concat({value:" "===t[a-2].type?"*":""})).replace(ut,"$1"),n,i>a&&v(t.slice(a,i)),r>i&&v(t=t.slice(i)),r>i&&p(t))}c.push(n)}return d(c)}function x(t,n){var r=n.length>0,o=t.length>0,s=function(i,s,a,u,l){var c,h,p,f=0,d="0",m=i&&[],g=[],v=L,x=i||o&&w.find.TAG("*",l),b=F+=null==v?1:Math.random()||.1,_=x.length;for(l&&(L=s!==z&&s);d!==_&&null!=(c=x[d]);d++){if(o&&c){for(h=0;p=t[h++];)if(p(c,s,a)){u.push(c);break}l&&(F=b)}r&&((c=!p&&c)&&f--,i&&m.push(c))}if(f+=d,r&&d!==f){for(h=0;p=n[h++];)p(m,g,s,a);if(i){if(f>0)for(;d--;)m[d]||g[d]||(g[d]=G.call(u));g=y(g)}K.apply(u,g),l&&!i&&g.length>0&&f+n.length>1&&e.uniqueSort(u)}return l&&(F=b,L=v),m};return r?i(s):s}var b,_,w,T,E,C,S,j,L,N,k,I,z,D,A,H,q,M,O,R="sizzle"+1*new Date,W=t.document,F=0,P=0,B=n(),$=n(),X=n(),U=function(t,e){return t===e&&(k=!0),0},Y=1<<31,V={}.hasOwnProperty,Q=[],G=Q.pop,J=Q.push,K=Q.push,Z=Q.slice,tt=function(t,e){for(var n=0,i=t.length;i>n;n++)if(t[n]===e)return n;return-1},et="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",nt="[\\x20\\t\\r\\n\\f]",it="(?:\\\\.|[\\w-]|[^\\x00-\\xa0])+",rt=it.replace("w","w#"),ot="\\["+nt+"*("+it+")(?:"+nt+"*([*^$|!~]?=)"+nt+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+rt+"))|)"+nt+"*\\]",st=":("+it+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+ot+")*)|.*)\\)|)",at=new RegExp(nt+"+","g"),ut=new RegExp("^"+nt+"+|((?:^|[^\\\\])(?:\\\\.)*)"+nt+"+$","g"),lt=new RegExp("^"+nt+"*,"+nt+"*"),ct=new RegExp("^"+nt+"*([>+~]|"+nt+")"+nt+"*"),ht=new RegExp("="+nt+"*([^\\]'\"]*?)"+nt+"*\\]","g"),pt=new RegExp(st),ft=new RegExp("^"+rt+"$"),dt={ID:new RegExp("^#("+it+")"),CLASS:new RegExp("^\\.("+it+")"),TAG:new RegExp("^("+it.replace("w","w*")+")"),ATTR:new RegExp("^"+ot),PSEUDO:new RegExp("^"+st),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+nt+"*(even|odd|(([+-]|)(\\d*)n|)"+nt+"*(?:([+-]|)"+nt+"*(\\d+)|))"+nt+"*\\)|)","i"),bool:new RegExp("^(?:"+et+")$","i"),needsContext:new RegExp("^"+nt+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+nt+"*((?:-\\d)?\\d*)"+nt+"*\\)|)(?=[^-]|$)","i")},mt=/^(?:input|select|textarea|button)$/i,yt=/^h\d$/i,gt=/^[^{]+\{\s*\[native \w/,vt=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,xt=/[+~]/,bt=/'|\\/g,_t=new RegExp("\\\\([\\da-f]{1,6}"+nt+"?|("+nt+")|.)","ig"),wt=function(t,e,n){var i="0x"+e-65536;return i!==i||n?e:0>i?String.fromCharCode(i+65536):String.fromCharCode(i>>10|55296,1023&i|56320)},Tt=function(){I()};try{K.apply(Q=Z.call(W.childNodes),W.childNodes),Q[W.childNodes.length].nodeType}catch(Et){K={apply:Q.length?function(t,e){J.apply(t,Z.call(e))}:function(t,e){for(var n=t.length,i=0;t[n++]=e[i++];);t.length=n-1}}}_=e.support={},E=e.isXML=function(t){var e=t&&(t.ownerDocument||t).documentElement;return e?"HTML"!==e.nodeName:!1},I=e.setDocument=function(t){var e,n,i=t?t.ownerDocument||t:W;return i!==z&&9===i.nodeType&&i.documentElement?(z=i,D=i.documentElement,n=i.defaultView,n&&n!==n.top&&(n.addEventListener?n.addEventListener("unload",Tt,!1):n.attachEvent&&n.attachEvent("onunload",Tt)),A=!E(i),_.attributes=r(function(t){return t.className="i",!t.getAttribute("className")}),_.getElementsByTagName=r(function(t){return t.appendChild(i.createComment("")),!t.getElementsByTagName("*").length}),_.getElementsByClassName=gt.test(i.getElementsByClassName),_.getById=r(function(t){return D.appendChild(t).id=R,!i.getElementsByName||!i.getElementsByName(R).length}),_.getById?(w.find.ID=function(t,e){if("undefined"!=typeof e.getElementById&&A){var n=e.getElementById(t);return n&&n.parentNode?[n]:[]}},w.filter.ID=function(t){var e=t.replace(_t,wt);return function(t){return t.getAttribute("id")===e}}):(delete w.find.ID,w.filter.ID=function(t){var e=t.replace(_t,wt);return function(t){var n="undefined"!=typeof t.getAttributeNode&&t.getAttributeNode("id");return n&&n.value===e}}),w.find.TAG=_.getElementsByTagName?function(t,e){return"undefined"!=typeof e.getElementsByTagName?e.getElementsByTagName(t):_.qsa?e.querySelectorAll(t):void 0}:function(t,e){var n,i=[],r=0,o=e.getElementsByTagName(t);if("*"===t){for(;n=o[r++];)1===n.nodeType&&i.push(n);return i}return o},w.find.CLASS=_.getElementsByClassName&&function(t,e){return A?e.getElementsByClassName(t):void 0},q=[],H=[],(_.qsa=gt.test(i.querySelectorAll))&&(r(function(t){D.appendChild(t).innerHTML="<a id='"+R+"'></a><select id='"+R+"-\f]' msallowcapture=''><option selected=''></option></select>",t.querySelectorAll("[msallowcapture^='']").length&&H.push("[*^$]="+nt+"*(?:''|\"\")"),t.querySelectorAll("[selected]").length||H.push("\\["+nt+"*(?:value|"+et+")"),t.querySelectorAll("[id~="+R+"-]").length||H.push("~="),t.querySelectorAll(":checked").length||H.push(":checked"),t.querySelectorAll("a#"+R+"+*").length||H.push(".#.+[+~]")}),r(function(t){var e=i.createElement("input");e.setAttribute("type","hidden"),t.appendChild(e).setAttribute("name","D"),t.querySelectorAll("[name=d]").length&&H.push("name"+nt+"*[*^$|!~]?="),t.querySelectorAll(":enabled").length||H.push(":enabled",":disabled"),t.querySelectorAll("*,:x"),H.push(",.*:")})),(_.matchesSelector=gt.test(M=D.matches||D.webkitMatchesSelector||D.mozMatchesSelector||D.oMatchesSelector||D.msMatchesSelector))&&r(function(t){_.disconnectedMatch=M.call(t,"div"),M.call(t,"[s!='']:x"),q.push("!=",st)}),H=H.length&&new RegExp(H.join("|")),q=q.length&&new RegExp(q.join("|")),e=gt.test(D.compareDocumentPosition),O=e||gt.test(D.contains)?function(t,e){var n=9===t.nodeType?t.documentElement:t,i=e&&e.parentNode;return t===i||!(!i||1!==i.nodeType||!(n.contains?n.contains(i):t.compareDocumentPosition&&16&t.compareDocumentPosition(i)))}:function(t,e){if(e)for(;e=e.parentNode;)if(e===t)return!0;return!1},U=e?function(t,e){if(t===e)return k=!0,0;var n=!t.compareDocumentPosition-!e.compareDocumentPosition;return n?n:(n=(t.ownerDocument||t)===(e.ownerDocument||e)?t.compareDocumentPosition(e):1,1&n||!_.sortDetached&&e.compareDocumentPosition(t)===n?t===i||t.ownerDocument===W&&O(W,t)?-1:e===i||e.ownerDocument===W&&O(W,e)?1:N?tt(N,t)-tt(N,e):0:4&n?-1:1)}:function(t,e){if(t===e)return k=!0,0;var n,r=0,o=t.parentNode,a=e.parentNode,u=[t],l=[e];if(!o||!a)return t===i?-1:e===i?1:o?-1:a?1:N?tt(N,t)-tt(N,e):0;if(o===a)return s(t,e);for(n=t;n=n.parentNode;)u.unshift(n);for(n=e;n=n.parentNode;)l.unshift(n);for(;u[r]===l[r];)r++;return r?s(u[r],l[r]):u[r]===W?-1:l[r]===W?1:0},i):z},e.matches=function(t,n){return e(t,null,null,n)},e.matchesSelector=function(t,n){if((t.ownerDocument||t)!==z&&I(t),n=n.replace(ht,"='$1']"),_.matchesSelector&&A&&(!q||!q.test(n))&&(!H||!H.test(n)))try{var i=M.call(t,n);if(i||_.disconnectedMatch||t.document&&11!==t.document.nodeType)return i}catch(r){}return e(n,z,null,[t]).length>0},e.contains=function(t,e){return(t.ownerDocument||t)!==z&&I(t),O(t,e)},e.attr=function(t,e){(t.ownerDocument||t)!==z&&I(t);var n=w.attrHandle[e.toLowerCase()],i=n&&V.call(w.attrHandle,e.toLowerCase())?n(t,e,!A):void 0;return void 0!==i?i:_.attributes||!A?t.getAttribute(e):(i=t.getAttributeNode(e))&&i.specified?i.value:null},e.error=function(t){throw new Error("Syntax error, unrecognized expression: "+t)},e.uniqueSort=function(t){var e,n=[],i=0,r=0;if(k=!_.detectDuplicates,N=!_.sortStable&&t.slice(0),t.sort(U),k){for(;e=t[r++];)e===t[r]&&(i=n.push(r));for(;i--;)t.splice(n[i],1)}return N=null,t},T=e.getText=function(t){var e,n="",i=0,r=t.nodeType;if(r){if(1===r||9===r||11===r){if("string"==typeof t.textContent)return t.textContent;for(t=t.firstChild;t;t=t.nextSibling)n+=T(t)}else if(3===r||4===r)return t.nodeValue}else for(;e=t[i++];)n+=T(e);return n},w=e.selectors={cacheLength:50,createPseudo:i,match:dt,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(t){return t[1]=t[1].replace(_t,wt),t[3]=(t[3]||t[4]||t[5]||"").replace(_t,wt),"~="===t[2]&&(t[3]=" "+t[3]+" "),t.slice(0,4)},CHILD:function(t){return t[1]=t[1].toLowerCase(),"nth"===t[1].slice(0,3)?(t[3]||e.error(t[0]),t[4]=+(t[4]?t[5]+(t[6]||1):2*("even"===t[3]||"odd"===t[3])),t[5]=+(t[7]+t[8]||"odd"===t[3])):t[3]&&e.error(t[0]),t},PSEUDO:function(t){var e,n=!t[6]&&t[2];return dt.CHILD.test(t[0])?null:(t[3]?t[2]=t[4]||t[5]||"":n&&pt.test(n)&&(e=C(n,!0))&&(e=n.indexOf(")",n.length-e)-n.length)&&(t[0]=t[0].slice(0,e),t[2]=n.slice(0,e)),t.slice(0,3))}},filter:{TAG:function(t){var e=t.replace(_t,wt).toLowerCase();return"*"===t?function(){return!0}:function(t){return t.nodeName&&t.nodeName.toLowerCase()===e}},CLASS:function(t){var e=B[t+" "];return e||(e=new RegExp("(^|"+nt+")"+t+"("+nt+"|$)"))&&B(t,function(t){return e.test("string"==typeof t.className&&t.className||"undefined"!=typeof t.getAttribute&&t.getAttribute("class")||"")})},ATTR:function(t,n,i){return function(r){var o=e.attr(r,t);return null==o?"!="===n:n?(o+="","="===n?o===i:"!="===n?o!==i:"^="===n?i&&0===o.indexOf(i):"*="===n?i&&o.indexOf(i)>-1:"$="===n?i&&o.slice(-i.length)===i:"~="===n?(" "+o.replace(at," ")+" ").indexOf(i)>-1:"|="===n?o===i||o.slice(0,i.length+1)===i+"-":!1):!0}},CHILD:function(t,e,n,i,r){var o="nth"!==t.slice(0,3),s="last"!==t.slice(-4),a="of-type"===e;return 1===i&&0===r?function(t){return!!t.parentNode}:function(e,n,u){var l,c,h,p,f,d,m=o!==s?"nextSibling":"previousSibling",y=e.parentNode,g=a&&e.nodeName.toLowerCase(),v=!u&&!a;if(y){if(o){for(;m;){for(h=e;h=h[m];)if(a?h.nodeName.toLowerCase()===g:1===h.nodeType)return!1;d=m="only"===t&&!d&&"nextSibling"}return!0}if(d=[s?y.firstChild:y.lastChild],s&&v){for(c=y[R]||(y[R]={}),l=c[t]||[],f=l[0]===F&&l[1],p=l[0]===F&&l[2],h=f&&y.childNodes[f];h=++f&&h&&h[m]||(p=f=0)||d.pop();)if(1===h.nodeType&&++p&&h===e){c[t]=[F,f,p];break}}else if(v&&(l=(e[R]||(e[R]={}))[t])&&l[0]===F)p=l[1];else for(;(h=++f&&h&&h[m]||(p=f=0)||d.pop())&&((a?h.nodeName.toLowerCase()!==g:1!==h.nodeType)||!++p||(v&&((h[R]||(h[R]={}))[t]=[F,p]),h!==e)););return p-=r,p===i||p%i===0&&p/i>=0}}},PSEUDO:function(t,n){var r,o=w.pseudos[t]||w.setFilters[t.toLowerCase()]||e.error("unsupported pseudo: "+t);return o[R]?o(n):o.length>1?(r=[t,t,"",n],w.setFilters.hasOwnProperty(t.toLowerCase())?i(function(t,e){for(var i,r=o(t,n),s=r.length;s--;)i=tt(t,r[s]),t[i]=!(e[i]=r[s])}):function(t){return o(t,0,r)}):o}},pseudos:{not:i(function(t){var e=[],n=[],r=S(t.replace(ut,"$1"));return r[R]?i(function(t,e,n,i){for(var o,s=r(t,null,i,[]),a=t.length;a--;)(o=s[a])&&(t[a]=!(e[a]=o))}):function(t,i,o){return e[0]=t,r(e,null,o,n),e[0]=null,!n.pop()}}),has:i(function(t){return function(n){return e(t,n).length>0}}),contains:i(function(t){return t=t.replace(_t,wt),function(e){return(e.textContent||e.innerText||T(e)).indexOf(t)>-1}}),lang:i(function(t){return ft.test(t||"")||e.error("unsupported lang: "+t),t=t.replace(_t,wt).toLowerCase(),function(e){var n;do if(n=A?e.lang:e.getAttribute("xml:lang")||e.getAttribute("lang"))return n=n.toLowerCase(),n===t||0===n.indexOf(t+"-");while((e=e.parentNode)&&1===e.nodeType);return!1}}),target:function(e){var n=t.location&&t.location.hash;return n&&n.slice(1)===e.id},root:function(t){return t===D},focus:function(t){return t===z.activeElement&&(!z.hasFocus||z.hasFocus())&&!!(t.type||t.href||~t.tabIndex)},enabled:function(t){return t.disabled===!1},disabled:function(t){return t.disabled===!0},checked:function(t){var e=t.nodeName.toLowerCase();return"input"===e&&!!t.checked||"option"===e&&!!t.selected},selected:function(t){return t.parentNode&&t.parentNode.selectedIndex,t.selected===!0},empty:function(t){for(t=t.firstChild;t;t=t.nextSibling)if(t.nodeType<6)return!1;return!0},parent:function(t){return!w.pseudos.empty(t)},header:function(t){return yt.test(t.nodeName)},input:function(t){return mt.test(t.nodeName)},button:function(t){var e=t.nodeName.toLowerCase();return"input"===e&&"button"===t.type||"button"===e},text:function(t){var e;return"input"===t.nodeName.toLowerCase()&&"text"===t.type&&(null==(e=t.getAttribute("type"))||"text"===e.toLowerCase())},first:l(function(){return[0]}),last:l(function(t,e){return[e-1]}),eq:l(function(t,e,n){return[0>n?n+e:n]}),even:l(function(t,e){for(var n=0;e>n;n+=2)t.push(n);return t}),odd:l(function(t,e){for(var n=1;e>n;n+=2)t.push(n);return t}),lt:l(function(t,e,n){for(var i=0>n?n+e:n;--i>=0;)t.push(i);return t}),gt:l(function(t,e,n){for(var i=0>n?n+e:n;++i<e;)t.push(i);return t})}},w.pseudos.nth=w.pseudos.eq;for(b in{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})w.pseudos[b]=a(b);for(b in{submit:!0,reset:!0})w.pseudos[b]=u(b);return h.prototype=w.filters=w.pseudos,w.setFilters=new h,C=e.tokenize=function(t,n){var i,r,o,s,a,u,l,c=$[t+" "];if(c)return n?0:c.slice(0);for(a=t,u=[],l=w.preFilter;a;){i&&!(r=lt.exec(a))||(r&&(a=a.slice(r[0].length)||a),u.push(o=[])),i=!1,(r=ct.exec(a))&&(i=r.shift(),o.push({value:i,type:r[0].replace(ut," ")}),a=a.slice(i.length));for(s in w.filter)!(r=dt[s].exec(a))||l[s]&&!(r=l[s](r))||(i=r.shift(),
o.push({value:i,type:s,matches:r}),a=a.slice(i.length));if(!i)break}return n?a.length:a?e.error(t):$(t,u).slice(0)},S=e.compile=function(t,e){var n,i=[],r=[],o=X[t+" "];if(!o){for(e||(e=C(t)),n=e.length;n--;)o=v(e[n]),o[R]?i.push(o):r.push(o);o=X(t,x(r,i)),o.selector=t}return o},j=e.select=function(t,e,n,i){var r,o,s,a,u,l="function"==typeof t&&t,h=!i&&C(t=l.selector||t);if(n=n||[],1===h.length){if(o=h[0]=h[0].slice(0),o.length>2&&"ID"===(s=o[0]).type&&_.getById&&9===e.nodeType&&A&&w.relative[o[1].type]){if(e=(w.find.ID(s.matches[0].replace(_t,wt),e)||[])[0],!e)return n;l&&(e=e.parentNode),t=t.slice(o.shift().value.length)}for(r=dt.needsContext.test(t)?0:o.length;r--&&(s=o[r],!w.relative[a=s.type]);)if((u=w.find[a])&&(i=u(s.matches[0].replace(_t,wt),xt.test(o[0].type)&&c(e.parentNode)||e))){if(o.splice(r,1),t=i.length&&p(o),!t)return K.apply(n,i),n;break}}return(l||S(t,h))(i,e,!A,n,xt.test(t)&&c(e.parentNode)||e),n},_.sortStable=R.split("").sort(U).join("")===R,_.detectDuplicates=!!k,I(),_.sortDetached=r(function(t){return 1&t.compareDocumentPosition(z.createElement("div"))}),r(function(t){return t.innerHTML="<a href='#'></a>","#"===t.firstChild.getAttribute("href")})||o("type|href|height|width",function(t,e,n){return n?void 0:t.getAttribute(e,"type"===e.toLowerCase()?1:2)}),_.attributes&&r(function(t){return t.innerHTML="<input/>",t.firstChild.setAttribute("value",""),""===t.firstChild.getAttribute("value")})||o("value",function(t,e,n){return n||"input"!==t.nodeName.toLowerCase()?void 0:t.defaultValue}),r(function(t){return null==t.getAttribute("disabled")})||o(et,function(t,e,n){var i;return n?void 0:t[e]===!0?e.toLowerCase():(i=t.getAttributeNode(e))&&i.specified?i.value:null}),e}(t);rt.find=lt,rt.expr=lt.selectors,rt.expr[":"]=rt.expr.pseudos,rt.unique=lt.uniqueSort,rt.text=lt.getText,rt.isXMLDoc=lt.isXML,rt.contains=lt.contains;var ct=rt.expr.match.needsContext,ht=/^<(\w+)\s*\/?>(?:<\/\1>|)$/,pt=/^.[^:#\[\.,]*$/;rt.filter=function(t,e,n){var i=e[0];return n&&(t=":not("+t+")"),1===e.length&&1===i.nodeType?rt.find.matchesSelector(i,t)?[i]:[]:rt.find.matches(t,rt.grep(e,function(t){return 1===t.nodeType}))},rt.fn.extend({find:function(t){var e,n=[],i=this,r=i.length;if("string"!=typeof t)return this.pushStack(rt(t).filter(function(){for(e=0;r>e;e++)if(rt.contains(i[e],this))return!0}));for(e=0;r>e;e++)rt.find(t,i[e],n);return n=this.pushStack(r>1?rt.unique(n):n),n.selector=this.selector?this.selector+" "+t:t,n},filter:function(t){return this.pushStack(i(this,t||[],!1))},not:function(t){return this.pushStack(i(this,t||[],!0))},is:function(t){return!!i(this,"string"==typeof t&&ct.test(t)?rt(t):t||[],!1).length}});var ft,dt=t.document,mt=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]*))$/,yt=rt.fn.init=function(t,e){var n,i;if(!t)return this;if("string"==typeof t){if(n="<"===t.charAt(0)&&">"===t.charAt(t.length-1)&&t.length>=3?[null,t,null]:mt.exec(t),!n||!n[1]&&e)return!e||e.jquery?(e||ft).find(t):this.constructor(e).find(t);if(n[1]){if(e=e instanceof rt?e[0]:e,rt.merge(this,rt.parseHTML(n[1],e&&e.nodeType?e.ownerDocument||e:dt,!0)),ht.test(n[1])&&rt.isPlainObject(e))for(n in e)rt.isFunction(this[n])?this[n](e[n]):this.attr(n,e[n]);return this}if(i=dt.getElementById(n[2]),i&&i.parentNode){if(i.id!==n[2])return ft.find(t);this.length=1,this[0]=i}return this.context=dt,this.selector=t,this}return t.nodeType?(this.context=this[0]=t,this.length=1,this):rt.isFunction(t)?"undefined"!=typeof ft.ready?ft.ready(t):t(rt):(void 0!==t.selector&&(this.selector=t.selector,this.context=t.context),rt.makeArray(t,this))};yt.prototype=rt.fn,ft=rt(dt);var gt=/^(?:parents|prev(?:Until|All))/,vt={children:!0,contents:!0,next:!0,prev:!0};rt.extend({dir:function(t,e,n){for(var i=[],r=t[e];r&&9!==r.nodeType&&(void 0===n||1!==r.nodeType||!rt(r).is(n));)1===r.nodeType&&i.push(r),r=r[e];return i},sibling:function(t,e){for(var n=[];t;t=t.nextSibling)1===t.nodeType&&t!==e&&n.push(t);return n}}),rt.fn.extend({has:function(t){var e,n=rt(t,this),i=n.length;return this.filter(function(){for(e=0;i>e;e++)if(rt.contains(this,n[e]))return!0})},closest:function(t,e){for(var n,i=0,r=this.length,o=[],s=ct.test(t)||"string"!=typeof t?rt(t,e||this.context):0;r>i;i++)for(n=this[i];n&&n!==e;n=n.parentNode)if(n.nodeType<11&&(s?s.index(n)>-1:1===n.nodeType&&rt.find.matchesSelector(n,t))){o.push(n);break}return this.pushStack(o.length>1?rt.unique(o):o)},index:function(t){return t?"string"==typeof t?rt.inArray(this[0],rt(t)):rt.inArray(t.jquery?t[0]:t,this):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(t,e){return this.pushStack(rt.unique(rt.merge(this.get(),rt(t,e))))},addBack:function(t){return this.add(null==t?this.prevObject:this.prevObject.filter(t))}}),rt.each({parent:function(t){var e=t.parentNode;return e&&11!==e.nodeType?e:null},parents:function(t){return rt.dir(t,"parentNode")},parentsUntil:function(t,e,n){return rt.dir(t,"parentNode",n)},next:function(t){return r(t,"nextSibling")},prev:function(t){return r(t,"previousSibling")},nextAll:function(t){return rt.dir(t,"nextSibling")},prevAll:function(t){return rt.dir(t,"previousSibling")},nextUntil:function(t,e,n){return rt.dir(t,"nextSibling",n)},prevUntil:function(t,e,n){return rt.dir(t,"previousSibling",n)},siblings:function(t){return rt.sibling((t.parentNode||{}).firstChild,t)},children:function(t){return rt.sibling(t.firstChild)},contents:function(t){return rt.nodeName(t,"iframe")?t.contentDocument||t.contentWindow.document:rt.merge([],t.childNodes)}},function(t,e){rt.fn[t]=function(n,i){var r=rt.map(this,e,n);return"Until"!==t.slice(-5)&&(i=n),i&&"string"==typeof i&&(r=rt.filter(i,r)),this.length>1&&(vt[t]||(r=rt.unique(r)),gt.test(t)&&(r=r.reverse())),this.pushStack(r)}});var xt=/\S+/g,bt={};rt.Callbacks=function(t){t="string"==typeof t?bt[t]||o(t):rt.extend({},t);var e,n,i,r,s,a,u=[],l=!t.once&&[],c=function(o){for(n=t.memory&&o,i=!0,s=a||0,a=0,r=u.length,e=!0;u&&r>s;s++)if(u[s].apply(o[0],o[1])===!1&&t.stopOnFalse){n=!1;break}e=!1,u&&(l?l.length&&c(l.shift()):n?u=[]:h.disable())},h={add:function(){if(u){var i=u.length;!function o(e){rt.each(e,function(e,n){var i=rt.type(n);"function"===i?t.unique&&h.has(n)||u.push(n):n&&n.length&&"string"!==i&&o(n)})}(arguments),e?r=u.length:n&&(a=i,c(n))}return this},remove:function(){return u&&rt.each(arguments,function(t,n){for(var i;(i=rt.inArray(n,u,i))>-1;)u.splice(i,1),e&&(r>=i&&r--,s>=i&&s--)}),this},has:function(t){return t?rt.inArray(t,u)>-1:!(!u||!u.length)},empty:function(){return u=[],r=0,this},disable:function(){return u=l=n=void 0,this},disabled:function(){return!u},lock:function(){return l=void 0,n||h.disable(),this},locked:function(){return!l},fireWith:function(t,n){return!u||i&&!l||(n=n||[],n=[t,n.slice?n.slice():n],e?l.push(n):c(n)),this},fire:function(){return h.fireWith(this,arguments),this},fired:function(){return!!i}};return h},rt.extend({Deferred:function(t){var e=[["resolve","done",rt.Callbacks("once memory"),"resolved"],["reject","fail",rt.Callbacks("once memory"),"rejected"],["notify","progress",rt.Callbacks("memory")]],n="pending",i={state:function(){return n},always:function(){return r.done(arguments).fail(arguments),this},then:function(){var t=arguments;return rt.Deferred(function(n){rt.each(e,function(e,o){var s=rt.isFunction(t[e])&&t[e];r[o[1]](function(){var t=s&&s.apply(this,arguments);t&&rt.isFunction(t.promise)?t.promise().done(n.resolve).fail(n.reject).progress(n.notify):n[o[0]+"With"](this===i?n.promise():this,s?[t]:arguments)})}),t=null}).promise()},promise:function(t){return null!=t?rt.extend(t,i):i}},r={};return i.pipe=i.then,rt.each(e,function(t,o){var s=o[2],a=o[3];i[o[1]]=s.add,a&&s.add(function(){n=a},e[1^t][2].disable,e[2][2].lock),r[o[0]]=function(){return r[o[0]+"With"](this===r?i:this,arguments),this},r[o[0]+"With"]=s.fireWith}),i.promise(r),t&&t.call(r,r),r},when:function(t){var e,n,i,r=0,o=Q.call(arguments),s=o.length,a=1!==s||t&&rt.isFunction(t.promise)?s:0,u=1===a?t:rt.Deferred(),l=function(t,n,i){return function(r){n[t]=this,i[t]=arguments.length>1?Q.call(arguments):r,i===e?u.notifyWith(n,i):--a||u.resolveWith(n,i)}};if(s>1)for(e=new Array(s),n=new Array(s),i=new Array(s);s>r;r++)o[r]&&rt.isFunction(o[r].promise)?o[r].promise().done(l(r,i,o)).fail(u.reject).progress(l(r,n,e)):--a;return a||u.resolveWith(i,o),u.promise()}});var _t;rt.fn.ready=function(t){return rt.ready.promise().done(t),this},rt.extend({isReady:!1,readyWait:1,holdReady:function(t){t?rt.readyWait++:rt.ready(!0)},ready:function(t){if(t===!0?!--rt.readyWait:!rt.isReady){if(!dt.body)return setTimeout(rt.ready);rt.isReady=!0,t!==!0&&--rt.readyWait>0||(_t.resolveWith(dt,[rt]),rt.fn.triggerHandler&&(rt(dt).triggerHandler("ready"),rt(dt).off("ready")))}}}),rt.ready.promise=function(e){if(!_t)if(_t=rt.Deferred(),"complete"===dt.readyState)setTimeout(rt.ready);else if(dt.addEventListener)dt.addEventListener("DOMContentLoaded",a,!1),t.addEventListener("load",a,!1);else{dt.attachEvent("onreadystatechange",a),t.attachEvent("onload",a);var n=!1;try{n=null==t.frameElement&&dt.documentElement}catch(i){}n&&n.doScroll&&!function r(){if(!rt.isReady){try{n.doScroll("left")}catch(t){return setTimeout(r,50)}s(),rt.ready()}}()}return _t.promise(e)};var wt,Tt="undefined";for(wt in rt(nt))break;nt.ownLast="0"!==wt,nt.inlineBlockNeedsLayout=!1,rt(function(){var t,e,n,i;n=dt.getElementsByTagName("body")[0],n&&n.style&&(e=dt.createElement("div"),i=dt.createElement("div"),i.style.cssText="position:absolute;border:0;width:0;height:0;top:0;left:-9999px",n.appendChild(i).appendChild(e),typeof e.style.zoom!==Tt&&(e.style.cssText="display:inline;margin:0;border:0;padding:1px;width:1px;zoom:1",nt.inlineBlockNeedsLayout=t=3===e.offsetWidth,t&&(n.style.zoom=1)),n.removeChild(i))}),function(){var t=dt.createElement("div");if(null==nt.deleteExpando){nt.deleteExpando=!0;try{delete t.test}catch(e){nt.deleteExpando=!1}}t=null}(),rt.acceptData=function(t){var e=rt.noData[(t.nodeName+" ").toLowerCase()],n=+t.nodeType||1;return 1!==n&&9!==n?!1:!e||e!==!0&&t.getAttribute("classid")===e};var Et=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,Ct=/([A-Z])/g;rt.extend({cache:{},noData:{"applet ":!0,"embed ":!0,"object ":"clsid:D27CDB6E-AE6D-11cf-96B8-444553540000"},hasData:function(t){return t=t.nodeType?rt.cache[t[rt.expando]]:t[rt.expando],!!t&&!l(t)},data:function(t,e,n){return c(t,e,n)},removeData:function(t,e){return h(t,e)},_data:function(t,e,n){return c(t,e,n,!0)},_removeData:function(t,e){return h(t,e,!0)}}),rt.fn.extend({data:function(t,e){var n,i,r,o=this[0],s=o&&o.attributes;if(void 0===t){if(this.length&&(r=rt.data(o),1===o.nodeType&&!rt._data(o,"parsedAttrs"))){for(n=s.length;n--;)s[n]&&(i=s[n].name,0===i.indexOf("data-")&&(i=rt.camelCase(i.slice(5)),u(o,i,r[i])));rt._data(o,"parsedAttrs",!0)}return r}return"object"==typeof t?this.each(function(){rt.data(this,t)}):arguments.length>1?this.each(function(){rt.data(this,t,e)}):o?u(o,t,rt.data(o,t)):void 0},removeData:function(t){return this.each(function(){rt.removeData(this,t)})}}),rt.extend({queue:function(t,e,n){var i;return t?(e=(e||"fx")+"queue",i=rt._data(t,e),n&&(!i||rt.isArray(n)?i=rt._data(t,e,rt.makeArray(n)):i.push(n)),i||[]):void 0},dequeue:function(t,e){e=e||"fx";var n=rt.queue(t,e),i=n.length,r=n.shift(),o=rt._queueHooks(t,e),s=function(){rt.dequeue(t,e)};"inprogress"===r&&(r=n.shift(),i--),r&&("fx"===e&&n.unshift("inprogress"),delete o.stop,r.call(t,s,o)),!i&&o&&o.empty.fire()},_queueHooks:function(t,e){var n=e+"queueHooks";return rt._data(t,n)||rt._data(t,n,{empty:rt.Callbacks("once memory").add(function(){rt._removeData(t,e+"queue"),rt._removeData(t,n)})})}}),rt.fn.extend({queue:function(t,e){var n=2;return"string"!=typeof t&&(e=t,t="fx",n--),arguments.length<n?rt.queue(this[0],t):void 0===e?this:this.each(function(){var n=rt.queue(this,t,e);rt._queueHooks(this,t),"fx"===t&&"inprogress"!==n[0]&&rt.dequeue(this,t)})},dequeue:function(t){return this.each(function(){rt.dequeue(this,t)})},clearQueue:function(t){return this.queue(t||"fx",[])},promise:function(t,e){var n,i=1,r=rt.Deferred(),o=this,s=this.length,a=function(){--i||r.resolveWith(o,[o])};for("string"!=typeof t&&(e=t,t=void 0),t=t||"fx";s--;)n=rt._data(o[s],t+"queueHooks"),n&&n.empty&&(i++,n.empty.add(a));return a(),r.promise(e)}});var St=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,jt=["Top","Right","Bottom","Left"],Lt=function(t,e){return t=e||t,"none"===rt.css(t,"display")||!rt.contains(t.ownerDocument,t)},Nt=rt.access=function(t,e,n,i,r,o,s){var a=0,u=t.length,l=null==n;if("object"===rt.type(n)){r=!0;for(a in n)rt.access(t,e,a,n[a],!0,o,s)}else if(void 0!==i&&(r=!0,rt.isFunction(i)||(s=!0),l&&(s?(e.call(t,i),e=null):(l=e,e=function(t,e,n){return l.call(rt(t),n)})),e))for(;u>a;a++)e(t[a],n,s?i:i.call(t[a],a,e(t[a],n)));return r?t:l?e.call(t):u?e(t[0],n):o},kt=/^(?:checkbox|radio)$/i;!function(){var t=dt.createElement("input"),e=dt.createElement("div"),n=dt.createDocumentFragment();if(e.innerHTML="  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>",nt.leadingWhitespace=3===e.firstChild.nodeType,nt.tbody=!e.getElementsByTagName("tbody").length,nt.htmlSerialize=!!e.getElementsByTagName("link").length,nt.html5Clone="<:nav></:nav>"!==dt.createElement("nav").cloneNode(!0).outerHTML,t.type="checkbox",t.checked=!0,n.appendChild(t),nt.appendChecked=t.checked,e.innerHTML="<textarea>x</textarea>",nt.noCloneChecked=!!e.cloneNode(!0).lastChild.defaultValue,n.appendChild(e),e.innerHTML="<input type='radio' checked='checked' name='t'/>",nt.checkClone=e.cloneNode(!0).cloneNode(!0).lastChild.checked,nt.noCloneEvent=!0,e.attachEvent&&(e.attachEvent("onclick",function(){nt.noCloneEvent=!1}),e.cloneNode(!0).click()),null==nt.deleteExpando){nt.deleteExpando=!0;try{delete e.test}catch(i){nt.deleteExpando=!1}}}(),function(){var e,n,i=dt.createElement("div");for(e in{submit:!0,change:!0,focusin:!0})n="on"+e,(nt[e+"Bubbles"]=n in t)||(i.setAttribute(n,"t"),nt[e+"Bubbles"]=i.attributes[n].expando===!1);i=null}();var It=/^(?:input|select|textarea)$/i,zt=/^key/,Dt=/^(?:mouse|pointer|contextmenu)|click/,At=/^(?:focusinfocus|focusoutblur)$/,Ht=/^([^.]*)(?:\.(.+)|)$/;rt.event={global:{},add:function(t,e,n,i,r){var o,s,a,u,l,c,h,p,f,d,m,y=rt._data(t);if(y){for(n.handler&&(u=n,n=u.handler,r=u.selector),n.guid||(n.guid=rt.guid++),(s=y.events)||(s=y.events={}),(c=y.handle)||(c=y.handle=function(t){return typeof rt===Tt||t&&rt.event.triggered===t.type?void 0:rt.event.dispatch.apply(c.elem,arguments)},c.elem=t),e=(e||"").match(xt)||[""],a=e.length;a--;)o=Ht.exec(e[a])||[],f=m=o[1],d=(o[2]||"").split(".").sort(),f&&(l=rt.event.special[f]||{},f=(r?l.delegateType:l.bindType)||f,l=rt.event.special[f]||{},h=rt.extend({type:f,origType:m,data:i,handler:n,guid:n.guid,selector:r,needsContext:r&&rt.expr.match.needsContext.test(r),namespace:d.join(".")},u),(p=s[f])||(p=s[f]=[],p.delegateCount=0,l.setup&&l.setup.call(t,i,d,c)!==!1||(t.addEventListener?t.addEventListener(f,c,!1):t.attachEvent&&t.attachEvent("on"+f,c))),l.add&&(l.add.call(t,h),h.handler.guid||(h.handler.guid=n.guid)),r?p.splice(p.delegateCount++,0,h):p.push(h),rt.event.global[f]=!0);t=null}},remove:function(t,e,n,i,r){var o,s,a,u,l,c,h,p,f,d,m,y=rt.hasData(t)&&rt._data(t);if(y&&(c=y.events)){for(e=(e||"").match(xt)||[""],l=e.length;l--;)if(a=Ht.exec(e[l])||[],f=m=a[1],d=(a[2]||"").split(".").sort(),f){for(h=rt.event.special[f]||{},f=(i?h.delegateType:h.bindType)||f,p=c[f]||[],a=a[2]&&new RegExp("(^|\\.)"+d.join("\\.(?:.*\\.|)")+"(\\.|$)"),u=o=p.length;o--;)s=p[o],!r&&m!==s.origType||n&&n.guid!==s.guid||a&&!a.test(s.namespace)||i&&i!==s.selector&&("**"!==i||!s.selector)||(p.splice(o,1),s.selector&&p.delegateCount--,h.remove&&h.remove.call(t,s));u&&!p.length&&(h.teardown&&h.teardown.call(t,d,y.handle)!==!1||rt.removeEvent(t,f,y.handle),delete c[f])}else for(f in c)rt.event.remove(t,f+e[l],n,i,!0);rt.isEmptyObject(c)&&(delete y.handle,rt._removeData(t,"events"))}},trigger:function(e,n,i,r){var o,s,a,u,l,c,h,p=[i||dt],f=et.call(e,"type")?e.type:e,d=et.call(e,"namespace")?e.namespace.split("."):[];if(a=c=i=i||dt,3!==i.nodeType&&8!==i.nodeType&&!At.test(f+rt.event.triggered)&&(f.indexOf(".")>=0&&(d=f.split("."),f=d.shift(),d.sort()),s=f.indexOf(":")<0&&"on"+f,e=e[rt.expando]?e:new rt.Event(f,"object"==typeof e&&e),e.isTrigger=r?2:3,e.namespace=d.join("."),e.namespace_re=e.namespace?new RegExp("(^|\\.)"+d.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,e.result=void 0,e.target||(e.target=i),n=null==n?[e]:rt.makeArray(n,[e]),l=rt.event.special[f]||{},r||!l.trigger||l.trigger.apply(i,n)!==!1)){if(!r&&!l.noBubble&&!rt.isWindow(i)){for(u=l.delegateType||f,At.test(u+f)||(a=a.parentNode);a;a=a.parentNode)p.push(a),c=a;c===(i.ownerDocument||dt)&&p.push(c.defaultView||c.parentWindow||t)}for(h=0;(a=p[h++])&&!e.isPropagationStopped();)e.type=h>1?u:l.bindType||f,o=(rt._data(a,"events")||{})[e.type]&&rt._data(a,"handle"),o&&o.apply(a,n),o=s&&a[s],o&&o.apply&&rt.acceptData(a)&&(e.result=o.apply(a,n),e.result===!1&&e.preventDefault());if(e.type=f,!r&&!e.isDefaultPrevented()&&(!l._default||l._default.apply(p.pop(),n)===!1)&&rt.acceptData(i)&&s&&i[f]&&!rt.isWindow(i)){c=i[s],c&&(i[s]=null),rt.event.triggered=f;try{i[f]()}catch(m){}rt.event.triggered=void 0,c&&(i[s]=c)}return e.result}},dispatch:function(t){t=rt.event.fix(t);var e,n,i,r,o,s=[],a=Q.call(arguments),u=(rt._data(this,"events")||{})[t.type]||[],l=rt.event.special[t.type]||{};if(a[0]=t,t.delegateTarget=this,!l.preDispatch||l.preDispatch.call(this,t)!==!1){for(s=rt.event.handlers.call(this,t,u),e=0;(r=s[e++])&&!t.isPropagationStopped();)for(t.currentTarget=r.elem,o=0;(i=r.handlers[o++])&&!t.isImmediatePropagationStopped();)t.namespace_re&&!t.namespace_re.test(i.namespace)||(t.handleObj=i,t.data=i.data,n=((rt.event.special[i.origType]||{}).handle||i.handler).apply(r.elem,a),void 0!==n&&(t.result=n)===!1&&(t.preventDefault(),t.stopPropagation()));return l.postDispatch&&l.postDispatch.call(this,t),t.result}},handlers:function(t,e){var n,i,r,o,s=[],a=e.delegateCount,u=t.target;if(a&&u.nodeType&&(!t.button||"click"!==t.type))for(;u!=this;u=u.parentNode||this)if(1===u.nodeType&&(u.disabled!==!0||"click"!==t.type)){for(r=[],o=0;a>o;o++)i=e[o],n=i.selector+" ",void 0===r[n]&&(r[n]=i.needsContext?rt(n,this).index(u)>=0:rt.find(n,this,null,[u]).length),r[n]&&r.push(i);r.length&&s.push({elem:u,handlers:r})}return a<e.length&&s.push({elem:this,handlers:e.slice(a)}),s},fix:function(t){if(t[rt.expando])return t;var e,n,i,r=t.type,o=t,s=this.fixHooks[r];for(s||(this.fixHooks[r]=s=Dt.test(r)?this.mouseHooks:zt.test(r)?this.keyHooks:{}),i=s.props?this.props.concat(s.props):this.props,t=new rt.Event(o),e=i.length;e--;)n=i[e],t[n]=o[n];return t.target||(t.target=o.srcElement||dt),3===t.target.nodeType&&(t.target=t.target.parentNode),t.metaKey=!!t.metaKey,s.filter?s.filter(t,o):t},props:"altKey bubbles cancelable ctrlKey currentTarget eventPhase metaKey relatedTarget shiftKey target timeStamp view which".split(" "),fixHooks:{},keyHooks:{props:"char charCode key keyCode".split(" "),filter:function(t,e){return null==t.which&&(t.which=null!=e.charCode?e.charCode:e.keyCode),t}},mouseHooks:{props:"button buttons clientX clientY fromElement offsetX offsetY pageX pageY screenX screenY toElement".split(" "),filter:function(t,e){var n,i,r,o=e.button,s=e.fromElement;return null==t.pageX&&null!=e.clientX&&(i=t.target.ownerDocument||dt,r=i.documentElement,n=i.body,t.pageX=e.clientX+(r&&r.scrollLeft||n&&n.scrollLeft||0)-(r&&r.clientLeft||n&&n.clientLeft||0),t.pageY=e.clientY+(r&&r.scrollTop||n&&n.scrollTop||0)-(r&&r.clientTop||n&&n.clientTop||0)),!t.relatedTarget&&s&&(t.relatedTarget=s===t.target?e.toElement:s),t.which||void 0===o||(t.which=1&o?1:2&o?3:4&o?2:0),t}},special:{load:{noBubble:!0},focus:{trigger:function(){if(this!==d()&&this.focus)try{return this.focus(),!1}catch(t){}},delegateType:"focusin"},blur:{trigger:function(){return this===d()&&this.blur?(this.blur(),!1):void 0},delegateType:"focusout"},click:{trigger:function(){return rt.nodeName(this,"input")&&"checkbox"===this.type&&this.click?(this.click(),!1):void 0},_default:function(t){return rt.nodeName(t.target,"a")}},beforeunload:{postDispatch:function(t){void 0!==t.result&&t.originalEvent&&(t.originalEvent.returnValue=t.result)}}},simulate:function(t,e,n,i){var r=rt.extend(new rt.Event,n,{type:t,isSimulated:!0,originalEvent:{}});i?rt.event.trigger(r,null,e):rt.event.dispatch.call(e,r),r.isDefaultPrevented()&&n.preventDefault()}},rt.removeEvent=dt.removeEventListener?function(t,e,n){t.removeEventListener&&t.removeEventListener(e,n,!1)}:function(t,e,n){var i="on"+e;t.detachEvent&&(typeof t[i]===Tt&&(t[i]=null),t.detachEvent(i,n))},rt.Event=function(t,e){return this instanceof rt.Event?(t&&t.type?(this.originalEvent=t,this.type=t.type,this.isDefaultPrevented=t.defaultPrevented||void 0===t.defaultPrevented&&t.returnValue===!1?p:f):this.type=t,e&&rt.extend(this,e),this.timeStamp=t&&t.timeStamp||rt.now(),void(this[rt.expando]=!0)):new rt.Event(t,e)},rt.Event.prototype={isDefaultPrevented:f,isPropagationStopped:f,isImmediatePropagationStopped:f,preventDefault:function(){var t=this.originalEvent;this.isDefaultPrevented=p,t&&(t.preventDefault?t.preventDefault():t.returnValue=!1)},stopPropagation:function(){var t=this.originalEvent;this.isPropagationStopped=p,t&&(t.stopPropagation&&t.stopPropagation(),t.cancelBubble=!0)},stopImmediatePropagation:function(){var t=this.originalEvent;this.isImmediatePropagationStopped=p,t&&t.stopImmediatePropagation&&t.stopImmediatePropagation(),this.stopPropagation()}},rt.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},function(t,e){rt.event.special[t]={delegateType:e,bindType:e,handle:function(t){var n,i=this,r=t.relatedTarget,o=t.handleObj;return r&&(r===i||rt.contains(i,r))||(t.type=o.origType,n=o.handler.apply(this,arguments),t.type=e),n}}}),nt.submitBubbles||(rt.event.special.submit={setup:function(){return rt.nodeName(this,"form")?!1:void rt.event.add(this,"click._submit keypress._submit",function(t){var e=t.target,n=rt.nodeName(e,"input")||rt.nodeName(e,"button")?e.form:void 0;n&&!rt._data(n,"submitBubbles")&&(rt.event.add(n,"submit._submit",function(t){t._submit_bubble=!0}),rt._data(n,"submitBubbles",!0))})},postDispatch:function(t){t._submit_bubble&&(delete t._submit_bubble,this.parentNode&&!t.isTrigger&&rt.event.simulate("submit",this.parentNode,t,!0))},teardown:function(){return rt.nodeName(this,"form")?!1:void rt.event.remove(this,"._submit")}}),nt.changeBubbles||(rt.event.special.change={setup:function(){return It.test(this.nodeName)?("checkbox"!==this.type&&"radio"!==this.type||(rt.event.add(this,"propertychange._change",function(t){"checked"===t.originalEvent.propertyName&&(this._just_changed=!0)}),rt.event.add(this,"click._change",function(t){this._just_changed&&!t.isTrigger&&(this._just_changed=!1),rt.event.simulate("change",this,t,!0)})),!1):void rt.event.add(this,"beforeactivate._change",function(t){var e=t.target;It.test(e.nodeName)&&!rt._data(e,"changeBubbles")&&(rt.event.add(e,"change._change",function(t){!this.parentNode||t.isSimulated||t.isTrigger||rt.event.simulate("change",this.parentNode,t,!0)}),rt._data(e,"changeBubbles",!0))})},handle:function(t){var e=t.target;return this!==e||t.isSimulated||t.isTrigger||"radio"!==e.type&&"checkbox"!==e.type?t.handleObj.handler.apply(this,arguments):void 0},teardown:function(){return rt.event.remove(this,"._change"),!It.test(this.nodeName)}}),nt.focusinBubbles||rt.each({focus:"focusin",blur:"focusout"},function(t,e){var n=function(t){rt.event.simulate(e,t.target,rt.event.fix(t),!0)};rt.event.special[e]={setup:function(){var i=this.ownerDocument||this,r=rt._data(i,e);r||i.addEventListener(t,n,!0),rt._data(i,e,(r||0)+1)},teardown:function(){var i=this.ownerDocument||this,r=rt._data(i,e)-1;r?rt._data(i,e,r):(i.removeEventListener(t,n,!0),rt._removeData(i,e))}}}),rt.fn.extend({on:function(t,e,n,i,r){var o,s;if("object"==typeof t){"string"!=typeof e&&(n=n||e,e=void 0);for(o in t)this.on(o,e,n,t[o],r);return this}if(null==n&&null==i?(i=e,n=e=void 0):null==i&&("string"==typeof e?(i=n,n=void 0):(i=n,n=e,e=void 0)),i===!1)i=f;else if(!i)return this;return 1===r&&(s=i,i=function(t){return rt().off(t),s.apply(this,arguments)},i.guid=s.guid||(s.guid=rt.guid++)),this.each(function(){rt.event.add(this,t,i,n,e)})},one:function(t,e,n,i){return this.on(t,e,n,i,1)},off:function(t,e,n){var i,r;if(t&&t.preventDefault&&t.handleObj)return i=t.handleObj,rt(t.delegateTarget).off(i.namespace?i.origType+"."+i.namespace:i.origType,i.selector,i.handler),this;if("object"==typeof t){for(r in t)this.off(r,e,t[r]);return this}return e!==!1&&"function"!=typeof e||(n=e,e=void 0),n===!1&&(n=f),this.each(function(){rt.event.remove(this,t,n,e)})},trigger:function(t,e){return this.each(function(){rt.event.trigger(t,e,this)})},triggerHandler:function(t,e){var n=this[0];return n?rt.event.trigger(t,e,n,!0):void 0}});var qt="abbr|article|aside|audio|bdi|canvas|data|datalist|details|figcaption|figure|footer|header|hgroup|mark|meter|nav|output|progress|section|summary|time|video",Mt=/ jQuery\d+="(?:null|\d+)"/g,Ot=new RegExp("<(?:"+qt+")[\\s/>]","i"),Rt=/^\s+/,Wt=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^>]*)\/>/gi,Ft=/<([\w:]+)/,Pt=/<tbody/i,Bt=/<|&#?\w+;/,$t=/<(?:script|style|link)/i,Xt=/checked\s*(?:[^=]|=\s*.checked.)/i,Ut=/^$|\/(?:java|ecma)script/i,Yt=/^true\/(.*)/,Vt=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g,Qt={option:[1,"<select multiple='multiple'>","</select>"],legend:[1,"<fieldset>","</fieldset>"],area:[1,"<map>","</map>"],param:[1,"<object>","</object>"],thead:[1,"<table>","</table>"],tr:[2,"<table><tbody>","</tbody></table>"],col:[2,"<table><tbody></tbody><colgroup>","</colgroup></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:nt.htmlSerialize?[0,"",""]:[1,"X<div>","</div>"]},Gt=m(dt),Jt=Gt.appendChild(dt.createElement("div"));Qt.optgroup=Qt.option,Qt.tbody=Qt.tfoot=Qt.colgroup=Qt.caption=Qt.thead,Qt.th=Qt.td,rt.extend({clone:function(t,e,n){var i,r,o,s,a,u=rt.contains(t.ownerDocument,t);if(nt.html5Clone||rt.isXMLDoc(t)||!Ot.test("<"+t.nodeName+">")?o=t.cloneNode(!0):(Jt.innerHTML=t.outerHTML,Jt.removeChild(o=Jt.firstChild)),!(nt.noCloneEvent&&nt.noCloneChecked||1!==t.nodeType&&11!==t.nodeType||rt.isXMLDoc(t)))for(i=y(o),a=y(t),s=0;null!=(r=a[s]);++s)i[s]&&T(r,i[s]);if(e)if(n)for(a=a||y(t),i=i||y(o),s=0;null!=(r=a[s]);s++)w(r,i[s]);else w(t,o);return i=y(o,"script"),i.length>0&&_(i,!u&&y(t,"script")),i=a=r=null,o},buildFragment:function(t,e,n,i){for(var r,o,s,a,u,l,c,h=t.length,p=m(e),f=[],d=0;h>d;d++)if(o=t[d],o||0===o)if("object"===rt.type(o))rt.merge(f,o.nodeType?[o]:o);else if(Bt.test(o)){for(a=a||p.appendChild(e.createElement("div")),u=(Ft.exec(o)||["",""])[1].toLowerCase(),c=Qt[u]||Qt._default,a.innerHTML=c[1]+o.replace(Wt,"<$1></$2>")+c[2],r=c[0];r--;)a=a.lastChild;if(!nt.leadingWhitespace&&Rt.test(o)&&f.push(e.createTextNode(Rt.exec(o)[0])),!nt.tbody)for(o="table"!==u||Pt.test(o)?"<table>"!==c[1]||Pt.test(o)?0:a:a.firstChild,r=o&&o.childNodes.length;r--;)rt.nodeName(l=o.childNodes[r],"tbody")&&!l.childNodes.length&&o.removeChild(l);for(rt.merge(f,a.childNodes),a.textContent="";a.firstChild;)a.removeChild(a.firstChild);a=p.lastChild}else f.push(e.createTextNode(o));for(a&&p.removeChild(a),nt.appendChecked||rt.grep(y(f,"input"),g),d=0;o=f[d++];)if((!i||-1===rt.inArray(o,i))&&(s=rt.contains(o.ownerDocument,o),a=y(p.appendChild(o),"script"),s&&_(a),n))for(r=0;o=a[r++];)Ut.test(o.type||"")&&n.push(o);return a=null,p},cleanData:function(t,e){for(var n,i,r,o,s=0,a=rt.expando,u=rt.cache,l=nt.deleteExpando,c=rt.event.special;null!=(n=t[s]);s++)if((e||rt.acceptData(n))&&(r=n[a],o=r&&u[r])){if(o.events)for(i in o.events)c[i]?rt.event.remove(n,i):rt.removeEvent(n,i,o.handle);u[r]&&(delete u[r],l?delete n[a]:typeof n.removeAttribute!==Tt?n.removeAttribute(a):n[a]=null,V.push(r))}}}),rt.fn.extend({text:function(t){return Nt(this,function(t){return void 0===t?rt.text(this):this.empty().append((this[0]&&this[0].ownerDocument||dt).createTextNode(t))},null,t,arguments.length)},append:function(){return this.domManip(arguments,function(t){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var e=v(this,t);e.appendChild(t)}})},prepend:function(){return this.domManip(arguments,function(t){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var e=v(this,t);e.insertBefore(t,e.firstChild)}})},before:function(){return this.domManip(arguments,function(t){this.parentNode&&this.parentNode.insertBefore(t,this)})},after:function(){return this.domManip(arguments,function(t){this.parentNode&&this.parentNode.insertBefore(t,this.nextSibling)})},remove:function(t,e){for(var n,i=t?rt.filter(t,this):this,r=0;null!=(n=i[r]);r++)e||1!==n.nodeType||rt.cleanData(y(n)),n.parentNode&&(e&&rt.contains(n.ownerDocument,n)&&_(y(n,"script")),n.parentNode.removeChild(n));return this},empty:function(){for(var t,e=0;null!=(t=this[e]);e++){for(1===t.nodeType&&rt.cleanData(y(t,!1));t.firstChild;)t.removeChild(t.firstChild);t.options&&rt.nodeName(t,"select")&&(t.options.length=0)}return this},clone:function(t,e){return t=null==t?!1:t,e=null==e?t:e,this.map(function(){return rt.clone(this,t,e)})},html:function(t){return Nt(this,function(t){var e=this[0]||{},n=0,i=this.length;if(void 0===t)return 1===e.nodeType?e.innerHTML.replace(Mt,""):void 0;if("string"==typeof t&&!$t.test(t)&&(nt.htmlSerialize||!Ot.test(t))&&(nt.leadingWhitespace||!Rt.test(t))&&!Qt[(Ft.exec(t)||["",""])[1].toLowerCase()]){t=t.replace(Wt,"<$1></$2>");try{for(;i>n;n++)e=this[n]||{},1===e.nodeType&&(rt.cleanData(y(e,!1)),e.innerHTML=t);e=0}catch(r){}}e&&this.empty().append(t)},null,t,arguments.length)},replaceWith:function(){var t=arguments[0];return this.domManip(arguments,function(e){t=this.parentNode,rt.cleanData(y(this)),t&&t.replaceChild(e,this)}),t&&(t.length||t.nodeType)?this:this.remove()},detach:function(t){return this.remove(t,!0)},domManip:function(t,e){t=G.apply([],t);var n,i,r,o,s,a,u=0,l=this.length,c=this,h=l-1,p=t[0],f=rt.isFunction(p);if(f||l>1&&"string"==typeof p&&!nt.checkClone&&Xt.test(p))return this.each(function(n){var i=c.eq(n);f&&(t[0]=p.call(this,n,i.html())),i.domManip(t,e)});if(l&&(a=rt.buildFragment(t,this[0].ownerDocument,!1,this),n=a.firstChild,1===a.childNodes.length&&(a=n),n)){for(o=rt.map(y(a,"script"),x),r=o.length;l>u;u++)i=a,u!==h&&(i=rt.clone(i,!0,!0),r&&rt.merge(o,y(i,"script"))),e.call(this[u],i,u);if(r)for(s=o[o.length-1].ownerDocument,rt.map(o,b),u=0;r>u;u++)i=o[u],Ut.test(i.type||"")&&!rt._data(i,"globalEval")&&rt.contains(s,i)&&(i.src?rt._evalUrl&&rt._evalUrl(i.src):rt.globalEval((i.text||i.textContent||i.innerHTML||"").replace(Vt,"")));a=n=null}return this}}),rt.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(t,e){rt.fn[t]=function(t){for(var n,i=0,r=[],o=rt(t),s=o.length-1;s>=i;i++)n=i===s?this:this.clone(!0),rt(o[i])[e](n),J.apply(r,n.get());return this.pushStack(r)}});var Kt,Zt={};!function(){var t;nt.shrinkWrapBlocks=function(){if(null!=t)return t;t=!1;var e,n,i;return n=dt.getElementsByTagName("body")[0],n&&n.style?(e=dt.createElement("div"),i=dt.createElement("div"),i.style.cssText="position:absolute;border:0;width:0;height:0;top:0;left:-9999px",n.appendChild(i).appendChild(e),typeof e.style.zoom!==Tt&&(e.style.cssText="-webkit-box-sizing:content-box;-moz-box-sizing:content-box;box-sizing:content-box;display:block;margin:0;border:0;padding:1px;width:1px;zoom:1",e.appendChild(dt.createElement("div")).style.width="5px",t=3!==e.offsetWidth),n.removeChild(i),t):void 0}}();var te,ee,ne=/^margin/,ie=new RegExp("^("+St+")(?!px)[a-z%]+$","i"),re=/^(top|right|bottom|left)$/;t.getComputedStyle?(te=function(e){return e.ownerDocument.defaultView.opener?e.ownerDocument.defaultView.getComputedStyle(e,null):t.getComputedStyle(e,null)},ee=function(t,e,n){var i,r,o,s,a=t.style;return n=n||te(t),s=n?n.getPropertyValue(e)||n[e]:void 0,n&&(""!==s||rt.contains(t.ownerDocument,t)||(s=rt.style(t,e)),ie.test(s)&&ne.test(e)&&(i=a.width,r=a.minWidth,
o=a.maxWidth,a.minWidth=a.maxWidth=a.width=s,s=n.width,a.width=i,a.minWidth=r,a.maxWidth=o)),void 0===s?s:s+""}):dt.documentElement.currentStyle&&(te=function(t){return t.currentStyle},ee=function(t,e,n){var i,r,o,s,a=t.style;return n=n||te(t),s=n?n[e]:void 0,null==s&&a&&a[e]&&(s=a[e]),ie.test(s)&&!re.test(e)&&(i=a.left,r=t.runtimeStyle,o=r&&r.left,o&&(r.left=t.currentStyle.left),a.left="fontSize"===e?"1em":s,s=a.pixelLeft+"px",a.left=i,o&&(r.left=o)),void 0===s?s:s+""||"auto"}),function(){function e(){var e,n,i,r;n=dt.getElementsByTagName("body")[0],n&&n.style&&(e=dt.createElement("div"),i=dt.createElement("div"),i.style.cssText="position:absolute;border:0;width:0;height:0;top:0;left:-9999px",n.appendChild(i).appendChild(e),e.style.cssText="-webkit-box-sizing:border-box;-moz-box-sizing:border-box;box-sizing:border-box;display:block;margin-top:1%;top:1%;border:1px;padding:1px;width:4px;position:absolute",o=s=!1,u=!0,t.getComputedStyle&&(o="1%"!==(t.getComputedStyle(e,null)||{}).top,s="4px"===(t.getComputedStyle(e,null)||{width:"4px"}).width,r=e.appendChild(dt.createElement("div")),r.style.cssText=e.style.cssText="-webkit-box-sizing:content-box;-moz-box-sizing:content-box;box-sizing:content-box;display:block;margin:0;border:0;padding:0",r.style.marginRight=r.style.width="0",e.style.width="1px",u=!parseFloat((t.getComputedStyle(r,null)||{}).marginRight),e.removeChild(r)),e.innerHTML="<table><tr><td></td><td>t</td></tr></table>",r=e.getElementsByTagName("td"),r[0].style.cssText="margin:0;border:0;padding:0;display:none",a=0===r[0].offsetHeight,a&&(r[0].style.display="",r[1].style.display="none",a=0===r[0].offsetHeight),n.removeChild(i))}var n,i,r,o,s,a,u;n=dt.createElement("div"),n.innerHTML="  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>",r=n.getElementsByTagName("a")[0],i=r&&r.style,i&&(i.cssText="float:left;opacity:.5",nt.opacity="0.5"===i.opacity,nt.cssFloat=!!i.cssFloat,n.style.backgroundClip="content-box",n.cloneNode(!0).style.backgroundClip="",nt.clearCloneStyle="content-box"===n.style.backgroundClip,nt.boxSizing=""===i.boxSizing||""===i.MozBoxSizing||""===i.WebkitBoxSizing,rt.extend(nt,{reliableHiddenOffsets:function(){return null==a&&e(),a},boxSizingReliable:function(){return null==s&&e(),s},pixelPosition:function(){return null==o&&e(),o},reliableMarginRight:function(){return null==u&&e(),u}}))}(),rt.swap=function(t,e,n,i){var r,o,s={};for(o in e)s[o]=t.style[o],t.style[o]=e[o];r=n.apply(t,i||[]);for(o in e)t.style[o]=s[o];return r};var oe=/alpha\([^)]*\)/i,se=/opacity\s*=\s*([^)]*)/,ae=/^(none|table(?!-c[ea]).+)/,ue=new RegExp("^("+St+")(.*)$","i"),le=new RegExp("^([+-])=("+St+")","i"),ce={position:"absolute",visibility:"hidden",display:"block"},he={letterSpacing:"0",fontWeight:"400"},pe=["Webkit","O","Moz","ms"];rt.extend({cssHooks:{opacity:{get:function(t,e){if(e){var n=ee(t,"opacity");return""===n?"1":n}}}},cssNumber:{columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{"float":nt.cssFloat?"cssFloat":"styleFloat"},style:function(t,e,n,i){if(t&&3!==t.nodeType&&8!==t.nodeType&&t.style){var r,o,s,a=rt.camelCase(e),u=t.style;if(e=rt.cssProps[a]||(rt.cssProps[a]=j(u,a)),s=rt.cssHooks[e]||rt.cssHooks[a],void 0===n)return s&&"get"in s&&void 0!==(r=s.get(t,!1,i))?r:u[e];if(o=typeof n,"string"===o&&(r=le.exec(n))&&(n=(r[1]+1)*r[2]+parseFloat(rt.css(t,e)),o="number"),null!=n&&n===n&&("number"!==o||rt.cssNumber[a]||(n+="px"),nt.clearCloneStyle||""!==n||0!==e.indexOf("background")||(u[e]="inherit"),!(s&&"set"in s&&void 0===(n=s.set(t,n,i)))))try{u[e]=n}catch(l){}}},css:function(t,e,n,i){var r,o,s,a=rt.camelCase(e);return e=rt.cssProps[a]||(rt.cssProps[a]=j(t.style,a)),s=rt.cssHooks[e]||rt.cssHooks[a],s&&"get"in s&&(o=s.get(t,!0,n)),void 0===o&&(o=ee(t,e,i)),"normal"===o&&e in he&&(o=he[e]),""===n||n?(r=parseFloat(o),n===!0||rt.isNumeric(r)?r||0:o):o}}),rt.each(["height","width"],function(t,e){rt.cssHooks[e]={get:function(t,n,i){return n?ae.test(rt.css(t,"display"))&&0===t.offsetWidth?rt.swap(t,ce,function(){return I(t,e,i)}):I(t,e,i):void 0},set:function(t,n,i){var r=i&&te(t);return N(t,n,i?k(t,e,i,nt.boxSizing&&"border-box"===rt.css(t,"boxSizing",!1,r),r):0)}}}),nt.opacity||(rt.cssHooks.opacity={get:function(t,e){return se.test((e&&t.currentStyle?t.currentStyle.filter:t.style.filter)||"")?.01*parseFloat(RegExp.$1)+"":e?"1":""},set:function(t,e){var n=t.style,i=t.currentStyle,r=rt.isNumeric(e)?"alpha(opacity="+100*e+")":"",o=i&&i.filter||n.filter||"";n.zoom=1,(e>=1||""===e)&&""===rt.trim(o.replace(oe,""))&&n.removeAttribute&&(n.removeAttribute("filter"),""===e||i&&!i.filter)||(n.filter=oe.test(o)?o.replace(oe,r):o+" "+r)}}),rt.cssHooks.marginRight=S(nt.reliableMarginRight,function(t,e){return e?rt.swap(t,{display:"inline-block"},ee,[t,"marginRight"]):void 0}),rt.each({margin:"",padding:"",border:"Width"},function(t,e){rt.cssHooks[t+e]={expand:function(n){for(var i=0,r={},o="string"==typeof n?n.split(" "):[n];4>i;i++)r[t+jt[i]+e]=o[i]||o[i-2]||o[0];return r}},ne.test(t)||(rt.cssHooks[t+e].set=N)}),rt.fn.extend({css:function(t,e){return Nt(this,function(t,e,n){var i,r,o={},s=0;if(rt.isArray(e)){for(i=te(t),r=e.length;r>s;s++)o[e[s]]=rt.css(t,e[s],!1,i);return o}return void 0!==n?rt.style(t,e,n):rt.css(t,e)},t,e,arguments.length>1)},show:function(){return L(this,!0)},hide:function(){return L(this)},toggle:function(t){return"boolean"==typeof t?t?this.show():this.hide():this.each(function(){Lt(this)?rt(this).show():rt(this).hide()})}}),rt.Tween=z,z.prototype={constructor:z,init:function(t,e,n,i,r,o){this.elem=t,this.prop=n,this.easing=r||"swing",this.options=e,this.start=this.now=this.cur(),this.end=i,this.unit=o||(rt.cssNumber[n]?"":"px")},cur:function(){var t=z.propHooks[this.prop];return t&&t.get?t.get(this):z.propHooks._default.get(this)},run:function(t){var e,n=z.propHooks[this.prop];return this.options.duration?this.pos=e=rt.easing[this.easing](t,this.options.duration*t,0,1,this.options.duration):this.pos=e=t,this.now=(this.end-this.start)*e+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),n&&n.set?n.set(this):z.propHooks._default.set(this),this}},z.prototype.init.prototype=z.prototype,z.propHooks={_default:{get:function(t){var e;return null==t.elem[t.prop]||t.elem.style&&null!=t.elem.style[t.prop]?(e=rt.css(t.elem,t.prop,""),e&&"auto"!==e?e:0):t.elem[t.prop]},set:function(t){rt.fx.step[t.prop]?rt.fx.step[t.prop](t):t.elem.style&&(null!=t.elem.style[rt.cssProps[t.prop]]||rt.cssHooks[t.prop])?rt.style(t.elem,t.prop,t.now+t.unit):t.elem[t.prop]=t.now}}},z.propHooks.scrollTop=z.propHooks.scrollLeft={set:function(t){t.elem.nodeType&&t.elem.parentNode&&(t.elem[t.prop]=t.now)}},rt.easing={linear:function(t){return t},swing:function(t){return.5-Math.cos(t*Math.PI)/2}},rt.fx=z.prototype.init,rt.fx.step={};var fe,de,me=/^(?:toggle|show|hide)$/,ye=new RegExp("^(?:([+-])=|)("+St+")([a-z%]*)$","i"),ge=/queueHooks$/,ve=[q],xe={"*":[function(t,e){var n=this.createTween(t,e),i=n.cur(),r=ye.exec(e),o=r&&r[3]||(rt.cssNumber[t]?"":"px"),s=(rt.cssNumber[t]||"px"!==o&&+i)&&ye.exec(rt.css(n.elem,t)),a=1,u=20;if(s&&s[3]!==o){o=o||s[3],r=r||[],s=+i||1;do a=a||".5",s/=a,rt.style(n.elem,t,s+o);while(a!==(a=n.cur()/i)&&1!==a&&--u)}return r&&(s=n.start=+s||+i||0,n.unit=o,n.end=r[1]?s+(r[1]+1)*r[2]:+r[2]),n}]};rt.Animation=rt.extend(O,{tweener:function(t,e){rt.isFunction(t)?(e=t,t=["*"]):t=t.split(" ");for(var n,i=0,r=t.length;r>i;i++)n=t[i],xe[n]=xe[n]||[],xe[n].unshift(e)},prefilter:function(t,e){e?ve.unshift(t):ve.push(t)}}),rt.speed=function(t,e,n){var i=t&&"object"==typeof t?rt.extend({},t):{complete:n||!n&&e||rt.isFunction(t)&&t,duration:t,easing:n&&e||e&&!rt.isFunction(e)&&e};return i.duration=rt.fx.off?0:"number"==typeof i.duration?i.duration:i.duration in rt.fx.speeds?rt.fx.speeds[i.duration]:rt.fx.speeds._default,null!=i.queue&&i.queue!==!0||(i.queue="fx"),i.old=i.complete,i.complete=function(){rt.isFunction(i.old)&&i.old.call(this),i.queue&&rt.dequeue(this,i.queue)},i},rt.fn.extend({fadeTo:function(t,e,n,i){return this.filter(Lt).css("opacity",0).show().end().animate({opacity:e},t,n,i)},animate:function(t,e,n,i){var r=rt.isEmptyObject(t),o=rt.speed(e,n,i),s=function(){var e=O(this,rt.extend({},t),o);(r||rt._data(this,"finish"))&&e.stop(!0)};return s.finish=s,r||o.queue===!1?this.each(s):this.queue(o.queue,s)},stop:function(t,e,n){var i=function(t){var e=t.stop;delete t.stop,e(n)};return"string"!=typeof t&&(n=e,e=t,t=void 0),e&&t!==!1&&this.queue(t||"fx",[]),this.each(function(){var e=!0,r=null!=t&&t+"queueHooks",o=rt.timers,s=rt._data(this);if(r)s[r]&&s[r].stop&&i(s[r]);else for(r in s)s[r]&&s[r].stop&&ge.test(r)&&i(s[r]);for(r=o.length;r--;)o[r].elem!==this||null!=t&&o[r].queue!==t||(o[r].anim.stop(n),e=!1,o.splice(r,1));!e&&n||rt.dequeue(this,t)})},finish:function(t){return t!==!1&&(t=t||"fx"),this.each(function(){var e,n=rt._data(this),i=n[t+"queue"],r=n[t+"queueHooks"],o=rt.timers,s=i?i.length:0;for(n.finish=!0,rt.queue(this,t,[]),r&&r.stop&&r.stop.call(this,!0),e=o.length;e--;)o[e].elem===this&&o[e].queue===t&&(o[e].anim.stop(!0),o.splice(e,1));for(e=0;s>e;e++)i[e]&&i[e].finish&&i[e].finish.call(this);delete n.finish})}}),rt.each(["toggle","show","hide"],function(t,e){var n=rt.fn[e];rt.fn[e]=function(t,i,r){return null==t||"boolean"==typeof t?n.apply(this,arguments):this.animate(A(e,!0),t,i,r)}}),rt.each({slideDown:A("show"),slideUp:A("hide"),slideToggle:A("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},function(t,e){rt.fn[t]=function(t,n,i){return this.animate(e,t,n,i)}}),rt.timers=[],rt.fx.tick=function(){var t,e=rt.timers,n=0;for(fe=rt.now();n<e.length;n++)t=e[n],t()||e[n]!==t||e.splice(n--,1);e.length||rt.fx.stop(),fe=void 0},rt.fx.timer=function(t){rt.timers.push(t),t()?rt.fx.start():rt.timers.pop()},rt.fx.interval=13,rt.fx.start=function(){de||(de=setInterval(rt.fx.tick,rt.fx.interval))},rt.fx.stop=function(){clearInterval(de),de=null},rt.fx.speeds={slow:600,fast:200,_default:400},rt.fn.delay=function(t,e){return t=rt.fx?rt.fx.speeds[t]||t:t,e=e||"fx",this.queue(e,function(e,n){var i=setTimeout(e,t);n.stop=function(){clearTimeout(i)}})},function(){var t,e,n,i,r;e=dt.createElement("div"),e.setAttribute("className","t"),e.innerHTML="  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>",i=e.getElementsByTagName("a")[0],n=dt.createElement("select"),r=n.appendChild(dt.createElement("option")),t=e.getElementsByTagName("input")[0],i.style.cssText="top:1px",nt.getSetAttribute="t"!==e.className,nt.style=/top/.test(i.getAttribute("style")),nt.hrefNormalized="/a"===i.getAttribute("href"),nt.checkOn=!!t.value,nt.optSelected=r.selected,nt.enctype=!!dt.createElement("form").enctype,n.disabled=!0,nt.optDisabled=!r.disabled,t=dt.createElement("input"),t.setAttribute("value",""),nt.input=""===t.getAttribute("value"),t.value="t",t.setAttribute("type","radio"),nt.radioValue="t"===t.value}();var be=/\r/g;rt.fn.extend({val:function(t){var e,n,i,r=this[0];{if(arguments.length)return i=rt.isFunction(t),this.each(function(n){var r;1===this.nodeType&&(r=i?t.call(this,n,rt(this).val()):t,null==r?r="":"number"==typeof r?r+="":rt.isArray(r)&&(r=rt.map(r,function(t){return null==t?"":t+""})),e=rt.valHooks[this.type]||rt.valHooks[this.nodeName.toLowerCase()],e&&"set"in e&&void 0!==e.set(this,r,"value")||(this.value=r))});if(r)return e=rt.valHooks[r.type]||rt.valHooks[r.nodeName.toLowerCase()],e&&"get"in e&&void 0!==(n=e.get(r,"value"))?n:(n=r.value,"string"==typeof n?n.replace(be,""):null==n?"":n)}}}),rt.extend({valHooks:{option:{get:function(t){var e=rt.find.attr(t,"value");return null!=e?e:rt.trim(rt.text(t))}},select:{get:function(t){for(var e,n,i=t.options,r=t.selectedIndex,o="select-one"===t.type||0>r,s=o?null:[],a=o?r+1:i.length,u=0>r?a:o?r:0;a>u;u++)if(n=i[u],(n.selected||u===r)&&(nt.optDisabled?!n.disabled:null===n.getAttribute("disabled"))&&(!n.parentNode.disabled||!rt.nodeName(n.parentNode,"optgroup"))){if(e=rt(n).val(),o)return e;s.push(e)}return s},set:function(t,e){for(var n,i,r=t.options,o=rt.makeArray(e),s=r.length;s--;)if(i=r[s],rt.inArray(rt.valHooks.option.get(i),o)>=0)try{i.selected=n=!0}catch(a){i.scrollHeight}else i.selected=!1;return n||(t.selectedIndex=-1),r}}}}),rt.each(["radio","checkbox"],function(){rt.valHooks[this]={set:function(t,e){return rt.isArray(e)?t.checked=rt.inArray(rt(t).val(),e)>=0:void 0}},nt.checkOn||(rt.valHooks[this].get=function(t){return null===t.getAttribute("value")?"on":t.value})});var _e,we,Te=rt.expr.attrHandle,Ee=/^(?:checked|selected)$/i,Ce=nt.getSetAttribute,Se=nt.input;rt.fn.extend({attr:function(t,e){return Nt(this,rt.attr,t,e,arguments.length>1)},removeAttr:function(t){return this.each(function(){rt.removeAttr(this,t)})}}),rt.extend({attr:function(t,e,n){var i,r,o=t.nodeType;if(t&&3!==o&&8!==o&&2!==o)return typeof t.getAttribute===Tt?rt.prop(t,e,n):(1===o&&rt.isXMLDoc(t)||(e=e.toLowerCase(),i=rt.attrHooks[e]||(rt.expr.match.bool.test(e)?we:_e)),void 0===n?i&&"get"in i&&null!==(r=i.get(t,e))?r:(r=rt.find.attr(t,e),null==r?void 0:r):null!==n?i&&"set"in i&&void 0!==(r=i.set(t,n,e))?r:(t.setAttribute(e,n+""),n):void rt.removeAttr(t,e))},removeAttr:function(t,e){var n,i,r=0,o=e&&e.match(xt);if(o&&1===t.nodeType)for(;n=o[r++];)i=rt.propFix[n]||n,rt.expr.match.bool.test(n)?Se&&Ce||!Ee.test(n)?t[i]=!1:t[rt.camelCase("default-"+n)]=t[i]=!1:rt.attr(t,n,""),t.removeAttribute(Ce?n:i)},attrHooks:{type:{set:function(t,e){if(!nt.radioValue&&"radio"===e&&rt.nodeName(t,"input")){var n=t.value;return t.setAttribute("type",e),n&&(t.value=n),e}}}}}),we={set:function(t,e,n){return e===!1?rt.removeAttr(t,n):Se&&Ce||!Ee.test(n)?t.setAttribute(!Ce&&rt.propFix[n]||n,n):t[rt.camelCase("default-"+n)]=t[n]=!0,n}},rt.each(rt.expr.match.bool.source.match(/\w+/g),function(t,e){var n=Te[e]||rt.find.attr;Te[e]=Se&&Ce||!Ee.test(e)?function(t,e,i){var r,o;return i||(o=Te[e],Te[e]=r,r=null!=n(t,e,i)?e.toLowerCase():null,Te[e]=o),r}:function(t,e,n){return n?void 0:t[rt.camelCase("default-"+e)]?e.toLowerCase():null}}),Se&&Ce||(rt.attrHooks.value={set:function(t,e,n){return rt.nodeName(t,"input")?void(t.defaultValue=e):_e&&_e.set(t,e,n)}}),Ce||(_e={set:function(t,e,n){var i=t.getAttributeNode(n);return i||t.setAttributeNode(i=t.ownerDocument.createAttribute(n)),i.value=e+="","value"===n||e===t.getAttribute(n)?e:void 0}},Te.id=Te.name=Te.coords=function(t,e,n){var i;return n?void 0:(i=t.getAttributeNode(e))&&""!==i.value?i.value:null},rt.valHooks.button={get:function(t,e){var n=t.getAttributeNode(e);return n&&n.specified?n.value:void 0},set:_e.set},rt.attrHooks.contenteditable={set:function(t,e,n){_e.set(t,""===e?!1:e,n)}},rt.each(["width","height"],function(t,e){rt.attrHooks[e]={set:function(t,n){return""===n?(t.setAttribute(e,"auto"),n):void 0}}})),nt.style||(rt.attrHooks.style={get:function(t){return t.style.cssText||void 0},set:function(t,e){return t.style.cssText=e+""}});var je=/^(?:input|select|textarea|button|object)$/i,Le=/^(?:a|area)$/i;rt.fn.extend({prop:function(t,e){return Nt(this,rt.prop,t,e,arguments.length>1)},removeProp:function(t){return t=rt.propFix[t]||t,this.each(function(){try{this[t]=void 0,delete this[t]}catch(e){}})}}),rt.extend({propFix:{"for":"htmlFor","class":"className"},prop:function(t,e,n){var i,r,o,s=t.nodeType;if(t&&3!==s&&8!==s&&2!==s)return o=1!==s||!rt.isXMLDoc(t),o&&(e=rt.propFix[e]||e,r=rt.propHooks[e]),void 0!==n?r&&"set"in r&&void 0!==(i=r.set(t,n,e))?i:t[e]=n:r&&"get"in r&&null!==(i=r.get(t,e))?i:t[e]},propHooks:{tabIndex:{get:function(t){var e=rt.find.attr(t,"tabindex");return e?parseInt(e,10):je.test(t.nodeName)||Le.test(t.nodeName)&&t.href?0:-1}}}}),nt.hrefNormalized||rt.each(["href","src"],function(t,e){rt.propHooks[e]={get:function(t){return t.getAttribute(e,4)}}}),nt.optSelected||(rt.propHooks.selected={get:function(t){var e=t.parentNode;return e&&(e.selectedIndex,e.parentNode&&e.parentNode.selectedIndex),null}}),rt.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],function(){rt.propFix[this.toLowerCase()]=this}),nt.enctype||(rt.propFix.enctype="encoding");var Ne=/[\t\r\n\f]/g;rt.fn.extend({addClass:function(t){var e,n,i,r,o,s,a=0,u=this.length,l="string"==typeof t&&t;if(rt.isFunction(t))return this.each(function(e){rt(this).addClass(t.call(this,e,this.className))});if(l)for(e=(t||"").match(xt)||[];u>a;a++)if(n=this[a],i=1===n.nodeType&&(n.className?(" "+n.className+" ").replace(Ne," "):" ")){for(o=0;r=e[o++];)i.indexOf(" "+r+" ")<0&&(i+=r+" ");s=rt.trim(i),n.className!==s&&(n.className=s)}return this},removeClass:function(t){var e,n,i,r,o,s,a=0,u=this.length,l=0===arguments.length||"string"==typeof t&&t;if(rt.isFunction(t))return this.each(function(e){rt(this).removeClass(t.call(this,e,this.className))});if(l)for(e=(t||"").match(xt)||[];u>a;a++)if(n=this[a],i=1===n.nodeType&&(n.className?(" "+n.className+" ").replace(Ne," "):"")){for(o=0;r=e[o++];)for(;i.indexOf(" "+r+" ")>=0;)i=i.replace(" "+r+" "," ");s=t?rt.trim(i):"",n.className!==s&&(n.className=s)}return this},toggleClass:function(t,e){var n=typeof t;return"boolean"==typeof e&&"string"===n?e?this.addClass(t):this.removeClass(t):rt.isFunction(t)?this.each(function(n){rt(this).toggleClass(t.call(this,n,this.className,e),e)}):this.each(function(){if("string"===n)for(var e,i=0,r=rt(this),o=t.match(xt)||[];e=o[i++];)r.hasClass(e)?r.removeClass(e):r.addClass(e);else n!==Tt&&"boolean"!==n||(this.className&&rt._data(this,"__className__",this.className),this.className=this.className||t===!1?"":rt._data(this,"__className__")||"")})},hasClass:function(t){for(var e=" "+t+" ",n=0,i=this.length;i>n;n++)if(1===this[n].nodeType&&(" "+this[n].className+" ").replace(Ne," ").indexOf(e)>=0)return!0;return!1}}),rt.each("blur focus focusin focusout load resize scroll unload click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup error contextmenu".split(" "),function(t,e){rt.fn[e]=function(t,n){return arguments.length>0?this.on(e,null,t,n):this.trigger(e)}}),rt.fn.extend({hover:function(t,e){return this.mouseenter(t).mouseleave(e||t)},bind:function(t,e,n){return this.on(t,null,e,n)},unbind:function(t,e){return this.off(t,null,e)},delegate:function(t,e,n,i){return this.on(e,t,n,i)},undelegate:function(t,e,n){return 1===arguments.length?this.off(t,"**"):this.off(e,t||"**",n)}});var ke=rt.now(),Ie=/\?/,ze=/(,)|(\[|{)|(}|])|"(?:[^"\\\r\n]|\\["\\\/bfnrt]|\\u[\da-fA-F]{4})*"\s*:?|true|false|null|-?(?!0\d)\d+(?:\.\d+|)(?:[eE][+-]?\d+|)/g;rt.parseJSON=function(e){if(t.JSON&&t.JSON.parse)return t.JSON.parse(e+"");var n,i=null,r=rt.trim(e+"");return r&&!rt.trim(r.replace(ze,function(t,e,r,o){return n&&e&&(i=0),0===i?t:(n=r||e,i+=!o-!r,"")}))?Function("return "+r)():rt.error("Invalid JSON: "+e)},rt.parseXML=function(e){var n,i;if(!e||"string"!=typeof e)return null;try{t.DOMParser?(i=new DOMParser,n=i.parseFromString(e,"text/xml")):(n=new ActiveXObject("Microsoft.XMLDOM"),n.async="false",n.loadXML(e))}catch(r){n=void 0}return n&&n.documentElement&&!n.getElementsByTagName("parsererror").length||rt.error("Invalid XML: "+e),n};var De,Ae,He=/#.*$/,qe=/([?&])_=[^&]*/,Me=/^(.*?):[ \t]*([^\r\n]*)\r?$/gm,Oe=/^(?:about|app|app-storage|.+-extension|file|res|widget):$/,Re=/^(?:GET|HEAD)$/,We=/^\/\//,Fe=/^([\w.+-]+:)(?:\/\/(?:[^\/?#]*@|)([^\/?#:]*)(?::(\d+)|)|)/,Pe={},Be={},$e="*/".concat("*");try{Ae=location.href}catch(Xe){Ae=dt.createElement("a"),Ae.href="",Ae=Ae.href}De=Fe.exec(Ae.toLowerCase())||[],rt.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:Ae,type:"GET",isLocal:Oe.test(De[1]),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":$e,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/xml/,html:/html/,json:/json/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":rt.parseJSON,"text xml":rt.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(t,e){return e?F(F(t,rt.ajaxSettings),e):F(rt.ajaxSettings,t)},ajaxPrefilter:R(Pe),ajaxTransport:R(Be),ajax:function(t,e){function n(t,e,n,i){var r,c,g,v,b,w=e;2!==x&&(x=2,a&&clearTimeout(a),l=void 0,s=i||"",_.readyState=t>0?4:0,r=t>=200&&300>t||304===t,n&&(v=P(h,_,n)),v=B(h,v,_,r),r?(h.ifModified&&(b=_.getResponseHeader("Last-Modified"),b&&(rt.lastModified[o]=b),b=_.getResponseHeader("etag"),b&&(rt.etag[o]=b)),204===t||"HEAD"===h.type?w="nocontent":304===t?w="notmodified":(w=v.state,c=v.data,g=v.error,r=!g)):(g=w,!t&&w||(w="error",0>t&&(t=0))),_.status=t,_.statusText=(e||w)+"",r?d.resolveWith(p,[c,w,_]):d.rejectWith(p,[_,w,g]),_.statusCode(y),y=void 0,u&&f.trigger(r?"ajaxSuccess":"ajaxError",[_,h,r?c:g]),m.fireWith(p,[_,w]),u&&(f.trigger("ajaxComplete",[_,h]),--rt.active||rt.event.trigger("ajaxStop")))}"object"==typeof t&&(e=t,t=void 0),e=e||{};var i,r,o,s,a,u,l,c,h=rt.ajaxSetup({},e),p=h.context||h,f=h.context&&(p.nodeType||p.jquery)?rt(p):rt.event,d=rt.Deferred(),m=rt.Callbacks("once memory"),y=h.statusCode||{},g={},v={},x=0,b="canceled",_={readyState:0,getResponseHeader:function(t){var e;if(2===x){if(!c)for(c={};e=Me.exec(s);)c[e[1].toLowerCase()]=e[2];e=c[t.toLowerCase()]}return null==e?null:e},getAllResponseHeaders:function(){return 2===x?s:null},setRequestHeader:function(t,e){var n=t.toLowerCase();return x||(t=v[n]=v[n]||t,g[t]=e),this},overrideMimeType:function(t){return x||(h.mimeType=t),this},statusCode:function(t){var e;if(t)if(2>x)for(e in t)y[e]=[y[e],t[e]];else _.always(t[_.status]);return this},abort:function(t){var e=t||b;return l&&l.abort(e),n(0,e),this}};if(d.promise(_).complete=m.add,_.success=_.done,_.error=_.fail,h.url=((t||h.url||Ae)+"").replace(He,"").replace(We,De[1]+"//"),h.type=e.method||e.type||h.method||h.type,h.dataTypes=rt.trim(h.dataType||"*").toLowerCase().match(xt)||[""],null==h.crossDomain&&(i=Fe.exec(h.url.toLowerCase()),h.crossDomain=!(!i||i[1]===De[1]&&i[2]===De[2]&&(i[3]||("http:"===i[1]?"80":"443"))===(De[3]||("http:"===De[1]?"80":"443")))),h.data&&h.processData&&"string"!=typeof h.data&&(h.data=rt.param(h.data,h.traditional)),W(Pe,h,e,_),2===x)return _;u=rt.event&&h.global,u&&0===rt.active++&&rt.event.trigger("ajaxStart"),h.type=h.type.toUpperCase(),h.hasContent=!Re.test(h.type),o=h.url,h.hasContent||(h.data&&(o=h.url+=(Ie.test(o)?"&":"?")+h.data,delete h.data),h.cache===!1&&(h.url=qe.test(o)?o.replace(qe,"$1_="+ke++):o+(Ie.test(o)?"&":"?")+"_="+ke++)),h.ifModified&&(rt.lastModified[o]&&_.setRequestHeader("If-Modified-Since",rt.lastModified[o]),rt.etag[o]&&_.setRequestHeader("If-None-Match",rt.etag[o])),(h.data&&h.hasContent&&h.contentType!==!1||e.contentType)&&_.setRequestHeader("Content-Type",h.contentType),_.setRequestHeader("Accept",h.dataTypes[0]&&h.accepts[h.dataTypes[0]]?h.accepts[h.dataTypes[0]]+("*"!==h.dataTypes[0]?", "+$e+"; q=0.01":""):h.accepts["*"]);for(r in h.headers)_.setRequestHeader(r,h.headers[r]);if(h.beforeSend&&(h.beforeSend.call(p,_,h)===!1||2===x))return _.abort();b="abort";for(r in{success:1,error:1,complete:1})_[r](h[r]);if(l=W(Be,h,e,_)){_.readyState=1,u&&f.trigger("ajaxSend",[_,h]),h.async&&h.timeout>0&&(a=setTimeout(function(){_.abort("timeout")},h.timeout));try{x=1,l.send(g,n)}catch(w){if(!(2>x))throw w;n(-1,w)}}else n(-1,"No Transport");return _},getJSON:function(t,e,n){return rt.get(t,e,n,"json")},getScript:function(t,e){return rt.get(t,void 0,e,"script")}}),rt.each(["get","post"],function(t,e){rt[e]=function(t,n,i,r){return rt.isFunction(n)&&(r=r||i,i=n,n=void 0),rt.ajax({url:t,type:e,dataType:r,data:n,success:i})}}),rt._evalUrl=function(t){return rt.ajax({url:t,type:"GET",dataType:"script",async:!1,global:!1,"throws":!0})},rt.fn.extend({wrapAll:function(t){if(rt.isFunction(t))return this.each(function(e){rt(this).wrapAll(t.call(this,e))});if(this[0]){var e=rt(t,this[0].ownerDocument).eq(0).clone(!0);this[0].parentNode&&e.insertBefore(this[0]),e.map(function(){for(var t=this;t.firstChild&&1===t.firstChild.nodeType;)t=t.firstChild;return t}).append(this)}return this},wrapInner:function(t){return rt.isFunction(t)?this.each(function(e){rt(this).wrapInner(t.call(this,e))}):this.each(function(){var e=rt(this),n=e.contents();n.length?n.wrapAll(t):e.append(t)})},wrap:function(t){var e=rt.isFunction(t);return this.each(function(n){rt(this).wrapAll(e?t.call(this,n):t)})},unwrap:function(){return this.parent().each(function(){rt.nodeName(this,"body")||rt(this).replaceWith(this.childNodes)}).end()}}),rt.expr.filters.hidden=function(t){return t.offsetWidth<=0&&t.offsetHeight<=0||!nt.reliableHiddenOffsets()&&"none"===(t.style&&t.style.display||rt.css(t,"display"))},rt.expr.filters.visible=function(t){return!rt.expr.filters.hidden(t)};var Ue=/%20/g,Ye=/\[\]$/,Ve=/\r?\n/g,Qe=/^(?:submit|button|image|reset|file)$/i,Ge=/^(?:input|select|textarea|keygen)/i;rt.param=function(t,e){var n,i=[],r=function(t,e){e=rt.isFunction(e)?e():null==e?"":e,i[i.length]=encodeURIComponent(t)+"="+encodeURIComponent(e)};if(void 0===e&&(e=rt.ajaxSettings&&rt.ajaxSettings.traditional),rt.isArray(t)||t.jquery&&!rt.isPlainObject(t))rt.each(t,function(){r(this.name,this.value)});else for(n in t)$(n,t[n],e,r);return i.join("&").replace(Ue,"+")},rt.fn.extend({serialize:function(){return rt.param(this.serializeArray())},serializeArray:function(){return this.map(function(){var t=rt.prop(this,"elements");return t?rt.makeArray(t):this}).filter(function(){var t=this.type;return this.name&&!rt(this).is(":disabled")&&Ge.test(this.nodeName)&&!Qe.test(t)&&(this.checked||!kt.test(t))}).map(function(t,e){var n=rt(this).val();return null==n?null:rt.isArray(n)?rt.map(n,function(t){return{name:e.name,value:t.replace(Ve,"\r\n")}}):{name:e.name,value:n.replace(Ve,"\r\n")}}).get()}}),rt.ajaxSettings.xhr=void 0!==t.ActiveXObject?function(){return!this.isLocal&&/^(get|post|head|put|delete|options)$/i.test(this.type)&&X()||U()}:X;var Je=0,Ke={},Ze=rt.ajaxSettings.xhr();t.attachEvent&&t.attachEvent("onunload",function(){for(var t in Ke)Ke[t](void 0,!0)}),nt.cors=!!Ze&&"withCredentials"in Ze,Ze=nt.ajax=!!Ze,Ze&&rt.ajaxTransport(function(t){if(!t.crossDomain||nt.cors){var e;return{send:function(n,i){var r,o=t.xhr(),s=++Je;if(o.open(t.type,t.url,t.async,t.username,t.password),t.xhrFields)for(r in t.xhrFields)o[r]=t.xhrFields[r];t.mimeType&&o.overrideMimeType&&o.overrideMimeType(t.mimeType),t.crossDomain||n["X-Requested-With"]||(n["X-Requested-With"]="XMLHttpRequest");for(r in n)void 0!==n[r]&&o.setRequestHeader(r,n[r]+"");o.send(t.hasContent&&t.data||null),e=function(n,r){var a,u,l;if(e&&(r||4===o.readyState))if(delete Ke[s],e=void 0,o.onreadystatechange=rt.noop,r)4!==o.readyState&&o.abort();else{l={},a=o.status,"string"==typeof o.responseText&&(l.text=o.responseText);try{u=o.statusText}catch(c){u=""}a||!t.isLocal||t.crossDomain?1223===a&&(a=204):a=l.text?200:404}l&&i(a,u,l,o.getAllResponseHeaders())},t.async?4===o.readyState?setTimeout(e):o.onreadystatechange=Ke[s]=e:e()},abort:function(){e&&e(void 0,!0)}}}}),rt.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/(?:java|ecma)script/},converters:{"text script":function(t){return rt.globalEval(t),t}}}),rt.ajaxPrefilter("script",function(t){void 0===t.cache&&(t.cache=!1),t.crossDomain&&(t.type="GET",t.global=!1)}),rt.ajaxTransport("script",function(t){if(t.crossDomain){var e,n=dt.head||rt("head")[0]||dt.documentElement;return{send:function(i,r){e=dt.createElement("script"),e.async=!0,t.scriptCharset&&(e.charset=t.scriptCharset),e.src=t.url,e.onload=e.onreadystatechange=function(t,n){(n||!e.readyState||/loaded|complete/.test(e.readyState))&&(e.onload=e.onreadystatechange=null,e.parentNode&&e.parentNode.removeChild(e),e=null,n||r(200,"success"))},n.insertBefore(e,n.firstChild)},abort:function(){e&&e.onload(void 0,!0)}}}});var tn=[],en=/(=)\?(?=&|$)|\?\?/;rt.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var t=tn.pop()||rt.expando+"_"+ke++;return this[t]=!0,t}}),rt.ajaxPrefilter("json jsonp",function(e,n,i){var r,o,s,a=e.jsonp!==!1&&(en.test(e.url)?"url":"string"==typeof e.data&&!(e.contentType||"").indexOf("application/x-www-form-urlencoded")&&en.test(e.data)&&"data");return a||"jsonp"===e.dataTypes[0]?(r=e.jsonpCallback=rt.isFunction(e.jsonpCallback)?e.jsonpCallback():e.jsonpCallback,a?e[a]=e[a].replace(en,"$1"+r):e.jsonp!==!1&&(e.url+=(Ie.test(e.url)?"&":"?")+e.jsonp+"="+r),e.converters["script json"]=function(){return s||rt.error(r+" was not called"),s[0]},e.dataTypes[0]="json",o=t[r],t[r]=function(){s=arguments},i.always(function(){t[r]=o,e[r]&&(e.jsonpCallback=n.jsonpCallback,tn.push(r)),s&&rt.isFunction(o)&&o(s[0]),s=o=void 0}),"script"):void 0}),rt.parseHTML=function(t,e,n){if(!t||"string"!=typeof t)return null;"boolean"==typeof e&&(n=e,e=!1),e=e||dt;var i=ht.exec(t),r=!n&&[];return i?[e.createElement(i[1])]:(i=rt.buildFragment([t],e,r),r&&r.length&&rt(r).remove(),rt.merge([],i.childNodes))};var nn=rt.fn.load;rt.fn.load=function(t,e,n){if("string"!=typeof t&&nn)return nn.apply(this,arguments);var i,r,o,s=this,a=t.indexOf(" ");return a>=0&&(i=rt.trim(t.slice(a,t.length)),t=t.slice(0,a)),rt.isFunction(e)?(n=e,e=void 0):e&&"object"==typeof e&&(o="POST"),s.length>0&&rt.ajax({url:t,type:o,dataType:"html",data:e}).done(function(t){r=arguments,s.html(i?rt("<div>").append(rt.parseHTML(t)).find(i):t)}).complete(n&&function(t,e){s.each(n,r||[t.responseText,e,t])}),this},rt.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],function(t,e){rt.fn[e]=function(t){return this.on(e,t)}}),rt.expr.filters.animated=function(t){return rt.grep(rt.timers,function(e){return t===e.elem}).length};var rn=t.document.documentElement;rt.offset={setOffset:function(t,e,n){var i,r,o,s,a,u,l,c=rt.css(t,"position"),h=rt(t),p={};"static"===c&&(t.style.position="relative"),a=h.offset(),o=rt.css(t,"top"),u=rt.css(t,"left"),l=("absolute"===c||"fixed"===c)&&rt.inArray("auto",[o,u])>-1,l?(i=h.position(),s=i.top,r=i.left):(s=parseFloat(o)||0,r=parseFloat(u)||0),rt.isFunction(e)&&(e=e.call(t,n,a)),null!=e.top&&(p.top=e.top-a.top+s),null!=e.left&&(p.left=e.left-a.left+r),"using"in e?e.using.call(t,p):h.css(p)}},rt.fn.extend({offset:function(t){if(arguments.length)return void 0===t?this:this.each(function(e){rt.offset.setOffset(this,t,e)});var e,n,i={top:0,left:0},r=this[0],o=r&&r.ownerDocument;if(o)return e=o.documentElement,rt.contains(e,r)?(typeof r.getBoundingClientRect!==Tt&&(i=r.getBoundingClientRect()),n=Y(o),{top:i.top+(n.pageYOffset||e.scrollTop)-(e.clientTop||0),left:i.left+(n.pageXOffset||e.scrollLeft)-(e.clientLeft||0)}):i},position:function(){if(this[0]){var t,e,n={top:0,left:0},i=this[0];return"fixed"===rt.css(i,"position")?e=i.getBoundingClientRect():(t=this.offsetParent(),e=this.offset(),rt.nodeName(t[0],"html")||(n=t.offset()),n.top+=rt.css(t[0],"borderTopWidth",!0),n.left+=rt.css(t[0],"borderLeftWidth",!0)),{top:e.top-n.top-rt.css(i,"marginTop",!0),left:e.left-n.left-rt.css(i,"marginLeft",!0)}}},offsetParent:function(){return this.map(function(){for(var t=this.offsetParent||rn;t&&!rt.nodeName(t,"html")&&"static"===rt.css(t,"position");)t=t.offsetParent;return t||rn})}}),rt.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},function(t,e){var n=/Y/.test(e);rt.fn[t]=function(i){return Nt(this,function(t,i,r){var o=Y(t);return void 0===r?o?e in o?o[e]:o.document.documentElement[i]:t[i]:void(o?o.scrollTo(n?rt(o).scrollLeft():r,n?r:rt(o).scrollTop()):t[i]=r)},t,i,arguments.length,null)}}),rt.each(["top","left"],function(t,e){rt.cssHooks[e]=S(nt.pixelPosition,function(t,n){return n?(n=ee(t,e),ie.test(n)?rt(t).position()[e]+"px":n):void 0})}),rt.each({Height:"height",Width:"width"},function(t,e){rt.each({padding:"inner"+t,content:e,"":"outer"+t},function(n,i){rt.fn[i]=function(i,r){var o=arguments.length&&(n||"boolean"!=typeof i),s=n||(i===!0||r===!0?"margin":"border");return Nt(this,function(e,n,i){
var r;return rt.isWindow(e)?e.document.documentElement["client"+t]:9===e.nodeType?(r=e.documentElement,Math.max(e.body["scroll"+t],r["scroll"+t],e.body["offset"+t],r["offset"+t],r["client"+t])):void 0===i?rt.css(e,n,s):rt.style(e,n,i,s)},e,o?i:void 0,o,null)}})}),rt.fn.size=function(){return this.length},rt.fn.andSelf=rt.fn.addBack,"function"==typeof define&&define.amd&&define("jquery",[],function(){return rt});var on=t.jQuery,sn=t.$;return rt.noConflict=function(e){return t.$===rt&&(t.$=sn),e&&t.jQuery===rt&&(t.jQuery=on),rt},typeof e===Tt&&(t.jQuery=t.$=rt),rt}),function(t){"use strict";var e=t.jCarousel={};e.version="0.3.4";var n=/^([+\-]=)?(.+)$/;e.parseTarget=function(t){var e=!1,i="object"!=typeof t?n.exec(t):null;return i?(t=parseInt(i[2],10)||0,i[1]&&(e=!0,"-="===i[1]&&(t*=-1))):"object"!=typeof t&&(t=parseInt(t,10)||0),{target:t,relative:e}},e.detectCarousel=function(t){for(var e;t.length>0;){if(e=t.filter("[data-jcarousel]"),e.length>0)return e;if(e=t.find("[data-jcarousel]"),e.length>0)return e;t=t.parent()}return null},e.base=function(n){return{version:e.version,_options:{},_element:null,_carousel:null,_init:t.noop,_create:t.noop,_destroy:t.noop,_reload:t.noop,create:function(){return this._element.attr("data-"+n.toLowerCase(),!0).data(n,this),!1===this._trigger("create")?this:(this._create(),this._trigger("createend"),this)},destroy:function(){return!1===this._trigger("destroy")?this:(this._destroy(),this._trigger("destroyend"),this._element.removeData(n).removeAttr("data-"+n.toLowerCase()),this)},reload:function(t){return!1===this._trigger("reload")?this:(t&&this.options(t),this._reload(),this._trigger("reloadend"),this)},element:function(){return this._element},options:function(e,n){if(0===arguments.length)return t.extend({},this._options);if("string"==typeof e){if("undefined"==typeof n)return"undefined"==typeof this._options[e]?null:this._options[e];this._options[e]=n}else this._options=t.extend({},this._options,e);return this},carousel:function(){return this._carousel||(this._carousel=e.detectCarousel(this.options("carousel")||this._element),this._carousel||t.error('Could not detect carousel for plugin "'+n+'"')),this._carousel},_trigger:function(e,i,r){var o,s=!1;return r=[this].concat(r||[]),(i||this._element).each(function(){o=t.Event((n+":"+e).toLowerCase()),t(this).trigger(o,r),o.isDefaultPrevented()&&(s=!0)}),!s}}},e.plugin=function(n,i){var r=t[n]=function(e,n){this._element=t(e),this.options(n),this._init(),this.create()};return r.fn=r.prototype=t.extend({},e.base(n),i),t.fn[n]=function(e){var i=Array.prototype.slice.call(arguments,1),o=this;return"string"==typeof e?this.each(function(){var r=t(this).data(n);if(!r)return t.error("Cannot call methods on "+n+' prior to initialization; attempted to call method "'+e+'"');if(!t.isFunction(r[e])||"_"===e.charAt(0))return t.error('No such method "'+e+'" for '+n+" instance");var s=r[e].apply(r,i);return s!==r&&"undefined"!=typeof s?(o=s,!1):void 0}):this.each(function(){var i=t(this).data(n);i instanceof r?i.reload(e):new r(this,e)}),o},r}}(jQuery),function(t,e){"use strict";var n=function(t){return parseFloat(t)||0};t.jCarousel.plugin("jcarousel",{animating:!1,tail:0,inTail:!1,resizeTimer:null,lt:null,vertical:!1,rtl:!1,circular:!1,underflow:!1,relative:!1,_options:{list:function(){return this.element().children().eq(0)},items:function(){return this.list().children()},animation:400,transitions:!1,wrap:null,vertical:null,rtl:null,center:!1},_list:null,_items:null,_target:t(),_first:t(),_last:t(),_visible:t(),_fullyvisible:t(),_init:function(){var t=this;return this.onWindowResize=function(){t.resizeTimer&&clearTimeout(t.resizeTimer),t.resizeTimer=setTimeout(function(){t.reload()},100)},this},_create:function(){this._reload(),t(e).on("resize.jcarousel",this.onWindowResize)},_destroy:function(){t(e).off("resize.jcarousel",this.onWindowResize)},_reload:function(){this.vertical=this.options("vertical"),null==this.vertical&&(this.vertical=this.list().height()>this.list().width()),this.rtl=this.options("rtl"),null==this.rtl&&(this.rtl=function(e){if("rtl"===(""+e.attr("dir")).toLowerCase())return!0;var n=!1;return e.parents("[dir]").each(function(){return/rtl/i.test(t(this).attr("dir"))?(n=!0,!1):void 0}),n}(this._element)),this.lt=this.vertical?"top":"left",this.relative="relative"===this.list().css("position"),this._list=null,this._items=null;var e=this.index(this._target)>=0?this._target:this.closest();this.circular="circular"===this.options("wrap"),this.underflow=!1;var n={left:0,top:0};return e.length>0&&(this._prepare(e),this.list().find("[data-jcarousel-clone]").remove(),this._items=null,this.underflow=this._fullyvisible.length>=this.items().length,this.circular=this.circular&&!this.underflow,n[this.lt]=this._position(e)+"px"),this.move(n),this},list:function(){if(null===this._list){var e=this.options("list");this._list=t.isFunction(e)?e.call(this):this._element.find(e)}return this._list},items:function(){if(null===this._items){var e=this.options("items");this._items=(t.isFunction(e)?e.call(this):this.list().find(e)).not("[data-jcarousel-clone]")}return this._items},index:function(t){return this.items().index(t)},closest:function(){var e,i=this,r=this.list().position()[this.lt],o=t(),s=!1,a=this.vertical?"bottom":this.rtl&&!this.relative?"left":"right";return this.rtl&&this.relative&&!this.vertical&&(r+=this.list().width()-this.clipping()),this.items().each(function(){if(o=t(this),s)return!1;var u=i.dimension(o);if(r+=u,r>=0){if(e=u-n(o.css("margin-"+a)),!(Math.abs(r)-u+e/2<=0))return!1;s=!0}}),o},target:function(){return this._target},first:function(){return this._first},last:function(){return this._last},visible:function(){return this._visible},fullyvisible:function(){return this._fullyvisible},hasNext:function(){if(!1===this._trigger("hasnext"))return!0;var t=this.options("wrap"),e=this.items().length-1,n=this.options("center")?this._target:this._last;return!!(e>=0&&!this.underflow&&(t&&"first"!==t||this.index(n)<e||this.tail&&!this.inTail))},hasPrev:function(){if(!1===this._trigger("hasprev"))return!0;var t=this.options("wrap");return!!(this.items().length>0&&!this.underflow&&(t&&"last"!==t||this.index(this._first)>0||this.tail&&this.inTail))},clipping:function(){return this._element["inner"+(this.vertical?"Height":"Width")]()},dimension:function(t){return t["outer"+(this.vertical?"Height":"Width")](!0)},scroll:function(e,n,i){if(this.animating)return this;if(!1===this._trigger("scroll",null,[e,n]))return this;t.isFunction(n)&&(i=n,n=!0);var r=t.jCarousel.parseTarget(e);if(r.relative){var o,s,a,u,l,c,h,p,f=this.items().length-1,d=Math.abs(r.target),m=this.options("wrap");if(r.target>0){var y=this.index(this._last);if(y>=f&&this.tail)this.inTail?"both"===m||"last"===m?this._scroll(0,n,i):t.isFunction(i)&&i.call(this,!1):this._scrollTail(n,i);else if(o=this.index(this._target),this.underflow&&o===f&&("circular"===m||"both"===m||"last"===m)||!this.underflow&&y===f&&("both"===m||"last"===m))this._scroll(0,n,i);else if(a=o+d,this.circular&&a>f){for(p=f,l=this.items().get(-1);p++<a;)l=this.items().eq(0),c=this._visible.index(l)>=0,c&&l.after(l.clone(!0).attr("data-jcarousel-clone",!0)),this.list().append(l),c||(h={},h[this.lt]=this.dimension(l),this.moveBy(h)),this._items=null;this._scroll(l,n,i)}else this._scroll(Math.min(a,f),n,i)}else if(this.inTail)this._scroll(Math.max(this.index(this._first)-d+1,0),n,i);else if(s=this.index(this._first),o=this.index(this._target),u=this.underflow?o:s,a=u-d,0>=u&&(this.underflow&&"circular"===m||"both"===m||"first"===m))this._scroll(f,n,i);else if(this.circular&&0>a){for(p=a,l=this.items().get(0);p++<0;){l=this.items().eq(-1),c=this._visible.index(l)>=0,c&&l.after(l.clone(!0).attr("data-jcarousel-clone",!0)),this.list().prepend(l),this._items=null;var g=this.dimension(l);h={},h[this.lt]=-g,this.moveBy(h)}this._scroll(l,n,i)}else this._scroll(Math.max(a,0),n,i)}else this._scroll(r.target,n,i);return this._trigger("scrollend"),this},moveBy:function(t,e){var i=this.list().position(),r=1,o=0;return this.rtl&&!this.vertical&&(r=-1,this.relative&&(o=this.list().width()-this.clipping())),t.left&&(t.left=i.left+o+n(t.left)*r+"px"),t.top&&(t.top=i.top+o+n(t.top)*r+"px"),this.move(t,e)},move:function(e,n){n=n||{};var i=this.options("transitions"),r=!!i,o=!!i.transforms,s=!!i.transforms3d,a=n.duration||0,u=this.list();if(!r&&a>0)return void u.animate(e,n);var l=n.complete||t.noop,c={};if(r){var h={transitionDuration:u.css("transitionDuration"),transitionTimingFunction:u.css("transitionTimingFunction"),transitionProperty:u.css("transitionProperty")},p=l;l=function(){t(this).css(h),p.call(this)},c={transitionDuration:(a>0?a/1e3:0)+"s",transitionTimingFunction:i.easing||n.easing,transitionProperty:a>0?function(){return o||s?"all":e.left?"left":"top"}():"none",transform:"none"}}s?c.transform="translate3d("+(e.left||0)+","+(e.top||0)+",0)":o?c.transform="translate("+(e.left||0)+","+(e.top||0)+")":t.extend(c,e),r&&a>0&&u.one("transitionend webkitTransitionEnd oTransitionEnd otransitionend MSTransitionEnd",l),u.css(c),0>=a&&u.each(function(){l.call(this)})},_scroll:function(e,n,i){if(this.animating)return t.isFunction(i)&&i.call(this,!1),this;if("object"!=typeof e?e=this.items().eq(e):"undefined"==typeof e.jquery&&(e=t(e)),0===e.length)return t.isFunction(i)&&i.call(this,!1),this;this.inTail=!1,this._prepare(e);var r=this._position(e),o=this.list().position()[this.lt];if(r===o)return t.isFunction(i)&&i.call(this,!1),this;var s={};return s[this.lt]=r+"px",this._animate(s,n,i),this},_scrollTail:function(e,n){if(this.animating||!this.tail)return t.isFunction(n)&&n.call(this,!1),this;var i=this.list().position()[this.lt];this.rtl&&this.relative&&!this.vertical&&(i+=this.list().width()-this.clipping()),this.rtl&&!this.vertical?i+=this.tail:i-=this.tail,this.inTail=!0;var r={};return r[this.lt]=i+"px",this._update({target:this._target.next(),fullyvisible:this._fullyvisible.slice(1).add(this._visible.last())}),this._animate(r,e,n),this},_animate:function(e,n,i){if(i=i||t.noop,!1===this._trigger("animate"))return i.call(this,!1),this;this.animating=!0;var r=this.options("animation"),o=t.proxy(function(){this.animating=!1;var t=this.list().find("[data-jcarousel-clone]");t.length>0&&(t.remove(),this._reload()),this._trigger("animateend"),i.call(this,!0)},this),s="object"==typeof r?t.extend({},r):{duration:r},a=s.complete||t.noop;return n===!1?s.duration=0:"undefined"!=typeof t.fx.speeds[s.duration]&&(s.duration=t.fx.speeds[s.duration]),s.complete=function(){o(),a.call(this)},this.move(e,s),this},_prepare:function(e){var i,r,o,s,a=this.index(e),u=a,l=this.dimension(e),c=this.clipping(),h=this.vertical?"bottom":this.rtl?"left":"right",p=this.options("center"),f={target:e,first:e,last:e,visible:e,fullyvisible:c>=l?e:t()};if(p&&(l/=2,c/=2),c>l)for(;;){if(i=this.items().eq(++u),0===i.length){if(!this.circular)break;if(i=this.items().eq(0),e.get(0)===i.get(0))break;if(r=this._visible.index(i)>=0,r&&i.after(i.clone(!0).attr("data-jcarousel-clone",!0)),this.list().append(i),!r){var d={};d[this.lt]=this.dimension(i),this.moveBy(d)}this._items=null}if(s=this.dimension(i),0===s)break;if(l+=s,f.last=i,f.visible=f.visible.add(i),o=n(i.css("margin-"+h)),c>=l-o&&(f.fullyvisible=f.fullyvisible.add(i)),l>=c)break}if(!this.circular&&!p&&c>l)for(u=a;;){if(--u<0)break;if(i=this.items().eq(u),0===i.length)break;if(s=this.dimension(i),0===s)break;if(l+=s,f.first=i,f.visible=f.visible.add(i),o=n(i.css("margin-"+h)),c>=l-o&&(f.fullyvisible=f.fullyvisible.add(i)),l>=c)break}return this._update(f),this.tail=0,p||"circular"===this.options("wrap")||"custom"===this.options("wrap")||this.index(f.last)!==this.items().length-1||(l-=n(f.last.css("margin-"+h)),l>c&&(this.tail=l-c)),this},_position:function(t){var e=this._first,n=e.position()[this.lt],i=this.options("center"),r=i?this.clipping()/2-this.dimension(e)/2:0;return this.rtl&&!this.vertical?(n-=this.relative?this.list().width()-this.dimension(e):this.clipping()-this.dimension(e),n+=r):n-=r,!i&&(this.index(t)>this.index(e)||this.inTail)&&this.tail?(n=this.rtl&&!this.vertical?n-this.tail:n+this.tail,this.inTail=!0):this.inTail=!1,-n},_update:function(e){var n,i=this,r={target:this._target,first:this._first,last:this._last,visible:this._visible,fullyvisible:this._fullyvisible},o=this.index(e.first||r.first)<this.index(r.first),s=function(n){var s=[],a=[];e[n].each(function(){r[n].index(this)<0&&s.push(this)}),r[n].each(function(){e[n].index(this)<0&&a.push(this)}),o?s=s.reverse():a=a.reverse(),i._trigger(n+"in",t(s)),i._trigger(n+"out",t(a)),i["_"+n]=e[n]};for(n in e)s(n);return this}})}(jQuery,window),function(t){"use strict";t.jcarousel.fn.scrollIntoView=function(e,n,i){var r,o=t.jCarousel.parseTarget(e),s=this.index(this._fullyvisible.first()),a=this.index(this._fullyvisible.last());if(r=o.relative?o.target<0?Math.max(0,s+o.target):a+o.target:"object"!=typeof o.target?o.target:this.index(o.target),s>r)return this.scroll(r,n,i);if(r>=s&&a>=r)return t.isFunction(i)&&i.call(this,!1),this;for(var u,l=this.items(),c=this.clipping(),h=this.vertical?"bottom":this.rtl?"left":"right",p=0;;){if(u=l.eq(r),0===u.length)break;if(p+=this.dimension(u),p>=c){var f=parseFloat(u.css("margin-"+h))||0;p-f!==c&&r++;break}if(0>=r)break;r--}return this.scroll(r,n,i)}}(jQuery),function(t){"use strict";t.jCarousel.plugin("jcarouselControl",{_options:{target:"+=1",event:"click",method:"scroll"},_active:null,_init:function(){this.onDestroy=t.proxy(function(){this._destroy(),this.carousel().one("jcarousel:createend",t.proxy(this._create,this))},this),this.onReload=t.proxy(this._reload,this),this.onEvent=t.proxy(function(e){e.preventDefault();var n=this.options("method");t.isFunction(n)?n.call(this):this.carousel().jcarousel(this.options("method"),this.options("target"))},this)},_create:function(){this.carousel().one("jcarousel:destroy",this.onDestroy).on("jcarousel:reloadend jcarousel:scrollend",this.onReload),this._element.on(this.options("event")+".jcarouselcontrol",this.onEvent),this._reload()},_destroy:function(){this._element.off(".jcarouselcontrol",this.onEvent),this.carousel().off("jcarousel:destroy",this.onDestroy).off("jcarousel:reloadend jcarousel:scrollend",this.onReload)},_reload:function(){var e,n=t.jCarousel.parseTarget(this.options("target")),i=this.carousel();if(n.relative)e=i.jcarousel(n.target>0?"hasNext":"hasPrev");else{var r="object"!=typeof n.target?i.jcarousel("items").eq(n.target):n.target;e=i.jcarousel("target").index(r)>=0}return this._active!==e&&(this._trigger(e?"active":"inactive"),this._active=e),this}})}(jQuery),function(t){"use strict";t.jCarousel.plugin("jcarouselPagination",{_options:{perPage:null,item:function(t){return'<a href="#'+t+'">'+t+"</a>"},event:"click",method:"scroll"},_carouselItems:null,_pages:{},_items:{},_currentPage:null,_init:function(){this.onDestroy=t.proxy(function(){this._destroy(),this.carousel().one("jcarousel:createend",t.proxy(this._create,this))},this),this.onReload=t.proxy(this._reload,this),this.onScroll=t.proxy(this._update,this)},_create:function(){this.carousel().one("jcarousel:destroy",this.onDestroy).on("jcarousel:reloadend",this.onReload).on("jcarousel:scrollend",this.onScroll),this._reload()},_destroy:function(){this._clear(),this.carousel().off("jcarousel:destroy",this.onDestroy).off("jcarousel:reloadend",this.onReload).off("jcarousel:scrollend",this.onScroll),this._carouselItems=null},_reload:function(){var e=this.options("perPage");if(this._pages={},this._items={},t.isFunction(e)&&(e=e.call(this)),null==e)this._pages=this._calculatePages();else for(var n,i=parseInt(e,10)||0,r=this._getCarouselItems(),o=1,s=0;;){if(n=r.eq(s++),0===n.length)break;this._pages[o]?this._pages[o]=this._pages[o].add(n):this._pages[o]=n,s%i===0&&o++}this._clear();var a=this,u=this.carousel().data("jcarousel"),l=this._element,c=this.options("item"),h=this._getCarouselItems().length;t.each(this._pages,function(e,n){var i=a._items[e]=t(c.call(a,e,n));i.on(a.options("event")+".jcarouselpagination",t.proxy(function(){var t=n.eq(0);if(u.circular){var i=u.index(u.target()),r=u.index(t);parseFloat(e)>parseFloat(a._currentPage)?i>r&&(t="+="+(h-i+r)):r>i&&(t="-="+(i+(h-r)))}u[this.options("method")](t)},a)),l.append(i)}),this._update()},_update:function(){var e,n=this.carousel().jcarousel("target");t.each(this._pages,function(t,i){return i.each(function(){return n.is(this)?(e=t,!1):void 0}),e?!1:void 0}),this._currentPage!==e&&(this._trigger("inactive",this._items[this._currentPage]),this._trigger("active",this._items[e])),this._currentPage=e},items:function(){return this._items},reloadCarouselItems:function(){return this._carouselItems=null,this},_clear:function(){this._element.empty(),this._currentPage=null},_calculatePages:function(){for(var t,e,n=this.carousel().data("jcarousel"),i=this._getCarouselItems(),r=n.clipping(),o=0,s=0,a=1,u={};;){if(t=i.eq(s++),0===t.length)break;e=n.dimension(t),o+e>r&&(a++,o=0),o+=e,u[a]?u[a]=u[a].add(t):u[a]=t}return u},_getCarouselItems:function(){return this._carouselItems||(this._carouselItems=this.carousel().jcarousel("items")),this._carouselItems}})}(jQuery),function(t,e){"use strict";var n,i,r={hidden:"visibilitychange",mozHidden:"mozvisibilitychange",msHidden:"msvisibilitychange",webkitHidden:"webkitvisibilitychange"};t.each(r,function(t,r){return"undefined"!=typeof e[t]?(n=t,i=r,!1):void 0}),t.jCarousel.plugin("jcarouselAutoscroll",{_options:{target:"+=1",interval:3e3,autostart:!0},_timer:null,_started:!1,_init:function(){this.onDestroy=t.proxy(function(){this._destroy(),this.carousel().one("jcarousel:createend",t.proxy(this._create,this))},this),this.onAnimateEnd=t.proxy(this._start,this),this.onVisibilityChange=t.proxy(function(){e[n]?this._stop():this._start()},this)},_create:function(){this.carousel().one("jcarousel:destroy",this.onDestroy),t(e).on(i,this.onVisibilityChange),this.options("autostart")&&this.start()},_destroy:function(){this._stop(),this.carousel().off("jcarousel:destroy",this.onDestroy),t(e).off(i,this.onVisibilityChange)},_start:function(){return this._stop(),this._started?(this.carousel().one("jcarousel:animateend",this.onAnimateEnd),this._timer=setTimeout(t.proxy(function(){this.carousel().jcarousel("scroll",this.options("target"))},this),this.options("interval")),this):void 0},_stop:function(){return this._timer&&(this._timer=clearTimeout(this._timer)),this.carousel().off("jcarousel:animateend",this.onAnimateEnd),this},start:function(){return this._started=!0,this._start(),this},stop:function(){return this._started=!1,this._stop(),this}})}(jQuery,document),function(t){function e(){}function n(t){function n(e){e.prototype.option||(e.prototype.option=function(e){t.isPlainObject(e)&&(this.options=t.extend(!0,this.options,e))})}function r(e,n){t.fn[e]=function(r){if("string"==typeof r){for(var s=i.call(arguments,1),a=0,u=this.length;u>a;a++){var l=this[a],c=t.data(l,e);if(c)if(t.isFunction(c[r])&&"_"!==r.charAt(0)){var h=c[r].apply(c,s);if(void 0!==h)return h}else o("no such method '"+r+"' for "+e+" instance");else o("cannot call methods on "+e+" prior to initialization; attempted to call '"+r+"'")}return this}return this.each(function(){var i=t.data(this,e);i?(i.option(r),i._init()):(i=new n(this,r),t.data(this,e,i))})}}if(t){var o="undefined"==typeof console?e:function(t){console.error(t)};return t.bridget=function(t,e){n(e),r(t,e)},t.bridget}}var i=Array.prototype.slice;"function"==typeof define&&define.amd?define("jquery-bridget/jquery.bridget",["jquery"],n):n("object"==typeof exports?require("jquery"):t.jQuery)}(window),function(t){function e(e){var n=t.event;return n.target=n.target||n.srcElement||e,n}var n=document.documentElement,i=function(){};n.addEventListener?i=function(t,e,n){t.addEventListener(e,n,!1)}:n.attachEvent&&(i=function(t,n,i){t[n+i]=i.handleEvent?function(){var n=e(t);i.handleEvent.call(i,n)}:function(){var n=e(t);i.call(t,n)},t.attachEvent("on"+n,t[n+i])});var r=function(){};n.removeEventListener?r=function(t,e,n){t.removeEventListener(e,n,!1)}:n.detachEvent&&(r=function(t,e,n){t.detachEvent("on"+e,t[e+n]);try{delete t[e+n]}catch(i){t[e+n]=void 0}});var o={bind:i,unbind:r};"function"==typeof define&&define.amd?define("eventie/eventie",o):"object"==typeof exports?module.exports=o:t.eventie=o}(window),function(){"use strict";function t(){}function e(t,e){for(var n=t.length;n--;)if(t[n].listener===e)return n;return-1}function n(t){return function(){return this[t].apply(this,arguments)}}var i=t.prototype,r=this,o=r.EventEmitter;i.getListeners=function(t){var e,n,i=this._getEvents();if(t instanceof RegExp){e={};for(n in i)i.hasOwnProperty(n)&&t.test(n)&&(e[n]=i[n])}else e=i[t]||(i[t]=[]);return e},i.flattenListeners=function(t){var e,n=[];for(e=0;e<t.length;e+=1)n.push(t[e].listener);return n},i.getListenersAsObject=function(t){var e,n=this.getListeners(t);return n instanceof Array&&(e={},e[t]=n),e||n},i.addListener=function(t,n){var i,r=this.getListenersAsObject(t),o="object"==typeof n;for(i in r)r.hasOwnProperty(i)&&-1===e(r[i],n)&&r[i].push(o?n:{listener:n,once:!1});return this},i.on=n("addListener"),i.addOnceListener=function(t,e){return this.addListener(t,{listener:e,once:!0})},i.once=n("addOnceListener"),i.defineEvent=function(t){return this.getListeners(t),this},i.defineEvents=function(t){for(var e=0;e<t.length;e+=1)this.defineEvent(t[e]);return this},i.removeListener=function(t,n){var i,r,o=this.getListenersAsObject(t);for(r in o)o.hasOwnProperty(r)&&(i=e(o[r],n),-1!==i&&o[r].splice(i,1));return this},i.off=n("removeListener"),i.addListeners=function(t,e){return this.manipulateListeners(!1,t,e)},i.removeListeners=function(t,e){return this.manipulateListeners(!0,t,e)},i.manipulateListeners=function(t,e,n){var i,r,o=t?this.removeListener:this.addListener,s=t?this.removeListeners:this.addListeners;if("object"!=typeof e||e instanceof RegExp)for(i=n.length;i--;)o.call(this,e,n[i]);else for(i in e)e.hasOwnProperty(i)&&(r=e[i])&&("function"==typeof r?o.call(this,i,r):s.call(this,i,r));return this},i.removeEvent=function(t){var e,n=typeof t,i=this._getEvents();if("string"===n)delete i[t];else if(t instanceof RegExp)for(e in i)i.hasOwnProperty(e)&&t.test(e)&&delete i[e];else delete this._events;return this},i.removeAllListeners=n("removeEvent"),i.emitEvent=function(t,e){var n,i,r,o,s=this.getListenersAsObject(t);for(r in s)if(s.hasOwnProperty(r))for(i=s[r].length;i--;)n=s[r][i],n.once===!0&&this.removeListener(t,n.listener),o=n.listener.apply(this,e||[]),o===this._getOnceReturnValue()&&this.removeListener(t,n.listener);return this},i.trigger=n("emitEvent"),i.emit=function(t){var e=Array.prototype.slice.call(arguments,1);return this.emitEvent(t,e)},i.setOnceReturnValue=function(t){return this._onceReturnValue=t,this},i._getOnceReturnValue=function(){return this.hasOwnProperty("_onceReturnValue")?this._onceReturnValue:!0},i._getEvents=function(){return this._events||(this._events={})},t.noConflict=function(){return r.EventEmitter=o,t},"function"==typeof define&&define.amd?define("eventEmitter/EventEmitter",[],function(){return t}):"object"==typeof module&&module.exports?module.exports=t:r.EventEmitter=t}.call(this),function(t){function e(t){if(t){if("string"==typeof i[t])return t;t=t.charAt(0).toUpperCase()+t.slice(1);for(var e,r=0,o=n.length;o>r;r++)if(e=n[r]+t,"string"==typeof i[e])return e}}var n="Webkit Moz ms Ms O".split(" "),i=document.documentElement.style;"function"==typeof define&&define.amd?define("get-style-property/get-style-property",[],function(){return e}):"object"==typeof exports?module.exports=e:t.getStyleProperty=e}(window),function(t,e){function n(t){var e=parseFloat(t),n=-1===t.indexOf("%")&&!isNaN(e);return n&&e}function i(){}function r(){for(var t={width:0,height:0,innerWidth:0,innerHeight:0,outerWidth:0,outerHeight:0},e=0,n=a.length;n>e;e++){var i=a[e];t[i]=0}return t}function o(e){function i(){if(!p){p=!0;var i=t.getComputedStyle;if(l=function(){var t=i?function(t){return i(t,null)}:function(t){return t.currentStyle};return function(e){var n=t(e);return n||s("Style returned "+n+". Are you running this code in a hidden iframe on Firefox? See http://bit.ly/getsizebug1"),n}}(),c=e("boxSizing")){var r=document.createElement("div");r.style.width="200px",r.style.padding="1px 2px 3px 4px",r.style.borderStyle="solid",r.style.borderWidth="1px 2px 3px 4px",r.style[c]="border-box";var o=document.body||document.documentElement;o.appendChild(r);var a=l(r);h=200===n(a.width),o.removeChild(r)}}}function o(t){if(i(),"string"==typeof t&&(t=document.querySelector(t)),t&&"object"==typeof t&&t.nodeType){var e=l(t);if("none"===e.display)return r();var o={};o.width=t.offsetWidth,o.height=t.offsetHeight;for(var s=o.isBorderBox=!(!c||!e[c]||"border-box"!==e[c]),p=0,f=a.length;f>p;p++){var d=a[p],m=e[d];m=u(t,m);var y=parseFloat(m);o[d]=isNaN(y)?0:y}var g=o.paddingLeft+o.paddingRight,v=o.paddingTop+o.paddingBottom,x=o.marginLeft+o.marginRight,b=o.marginTop+o.marginBottom,_=o.borderLeftWidth+o.borderRightWidth,w=o.borderTopWidth+o.borderBottomWidth,T=s&&h,E=n(e.width);E!==!1&&(o.width=E+(T?0:g+_));var C=n(e.height);return C!==!1&&(o.height=C+(T?0:v+w)),o.innerWidth=o.width-(g+_),o.innerHeight=o.height-(v+w),o.outerWidth=o.width+x,o.outerHeight=o.height+b,o}}function u(e,n){if(t.getComputedStyle||-1===n.indexOf("%"))return n;var i=e.style,r=i.left,o=e.runtimeStyle,s=o&&o.left;return s&&(o.left=e.currentStyle.left),i.left=n,n=i.pixelLeft,i.left=r,s&&(o.left=s),n}var l,c,h,p=!1;return o}var s="undefined"==typeof console?i:function(t){console.error(t)},a=["paddingLeft","paddingRight","paddingTop","paddingBottom","marginLeft","marginRight","marginTop","marginBottom","borderLeftWidth","borderRightWidth","borderTopWidth","borderBottomWidth"];"function"==typeof define&&define.amd?define("get-size/get-size",["get-style-property/get-style-property"],o):"object"==typeof exports?module.exports=o(require("desandro-get-style-property")):t.getSize=o(t.getStyleProperty)}(window),function(t){function e(t){"function"==typeof t&&(e.isReady?t():s.push(t))}function n(t){var n="readystatechange"===t.type&&"complete"!==o.readyState;e.isReady||n||i()}function i(){e.isReady=!0;for(var t=0,n=s.length;n>t;t++){var i=s[t];i()}}function r(r){return"complete"===o.readyState?i():(r.bind(o,"DOMContentLoaded",n),r.bind(o,"readystatechange",n),r.bind(t,"load",n)),e}var o=t.document,s=[];e.isReady=!1,"function"==typeof define&&define.amd?define("doc-ready/doc-ready",["eventie/eventie"],r):"object"==typeof exports?module.exports=r(require("eventie")):t.docReady=r(t.eventie)}(window),function(t){"use strict";function e(t,e){return t[s](e)}function n(t){if(!t.parentNode){var e=document.createDocumentFragment();e.appendChild(t)}}function i(t,e){n(t);for(var i=t.parentNode.querySelectorAll(e),r=0,o=i.length;o>r;r++)if(i[r]===t)return!0;return!1}function r(t,i){return n(t),e(t,i)}var o,s=function(){if(t.matches)return"matches";if(t.matchesSelector)return"matchesSelector";for(var e=["webkit","moz","ms","o"],n=0,i=e.length;i>n;n++){var r=e[n],o=r+"MatchesSelector";if(t[o])return o}}();if(s){var a=document.createElement("div"),u=e(a,"div");o=u?e:r}else o=i;"function"==typeof define&&define.amd?define("matches-selector/matches-selector",[],function(){return o}):"object"==typeof exports?module.exports=o:window.matchesSelector=o}(Element.prototype),function(t,e){"use strict";"function"==typeof define&&define.amd?define("fizzy-ui-utils/utils",["doc-ready/doc-ready","matches-selector/matches-selector"],function(n,i){return e(t,n,i)}):"object"==typeof exports?module.exports=e(t,require("doc-ready"),require("desandro-matches-selector")):t.fizzyUIUtils=e(t,t.docReady,t.matchesSelector)}(window,function(t,e,n){var i={};i.extend=function(t,e){for(var n in e)t[n]=e[n];return t},i.modulo=function(t,e){return(t%e+e)%e};var r=Object.prototype.toString;i.isArray=function(t){return"[object Array]"==r.call(t)},i.makeArray=function(t){var e=[];if(i.isArray(t))e=t;else if(t&&"number"==typeof t.length)for(var n=0,r=t.length;r>n;n++)e.push(t[n]);else e.push(t);return e},i.indexOf=Array.prototype.indexOf?function(t,e){return t.indexOf(e)}:function(t,e){for(var n=0,i=t.length;i>n;n++)if(t[n]===e)return n;return-1},i.removeFrom=function(t,e){var n=i.indexOf(t,e);-1!=n&&t.splice(n,1)},i.isElement="function"==typeof HTMLElement||"object"==typeof HTMLElement?function(t){return t instanceof HTMLElement}:function(t){return t&&"object"==typeof t&&1==t.nodeType&&"string"==typeof t.nodeName},i.setText=function(){function t(t,n){e=e||(void 0!==document.documentElement.textContent?"textContent":"innerText"),t[e]=n}var e;return t}(),i.getParent=function(t,e){for(;t!=document.body;)if(t=t.parentNode,n(t,e))return t},i.getQueryElement=function(t){return"string"==typeof t?document.querySelector(t):t},i.handleEvent=function(t){var e="on"+t.type;this[e]&&this[e](t)},i.filterFindElements=function(t,e){t=i.makeArray(t);for(var r=[],o=0,s=t.length;s>o;o++){var a=t[o];if(i.isElement(a))if(e){n(a,e)&&r.push(a);for(var u=a.querySelectorAll(e),l=0,c=u.length;c>l;l++)r.push(u[l])}else r.push(a)}return r},i.debounceMethod=function(t,e,n){var i=t.prototype[e],r=e+"Timeout";t.prototype[e]=function(){var t=this[r];t&&clearTimeout(t);var e=arguments,o=this;this[r]=setTimeout(function(){i.apply(o,e),delete o[r]},n||100)}},i.toDashed=function(t){return t.replace(/(.)([A-Z])/g,function(t,e,n){return e+"-"+n}).toLowerCase()};var o=t.console;return i.htmlInit=function(n,r){e(function(){for(var e=i.toDashed(r),s=document.querySelectorAll(".js-"+e),a="data-"+e+"-options",u=0,l=s.length;l>u;u++){var c,h=s[u],p=h.getAttribute(a);try{c=p&&JSON.parse(p)}catch(f){o&&o.error("Error parsing "+a+" on "+h.nodeName.toLowerCase()+(h.id?"#"+h.id:"")+": "+f);continue}var d=new n(h,c),m=t.jQuery;m&&m.data(h,r,d)}})},i}),function(t,e){"use strict";"function"==typeof define&&define.amd?define("outlayer/item",["eventEmitter/EventEmitter","get-size/get-size","get-style-property/get-style-property","fizzy-ui-utils/utils"],function(n,i,r,o){return e(t,n,i,r,o)}):"object"==typeof exports?module.exports=e(t,require("wolfy87-eventemitter"),require("get-size"),require("desandro-get-style-property"),require("fizzy-ui-utils")):(t.Outlayer={},t.Outlayer.Item=e(t,t.EventEmitter,t.getSize,t.getStyleProperty,t.fizzyUIUtils))}(window,function(t,e,n,i,r){"use strict";function o(t){for(var e in t)return!1;return e=null,!0}function s(t,e){t&&(this.element=t,this.layout=e,this.position={x:0,y:0},this._create())}function a(t){return t.replace(/([A-Z])/g,function(t){return"-"+t.toLowerCase()})}var u=t.getComputedStyle,l=u?function(t){return u(t,null)}:function(t){return t.currentStyle},c=i("transition"),h=i("transform"),p=c&&h,f=!!i("perspective"),d={WebkitTransition:"webkitTransitionEnd",MozTransition:"transitionend",OTransition:"otransitionend",transition:"transitionend"}[c],m=["transform","transition","transitionDuration","transitionProperty"],y=function(){for(var t={},e=0,n=m.length;n>e;e++){var r=m[e],o=i(r);o&&o!==r&&(t[r]=o)}return t}();r.extend(s.prototype,e.prototype),s.prototype._create=function(){this._transn={ingProperties:{},clean:{},onEnd:{}},this.css({position:"absolute"})},s.prototype.handleEvent=function(t){var e="on"+t.type;this[e]&&this[e](t)},s.prototype.getSize=function(){this.size=n(this.element)},s.prototype.css=function(t){var e=this.element.style;for(var n in t){var i=y[n]||n;e[i]=t[n]}},s.prototype.getPosition=function(){var t=l(this.element),e=this.layout.options,n=e.isOriginLeft,i=e.isOriginTop,r=t[n?"left":"right"],o=t[i?"top":"bottom"],s=this.layout.size,a=-1!=r.indexOf("%")?parseFloat(r)/100*s.width:parseInt(r,10),u=-1!=o.indexOf("%")?parseFloat(o)/100*s.height:parseInt(o,10);a=isNaN(a)?0:a,u=isNaN(u)?0:u,a-=n?s.paddingLeft:s.paddingRight,u-=i?s.paddingTop:s.paddingBottom,this.position.x=a,this.position.y=u},s.prototype.layoutPosition=function(){var t=this.layout.size,e=this.layout.options,n={},i=e.isOriginLeft?"paddingLeft":"paddingRight",r=e.isOriginLeft?"left":"right",o=e.isOriginLeft?"right":"left",s=this.position.x+t[i];
n[r]=this.getXValue(s),n[o]="";var a=e.isOriginTop?"paddingTop":"paddingBottom",u=e.isOriginTop?"top":"bottom",l=e.isOriginTop?"bottom":"top",c=this.position.y+t[a];n[u]=this.getYValue(c),n[l]="",this.css(n),this.emitEvent("layout",[this])},s.prototype.getXValue=function(t){var e=this.layout.options;return e.percentPosition&&!e.isHorizontal?t/this.layout.size.width*100+"%":t+"px"},s.prototype.getYValue=function(t){var e=this.layout.options;return e.percentPosition&&e.isHorizontal?t/this.layout.size.height*100+"%":t+"px"},s.prototype._transitionTo=function(t,e){this.getPosition();var n=this.position.x,i=this.position.y,r=parseInt(t,10),o=parseInt(e,10),s=r===this.position.x&&o===this.position.y;if(this.setPosition(t,e),s&&!this.isTransitioning)return void this.layoutPosition();var a=t-n,u=e-i,l={};l.transform=this.getTranslate(a,u),this.transition({to:l,onTransitionEnd:{transform:this.layoutPosition},isCleaning:!0})},s.prototype.getTranslate=function(t,e){var n=this.layout.options;return t=n.isOriginLeft?t:-t,e=n.isOriginTop?e:-e,f?"translate3d("+t+"px, "+e+"px, 0)":"translate("+t+"px, "+e+"px)"},s.prototype.goTo=function(t,e){this.setPosition(t,e),this.layoutPosition()},s.prototype.moveTo=p?s.prototype._transitionTo:s.prototype.goTo,s.prototype.setPosition=function(t,e){this.position.x=parseInt(t,10),this.position.y=parseInt(e,10)},s.prototype._nonTransition=function(t){this.css(t.to),t.isCleaning&&this._removeStyles(t.to);for(var e in t.onTransitionEnd)t.onTransitionEnd[e].call(this)},s.prototype._transition=function(t){if(!parseFloat(this.layout.options.transitionDuration))return void this._nonTransition(t);var e=this._transn;for(var n in t.onTransitionEnd)e.onEnd[n]=t.onTransitionEnd[n];for(n in t.to)e.ingProperties[n]=!0,t.isCleaning&&(e.clean[n]=!0);if(t.from){this.css(t.from);var i=this.element.offsetHeight;i=null}this.enableTransition(t.to),this.css(t.to),this.isTransitioning=!0};var g="opacity,"+a(y.transform||"transform");s.prototype.enableTransition=function(){this.isTransitioning||(this.css({transitionProperty:g,transitionDuration:this.layout.options.transitionDuration}),this.element.addEventListener(d,this,!1))},s.prototype.transition=s.prototype[c?"_transition":"_nonTransition"],s.prototype.onwebkitTransitionEnd=function(t){this.ontransitionend(t)},s.prototype.onotransitionend=function(t){this.ontransitionend(t)};var v={"-webkit-transform":"transform","-moz-transform":"transform","-o-transform":"transform"};s.prototype.ontransitionend=function(t){if(t.target===this.element){var e=this._transn,n=v[t.propertyName]||t.propertyName;if(delete e.ingProperties[n],o(e.ingProperties)&&this.disableTransition(),n in e.clean&&(this.element.style[t.propertyName]="",delete e.clean[n]),n in e.onEnd){var i=e.onEnd[n];i.call(this),delete e.onEnd[n]}this.emitEvent("transitionEnd",[this])}},s.prototype.disableTransition=function(){this.removeTransitionStyles(),this.element.removeEventListener(d,this,!1),this.isTransitioning=!1},s.prototype._removeStyles=function(t){var e={};for(var n in t)e[n]="";this.css(e)};var x={transitionProperty:"",transitionDuration:""};return s.prototype.removeTransitionStyles=function(){this.css(x)},s.prototype.removeElem=function(){this.element.parentNode.removeChild(this.element),this.css({display:""}),this.emitEvent("remove",[this])},s.prototype.remove=function(){if(!c||!parseFloat(this.layout.options.transitionDuration))return void this.removeElem();var t=this;this.once("transitionEnd",function(){t.removeElem()}),this.hide()},s.prototype.reveal=function(){delete this.isHidden,this.css({display:""});var t=this.layout.options,e={},n=this.getHideRevealTransitionEndProperty("visibleStyle");e[n]=this.onRevealTransitionEnd,this.transition({from:t.hiddenStyle,to:t.visibleStyle,isCleaning:!0,onTransitionEnd:e})},s.prototype.onRevealTransitionEnd=function(){this.isHidden||this.emitEvent("reveal")},s.prototype.getHideRevealTransitionEndProperty=function(t){var e=this.layout.options[t];if(e.opacity)return"opacity";for(var n in e)return n},s.prototype.hide=function(){this.isHidden=!0,this.css({display:""});var t=this.layout.options,e={},n=this.getHideRevealTransitionEndProperty("hiddenStyle");e[n]=this.onHideTransitionEnd,this.transition({from:t.visibleStyle,to:t.hiddenStyle,isCleaning:!0,onTransitionEnd:e})},s.prototype.onHideTransitionEnd=function(){this.isHidden&&(this.css({display:"none"}),this.emitEvent("hide"))},s.prototype.destroy=function(){this.css({position:"",left:"",right:"",top:"",bottom:"",transition:"",transform:""})},s}),function(t,e){"use strict";"function"==typeof define&&define.amd?define("outlayer/outlayer",["eventie/eventie","eventEmitter/EventEmitter","get-size/get-size","fizzy-ui-utils/utils","./item"],function(n,i,r,o,s){return e(t,n,i,r,o,s)}):"object"==typeof exports?module.exports=e(t,require("eventie"),require("wolfy87-eventemitter"),require("get-size"),require("fizzy-ui-utils"),require("./item")):t.Outlayer=e(t,t.eventie,t.EventEmitter,t.getSize,t.fizzyUIUtils,t.Outlayer.Item)}(window,function(t,e,n,i,r,o){"use strict";function s(t,e){var n=r.getQueryElement(t);if(!n)return void(a&&a.error("Bad element for "+this.constructor.namespace+": "+(n||t)));this.element=n,u&&(this.$element=u(this.element)),this.options=r.extend({},this.constructor.defaults),this.option(e);var i=++c;this.element.outlayerGUID=i,h[i]=this,this._create(),this.options.isInitLayout&&this.layout()}var a=t.console,u=t.jQuery,l=function(){},c=0,h={};return s.namespace="outlayer",s.Item=o,s.defaults={containerStyle:{position:"relative"},isInitLayout:!0,isOriginLeft:!0,isOriginTop:!0,isResizeBound:!0,isResizingContainer:!0,transitionDuration:"0.4s",hiddenStyle:{opacity:0,transform:"scale(0.001)"},visibleStyle:{opacity:1,transform:"scale(1)"}},r.extend(s.prototype,n.prototype),s.prototype.option=function(t){r.extend(this.options,t)},s.prototype._create=function(){this.reloadItems(),this.stamps=[],this.stamp(this.options.stamp),r.extend(this.element.style,this.options.containerStyle),this.options.isResizeBound&&this.bindResize()},s.prototype.reloadItems=function(){this.items=this._itemize(this.element.children)},s.prototype._itemize=function(t){for(var e=this._filterFindItemElements(t),n=this.constructor.Item,i=[],r=0,o=e.length;o>r;r++){var s=e[r],a=new n(s,this);i.push(a)}return i},s.prototype._filterFindItemElements=function(t){return r.filterFindElements(t,this.options.itemSelector)},s.prototype.getItemElements=function(){for(var t=[],e=0,n=this.items.length;n>e;e++)t.push(this.items[e].element);return t},s.prototype.layout=function(){this._resetLayout(),this._manageStamps();var t=void 0!==this.options.isLayoutInstant?this.options.isLayoutInstant:!this._isLayoutInited;this.layoutItems(this.items,t),this._isLayoutInited=!0},s.prototype._init=s.prototype.layout,s.prototype._resetLayout=function(){this.getSize()},s.prototype.getSize=function(){this.size=i(this.element)},s.prototype._getMeasurement=function(t,e){var n,o=this.options[t];o?("string"==typeof o?n=this.element.querySelector(o):r.isElement(o)&&(n=o),this[t]=n?i(n)[e]:o):this[t]=0},s.prototype.layoutItems=function(t,e){t=this._getItemsForLayout(t),this._layoutItems(t,e),this._postLayout()},s.prototype._getItemsForLayout=function(t){for(var e=[],n=0,i=t.length;i>n;n++){var r=t[n];r.isIgnored||e.push(r)}return e},s.prototype._layoutItems=function(t,e){if(this._emitCompleteOnItems("layout",t),t&&t.length){for(var n=[],i=0,r=t.length;r>i;i++){var o=t[i],s=this._getItemLayoutPosition(o);s.item=o,s.isInstant=e||o.isLayoutInstant,n.push(s)}this._processLayoutQueue(n)}},s.prototype._getItemLayoutPosition=function(){return{x:0,y:0}},s.prototype._processLayoutQueue=function(t){for(var e=0,n=t.length;n>e;e++){var i=t[e];this._positionItem(i.item,i.x,i.y,i.isInstant)}},s.prototype._positionItem=function(t,e,n,i){i?t.goTo(e,n):t.moveTo(e,n)},s.prototype._postLayout=function(){this.resizeContainer()},s.prototype.resizeContainer=function(){if(this.options.isResizingContainer){var t=this._getContainerSize();t&&(this._setContainerMeasure(t.width,!0),this._setContainerMeasure(t.height,!1))}},s.prototype._getContainerSize=l,s.prototype._setContainerMeasure=function(t,e){if(void 0!==t){var n=this.size;n.isBorderBox&&(t+=e?n.paddingLeft+n.paddingRight+n.borderLeftWidth+n.borderRightWidth:n.paddingBottom+n.paddingTop+n.borderTopWidth+n.borderBottomWidth),t=Math.max(t,0),this.element.style[e?"width":"height"]=t+"px"}},s.prototype._emitCompleteOnItems=function(t,e){function n(){r.dispatchEvent(t+"Complete",null,[e])}function i(){s++,s===o&&n()}var r=this,o=e.length;if(!e||!o)return void n();for(var s=0,a=0,u=e.length;u>a;a++){var l=e[a];l.once(t,i)}},s.prototype.dispatchEvent=function(t,e,n){var i=e?[e].concat(n):n;if(this.emitEvent(t,i),u)if(this.$element=this.$element||u(this.element),e){var r=u.Event(e);r.type=t,this.$element.trigger(r,n)}else this.$element.trigger(t,n)},s.prototype.ignore=function(t){var e=this.getItem(t);e&&(e.isIgnored=!0)},s.prototype.unignore=function(t){var e=this.getItem(t);e&&delete e.isIgnored},s.prototype.stamp=function(t){if(t=this._find(t)){this.stamps=this.stamps.concat(t);for(var e=0,n=t.length;n>e;e++){var i=t[e];this.ignore(i)}}},s.prototype.unstamp=function(t){if(t=this._find(t))for(var e=0,n=t.length;n>e;e++){var i=t[e];r.removeFrom(this.stamps,i),this.unignore(i)}},s.prototype._find=function(t){return t?("string"==typeof t&&(t=this.element.querySelectorAll(t)),t=r.makeArray(t)):void 0},s.prototype._manageStamps=function(){if(this.stamps&&this.stamps.length){this._getBoundingRect();for(var t=0,e=this.stamps.length;e>t;t++){var n=this.stamps[t];this._manageStamp(n)}}},s.prototype._getBoundingRect=function(){var t=this.element.getBoundingClientRect(),e=this.size;this._boundingRect={left:t.left+e.paddingLeft+e.borderLeftWidth,top:t.top+e.paddingTop+e.borderTopWidth,right:t.right-(e.paddingRight+e.borderRightWidth),bottom:t.bottom-(e.paddingBottom+e.borderBottomWidth)}},s.prototype._manageStamp=l,s.prototype._getElementOffset=function(t){var e=t.getBoundingClientRect(),n=this._boundingRect,r=i(t),o={left:e.left-n.left-r.marginLeft,top:e.top-n.top-r.marginTop,right:n.right-e.right-r.marginRight,bottom:n.bottom-e.bottom-r.marginBottom};return o},s.prototype.handleEvent=function(t){var e="on"+t.type;this[e]&&this[e](t)},s.prototype.bindResize=function(){this.isResizeBound||(e.bind(t,"resize",this),this.isResizeBound=!0)},s.prototype.unbindResize=function(){this.isResizeBound&&e.unbind(t,"resize",this),this.isResizeBound=!1},s.prototype.onresize=function(){function t(){e.resize(),delete e.resizeTimeout}this.resizeTimeout&&clearTimeout(this.resizeTimeout);var e=this;this.resizeTimeout=setTimeout(t,100)},s.prototype.resize=function(){this.isResizeBound&&this.needsResizeLayout()&&this.layout()},s.prototype.needsResizeLayout=function(){var t=i(this.element),e=this.size&&t;return e&&t.innerWidth!==this.size.innerWidth},s.prototype.addItems=function(t){var e=this._itemize(t);return e.length&&(this.items=this.items.concat(e)),e},s.prototype.appended=function(t){var e=this.addItems(t);e.length&&(this.layoutItems(e,!0),this.reveal(e))},s.prototype.prepended=function(t){var e=this._itemize(t);if(e.length){var n=this.items.slice(0);this.items=e.concat(n),this._resetLayout(),this._manageStamps(),this.layoutItems(e,!0),this.reveal(e),this.layoutItems(n)}},s.prototype.reveal=function(t){this._emitCompleteOnItems("reveal",t);for(var e=t&&t.length,n=0;e&&e>n;n++){var i=t[n];i.reveal()}},s.prototype.hide=function(t){this._emitCompleteOnItems("hide",t);for(var e=t&&t.length,n=0;e&&e>n;n++){var i=t[n];i.hide()}},s.prototype.revealItemElements=function(t){var e=this.getItems(t);this.reveal(e)},s.prototype.hideItemElements=function(t){var e=this.getItems(t);this.hide(e)},s.prototype.getItem=function(t){for(var e=0,n=this.items.length;n>e;e++){var i=this.items[e];if(i.element===t)return i}},s.prototype.getItems=function(t){t=r.makeArray(t);for(var e=[],n=0,i=t.length;i>n;n++){var o=t[n],s=this.getItem(o);s&&e.push(s)}return e},s.prototype.remove=function(t){var e=this.getItems(t);if(this._emitCompleteOnItems("remove",e),e&&e.length)for(var n=0,i=e.length;i>n;n++){var o=e[n];o.remove(),r.removeFrom(this.items,o)}},s.prototype.destroy=function(){var t=this.element.style;t.height="",t.position="",t.width="";for(var e=0,n=this.items.length;n>e;e++){var i=this.items[e];i.destroy()}this.unbindResize();var r=this.element.outlayerGUID;delete h[r],delete this.element.outlayerGUID,u&&u.removeData(this.element,this.constructor.namespace)},s.data=function(t){t=r.getQueryElement(t);var e=t&&t.outlayerGUID;return e&&h[e]},s.create=function(t,e){function n(){s.apply(this,arguments)}return Object.create?n.prototype=Object.create(s.prototype):r.extend(n.prototype,s.prototype),n.prototype.constructor=n,n.defaults=r.extend({},s.defaults),r.extend(n.defaults,e),n.prototype.settings={},n.namespace=t,n.data=s.data,n.Item=function(){o.apply(this,arguments)},n.Item.prototype=new o,r.htmlInit(n,t),u&&u.bridget&&u.bridget(t,n),n},s.Item=o,s}),function(t,e){"use strict";"function"==typeof define&&define.amd?define("isotope/js/item",["outlayer/outlayer"],e):"object"==typeof exports?module.exports=e(require("outlayer")):(t.Isotope=t.Isotope||{},t.Isotope.Item=e(t.Outlayer))}(window,function(t){"use strict";function e(){t.Item.apply(this,arguments)}e.prototype=new t.Item,e.prototype._create=function(){this.id=this.layout.itemGUID++,t.Item.prototype._create.call(this),this.sortData={}},e.prototype.updateSortData=function(){if(!this.isIgnored){this.sortData.id=this.id,this.sortData["original-order"]=this.id,this.sortData.random=Math.random();var t=this.layout.options.getSortData,e=this.layout._sorters;for(var n in t){var i=e[n];this.sortData[n]=i(this.element,this)}}};var n=e.prototype.destroy;return e.prototype.destroy=function(){n.apply(this,arguments),this.css({display:""})},e}),function(t,e){"use strict";"function"==typeof define&&define.amd?define("isotope/js/layout-mode",["get-size/get-size","outlayer/outlayer"],e):"object"==typeof exports?module.exports=e(require("get-size"),require("outlayer")):(t.Isotope=t.Isotope||{},t.Isotope.LayoutMode=e(t.getSize,t.Outlayer))}(window,function(t,e){"use strict";function n(t){this.isotope=t,t&&(this.options=t.options[this.namespace],this.element=t.element,this.items=t.filteredItems,this.size=t.size)}return function(){function t(t){return function(){return e.prototype[t].apply(this.isotope,arguments)}}for(var i=["_resetLayout","_getItemLayoutPosition","_manageStamp","_getContainerSize","_getElementOffset","needsResizeLayout"],r=0,o=i.length;o>r;r++){var s=i[r];n.prototype[s]=t(s)}}(),n.prototype.needsVerticalResizeLayout=function(){var e=t(this.isotope.element),n=this.isotope.size&&e;return n&&e.innerHeight!=this.isotope.size.innerHeight},n.prototype._getMeasurement=function(){this.isotope._getMeasurement.apply(this,arguments)},n.prototype.getColumnWidth=function(){this.getSegmentSize("column","Width")},n.prototype.getRowHeight=function(){this.getSegmentSize("row","Height")},n.prototype.getSegmentSize=function(t,e){var n=t+e,i="outer"+e;if(this._getMeasurement(n,i),!this[n]){var r=this.getFirstItemSize();this[n]=r&&r[i]||this.isotope.size["inner"+e]}},n.prototype.getFirstItemSize=function(){var e=this.isotope.filteredItems[0];return e&&e.element&&t(e.element)},n.prototype.layout=function(){this.isotope.layout.apply(this.isotope,arguments)},n.prototype.getSize=function(){this.isotope.getSize(),this.size=this.isotope.size},n.modes={},n.create=function(t,e){function i(){n.apply(this,arguments)}return i.prototype=new n,e&&(i.options=e),i.prototype.namespace=t,n.modes[t]=i,i},n}),function(t,e){"use strict";"function"==typeof define&&define.amd?define("masonry/masonry",["outlayer/outlayer","get-size/get-size","fizzy-ui-utils/utils"],e):"object"==typeof exports?module.exports=e(require("outlayer"),require("get-size"),require("fizzy-ui-utils")):t.Masonry=e(t.Outlayer,t.getSize,t.fizzyUIUtils)}(window,function(t,e,n){var i=t.create("masonry");return i.prototype._resetLayout=function(){this.getSize(),this._getMeasurement("columnWidth","outerWidth"),this._getMeasurement("gutter","outerWidth"),this.measureColumns();var t=this.cols;for(this.colYs=[];t--;)this.colYs.push(0);this.maxY=0},i.prototype.measureColumns=function(){if(this.getContainerWidth(),!this.columnWidth){var t=this.items[0],n=t&&t.element;this.columnWidth=n&&e(n).outerWidth||this.containerWidth}var i=this.columnWidth+=this.gutter,r=this.containerWidth+this.gutter,o=r/i,s=i-r%i,a=s&&1>s?"round":"floor";o=Math[a](o),this.cols=Math.max(o,1)},i.prototype.getContainerWidth=function(){var t=this.options.isFitWidth?this.element.parentNode:this.element,n=e(t);this.containerWidth=n&&n.innerWidth},i.prototype._getItemLayoutPosition=function(t){t.getSize();var e=t.size.outerWidth%this.columnWidth,i=e&&1>e?"round":"ceil",r=Math[i](t.size.outerWidth/this.columnWidth);r=Math.min(r,this.cols);for(var o=this._getColGroup(r),s=Math.min.apply(Math,o),a=n.indexOf(o,s),u={x:this.columnWidth*a,y:s},l=s+t.size.outerHeight,c=this.cols+1-o.length,h=0;c>h;h++)this.colYs[a+h]=l;return u},i.prototype._getColGroup=function(t){if(2>t)return this.colYs;for(var e=[],n=this.cols+1-t,i=0;n>i;i++){var r=this.colYs.slice(i,i+t);e[i]=Math.max.apply(Math,r)}return e},i.prototype._manageStamp=function(t){var n=e(t),i=this._getElementOffset(t),r=this.options.isOriginLeft?i.left:i.right,o=r+n.outerWidth,s=Math.floor(r/this.columnWidth);s=Math.max(0,s);var a=Math.floor(o/this.columnWidth);a-=o%this.columnWidth?0:1,a=Math.min(this.cols-1,a);for(var u=(this.options.isOriginTop?i.top:i.bottom)+n.outerHeight,l=s;a>=l;l++)this.colYs[l]=Math.max(u,this.colYs[l])},i.prototype._getContainerSize=function(){this.maxY=Math.max.apply(Math,this.colYs);var t={height:this.maxY};return this.options.isFitWidth&&(t.width=this._getContainerFitWidth()),t},i.prototype._getContainerFitWidth=function(){for(var t=0,e=this.cols;--e&&0===this.colYs[e];)t++;return(this.cols-t)*this.columnWidth-this.gutter},i.prototype.needsResizeLayout=function(){var t=this.containerWidth;return this.getContainerWidth(),t!==this.containerWidth},i}),function(t,e){"use strict";"function"==typeof define&&define.amd?define("isotope/js/layout-modes/masonry",["../layout-mode","masonry/masonry"],e):"object"==typeof exports?module.exports=e(require("../layout-mode"),require("masonry-layout")):e(t.Isotope.LayoutMode,t.Masonry)}(window,function(t,e){"use strict";function n(t,e){for(var n in e)t[n]=e[n];return t}var i=t.create("masonry"),r=i.prototype._getElementOffset,o=i.prototype.layout,s=i.prototype._getMeasurement;n(i.prototype,e.prototype),i.prototype._getElementOffset=r,i.prototype.layout=o,i.prototype._getMeasurement=s;var a=i.prototype.measureColumns;i.prototype.measureColumns=function(){this.items=this.isotope.filteredItems,a.call(this)};var u=i.prototype._manageStamp;return i.prototype._manageStamp=function(){this.options.isOriginLeft=this.isotope.options.isOriginLeft,this.options.isOriginTop=this.isotope.options.isOriginTop,u.apply(this,arguments)},i}),function(t,e){"use strict";"function"==typeof define&&define.amd?define("isotope/js/layout-modes/fit-rows",["../layout-mode"],e):"object"==typeof exports?module.exports=e(require("../layout-mode")):e(t.Isotope.LayoutMode)}(window,function(t){"use strict";var e=t.create("fitRows");return e.prototype._resetLayout=function(){this.x=0,this.y=0,this.maxY=0,this._getMeasurement("gutter","outerWidth")},e.prototype._getItemLayoutPosition=function(t){t.getSize();var e=t.size.outerWidth+this.gutter,n=this.isotope.size.innerWidth+this.gutter;0!==this.x&&e+this.x>n&&(this.x=0,this.y=this.maxY);var i={x:this.x,y:this.y};return this.maxY=Math.max(this.maxY,this.y+t.size.outerHeight),this.x+=e,i},e.prototype._getContainerSize=function(){return{height:this.maxY}},e}),function(t,e){"use strict";"function"==typeof define&&define.amd?define("isotope/js/layout-modes/vertical",["../layout-mode"],e):"object"==typeof exports?module.exports=e(require("../layout-mode")):e(t.Isotope.LayoutMode)}(window,function(t){"use strict";var e=t.create("vertical",{horizontalAlignment:0});return e.prototype._resetLayout=function(){this.y=0},e.prototype._getItemLayoutPosition=function(t){t.getSize();var e=(this.isotope.size.innerWidth-t.size.outerWidth)*this.options.horizontalAlignment,n=this.y;return this.y+=t.size.outerHeight,{x:e,y:n}},e.prototype._getContainerSize=function(){return{height:this.y}},e}),function(t,e){"use strict";"function"==typeof define&&define.amd?define(["outlayer/outlayer","get-size/get-size","matches-selector/matches-selector","fizzy-ui-utils/utils","isotope/js/item","isotope/js/layout-mode","isotope/js/layout-modes/masonry","isotope/js/layout-modes/fit-rows","isotope/js/layout-modes/vertical"],function(n,i,r,o,s,a){return e(t,n,i,r,o,s,a)}):"object"==typeof exports?module.exports=e(t,require("outlayer"),require("get-size"),require("desandro-matches-selector"),require("fizzy-ui-utils"),require("./item"),require("./layout-mode"),require("./layout-modes/masonry"),require("./layout-modes/fit-rows"),require("./layout-modes/vertical")):t.Isotope=e(t,t.Outlayer,t.getSize,t.matchesSelector,t.fizzyUIUtils,t.Isotope.Item,t.Isotope.LayoutMode)}(window,function(t,e,n,i,r,o,s){function a(t,e){return function(n,i){for(var r=0,o=t.length;o>r;r++){var s=t[r],a=n.sortData[s],u=i.sortData[s];if(a>u||u>a){var l=void 0!==e[s]?e[s]:e,c=l?1:-1;return(a>u?1:-1)*c}}return 0}}var u=t.jQuery,l=String.prototype.trim?function(t){return t.trim()}:function(t){return t.replace(/^\s+|\s+$/g,"")},c=document.documentElement,h=c.textContent?function(t){return t.textContent}:function(t){return t.innerText},p=e.create("isotope",{layoutMode:"masonry",isJQueryFiltering:!0,sortAscending:!0});p.Item=o,p.LayoutMode=s,p.prototype._create=function(){this.itemGUID=0,this._sorters={},this._getSorters(),e.prototype._create.call(this),this.modes={},this.filteredItems=this.items,this.sortHistory=["original-order"];for(var t in s.modes)this._initLayoutMode(t)},p.prototype.reloadItems=function(){this.itemGUID=0,e.prototype.reloadItems.call(this)},p.prototype._itemize=function(){for(var t=e.prototype._itemize.apply(this,arguments),n=0,i=t.length;i>n;n++){var r=t[n];r.id=this.itemGUID++}return this._updateItemsSortData(t),t},p.prototype._initLayoutMode=function(t){var e=s.modes[t],n=this.options[t]||{};this.options[t]=e.options?r.extend(e.options,n):n,this.modes[t]=new e(this)},p.prototype.layout=function(){return!this._isLayoutInited&&this.options.isInitLayout?void this.arrange():void this._layout()},p.prototype._layout=function(){var t=this._getIsInstant();this._resetLayout(),this._manageStamps(),this.layoutItems(this.filteredItems,t),this._isLayoutInited=!0},p.prototype.arrange=function(t){function e(){i.reveal(n.needReveal),i.hide(n.needHide)}this.option(t),this._getIsInstant();var n=this._filter(this.items);this.filteredItems=n.matches;var i=this;this._bindArrangeComplete(),this._isInstant?this._noTransition(e):e(),this._sort(),this._layout()},p.prototype._init=p.prototype.arrange,p.prototype._getIsInstant=function(){var t=void 0!==this.options.isLayoutInstant?this.options.isLayoutInstant:!this._isLayoutInited;return this._isInstant=t,t},p.prototype._bindArrangeComplete=function(){function t(){e&&n&&i&&r.dispatchEvent("arrangeComplete",null,[r.filteredItems])}var e,n,i,r=this;this.once("layoutComplete",function(){e=!0,t()}),this.once("hideComplete",function(){n=!0,t()}),this.once("revealComplete",function(){i=!0,t()})},p.prototype._filter=function(t){var e=this.options.filter;e=e||"*";for(var n=[],i=[],r=[],o=this._getFilterTest(e),s=0,a=t.length;a>s;s++){var u=t[s];if(!u.isIgnored){var l=o(u);l&&n.push(u),l&&u.isHidden?i.push(u):l||u.isHidden||r.push(u)}}return{matches:n,needReveal:i,needHide:r}},p.prototype._getFilterTest=function(t){return u&&this.options.isJQueryFiltering?function(e){return u(e.element).is(t)}:"function"==typeof t?function(e){return t(e.element)}:function(e){return i(e.element,t)}},p.prototype.updateSortData=function(t){var e;t?(t=r.makeArray(t),e=this.getItems(t)):e=this.items,this._getSorters(),this._updateItemsSortData(e)},p.prototype._getSorters=function(){var t=this.options.getSortData;for(var e in t){var n=t[e];this._sorters[e]=f(n)}},p.prototype._updateItemsSortData=function(t){for(var e=t&&t.length,n=0;e&&e>n;n++){var i=t[n];i.updateSortData()}};var f=function(){function t(t){if("string"!=typeof t)return t;var n=l(t).split(" "),i=n[0],r=i.match(/^\[(.+)\]$/),o=r&&r[1],s=e(o,i),a=p.sortDataParsers[n[1]];return t=a?function(t){return t&&a(s(t))}:function(t){return t&&s(t)}}function e(t,e){var n;return n=t?function(e){return e.getAttribute(t)}:function(t){var n=t.querySelector(e);return n&&h(n)}}return t}();p.sortDataParsers={parseInt:function(t){return parseInt(t,10)},parseFloat:function(t){return parseFloat(t)}},p.prototype._sort=function(){var t=this.options.sortBy;if(t){var e=[].concat.apply(t,this.sortHistory),n=a(e,this.options.sortAscending);this.filteredItems.sort(n),t!=this.sortHistory[0]&&this.sortHistory.unshift(t)}},p.prototype._mode=function(){var t=this.options.layoutMode,e=this.modes[t];if(!e)throw new Error("No layout mode: "+t);return e.options=this.options[t],e},p.prototype._resetLayout=function(){e.prototype._resetLayout.call(this),this._mode()._resetLayout()},p.prototype._getItemLayoutPosition=function(t){return this._mode()._getItemLayoutPosition(t)},p.prototype._manageStamp=function(t){this._mode()._manageStamp(t)},p.prototype._getContainerSize=function(){return this._mode()._getContainerSize()},p.prototype.needsResizeLayout=function(){return this._mode().needsResizeLayout()},p.prototype.appended=function(t){var e=this.addItems(t);if(e.length){var n=this._filterRevealAdded(e);this.filteredItems=this.filteredItems.concat(n)}},p.prototype.prepended=function(t){var e=this._itemize(t);if(e.length){this._resetLayout(),this._manageStamps();var n=this._filterRevealAdded(e);this.layoutItems(this.filteredItems),this.filteredItems=n.concat(this.filteredItems),this.items=e.concat(this.items)}},p.prototype._filterRevealAdded=function(t){var e=this._filter(t);return this.hide(e.needHide),this.reveal(e.matches),this.layoutItems(e.matches,!0),e.matches},p.prototype.insert=function(t){var e=this.addItems(t);if(e.length){var n,i,r=e.length;for(n=0;r>n;n++)i=e[n],this.element.appendChild(i.element);var o=this._filter(e).matches;for(n=0;r>n;n++)e[n].isLayoutInstant=!0;for(this.arrange(),n=0;r>n;n++)delete e[n].isLayoutInstant;this.reveal(o)}};var d=p.prototype.remove;return p.prototype.remove=function(t){t=r.makeArray(t);var e=this.getItems(t);d.call(this,t);var n=e&&e.length;if(n)for(var i=0;n>i;i++){var o=e[i];r.removeFrom(this.filteredItems,o)}},p.prototype.shuffle=function(){for(var t=0,e=this.items.length;e>t;t++){var n=this.items[t];n.sortData.random=Math.random()}this.options.sortBy="random",this._sort(),this._layout()},p.prototype._noTransition=function(t){var e=this.options.transitionDuration;this.options.transitionDuration=0;var n=t.call(this);return this.options.transitionDuration=e,n},p.prototype.getFilteredItemElements=function(){for(var t=[],e=0,n=this.filteredItems.length;n>e;e++)t.push(this.filteredItems[e].element);return t},p}),function(){var t={};this.tmpl=function e(n,i){var r=/\W/.test(n)?new Function("obj","var p=[],print=function(){p.push.apply(p,arguments);};with(obj){p.push('"+n.replace(/[\r\t\n]/g," ").split("<%").join("	").replace(/((^|%>)[^\t]*)'/g,"$1\r").replace(/\t=(.*?)%>/g,"',$1,'").split("	").join("');").split("%>").join("p.push('").split("\r").join("\\'")+"');}return p.join('');"):t[n]=t[n]||e(document.getElementById(n).innerHTML);return i?r(i):r}}(),function($){$.support.cors=!0,$(function(){function renderImages(queryWord){function getXmlHttp(){var t;try{t=new ActiveXObject("Msxml2.XMLHTTP")}catch(e){try{t=new ActiveXObject("Microsoft.XMLHTTP")}catch(n){t=!1}}return t||"undefined"==typeof XMLHttpRequest||(t=new XMLHttpRequest),t}if(document.all&&document.documentMode&&8===document.documentMode||9===document.documentMode){var xmlhttp=getXmlHttp();xmlhttp.open("GET","https://pixabay.com/api/?key="+API_KEY+"&q="+queryWord+"&page="+page+"&per_page="+perPage+"&image_type=photo",!0),xmlhttp.onreadystatechange=function(){if(4==xmlhttp.readyState&&200==xmlhttp.status){var data=eval("("+xmlhttp.responseText+")");console.log(data);var html=$("#ideas-tmpl").html(),content=tmpl(html,{data:data.hits});$(".grid").remove(),$(".ideas .wrapper").append(content),$(".grid").isotope({itemSelector:".grid-item",layoutMode:"masonry",masonry:{gutter:20}})}},xmlhttp.send(null)}else $.ajax({type:"GET",dataType:"json",cache:!1,url:"https://pixabay.com/api/?key="+API_KEY+"&q="+queryWord+"&page="+page+"&per_page="+perPage+"&image_type=photo",success:function(t){console.log(t);var e=$("#ideas-tmpl").html(),n=tmpl(e,{data:t.hits});$(".grid").remove(),$(".ideas .wrapper").append(n),$(".grid").isotope({itemSelector:".grid-item",layoutMode:"masonry",masonry:{gutter:20}})}})}$(".jcarousel").jcarousel({animation:"slow",wrap:"circular"}).jcarouselAutoscroll({interval:5e3,target:"+=1",autostart:!0}),$(".jcarousel-control-prev").on("jcarouselcontrol:active",function(){$(this).removeClass("inactive")}).on("jcarouselcontrol:inactive",function(){$(this).addClass("inactive")}).jcarouselControl({target:"-=1"}),$(".jcarousel-control-next").on("jcarouselcontrol:active",function(){$(this).removeClass("inactive")}).on("jcarouselcontrol:inactive",function(){$(this).addClass("inactive")}).jcarouselControl({target:"+=1"});var queryWord="",API_KEY="2272138-78bddf30ad93af5874e7a0791",page=1,perPage=7;$(".search__button").on("click",function(t){t.preventDefault();var e=$(".search__input");renderImages(encodeURIComponent(e.val())),e.val("")}),renderImages(queryWord)})}(jQuery);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1haW4uanMiXSwibmFtZXMiOlsiZ2xvYmFsIiwiZmFjdG9yeSIsIm1vZHVsZSIsImV4cG9ydHMiLCJkb2N1bWVudCIsInciLCJFcnJvciIsIndpbmRvdyIsInRoaXMiLCJub0dsb2JhbCIsImlzQXJyYXlsaWtlIiwib2JqIiwibGVuZ3RoIiwidHlwZSIsImpRdWVyeSIsImlzV2luZG93Iiwibm9kZVR5cGUiLCJ3aW5ub3ciLCJlbGVtZW50cyIsInF1YWxpZmllciIsIm5vdCIsImlzRnVuY3Rpb24iLCJncmVwIiwiZWxlbSIsImkiLCJjYWxsIiwicmlzU2ltcGxlIiwidGVzdCIsImZpbHRlciIsImluQXJyYXkiLCJzaWJsaW5nIiwiY3VyIiwiZGlyIiwiY3JlYXRlT3B0aW9ucyIsIm9wdGlvbnMiLCJvYmplY3QiLCJvcHRpb25zQ2FjaGUiLCJlYWNoIiwibWF0Y2giLCJybm90d2hpdGUiLCJfIiwiZmxhZyIsImRldGFjaCIsImFkZEV2ZW50TGlzdGVuZXIiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwiY29tcGxldGVkIiwiZGV0YWNoRXZlbnQiLCJldmVudCIsInJlYWR5U3RhdGUiLCJyZWFkeSIsImRhdGFBdHRyIiwia2V5IiwiZGF0YSIsInVuZGVmaW5lZCIsIm5hbWUiLCJyZXBsYWNlIiwicm11bHRpRGFzaCIsInRvTG93ZXJDYXNlIiwiZ2V0QXR0cmlidXRlIiwicmJyYWNlIiwicGFyc2VKU09OIiwiZSIsImlzRW1wdHlEYXRhT2JqZWN0IiwiaXNFbXB0eU9iamVjdCIsImludGVybmFsRGF0YSIsInB2dCIsImFjY2VwdERhdGEiLCJyZXQiLCJ0aGlzQ2FjaGUiLCJpbnRlcm5hbEtleSIsImV4cGFuZG8iLCJpc05vZGUiLCJjYWNoZSIsImlkIiwiZGVsZXRlZElkcyIsInBvcCIsImd1aWQiLCJ0b0pTT04iLCJub29wIiwiZXh0ZW5kIiwiY2FtZWxDYXNlIiwiaW50ZXJuYWxSZW1vdmVEYXRhIiwiaXNBcnJheSIsImNvbmNhdCIsIm1hcCIsInNwbGl0IiwiY2xlYW5EYXRhIiwic3VwcG9ydCIsImRlbGV0ZUV4cGFuZG8iLCJyZXR1cm5UcnVlIiwicmV0dXJuRmFsc2UiLCJzYWZlQWN0aXZlRWxlbWVudCIsImFjdGl2ZUVsZW1lbnQiLCJlcnIiLCJjcmVhdGVTYWZlRnJhZ21lbnQiLCJsaXN0Iiwibm9kZU5hbWVzIiwic2FmZUZyYWciLCJjcmVhdGVEb2N1bWVudEZyYWdtZW50IiwiY3JlYXRlRWxlbWVudCIsImdldEFsbCIsImNvbnRleHQiLCJ0YWciLCJlbGVtcyIsImZvdW5kIiwiZ2V0RWxlbWVudHNCeVRhZ05hbWUiLCJzdHJ1bmRlZmluZWQiLCJxdWVyeVNlbGVjdG9yQWxsIiwiY2hpbGROb2RlcyIsIm5vZGVOYW1lIiwicHVzaCIsIm1lcmdlIiwiZml4RGVmYXVsdENoZWNrZWQiLCJyY2hlY2thYmxlVHlwZSIsImRlZmF1bHRDaGVja2VkIiwiY2hlY2tlZCIsIm1hbmlwdWxhdGlvblRhcmdldCIsImNvbnRlbnQiLCJmaXJzdENoaWxkIiwiYXBwZW5kQ2hpbGQiLCJvd25lckRvY3VtZW50IiwiZGlzYWJsZVNjcmlwdCIsImZpbmQiLCJhdHRyIiwicmVzdG9yZVNjcmlwdCIsInJzY3JpcHRUeXBlTWFza2VkIiwiZXhlYyIsInJlbW92ZUF0dHJpYnV0ZSIsInNldEdsb2JhbEV2YWwiLCJyZWZFbGVtZW50cyIsIl9kYXRhIiwiY2xvbmVDb3B5RXZlbnQiLCJzcmMiLCJkZXN0IiwiaGFzRGF0YSIsImwiLCJvbGREYXRhIiwiY3VyRGF0YSIsImV2ZW50cyIsImhhbmRsZSIsImFkZCIsImZpeENsb25lTm9kZUlzc3VlcyIsIm5vQ2xvbmVFdmVudCIsInJlbW92ZUV2ZW50IiwidGV4dCIsInBhcmVudE5vZGUiLCJvdXRlckhUTUwiLCJodG1sNUNsb25lIiwiaW5uZXJIVE1MIiwidHJpbSIsInZhbHVlIiwiZGVmYXVsdFNlbGVjdGVkIiwic2VsZWN0ZWQiLCJkZWZhdWx0VmFsdWUiLCJhY3R1YWxEaXNwbGF5IiwiZG9jIiwic3R5bGUiLCJhcHBlbmRUbyIsImJvZHkiLCJkaXNwbGF5IiwiZ2V0RGVmYXVsdENvbXB1dGVkU3R5bGUiLCJjc3MiLCJkZWZhdWx0RGlzcGxheSIsImVsZW1kaXNwbGF5IiwiaWZyYW1lIiwiZG9jdW1lbnRFbGVtZW50IiwiY29udGVudFdpbmRvdyIsImNvbnRlbnREb2N1bWVudCIsIndyaXRlIiwiY2xvc2UiLCJhZGRHZXRIb29rSWYiLCJjb25kaXRpb25GbiIsImhvb2tGbiIsImdldCIsImNvbmRpdGlvbiIsImFwcGx5IiwiYXJndW1lbnRzIiwidmVuZG9yUHJvcE5hbWUiLCJjYXBOYW1lIiwiY2hhckF0IiwidG9VcHBlckNhc2UiLCJzbGljZSIsIm9yaWdOYW1lIiwiY3NzUHJlZml4ZXMiLCJzaG93SGlkZSIsInNob3ciLCJoaWRkZW4iLCJ2YWx1ZXMiLCJpbmRleCIsImlzSGlkZGVuIiwic2V0UG9zaXRpdmVOdW1iZXIiLCJzdWJ0cmFjdCIsIm1hdGNoZXMiLCJybnVtc3BsaXQiLCJNYXRoIiwibWF4IiwiYXVnbWVudFdpZHRoT3JIZWlnaHQiLCJleHRyYSIsImlzQm9yZGVyQm94Iiwic3R5bGVzIiwidmFsIiwiY3NzRXhwYW5kIiwiZ2V0V2lkdGhPckhlaWdodCIsInZhbHVlSXNCb3JkZXJCb3giLCJvZmZzZXRXaWR0aCIsIm9mZnNldEhlaWdodCIsImdldFN0eWxlcyIsImJveFNpemluZyIsImN1ckNTUyIsInJudW1ub25weCIsImJveFNpemluZ1JlbGlhYmxlIiwicGFyc2VGbG9hdCIsIlR3ZWVuIiwicHJvcCIsImVuZCIsImVhc2luZyIsInByb3RvdHlwZSIsImluaXQiLCJjcmVhdGVGeE5vdyIsInNldFRpbWVvdXQiLCJmeE5vdyIsIm5vdyIsImdlbkZ4IiwiaW5jbHVkZVdpZHRoIiwid2hpY2giLCJhdHRycyIsImhlaWdodCIsIm9wYWNpdHkiLCJ3aWR0aCIsImNyZWF0ZVR3ZWVuIiwiYW5pbWF0aW9uIiwidHdlZW4iLCJjb2xsZWN0aW9uIiwidHdlZW5lcnMiLCJkZWZhdWx0UHJlZmlsdGVyIiwicHJvcHMiLCJvcHRzIiwidG9nZ2xlIiwiaG9va3MiLCJvbGRmaXJlIiwiY2hlY2tEaXNwbGF5IiwiYW5pbSIsIm9yaWciLCJkYXRhU2hvdyIsInF1ZXVlIiwiX3F1ZXVlSG9va3MiLCJ1bnF1ZXVlZCIsImVtcHR5IiwiZmlyZSIsImFsd2F5cyIsIm92ZXJmbG93Iiwib3ZlcmZsb3dYIiwib3ZlcmZsb3dZIiwiaW5saW5lQmxvY2tOZWVkc0xheW91dCIsInpvb20iLCJzaHJpbmtXcmFwQmxvY2tzIiwicmZ4dHlwZXMiLCJkb25lIiwiaGlkZSIsIl9yZW1vdmVEYXRhIiwic3RhcnQiLCJwcm9wRmlsdGVyIiwic3BlY2lhbEVhc2luZyIsImNzc0hvb2tzIiwiZXhwYW5kIiwiQW5pbWF0aW9uIiwicHJvcGVydGllcyIsInJlc3VsdCIsInN0b3BwZWQiLCJhbmltYXRpb25QcmVmaWx0ZXJzIiwiZGVmZXJyZWQiLCJEZWZlcnJlZCIsInRpY2siLCJjdXJyZW50VGltZSIsInJlbWFpbmluZyIsInN0YXJ0VGltZSIsImR1cmF0aW9uIiwidGVtcCIsInBlcmNlbnQiLCJ0d2VlbnMiLCJydW4iLCJub3RpZnlXaXRoIiwicmVzb2x2ZVdpdGgiLCJwcm9taXNlIiwib3JpZ2luYWxQcm9wZXJ0aWVzIiwib3JpZ2luYWxPcHRpb25zIiwic3RvcCIsImdvdG9FbmQiLCJyZWplY3RXaXRoIiwiZngiLCJ0aW1lciIsInByb2dyZXNzIiwiY29tcGxldGUiLCJmYWlsIiwiYWRkVG9QcmVmaWx0ZXJzT3JUcmFuc3BvcnRzIiwic3RydWN0dXJlIiwiZGF0YVR5cGVFeHByZXNzaW9uIiwiZnVuYyIsImRhdGFUeXBlIiwiZGF0YVR5cGVzIiwidW5zaGlmdCIsImluc3BlY3RQcmVmaWx0ZXJzT3JUcmFuc3BvcnRzIiwianFYSFIiLCJpbnNwZWN0IiwiaW5zcGVjdGVkIiwicHJlZmlsdGVyT3JGYWN0b3J5IiwiZGF0YVR5cGVPclRyYW5zcG9ydCIsInNlZWtpbmdUcmFuc3BvcnQiLCJ0cmFuc3BvcnRzIiwiYWpheEV4dGVuZCIsInRhcmdldCIsImRlZXAiLCJmbGF0T3B0aW9ucyIsImFqYXhTZXR0aW5ncyIsImFqYXhIYW5kbGVSZXNwb25zZXMiLCJzIiwicmVzcG9uc2VzIiwiZmlyc3REYXRhVHlwZSIsImN0IiwiZmluYWxEYXRhVHlwZSIsImNvbnRlbnRzIiwic2hpZnQiLCJtaW1lVHlwZSIsImdldFJlc3BvbnNlSGVhZGVyIiwiY29udmVydGVycyIsImFqYXhDb252ZXJ0IiwicmVzcG9uc2UiLCJpc1N1Y2Nlc3MiLCJjb252MiIsImN1cnJlbnQiLCJjb252IiwidG1wIiwicHJldiIsInJlc3BvbnNlRmllbGRzIiwiZGF0YUZpbHRlciIsInN0YXRlIiwiZXJyb3IiLCJidWlsZFBhcmFtcyIsInByZWZpeCIsInRyYWRpdGlvbmFsIiwidiIsInJicmFja2V0IiwiY3JlYXRlU3RhbmRhcmRYSFIiLCJYTUxIdHRwUmVxdWVzdCIsImNyZWF0ZUFjdGl2ZVhIUiIsIkFjdGl2ZVhPYmplY3QiLCJnZXRXaW5kb3ciLCJkZWZhdWx0VmlldyIsInBhcmVudFdpbmRvdyIsImluZGV4T2YiLCJjbGFzczJ0eXBlIiwidG9TdHJpbmciLCJoYXNPd24iLCJoYXNPd25Qcm9wZXJ0eSIsInZlcnNpb24iLCJzZWxlY3RvciIsImZuIiwicnRyaW0iLCJybXNQcmVmaXgiLCJyZGFzaEFscGhhIiwiZmNhbWVsQ2FzZSIsImFsbCIsImxldHRlciIsImpxdWVyeSIsImNvbnN0cnVjdG9yIiwidG9BcnJheSIsIm51bSIsInB1c2hTdGFjayIsInByZXZPYmplY3QiLCJjYWxsYmFjayIsImFyZ3MiLCJmaXJzdCIsImVxIiwibGFzdCIsImxlbiIsImoiLCJzb3J0Iiwic3BsaWNlIiwiY29weUlzQXJyYXkiLCJjb3B5IiwiY2xvbmUiLCJpc1BsYWluT2JqZWN0IiwicmFuZG9tIiwiaXNSZWFkeSIsIm1zZyIsIkFycmF5IiwiaXNOdW1lcmljIiwib3duTGFzdCIsImdsb2JhbEV2YWwiLCJleGVjU2NyaXB0Iiwic3RyaW5nIiwibWFrZUFycmF5IiwiYXJyIiwicmVzdWx0cyIsIk9iamVjdCIsInNlY29uZCIsImludmVydCIsImNhbGxiYWNrSW52ZXJzZSIsImNhbGxiYWNrRXhwZWN0IiwiYXJnIiwicHJveHkiLCJEYXRlIiwiU2l6emxlIiwic2VlZCIsIm0iLCJncm91cHMiLCJvbGQiLCJuaWQiLCJuZXdDb250ZXh0IiwibmV3U2VsZWN0b3IiLCJwcmVmZXJyZWREb2MiLCJzZXREb2N1bWVudCIsImRvY3VtZW50SXNIVE1MIiwicnF1aWNrRXhwciIsImdldEVsZW1lbnRCeUlkIiwiY29udGFpbnMiLCJnZXRFbGVtZW50c0J5Q2xhc3NOYW1lIiwicXNhIiwicmJ1Z2d5UVNBIiwidG9rZW5pemUiLCJyZXNjYXBlIiwic2V0QXR0cmlidXRlIiwidG9TZWxlY3RvciIsInJzaWJsaW5nIiwidGVzdENvbnRleHQiLCJqb2luIiwicXNhRXJyb3IiLCJzZWxlY3QiLCJjcmVhdGVDYWNoZSIsImtleXMiLCJFeHByIiwiY2FjaGVMZW5ndGgiLCJtYXJrRnVuY3Rpb24iLCJhc3NlcnQiLCJkaXYiLCJyZW1vdmVDaGlsZCIsImFkZEhhbmRsZSIsImhhbmRsZXIiLCJhdHRySGFuZGxlIiwic2libGluZ0NoZWNrIiwiYSIsImIiLCJkaWZmIiwic291cmNlSW5kZXgiLCJNQVhfTkVHQVRJVkUiLCJuZXh0U2libGluZyIsImNyZWF0ZUlucHV0UHNldWRvIiwiY3JlYXRlQnV0dG9uUHNldWRvIiwiY3JlYXRlUG9zaXRpb25hbFBzZXVkbyIsImFyZ3VtZW50IiwibWF0Y2hJbmRleGVzIiwic2V0RmlsdGVycyIsInRva2VucyIsImFkZENvbWJpbmF0b3IiLCJtYXRjaGVyIiwiY29tYmluYXRvciIsImJhc2UiLCJjaGVja05vbkVsZW1lbnRzIiwiZG9uZU5hbWUiLCJ4bWwiLCJvbGRDYWNoZSIsIm91dGVyQ2FjaGUiLCJuZXdDYWNoZSIsImRpcnJ1bnMiLCJlbGVtZW50TWF0Y2hlciIsIm1hdGNoZXJzIiwibXVsdGlwbGVDb250ZXh0cyIsImNvbnRleHRzIiwiY29uZGVuc2UiLCJ1bm1hdGNoZWQiLCJuZXdVbm1hdGNoZWQiLCJtYXBwZWQiLCJzZXRNYXRjaGVyIiwicHJlRmlsdGVyIiwicG9zdEZpbHRlciIsInBvc3RGaW5kZXIiLCJwb3N0U2VsZWN0b3IiLCJwcmVNYXAiLCJwb3N0TWFwIiwicHJlZXhpc3RpbmciLCJtYXRjaGVySW4iLCJtYXRjaGVyT3V0IiwibWF0Y2hlckZyb21Ub2tlbnMiLCJjaGVja0NvbnRleHQiLCJsZWFkaW5nUmVsYXRpdmUiLCJyZWxhdGl2ZSIsImltcGxpY2l0UmVsYXRpdmUiLCJtYXRjaENvbnRleHQiLCJtYXRjaEFueUNvbnRleHQiLCJvdXRlcm1vc3RDb250ZXh0IiwibWF0Y2hlckZyb21Hcm91cE1hdGNoZXJzIiwiZWxlbWVudE1hdGNoZXJzIiwic2V0TWF0Y2hlcnMiLCJieVNldCIsImJ5RWxlbWVudCIsInN1cGVyTWF0Y2hlciIsIm91dGVybW9zdCIsIm1hdGNoZWRDb3VudCIsInNldE1hdGNoZWQiLCJjb250ZXh0QmFja3VwIiwiZGlycnVuc1VuaXF1ZSIsInVuaXF1ZVNvcnQiLCJnZXRUZXh0IiwiaXNYTUwiLCJjb21waWxlIiwic29ydElucHV0IiwiaGFzRHVwbGljYXRlIiwiZG9jRWxlbSIsInJidWdneU1hdGNoZXMiLCJjbGFzc0NhY2hlIiwidG9rZW5DYWNoZSIsImNvbXBpbGVyQ2FjaGUiLCJzb3J0T3JkZXIiLCJwdXNoX25hdGl2ZSIsImJvb2xlYW5zIiwid2hpdGVzcGFjZSIsImNoYXJhY3RlckVuY29kaW5nIiwiaWRlbnRpZmllciIsImF0dHJpYnV0ZXMiLCJwc2V1ZG9zIiwicndoaXRlc3BhY2UiLCJSZWdFeHAiLCJyY29tbWEiLCJyY29tYmluYXRvcnMiLCJyYXR0cmlidXRlUXVvdGVzIiwicnBzZXVkbyIsInJpZGVudGlmaWVyIiwibWF0Y2hFeHByIiwiSUQiLCJDTEFTUyIsIlRBRyIsIkFUVFIiLCJQU0VVRE8iLCJDSElMRCIsImJvb2wiLCJuZWVkc0NvbnRleHQiLCJyaW5wdXRzIiwicmhlYWRlciIsInJuYXRpdmUiLCJydW5lc2NhcGUiLCJmdW5lc2NhcGUiLCJlc2NhcGVkIiwiZXNjYXBlZFdoaXRlc3BhY2UiLCJoaWdoIiwiU3RyaW5nIiwiZnJvbUNoYXJDb2RlIiwidW5sb2FkSGFuZGxlciIsImVscyIsIm5vZGUiLCJoYXNDb21wYXJlIiwicGFyZW50IiwidG9wIiwiYXR0YWNoRXZlbnQiLCJjbGFzc05hbWUiLCJjcmVhdGVDb21tZW50IiwiZ2V0QnlJZCIsImdldEVsZW1lbnRzQnlOYW1lIiwiYXR0cklkIiwiZ2V0QXR0cmlidXRlTm9kZSIsImlucHV0IiwibWF0Y2hlc1NlbGVjdG9yIiwid2Via2l0TWF0Y2hlc1NlbGVjdG9yIiwibW96TWF0Y2hlc1NlbGVjdG9yIiwib01hdGNoZXNTZWxlY3RvciIsIm1zTWF0Y2hlc1NlbGVjdG9yIiwiZGlzY29ubmVjdGVkTWF0Y2giLCJjb21wYXJlRG9jdW1lbnRQb3NpdGlvbiIsImFkb3duIiwiYnVwIiwiY29tcGFyZSIsInNvcnREZXRhY2hlZCIsImF1cCIsImFwIiwiYnAiLCJleHByIiwic3BlY2lmaWVkIiwiZHVwbGljYXRlcyIsImRldGVjdER1cGxpY2F0ZXMiLCJzb3J0U3RhYmxlIiwidGV4dENvbnRlbnQiLCJub2RlVmFsdWUiLCJzZWxlY3RvcnMiLCJjcmVhdGVQc2V1ZG8iLCI+IiwiICIsIisiLCJ+IiwiZXhjZXNzIiwidW5xdW90ZWQiLCJub2RlTmFtZVNlbGVjdG9yIiwicGF0dGVybiIsIm9wZXJhdG9yIiwiY2hlY2siLCJ3aGF0Iiwic2ltcGxlIiwiZm9yd2FyZCIsIm9mVHlwZSIsIm5vZGVJbmRleCIsInVzZUNhY2hlIiwibGFzdENoaWxkIiwicHNldWRvIiwiaWR4IiwibWF0Y2hlZCIsImhhcyIsImlubmVyVGV4dCIsImxhbmciLCJlbGVtTGFuZyIsImhhc2giLCJsb2NhdGlvbiIsInJvb3QiLCJmb2N1cyIsImhhc0ZvY3VzIiwiaHJlZiIsInRhYkluZGV4IiwiZW5hYmxlZCIsImRpc2FibGVkIiwic2VsZWN0ZWRJbmRleCIsImhlYWRlciIsImJ1dHRvbiIsImV2ZW4iLCJvZGQiLCJsdCIsImd0IiwicmFkaW8iLCJjaGVja2JveCIsImZpbGUiLCJwYXNzd29yZCIsImltYWdlIiwic3VibWl0IiwicmVzZXQiLCJmaWx0ZXJzIiwicGFyc2VPbmx5Iiwic29GYXIiLCJwcmVGaWx0ZXJzIiwiY2FjaGVkIiwidG9rZW4iLCJjb21waWxlZCIsImRpdjEiLCJ1bmlxdWUiLCJpc1hNTERvYyIsInJuZWVkc0NvbnRleHQiLCJyc2luZ2xlVGFnIiwic2VsZiIsImlzIiwicm9vdGpRdWVyeSIsInBhcnNlSFRNTCIsInJwYXJlbnRzcHJldiIsImd1YXJhbnRlZWRVbmlxdWUiLCJjaGlsZHJlbiIsIm5leHQiLCJ1bnRpbCIsIm4iLCJyIiwidGFyZ2V0cyIsImNsb3Nlc3QiLCJwb3MiLCJwcmV2QWxsIiwiYWRkQmFjayIsInBhcmVudHMiLCJwYXJlbnRzVW50aWwiLCJuZXh0QWxsIiwibmV4dFVudGlsIiwicHJldlVudGlsIiwic2libGluZ3MiLCJyZXZlcnNlIiwiQ2FsbGJhY2tzIiwiZmlyaW5nIiwibWVtb3J5IiwiZmlyZWQiLCJmaXJpbmdMZW5ndGgiLCJmaXJpbmdJbmRleCIsImZpcmluZ1N0YXJ0Iiwic3RhY2siLCJvbmNlIiwic3RvcE9uRmFsc2UiLCJkaXNhYmxlIiwicmVtb3ZlIiwibG9jayIsImxvY2tlZCIsImZpcmVXaXRoIiwidHVwbGVzIiwidGhlbiIsImZucyIsIm5ld0RlZmVyIiwidHVwbGUiLCJyZXR1cm5lZCIsInJlc29sdmUiLCJyZWplY3QiLCJub3RpZnkiLCJwaXBlIiwic3RhdGVTdHJpbmciLCJ3aGVuIiwic3Vib3JkaW5hdGUiLCJwcm9ncmVzc1ZhbHVlcyIsInByb2dyZXNzQ29udGV4dHMiLCJyZXNvbHZlQ29udGV4dHMiLCJyZXNvbHZlVmFsdWVzIiwidXBkYXRlRnVuYyIsInJlYWR5TGlzdCIsInJlYWR5V2FpdCIsImhvbGRSZWFkeSIsImhvbGQiLCJ3YWl0IiwidHJpZ2dlckhhbmRsZXIiLCJvZmYiLCJmcmFtZUVsZW1lbnQiLCJkb1Njcm9sbCIsImRvU2Nyb2xsQ2hlY2siLCJjb250YWluZXIiLCJjc3NUZXh0Iiwibm9EYXRhIiwiYXBwbGV0ICIsImVtYmVkICIsIm9iamVjdCAiLCJyZW1vdmVEYXRhIiwiZGVxdWV1ZSIsInN0YXJ0TGVuZ3RoIiwic2V0dGVyIiwiY2xlYXJRdWV1ZSIsImNvdW50IiwiZGVmZXIiLCJwbnVtIiwic291cmNlIiwiZWwiLCJhY2Nlc3MiLCJjaGFpbmFibGUiLCJlbXB0eUdldCIsInJhdyIsImJ1bGsiLCJmcmFnbWVudCIsImxlYWRpbmdXaGl0ZXNwYWNlIiwidGJvZHkiLCJodG1sU2VyaWFsaXplIiwiY2xvbmVOb2RlIiwiYXBwZW5kQ2hlY2tlZCIsIm5vQ2xvbmVDaGVja2VkIiwiY2hlY2tDbG9uZSIsImNsaWNrIiwiZXZlbnROYW1lIiwiY2hhbmdlIiwiZm9jdXNpbiIsInJmb3JtRWxlbXMiLCJya2V5RXZlbnQiLCJybW91c2VFdmVudCIsInJmb2N1c01vcnBoIiwicnR5cGVuYW1lc3BhY2UiLCJ0eXBlcyIsInQiLCJoYW5kbGVPYmpJbiIsInNwZWNpYWwiLCJldmVudEhhbmRsZSIsImhhbmRsZU9iaiIsImhhbmRsZXJzIiwibmFtZXNwYWNlcyIsIm9yaWdUeXBlIiwiZWxlbURhdGEiLCJ0cmlnZ2VyZWQiLCJkaXNwYXRjaCIsImRlbGVnYXRlVHlwZSIsImJpbmRUeXBlIiwibmFtZXNwYWNlIiwiZGVsZWdhdGVDb3VudCIsInNldHVwIiwibWFwcGVkVHlwZXMiLCJvcmlnQ291bnQiLCJ0ZWFyZG93biIsInRyaWdnZXIiLCJvbmx5SGFuZGxlcnMiLCJvbnR5cGUiLCJidWJibGVUeXBlIiwiZXZlbnRQYXRoIiwiRXZlbnQiLCJpc1RyaWdnZXIiLCJuYW1lc3BhY2VfcmUiLCJub0J1YmJsZSIsImlzUHJvcGFnYXRpb25TdG9wcGVkIiwicHJldmVudERlZmF1bHQiLCJpc0RlZmF1bHRQcmV2ZW50ZWQiLCJfZGVmYXVsdCIsImZpeCIsImhhbmRsZXJRdWV1ZSIsImRlbGVnYXRlVGFyZ2V0IiwicHJlRGlzcGF0Y2giLCJjdXJyZW50VGFyZ2V0IiwiaXNJbW1lZGlhdGVQcm9wYWdhdGlvblN0b3BwZWQiLCJzdG9wUHJvcGFnYXRpb24iLCJwb3N0RGlzcGF0Y2giLCJzZWwiLCJvcmlnaW5hbEV2ZW50IiwiZml4SG9vayIsImZpeEhvb2tzIiwibW91c2VIb29rcyIsImtleUhvb2tzIiwic3JjRWxlbWVudCIsIm1ldGFLZXkiLCJvcmlnaW5hbCIsImNoYXJDb2RlIiwia2V5Q29kZSIsImV2ZW50RG9jIiwiZnJvbUVsZW1lbnQiLCJwYWdlWCIsImNsaWVudFgiLCJzY3JvbGxMZWZ0IiwiY2xpZW50TGVmdCIsInBhZ2VZIiwiY2xpZW50WSIsInNjcm9sbFRvcCIsImNsaWVudFRvcCIsInJlbGF0ZWRUYXJnZXQiLCJ0b0VsZW1lbnQiLCJsb2FkIiwiYmx1ciIsImJlZm9yZXVubG9hZCIsInJldHVyblZhbHVlIiwic2ltdWxhdGUiLCJidWJibGUiLCJpc1NpbXVsYXRlZCIsImRlZmF1bHRQcmV2ZW50ZWQiLCJ0aW1lU3RhbXAiLCJjYW5jZWxCdWJibGUiLCJzdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24iLCJtb3VzZWVudGVyIiwibW91c2VsZWF2ZSIsInBvaW50ZXJlbnRlciIsInBvaW50ZXJsZWF2ZSIsInJlbGF0ZWQiLCJzdWJtaXRCdWJibGVzIiwiZm9ybSIsIl9zdWJtaXRfYnViYmxlIiwiY2hhbmdlQnViYmxlcyIsInByb3BlcnR5TmFtZSIsIl9qdXN0X2NoYW5nZWQiLCJmb2N1c2luQnViYmxlcyIsImF0dGFjaGVzIiwib24iLCJvbmUiLCJvcmlnRm4iLCJyaW5saW5lalF1ZXJ5Iiwicm5vc2hpbWNhY2hlIiwicmxlYWRpbmdXaGl0ZXNwYWNlIiwicnhodG1sVGFnIiwicnRhZ05hbWUiLCJydGJvZHkiLCJyaHRtbCIsInJub0lubmVyaHRtbCIsInJjaGVja2VkIiwicnNjcmlwdFR5cGUiLCJyY2xlYW5TY3JpcHQiLCJ3cmFwTWFwIiwib3B0aW9uIiwibGVnZW5kIiwiYXJlYSIsInBhcmFtIiwidGhlYWQiLCJ0ciIsImNvbCIsInRkIiwic2FmZUZyYWdtZW50IiwiZnJhZ21lbnREaXYiLCJvcHRncm91cCIsInRmb290IiwiY29sZ3JvdXAiLCJjYXB0aW9uIiwidGgiLCJkYXRhQW5kRXZlbnRzIiwiZGVlcERhdGFBbmRFdmVudHMiLCJkZXN0RWxlbWVudHMiLCJzcmNFbGVtZW50cyIsImluUGFnZSIsImJ1aWxkRnJhZ21lbnQiLCJzY3JpcHRzIiwic2VsZWN0aW9uIiwid3JhcCIsInNhZmUiLCJub2RlcyIsImNyZWF0ZVRleHROb2RlIiwiYXBwZW5kIiwiZG9tTWFuaXAiLCJwcmVwZW5kIiwiaW5zZXJ0QmVmb3JlIiwiYmVmb3JlIiwiYWZ0ZXIiLCJrZWVwRGF0YSIsImh0bWwiLCJyZXBsYWNlV2l0aCIsInJlcGxhY2VDaGlsZCIsImhhc1NjcmlwdHMiLCJzZXQiLCJpTm9DbG9uZSIsIl9ldmFsVXJsIiwicHJlcGVuZFRvIiwiaW5zZXJ0QWZ0ZXIiLCJyZXBsYWNlQWxsIiwiaW5zZXJ0Iiwic2hyaW5rV3JhcEJsb2Nrc1ZhbCIsInJtYXJnaW4iLCJycG9zaXRpb24iLCJnZXRDb21wdXRlZFN0eWxlIiwib3BlbmVyIiwiY29tcHV0ZWQiLCJtaW5XaWR0aCIsIm1heFdpZHRoIiwiZ2V0UHJvcGVydHlWYWx1ZSIsImN1cnJlbnRTdHlsZSIsImxlZnQiLCJycyIsInJzTGVmdCIsInJ1bnRpbWVTdHlsZSIsInBpeGVsTGVmdCIsImNvbXB1dGVTdHlsZVRlc3RzIiwicGl4ZWxQb3NpdGlvblZhbCIsImJveFNpemluZ1JlbGlhYmxlVmFsIiwicmVsaWFibGVNYXJnaW5SaWdodFZhbCIsIm1hcmdpblJpZ2h0IiwicmVsaWFibGVIaWRkZW5PZmZzZXRzVmFsIiwiY3NzRmxvYXQiLCJiYWNrZ3JvdW5kQ2xpcCIsImNsZWFyQ2xvbmVTdHlsZSIsIk1vekJveFNpemluZyIsIldlYmtpdEJveFNpemluZyIsInJlbGlhYmxlSGlkZGVuT2Zmc2V0cyIsInBpeGVsUG9zaXRpb24iLCJyZWxpYWJsZU1hcmdpblJpZ2h0Iiwic3dhcCIsInJhbHBoYSIsInJvcGFjaXR5IiwicmRpc3BsYXlzd2FwIiwicnJlbE51bSIsImNzc1Nob3ciLCJwb3NpdGlvbiIsInZpc2liaWxpdHkiLCJjc3NOb3JtYWxUcmFuc2Zvcm0iLCJsZXR0ZXJTcGFjaW5nIiwiZm9udFdlaWdodCIsImNzc051bWJlciIsImNvbHVtbkNvdW50IiwiZmlsbE9wYWNpdHkiLCJmbGV4R3JvdyIsImZsZXhTaHJpbmsiLCJsaW5lSGVpZ2h0Iiwib3JkZXIiLCJvcnBoYW5zIiwid2lkb3dzIiwiekluZGV4IiwiY3NzUHJvcHMiLCJmbG9hdCIsIiQxIiwibWFyZ2luIiwicGFkZGluZyIsImJvcmRlciIsInN1ZmZpeCIsImV4cGFuZGVkIiwicGFydHMiLCJ1bml0IiwicHJvcEhvb2tzIiwiZWFzZWQiLCJzdGVwIiwibGluZWFyIiwicCIsInN3aW5nIiwiY29zIiwiUEkiLCJ0aW1lcklkIiwicmZ4bnVtIiwicnJ1biIsIioiLCJzY2FsZSIsIm1heEl0ZXJhdGlvbnMiLCJ0d2VlbmVyIiwicHJlZmlsdGVyIiwic3BlZWQiLCJvcHQiLCJzcGVlZHMiLCJmYWRlVG8iLCJ0byIsImFuaW1hdGUiLCJvcHRhbGwiLCJkb0FuaW1hdGlvbiIsImZpbmlzaCIsInN0b3BRdWV1ZSIsInRpbWVycyIsImNzc0ZuIiwic2xpZGVEb3duIiwic2xpZGVVcCIsInNsaWRlVG9nZ2xlIiwiZmFkZUluIiwiZmFkZU91dCIsImZhZGVUb2dnbGUiLCJpbnRlcnZhbCIsInNldEludGVydmFsIiwiY2xlYXJJbnRlcnZhbCIsInNsb3ciLCJmYXN0IiwiZGVsYXkiLCJ0aW1lIiwidGltZW91dCIsImNsZWFyVGltZW91dCIsImdldFNldEF0dHJpYnV0ZSIsImhyZWZOb3JtYWxpemVkIiwiY2hlY2tPbiIsIm9wdFNlbGVjdGVkIiwiZW5jdHlwZSIsIm9wdERpc2FibGVkIiwicmFkaW9WYWx1ZSIsInJyZXR1cm4iLCJ2YWxIb29rcyIsIm9wdGlvblNldCIsInNjcm9sbEhlaWdodCIsIm5vZGVIb29rIiwiYm9vbEhvb2siLCJydXNlRGVmYXVsdCIsImdldFNldElucHV0IiwicmVtb3ZlQXR0ciIsIm5UeXBlIiwiYXR0ckhvb2tzIiwicHJvcE5hbWUiLCJhdHRyTmFtZXMiLCJwcm9wRml4IiwiZ2V0dGVyIiwic2V0QXR0cmlidXRlTm9kZSIsImNyZWF0ZUF0dHJpYnV0ZSIsImNvb3JkcyIsImNvbnRlbnRlZGl0YWJsZSIsInJmb2N1c2FibGUiLCJyY2xpY2thYmxlIiwicmVtb3ZlUHJvcCIsImZvciIsImNsYXNzIiwibm90eG1sIiwidGFiaW5kZXgiLCJwYXJzZUludCIsInJjbGFzcyIsImFkZENsYXNzIiwiY2xhc3NlcyIsImNsYXp6IiwiZmluYWxWYWx1ZSIsInByb2NlZWQiLCJyZW1vdmVDbGFzcyIsInRvZ2dsZUNsYXNzIiwic3RhdGVWYWwiLCJjbGFzc05hbWVzIiwiaGFzQ2xhc3MiLCJob3ZlciIsImZuT3ZlciIsImZuT3V0IiwiYmluZCIsInVuYmluZCIsImRlbGVnYXRlIiwidW5kZWxlZ2F0ZSIsIm5vbmNlIiwicnF1ZXJ5IiwicnZhbGlkdG9rZW5zIiwiSlNPTiIsInBhcnNlIiwicmVxdWlyZU5vbkNvbW1hIiwiZGVwdGgiLCJzdHIiLCJjb21tYSIsIm9wZW4iLCJGdW5jdGlvbiIsInBhcnNlWE1MIiwiRE9NUGFyc2VyIiwicGFyc2VGcm9tU3RyaW5nIiwiYXN5bmMiLCJsb2FkWE1MIiwiYWpheExvY1BhcnRzIiwiYWpheExvY2F0aW9uIiwicmhhc2giLCJydHMiLCJyaGVhZGVycyIsInJsb2NhbFByb3RvY29sIiwicm5vQ29udGVudCIsInJwcm90b2NvbCIsInJ1cmwiLCJwcmVmaWx0ZXJzIiwiYWxsVHlwZXMiLCJhY3RpdmUiLCJsYXN0TW9kaWZpZWQiLCJldGFnIiwidXJsIiwiaXNMb2NhbCIsInByb2Nlc3NEYXRhIiwiY29udGVudFR5cGUiLCJhY2NlcHRzIiwianNvbiIsIiogdGV4dCIsInRleHQgaHRtbCIsInRleHQganNvbiIsInRleHQgeG1sIiwiYWpheFNldHVwIiwic2V0dGluZ3MiLCJhamF4UHJlZmlsdGVyIiwiYWpheFRyYW5zcG9ydCIsImFqYXgiLCJzdGF0dXMiLCJuYXRpdmVTdGF0dXNUZXh0IiwiaGVhZGVycyIsInN1Y2Nlc3MiLCJtb2RpZmllZCIsInN0YXR1c1RleHQiLCJ0aW1lb3V0VGltZXIiLCJ0cmFuc3BvcnQiLCJyZXNwb25zZUhlYWRlcnNTdHJpbmciLCJpZk1vZGlmaWVkIiwiY2FjaGVVUkwiLCJjYWxsYmFja0NvbnRleHQiLCJzdGF0dXNDb2RlIiwiZmlyZUdsb2JhbHMiLCJnbG9iYWxFdmVudENvbnRleHQiLCJjb21wbGV0ZURlZmVycmVkIiwicmVzcG9uc2VIZWFkZXJzIiwicmVxdWVzdEhlYWRlcnMiLCJyZXF1ZXN0SGVhZGVyc05hbWVzIiwic3RyQWJvcnQiLCJnZXRBbGxSZXNwb25zZUhlYWRlcnMiLCJzZXRSZXF1ZXN0SGVhZGVyIiwibG5hbWUiLCJvdmVycmlkZU1pbWVUeXBlIiwiY29kZSIsImFib3J0IiwiZmluYWxUZXh0IiwibWV0aG9kIiwiY3Jvc3NEb21haW4iLCJoYXNDb250ZW50IiwiYmVmb3JlU2VuZCIsInNlbmQiLCJnZXRKU09OIiwiZ2V0U2NyaXB0IiwidGhyb3dzIiwid3JhcEFsbCIsIndyYXBJbm5lciIsInVud3JhcCIsInZpc2libGUiLCJyMjAiLCJyQ1JMRiIsInJzdWJtaXR0ZXJUeXBlcyIsInJzdWJtaXR0YWJsZSIsImVuY29kZVVSSUNvbXBvbmVudCIsInNlcmlhbGl6ZSIsInNlcmlhbGl6ZUFycmF5IiwieGhyIiwieGhySWQiLCJ4aHJDYWxsYmFja3MiLCJ4aHJTdXBwb3J0ZWQiLCJjb3JzIiwidXNlcm5hbWUiLCJ4aHJGaWVsZHMiLCJpc0Fib3J0Iiwib25yZWFkeXN0YXRlY2hhbmdlIiwicmVzcG9uc2VUZXh0Iiwic2NyaXB0IiwidGV4dCBzY3JpcHQiLCJoZWFkIiwic2NyaXB0Q2hhcnNldCIsImNoYXJzZXQiLCJvbmxvYWQiLCJvbGRDYWxsYmFja3MiLCJyanNvbnAiLCJqc29ucCIsImpzb25wQ2FsbGJhY2siLCJvcmlnaW5hbFNldHRpbmdzIiwiY2FsbGJhY2tOYW1lIiwib3ZlcndyaXR0ZW4iLCJyZXNwb25zZUNvbnRhaW5lciIsImpzb25Qcm9wIiwia2VlcFNjcmlwdHMiLCJwYXJzZWQiLCJfbG9hZCIsInBhcmFtcyIsImFuaW1hdGVkIiwib2Zmc2V0Iiwic2V0T2Zmc2V0IiwiY3VyUG9zaXRpb24iLCJjdXJMZWZ0IiwiY3VyQ1NTVG9wIiwiY3VyVG9wIiwiY3VyT2Zmc2V0IiwiY3VyQ1NTTGVmdCIsImNhbGN1bGF0ZVBvc2l0aW9uIiwiY3VyRWxlbSIsInVzaW5nIiwid2luIiwiYm94IiwiZ2V0Qm91bmRpbmdDbGllbnRSZWN0IiwicGFnZVlPZmZzZXQiLCJwYWdlWE9mZnNldCIsIm9mZnNldFBhcmVudCIsInBhcmVudE9mZnNldCIsInNjcm9sbFRvIiwiSGVpZ2h0IiwiV2lkdGgiLCIiLCJkZWZhdWx0RXh0cmEiLCJmdW5jTmFtZSIsInNpemUiLCJhbmRTZWxmIiwiZGVmaW5lIiwiYW1kIiwiX2pRdWVyeSIsIl8kIiwiJCIsIm5vQ29uZmxpY3QiLCJqQ2Fyb3VzZWwiLCJyUmVsYXRpdmVUYXJnZXQiLCJwYXJzZVRhcmdldCIsImRldGVjdENhcm91c2VsIiwiZWxlbWVudCIsImNhcm91c2VsIiwicGx1Z2luTmFtZSIsIl9vcHRpb25zIiwiX2VsZW1lbnQiLCJfY2Fyb3VzZWwiLCJfaW5pdCIsIl9jcmVhdGUiLCJfZGVzdHJveSIsIl9yZWxvYWQiLCJjcmVhdGUiLCJfdHJpZ2dlciIsImRlc3Ryb3kiLCJyZWxvYWQiLCJwbHVnaW4iLCJwbHVnaW5Qcm90b3R5cGUiLCJQbHVnaW4iLCJpbnN0YW5jZSIsIm1ldGhvZFZhbHVlIiwidG9GbG9hdCIsImFuaW1hdGluZyIsInRhaWwiLCJpblRhaWwiLCJyZXNpemVUaW1lciIsInZlcnRpY2FsIiwicnRsIiwiY2lyY3VsYXIiLCJ1bmRlcmZsb3ciLCJpdGVtcyIsInRyYW5zaXRpb25zIiwiY2VudGVyIiwiX2xpc3QiLCJfaXRlbXMiLCJfdGFyZ2V0IiwiX2ZpcnN0IiwiX2xhc3QiLCJfdmlzaWJsZSIsIl9mdWxseXZpc2libGUiLCJvbldpbmRvd1Jlc2l6ZSIsIml0ZW0iLCJfcHJlcGFyZSIsIl9wb3NpdGlvbiIsIm1vdmUiLCJscmIiLCJjbGlwcGluZyIsImRpbSIsImRpbWVuc2lvbiIsImFicyIsImZ1bGx5dmlzaWJsZSIsImhhc05leHQiLCJoYXNQcmV2Iiwic2Nyb2xsIiwiY3VyciIsImlzVmlzaWJsZSIsIl9zY3JvbGwiLCJfc2Nyb2xsVGFpbCIsIm1vdmVCeSIsIm1pbiIsIm11bHRpcGxpZXIiLCJjb3JyZWN0aW9uIiwidHJhbnNmb3JtcyIsInRyYW5zZm9ybXMzZCIsImJhY2t1cCIsInRyYW5zaXRpb25EdXJhdGlvbiIsInRyYW5zaXRpb25UaW1pbmdGdW5jdGlvbiIsInRyYW5zaXRpb25Qcm9wZXJ0eSIsIm9sZENvbXBsZXRlIiwidHJhbnNmb3JtIiwiY3VyclBvcyIsIl9hbmltYXRlIiwiX3VwZGF0ZSIsImMiLCJ3aCIsImNsaXAiLCJ1cGRhdGUiLCJjZW50ZXJPZmZzZXQiLCJiYWNrIiwiZG9VcGRhdGUiLCJlbEluIiwiZWxPdXQiLCJqY2Fyb3VzZWwiLCJzY3JvbGxJbnRvVmlldyIsIl9hY3RpdmUiLCJvbkRlc3Ryb3kiLCJvblJlbG9hZCIsIm9uRXZlbnQiLCJwZXJQYWdlIiwicGFnZSIsIl9jYXJvdXNlbEl0ZW1zIiwiX3BhZ2VzIiwiX2N1cnJlbnRQYWdlIiwib25TY3JvbGwiLCJfY2xlYXIiLCJfY2FsY3VsYXRlUGFnZXMiLCJwcCIsIl9nZXRDYXJvdXNlbEl0ZW1zIiwibnVtQ2Fyb3VzZWxJdGVtcyIsImNhcm91c2VsSXRlbXMiLCJjdXJySXRlbSIsImN1cnJlbnRJbmRleCIsIm5ld0luZGV4IiwiY3VycmVudFBhZ2UiLCJyZWxvYWRDYXJvdXNlbEl0ZW1zIiwicGFnZXMiLCJoaWRkZW5Qcm9wIiwidmlzaWJpbGl0eUNoYW5nZUV2ZW50IiwidmlzaWJpbGl0eUNoYW5nZUV2ZW50TmFtZXMiLCJtb3pIaWRkZW4iLCJtc0hpZGRlbiIsIndlYmtpdEhpZGRlbiIsImF1dG9zdGFydCIsIl90aW1lciIsIl9zdGFydGVkIiwib25BbmltYXRlRW5kIiwiX3N0YXJ0Iiwib25WaXNpYmlsaXR5Q2hhbmdlIiwiX3N0b3AiLCJkZWZpbmVCcmlkZ2V0IiwiYWRkT3B0aW9uTWV0aG9kIiwiUGx1Z2luQ2xhc3MiLCJicmlkZ2UiLCJsb2dFcnJvciIsImNvbnNvbGUiLCJtZXNzYWdlIiwiYnJpZGdldCIsInJlcXVpcmUiLCJnZXRJRUV2ZW50IiwiaGFuZGxlRXZlbnQiLCJldmVudGllIiwiRXZlbnRFbWl0dGVyIiwiaW5kZXhPZkxpc3RlbmVyIiwibGlzdGVuZXJzIiwibGlzdGVuZXIiLCJhbGlhcyIsInByb3RvIiwib3JpZ2luYWxHbG9iYWxWYWx1ZSIsImdldExpc3RlbmVycyIsImV2dCIsIl9nZXRFdmVudHMiLCJmbGF0dGVuTGlzdGVuZXJzIiwiZmxhdExpc3RlbmVycyIsImdldExpc3RlbmVyc0FzT2JqZWN0IiwiYWRkTGlzdGVuZXIiLCJsaXN0ZW5lcklzV3JhcHBlZCIsImFkZE9uY2VMaXN0ZW5lciIsImRlZmluZUV2ZW50IiwiZGVmaW5lRXZlbnRzIiwiZXZ0cyIsInJlbW92ZUxpc3RlbmVyIiwiYWRkTGlzdGVuZXJzIiwibWFuaXB1bGF0ZUxpc3RlbmVycyIsInJlbW92ZUxpc3RlbmVycyIsInNpbmdsZSIsIm11bHRpcGxlIiwiX2V2ZW50cyIsInJlbW92ZUFsbExpc3RlbmVycyIsImVtaXRFdmVudCIsIl9nZXRPbmNlUmV0dXJuVmFsdWUiLCJlbWl0Iiwic2V0T25jZVJldHVyblZhbHVlIiwiX29uY2VSZXR1cm5WYWx1ZSIsImdldFN0eWxlUHJvcGVydHkiLCJkb2NFbGVtU3R5bGUiLCJwcmVmaXhlZCIsInByZWZpeGVzIiwiZ2V0U3R5bGVTaXplIiwiaXNWYWxpZCIsImlzTmFOIiwiZ2V0WmVyb1NpemUiLCJpbm5lcldpZHRoIiwiaW5uZXJIZWlnaHQiLCJvdXRlcldpZHRoIiwib3V0ZXJIZWlnaHQiLCJtZWFzdXJlbWVudHMiLCJtZWFzdXJlbWVudCIsImRlZmluZUdldFNpemUiLCJpc1NldHVwIiwiZ2V0U3R5bGUiLCJnZXRTdHlsZUZuIiwiYm94U2l6aW5nUHJvcCIsImJvcmRlclN0eWxlIiwiYm9yZGVyV2lkdGgiLCJpc0JveFNpemVPdXRlciIsImdldFNpemUiLCJxdWVyeVNlbGVjdG9yIiwibXVuZ2VOb25QaXhlbCIsInBhZGRpbmdXaWR0aCIsInBhZGRpbmdMZWZ0IiwicGFkZGluZ1JpZ2h0IiwicGFkZGluZ0hlaWdodCIsInBhZGRpbmdUb3AiLCJwYWRkaW5nQm90dG9tIiwibWFyZ2luV2lkdGgiLCJtYXJnaW5MZWZ0IiwibWFyZ2luSGVpZ2h0IiwibWFyZ2luVG9wIiwibWFyZ2luQm90dG9tIiwiYm9yZGVyTGVmdFdpZHRoIiwiYm9yZGVyUmlnaHRXaWR0aCIsImJvcmRlckhlaWdodCIsImJvcmRlclRvcFdpZHRoIiwiYm9yZGVyQm90dG9tV2lkdGgiLCJpc0JvcmRlckJveFNpemVPdXRlciIsInN0eWxlV2lkdGgiLCJzdHlsZUhlaWdodCIsImRvY1JlYWR5Iiwib25SZWFkeSIsImlzSUU4Tm90UmVhZHkiLCJkZWZpbmVEb2NSZWFkeSIsIkVsZW1Qcm90byIsIm1hdGNoZXNNZXRob2QiLCJjaGVja1BhcmVudCIsInF1ZXJ5IiwibWF0Y2hDaGlsZCIsInN1cHBvcnRzT3JwaGFucyIsIkVsZW1lbnQiLCJmaXp6eVVJVXRpbHMiLCJ1dGlscyIsIm1vZHVsbyIsIm9ialRvU3RyaW5nIiwiYXJ5IiwicmVtb3ZlRnJvbSIsImlzRWxlbWVudCIsIkhUTUxFbGVtZW50Iiwic2V0VGV4dCIsInNldFRleHRQcm9wZXJ0eSIsImdldFBhcmVudCIsImdldFF1ZXJ5RWxlbWVudCIsImZpbHRlckZpbmRFbGVtZW50cyIsImZmRWxlbXMiLCJjaGlsZEVsZW1zIiwiakxlbiIsImRlYm91bmNlTWV0aG9kIiwiX2NsYXNzIiwibWV0aG9kTmFtZSIsInRocmVzaG9sZCIsInRpbWVvdXROYW1lIiwiX3RoaXMiLCJ0b0Rhc2hlZCIsIiQyIiwiaHRtbEluaXQiLCJXaWRnZXRDbGFzcyIsImRhc2hlZE5hbWVzcGFjZSIsIk91dGxheWVyIiwiSXRlbSIsImlzRW1wdHlPYmoiLCJsYXlvdXQiLCJ4IiwieSIsInRvRGFzaGVkQWxsIiwidHJhbnNmb3JtUHJvcGVydHkiLCJzdXBwb3J0c0NTUzMiLCJpczNkIiwidHJhbnNpdGlvbkVuZEV2ZW50IiwiV2Via2l0VHJhbnNpdGlvbiIsIk1velRyYW5zaXRpb24iLCJPVHJhbnNpdGlvbiIsInRyYW5zaXRpb24iLCJwcmVmaXhhYmxlUHJvcGVydGllcyIsInZlbmRvclByb3BlcnRpZXMiLCJzdXBwb3J0ZWRQcm9wIiwiX3RyYW5zbiIsImluZ1Byb3BlcnRpZXMiLCJjbGVhbiIsIm9uRW5kIiwiZWxlbVN0eWxlIiwiZ2V0UG9zaXRpb24iLCJsYXlvdXRPcHRpb25zIiwiaXNPcmlnaW5MZWZ0IiwiaXNPcmlnaW5Ub3AiLCJ4VmFsdWUiLCJ5VmFsdWUiLCJsYXlvdXRTaXplIiwibGF5b3V0UG9zaXRpb24iLCJ4UGFkZGluZyIsInhQcm9wZXJ0eSIsInhSZXNldFByb3BlcnR5IiwiZ2V0WFZhbHVlIiwieVBhZGRpbmciLCJ5UHJvcGVydHkiLCJ5UmVzZXRQcm9wZXJ0eSIsImdldFlWYWx1ZSIsInBlcmNlbnRQb3NpdGlvbiIsImlzSG9yaXpvbnRhbCIsIl90cmFuc2l0aW9uVG8iLCJjdXJYIiwiY3VyWSIsImNvbXBhcmVYIiwiY29tcGFyZVkiLCJkaWROb3RNb3ZlIiwic2V0UG9zaXRpb24iLCJpc1RyYW5zaXRpb25pbmciLCJ0cmFuc1giLCJ0cmFuc1kiLCJ0cmFuc2l0aW9uU3R5bGUiLCJnZXRUcmFuc2xhdGUiLCJvblRyYW5zaXRpb25FbmQiLCJpc0NsZWFuaW5nIiwiZ29UbyIsIm1vdmVUbyIsIl9ub25UcmFuc2l0aW9uIiwiX3JlbW92ZVN0eWxlcyIsIl90cmFuc2l0aW9uIiwiZnJvbSIsImgiLCJlbmFibGVUcmFuc2l0aW9uIiwidHJhbnNpdGlvblByb3BzIiwib253ZWJraXRUcmFuc2l0aW9uRW5kIiwib250cmFuc2l0aW9uZW5kIiwib25vdHJhbnNpdGlvbmVuZCIsImRhc2hlZFZlbmRvclByb3BlcnRpZXMiLCItd2Via2l0LXRyYW5zZm9ybSIsIi1tb3otdHJhbnNmb3JtIiwiLW8tdHJhbnNmb3JtIiwiZGlzYWJsZVRyYW5zaXRpb24iLCJyZW1vdmVUcmFuc2l0aW9uU3R5bGVzIiwiY2xlYW5TdHlsZSIsImNsZWFuVHJhbnNpdGlvblN0eWxlIiwicmVtb3ZlRWxlbSIsInJldmVhbCIsInRyYW5zaXRpb25FbmRQcm9wZXJ0eSIsImdldEhpZGVSZXZlYWxUcmFuc2l0aW9uRW5kUHJvcGVydHkiLCJvblJldmVhbFRyYW5zaXRpb25FbmQiLCJoaWRkZW5TdHlsZSIsInZpc2libGVTdHlsZSIsInN0eWxlUHJvcGVydHkiLCJvcHRpb25TdHlsZSIsIm9uSGlkZVRyYW5zaXRpb25FbmQiLCJyaWdodCIsImJvdHRvbSIsInF1ZXJ5RWxlbWVudCIsIiRlbGVtZW50IiwiZGVmYXVsdHMiLCJHVUlEIiwib3V0bGF5ZXJHVUlEIiwiaW5zdGFuY2VzIiwiaXNJbml0TGF5b3V0IiwiY29udGFpbmVyU3R5bGUiLCJpc1Jlc2l6ZUJvdW5kIiwiaXNSZXNpemluZ0NvbnRhaW5lciIsInJlbG9hZEl0ZW1zIiwic3RhbXBzIiwic3RhbXAiLCJiaW5kUmVzaXplIiwiX2l0ZW1pemUiLCJpdGVtRWxlbXMiLCJfZmlsdGVyRmluZEl0ZW1FbGVtZW50cyIsIml0ZW1TZWxlY3RvciIsImdldEl0ZW1FbGVtZW50cyIsIl9yZXNldExheW91dCIsIl9tYW5hZ2VTdGFtcHMiLCJpc0luc3RhbnQiLCJpc0xheW91dEluc3RhbnQiLCJfaXNMYXlvdXRJbml0ZWQiLCJsYXlvdXRJdGVtcyIsIl9nZXRNZWFzdXJlbWVudCIsIl9nZXRJdGVtc0ZvckxheW91dCIsIl9sYXlvdXRJdGVtcyIsIl9wb3N0TGF5b3V0IiwiaXNJZ25vcmVkIiwiX2VtaXRDb21wbGV0ZU9uSXRlbXMiLCJfZ2V0SXRlbUxheW91dFBvc2l0aW9uIiwiX3Byb2Nlc3NMYXlvdXRRdWV1ZSIsIl9wb3NpdGlvbkl0ZW0iLCJyZXNpemVDb250YWluZXIiLCJfZ2V0Q29udGFpbmVyU2l6ZSIsIl9zZXRDb250YWluZXJNZWFzdXJlIiwibWVhc3VyZSIsImlzV2lkdGgiLCJlbGVtU2l6ZSIsIm9uQ29tcGxldGUiLCJkaXNwYXRjaEV2ZW50IiwiZG9uZUNvdW50IiwiZW1pdEFyZ3MiLCIkZXZlbnQiLCJpZ25vcmUiLCJnZXRJdGVtIiwidW5pZ25vcmUiLCJfZmluZCIsInVuc3RhbXAiLCJfZ2V0Qm91bmRpbmdSZWN0IiwiX21hbmFnZVN0YW1wIiwiYm91bmRpbmdSZWN0IiwiX2JvdW5kaW5nUmVjdCIsIl9nZXRFbGVtZW50T2Zmc2V0IiwidGhpc1JlY3QiLCJ1bmJpbmRSZXNpemUiLCJvbnJlc2l6ZSIsImRlbGF5ZWQiLCJyZXNpemUiLCJyZXNpemVUaW1lb3V0IiwibmVlZHNSZXNpemVMYXlvdXQiLCJoYXNTaXplcyIsImFkZEl0ZW1zIiwiYXBwZW5kZWQiLCJwcmVwZW5kZWQiLCJwcmV2aW91c0l0ZW1zIiwicmV2ZWFsSXRlbUVsZW1lbnRzIiwiZ2V0SXRlbXMiLCJoaWRlSXRlbUVsZW1lbnRzIiwicmVtb3ZlSXRlbXMiLCJMYXlvdXQiLCJJc290b3BlIiwiaXRlbUdVSUQiLCJzb3J0RGF0YSIsInVwZGF0ZVNvcnREYXRhIiwiZ2V0U29ydERhdGEiLCJzb3J0ZXJzIiwiX3NvcnRlcnMiLCJzb3J0ZXIiLCJMYXlvdXRNb2RlIiwiaXNvdG9wZSIsImZpbHRlcmVkSXRlbXMiLCJnZXRPdXRsYXllck1ldGhvZCIsImZhY2FkZU1ldGhvZHMiLCJuZWVkc1ZlcnRpY2FsUmVzaXplTGF5b3V0IiwiZ2V0Q29sdW1uV2lkdGgiLCJnZXRTZWdtZW50U2l6ZSIsImdldFJvd0hlaWdodCIsInNlZ21lbnQiLCJzZWdtZW50TmFtZSIsIm91dGVyU2l6ZSIsImZpcnN0SXRlbVNpemUiLCJnZXRGaXJzdEl0ZW1TaXplIiwiZmlyc3RJdGVtIiwibW9kZXMiLCJNb2RlIiwiTWFzb25yeSIsIm1lYXN1cmVDb2x1bW5zIiwiY29scyIsImNvbFlzIiwibWF4WSIsImdldENvbnRhaW5lcldpZHRoIiwiY29sdW1uV2lkdGgiLCJmaXJzdEl0ZW1FbGVtIiwiY29udGFpbmVyV2lkdGgiLCJndXR0ZXIiLCJtYXRoTWV0aG9kIiwiaXNGaXRXaWR0aCIsInJlbWFpbmRlciIsImNvbFNwYW4iLCJjb2xHcm91cCIsIl9nZXRDb2xHcm91cCIsIm1pbmltdW1ZIiwic2hvcnRDb2xJbmRleCIsInNldEhlaWdodCIsInNldFNwYW4iLCJncm91cENvdW50IiwiZ3JvdXBDb2xZcyIsInN0YW1wU2l6ZSIsImZpcnN0WCIsImxhc3RYIiwiZmlyc3RDb2wiLCJmbG9vciIsImxhc3RDb2wiLCJzdGFtcE1heFkiLCJfZ2V0Q29udGFpbmVyRml0V2lkdGgiLCJ1bnVzZWRDb2xzIiwicHJldmlvdXNXaWR0aCIsIk1hc29ucnlNb2RlIiwiRml0Um93cyIsIml0ZW1XaWR0aCIsIlZlcnRpY2FsIiwiaG9yaXpvbnRhbEFsaWdubWVudCIsImdldEl0ZW1Tb3J0ZXIiLCJzb3J0QnlzIiwic29ydEFzYyIsIml0ZW1BIiwiaXRlbUIiLCJzb3J0QnkiLCJpc0FzY2VuZGluZyIsImRpcmVjdGlvbiIsImxheW91dE1vZGUiLCJpc0pRdWVyeUZpbHRlcmluZyIsInNvcnRBc2NlbmRpbmciLCJfZ2V0U29ydGVycyIsInNvcnRIaXN0b3J5IiwiX2luaXRMYXlvdXRNb2RlIiwiX3VwZGF0ZUl0ZW1zU29ydERhdGEiLCJpbml0aWFsT3B0cyIsImFycmFuZ2UiLCJfbGF5b3V0IiwiX2dldElzSW5zdGFudCIsImhpZGVSZXZlYWwiLCJmaWx0ZXJlZCIsIm5lZWRSZXZlYWwiLCJuZWVkSGlkZSIsIl9maWx0ZXIiLCJfYmluZEFycmFuZ2VDb21wbGV0ZSIsIl9pc0luc3RhbnQiLCJfbm9UcmFuc2l0aW9uIiwiX3NvcnQiLCJhcnJhbmdlUGFyYWxsZWxDYWxsYmFjayIsImlzTGF5b3V0Q29tcGxldGUiLCJpc0hpZGVDb21wbGV0ZSIsImlzUmV2ZWFsQ29tcGxldGUiLCJoaWRkZW5NYXRjaGVkIiwidmlzaWJsZVVubWF0Y2hlZCIsIl9nZXRGaWx0ZXJUZXN0IiwiaXNNYXRjaGVkIiwibXVuZ2VTb3J0ZXIiLCJhdHRyTWF0Y2giLCJnZXRWYWx1ZSIsImdldFZhbHVlR2V0dGVyIiwicGFyc2VyIiwic29ydERhdGFQYXJzZXJzIiwiY2hpbGQiLCJzb3J0QnlPcHQiLCJpdGVtU29ydGVyIiwiX21vZGUiLCJtb2RlIiwiX2ZpbHRlclJldmVhbEFkZGVkIiwiZmlsdGVyZWRJbnNlcnRJdGVtcyIsIl9yZW1vdmUiLCJzaHVmZmxlIiwiZ2V0RmlsdGVyZWRJdGVtRWxlbWVudHMiLCJ0bXBsIiwicmVuZGVySW1hZ2VzIiwicXVlcnlXb3JkIiwiZ2V0WG1sSHR0cCIsInhtbGh0dHAiLCJFIiwiZG9jdW1lbnRNb2RlIiwiQVBJX0tFWSIsImV2YWwiLCJsb2ciLCJoaXRzIiwibWFzb25yeSIsImpjYXJvdXNlbEF1dG9zY3JvbGwiLCJqY2Fyb3VzZWxDb250cm9sIl0sIm1hcHBpbmdzIjoiQ0FjQyxTQUFVQSxFQUFRQyxHQUVLLGdCQUFYQyxTQUFpRCxnQkFBbkJBLFFBQU9DLFFBUWhERCxPQUFPQyxRQUFVSCxFQUFPSSxTQUN2QkgsRUFBU0QsR0FBUSxHQUNqQixTQUFVSyxHQUNULElBQU1BLEVBQUVELFNBQ1AsS0FBTSxJQUFJRSxPQUFPLDJDQUVsQixPQUFPTCxHQUFTSSxJQUdsQkosRUFBU0QsSUFJUyxtQkFBWE8sUUFBeUJBLE9BQVNDLEtBQU0sU0FBVUQsRUFBUUUsR0FxaEJuRSxRQUFTQyxHQUFhQyxHQU1yQixHQUFJQyxHQUFTLFVBQVlELElBQU9BLEVBQUlDLE9BQ25DQyxFQUFPQyxHQUFPRCxLQUFNRixFQUVyQixPQUFjLGFBQVRFLEdBQXVCQyxHQUFPQyxTQUFVSixJQUNyQyxFQUdjLElBQWpCQSxFQUFJSyxVQUFrQkosR0FDbkIsRUFHUSxVQUFUQyxHQUErQixJQUFYRCxHQUNSLGdCQUFYQSxJQUF1QkEsRUFBUyxHQUFPQSxFQUFTLElBQU9ELEdBbWlFaEUsUUFBU00sR0FBUUMsRUFBVUMsRUFBV0MsR0FDckMsR0FBS04sR0FBT08sV0FBWUYsR0FDdkIsTUFBT0wsSUFB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QyxHQUNsQjR2QyxRQUFRbVosSUFBSS9vRCxFQUVaLElBQUkrekIsR0FBTzZULEVBQUUsZUFBZTdULE9BQ3hCOXZCLEVBQVVxa0QsS0FBTXYwQixHQUNuQi96QixLQUFNQSxFQUFLZ3BELE1BR1pwaEIsR0FBRSxTQUFTNWdCLFNBQ1g0Z0IsRUFBRSxtQkFBbUJwVSxPQUFPdnZCLEdBRTVCMmpDLEVBQUUsU0FBU2lhLFNBQ1ZoRSxhQUFjLGFBQ2Q2SCxXQUFZLFVBQ1p1RCxTQUNDM0YsT0FBUSxTQS9HZjFiLEVBQUUsY0FDQXNGLFdBQ0FoaUMsVUFBVyxPQUNYa29CLEtBQU0sYUFFTjgxQixxQkFDQTF1QixTQUFVLElBQ1Z0cUIsT0FBUSxNQUNSOCtCLFdBQVcsSUFHYnBILEVBQUUsMkJBQ0E5VyxHQUFHLDBCQUEyQixXQUM5QjhXLEVBQUV4cUMsTUFBTXFnQyxZQUFZLGNBRXBCM00sR0FBRyw0QkFBNkIsV0FDaEM4VyxFQUFFeHFDLE1BQU1nZ0MsU0FBUyxjQUVqQityQixrQkFDQWo1QyxPQUFRLFFBR1YwM0IsRUFBRSwyQkFDQTlXLEdBQUcsMEJBQTJCLFdBQzlCOFcsRUFBRXhxQyxNQUFNcWdDLFlBQVksY0FFcEIzTSxHQUFHLDRCQUE2QixXQUNoQzhXLEVBQUV4cUMsTUFBTWdnQyxTQUFTLGNBRWpCK3JCLGtCQUNBajVDLE9BQVEsT0FLVixJQUFJczRDLFdBQVksR0FDWkssUUFBVSxvQ0FDVnBiLEtBQU8sRUFDUEQsUUFBVSxDQWlGZDVGLEdBQUUsbUJBQW1COVcsR0FBRyxRQUFTLFNBQVNyd0IsR0FDekNBLEVBQUUyc0IsZ0JBQ0YsSUFBSWtvQixHQUFRMU4sRUFBRSxpQkFDZDJnQixjQUFhMWtCLG1CQUFvQnlSLEVBQU1sc0MsUUFDdkNrc0MsRUFBTWxzQyxJQUFJLE1BR1htL0MsYUFBYUMsY0FHWjlxRCIsImZpbGUiOiJtYWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyohXHJcbiAqIGpRdWVyeSBKYXZhU2NyaXB0IExpYnJhcnkgdjEuMTEuM1xyXG4gKiBodHRwOi8vanF1ZXJ5LmNvbS9cclxuICpcclxuICogSW5jbHVkZXMgU2l6emxlLmpzXHJcbiAqIGh0dHA6Ly9zaXp6bGVqcy5jb20vXHJcbiAqXHJcbiAqIENvcHlyaWdodCAyMDA1LCAyMDE0IGpRdWVyeSBGb3VuZGF0aW9uLCBJbmMuIGFuZCBvdGhlciBjb250cmlidXRvcnNcclxuICogUmVsZWFzZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlXHJcbiAqIGh0dHA6Ly9qcXVlcnkub3JnL2xpY2Vuc2VcclxuICpcclxuICogRGF0ZTogMjAxNS0wNC0yOFQxNjoxOVpcclxuICovXHJcblxyXG4oZnVuY3Rpb24oIGdsb2JhbCwgZmFjdG9yeSApIHtcclxuXHJcblx0aWYgKCB0eXBlb2YgbW9kdWxlID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiBtb2R1bGUuZXhwb3J0cyA9PT0gXCJvYmplY3RcIiApIHtcclxuXHRcdC8vIEZvciBDb21tb25KUyBhbmQgQ29tbW9uSlMtbGlrZSBlbnZpcm9ubWVudHMgd2hlcmUgYSBwcm9wZXIgd2luZG93IGlzIHByZXNlbnQsXHJcblx0XHQvLyBleGVjdXRlIHRoZSBmYWN0b3J5IGFuZCBnZXQgalF1ZXJ5XHJcblx0XHQvLyBGb3IgZW52aXJvbm1lbnRzIHRoYXQgZG8gbm90IGluaGVyZW50bHkgcG9zc2VzIGEgd2luZG93IHdpdGggYSBkb2N1bWVudFxyXG5cdFx0Ly8gKHN1Y2ggYXMgTm9kZS5qcyksIGV4cG9zZSBhIGpRdWVyeS1tYWtpbmcgZmFjdG9yeSBhcyBtb2R1bGUuZXhwb3J0c1xyXG5cdFx0Ly8gVGhpcyBhY2NlbnR1YXRlcyB0aGUgbmVlZCBmb3IgdGhlIGNyZWF0aW9uIG9mIGEgcmVhbCB3aW5kb3dcclxuXHRcdC8vIGUuZy4gdmFyIGpRdWVyeSA9IHJlcXVpcmUoXCJqcXVlcnlcIikod2luZG93KTtcclxuXHRcdC8vIFNlZSB0aWNrZXQgIzE0NTQ5IGZvciBtb3JlIGluZm9cclxuXHRcdG1vZHVsZS5leHBvcnRzID0gZ2xvYmFsLmRvY3VtZW50ID9cclxuXHRcdFx0ZmFjdG9yeSggZ2xvYmFsLCB0cnVlICkgOlxyXG5cdFx0XHRmdW5jdGlvbiggdyApIHtcclxuXHRcdFx0XHRpZiAoICF3LmRvY3VtZW50ICkge1xyXG5cdFx0XHRcdFx0dGhyb3cgbmV3IEVycm9yKCBcImpRdWVyeSByZXF1aXJlcyBhIHdpbmRvdyB3aXRoIGEgZG9jdW1lbnRcIiApO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHRyZXR1cm4gZmFjdG9yeSggdyApO1xyXG5cdFx0XHR9O1xyXG5cdH0gZWxzZSB7XHJcblx0XHRmYWN0b3J5KCBnbG9iYWwgKTtcclxuXHR9XHJcblxyXG4vLyBQYXNzIHRoaXMgaWYgd2luZG93IGlzIG5vdCBkZWZpbmVkIHlldFxyXG59KHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIgPyB3aW5kb3cgOiB0aGlzLCBmdW5jdGlvbiggd2luZG93LCBub0dsb2JhbCApIHtcclxuXHJcbi8vIENhbid0IGRvIHRoaXMgYmVjYXVzZSBzZXZlcmFsIGFwcHMgaW5jbHVkaW5nIEFTUC5ORVQgdHJhY2VcclxuLy8gdGhlIHN0YWNrIHZpYSBhcmd1bWVudHMuY2FsbGVyLmNhbGxlZSBhbmQgRmlyZWZveCBkaWVzIGlmXHJcbi8vIHlvdSB0cnkgdG8gdHJhY2UgdGhyb3VnaCBcInVzZSBzdHJpY3RcIiBjYWxsIGNoYWlucy4gKCMxMzMzNSlcclxuLy8gU3VwcG9ydDogRmlyZWZveCAxOCtcclxuLy9cclxuXHJcbnZhciBkZWxldGVkSWRzID0gW107XHJcblxyXG52YXIgc2xpY2UgPSBkZWxldGVkSWRzLnNsaWNlO1xyXG5cclxudmFyIGNvbmNhdCA9IGRlbGV0ZWRJZHMuY29uY2F0O1xyXG5cclxudmFyIHB1c2ggPSBkZWxldGVkSWRzLnB1c2g7XHJcblxyXG52YXIgaW5kZXhPZiA9IGRlbGV0ZWRJZHMuaW5kZXhPZjtcclxuXHJcbnZhciBjbGFzczJ0eXBlID0ge307XHJcblxyXG52YXIgdG9TdHJpbmcgPSBjbGFzczJ0eXBlLnRvU3RyaW5nO1xyXG5cclxudmFyIGhhc093biA9IGNsYXNzMnR5cGUuaGFzT3duUHJvcGVydHk7XHJcblxyXG52YXIgc3VwcG9ydCA9IHt9O1xyXG5cclxuXHJcblxyXG52YXJcclxuXHR2ZXJzaW9uID0gXCIxLjExLjNcIixcclxuXHJcblx0Ly8gRGVmaW5lIGEgbG9jYWwgY29weSBvZiBqUXVlcnlcclxuXHRqUXVlcnkgPSBmdW5jdGlvbiggc2VsZWN0b3IsIGNvbnRleHQgKSB7XHJcblx0XHQvLyBUaGUgalF1ZXJ5IG9iamVjdCBpcyBhY3R1YWxseSBqdXN0IHRoZSBpbml0IGNvbnN0cnVjdG9yICdlbmhhbmNlZCdcclxuXHRcdC8vIE5lZWQgaW5pdCBpZiBqUXVlcnkgaXMgY2FsbGVkIChqdXN0IGFsbG93IGVycm9yIHRvIGJlIHRocm93biBpZiBub3QgaW5jbHVkZWQpXHJcblx0XHRyZXR1cm4gbmV3IGpRdWVyeS5mbi5pbml0KCBzZWxlY3RvciwgY29udGV4dCApO1xyXG5cdH0sXHJcblxyXG5cdC8vIFN1cHBvcnQ6IEFuZHJvaWQ8NC4xLCBJRTw5XHJcblx0Ly8gTWFrZSBzdXJlIHdlIHRyaW0gQk9NIGFuZCBOQlNQXHJcblx0cnRyaW0gPSAvXltcXHNcXHVGRUZGXFx4QTBdK3xbXFxzXFx1RkVGRlxceEEwXSskL2csXHJcblxyXG5cdC8vIE1hdGNoZXMgZGFzaGVkIHN0cmluZyBmb3IgY2FtZWxpemluZ1xyXG5cdHJtc1ByZWZpeCA9IC9eLW1zLS8sXHJcblx0cmRhc2hBbHBoYSA9IC8tKFtcXGRhLXpdKS9naSxcclxuXHJcblx0Ly8gVXNlZCBieSBqUXVlcnkuY2FtZWxDYXNlIGFzIGNhbGxiYWNrIHRvIHJlcGxhY2UoKVxyXG5cdGZjYW1lbENhc2UgPSBmdW5jdGlvbiggYWxsLCBsZXR0ZXIgKSB7XHJcblx0XHRyZXR1cm4gbGV0dGVyLnRvVXBwZXJDYXNlKCk7XHJcblx0fTtcclxuXHJcbmpRdWVyeS5mbiA9IGpRdWVyeS5wcm90b3R5cGUgPSB7XHJcblx0Ly8gVGhlIGN1cnJlbnQgdmVyc2lvbiBvZiBqUXVlcnkgYmVpbmcgdXNlZFxyXG5cdGpxdWVyeTogdmVyc2lvbixcclxuXHJcblx0Y29uc3RydWN0b3I6IGpRdWVyeSxcclxuXHJcblx0Ly8gU3RhcnQgd2l0aCBhbiBlbXB0eSBzZWxlY3RvclxyXG5cdHNlbGVjdG9yOiBcIlwiLFxyXG5cclxuXHQvLyBUaGUgZGVmYXVsdCBsZW5ndGggb2YgYSBqUXVlcnkgb2JqZWN0IGlzIDBcclxuXHRsZW5ndGg6IDAsXHJcblxyXG5cdHRvQXJyYXk6IGZ1bmN0aW9uKCkge1xyXG5cdFx0cmV0dXJuIHNsaWNlLmNhbGwoIHRoaXMgKTtcclxuXHR9LFxyXG5cclxuXHQvLyBHZXQgdGhlIE50aCBlbGVtZW50IGluIHRoZSBtYXRjaGVkIGVsZW1lbnQgc2V0IE9SXHJcblx0Ly8gR2V0IHRoZSB3aG9sZSBtYXRjaGVkIGVsZW1lbnQgc2V0IGFzIGEgY2xlYW4gYXJyYXlcclxuXHRnZXQ6IGZ1bmN0aW9uKCBudW0gKSB7XHJcblx0XHRyZXR1cm4gbnVtICE9IG51bGwgP1xyXG5cclxuXHRcdFx0Ly8gUmV0dXJuIGp1c3QgdGhlIG9uZSBlbGVtZW50IGZyb20gdGhlIHNldFxyXG5cdFx0XHQoIG51bSA8IDAgPyB0aGlzWyBudW0gKyB0aGlzLmxlbmd0aCBdIDogdGhpc1sgbnVtIF0gKSA6XHJcblxyXG5cdFx0XHQvLyBSZXR1cm4gYWxsIHRoZSBlbGVtZW50cyBpbiBhIGNsZWFuIGFycmF5XHJcblx0XHRcdHNsaWNlLmNhbGwoIHRoaXMgKTtcclxuXHR9LFxyXG5cclxuXHQvLyBUYWtlIGFuIGFycmF5IG9mIGVsZW1lbnRzIGFuZCBwdXNoIGl0IG9udG8gdGhlIHN0YWNrXHJcblx0Ly8gKHJldHVybmluZyB0aGUgbmV3IG1hdGNoZWQgZWxlbWVudCBzZXQpXHJcblx0cHVzaFN0YWNrOiBmdW5jdGlvbiggZWxlbXMgKSB7XHJcblxyXG5cdFx0Ly8gQnVpbGQgYSBuZXcgalF1ZXJ5IG1hdGNoZWQgZWxlbWVudCBzZXRcclxuXHRcdHZhciByZXQgPSBqUXVlcnkubWVyZ2UoIHRoaXMuY29uc3RydWN0b3IoKSwgZWxlbXMgKTtcclxuXHJcblx0XHQvLyBBZGQgdGhlIG9sZCBvYmplY3Qgb250byB0aGUgc3RhY2sgKGFzIGEgcmVmZXJlbmNlKVxyXG5cdFx0cmV0LnByZXZPYmplY3QgPSB0aGlzO1xyXG5cdFx0cmV0LmNvbnRleHQgPSB0aGlzLmNvbnRleHQ7XHJcblxyXG5cdFx0Ly8gUmV0dXJuIHRoZSBuZXdseS1mb3JtZWQgZWxlbWVudCBzZXRcclxuXHRcdHJldHVybiByZXQ7XHJcblx0fSxcclxuXHJcblx0Ly8gRXhlY3V0ZSBhIGNhbGxiYWNrIGZvciBldmVyeSBlbGVtZW50IGluIHRoZSBtYXRjaGVkIHNldC5cclxuXHQvLyAoWW91IGNhbiBzZWVkIHRoZSBhcmd1bWVudHMgd2l0aCBhbiBhcnJheSBvZiBhcmdzLCBidXQgdGhpcyBpc1xyXG5cdC8vIG9ubHkgdXNlZCBpbnRlcm5hbGx5LilcclxuXHRlYWNoOiBmdW5jdGlvbiggY2FsbGJhY2ssIGFyZ3MgKSB7XHJcblx0XHRyZXR1cm4galF1ZXJ5LmVhY2goIHRoaXMsIGNhbGxiYWNrLCBhcmdzICk7XHJcblx0fSxcclxuXHJcblx0bWFwOiBmdW5jdGlvbiggY2FsbGJhY2sgKSB7XHJcblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIGpRdWVyeS5tYXAodGhpcywgZnVuY3Rpb24oIGVsZW0sIGkgKSB7XHJcblx0XHRcdHJldHVybiBjYWxsYmFjay5jYWxsKCBlbGVtLCBpLCBlbGVtICk7XHJcblx0XHR9KSk7XHJcblx0fSxcclxuXHJcblx0c2xpY2U6IGZ1bmN0aW9uKCkge1xyXG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCBzbGljZS5hcHBseSggdGhpcywgYXJndW1lbnRzICkgKTtcclxuXHR9LFxyXG5cclxuXHRmaXJzdDogZnVuY3Rpb24oKSB7XHJcblx0XHRyZXR1cm4gdGhpcy5lcSggMCApO1xyXG5cdH0sXHJcblxyXG5cdGxhc3Q6IGZ1bmN0aW9uKCkge1xyXG5cdFx0cmV0dXJuIHRoaXMuZXEoIC0xICk7XHJcblx0fSxcclxuXHJcblx0ZXE6IGZ1bmN0aW9uKCBpICkge1xyXG5cdFx0dmFyIGxlbiA9IHRoaXMubGVuZ3RoLFxyXG5cdFx0XHRqID0gK2kgKyAoIGkgPCAwID8gbGVuIDogMCApO1xyXG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCBqID49IDAgJiYgaiA8IGxlbiA/IFsgdGhpc1tqXSBdIDogW10gKTtcclxuXHR9LFxyXG5cclxuXHRlbmQ6IGZ1bmN0aW9uKCkge1xyXG5cdFx0cmV0dXJuIHRoaXMucHJldk9iamVjdCB8fCB0aGlzLmNvbnN0cnVjdG9yKG51bGwpO1xyXG5cdH0sXHJcblxyXG5cdC8vIEZvciBpbnRlcm5hbCB1c2Ugb25seS5cclxuXHQvLyBCZWhhdmVzIGxpa2UgYW4gQXJyYXkncyBtZXRob2QsIG5vdCBsaWtlIGEgalF1ZXJ5IG1ldGhvZC5cclxuXHRwdXNoOiBwdXNoLFxyXG5cdHNvcnQ6IGRlbGV0ZWRJZHMuc29ydCxcclxuXHRzcGxpY2U6IGRlbGV0ZWRJZHMuc3BsaWNlXHJcbn07XHJcblxyXG5qUXVlcnkuZXh0ZW5kID0galF1ZXJ5LmZuLmV4dGVuZCA9IGZ1bmN0aW9uKCkge1xyXG5cdHZhciBzcmMsIGNvcHlJc0FycmF5LCBjb3B5LCBuYW1lLCBvcHRpb25zLCBjbG9uZSxcclxuXHRcdHRhcmdldCA9IGFyZ3VtZW50c1swXSB8fCB7fSxcclxuXHRcdGkgPSAxLFxyXG5cdFx0bGVuZ3RoID0gYXJndW1lbnRzLmxlbmd0aCxcclxuXHRcdGRlZXAgPSBmYWxzZTtcclxuXHJcblx0Ly8gSGFuZGxlIGEgZGVlcCBjb3B5IHNpdHVhdGlvblxyXG5cdGlmICggdHlwZW9mIHRhcmdldCA9PT0gXCJib29sZWFuXCIgKSB7XHJcblx0XHRkZWVwID0gdGFyZ2V0O1xyXG5cclxuXHRcdC8vIHNraXAgdGhlIGJvb2xlYW4gYW5kIHRoZSB0YXJnZXRcclxuXHRcdHRhcmdldCA9IGFyZ3VtZW50c1sgaSBdIHx8IHt9O1xyXG5cdFx0aSsrO1xyXG5cdH1cclxuXHJcblx0Ly8gSGFuZGxlIGNhc2Ugd2hlbiB0YXJnZXQgaXMgYSBzdHJpbmcgb3Igc29tZXRoaW5nIChwb3NzaWJsZSBpbiBkZWVwIGNvcHkpXHJcblx0aWYgKCB0eXBlb2YgdGFyZ2V0ICE9PSBcIm9iamVjdFwiICYmICFqUXVlcnkuaXNGdW5jdGlvbih0YXJnZXQpICkge1xyXG5cdFx0dGFyZ2V0ID0ge307XHJcblx0fVxyXG5cclxuXHQvLyBleHRlbmQgalF1ZXJ5IGl0c2VsZiBpZiBvbmx5IG9uZSBhcmd1bWVudCBpcyBwYXNzZWRcclxuXHRpZiAoIGkgPT09IGxlbmd0aCApIHtcclxuXHRcdHRhcmdldCA9IHRoaXM7XHJcblx0XHRpLS07XHJcblx0fVxyXG5cclxuXHRmb3IgKCA7IGkgPCBsZW5ndGg7IGkrKyApIHtcclxuXHRcdC8vIE9ubHkgZGVhbCB3aXRoIG5vbi1udWxsL3VuZGVmaW5lZCB2YWx1ZXNcclxuXHRcdGlmICggKG9wdGlvbnMgPSBhcmd1bWVudHNbIGkgXSkgIT0gbnVsbCApIHtcclxuXHRcdFx0Ly8gRXh0ZW5kIHRoZSBiYXNlIG9iamVjdFxyXG5cdFx0XHRmb3IgKCBuYW1lIGluIG9wdGlvbnMgKSB7XHJcblx0XHRcdFx0c3JjID0gdGFyZ2V0WyBuYW1lIF07XHJcblx0XHRcdFx0Y29weSA9IG9wdGlvbnNbIG5hbWUgXTtcclxuXHJcblx0XHRcdFx0Ly8gUHJldmVudCBuZXZlci1lbmRpbmcgbG9vcFxyXG5cdFx0XHRcdGlmICggdGFyZ2V0ID09PSBjb3B5ICkge1xyXG5cdFx0XHRcdFx0Y29udGludWU7XHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHQvLyBSZWN1cnNlIGlmIHdlJ3JlIG1lcmdpbmcgcGxhaW4gb2JqZWN0cyBvciBhcnJheXNcclxuXHRcdFx0XHRpZiAoIGRlZXAgJiYgY29weSAmJiAoIGpRdWVyeS5pc1BsYWluT2JqZWN0KGNvcHkpIHx8IChjb3B5SXNBcnJheSA9IGpRdWVyeS5pc0FycmF5KGNvcHkpKSApICkge1xyXG5cdFx0XHRcdFx0aWYgKCBjb3B5SXNBcnJheSApIHtcclxuXHRcdFx0XHRcdFx0Y29weUlzQXJyYXkgPSBmYWxzZTtcclxuXHRcdFx0XHRcdFx0Y2xvbmUgPSBzcmMgJiYgalF1ZXJ5LmlzQXJyYXkoc3JjKSA/IHNyYyA6IFtdO1xyXG5cclxuXHRcdFx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0XHRcdGNsb25lID0gc3JjICYmIGpRdWVyeS5pc1BsYWluT2JqZWN0KHNyYykgPyBzcmMgOiB7fTtcclxuXHRcdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0XHQvLyBOZXZlciBtb3ZlIG9yaWdpbmFsIG9iamVjdHMsIGNsb25lIHRoZW1cclxuXHRcdFx0XHRcdHRhcmdldFsgbmFtZSBdID0galF1ZXJ5LmV4dGVuZCggZGVlcCwgY2xvbmUsIGNvcHkgKTtcclxuXHJcblx0XHRcdFx0Ly8gRG9uJ3QgYnJpbmcgaW4gdW5kZWZpbmVkIHZhbHVlc1xyXG5cdFx0XHRcdH0gZWxzZSBpZiAoIGNvcHkgIT09IHVuZGVmaW5lZCApIHtcclxuXHRcdFx0XHRcdHRhcmdldFsgbmFtZSBdID0gY29weTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHR9XHJcblxyXG5cdC8vIFJldHVybiB0aGUgbW9kaWZpZWQgb2JqZWN0XHJcblx0cmV0dXJuIHRhcmdldDtcclxufTtcclxuXHJcbmpRdWVyeS5leHRlbmQoe1xyXG5cdC8vIFVuaXF1ZSBmb3IgZWFjaCBjb3B5IG9mIGpRdWVyeSBvbiB0aGUgcGFnZVxyXG5cdGV4cGFuZG86IFwialF1ZXJ5XCIgKyAoIHZlcnNpb24gKyBNYXRoLnJhbmRvbSgpICkucmVwbGFjZSggL1xcRC9nLCBcIlwiICksXHJcblxyXG5cdC8vIEFzc3VtZSBqUXVlcnkgaXMgcmVhZHkgd2l0aG91dCB0aGUgcmVhZHkgbW9kdWxlXHJcblx0aXNSZWFkeTogdHJ1ZSxcclxuXHJcblx0ZXJyb3I6IGZ1bmN0aW9uKCBtc2cgKSB7XHJcblx0XHR0aHJvdyBuZXcgRXJyb3IoIG1zZyApO1xyXG5cdH0sXHJcblxyXG5cdG5vb3A6IGZ1bmN0aW9uKCkge30sXHJcblxyXG5cdC8vIFNlZSB0ZXN0L3VuaXQvY29yZS5qcyBmb3IgZGV0YWlscyBjb25jZXJuaW5nIGlzRnVuY3Rpb24uXHJcblx0Ly8gU2luY2UgdmVyc2lvbiAxLjMsIERPTSBtZXRob2RzIGFuZCBmdW5jdGlvbnMgbGlrZSBhbGVydFxyXG5cdC8vIGFyZW4ndCBzdXBwb3J0ZWQuIFRoZXkgcmV0dXJuIGZhbHNlIG9uIElFICgjMjk2OCkuXHJcblx0aXNGdW5jdGlvbjogZnVuY3Rpb24oIG9iaiApIHtcclxuXHRcdHJldHVybiBqUXVlcnkudHlwZShvYmopID09PSBcImZ1bmN0aW9uXCI7XHJcblx0fSxcclxuXHJcblx0aXNBcnJheTogQXJyYXkuaXNBcnJheSB8fCBmdW5jdGlvbiggb2JqICkge1xyXG5cdFx0cmV0dXJuIGpRdWVyeS50eXBlKG9iaikgPT09IFwiYXJyYXlcIjtcclxuXHR9LFxyXG5cclxuXHRpc1dpbmRvdzogZnVuY3Rpb24oIG9iaiApIHtcclxuXHRcdC8qIGpzaGludCBlcWVxZXE6IGZhbHNlICovXHJcblx0XHRyZXR1cm4gb2JqICE9IG51bGwgJiYgb2JqID09IG9iai53aW5kb3c7XHJcblx0fSxcclxuXHJcblx0aXNOdW1lcmljOiBmdW5jdGlvbiggb2JqICkge1xyXG5cdFx0Ly8gcGFyc2VGbG9hdCBOYU5zIG51bWVyaWMtY2FzdCBmYWxzZSBwb3NpdGl2ZXMgKG51bGx8dHJ1ZXxmYWxzZXxcIlwiKVxyXG5cdFx0Ly8gLi4uYnV0IG1pc2ludGVycHJldHMgbGVhZGluZy1udW1iZXIgc3RyaW5ncywgcGFydGljdWxhcmx5IGhleCBsaXRlcmFscyAoXCIweC4uLlwiKVxyXG5cdFx0Ly8gc3VidHJhY3Rpb24gZm9yY2VzIGluZmluaXRpZXMgdG8gTmFOXHJcblx0XHQvLyBhZGRpbmcgMSBjb3JyZWN0cyBsb3NzIG9mIHByZWNpc2lvbiBmcm9tIHBhcnNlRmxvYXQgKCMxNTEwMClcclxuXHRcdHJldHVybiAhalF1ZXJ5LmlzQXJyYXkoIG9iaiApICYmIChvYmogLSBwYXJzZUZsb2F0KCBvYmogKSArIDEpID49IDA7XHJcblx0fSxcclxuXHJcblx0aXNFbXB0eU9iamVjdDogZnVuY3Rpb24oIG9iaiApIHtcclxuXHRcdHZhciBuYW1lO1xyXG5cdFx0Zm9yICggbmFtZSBpbiBvYmogKSB7XHJcblx0XHRcdHJldHVybiBmYWxzZTtcclxuXHRcdH1cclxuXHRcdHJldHVybiB0cnVlO1xyXG5cdH0sXHJcblxyXG5cdGlzUGxhaW5PYmplY3Q6IGZ1bmN0aW9uKCBvYmogKSB7XHJcblx0XHR2YXIga2V5O1xyXG5cclxuXHRcdC8vIE11c3QgYmUgYW4gT2JqZWN0LlxyXG5cdFx0Ly8gQmVjYXVzZSBvZiBJRSwgd2UgYWxzbyBoYXZlIHRvIGNoZWNrIHRoZSBwcmVzZW5jZSBvZiB0aGUgY29uc3RydWN0b3IgcHJvcGVydHkuXHJcblx0XHQvLyBNYWtlIHN1cmUgdGhhdCBET00gbm9kZXMgYW5kIHdpbmRvdyBvYmplY3RzIGRvbid0IHBhc3MgdGhyb3VnaCwgYXMgd2VsbFxyXG5cdFx0aWYgKCAhb2JqIHx8IGpRdWVyeS50eXBlKG9iaikgIT09IFwib2JqZWN0XCIgfHwgb2JqLm5vZGVUeXBlIHx8IGpRdWVyeS5pc1dpbmRvdyggb2JqICkgKSB7XHJcblx0XHRcdHJldHVybiBmYWxzZTtcclxuXHRcdH1cclxuXHJcblx0XHR0cnkge1xyXG5cdFx0XHQvLyBOb3Qgb3duIGNvbnN0cnVjdG9yIHByb3BlcnR5IG11c3QgYmUgT2JqZWN0XHJcblx0XHRcdGlmICggb2JqLmNvbnN0cnVjdG9yICYmXHJcblx0XHRcdFx0IWhhc093bi5jYWxsKG9iaiwgXCJjb25zdHJ1Y3RvclwiKSAmJlxyXG5cdFx0XHRcdCFoYXNPd24uY2FsbChvYmouY29uc3RydWN0b3IucHJvdG90eXBlLCBcImlzUHJvdG90eXBlT2ZcIikgKSB7XHJcblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xyXG5cdFx0XHR9XHJcblx0XHR9IGNhdGNoICggZSApIHtcclxuXHRcdFx0Ly8gSUU4LDkgV2lsbCB0aHJvdyBleGNlcHRpb25zIG9uIGNlcnRhaW4gaG9zdCBvYmplY3RzICM5ODk3XHJcblx0XHRcdHJldHVybiBmYWxzZTtcclxuXHRcdH1cclxuXHJcblx0XHQvLyBTdXBwb3J0OiBJRTw5XHJcblx0XHQvLyBIYW5kbGUgaXRlcmF0aW9uIG92ZXIgaW5oZXJpdGVkIHByb3BlcnRpZXMgYmVmb3JlIG93biBwcm9wZXJ0aWVzLlxyXG5cdFx0aWYgKCBzdXBwb3J0Lm93bkxhc3QgKSB7XHJcblx0XHRcdGZvciAoIGtleSBpbiBvYmogKSB7XHJcblx0XHRcdFx0cmV0dXJuIGhhc093bi5jYWxsKCBvYmosIGtleSApO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gT3duIHByb3BlcnRpZXMgYXJlIGVudW1lcmF0ZWQgZmlyc3RseSwgc28gdG8gc3BlZWQgdXAsXHJcblx0XHQvLyBpZiBsYXN0IG9uZSBpcyBvd24sIHRoZW4gYWxsIHByb3BlcnRpZXMgYXJlIG93bi5cclxuXHRcdGZvciAoIGtleSBpbiBvYmogKSB7fVxyXG5cclxuXHRcdHJldHVybiBrZXkgPT09IHVuZGVmaW5lZCB8fCBoYXNPd24uY2FsbCggb2JqLCBrZXkgKTtcclxuXHR9LFxyXG5cclxuXHR0eXBlOiBmdW5jdGlvbiggb2JqICkge1xyXG5cdFx0aWYgKCBvYmogPT0gbnVsbCApIHtcclxuXHRcdFx0cmV0dXJuIG9iaiArIFwiXCI7XHJcblx0XHR9XHJcblx0XHRyZXR1cm4gdHlwZW9mIG9iaiA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2Ygb2JqID09PSBcImZ1bmN0aW9uXCIgP1xyXG5cdFx0XHRjbGFzczJ0eXBlWyB0b1N0cmluZy5jYWxsKG9iaikgXSB8fCBcIm9iamVjdFwiIDpcclxuXHRcdFx0dHlwZW9mIG9iajtcclxuXHR9LFxyXG5cclxuXHQvLyBFdmFsdWF0ZXMgYSBzY3JpcHQgaW4gYSBnbG9iYWwgY29udGV4dFxyXG5cdC8vIFdvcmthcm91bmRzIGJhc2VkIG9uIGZpbmRpbmdzIGJ5IEppbSBEcmlzY29sbFxyXG5cdC8vIGh0dHA6Ly93ZWJsb2dzLmphdmEubmV0L2Jsb2cvZHJpc2NvbGwvYXJjaGl2ZS8yMDA5LzA5LzA4L2V2YWwtamF2YXNjcmlwdC1nbG9iYWwtY29udGV4dFxyXG5cdGdsb2JhbEV2YWw6IGZ1bmN0aW9uKCBkYXRhICkge1xyXG5cdFx0aWYgKCBkYXRhICYmIGpRdWVyeS50cmltKCBkYXRhICkgKSB7XHJcblx0XHRcdC8vIFdlIHVzZSBleGVjU2NyaXB0IG9uIEludGVybmV0IEV4cGxvcmVyXHJcblx0XHRcdC8vIFdlIHVzZSBhbiBhbm9ueW1vdXMgZnVuY3Rpb24gc28gdGhhdCBjb250ZXh0IGlzIHdpbmRvd1xyXG5cdFx0XHQvLyByYXRoZXIgdGhhbiBqUXVlcnkgaW4gRmlyZWZveFxyXG5cdFx0XHQoIHdpbmRvdy5leGVjU2NyaXB0IHx8IGZ1bmN0aW9uKCBkYXRhICkge1xyXG5cdFx0XHRcdHdpbmRvd1sgXCJldmFsXCIgXS5jYWxsKCB3aW5kb3csIGRhdGEgKTtcclxuXHRcdFx0fSApKCBkYXRhICk7XHJcblx0XHR9XHJcblx0fSxcclxuXHJcblx0Ly8gQ29udmVydCBkYXNoZWQgdG8gY2FtZWxDYXNlOyB1c2VkIGJ5IHRoZSBjc3MgYW5kIGRhdGEgbW9kdWxlc1xyXG5cdC8vIE1pY3Jvc29mdCBmb3Jnb3QgdG8gaHVtcCB0aGVpciB2ZW5kb3IgcHJlZml4ICgjOTU3MilcclxuXHRjYW1lbENhc2U6IGZ1bmN0aW9uKCBzdHJpbmcgKSB7XHJcblx0XHRyZXR1cm4gc3RyaW5nLnJlcGxhY2UoIHJtc1ByZWZpeCwgXCJtcy1cIiApLnJlcGxhY2UoIHJkYXNoQWxwaGEsIGZjYW1lbENhc2UgKTtcclxuXHR9LFxyXG5cclxuXHRub2RlTmFtZTogZnVuY3Rpb24oIGVsZW0sIG5hbWUgKSB7XHJcblx0XHRyZXR1cm4gZWxlbS5ub2RlTmFtZSAmJiBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09IG5hbWUudG9Mb3dlckNhc2UoKTtcclxuXHR9LFxyXG5cclxuXHQvLyBhcmdzIGlzIGZvciBpbnRlcm5hbCB1c2FnZSBvbmx5XHJcblx0ZWFjaDogZnVuY3Rpb24oIG9iaiwgY2FsbGJhY2ssIGFyZ3MgKSB7XHJcblx0XHR2YXIgdmFsdWUsXHJcblx0XHRcdGkgPSAwLFxyXG5cdFx0XHRsZW5ndGggPSBvYmoubGVuZ3RoLFxyXG5cdFx0XHRpc0FycmF5ID0gaXNBcnJheWxpa2UoIG9iaiApO1xyXG5cclxuXHRcdGlmICggYXJncyApIHtcclxuXHRcdFx0aWYgKCBpc0FycmF5ICkge1xyXG5cdFx0XHRcdGZvciAoIDsgaSA8IGxlbmd0aDsgaSsrICkge1xyXG5cdFx0XHRcdFx0dmFsdWUgPSBjYWxsYmFjay5hcHBseSggb2JqWyBpIF0sIGFyZ3MgKTtcclxuXHJcblx0XHRcdFx0XHRpZiAoIHZhbHVlID09PSBmYWxzZSApIHtcclxuXHRcdFx0XHRcdFx0YnJlYWs7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdGZvciAoIGkgaW4gb2JqICkge1xyXG5cdFx0XHRcdFx0dmFsdWUgPSBjYWxsYmFjay5hcHBseSggb2JqWyBpIF0sIGFyZ3MgKTtcclxuXHJcblx0XHRcdFx0XHRpZiAoIHZhbHVlID09PSBmYWxzZSApIHtcclxuXHRcdFx0XHRcdFx0YnJlYWs7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblxyXG5cdFx0Ly8gQSBzcGVjaWFsLCBmYXN0LCBjYXNlIGZvciB0aGUgbW9zdCBjb21tb24gdXNlIG9mIGVhY2hcclxuXHRcdH0gZWxzZSB7XHJcblx0XHRcdGlmICggaXNBcnJheSApIHtcclxuXHRcdFx0XHRmb3IgKCA7IGkgPCBsZW5ndGg7IGkrKyApIHtcclxuXHRcdFx0XHRcdHZhbHVlID0gY2FsbGJhY2suY2FsbCggb2JqWyBpIF0sIGksIG9ialsgaSBdICk7XHJcblxyXG5cdFx0XHRcdFx0aWYgKCB2YWx1ZSA9PT0gZmFsc2UgKSB7XHJcblx0XHRcdFx0XHRcdGJyZWFrO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH1cclxuXHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRmb3IgKCBpIGluIG9iaiApIHtcclxuXHRcdFx0XHRcdHZhbHVlID0gY2FsbGJhY2suY2FsbCggb2JqWyBpIF0sIGksIG9ialsgaSBdICk7XHJcblxyXG5cdFx0XHRcdFx0aWYgKCB2YWx1ZSA9PT0gZmFsc2UgKSB7XHJcblx0XHRcdFx0XHRcdGJyZWFrO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiBvYmo7XHJcblx0fSxcclxuXHJcblx0Ly8gU3VwcG9ydDogQW5kcm9pZDw0LjEsIElFPDlcclxuXHR0cmltOiBmdW5jdGlvbiggdGV4dCApIHtcclxuXHRcdHJldHVybiB0ZXh0ID09IG51bGwgP1xyXG5cdFx0XHRcIlwiIDpcclxuXHRcdFx0KCB0ZXh0ICsgXCJcIiApLnJlcGxhY2UoIHJ0cmltLCBcIlwiICk7XHJcblx0fSxcclxuXHJcblx0Ly8gcmVzdWx0cyBpcyBmb3IgaW50ZXJuYWwgdXNhZ2Ugb25seVxyXG5cdG1ha2VBcnJheTogZnVuY3Rpb24oIGFyciwgcmVzdWx0cyApIHtcclxuXHRcdHZhciByZXQgPSByZXN1bHRzIHx8IFtdO1xyXG5cclxuXHRcdGlmICggYXJyICE9IG51bGwgKSB7XHJcblx0XHRcdGlmICggaXNBcnJheWxpa2UoIE9iamVjdChhcnIpICkgKSB7XHJcblx0XHRcdFx0alF1ZXJ5Lm1lcmdlKCByZXQsXHJcblx0XHRcdFx0XHR0eXBlb2YgYXJyID09PSBcInN0cmluZ1wiID9cclxuXHRcdFx0XHRcdFsgYXJyIF0gOiBhcnJcclxuXHRcdFx0XHQpO1xyXG5cdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdHB1c2guY2FsbCggcmV0LCBhcnIgKTtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiByZXQ7XHJcblx0fSxcclxuXHJcblx0aW5BcnJheTogZnVuY3Rpb24oIGVsZW0sIGFyciwgaSApIHtcclxuXHRcdHZhciBsZW47XHJcblxyXG5cdFx0aWYgKCBhcnIgKSB7XHJcblx0XHRcdGlmICggaW5kZXhPZiApIHtcclxuXHRcdFx0XHRyZXR1cm4gaW5kZXhPZi5jYWxsKCBhcnIsIGVsZW0sIGkgKTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0bGVuID0gYXJyLmxlbmd0aDtcclxuXHRcdFx0aSA9IGkgPyBpIDwgMCA/IE1hdGgubWF4KCAwLCBsZW4gKyBpICkgOiBpIDogMDtcclxuXHJcblx0XHRcdGZvciAoIDsgaSA8IGxlbjsgaSsrICkge1xyXG5cdFx0XHRcdC8vIFNraXAgYWNjZXNzaW5nIGluIHNwYXJzZSBhcnJheXNcclxuXHRcdFx0XHRpZiAoIGkgaW4gYXJyICYmIGFyclsgaSBdID09PSBlbGVtICkge1xyXG5cdFx0XHRcdFx0cmV0dXJuIGk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHR9XHJcblxyXG5cdFx0cmV0dXJuIC0xO1xyXG5cdH0sXHJcblxyXG5cdG1lcmdlOiBmdW5jdGlvbiggZmlyc3QsIHNlY29uZCApIHtcclxuXHRcdHZhciBsZW4gPSArc2Vjb25kLmxlbmd0aCxcclxuXHRcdFx0aiA9IDAsXHJcblx0XHRcdGkgPSBmaXJzdC5sZW5ndGg7XHJcblxyXG5cdFx0d2hpbGUgKCBqIDwgbGVuICkge1xyXG5cdFx0XHRmaXJzdFsgaSsrIF0gPSBzZWNvbmRbIGorKyBdO1xyXG5cdFx0fVxyXG5cclxuXHRcdC8vIFN1cHBvcnQ6IElFPDlcclxuXHRcdC8vIFdvcmthcm91bmQgY2FzdGluZyBvZiAubGVuZ3RoIHRvIE5hTiBvbiBvdGhlcndpc2UgYXJyYXlsaWtlIG9iamVjdHMgKGUuZy4sIE5vZGVMaXN0cylcclxuXHRcdGlmICggbGVuICE9PSBsZW4gKSB7XHJcblx0XHRcdHdoaWxlICggc2Vjb25kW2pdICE9PSB1bmRlZmluZWQgKSB7XHJcblx0XHRcdFx0Zmlyc3RbIGkrKyBdID0gc2Vjb25kWyBqKysgXTtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cclxuXHRcdGZpcnN0Lmxlbmd0aCA9IGk7XHJcblxyXG5cdFx0cmV0dXJuIGZpcnN0O1xyXG5cdH0sXHJcblxyXG5cdGdyZXA6IGZ1bmN0aW9uKCBlbGVtcywgY2FsbGJhY2ssIGludmVydCApIHtcclxuXHRcdHZhciBjYWxsYmFja0ludmVyc2UsXHJcblx0XHRcdG1hdGNoZXMgPSBbXSxcclxuXHRcdFx0aSA9IDAsXHJcblx0XHRcdGxlbmd0aCA9IGVsZW1zLmxlbmd0aCxcclxuXHRcdFx0Y2FsbGJhY2tFeHBlY3QgPSAhaW52ZXJ0O1xyXG5cclxuXHRcdC8vIEdvIHRocm91Z2ggdGhlIGFycmF5LCBvbmx5IHNhdmluZyB0aGUgaXRlbXNcclxuXHRcdC8vIHRoYXQgcGFzcyB0aGUgdmFsaWRhdG9yIGZ1bmN0aW9uXHJcblx0XHRmb3IgKCA7IGkgPCBsZW5ndGg7IGkrKyApIHtcclxuXHRcdFx0Y2FsbGJhY2tJbnZlcnNlID0gIWNhbGxiYWNrKCBlbGVtc1sgaSBdLCBpICk7XHJcblx0XHRcdGlmICggY2FsbGJhY2tJbnZlcnNlICE9PSBjYWxsYmFja0V4cGVjdCApIHtcclxuXHRcdFx0XHRtYXRjaGVzLnB1c2goIGVsZW1zWyBpIF0gKTtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiBtYXRjaGVzO1xyXG5cdH0sXHJcblxyXG5cdC8vIGFyZyBpcyBmb3IgaW50ZXJuYWwgdXNhZ2Ugb25seVxyXG5cdG1hcDogZnVuY3Rpb24oIGVsZW1zLCBjYWxsYmFjaywgYXJnICkge1xyXG5cdFx0dmFyIHZhbHVlLFxyXG5cdFx0XHRpID0gMCxcclxuXHRcdFx0bGVuZ3RoID0gZWxlbXMubGVuZ3RoLFxyXG5cdFx0XHRpc0FycmF5ID0gaXNBcnJheWxpa2UoIGVsZW1zICksXHJcblx0XHRcdHJldCA9IFtdO1xyXG5cclxuXHRcdC8vIEdvIHRocm91Z2ggdGhlIGFycmF5LCB0cmFuc2xhdGluZyBlYWNoIG9mIHRoZSBpdGVtcyB0byB0aGVpciBuZXcgdmFsdWVzXHJcblx0XHRpZiAoIGlzQXJyYXkgKSB7XHJcblx0XHRcdGZvciAoIDsgaSA8IGxlbmd0aDsgaSsrICkge1xyXG5cdFx0XHRcdHZhbHVlID0gY2FsbGJhY2soIGVsZW1zWyBpIF0sIGksIGFyZyApO1xyXG5cclxuXHRcdFx0XHRpZiAoIHZhbHVlICE9IG51bGwgKSB7XHJcblx0XHRcdFx0XHRyZXQucHVzaCggdmFsdWUgKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHJcblx0XHQvLyBHbyB0aHJvdWdoIGV2ZXJ5IGtleSBvbiB0aGUgb2JqZWN0LFxyXG5cdFx0fSBlbHNlIHtcclxuXHRcdFx0Zm9yICggaSBpbiBlbGVtcyApIHtcclxuXHRcdFx0XHR2YWx1ZSA9IGNhbGxiYWNrKCBlbGVtc1sgaSBdLCBpLCBhcmcgKTtcclxuXHJcblx0XHRcdFx0aWYgKCB2YWx1ZSAhPSBudWxsICkge1xyXG5cdFx0XHRcdFx0cmV0LnB1c2goIHZhbHVlICk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gRmxhdHRlbiBhbnkgbmVzdGVkIGFycmF5c1xyXG5cdFx0cmV0dXJuIGNvbmNhdC5hcHBseSggW10sIHJldCApO1xyXG5cdH0sXHJcblxyXG5cdC8vIEEgZ2xvYmFsIEdVSUQgY291bnRlciBmb3Igb2JqZWN0c1xyXG5cdGd1aWQ6IDEsXHJcblxyXG5cdC8vIEJpbmQgYSBmdW5jdGlvbiB0byBhIGNvbnRleHQsIG9wdGlvbmFsbHkgcGFydGlhbGx5IGFwcGx5aW5nIGFueVxyXG5cdC8vIGFyZ3VtZW50cy5cclxuXHRwcm94eTogZnVuY3Rpb24oIGZuLCBjb250ZXh0ICkge1xyXG5cdFx0dmFyIGFyZ3MsIHByb3h5LCB0bXA7XHJcblxyXG5cdFx0aWYgKCB0eXBlb2YgY29udGV4dCA9PT0gXCJzdHJpbmdcIiApIHtcclxuXHRcdFx0dG1wID0gZm5bIGNvbnRleHQgXTtcclxuXHRcdFx0Y29udGV4dCA9IGZuO1xyXG5cdFx0XHRmbiA9IHRtcDtcclxuXHRcdH1cclxuXHJcblx0XHQvLyBRdWljayBjaGVjayB0byBkZXRlcm1pbmUgaWYgdGFyZ2V0IGlzIGNhbGxhYmxlLCBpbiB0aGUgc3BlY1xyXG5cdFx0Ly8gdGhpcyB0aHJvd3MgYSBUeXBlRXJyb3IsIGJ1dCB3ZSB3aWxsIGp1c3QgcmV0dXJuIHVuZGVmaW5lZC5cclxuXHRcdGlmICggIWpRdWVyeS5pc0Z1bmN0aW9uKCBmbiApICkge1xyXG5cdFx0XHRyZXR1cm4gdW5kZWZpbmVkO1xyXG5cdFx0fVxyXG5cclxuXHRcdC8vIFNpbXVsYXRlZCBiaW5kXHJcblx0XHRhcmdzID0gc2xpY2UuY2FsbCggYXJndW1lbnRzLCAyICk7XHJcblx0XHRwcm94eSA9IGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRyZXR1cm4gZm4uYXBwbHkoIGNvbnRleHQgfHwgdGhpcywgYXJncy5jb25jYXQoIHNsaWNlLmNhbGwoIGFyZ3VtZW50cyApICkgKTtcclxuXHRcdH07XHJcblxyXG5cdFx0Ly8gU2V0IHRoZSBndWlkIG9mIHVuaXF1ZSBoYW5kbGVyIHRvIHRoZSBzYW1lIG9mIG9yaWdpbmFsIGhhbmRsZXIsIHNvIGl0IGNhbiBiZSByZW1vdmVkXHJcblx0XHRwcm94eS5ndWlkID0gZm4uZ3VpZCA9IGZuLmd1aWQgfHwgalF1ZXJ5Lmd1aWQrKztcclxuXHJcblx0XHRyZXR1cm4gcHJveHk7XHJcblx0fSxcclxuXHJcblx0bm93OiBmdW5jdGlvbigpIHtcclxuXHRcdHJldHVybiArKCBuZXcgRGF0ZSgpICk7XHJcblx0fSxcclxuXHJcblx0Ly8galF1ZXJ5LnN1cHBvcnQgaXMgbm90IHVzZWQgaW4gQ29yZSBidXQgb3RoZXIgcHJvamVjdHMgYXR0YWNoIHRoZWlyXHJcblx0Ly8gcHJvcGVydGllcyB0byBpdCBzbyBpdCBuZWVkcyB0byBleGlzdC5cclxuXHRzdXBwb3J0OiBzdXBwb3J0XHJcbn0pO1xyXG5cclxuLy8gUG9wdWxhdGUgdGhlIGNsYXNzMnR5cGUgbWFwXHJcbmpRdWVyeS5lYWNoKFwiQm9vbGVhbiBOdW1iZXIgU3RyaW5nIEZ1bmN0aW9uIEFycmF5IERhdGUgUmVnRXhwIE9iamVjdCBFcnJvclwiLnNwbGl0KFwiIFwiKSwgZnVuY3Rpb24oaSwgbmFtZSkge1xyXG5cdGNsYXNzMnR5cGVbIFwiW29iamVjdCBcIiArIG5hbWUgKyBcIl1cIiBdID0gbmFtZS50b0xvd2VyQ2FzZSgpO1xyXG59KTtcclxuXHJcbmZ1bmN0aW9uIGlzQXJyYXlsaWtlKCBvYmogKSB7XHJcblxyXG5cdC8vIFN1cHBvcnQ6IGlPUyA4LjIgKG5vdCByZXByb2R1Y2libGUgaW4gc2ltdWxhdG9yKVxyXG5cdC8vIGBpbmAgY2hlY2sgdXNlZCB0byBwcmV2ZW50IEpJVCBlcnJvciAoZ2gtMjE0NSlcclxuXHQvLyBoYXNPd24gaXNuJ3QgdXNlZCBoZXJlIGR1ZSB0byBmYWxzZSBuZWdhdGl2ZXNcclxuXHQvLyByZWdhcmRpbmcgTm9kZWxpc3QgbGVuZ3RoIGluIElFXHJcblx0dmFyIGxlbmd0aCA9IFwibGVuZ3RoXCIgaW4gb2JqICYmIG9iai5sZW5ndGgsXHJcblx0XHR0eXBlID0galF1ZXJ5LnR5cGUoIG9iaiApO1xyXG5cclxuXHRpZiAoIHR5cGUgPT09IFwiZnVuY3Rpb25cIiB8fCBqUXVlcnkuaXNXaW5kb3coIG9iaiApICkge1xyXG5cdFx0cmV0dXJuIGZhbHNlO1xyXG5cdH1cclxuXHJcblx0aWYgKCBvYmoubm9kZVR5cGUgPT09IDEgJiYgbGVuZ3RoICkge1xyXG5cdFx0cmV0dXJuIHRydWU7XHJcblx0fVxyXG5cclxuXHRyZXR1cm4gdHlwZSA9PT0gXCJhcnJheVwiIHx8IGxlbmd0aCA9PT0gMCB8fFxyXG5cdFx0dHlwZW9mIGxlbmd0aCA9PT0gXCJudW1iZXJcIiAmJiBsZW5ndGggPiAwICYmICggbGVuZ3RoIC0gMSApIGluIG9iajtcclxufVxyXG52YXIgU2l6emxlID1cclxuLyohXHJcbiAqIFNpenpsZSBDU1MgU2VsZWN0b3IgRW5naW5lIHYyLjIuMC1wcmVcclxuICogaHR0cDovL3NpenpsZWpzLmNvbS9cclxuICpcclxuICogQ29weXJpZ2h0IDIwMDgsIDIwMTQgalF1ZXJ5IEZvdW5kYXRpb24sIEluYy4gYW5kIG90aGVyIGNvbnRyaWJ1dG9yc1xyXG4gKiBSZWxlYXNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2VcclxuICogaHR0cDovL2pxdWVyeS5vcmcvbGljZW5zZVxyXG4gKlxyXG4gKiBEYXRlOiAyMDE0LTEyLTE2XHJcbiAqL1xyXG4oZnVuY3Rpb24oIHdpbmRvdyApIHtcclxuXHJcbnZhciBpLFxyXG5cdHN1cHBvcnQsXHJcblx0RXhwcixcclxuXHRnZXRUZXh0LFxyXG5cdGlzWE1MLFxyXG5cdHRva2VuaXplLFxyXG5cdGNvbXBpbGUsXHJcblx0c2VsZWN0LFxyXG5cdG91dGVybW9zdENvbnRleHQsXHJcblx0c29ydElucHV0LFxyXG5cdGhhc0R1cGxpY2F0ZSxcclxuXHJcblx0Ly8gTG9jYWwgZG9jdW1lbnQgdmFyc1xyXG5cdHNldERvY3VtZW50LFxyXG5cdGRvY3VtZW50LFxyXG5cdGRvY0VsZW0sXHJcblx0ZG9jdW1lbnRJc0hUTUwsXHJcblx0cmJ1Z2d5UVNBLFxyXG5cdHJidWdneU1hdGNoZXMsXHJcblx0bWF0Y2hlcyxcclxuXHRjb250YWlucyxcclxuXHJcblx0Ly8gSW5zdGFuY2Utc3BlY2lmaWMgZGF0YVxyXG5cdGV4cGFuZG8gPSBcInNpenpsZVwiICsgMSAqIG5ldyBEYXRlKCksXHJcblx0cHJlZmVycmVkRG9jID0gd2luZG93LmRvY3VtZW50LFxyXG5cdGRpcnJ1bnMgPSAwLFxyXG5cdGRvbmUgPSAwLFxyXG5cdGNsYXNzQ2FjaGUgPSBjcmVhdGVDYWNoZSgpLFxyXG5cdHRva2VuQ2FjaGUgPSBjcmVhdGVDYWNoZSgpLFxyXG5cdGNvbXBpbGVyQ2FjaGUgPSBjcmVhdGVDYWNoZSgpLFxyXG5cdHNvcnRPcmRlciA9IGZ1bmN0aW9uKCBhLCBiICkge1xyXG5cdFx0aWYgKCBhID09PSBiICkge1xyXG5cdFx0XHRoYXNEdXBsaWNhdGUgPSB0cnVlO1xyXG5cdFx0fVxyXG5cdFx0cmV0dXJuIDA7XHJcblx0fSxcclxuXHJcblx0Ly8gR2VuZXJhbC1wdXJwb3NlIGNvbnN0YW50c1xyXG5cdE1BWF9ORUdBVElWRSA9IDEgPDwgMzEsXHJcblxyXG5cdC8vIEluc3RhbmNlIG1ldGhvZHNcclxuXHRoYXNPd24gPSAoe30pLmhhc093blByb3BlcnR5LFxyXG5cdGFyciA9IFtdLFxyXG5cdHBvcCA9IGFyci5wb3AsXHJcblx0cHVzaF9uYXRpdmUgPSBhcnIucHVzaCxcclxuXHRwdXNoID0gYXJyLnB1c2gsXHJcblx0c2xpY2UgPSBhcnIuc2xpY2UsXHJcblx0Ly8gVXNlIGEgc3RyaXBwZWQtZG93biBpbmRleE9mIGFzIGl0J3MgZmFzdGVyIHRoYW4gbmF0aXZlXHJcblx0Ly8gaHR0cDovL2pzcGVyZi5jb20vdGhvci1pbmRleG9mLXZzLWZvci81XHJcblx0aW5kZXhPZiA9IGZ1bmN0aW9uKCBsaXN0LCBlbGVtICkge1xyXG5cdFx0dmFyIGkgPSAwLFxyXG5cdFx0XHRsZW4gPSBsaXN0Lmxlbmd0aDtcclxuXHRcdGZvciAoIDsgaSA8IGxlbjsgaSsrICkge1xyXG5cdFx0XHRpZiAoIGxpc3RbaV0gPT09IGVsZW0gKSB7XHJcblx0XHRcdFx0cmV0dXJuIGk7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHRcdHJldHVybiAtMTtcclxuXHR9LFxyXG5cclxuXHRib29sZWFucyA9IFwiY2hlY2tlZHxzZWxlY3RlZHxhc3luY3xhdXRvZm9jdXN8YXV0b3BsYXl8Y29udHJvbHN8ZGVmZXJ8ZGlzYWJsZWR8aGlkZGVufGlzbWFwfGxvb3B8bXVsdGlwbGV8b3BlbnxyZWFkb25seXxyZXF1aXJlZHxzY29wZWRcIixcclxuXHJcblx0Ly8gUmVndWxhciBleHByZXNzaW9uc1xyXG5cclxuXHQvLyBXaGl0ZXNwYWNlIGNoYXJhY3RlcnMgaHR0cDovL3d3dy53My5vcmcvVFIvY3NzMy1zZWxlY3RvcnMvI3doaXRlc3BhY2VcclxuXHR3aGl0ZXNwYWNlID0gXCJbXFxcXHgyMFxcXFx0XFxcXHJcXFxcblxcXFxmXVwiLFxyXG5cdC8vIGh0dHA6Ly93d3cudzMub3JnL1RSL2NzczMtc3ludGF4LyNjaGFyYWN0ZXJzXHJcblx0Y2hhcmFjdGVyRW5jb2RpbmcgPSBcIig/OlxcXFxcXFxcLnxbXFxcXHctXXxbXlxcXFx4MDAtXFxcXHhhMF0pK1wiLFxyXG5cclxuXHQvLyBMb29zZWx5IG1vZGVsZWQgb24gQ1NTIGlkZW50aWZpZXIgY2hhcmFjdGVyc1xyXG5cdC8vIEFuIHVucXVvdGVkIHZhbHVlIHNob3VsZCBiZSBhIENTUyBpZGVudGlmaWVyIGh0dHA6Ly93d3cudzMub3JnL1RSL2NzczMtc2VsZWN0b3JzLyNhdHRyaWJ1dGUtc2VsZWN0b3JzXHJcblx0Ly8gUHJvcGVyIHN5bnRheDogaHR0cDovL3d3dy53My5vcmcvVFIvQ1NTMjEvc3luZGF0YS5odG1sI3ZhbHVlLWRlZi1pZGVudGlmaWVyXHJcblx0aWRlbnRpZmllciA9IGNoYXJhY3RlckVuY29kaW5nLnJlcGxhY2UoIFwid1wiLCBcIncjXCIgKSxcclxuXHJcblx0Ly8gQXR0cmlidXRlIHNlbGVjdG9yczogaHR0cDovL3d3dy53My5vcmcvVFIvc2VsZWN0b3JzLyNhdHRyaWJ1dGUtc2VsZWN0b3JzXHJcblx0YXR0cmlidXRlcyA9IFwiXFxcXFtcIiArIHdoaXRlc3BhY2UgKyBcIiooXCIgKyBjaGFyYWN0ZXJFbmNvZGluZyArIFwiKSg/OlwiICsgd2hpdGVzcGFjZSArXHJcblx0XHQvLyBPcGVyYXRvciAoY2FwdHVyZSAyKVxyXG5cdFx0XCIqKFsqXiR8IX5dPz0pXCIgKyB3aGl0ZXNwYWNlICtcclxuXHRcdC8vIFwiQXR0cmlidXRlIHZhbHVlcyBtdXN0IGJlIENTUyBpZGVudGlmaWVycyBbY2FwdHVyZSA1XSBvciBzdHJpbmdzIFtjYXB0dXJlIDMgb3IgY2FwdHVyZSA0XVwiXHJcblx0XHRcIiooPzonKCg/OlxcXFxcXFxcLnxbXlxcXFxcXFxcJ10pKiknfFxcXCIoKD86XFxcXFxcXFwufFteXFxcXFxcXFxcXFwiXSkqKVxcXCJ8KFwiICsgaWRlbnRpZmllciArIFwiKSl8KVwiICsgd2hpdGVzcGFjZSArXHJcblx0XHRcIipcXFxcXVwiLFxyXG5cclxuXHRwc2V1ZG9zID0gXCI6KFwiICsgY2hhcmFjdGVyRW5jb2RpbmcgKyBcIikoPzpcXFxcKChcIiArXHJcblx0XHQvLyBUbyByZWR1Y2UgdGhlIG51bWJlciBvZiBzZWxlY3RvcnMgbmVlZGluZyB0b2tlbml6ZSBpbiB0aGUgcHJlRmlsdGVyLCBwcmVmZXIgYXJndW1lbnRzOlxyXG5cdFx0Ly8gMS4gcXVvdGVkIChjYXB0dXJlIDM7IGNhcHR1cmUgNCBvciBjYXB0dXJlIDUpXHJcblx0XHRcIignKCg/OlxcXFxcXFxcLnxbXlxcXFxcXFxcJ10pKiknfFxcXCIoKD86XFxcXFxcXFwufFteXFxcXFxcXFxcXFwiXSkqKVxcXCIpfFwiICtcclxuXHRcdC8vIDIuIHNpbXBsZSAoY2FwdHVyZSA2KVxyXG5cdFx0XCIoKD86XFxcXFxcXFwufFteXFxcXFxcXFwoKVtcXFxcXV18XCIgKyBhdHRyaWJ1dGVzICsgXCIpKil8XCIgK1xyXG5cdFx0Ly8gMy4gYW55dGhpbmcgZWxzZSAoY2FwdHVyZSAyKVxyXG5cdFx0XCIuKlwiICtcclxuXHRcdFwiKVxcXFwpfClcIixcclxuXHJcblx0Ly8gTGVhZGluZyBhbmQgbm9uLWVzY2FwZWQgdHJhaWxpbmcgd2hpdGVzcGFjZSwgY2FwdHVyaW5nIHNvbWUgbm9uLXdoaXRlc3BhY2UgY2hhcmFjdGVycyBwcmVjZWRpbmcgdGhlIGxhdHRlclxyXG5cdHJ3aGl0ZXNwYWNlID0gbmV3IFJlZ0V4cCggd2hpdGVzcGFjZSArIFwiK1wiLCBcImdcIiApLFxyXG5cdHJ0cmltID0gbmV3IFJlZ0V4cCggXCJeXCIgKyB3aGl0ZXNwYWNlICsgXCIrfCgoPzpefFteXFxcXFxcXFxdKSg/OlxcXFxcXFxcLikqKVwiICsgd2hpdGVzcGFjZSArIFwiKyRcIiwgXCJnXCIgKSxcclxuXHJcblx0cmNvbW1hID0gbmV3IFJlZ0V4cCggXCJeXCIgKyB3aGl0ZXNwYWNlICsgXCIqLFwiICsgd2hpdGVzcGFjZSArIFwiKlwiICksXHJcblx0cmNvbWJpbmF0b3JzID0gbmV3IFJlZ0V4cCggXCJeXCIgKyB3aGl0ZXNwYWNlICsgXCIqKFs+K35dfFwiICsgd2hpdGVzcGFjZSArIFwiKVwiICsgd2hpdGVzcGFjZSArIFwiKlwiICksXHJcblxyXG5cdHJhdHRyaWJ1dGVRdW90ZXMgPSBuZXcgUmVnRXhwKCBcIj1cIiArIHdoaXRlc3BhY2UgKyBcIiooW15cXFxcXSdcXFwiXSo/KVwiICsgd2hpdGVzcGFjZSArIFwiKlxcXFxdXCIsIFwiZ1wiICksXHJcblxyXG5cdHJwc2V1ZG8gPSBuZXcgUmVnRXhwKCBwc2V1ZG9zICksXHJcblx0cmlkZW50aWZpZXIgPSBuZXcgUmVnRXhwKCBcIl5cIiArIGlkZW50aWZpZXIgKyBcIiRcIiApLFxyXG5cclxuXHRtYXRjaEV4cHIgPSB7XHJcblx0XHRcIklEXCI6IG5ldyBSZWdFeHAoIFwiXiMoXCIgKyBjaGFyYWN0ZXJFbmNvZGluZyArIFwiKVwiICksXHJcblx0XHRcIkNMQVNTXCI6IG5ldyBSZWdFeHAoIFwiXlxcXFwuKFwiICsgY2hhcmFjdGVyRW5jb2RpbmcgKyBcIilcIiApLFxyXG5cdFx0XCJUQUdcIjogbmV3IFJlZ0V4cCggXCJeKFwiICsgY2hhcmFjdGVyRW5jb2RpbmcucmVwbGFjZSggXCJ3XCIsIFwidypcIiApICsgXCIpXCIgKSxcclxuXHRcdFwiQVRUUlwiOiBuZXcgUmVnRXhwKCBcIl5cIiArIGF0dHJpYnV0ZXMgKSxcclxuXHRcdFwiUFNFVURPXCI6IG5ldyBSZWdFeHAoIFwiXlwiICsgcHNldWRvcyApLFxyXG5cdFx0XCJDSElMRFwiOiBuZXcgUmVnRXhwKCBcIl46KG9ubHl8Zmlyc3R8bGFzdHxudGh8bnRoLWxhc3QpLShjaGlsZHxvZi10eXBlKSg/OlxcXFwoXCIgKyB3aGl0ZXNwYWNlICtcclxuXHRcdFx0XCIqKGV2ZW58b2RkfCgoWystXXwpKFxcXFxkKilufClcIiArIHdoaXRlc3BhY2UgKyBcIiooPzooWystXXwpXCIgKyB3aGl0ZXNwYWNlICtcclxuXHRcdFx0XCIqKFxcXFxkKyl8KSlcIiArIHdoaXRlc3BhY2UgKyBcIipcXFxcKXwpXCIsIFwiaVwiICksXHJcblx0XHRcImJvb2xcIjogbmV3IFJlZ0V4cCggXCJeKD86XCIgKyBib29sZWFucyArIFwiKSRcIiwgXCJpXCIgKSxcclxuXHRcdC8vIEZvciB1c2UgaW4gbGlicmFyaWVzIGltcGxlbWVudGluZyAuaXMoKVxyXG5cdFx0Ly8gV2UgdXNlIHRoaXMgZm9yIFBPUyBtYXRjaGluZyBpbiBgc2VsZWN0YFxyXG5cdFx0XCJuZWVkc0NvbnRleHRcIjogbmV3IFJlZ0V4cCggXCJeXCIgKyB3aGl0ZXNwYWNlICsgXCIqWz4rfl18OihldmVufG9kZHxlcXxndHxsdHxudGh8Zmlyc3R8bGFzdCkoPzpcXFxcKFwiICtcclxuXHRcdFx0d2hpdGVzcGFjZSArIFwiKigoPzotXFxcXGQpP1xcXFxkKilcIiArIHdoaXRlc3BhY2UgKyBcIipcXFxcKXwpKD89W14tXXwkKVwiLCBcImlcIiApXHJcblx0fSxcclxuXHJcblx0cmlucHV0cyA9IC9eKD86aW5wdXR8c2VsZWN0fHRleHRhcmVhfGJ1dHRvbikkL2ksXHJcblx0cmhlYWRlciA9IC9eaFxcZCQvaSxcclxuXHJcblx0cm5hdGl2ZSA9IC9eW157XStcXHtcXHMqXFxbbmF0aXZlIFxcdy8sXHJcblxyXG5cdC8vIEVhc2lseS1wYXJzZWFibGUvcmV0cmlldmFibGUgSUQgb3IgVEFHIG9yIENMQVNTIHNlbGVjdG9yc1xyXG5cdHJxdWlja0V4cHIgPSAvXig/OiMoW1xcdy1dKyl8KFxcdyspfFxcLihbXFx3LV0rKSkkLyxcclxuXHJcblx0cnNpYmxpbmcgPSAvWyt+XS8sXHJcblx0cmVzY2FwZSA9IC8nfFxcXFwvZyxcclxuXHJcblx0Ly8gQ1NTIGVzY2FwZXMgaHR0cDovL3d3dy53My5vcmcvVFIvQ1NTMjEvc3luZGF0YS5odG1sI2VzY2FwZWQtY2hhcmFjdGVyc1xyXG5cdHJ1bmVzY2FwZSA9IG5ldyBSZWdFeHAoIFwiXFxcXFxcXFwoW1xcXFxkYS1mXXsxLDZ9XCIgKyB3aGl0ZXNwYWNlICsgXCI/fChcIiArIHdoaXRlc3BhY2UgKyBcIil8LilcIiwgXCJpZ1wiICksXHJcblx0ZnVuZXNjYXBlID0gZnVuY3Rpb24oIF8sIGVzY2FwZWQsIGVzY2FwZWRXaGl0ZXNwYWNlICkge1xyXG5cdFx0dmFyIGhpZ2ggPSBcIjB4XCIgKyBlc2NhcGVkIC0gMHgxMDAwMDtcclxuXHRcdC8vIE5hTiBtZWFucyBub24tY29kZXBvaW50XHJcblx0XHQvLyBTdXBwb3J0OiBGaXJlZm94PDI0XHJcblx0XHQvLyBXb3JrYXJvdW5kIGVycm9uZW91cyBudW1lcmljIGludGVycHJldGF0aW9uIG9mICtcIjB4XCJcclxuXHRcdHJldHVybiBoaWdoICE9PSBoaWdoIHx8IGVzY2FwZWRXaGl0ZXNwYWNlID9cclxuXHRcdFx0ZXNjYXBlZCA6XHJcblx0XHRcdGhpZ2ggPCAwID9cclxuXHRcdFx0XHQvLyBCTVAgY29kZXBvaW50XHJcblx0XHRcdFx0U3RyaW5nLmZyb21DaGFyQ29kZSggaGlnaCArIDB4MTAwMDAgKSA6XHJcblx0XHRcdFx0Ly8gU3VwcGxlbWVudGFsIFBsYW5lIGNvZGVwb2ludCAoc3Vycm9nYXRlIHBhaXIpXHJcblx0XHRcdFx0U3RyaW5nLmZyb21DaGFyQ29kZSggaGlnaCA+PiAxMCB8IDB4RDgwMCwgaGlnaCAmIDB4M0ZGIHwgMHhEQzAwICk7XHJcblx0fSxcclxuXHJcblx0Ly8gVXNlZCBmb3IgaWZyYW1lc1xyXG5cdC8vIFNlZSBzZXREb2N1bWVudCgpXHJcblx0Ly8gUmVtb3ZpbmcgdGhlIGZ1bmN0aW9uIHdyYXBwZXIgY2F1c2VzIGEgXCJQZXJtaXNzaW9uIERlbmllZFwiXHJcblx0Ly8gZXJyb3IgaW4gSUVcclxuXHR1bmxvYWRIYW5kbGVyID0gZnVuY3Rpb24oKSB7XHJcblx0XHRzZXREb2N1bWVudCgpO1xyXG5cdH07XHJcblxyXG4vLyBPcHRpbWl6ZSBmb3IgcHVzaC5hcHBseSggXywgTm9kZUxpc3QgKVxyXG50cnkge1xyXG5cdHB1c2guYXBwbHkoXHJcblx0XHQoYXJyID0gc2xpY2UuY2FsbCggcHJlZmVycmVkRG9jLmNoaWxkTm9kZXMgKSksXHJcblx0XHRwcmVmZXJyZWREb2MuY2hpbGROb2Rlc1xyXG5cdCk7XHJcblx0Ly8gU3VwcG9ydDogQW5kcm9pZDw0LjBcclxuXHQvLyBEZXRlY3Qgc2lsZW50bHkgZmFpbGluZyBwdXNoLmFwcGx5XHJcblx0YXJyWyBwcmVmZXJyZWREb2MuY2hpbGROb2Rlcy5sZW5ndGggXS5ub2RlVHlwZTtcclxufSBjYXRjaCAoIGUgKSB7XHJcblx0cHVzaCA9IHsgYXBwbHk6IGFyci5sZW5ndGggP1xyXG5cclxuXHRcdC8vIExldmVyYWdlIHNsaWNlIGlmIHBvc3NpYmxlXHJcblx0XHRmdW5jdGlvbiggdGFyZ2V0LCBlbHMgKSB7XHJcblx0XHRcdHB1c2hfbmF0aXZlLmFwcGx5KCB0YXJnZXQsIHNsaWNlLmNhbGwoZWxzKSApO1xyXG5cdFx0fSA6XHJcblxyXG5cdFx0Ly8gU3VwcG9ydDogSUU8OVxyXG5cdFx0Ly8gT3RoZXJ3aXNlIGFwcGVuZCBkaXJlY3RseVxyXG5cdFx0ZnVuY3Rpb24oIHRhcmdldCwgZWxzICkge1xyXG5cdFx0XHR2YXIgaiA9IHRhcmdldC5sZW5ndGgsXHJcblx0XHRcdFx0aSA9IDA7XHJcblx0XHRcdC8vIENhbid0IHRydXN0IE5vZGVMaXN0Lmxlbmd0aFxyXG5cdFx0XHR3aGlsZSAoICh0YXJnZXRbaisrXSA9IGVsc1tpKytdKSApIHt9XHJcblx0XHRcdHRhcmdldC5sZW5ndGggPSBqIC0gMTtcclxuXHRcdH1cclxuXHR9O1xyXG59XHJcblxyXG5mdW5jdGlvbiBTaXp6bGUoIHNlbGVjdG9yLCBjb250ZXh0LCByZXN1bHRzLCBzZWVkICkge1xyXG5cdHZhciBtYXRjaCwgZWxlbSwgbSwgbm9kZVR5cGUsXHJcblx0XHQvLyBRU0EgdmFyc1xyXG5cdFx0aSwgZ3JvdXBzLCBvbGQsIG5pZCwgbmV3Q29udGV4dCwgbmV3U2VsZWN0b3I7XHJcblxyXG5cdGlmICggKCBjb250ZXh0ID8gY29udGV4dC5vd25lckRvY3VtZW50IHx8IGNvbnRleHQgOiBwcmVmZXJyZWREb2MgKSAhPT0gZG9jdW1lbnQgKSB7XHJcblx0XHRzZXREb2N1bWVudCggY29udGV4dCApO1xyXG5cdH1cclxuXHJcblx0Y29udGV4dCA9IGNvbnRleHQgfHwgZG9jdW1lbnQ7XHJcblx0cmVzdWx0cyA9IHJlc3VsdHMgfHwgW107XHJcblx0bm9kZVR5cGUgPSBjb250ZXh0Lm5vZGVUeXBlO1xyXG5cclxuXHRpZiAoIHR5cGVvZiBzZWxlY3RvciAhPT0gXCJzdHJpbmdcIiB8fCAhc2VsZWN0b3IgfHxcclxuXHRcdG5vZGVUeXBlICE9PSAxICYmIG5vZGVUeXBlICE9PSA5ICYmIG5vZGVUeXBlICE9PSAxMSApIHtcclxuXHJcblx0XHRyZXR1cm4gcmVzdWx0cztcclxuXHR9XHJcblxyXG5cdGlmICggIXNlZWQgJiYgZG9jdW1lbnRJc0hUTUwgKSB7XHJcblxyXG5cdFx0Ly8gVHJ5IHRvIHNob3J0Y3V0IGZpbmQgb3BlcmF0aW9ucyB3aGVuIHBvc3NpYmxlIChlLmcuLCBub3QgdW5kZXIgRG9jdW1lbnRGcmFnbWVudClcclxuXHRcdGlmICggbm9kZVR5cGUgIT09IDExICYmIChtYXRjaCA9IHJxdWlja0V4cHIuZXhlYyggc2VsZWN0b3IgKSkgKSB7XHJcblx0XHRcdC8vIFNwZWVkLXVwOiBTaXp6bGUoXCIjSURcIilcclxuXHRcdFx0aWYgKCAobSA9IG1hdGNoWzFdKSApIHtcclxuXHRcdFx0XHRpZiAoIG5vZGVUeXBlID09PSA5ICkge1xyXG5cdFx0XHRcdFx0ZWxlbSA9IGNvbnRleHQuZ2V0RWxlbWVudEJ5SWQoIG0gKTtcclxuXHRcdFx0XHRcdC8vIENoZWNrIHBhcmVudE5vZGUgdG8gY2F0Y2ggd2hlbiBCbGFja2JlcnJ5IDQuNiByZXR1cm5zXHJcblx0XHRcdFx0XHQvLyBub2RlcyB0aGF0IGFyZSBubyBsb25nZXIgaW4gdGhlIGRvY3VtZW50IChqUXVlcnkgIzY5NjMpXHJcblx0XHRcdFx0XHRpZiAoIGVsZW0gJiYgZWxlbS5wYXJlbnROb2RlICkge1xyXG5cdFx0XHRcdFx0XHQvLyBIYW5kbGUgdGhlIGNhc2Ugd2hlcmUgSUUsIE9wZXJhLCBhbmQgV2Via2l0IHJldHVybiBpdGVtc1xyXG5cdFx0XHRcdFx0XHQvLyBieSBuYW1lIGluc3RlYWQgb2YgSURcclxuXHRcdFx0XHRcdFx0aWYgKCBlbGVtLmlkID09PSBtICkge1xyXG5cdFx0XHRcdFx0XHRcdHJlc3VsdHMucHVzaCggZWxlbSApO1xyXG5cdFx0XHRcdFx0XHRcdHJldHVybiByZXN1bHRzO1xyXG5cdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdFx0XHRyZXR1cm4gcmVzdWx0cztcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdFx0Ly8gQ29udGV4dCBpcyBub3QgYSBkb2N1bWVudFxyXG5cdFx0XHRcdFx0aWYgKCBjb250ZXh0Lm93bmVyRG9jdW1lbnQgJiYgKGVsZW0gPSBjb250ZXh0Lm93bmVyRG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoIG0gKSkgJiZcclxuXHRcdFx0XHRcdFx0Y29udGFpbnMoIGNvbnRleHQsIGVsZW0gKSAmJiBlbGVtLmlkID09PSBtICkge1xyXG5cdFx0XHRcdFx0XHRyZXN1bHRzLnB1c2goIGVsZW0gKTtcclxuXHRcdFx0XHRcdFx0cmV0dXJuIHJlc3VsdHM7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0Ly8gU3BlZWQtdXA6IFNpenpsZShcIlRBR1wiKVxyXG5cdFx0XHR9IGVsc2UgaWYgKCBtYXRjaFsyXSApIHtcclxuXHRcdFx0XHRwdXNoLmFwcGx5KCByZXN1bHRzLCBjb250ZXh0LmdldEVsZW1lbnRzQnlUYWdOYW1lKCBzZWxlY3RvciApICk7XHJcblx0XHRcdFx0cmV0dXJuIHJlc3VsdHM7XHJcblxyXG5cdFx0XHQvLyBTcGVlZC11cDogU2l6emxlKFwiLkNMQVNTXCIpXHJcblx0XHRcdH0gZWxzZSBpZiAoIChtID0gbWF0Y2hbM10pICYmIHN1cHBvcnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSApIHtcclxuXHRcdFx0XHRwdXNoLmFwcGx5KCByZXN1bHRzLCBjb250ZXh0LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoIG0gKSApO1xyXG5cdFx0XHRcdHJldHVybiByZXN1bHRzO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gUVNBIHBhdGhcclxuXHRcdGlmICggc3VwcG9ydC5xc2EgJiYgKCFyYnVnZ3lRU0EgfHwgIXJidWdneVFTQS50ZXN0KCBzZWxlY3RvciApKSApIHtcclxuXHRcdFx0bmlkID0gb2xkID0gZXhwYW5kbztcclxuXHRcdFx0bmV3Q29udGV4dCA9IGNvbnRleHQ7XHJcblx0XHRcdG5ld1NlbGVjdG9yID0gbm9kZVR5cGUgIT09IDEgJiYgc2VsZWN0b3I7XHJcblxyXG5cdFx0XHQvLyBxU0Egd29ya3Mgc3RyYW5nZWx5IG9uIEVsZW1lbnQtcm9vdGVkIHF1ZXJpZXNcclxuXHRcdFx0Ly8gV2UgY2FuIHdvcmsgYXJvdW5kIHRoaXMgYnkgc3BlY2lmeWluZyBhbiBleHRyYSBJRCBvbiB0aGUgcm9vdFxyXG5cdFx0XHQvLyBhbmQgd29ya2luZyB1cCBmcm9tIHRoZXJlIChUaGFua3MgdG8gQW5kcmV3IER1cG9udCBmb3IgdGhlIHRlY2huaXF1ZSlcclxuXHRcdFx0Ly8gSUUgOCBkb2Vzbid0IHdvcmsgb24gb2JqZWN0IGVsZW1lbnRzXHJcblx0XHRcdGlmICggbm9kZVR5cGUgPT09IDEgJiYgY29udGV4dC5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpICE9PSBcIm9iamVjdFwiICkge1xyXG5cdFx0XHRcdGdyb3VwcyA9IHRva2VuaXplKCBzZWxlY3RvciApO1xyXG5cclxuXHRcdFx0XHRpZiAoIChvbGQgPSBjb250ZXh0LmdldEF0dHJpYnV0ZShcImlkXCIpKSApIHtcclxuXHRcdFx0XHRcdG5pZCA9IG9sZC5yZXBsYWNlKCByZXNjYXBlLCBcIlxcXFwkJlwiICk7XHJcblx0XHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRcdGNvbnRleHQuc2V0QXR0cmlidXRlKCBcImlkXCIsIG5pZCApO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHRuaWQgPSBcIltpZD0nXCIgKyBuaWQgKyBcIiddIFwiO1xyXG5cclxuXHRcdFx0XHRpID0gZ3JvdXBzLmxlbmd0aDtcclxuXHRcdFx0XHR3aGlsZSAoIGktLSApIHtcclxuXHRcdFx0XHRcdGdyb3Vwc1tpXSA9IG5pZCArIHRvU2VsZWN0b3IoIGdyb3Vwc1tpXSApO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHRuZXdDb250ZXh0ID0gcnNpYmxpbmcudGVzdCggc2VsZWN0b3IgKSAmJiB0ZXN0Q29udGV4dCggY29udGV4dC5wYXJlbnROb2RlICkgfHwgY29udGV4dDtcclxuXHRcdFx0XHRuZXdTZWxlY3RvciA9IGdyb3Vwcy5qb2luKFwiLFwiKTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0aWYgKCBuZXdTZWxlY3RvciApIHtcclxuXHRcdFx0XHR0cnkge1xyXG5cdFx0XHRcdFx0cHVzaC5hcHBseSggcmVzdWx0cyxcclxuXHRcdFx0XHRcdFx0bmV3Q29udGV4dC5xdWVyeVNlbGVjdG9yQWxsKCBuZXdTZWxlY3RvciApXHJcblx0XHRcdFx0XHQpO1xyXG5cdFx0XHRcdFx0cmV0dXJuIHJlc3VsdHM7XHJcblx0XHRcdFx0fSBjYXRjaChxc2FFcnJvcikge1xyXG5cdFx0XHRcdH0gZmluYWxseSB7XHJcblx0XHRcdFx0XHRpZiAoICFvbGQgKSB7XHJcblx0XHRcdFx0XHRcdGNvbnRleHQucmVtb3ZlQXR0cmlidXRlKFwiaWRcIik7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0fVxyXG5cclxuXHQvLyBBbGwgb3RoZXJzXHJcblx0cmV0dXJuIHNlbGVjdCggc2VsZWN0b3IucmVwbGFjZSggcnRyaW0sIFwiJDFcIiApLCBjb250ZXh0LCByZXN1bHRzLCBzZWVkICk7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBDcmVhdGUga2V5LXZhbHVlIGNhY2hlcyBvZiBsaW1pdGVkIHNpemVcclxuICogQHJldHVybnMge0Z1bmN0aW9uKHN0cmluZywgT2JqZWN0KX0gUmV0dXJucyB0aGUgT2JqZWN0IGRhdGEgYWZ0ZXIgc3RvcmluZyBpdCBvbiBpdHNlbGYgd2l0aFxyXG4gKlx0cHJvcGVydHkgbmFtZSB0aGUgKHNwYWNlLXN1ZmZpeGVkKSBzdHJpbmcgYW5kIChpZiB0aGUgY2FjaGUgaXMgbGFyZ2VyIHRoYW4gRXhwci5jYWNoZUxlbmd0aClcclxuICpcdGRlbGV0aW5nIHRoZSBvbGRlc3QgZW50cnlcclxuICovXHJcbmZ1bmN0aW9uIGNyZWF0ZUNhY2hlKCkge1xyXG5cdHZhciBrZXlzID0gW107XHJcblxyXG5cdGZ1bmN0aW9uIGNhY2hlKCBrZXksIHZhbHVlICkge1xyXG5cdFx0Ly8gVXNlIChrZXkgKyBcIiBcIikgdG8gYXZvaWQgY29sbGlzaW9uIHdpdGggbmF0aXZlIHByb3RvdHlwZSBwcm9wZXJ0aWVzIChzZWUgSXNzdWUgIzE1NylcclxuXHRcdGlmICgga2V5cy5wdXNoKCBrZXkgKyBcIiBcIiApID4gRXhwci5jYWNoZUxlbmd0aCApIHtcclxuXHRcdFx0Ly8gT25seSBrZWVwIHRoZSBtb3N0IHJlY2VudCBlbnRyaWVzXHJcblx0XHRcdGRlbGV0ZSBjYWNoZVsga2V5cy5zaGlmdCgpIF07XHJcblx0XHR9XHJcblx0XHRyZXR1cm4gKGNhY2hlWyBrZXkgKyBcIiBcIiBdID0gdmFsdWUpO1xyXG5cdH1cclxuXHRyZXR1cm4gY2FjaGU7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBNYXJrIGEgZnVuY3Rpb24gZm9yIHNwZWNpYWwgdXNlIGJ5IFNpenpsZVxyXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmbiBUaGUgZnVuY3Rpb24gdG8gbWFya1xyXG4gKi9cclxuZnVuY3Rpb24gbWFya0Z1bmN0aW9uKCBmbiApIHtcclxuXHRmblsgZXhwYW5kbyBdID0gdHJ1ZTtcclxuXHRyZXR1cm4gZm47XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBTdXBwb3J0IHRlc3RpbmcgdXNpbmcgYW4gZWxlbWVudFxyXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmbiBQYXNzZWQgdGhlIGNyZWF0ZWQgZGl2IGFuZCBleHBlY3RzIGEgYm9vbGVhbiByZXN1bHRcclxuICovXHJcbmZ1bmN0aW9uIGFzc2VydCggZm4gKSB7XHJcblx0dmFyIGRpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XHJcblxyXG5cdHRyeSB7XHJcblx0XHRyZXR1cm4gISFmbiggZGl2ICk7XHJcblx0fSBjYXRjaCAoZSkge1xyXG5cdFx0cmV0dXJuIGZhbHNlO1xyXG5cdH0gZmluYWxseSB7XHJcblx0XHQvLyBSZW1vdmUgZnJvbSBpdHMgcGFyZW50IGJ5IGRlZmF1bHRcclxuXHRcdGlmICggZGl2LnBhcmVudE5vZGUgKSB7XHJcblx0XHRcdGRpdi5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKCBkaXYgKTtcclxuXHRcdH1cclxuXHRcdC8vIHJlbGVhc2UgbWVtb3J5IGluIElFXHJcblx0XHRkaXYgPSBudWxsO1xyXG5cdH1cclxufVxyXG5cclxuLyoqXHJcbiAqIEFkZHMgdGhlIHNhbWUgaGFuZGxlciBmb3IgYWxsIG9mIHRoZSBzcGVjaWZpZWQgYXR0cnNcclxuICogQHBhcmFtIHtTdHJpbmd9IGF0dHJzIFBpcGUtc2VwYXJhdGVkIGxpc3Qgb2YgYXR0cmlidXRlc1xyXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBoYW5kbGVyIFRoZSBtZXRob2QgdGhhdCB3aWxsIGJlIGFwcGxpZWRcclxuICovXHJcbmZ1bmN0aW9uIGFkZEhhbmRsZSggYXR0cnMsIGhhbmRsZXIgKSB7XHJcblx0dmFyIGFyciA9IGF0dHJzLnNwbGl0KFwifFwiKSxcclxuXHRcdGkgPSBhdHRycy5sZW5ndGg7XHJcblxyXG5cdHdoaWxlICggaS0tICkge1xyXG5cdFx0RXhwci5hdHRySGFuZGxlWyBhcnJbaV0gXSA9IGhhbmRsZXI7XHJcblx0fVxyXG59XHJcblxyXG4vKipcclxuICogQ2hlY2tzIGRvY3VtZW50IG9yZGVyIG9mIHR3byBzaWJsaW5nc1xyXG4gKiBAcGFyYW0ge0VsZW1lbnR9IGFcclxuICogQHBhcmFtIHtFbGVtZW50fSBiXHJcbiAqIEByZXR1cm5zIHtOdW1iZXJ9IFJldHVybnMgbGVzcyB0aGFuIDAgaWYgYSBwcmVjZWRlcyBiLCBncmVhdGVyIHRoYW4gMCBpZiBhIGZvbGxvd3MgYlxyXG4gKi9cclxuZnVuY3Rpb24gc2libGluZ0NoZWNrKCBhLCBiICkge1xyXG5cdHZhciBjdXIgPSBiICYmIGEsXHJcblx0XHRkaWZmID0gY3VyICYmIGEubm9kZVR5cGUgPT09IDEgJiYgYi5ub2RlVHlwZSA9PT0gMSAmJlxyXG5cdFx0XHQoIH5iLnNvdXJjZUluZGV4IHx8IE1BWF9ORUdBVElWRSApIC1cclxuXHRcdFx0KCB+YS5zb3VyY2VJbmRleCB8fCBNQVhfTkVHQVRJVkUgKTtcclxuXHJcblx0Ly8gVXNlIElFIHNvdXJjZUluZGV4IGlmIGF2YWlsYWJsZSBvbiBib3RoIG5vZGVzXHJcblx0aWYgKCBkaWZmICkge1xyXG5cdFx0cmV0dXJuIGRpZmY7XHJcblx0fVxyXG5cclxuXHQvLyBDaGVjayBpZiBiIGZvbGxvd3MgYVxyXG5cdGlmICggY3VyICkge1xyXG5cdFx0d2hpbGUgKCAoY3VyID0gY3VyLm5leHRTaWJsaW5nKSApIHtcclxuXHRcdFx0aWYgKCBjdXIgPT09IGIgKSB7XHJcblx0XHRcdFx0cmV0dXJuIC0xO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0fVxyXG5cclxuXHRyZXR1cm4gYSA/IDEgOiAtMTtcclxufVxyXG5cclxuLyoqXHJcbiAqIFJldHVybnMgYSBmdW5jdGlvbiB0byB1c2UgaW4gcHNldWRvcyBmb3IgaW5wdXQgdHlwZXNcclxuICogQHBhcmFtIHtTdHJpbmd9IHR5cGVcclxuICovXHJcbmZ1bmN0aW9uIGNyZWF0ZUlucHV0UHNldWRvKCB0eXBlICkge1xyXG5cdHJldHVybiBmdW5jdGlvbiggZWxlbSApIHtcclxuXHRcdHZhciBuYW1lID0gZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO1xyXG5cdFx0cmV0dXJuIG5hbWUgPT09IFwiaW5wdXRcIiAmJiBlbGVtLnR5cGUgPT09IHR5cGU7XHJcblx0fTtcclxufVxyXG5cclxuLyoqXHJcbiAqIFJldHVybnMgYSBmdW5jdGlvbiB0byB1c2UgaW4gcHNldWRvcyBmb3IgYnV0dG9uc1xyXG4gKiBAcGFyYW0ge1N0cmluZ30gdHlwZVxyXG4gKi9cclxuZnVuY3Rpb24gY3JlYXRlQnV0dG9uUHNldWRvKCB0eXBlICkge1xyXG5cdHJldHVybiBmdW5jdGlvbiggZWxlbSApIHtcclxuXHRcdHZhciBuYW1lID0gZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO1xyXG5cdFx0cmV0dXJuIChuYW1lID09PSBcImlucHV0XCIgfHwgbmFtZSA9PT0gXCJidXR0b25cIikgJiYgZWxlbS50eXBlID09PSB0eXBlO1xyXG5cdH07XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBSZXR1cm5zIGEgZnVuY3Rpb24gdG8gdXNlIGluIHBzZXVkb3MgZm9yIHBvc2l0aW9uYWxzXHJcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuXHJcbiAqL1xyXG5mdW5jdGlvbiBjcmVhdGVQb3NpdGlvbmFsUHNldWRvKCBmbiApIHtcclxuXHRyZXR1cm4gbWFya0Z1bmN0aW9uKGZ1bmN0aW9uKCBhcmd1bWVudCApIHtcclxuXHRcdGFyZ3VtZW50ID0gK2FyZ3VtZW50O1xyXG5cdFx0cmV0dXJuIG1hcmtGdW5jdGlvbihmdW5jdGlvbiggc2VlZCwgbWF0Y2hlcyApIHtcclxuXHRcdFx0dmFyIGosXHJcblx0XHRcdFx0bWF0Y2hJbmRleGVzID0gZm4oIFtdLCBzZWVkLmxlbmd0aCwgYXJndW1lbnQgKSxcclxuXHRcdFx0XHRpID0gbWF0Y2hJbmRleGVzLmxlbmd0aDtcclxuXHJcblx0XHRcdC8vIE1hdGNoIGVsZW1lbnRzIGZvdW5kIGF0IHRoZSBzcGVjaWZpZWQgaW5kZXhlc1xyXG5cdFx0XHR3aGlsZSAoIGktLSApIHtcclxuXHRcdFx0XHRpZiAoIHNlZWRbIChqID0gbWF0Y2hJbmRleGVzW2ldKSBdICkge1xyXG5cdFx0XHRcdFx0c2VlZFtqXSA9ICEobWF0Y2hlc1tqXSA9IHNlZWRbal0pO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0fSk7XHJcblx0fSk7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBDaGVja3MgYSBub2RlIGZvciB2YWxpZGl0eSBhcyBhIFNpenpsZSBjb250ZXh0XHJcbiAqIEBwYXJhbSB7RWxlbWVudHxPYmplY3Q9fSBjb250ZXh0XHJcbiAqIEByZXR1cm5zIHtFbGVtZW50fE9iamVjdHxCb29sZWFufSBUaGUgaW5wdXQgbm9kZSBpZiBhY2NlcHRhYmxlLCBvdGhlcndpc2UgYSBmYWxzeSB2YWx1ZVxyXG4gKi9cclxuZnVuY3Rpb24gdGVzdENvbnRleHQoIGNvbnRleHQgKSB7XHJcblx0cmV0dXJuIGNvbnRleHQgJiYgdHlwZW9mIGNvbnRleHQuZ2V0RWxlbWVudHNCeVRhZ05hbWUgIT09IFwidW5kZWZpbmVkXCIgJiYgY29udGV4dDtcclxufVxyXG5cclxuLy8gRXhwb3NlIHN1cHBvcnQgdmFycyBmb3IgY29udmVuaWVuY2Vcclxuc3VwcG9ydCA9IFNpenpsZS5zdXBwb3J0ID0ge307XHJcblxyXG4vKipcclxuICogRGV0ZWN0cyBYTUwgbm9kZXNcclxuICogQHBhcmFtIHtFbGVtZW50fE9iamVjdH0gZWxlbSBBbiBlbGVtZW50IG9yIGEgZG9jdW1lbnRcclxuICogQHJldHVybnMge0Jvb2xlYW59IFRydWUgaWZmIGVsZW0gaXMgYSBub24tSFRNTCBYTUwgbm9kZVxyXG4gKi9cclxuaXNYTUwgPSBTaXp6bGUuaXNYTUwgPSBmdW5jdGlvbiggZWxlbSApIHtcclxuXHQvLyBkb2N1bWVudEVsZW1lbnQgaXMgdmVyaWZpZWQgZm9yIGNhc2VzIHdoZXJlIGl0IGRvZXNuJ3QgeWV0IGV4aXN0XHJcblx0Ly8gKHN1Y2ggYXMgbG9hZGluZyBpZnJhbWVzIGluIElFIC0gIzQ4MzMpXHJcblx0dmFyIGRvY3VtZW50RWxlbWVudCA9IGVsZW0gJiYgKGVsZW0ub3duZXJEb2N1bWVudCB8fCBlbGVtKS5kb2N1bWVudEVsZW1lbnQ7XHJcblx0cmV0dXJuIGRvY3VtZW50RWxlbWVudCA/IGRvY3VtZW50RWxlbWVudC5ub2RlTmFtZSAhPT0gXCJIVE1MXCIgOiBmYWxzZTtcclxufTtcclxuXHJcbi8qKlxyXG4gKiBTZXRzIGRvY3VtZW50LXJlbGF0ZWQgdmFyaWFibGVzIG9uY2UgYmFzZWQgb24gdGhlIGN1cnJlbnQgZG9jdW1lbnRcclxuICogQHBhcmFtIHtFbGVtZW50fE9iamVjdH0gW2RvY10gQW4gZWxlbWVudCBvciBkb2N1bWVudCBvYmplY3QgdG8gdXNlIHRvIHNldCB0aGUgZG9jdW1lbnRcclxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgY3VycmVudCBkb2N1bWVudFxyXG4gKi9cclxuc2V0RG9jdW1lbnQgPSBTaXp6bGUuc2V0RG9jdW1lbnQgPSBmdW5jdGlvbiggbm9kZSApIHtcclxuXHR2YXIgaGFzQ29tcGFyZSwgcGFyZW50LFxyXG5cdFx0ZG9jID0gbm9kZSA/IG5vZGUub3duZXJEb2N1bWVudCB8fCBub2RlIDogcHJlZmVycmVkRG9jO1xyXG5cclxuXHQvLyBJZiBubyBkb2N1bWVudCBhbmQgZG9jdW1lbnRFbGVtZW50IGlzIGF2YWlsYWJsZSwgcmV0dXJuXHJcblx0aWYgKCBkb2MgPT09IGRvY3VtZW50IHx8IGRvYy5ub2RlVHlwZSAhPT0gOSB8fCAhZG9jLmRvY3VtZW50RWxlbWVudCApIHtcclxuXHRcdHJldHVybiBkb2N1bWVudDtcclxuXHR9XHJcblxyXG5cdC8vIFNldCBvdXIgZG9jdW1lbnRcclxuXHRkb2N1bWVudCA9IGRvYztcclxuXHRkb2NFbGVtID0gZG9jLmRvY3VtZW50RWxlbWVudDtcclxuXHRwYXJlbnQgPSBkb2MuZGVmYXVsdFZpZXc7XHJcblxyXG5cdC8vIFN1cHBvcnQ6IElFPjhcclxuXHQvLyBJZiBpZnJhbWUgZG9jdW1lbnQgaXMgYXNzaWduZWQgdG8gXCJkb2N1bWVudFwiIHZhcmlhYmxlIGFuZCBpZiBpZnJhbWUgaGFzIGJlZW4gcmVsb2FkZWQsXHJcblx0Ly8gSUUgd2lsbCB0aHJvdyBcInBlcm1pc3Npb24gZGVuaWVkXCIgZXJyb3Igd2hlbiBhY2Nlc3NpbmcgXCJkb2N1bWVudFwiIHZhcmlhYmxlLCBzZWUgalF1ZXJ5ICMxMzkzNlxyXG5cdC8vIElFNi04IGRvIG5vdCBzdXBwb3J0IHRoZSBkZWZhdWx0VmlldyBwcm9wZXJ0eSBzbyBwYXJlbnQgd2lsbCBiZSB1bmRlZmluZWRcclxuXHRpZiAoIHBhcmVudCAmJiBwYXJlbnQgIT09IHBhcmVudC50b3AgKSB7XHJcblx0XHQvLyBJRTExIGRvZXMgbm90IGhhdmUgYXR0YWNoRXZlbnQsIHNvIGFsbCBtdXN0IHN1ZmZlclxyXG5cdFx0aWYgKCBwYXJlbnQuYWRkRXZlbnRMaXN0ZW5lciApIHtcclxuXHRcdFx0cGFyZW50LmFkZEV2ZW50TGlzdGVuZXIoIFwidW5sb2FkXCIsIHVubG9hZEhhbmRsZXIsIGZhbHNlICk7XHJcblx0XHR9IGVsc2UgaWYgKCBwYXJlbnQuYXR0YWNoRXZlbnQgKSB7XHJcblx0XHRcdHBhcmVudC5hdHRhY2hFdmVudCggXCJvbnVubG9hZFwiLCB1bmxvYWRIYW5kbGVyICk7XHJcblx0XHR9XHJcblx0fVxyXG5cclxuXHQvKiBTdXBwb3J0IHRlc3RzXHJcblx0LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xyXG5cdGRvY3VtZW50SXNIVE1MID0gIWlzWE1MKCBkb2MgKTtcclxuXHJcblx0LyogQXR0cmlidXRlc1xyXG5cdC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gKi9cclxuXHJcblx0Ly8gU3VwcG9ydDogSUU8OFxyXG5cdC8vIFZlcmlmeSB0aGF0IGdldEF0dHJpYnV0ZSByZWFsbHkgcmV0dXJucyBhdHRyaWJ1dGVzIGFuZCBub3QgcHJvcGVydGllc1xyXG5cdC8vIChleGNlcHRpbmcgSUU4IGJvb2xlYW5zKVxyXG5cdHN1cHBvcnQuYXR0cmlidXRlcyA9IGFzc2VydChmdW5jdGlvbiggZGl2ICkge1xyXG5cdFx0ZGl2LmNsYXNzTmFtZSA9IFwiaVwiO1xyXG5cdFx0cmV0dXJuICFkaXYuZ2V0QXR0cmlidXRlKFwiY2xhc3NOYW1lXCIpO1xyXG5cdH0pO1xyXG5cclxuXHQvKiBnZXRFbGVtZW50KHMpQnkqXHJcblx0LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xyXG5cclxuXHQvLyBDaGVjayBpZiBnZXRFbGVtZW50c0J5VGFnTmFtZShcIipcIikgcmV0dXJucyBvbmx5IGVsZW1lbnRzXHJcblx0c3VwcG9ydC5nZXRFbGVtZW50c0J5VGFnTmFtZSA9IGFzc2VydChmdW5jdGlvbiggZGl2ICkge1xyXG5cdFx0ZGl2LmFwcGVuZENoaWxkKCBkb2MuY3JlYXRlQ29tbWVudChcIlwiKSApO1xyXG5cdFx0cmV0dXJuICFkaXYuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCIqXCIpLmxlbmd0aDtcclxuXHR9KTtcclxuXHJcblx0Ly8gU3VwcG9ydDogSUU8OVxyXG5cdHN1cHBvcnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSA9IHJuYXRpdmUudGVzdCggZG9jLmdldEVsZW1lbnRzQnlDbGFzc05hbWUgKTtcclxuXHJcblx0Ly8gU3VwcG9ydDogSUU8MTBcclxuXHQvLyBDaGVjayBpZiBnZXRFbGVtZW50QnlJZCByZXR1cm5zIGVsZW1lbnRzIGJ5IG5hbWVcclxuXHQvLyBUaGUgYnJva2VuIGdldEVsZW1lbnRCeUlkIG1ldGhvZHMgZG9uJ3QgcGljayB1cCBwcm9ncmFtYXRpY2FsbHktc2V0IG5hbWVzLFxyXG5cdC8vIHNvIHVzZSBhIHJvdW5kYWJvdXQgZ2V0RWxlbWVudHNCeU5hbWUgdGVzdFxyXG5cdHN1cHBvcnQuZ2V0QnlJZCA9IGFzc2VydChmdW5jdGlvbiggZGl2ICkge1xyXG5cdFx0ZG9jRWxlbS5hcHBlbmRDaGlsZCggZGl2ICkuaWQgPSBleHBhbmRvO1xyXG5cdFx0cmV0dXJuICFkb2MuZ2V0RWxlbWVudHNCeU5hbWUgfHwgIWRvYy5nZXRFbGVtZW50c0J5TmFtZSggZXhwYW5kbyApLmxlbmd0aDtcclxuXHR9KTtcclxuXHJcblx0Ly8gSUQgZmluZCBhbmQgZmlsdGVyXHJcblx0aWYgKCBzdXBwb3J0LmdldEJ5SWQgKSB7XHJcblx0XHRFeHByLmZpbmRbXCJJRFwiXSA9IGZ1bmN0aW9uKCBpZCwgY29udGV4dCApIHtcclxuXHRcdFx0aWYgKCB0eXBlb2YgY29udGV4dC5nZXRFbGVtZW50QnlJZCAhPT0gXCJ1bmRlZmluZWRcIiAmJiBkb2N1bWVudElzSFRNTCApIHtcclxuXHRcdFx0XHR2YXIgbSA9IGNvbnRleHQuZ2V0RWxlbWVudEJ5SWQoIGlkICk7XHJcblx0XHRcdFx0Ly8gQ2hlY2sgcGFyZW50Tm9kZSB0byBjYXRjaCB3aGVuIEJsYWNrYmVycnkgNC42IHJldHVybnNcclxuXHRcdFx0XHQvLyBub2RlcyB0aGF0IGFyZSBubyBsb25nZXIgaW4gdGhlIGRvY3VtZW50ICM2OTYzXHJcblx0XHRcdFx0cmV0dXJuIG0gJiYgbS5wYXJlbnROb2RlID8gWyBtIF0gOiBbXTtcclxuXHRcdFx0fVxyXG5cdFx0fTtcclxuXHRcdEV4cHIuZmlsdGVyW1wiSURcIl0gPSBmdW5jdGlvbiggaWQgKSB7XHJcblx0XHRcdHZhciBhdHRySWQgPSBpZC5yZXBsYWNlKCBydW5lc2NhcGUsIGZ1bmVzY2FwZSApO1xyXG5cdFx0XHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XHJcblx0XHRcdFx0cmV0dXJuIGVsZW0uZ2V0QXR0cmlidXRlKFwiaWRcIikgPT09IGF0dHJJZDtcclxuXHRcdFx0fTtcclxuXHRcdH07XHJcblx0fSBlbHNlIHtcclxuXHRcdC8vIFN1cHBvcnQ6IElFNi83XHJcblx0XHQvLyBnZXRFbGVtZW50QnlJZCBpcyBub3QgcmVsaWFibGUgYXMgYSBmaW5kIHNob3J0Y3V0XHJcblx0XHRkZWxldGUgRXhwci5maW5kW1wiSURcIl07XHJcblxyXG5cdFx0RXhwci5maWx0ZXJbXCJJRFwiXSA9ICBmdW5jdGlvbiggaWQgKSB7XHJcblx0XHRcdHZhciBhdHRySWQgPSBpZC5yZXBsYWNlKCBydW5lc2NhcGUsIGZ1bmVzY2FwZSApO1xyXG5cdFx0XHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XHJcblx0XHRcdFx0dmFyIG5vZGUgPSB0eXBlb2YgZWxlbS5nZXRBdHRyaWJ1dGVOb2RlICE9PSBcInVuZGVmaW5lZFwiICYmIGVsZW0uZ2V0QXR0cmlidXRlTm9kZShcImlkXCIpO1xyXG5cdFx0XHRcdHJldHVybiBub2RlICYmIG5vZGUudmFsdWUgPT09IGF0dHJJZDtcclxuXHRcdFx0fTtcclxuXHRcdH07XHJcblx0fVxyXG5cclxuXHQvLyBUYWdcclxuXHRFeHByLmZpbmRbXCJUQUdcIl0gPSBzdXBwb3J0LmdldEVsZW1lbnRzQnlUYWdOYW1lID9cclxuXHRcdGZ1bmN0aW9uKCB0YWcsIGNvbnRleHQgKSB7XHJcblx0XHRcdGlmICggdHlwZW9mIGNvbnRleHQuZ2V0RWxlbWVudHNCeVRhZ05hbWUgIT09IFwidW5kZWZpbmVkXCIgKSB7XHJcblx0XHRcdFx0cmV0dXJuIGNvbnRleHQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoIHRhZyApO1xyXG5cclxuXHRcdFx0Ly8gRG9jdW1lbnRGcmFnbWVudCBub2RlcyBkb24ndCBoYXZlIGdFQlROXHJcblx0XHRcdH0gZWxzZSBpZiAoIHN1cHBvcnQucXNhICkge1xyXG5cdFx0XHRcdHJldHVybiBjb250ZXh0LnF1ZXJ5U2VsZWN0b3JBbGwoIHRhZyApO1xyXG5cdFx0XHR9XHJcblx0XHR9IDpcclxuXHJcblx0XHRmdW5jdGlvbiggdGFnLCBjb250ZXh0ICkge1xyXG5cdFx0XHR2YXIgZWxlbSxcclxuXHRcdFx0XHR0bXAgPSBbXSxcclxuXHRcdFx0XHRpID0gMCxcclxuXHRcdFx0XHQvLyBCeSBoYXBweSBjb2luY2lkZW5jZSwgYSAoYnJva2VuKSBnRUJUTiBhcHBlYXJzIG9uIERvY3VtZW50RnJhZ21lbnQgbm9kZXMgdG9vXHJcblx0XHRcdFx0cmVzdWx0cyA9IGNvbnRleHQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoIHRhZyApO1xyXG5cclxuXHRcdFx0Ly8gRmlsdGVyIG91dCBwb3NzaWJsZSBjb21tZW50c1xyXG5cdFx0XHRpZiAoIHRhZyA9PT0gXCIqXCIgKSB7XHJcblx0XHRcdFx0d2hpbGUgKCAoZWxlbSA9IHJlc3VsdHNbaSsrXSkgKSB7XHJcblx0XHRcdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7XHJcblx0XHRcdFx0XHRcdHRtcC5wdXNoKCBlbGVtICk7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRyZXR1cm4gdG1wO1xyXG5cdFx0XHR9XHJcblx0XHRcdHJldHVybiByZXN1bHRzO1xyXG5cdFx0fTtcclxuXHJcblx0Ly8gQ2xhc3NcclxuXHRFeHByLmZpbmRbXCJDTEFTU1wiXSA9IHN1cHBvcnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSAmJiBmdW5jdGlvbiggY2xhc3NOYW1lLCBjb250ZXh0ICkge1xyXG5cdFx0aWYgKCBkb2N1bWVudElzSFRNTCApIHtcclxuXHRcdFx0cmV0dXJuIGNvbnRleHQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSggY2xhc3NOYW1lICk7XHJcblx0XHR9XHJcblx0fTtcclxuXHJcblx0LyogUVNBL21hdGNoZXNTZWxlY3RvclxyXG5cdC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gKi9cclxuXHJcblx0Ly8gUVNBIGFuZCBtYXRjaGVzU2VsZWN0b3Igc3VwcG9ydFxyXG5cclxuXHQvLyBtYXRjaGVzU2VsZWN0b3IoOmFjdGl2ZSkgcmVwb3J0cyBmYWxzZSB3aGVuIHRydWUgKElFOS9PcGVyYSAxMS41KVxyXG5cdHJidWdneU1hdGNoZXMgPSBbXTtcclxuXHJcblx0Ly8gcVNhKDpmb2N1cykgcmVwb3J0cyBmYWxzZSB3aGVuIHRydWUgKENocm9tZSAyMSlcclxuXHQvLyBXZSBhbGxvdyB0aGlzIGJlY2F1c2Ugb2YgYSBidWcgaW4gSUU4LzkgdGhhdCB0aHJvd3MgYW4gZXJyb3JcclxuXHQvLyB3aGVuZXZlciBgZG9jdW1lbnQuYWN0aXZlRWxlbWVudGAgaXMgYWNjZXNzZWQgb24gYW4gaWZyYW1lXHJcblx0Ly8gU28sIHdlIGFsbG93IDpmb2N1cyB0byBwYXNzIHRocm91Z2ggUVNBIGFsbCB0aGUgdGltZSB0byBhdm9pZCB0aGUgSUUgZXJyb3JcclxuXHQvLyBTZWUgaHR0cDovL2J1Z3MuanF1ZXJ5LmNvbS90aWNrZXQvMTMzNzhcclxuXHRyYnVnZ3lRU0EgPSBbXTtcclxuXHJcblx0aWYgKCAoc3VwcG9ydC5xc2EgPSBybmF0aXZlLnRlc3QoIGRvYy5xdWVyeVNlbGVjdG9yQWxsICkpICkge1xyXG5cdFx0Ly8gQnVpbGQgUVNBIHJlZ2V4XHJcblx0XHQvLyBSZWdleCBzdHJhdGVneSBhZG9wdGVkIGZyb20gRGllZ28gUGVyaW5pXHJcblx0XHRhc3NlcnQoZnVuY3Rpb24oIGRpdiApIHtcclxuXHRcdFx0Ly8gU2VsZWN0IGlzIHNldCB0byBlbXB0eSBzdHJpbmcgb24gcHVycG9zZVxyXG5cdFx0XHQvLyBUaGlzIGlzIHRvIHRlc3QgSUUncyB0cmVhdG1lbnQgb2Ygbm90IGV4cGxpY2l0bHlcclxuXHRcdFx0Ly8gc2V0dGluZyBhIGJvb2xlYW4gY29udGVudCBhdHRyaWJ1dGUsXHJcblx0XHRcdC8vIHNpbmNlIGl0cyBwcmVzZW5jZSBzaG91bGQgYmUgZW5vdWdoXHJcblx0XHRcdC8vIGh0dHA6Ly9idWdzLmpxdWVyeS5jb20vdGlja2V0LzEyMzU5XHJcblx0XHRcdGRvY0VsZW0uYXBwZW5kQ2hpbGQoIGRpdiApLmlubmVySFRNTCA9IFwiPGEgaWQ9J1wiICsgZXhwYW5kbyArIFwiJz48L2E+XCIgK1xyXG5cdFx0XHRcdFwiPHNlbGVjdCBpZD0nXCIgKyBleHBhbmRvICsgXCItXFxmXScgbXNhbGxvd2NhcHR1cmU9Jyc+XCIgK1xyXG5cdFx0XHRcdFwiPG9wdGlvbiBzZWxlY3RlZD0nJz48L29wdGlvbj48L3NlbGVjdD5cIjtcclxuXHJcblx0XHRcdC8vIFN1cHBvcnQ6IElFOCwgT3BlcmEgMTEtMTIuMTZcclxuXHRcdFx0Ly8gTm90aGluZyBzaG91bGQgYmUgc2VsZWN0ZWQgd2hlbiBlbXB0eSBzdHJpbmdzIGZvbGxvdyBePSBvciAkPSBvciAqPVxyXG5cdFx0XHQvLyBUaGUgdGVzdCBhdHRyaWJ1dGUgbXVzdCBiZSB1bmtub3duIGluIE9wZXJhIGJ1dCBcInNhZmVcIiBmb3IgV2luUlRcclxuXHRcdFx0Ly8gaHR0cDovL21zZG4ubWljcm9zb2Z0LmNvbS9lbi11cy9saWJyYXJ5L2llL2hoNDY1Mzg4LmFzcHgjYXR0cmlidXRlX3NlY3Rpb25cclxuXHRcdFx0aWYgKCBkaXYucXVlcnlTZWxlY3RvckFsbChcIlttc2FsbG93Y2FwdHVyZV49JyddXCIpLmxlbmd0aCApIHtcclxuXHRcdFx0XHRyYnVnZ3lRU0EucHVzaCggXCJbKl4kXT1cIiArIHdoaXRlc3BhY2UgKyBcIiooPzonJ3xcXFwiXFxcIilcIiApO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHQvLyBTdXBwb3J0OiBJRThcclxuXHRcdFx0Ly8gQm9vbGVhbiBhdHRyaWJ1dGVzIGFuZCBcInZhbHVlXCIgYXJlIG5vdCB0cmVhdGVkIGNvcnJlY3RseVxyXG5cdFx0XHRpZiAoICFkaXYucXVlcnlTZWxlY3RvckFsbChcIltzZWxlY3RlZF1cIikubGVuZ3RoICkge1xyXG5cdFx0XHRcdHJidWdneVFTQS5wdXNoKCBcIlxcXFxbXCIgKyB3aGl0ZXNwYWNlICsgXCIqKD86dmFsdWV8XCIgKyBib29sZWFucyArIFwiKVwiICk7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdC8vIFN1cHBvcnQ6IENocm9tZTwyOSwgQW5kcm9pZDw0LjIrLCBTYWZhcmk8Ny4wKywgaU9TPDcuMCssIFBoYW50b21KUzwxLjkuNytcclxuXHRcdFx0aWYgKCAhZGl2LnF1ZXJ5U2VsZWN0b3JBbGwoIFwiW2lkfj1cIiArIGV4cGFuZG8gKyBcIi1dXCIgKS5sZW5ndGggKSB7XHJcblx0XHRcdFx0cmJ1Z2d5UVNBLnB1c2goXCJ+PVwiKTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0Ly8gV2Via2l0L09wZXJhIC0gOmNoZWNrZWQgc2hvdWxkIHJldHVybiBzZWxlY3RlZCBvcHRpb24gZWxlbWVudHNcclxuXHRcdFx0Ly8gaHR0cDovL3d3dy53My5vcmcvVFIvMjAxMS9SRUMtY3NzMy1zZWxlY3RvcnMtMjAxMTA5MjkvI2NoZWNrZWRcclxuXHRcdFx0Ly8gSUU4IHRocm93cyBlcnJvciBoZXJlIGFuZCB3aWxsIG5vdCBzZWUgbGF0ZXIgdGVzdHNcclxuXHRcdFx0aWYgKCAhZGl2LnF1ZXJ5U2VsZWN0b3JBbGwoXCI6Y2hlY2tlZFwiKS5sZW5ndGggKSB7XHJcblx0XHRcdFx0cmJ1Z2d5UVNBLnB1c2goXCI6Y2hlY2tlZFwiKTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0Ly8gU3VwcG9ydDogU2FmYXJpIDgrLCBpT1MgOCtcclxuXHRcdFx0Ly8gaHR0cHM6Ly9idWdzLndlYmtpdC5vcmcvc2hvd19idWcuY2dpP2lkPTEzNjg1MVxyXG5cdFx0XHQvLyBJbi1wYWdlIGBzZWxlY3RvciNpZCBzaWJpbmctY29tYmluYXRvciBzZWxlY3RvcmAgZmFpbHNcclxuXHRcdFx0aWYgKCAhZGl2LnF1ZXJ5U2VsZWN0b3JBbGwoIFwiYSNcIiArIGV4cGFuZG8gKyBcIisqXCIgKS5sZW5ndGggKSB7XHJcblx0XHRcdFx0cmJ1Z2d5UVNBLnB1c2goXCIuIy4rWyt+XVwiKTtcclxuXHRcdFx0fVxyXG5cdFx0fSk7XHJcblxyXG5cdFx0YXNzZXJ0KGZ1bmN0aW9uKCBkaXYgKSB7XHJcblx0XHRcdC8vIFN1cHBvcnQ6IFdpbmRvd3MgOCBOYXRpdmUgQXBwc1xyXG5cdFx0XHQvLyBUaGUgdHlwZSBhbmQgbmFtZSBhdHRyaWJ1dGVzIGFyZSByZXN0cmljdGVkIGR1cmluZyAuaW5uZXJIVE1MIGFzc2lnbm1lbnRcclxuXHRcdFx0dmFyIGlucHV0ID0gZG9jLmNyZWF0ZUVsZW1lbnQoXCJpbnB1dFwiKTtcclxuXHRcdFx0aW5wdXQuc2V0QXR0cmlidXRlKCBcInR5cGVcIiwgXCJoaWRkZW5cIiApO1xyXG5cdFx0XHRkaXYuYXBwZW5kQ2hpbGQoIGlucHV0ICkuc2V0QXR0cmlidXRlKCBcIm5hbWVcIiwgXCJEXCIgKTtcclxuXHJcblx0XHRcdC8vIFN1cHBvcnQ6IElFOFxyXG5cdFx0XHQvLyBFbmZvcmNlIGNhc2Utc2Vuc2l0aXZpdHkgb2YgbmFtZSBhdHRyaWJ1dGVcclxuXHRcdFx0aWYgKCBkaXYucXVlcnlTZWxlY3RvckFsbChcIltuYW1lPWRdXCIpLmxlbmd0aCApIHtcclxuXHRcdFx0XHRyYnVnZ3lRU0EucHVzaCggXCJuYW1lXCIgKyB3aGl0ZXNwYWNlICsgXCIqWypeJHwhfl0/PVwiICk7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdC8vIEZGIDMuNSAtIDplbmFibGVkLzpkaXNhYmxlZCBhbmQgaGlkZGVuIGVsZW1lbnRzIChoaWRkZW4gZWxlbWVudHMgYXJlIHN0aWxsIGVuYWJsZWQpXHJcblx0XHRcdC8vIElFOCB0aHJvd3MgZXJyb3IgaGVyZSBhbmQgd2lsbCBub3Qgc2VlIGxhdGVyIHRlc3RzXHJcblx0XHRcdGlmICggIWRpdi5xdWVyeVNlbGVjdG9yQWxsKFwiOmVuYWJsZWRcIikubGVuZ3RoICkge1xyXG5cdFx0XHRcdHJidWdneVFTQS5wdXNoKCBcIjplbmFibGVkXCIsIFwiOmRpc2FibGVkXCIgKTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0Ly8gT3BlcmEgMTAtMTEgZG9lcyBub3QgdGhyb3cgb24gcG9zdC1jb21tYSBpbnZhbGlkIHBzZXVkb3NcclxuXHRcdFx0ZGl2LnF1ZXJ5U2VsZWN0b3JBbGwoXCIqLDp4XCIpO1xyXG5cdFx0XHRyYnVnZ3lRU0EucHVzaChcIiwuKjpcIik7XHJcblx0XHR9KTtcclxuXHR9XHJcblxyXG5cdGlmICggKHN1cHBvcnQubWF0Y2hlc1NlbGVjdG9yID0gcm5hdGl2ZS50ZXN0KCAobWF0Y2hlcyA9IGRvY0VsZW0ubWF0Y2hlcyB8fFxyXG5cdFx0ZG9jRWxlbS53ZWJraXRNYXRjaGVzU2VsZWN0b3IgfHxcclxuXHRcdGRvY0VsZW0ubW96TWF0Y2hlc1NlbGVjdG9yIHx8XHJcblx0XHRkb2NFbGVtLm9NYXRjaGVzU2VsZWN0b3IgfHxcclxuXHRcdGRvY0VsZW0ubXNNYXRjaGVzU2VsZWN0b3IpICkpICkge1xyXG5cclxuXHRcdGFzc2VydChmdW5jdGlvbiggZGl2ICkge1xyXG5cdFx0XHQvLyBDaGVjayB0byBzZWUgaWYgaXQncyBwb3NzaWJsZSB0byBkbyBtYXRjaGVzU2VsZWN0b3JcclxuXHRcdFx0Ly8gb24gYSBkaXNjb25uZWN0ZWQgbm9kZSAoSUUgOSlcclxuXHRcdFx0c3VwcG9ydC5kaXNjb25uZWN0ZWRNYXRjaCA9IG1hdGNoZXMuY2FsbCggZGl2LCBcImRpdlwiICk7XHJcblxyXG5cdFx0XHQvLyBUaGlzIHNob3VsZCBmYWlsIHdpdGggYW4gZXhjZXB0aW9uXHJcblx0XHRcdC8vIEdlY2tvIGRvZXMgbm90IGVycm9yLCByZXR1cm5zIGZhbHNlIGluc3RlYWRcclxuXHRcdFx0bWF0Y2hlcy5jYWxsKCBkaXYsIFwiW3MhPScnXTp4XCIgKTtcclxuXHRcdFx0cmJ1Z2d5TWF0Y2hlcy5wdXNoKCBcIiE9XCIsIHBzZXVkb3MgKTtcclxuXHRcdH0pO1xyXG5cdH1cclxuXHJcblx0cmJ1Z2d5UVNBID0gcmJ1Z2d5UVNBLmxlbmd0aCAmJiBuZXcgUmVnRXhwKCByYnVnZ3lRU0Euam9pbihcInxcIikgKTtcclxuXHRyYnVnZ3lNYXRjaGVzID0gcmJ1Z2d5TWF0Y2hlcy5sZW5ndGggJiYgbmV3IFJlZ0V4cCggcmJ1Z2d5TWF0Y2hlcy5qb2luKFwifFwiKSApO1xyXG5cclxuXHQvKiBDb250YWluc1xyXG5cdC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gKi9cclxuXHRoYXNDb21wYXJlID0gcm5hdGl2ZS50ZXN0KCBkb2NFbGVtLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uICk7XHJcblxyXG5cdC8vIEVsZW1lbnQgY29udGFpbnMgYW5vdGhlclxyXG5cdC8vIFB1cnBvc2VmdWxseSBkb2VzIG5vdCBpbXBsZW1lbnQgaW5jbHVzaXZlIGRlc2NlbmRlbnRcclxuXHQvLyBBcyBpbiwgYW4gZWxlbWVudCBkb2VzIG5vdCBjb250YWluIGl0c2VsZlxyXG5cdGNvbnRhaW5zID0gaGFzQ29tcGFyZSB8fCBybmF0aXZlLnRlc3QoIGRvY0VsZW0uY29udGFpbnMgKSA/XHJcblx0XHRmdW5jdGlvbiggYSwgYiApIHtcclxuXHRcdFx0dmFyIGFkb3duID0gYS5ub2RlVHlwZSA9PT0gOSA/IGEuZG9jdW1lbnRFbGVtZW50IDogYSxcclxuXHRcdFx0XHRidXAgPSBiICYmIGIucGFyZW50Tm9kZTtcclxuXHRcdFx0cmV0dXJuIGEgPT09IGJ1cCB8fCAhISggYnVwICYmIGJ1cC5ub2RlVHlwZSA9PT0gMSAmJiAoXHJcblx0XHRcdFx0YWRvd24uY29udGFpbnMgP1xyXG5cdFx0XHRcdFx0YWRvd24uY29udGFpbnMoIGJ1cCApIDpcclxuXHRcdFx0XHRcdGEuY29tcGFyZURvY3VtZW50UG9zaXRpb24gJiYgYS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbiggYnVwICkgJiAxNlxyXG5cdFx0XHQpKTtcclxuXHRcdH0gOlxyXG5cdFx0ZnVuY3Rpb24oIGEsIGIgKSB7XHJcblx0XHRcdGlmICggYiApIHtcclxuXHRcdFx0XHR3aGlsZSAoIChiID0gYi5wYXJlbnROb2RlKSApIHtcclxuXHRcdFx0XHRcdGlmICggYiA9PT0gYSApIHtcclxuXHRcdFx0XHRcdFx0cmV0dXJuIHRydWU7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHRcdHJldHVybiBmYWxzZTtcclxuXHRcdH07XHJcblxyXG5cdC8qIFNvcnRpbmdcclxuXHQtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICovXHJcblxyXG5cdC8vIERvY3VtZW50IG9yZGVyIHNvcnRpbmdcclxuXHRzb3J0T3JkZXIgPSBoYXNDb21wYXJlID9cclxuXHRmdW5jdGlvbiggYSwgYiApIHtcclxuXHJcblx0XHQvLyBGbGFnIGZvciBkdXBsaWNhdGUgcmVtb3ZhbFxyXG5cdFx0aWYgKCBhID09PSBiICkge1xyXG5cdFx0XHRoYXNEdXBsaWNhdGUgPSB0cnVlO1xyXG5cdFx0XHRyZXR1cm4gMDtcclxuXHRcdH1cclxuXHJcblx0XHQvLyBTb3J0IG9uIG1ldGhvZCBleGlzdGVuY2UgaWYgb25seSBvbmUgaW5wdXQgaGFzIGNvbXBhcmVEb2N1bWVudFBvc2l0aW9uXHJcblx0XHR2YXIgY29tcGFyZSA9ICFhLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uIC0gIWIuY29tcGFyZURvY3VtZW50UG9zaXRpb247XHJcblx0XHRpZiAoIGNvbXBhcmUgKSB7XHJcblx0XHRcdHJldHVybiBjb21wYXJlO1xyXG5cdFx0fVxyXG5cclxuXHRcdC8vIENhbGN1bGF0ZSBwb3NpdGlvbiBpZiBib3RoIGlucHV0cyBiZWxvbmcgdG8gdGhlIHNhbWUgZG9jdW1lbnRcclxuXHRcdGNvbXBhcmUgPSAoIGEub3duZXJEb2N1bWVudCB8fCBhICkgPT09ICggYi5vd25lckRvY3VtZW50IHx8IGIgKSA/XHJcblx0XHRcdGEuY29tcGFyZURvY3VtZW50UG9zaXRpb24oIGIgKSA6XHJcblxyXG5cdFx0XHQvLyBPdGhlcndpc2Ugd2Uga25vdyB0aGV5IGFyZSBkaXNjb25uZWN0ZWRcclxuXHRcdFx0MTtcclxuXHJcblx0XHQvLyBEaXNjb25uZWN0ZWQgbm9kZXNcclxuXHRcdGlmICggY29tcGFyZSAmIDEgfHxcclxuXHRcdFx0KCFzdXBwb3J0LnNvcnREZXRhY2hlZCAmJiBiLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKCBhICkgPT09IGNvbXBhcmUpICkge1xyXG5cclxuXHRcdFx0Ly8gQ2hvb3NlIHRoZSBmaXJzdCBlbGVtZW50IHRoYXQgaXMgcmVsYXRlZCB0byBvdXIgcHJlZmVycmVkIGRvY3VtZW50XHJcblx0XHRcdGlmICggYSA9PT0gZG9jIHx8IGEub3duZXJEb2N1bWVudCA9PT0gcHJlZmVycmVkRG9jICYmIGNvbnRhaW5zKHByZWZlcnJlZERvYywgYSkgKSB7XHJcblx0XHRcdFx0cmV0dXJuIC0xO1xyXG5cdFx0XHR9XHJcblx0XHRcdGlmICggYiA9PT0gZG9jIHx8IGIub3duZXJEb2N1bWVudCA9PT0gcHJlZmVycmVkRG9jICYmIGNvbnRhaW5zKHByZWZlcnJlZERvYywgYikgKSB7XHJcblx0XHRcdFx0cmV0dXJuIDE7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdC8vIE1haW50YWluIG9yaWdpbmFsIG9yZGVyXHJcblx0XHRcdHJldHVybiBzb3J0SW5wdXQgP1xyXG5cdFx0XHRcdCggaW5kZXhPZiggc29ydElucHV0LCBhICkgLSBpbmRleE9mKCBzb3J0SW5wdXQsIGIgKSApIDpcclxuXHRcdFx0XHQwO1xyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiBjb21wYXJlICYgNCA/IC0xIDogMTtcclxuXHR9IDpcclxuXHRmdW5jdGlvbiggYSwgYiApIHtcclxuXHRcdC8vIEV4aXQgZWFybHkgaWYgdGhlIG5vZGVzIGFyZSBpZGVudGljYWxcclxuXHRcdGlmICggYSA9PT0gYiApIHtcclxuXHRcdFx0aGFzRHVwbGljYXRlID0gdHJ1ZTtcclxuXHRcdFx0cmV0dXJuIDA7XHJcblx0XHR9XHJcblxyXG5cdFx0dmFyIGN1cixcclxuXHRcdFx0aSA9IDAsXHJcblx0XHRcdGF1cCA9IGEucGFyZW50Tm9kZSxcclxuXHRcdFx0YnVwID0gYi5wYXJlbnROb2RlLFxyXG5cdFx0XHRhcCA9IFsgYSBdLFxyXG5cdFx0XHRicCA9IFsgYiBdO1xyXG5cclxuXHRcdC8vIFBhcmVudGxlc3Mgbm9kZXMgYXJlIGVpdGhlciBkb2N1bWVudHMgb3IgZGlzY29ubmVjdGVkXHJcblx0XHRpZiAoICFhdXAgfHwgIWJ1cCApIHtcclxuXHRcdFx0cmV0dXJuIGEgPT09IGRvYyA/IC0xIDpcclxuXHRcdFx0XHRiID09PSBkb2MgPyAxIDpcclxuXHRcdFx0XHRhdXAgPyAtMSA6XHJcblx0XHRcdFx0YnVwID8gMSA6XHJcblx0XHRcdFx0c29ydElucHV0ID9cclxuXHRcdFx0XHQoIGluZGV4T2YoIHNvcnRJbnB1dCwgYSApIC0gaW5kZXhPZiggc29ydElucHV0LCBiICkgKSA6XHJcblx0XHRcdFx0MDtcclxuXHJcblx0XHQvLyBJZiB0aGUgbm9kZXMgYXJlIHNpYmxpbmdzLCB3ZSBjYW4gZG8gYSBxdWljayBjaGVja1xyXG5cdFx0fSBlbHNlIGlmICggYXVwID09PSBidXAgKSB7XHJcblx0XHRcdHJldHVybiBzaWJsaW5nQ2hlY2soIGEsIGIgKTtcclxuXHRcdH1cclxuXHJcblx0XHQvLyBPdGhlcndpc2Ugd2UgbmVlZCBmdWxsIGxpc3RzIG9mIHRoZWlyIGFuY2VzdG9ycyBmb3IgY29tcGFyaXNvblxyXG5cdFx0Y3VyID0gYTtcclxuXHRcdHdoaWxlICggKGN1ciA9IGN1ci5wYXJlbnROb2RlKSApIHtcclxuXHRcdFx0YXAudW5zaGlmdCggY3VyICk7XHJcblx0XHR9XHJcblx0XHRjdXIgPSBiO1xyXG5cdFx0d2hpbGUgKCAoY3VyID0gY3VyLnBhcmVudE5vZGUpICkge1xyXG5cdFx0XHRicC51bnNoaWZ0KCBjdXIgKTtcclxuXHRcdH1cclxuXHJcblx0XHQvLyBXYWxrIGRvd24gdGhlIHRyZWUgbG9va2luZyBmb3IgYSBkaXNjcmVwYW5jeVxyXG5cdFx0d2hpbGUgKCBhcFtpXSA9PT0gYnBbaV0gKSB7XHJcblx0XHRcdGkrKztcclxuXHRcdH1cclxuXHJcblx0XHRyZXR1cm4gaSA/XHJcblx0XHRcdC8vIERvIGEgc2libGluZyBjaGVjayBpZiB0aGUgbm9kZXMgaGF2ZSBhIGNvbW1vbiBhbmNlc3RvclxyXG5cdFx0XHRzaWJsaW5nQ2hlY2soIGFwW2ldLCBicFtpXSApIDpcclxuXHJcblx0XHRcdC8vIE90aGVyd2lzZSBub2RlcyBpbiBvdXIgZG9jdW1lbnQgc29ydCBmaXJzdFxyXG5cdFx0XHRhcFtpXSA9PT0gcHJlZmVycmVkRG9jID8gLTEgOlxyXG5cdFx0XHRicFtpXSA9PT0gcHJlZmVycmVkRG9jID8gMSA6XHJcblx0XHRcdDA7XHJcblx0fTtcclxuXHJcblx0cmV0dXJuIGRvYztcclxufTtcclxuXHJcblNpenpsZS5tYXRjaGVzID0gZnVuY3Rpb24oIGV4cHIsIGVsZW1lbnRzICkge1xyXG5cdHJldHVybiBTaXp6bGUoIGV4cHIsIG51bGwsIG51bGwsIGVsZW1lbnRzICk7XHJcbn07XHJcblxyXG5TaXp6bGUubWF0Y2hlc1NlbGVjdG9yID0gZnVuY3Rpb24oIGVsZW0sIGV4cHIgKSB7XHJcblx0Ly8gU2V0IGRvY3VtZW50IHZhcnMgaWYgbmVlZGVkXHJcblx0aWYgKCAoIGVsZW0ub3duZXJEb2N1bWVudCB8fCBlbGVtICkgIT09IGRvY3VtZW50ICkge1xyXG5cdFx0c2V0RG9jdW1lbnQoIGVsZW0gKTtcclxuXHR9XHJcblxyXG5cdC8vIE1ha2Ugc3VyZSB0aGF0IGF0dHJpYnV0ZSBzZWxlY3RvcnMgYXJlIHF1b3RlZFxyXG5cdGV4cHIgPSBleHByLnJlcGxhY2UoIHJhdHRyaWJ1dGVRdW90ZXMsIFwiPSckMSddXCIgKTtcclxuXHJcblx0aWYgKCBzdXBwb3J0Lm1hdGNoZXNTZWxlY3RvciAmJiBkb2N1bWVudElzSFRNTCAmJlxyXG5cdFx0KCAhcmJ1Z2d5TWF0Y2hlcyB8fCAhcmJ1Z2d5TWF0Y2hlcy50ZXN0KCBleHByICkgKSAmJlxyXG5cdFx0KCAhcmJ1Z2d5UVNBICAgICB8fCAhcmJ1Z2d5UVNBLnRlc3QoIGV4cHIgKSApICkge1xyXG5cclxuXHRcdHRyeSB7XHJcblx0XHRcdHZhciByZXQgPSBtYXRjaGVzLmNhbGwoIGVsZW0sIGV4cHIgKTtcclxuXHJcblx0XHRcdC8vIElFIDkncyBtYXRjaGVzU2VsZWN0b3IgcmV0dXJucyBmYWxzZSBvbiBkaXNjb25uZWN0ZWQgbm9kZXNcclxuXHRcdFx0aWYgKCByZXQgfHwgc3VwcG9ydC5kaXNjb25uZWN0ZWRNYXRjaCB8fFxyXG5cdFx0XHRcdFx0Ly8gQXMgd2VsbCwgZGlzY29ubmVjdGVkIG5vZGVzIGFyZSBzYWlkIHRvIGJlIGluIGEgZG9jdW1lbnRcclxuXHRcdFx0XHRcdC8vIGZyYWdtZW50IGluIElFIDlcclxuXHRcdFx0XHRcdGVsZW0uZG9jdW1lbnQgJiYgZWxlbS5kb2N1bWVudC5ub2RlVHlwZSAhPT0gMTEgKSB7XHJcblx0XHRcdFx0cmV0dXJuIHJldDtcclxuXHRcdFx0fVxyXG5cdFx0fSBjYXRjaCAoZSkge31cclxuXHR9XHJcblxyXG5cdHJldHVybiBTaXp6bGUoIGV4cHIsIGRvY3VtZW50LCBudWxsLCBbIGVsZW0gXSApLmxlbmd0aCA+IDA7XHJcbn07XHJcblxyXG5TaXp6bGUuY29udGFpbnMgPSBmdW5jdGlvbiggY29udGV4dCwgZWxlbSApIHtcclxuXHQvLyBTZXQgZG9jdW1lbnQgdmFycyBpZiBuZWVkZWRcclxuXHRpZiAoICggY29udGV4dC5vd25lckRvY3VtZW50IHx8IGNvbnRleHQgKSAhPT0gZG9jdW1lbnQgKSB7XHJcblx0XHRzZXREb2N1bWVudCggY29udGV4dCApO1xyXG5cdH1cclxuXHRyZXR1cm4gY29udGFpbnMoIGNvbnRleHQsIGVsZW0gKTtcclxufTtcclxuXHJcblNpenpsZS5hdHRyID0gZnVuY3Rpb24oIGVsZW0sIG5hbWUgKSB7XHJcblx0Ly8gU2V0IGRvY3VtZW50IHZhcnMgaWYgbmVlZGVkXHJcblx0aWYgKCAoIGVsZW0ub3duZXJEb2N1bWVudCB8fCBlbGVtICkgIT09IGRvY3VtZW50ICkge1xyXG5cdFx0c2V0RG9jdW1lbnQoIGVsZW0gKTtcclxuXHR9XHJcblxyXG5cdHZhciBmbiA9IEV4cHIuYXR0ckhhbmRsZVsgbmFtZS50b0xvd2VyQ2FzZSgpIF0sXHJcblx0XHQvLyBEb24ndCBnZXQgZm9vbGVkIGJ5IE9iamVjdC5wcm90b3R5cGUgcHJvcGVydGllcyAoalF1ZXJ5ICMxMzgwNylcclxuXHRcdHZhbCA9IGZuICYmIGhhc093bi5jYWxsKCBFeHByLmF0dHJIYW5kbGUsIG5hbWUudG9Mb3dlckNhc2UoKSApID9cclxuXHRcdFx0Zm4oIGVsZW0sIG5hbWUsICFkb2N1bWVudElzSFRNTCApIDpcclxuXHRcdFx0dW5kZWZpbmVkO1xyXG5cclxuXHRyZXR1cm4gdmFsICE9PSB1bmRlZmluZWQgP1xyXG5cdFx0dmFsIDpcclxuXHRcdHN1cHBvcnQuYXR0cmlidXRlcyB8fCAhZG9jdW1lbnRJc0hUTUwgP1xyXG5cdFx0XHRlbGVtLmdldEF0dHJpYnV0ZSggbmFtZSApIDpcclxuXHRcdFx0KHZhbCA9IGVsZW0uZ2V0QXR0cmlidXRlTm9kZShuYW1lKSkgJiYgdmFsLnNwZWNpZmllZCA/XHJcblx0XHRcdFx0dmFsLnZhbHVlIDpcclxuXHRcdFx0XHRudWxsO1xyXG59O1xyXG5cclxuU2l6emxlLmVycm9yID0gZnVuY3Rpb24oIG1zZyApIHtcclxuXHR0aHJvdyBuZXcgRXJyb3IoIFwiU3ludGF4IGVycm9yLCB1bnJlY29nbml6ZWQgZXhwcmVzc2lvbjogXCIgKyBtc2cgKTtcclxufTtcclxuXHJcbi8qKlxyXG4gKiBEb2N1bWVudCBzb3J0aW5nIGFuZCByZW1vdmluZyBkdXBsaWNhdGVzXHJcbiAqIEBwYXJhbSB7QXJyYXlMaWtlfSByZXN1bHRzXHJcbiAqL1xyXG5TaXp6bGUudW5pcXVlU29ydCA9IGZ1bmN0aW9uKCByZXN1bHRzICkge1xyXG5cdHZhciBlbGVtLFxyXG5cdFx0ZHVwbGljYXRlcyA9IFtdLFxyXG5cdFx0aiA9IDAsXHJcblx0XHRpID0gMDtcclxuXHJcblx0Ly8gVW5sZXNzIHdlICprbm93KiB3ZSBjYW4gZGV0ZWN0IGR1cGxpY2F0ZXMsIGFzc3VtZSB0aGVpciBwcmVzZW5jZVxyXG5cdGhhc0R1cGxpY2F0ZSA9ICFzdXBwb3J0LmRldGVjdER1cGxpY2F0ZXM7XHJcblx0c29ydElucHV0ID0gIXN1cHBvcnQuc29ydFN0YWJsZSAmJiByZXN1bHRzLnNsaWNlKCAwICk7XHJcblx0cmVzdWx0cy5zb3J0KCBzb3J0T3JkZXIgKTtcclxuXHJcblx0aWYgKCBoYXNEdXBsaWNhdGUgKSB7XHJcblx0XHR3aGlsZSAoIChlbGVtID0gcmVzdWx0c1tpKytdKSApIHtcclxuXHRcdFx0aWYgKCBlbGVtID09PSByZXN1bHRzWyBpIF0gKSB7XHJcblx0XHRcdFx0aiA9IGR1cGxpY2F0ZXMucHVzaCggaSApO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0XHR3aGlsZSAoIGotLSApIHtcclxuXHRcdFx0cmVzdWx0cy5zcGxpY2UoIGR1cGxpY2F0ZXNbIGogXSwgMSApO1xyXG5cdFx0fVxyXG5cdH1cclxuXHJcblx0Ly8gQ2xlYXIgaW5wdXQgYWZ0ZXIgc29ydGluZyB0byByZWxlYXNlIG9iamVjdHNcclxuXHQvLyBTZWUgaHR0cHM6Ly9naXRodWIuY29tL2pxdWVyeS9zaXp6bGUvcHVsbC8yMjVcclxuXHRzb3J0SW5wdXQgPSBudWxsO1xyXG5cclxuXHRyZXR1cm4gcmVzdWx0cztcclxufTtcclxuXHJcbi8qKlxyXG4gKiBVdGlsaXR5IGZ1bmN0aW9uIGZvciByZXRyaWV2aW5nIHRoZSB0ZXh0IHZhbHVlIG9mIGFuIGFycmF5IG9mIERPTSBub2Rlc1xyXG4gKiBAcGFyYW0ge0FycmF5fEVsZW1lbnR9IGVsZW1cclxuICovXHJcbmdldFRleHQgPSBTaXp6bGUuZ2V0VGV4dCA9IGZ1bmN0aW9uKCBlbGVtICkge1xyXG5cdHZhciBub2RlLFxyXG5cdFx0cmV0ID0gXCJcIixcclxuXHRcdGkgPSAwLFxyXG5cdFx0bm9kZVR5cGUgPSBlbGVtLm5vZGVUeXBlO1xyXG5cclxuXHRpZiAoICFub2RlVHlwZSApIHtcclxuXHRcdC8vIElmIG5vIG5vZGVUeXBlLCB0aGlzIGlzIGV4cGVjdGVkIHRvIGJlIGFuIGFycmF5XHJcblx0XHR3aGlsZSAoIChub2RlID0gZWxlbVtpKytdKSApIHtcclxuXHRcdFx0Ly8gRG8gbm90IHRyYXZlcnNlIGNvbW1lbnQgbm9kZXNcclxuXHRcdFx0cmV0ICs9IGdldFRleHQoIG5vZGUgKTtcclxuXHRcdH1cclxuXHR9IGVsc2UgaWYgKCBub2RlVHlwZSA9PT0gMSB8fCBub2RlVHlwZSA9PT0gOSB8fCBub2RlVHlwZSA9PT0gMTEgKSB7XHJcblx0XHQvLyBVc2UgdGV4dENvbnRlbnQgZm9yIGVsZW1lbnRzXHJcblx0XHQvLyBpbm5lclRleHQgdXNhZ2UgcmVtb3ZlZCBmb3IgY29uc2lzdGVuY3kgb2YgbmV3IGxpbmVzIChqUXVlcnkgIzExMTUzKVxyXG5cdFx0aWYgKCB0eXBlb2YgZWxlbS50ZXh0Q29udGVudCA9PT0gXCJzdHJpbmdcIiApIHtcclxuXHRcdFx0cmV0dXJuIGVsZW0udGV4dENvbnRlbnQ7XHJcblx0XHR9IGVsc2Uge1xyXG5cdFx0XHQvLyBUcmF2ZXJzZSBpdHMgY2hpbGRyZW5cclxuXHRcdFx0Zm9yICggZWxlbSA9IGVsZW0uZmlyc3RDaGlsZDsgZWxlbTsgZWxlbSA9IGVsZW0ubmV4dFNpYmxpbmcgKSB7XHJcblx0XHRcdFx0cmV0ICs9IGdldFRleHQoIGVsZW0gKTtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdH0gZWxzZSBpZiAoIG5vZGVUeXBlID09PSAzIHx8IG5vZGVUeXBlID09PSA0ICkge1xyXG5cdFx0cmV0dXJuIGVsZW0ubm9kZVZhbHVlO1xyXG5cdH1cclxuXHQvLyBEbyBub3QgaW5jbHVkZSBjb21tZW50IG9yIHByb2Nlc3NpbmcgaW5zdHJ1Y3Rpb24gbm9kZXNcclxuXHJcblx0cmV0dXJuIHJldDtcclxufTtcclxuXHJcbkV4cHIgPSBTaXp6bGUuc2VsZWN0b3JzID0ge1xyXG5cclxuXHQvLyBDYW4gYmUgYWRqdXN0ZWQgYnkgdGhlIHVzZXJcclxuXHRjYWNoZUxlbmd0aDogNTAsXHJcblxyXG5cdGNyZWF0ZVBzZXVkbzogbWFya0Z1bmN0aW9uLFxyXG5cclxuXHRtYXRjaDogbWF0Y2hFeHByLFxyXG5cclxuXHRhdHRySGFuZGxlOiB7fSxcclxuXHJcblx0ZmluZDoge30sXHJcblxyXG5cdHJlbGF0aXZlOiB7XHJcblx0XHRcIj5cIjogeyBkaXI6IFwicGFyZW50Tm9kZVwiLCBmaXJzdDogdHJ1ZSB9LFxyXG5cdFx0XCIgXCI6IHsgZGlyOiBcInBhcmVudE5vZGVcIiB9LFxyXG5cdFx0XCIrXCI6IHsgZGlyOiBcInByZXZpb3VzU2libGluZ1wiLCBmaXJzdDogdHJ1ZSB9LFxyXG5cdFx0XCJ+XCI6IHsgZGlyOiBcInByZXZpb3VzU2libGluZ1wiIH1cclxuXHR9LFxyXG5cclxuXHRwcmVGaWx0ZXI6IHtcclxuXHRcdFwiQVRUUlwiOiBmdW5jdGlvbiggbWF0Y2ggKSB7XHJcblx0XHRcdG1hdGNoWzFdID0gbWF0Y2hbMV0ucmVwbGFjZSggcnVuZXNjYXBlLCBmdW5lc2NhcGUgKTtcclxuXHJcblx0XHRcdC8vIE1vdmUgdGhlIGdpdmVuIHZhbHVlIHRvIG1hdGNoWzNdIHdoZXRoZXIgcXVvdGVkIG9yIHVucXVvdGVkXHJcblx0XHRcdG1hdGNoWzNdID0gKCBtYXRjaFszXSB8fCBtYXRjaFs0XSB8fCBtYXRjaFs1XSB8fCBcIlwiICkucmVwbGFjZSggcnVuZXNjYXBlLCBmdW5lc2NhcGUgKTtcclxuXHJcblx0XHRcdGlmICggbWF0Y2hbMl0gPT09IFwifj1cIiApIHtcclxuXHRcdFx0XHRtYXRjaFszXSA9IFwiIFwiICsgbWF0Y2hbM10gKyBcIiBcIjtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0cmV0dXJuIG1hdGNoLnNsaWNlKCAwLCA0ICk7XHJcblx0XHR9LFxyXG5cclxuXHRcdFwiQ0hJTERcIjogZnVuY3Rpb24oIG1hdGNoICkge1xyXG5cdFx0XHQvKiBtYXRjaGVzIGZyb20gbWF0Y2hFeHByW1wiQ0hJTERcIl1cclxuXHRcdFx0XHQxIHR5cGUgKG9ubHl8bnRofC4uLilcclxuXHRcdFx0XHQyIHdoYXQgKGNoaWxkfG9mLXR5cGUpXHJcblx0XHRcdFx0MyBhcmd1bWVudCAoZXZlbnxvZGR8XFxkKnxcXGQqbihbKy1dXFxkKyk/fC4uLilcclxuXHRcdFx0XHQ0IHhuLWNvbXBvbmVudCBvZiB4bit5IGFyZ3VtZW50IChbKy1dP1xcZCpufClcclxuXHRcdFx0XHQ1IHNpZ24gb2YgeG4tY29tcG9uZW50XHJcblx0XHRcdFx0NiB4IG9mIHhuLWNvbXBvbmVudFxyXG5cdFx0XHRcdDcgc2lnbiBvZiB5LWNvbXBvbmVudFxyXG5cdFx0XHRcdDggeSBvZiB5LWNvbXBvbmVudFxyXG5cdFx0XHQqL1xyXG5cdFx0XHRtYXRjaFsxXSA9IG1hdGNoWzFdLnRvTG93ZXJDYXNlKCk7XHJcblxyXG5cdFx0XHRpZiAoIG1hdGNoWzFdLnNsaWNlKCAwLCAzICkgPT09IFwibnRoXCIgKSB7XHJcblx0XHRcdFx0Ly8gbnRoLSogcmVxdWlyZXMgYXJndW1lbnRcclxuXHRcdFx0XHRpZiAoICFtYXRjaFszXSApIHtcclxuXHRcdFx0XHRcdFNpenpsZS5lcnJvciggbWF0Y2hbMF0gKTtcclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdC8vIG51bWVyaWMgeCBhbmQgeSBwYXJhbWV0ZXJzIGZvciBFeHByLmZpbHRlci5DSElMRFxyXG5cdFx0XHRcdC8vIHJlbWVtYmVyIHRoYXQgZmFsc2UvdHJ1ZSBjYXN0IHJlc3BlY3RpdmVseSB0byAwLzFcclxuXHRcdFx0XHRtYXRjaFs0XSA9ICsoIG1hdGNoWzRdID8gbWF0Y2hbNV0gKyAobWF0Y2hbNl0gfHwgMSkgOiAyICogKCBtYXRjaFszXSA9PT0gXCJldmVuXCIgfHwgbWF0Y2hbM10gPT09IFwib2RkXCIgKSApO1xyXG5cdFx0XHRcdG1hdGNoWzVdID0gKyggKCBtYXRjaFs3XSArIG1hdGNoWzhdICkgfHwgbWF0Y2hbM10gPT09IFwib2RkXCIgKTtcclxuXHJcblx0XHRcdC8vIG90aGVyIHR5cGVzIHByb2hpYml0IGFyZ3VtZW50c1xyXG5cdFx0XHR9IGVsc2UgaWYgKCBtYXRjaFszXSApIHtcclxuXHRcdFx0XHRTaXp6bGUuZXJyb3IoIG1hdGNoWzBdICk7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdHJldHVybiBtYXRjaDtcclxuXHRcdH0sXHJcblxyXG5cdFx0XCJQU0VVRE9cIjogZnVuY3Rpb24oIG1hdGNoICkge1xyXG5cdFx0XHR2YXIgZXhjZXNzLFxyXG5cdFx0XHRcdHVucXVvdGVkID0gIW1hdGNoWzZdICYmIG1hdGNoWzJdO1xyXG5cclxuXHRcdFx0aWYgKCBtYXRjaEV4cHJbXCJDSElMRFwiXS50ZXN0KCBtYXRjaFswXSApICkge1xyXG5cdFx0XHRcdHJldHVybiBudWxsO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHQvLyBBY2NlcHQgcXVvdGVkIGFyZ3VtZW50cyBhcy1pc1xyXG5cdFx0XHRpZiAoIG1hdGNoWzNdICkge1xyXG5cdFx0XHRcdG1hdGNoWzJdID0gbWF0Y2hbNF0gfHwgbWF0Y2hbNV0gfHwgXCJcIjtcclxuXHJcblx0XHRcdC8vIFN0cmlwIGV4Y2VzcyBjaGFyYWN0ZXJzIGZyb20gdW5xdW90ZWQgYXJndW1lbnRzXHJcblx0XHRcdH0gZWxzZSBpZiAoIHVucXVvdGVkICYmIHJwc2V1ZG8udGVzdCggdW5xdW90ZWQgKSAmJlxyXG5cdFx0XHRcdC8vIEdldCBleGNlc3MgZnJvbSB0b2tlbml6ZSAocmVjdXJzaXZlbHkpXHJcblx0XHRcdFx0KGV4Y2VzcyA9IHRva2VuaXplKCB1bnF1b3RlZCwgdHJ1ZSApKSAmJlxyXG5cdFx0XHRcdC8vIGFkdmFuY2UgdG8gdGhlIG5leHQgY2xvc2luZyBwYXJlbnRoZXNpc1xyXG5cdFx0XHRcdChleGNlc3MgPSB1bnF1b3RlZC5pbmRleE9mKCBcIilcIiwgdW5xdW90ZWQubGVuZ3RoIC0gZXhjZXNzICkgLSB1bnF1b3RlZC5sZW5ndGgpICkge1xyXG5cclxuXHRcdFx0XHQvLyBleGNlc3MgaXMgYSBuZWdhdGl2ZSBpbmRleFxyXG5cdFx0XHRcdG1hdGNoWzBdID0gbWF0Y2hbMF0uc2xpY2UoIDAsIGV4Y2VzcyApO1xyXG5cdFx0XHRcdG1hdGNoWzJdID0gdW5xdW90ZWQuc2xpY2UoIDAsIGV4Y2VzcyApO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHQvLyBSZXR1cm4gb25seSBjYXB0dXJlcyBuZWVkZWQgYnkgdGhlIHBzZXVkbyBmaWx0ZXIgbWV0aG9kICh0eXBlIGFuZCBhcmd1bWVudClcclxuXHRcdFx0cmV0dXJuIG1hdGNoLnNsaWNlKCAwLCAzICk7XHJcblx0XHR9XHJcblx0fSxcclxuXHJcblx0ZmlsdGVyOiB7XHJcblxyXG5cdFx0XCJUQUdcIjogZnVuY3Rpb24oIG5vZGVOYW1lU2VsZWN0b3IgKSB7XHJcblx0XHRcdHZhciBub2RlTmFtZSA9IG5vZGVOYW1lU2VsZWN0b3IucmVwbGFjZSggcnVuZXNjYXBlLCBmdW5lc2NhcGUgKS50b0xvd2VyQ2FzZSgpO1xyXG5cdFx0XHRyZXR1cm4gbm9kZU5hbWVTZWxlY3RvciA9PT0gXCIqXCIgP1xyXG5cdFx0XHRcdGZ1bmN0aW9uKCkgeyByZXR1cm4gdHJ1ZTsgfSA6XHJcblx0XHRcdFx0ZnVuY3Rpb24oIGVsZW0gKSB7XHJcblx0XHRcdFx0XHRyZXR1cm4gZWxlbS5ub2RlTmFtZSAmJiBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09IG5vZGVOYW1lO1xyXG5cdFx0XHRcdH07XHJcblx0XHR9LFxyXG5cclxuXHRcdFwiQ0xBU1NcIjogZnVuY3Rpb24oIGNsYXNzTmFtZSApIHtcclxuXHRcdFx0dmFyIHBhdHRlcm4gPSBjbGFzc0NhY2hlWyBjbGFzc05hbWUgKyBcIiBcIiBdO1xyXG5cclxuXHRcdFx0cmV0dXJuIHBhdHRlcm4gfHxcclxuXHRcdFx0XHQocGF0dGVybiA9IG5ldyBSZWdFeHAoIFwiKF58XCIgKyB3aGl0ZXNwYWNlICsgXCIpXCIgKyBjbGFzc05hbWUgKyBcIihcIiArIHdoaXRlc3BhY2UgKyBcInwkKVwiICkpICYmXHJcblx0XHRcdFx0Y2xhc3NDYWNoZSggY2xhc3NOYW1lLCBmdW5jdGlvbiggZWxlbSApIHtcclxuXHRcdFx0XHRcdHJldHVybiBwYXR0ZXJuLnRlc3QoIHR5cGVvZiBlbGVtLmNsYXNzTmFtZSA9PT0gXCJzdHJpbmdcIiAmJiBlbGVtLmNsYXNzTmFtZSB8fCB0eXBlb2YgZWxlbS5nZXRBdHRyaWJ1dGUgIT09IFwidW5kZWZpbmVkXCIgJiYgZWxlbS5nZXRBdHRyaWJ1dGUoXCJjbGFzc1wiKSB8fCBcIlwiICk7XHJcblx0XHRcdFx0fSk7XHJcblx0XHR9LFxyXG5cclxuXHRcdFwiQVRUUlwiOiBmdW5jdGlvbiggbmFtZSwgb3BlcmF0b3IsIGNoZWNrICkge1xyXG5cdFx0XHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XHJcblx0XHRcdFx0dmFyIHJlc3VsdCA9IFNpenpsZS5hdHRyKCBlbGVtLCBuYW1lICk7XHJcblxyXG5cdFx0XHRcdGlmICggcmVzdWx0ID09IG51bGwgKSB7XHJcblx0XHRcdFx0XHRyZXR1cm4gb3BlcmF0b3IgPT09IFwiIT1cIjtcclxuXHRcdFx0XHR9XHJcblx0XHRcdFx0aWYgKCAhb3BlcmF0b3IgKSB7XHJcblx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdHJlc3VsdCArPSBcIlwiO1xyXG5cclxuXHRcdFx0XHRyZXR1cm4gb3BlcmF0b3IgPT09IFwiPVwiID8gcmVzdWx0ID09PSBjaGVjayA6XHJcblx0XHRcdFx0XHRvcGVyYXRvciA9PT0gXCIhPVwiID8gcmVzdWx0ICE9PSBjaGVjayA6XHJcblx0XHRcdFx0XHRvcGVyYXRvciA9PT0gXCJePVwiID8gY2hlY2sgJiYgcmVzdWx0LmluZGV4T2YoIGNoZWNrICkgPT09IDAgOlxyXG5cdFx0XHRcdFx0b3BlcmF0b3IgPT09IFwiKj1cIiA/IGNoZWNrICYmIHJlc3VsdC5pbmRleE9mKCBjaGVjayApID4gLTEgOlxyXG5cdFx0XHRcdFx0b3BlcmF0b3IgPT09IFwiJD1cIiA/IGNoZWNrICYmIHJlc3VsdC5zbGljZSggLWNoZWNrLmxlbmd0aCApID09PSBjaGVjayA6XHJcblx0XHRcdFx0XHRvcGVyYXRvciA9PT0gXCJ+PVwiID8gKCBcIiBcIiArIHJlc3VsdC5yZXBsYWNlKCByd2hpdGVzcGFjZSwgXCIgXCIgKSArIFwiIFwiICkuaW5kZXhPZiggY2hlY2sgKSA+IC0xIDpcclxuXHRcdFx0XHRcdG9wZXJhdG9yID09PSBcInw9XCIgPyByZXN1bHQgPT09IGNoZWNrIHx8IHJlc3VsdC5zbGljZSggMCwgY2hlY2subGVuZ3RoICsgMSApID09PSBjaGVjayArIFwiLVwiIDpcclxuXHRcdFx0XHRcdGZhbHNlO1xyXG5cdFx0XHR9O1xyXG5cdFx0fSxcclxuXHJcblx0XHRcIkNISUxEXCI6IGZ1bmN0aW9uKCB0eXBlLCB3aGF0LCBhcmd1bWVudCwgZmlyc3QsIGxhc3QgKSB7XHJcblx0XHRcdHZhciBzaW1wbGUgPSB0eXBlLnNsaWNlKCAwLCAzICkgIT09IFwibnRoXCIsXHJcblx0XHRcdFx0Zm9yd2FyZCA9IHR5cGUuc2xpY2UoIC00ICkgIT09IFwibGFzdFwiLFxyXG5cdFx0XHRcdG9mVHlwZSA9IHdoYXQgPT09IFwib2YtdHlwZVwiO1xyXG5cclxuXHRcdFx0cmV0dXJuIGZpcnN0ID09PSAxICYmIGxhc3QgPT09IDAgP1xyXG5cclxuXHRcdFx0XHQvLyBTaG9ydGN1dCBmb3IgOm50aC0qKG4pXHJcblx0XHRcdFx0ZnVuY3Rpb24oIGVsZW0gKSB7XHJcblx0XHRcdFx0XHRyZXR1cm4gISFlbGVtLnBhcmVudE5vZGU7XHJcblx0XHRcdFx0fSA6XHJcblxyXG5cdFx0XHRcdGZ1bmN0aW9uKCBlbGVtLCBjb250ZXh0LCB4bWwgKSB7XHJcblx0XHRcdFx0XHR2YXIgY2FjaGUsIG91dGVyQ2FjaGUsIG5vZGUsIGRpZmYsIG5vZGVJbmRleCwgc3RhcnQsXHJcblx0XHRcdFx0XHRcdGRpciA9IHNpbXBsZSAhPT0gZm9yd2FyZCA/IFwibmV4dFNpYmxpbmdcIiA6IFwicHJldmlvdXNTaWJsaW5nXCIsXHJcblx0XHRcdFx0XHRcdHBhcmVudCA9IGVsZW0ucGFyZW50Tm9kZSxcclxuXHRcdFx0XHRcdFx0bmFtZSA9IG9mVHlwZSAmJiBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCksXHJcblx0XHRcdFx0XHRcdHVzZUNhY2hlID0gIXhtbCAmJiAhb2ZUeXBlO1xyXG5cclxuXHRcdFx0XHRcdGlmICggcGFyZW50ICkge1xyXG5cclxuXHRcdFx0XHRcdFx0Ly8gOihmaXJzdHxsYXN0fG9ubHkpLShjaGlsZHxvZi10eXBlKVxyXG5cdFx0XHRcdFx0XHRpZiAoIHNpbXBsZSApIHtcclxuXHRcdFx0XHRcdFx0XHR3aGlsZSAoIGRpciApIHtcclxuXHRcdFx0XHRcdFx0XHRcdG5vZGUgPSBlbGVtO1xyXG5cdFx0XHRcdFx0XHRcdFx0d2hpbGUgKCAobm9kZSA9IG5vZGVbIGRpciBdKSApIHtcclxuXHRcdFx0XHRcdFx0XHRcdFx0aWYgKCBvZlR5cGUgPyBub2RlLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09IG5hbWUgOiBub2RlLm5vZGVUeXBlID09PSAxICkge1xyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdHJldHVybiBmYWxzZTtcclxuXHRcdFx0XHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHRcdFx0Ly8gUmV2ZXJzZSBkaXJlY3Rpb24gZm9yIDpvbmx5LSogKGlmIHdlIGhhdmVuJ3QgeWV0IGRvbmUgc28pXHJcblx0XHRcdFx0XHRcdFx0XHRzdGFydCA9IGRpciA9IHR5cGUgPT09IFwib25seVwiICYmICFzdGFydCAmJiBcIm5leHRTaWJsaW5nXCI7XHJcblx0XHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHRcdHJldHVybiB0cnVlO1xyXG5cdFx0XHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdFx0XHRzdGFydCA9IFsgZm9yd2FyZCA/IHBhcmVudC5maXJzdENoaWxkIDogcGFyZW50Lmxhc3RDaGlsZCBdO1xyXG5cclxuXHRcdFx0XHRcdFx0Ly8gbm9uLXhtbCA6bnRoLWNoaWxkKC4uLikgc3RvcmVzIGNhY2hlIGRhdGEgb24gYHBhcmVudGBcclxuXHRcdFx0XHRcdFx0aWYgKCBmb3J3YXJkICYmIHVzZUNhY2hlICkge1xyXG5cdFx0XHRcdFx0XHRcdC8vIFNlZWsgYGVsZW1gIGZyb20gYSBwcmV2aW91c2x5LWNhY2hlZCBpbmRleFxyXG5cdFx0XHRcdFx0XHRcdG91dGVyQ2FjaGUgPSBwYXJlbnRbIGV4cGFuZG8gXSB8fCAocGFyZW50WyBleHBhbmRvIF0gPSB7fSk7XHJcblx0XHRcdFx0XHRcdFx0Y2FjaGUgPSBvdXRlckNhY2hlWyB0eXBlIF0gfHwgW107XHJcblx0XHRcdFx0XHRcdFx0bm9kZUluZGV4ID0gY2FjaGVbMF0gPT09IGRpcnJ1bnMgJiYgY2FjaGVbMV07XHJcblx0XHRcdFx0XHRcdFx0ZGlmZiA9IGNhY2hlWzBdID09PSBkaXJydW5zICYmIGNhY2hlWzJdO1xyXG5cdFx0XHRcdFx0XHRcdG5vZGUgPSBub2RlSW5kZXggJiYgcGFyZW50LmNoaWxkTm9kZXNbIG5vZGVJbmRleCBdO1xyXG5cclxuXHRcdFx0XHRcdFx0XHR3aGlsZSAoIChub2RlID0gKytub2RlSW5kZXggJiYgbm9kZSAmJiBub2RlWyBkaXIgXSB8fFxyXG5cclxuXHRcdFx0XHRcdFx0XHRcdC8vIEZhbGxiYWNrIHRvIHNlZWtpbmcgYGVsZW1gIGZyb20gdGhlIHN0YXJ0XHJcblx0XHRcdFx0XHRcdFx0XHQoZGlmZiA9IG5vZGVJbmRleCA9IDApIHx8IHN0YXJ0LnBvcCgpKSApIHtcclxuXHJcblx0XHRcdFx0XHRcdFx0XHQvLyBXaGVuIGZvdW5kLCBjYWNoZSBpbmRleGVzIG9uIGBwYXJlbnRgIGFuZCBicmVha1xyXG5cdFx0XHRcdFx0XHRcdFx0aWYgKCBub2RlLm5vZGVUeXBlID09PSAxICYmICsrZGlmZiAmJiBub2RlID09PSBlbGVtICkge1xyXG5cdFx0XHRcdFx0XHRcdFx0XHRvdXRlckNhY2hlWyB0eXBlIF0gPSBbIGRpcnJ1bnMsIG5vZGVJbmRleCwgZGlmZiBdO1xyXG5cdFx0XHRcdFx0XHRcdFx0XHRicmVhaztcclxuXHRcdFx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdFx0XHQvLyBVc2UgcHJldmlvdXNseS1jYWNoZWQgZWxlbWVudCBpbmRleCBpZiBhdmFpbGFibGVcclxuXHRcdFx0XHRcdFx0fSBlbHNlIGlmICggdXNlQ2FjaGUgJiYgKGNhY2hlID0gKGVsZW1bIGV4cGFuZG8gXSB8fCAoZWxlbVsgZXhwYW5kbyBdID0ge30pKVsgdHlwZSBdKSAmJiBjYWNoZVswXSA9PT0gZGlycnVucyApIHtcclxuXHRcdFx0XHRcdFx0XHRkaWZmID0gY2FjaGVbMV07XHJcblxyXG5cdFx0XHRcdFx0XHQvLyB4bWwgOm50aC1jaGlsZCguLi4pIG9yIDpudGgtbGFzdC1jaGlsZCguLi4pIG9yIDpudGgoLWxhc3QpPy1vZi10eXBlKC4uLilcclxuXHRcdFx0XHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRcdFx0XHQvLyBVc2UgdGhlIHNhbWUgbG9vcCBhcyBhYm92ZSB0byBzZWVrIGBlbGVtYCBmcm9tIHRoZSBzdGFydFxyXG5cdFx0XHRcdFx0XHRcdHdoaWxlICggKG5vZGUgPSArK25vZGVJbmRleCAmJiBub2RlICYmIG5vZGVbIGRpciBdIHx8XHJcblx0XHRcdFx0XHRcdFx0XHQoZGlmZiA9IG5vZGVJbmRleCA9IDApIHx8IHN0YXJ0LnBvcCgpKSApIHtcclxuXHJcblx0XHRcdFx0XHRcdFx0XHRpZiAoICggb2ZUeXBlID8gbm9kZS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSBuYW1lIDogbm9kZS5ub2RlVHlwZSA9PT0gMSApICYmICsrZGlmZiApIHtcclxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gQ2FjaGUgdGhlIGluZGV4IG9mIGVhY2ggZW5jb3VudGVyZWQgZWxlbWVudFxyXG5cdFx0XHRcdFx0XHRcdFx0XHRpZiAoIHVzZUNhY2hlICkge1xyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdChub2RlWyBleHBhbmRvIF0gfHwgKG5vZGVbIGV4cGFuZG8gXSA9IHt9KSlbIHR5cGUgXSA9IFsgZGlycnVucywgZGlmZiBdO1xyXG5cdFx0XHRcdFx0XHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdFx0XHRcdFx0XHRpZiAoIG5vZGUgPT09IGVsZW0gKSB7XHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0YnJlYWs7XHJcblx0XHRcdFx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0XHRcdC8vIEluY29ycG9yYXRlIHRoZSBvZmZzZXQsIHRoZW4gY2hlY2sgYWdhaW5zdCBjeWNsZSBzaXplXHJcblx0XHRcdFx0XHRcdGRpZmYgLT0gbGFzdDtcclxuXHRcdFx0XHRcdFx0cmV0dXJuIGRpZmYgPT09IGZpcnN0IHx8ICggZGlmZiAlIGZpcnN0ID09PSAwICYmIGRpZmYgLyBmaXJzdCA+PSAwICk7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fTtcclxuXHRcdH0sXHJcblxyXG5cdFx0XCJQU0VVRE9cIjogZnVuY3Rpb24oIHBzZXVkbywgYXJndW1lbnQgKSB7XHJcblx0XHRcdC8vIHBzZXVkby1jbGFzcyBuYW1lcyBhcmUgY2FzZS1pbnNlbnNpdGl2ZVxyXG5cdFx0XHQvLyBodHRwOi8vd3d3LnczLm9yZy9UUi9zZWxlY3RvcnMvI3BzZXVkby1jbGFzc2VzXHJcblx0XHRcdC8vIFByaW9yaXRpemUgYnkgY2FzZSBzZW5zaXRpdml0eSBpbiBjYXNlIGN1c3RvbSBwc2V1ZG9zIGFyZSBhZGRlZCB3aXRoIHVwcGVyY2FzZSBsZXR0ZXJzXHJcblx0XHRcdC8vIFJlbWVtYmVyIHRoYXQgc2V0RmlsdGVycyBpbmhlcml0cyBmcm9tIHBzZXVkb3NcclxuXHRcdFx0dmFyIGFyZ3MsXHJcblx0XHRcdFx0Zm4gPSBFeHByLnBzZXVkb3NbIHBzZXVkbyBdIHx8IEV4cHIuc2V0RmlsdGVyc1sgcHNldWRvLnRvTG93ZXJDYXNlKCkgXSB8fFxyXG5cdFx0XHRcdFx0U2l6emxlLmVycm9yKCBcInVuc3VwcG9ydGVkIHBzZXVkbzogXCIgKyBwc2V1ZG8gKTtcclxuXHJcblx0XHRcdC8vIFRoZSB1c2VyIG1heSB1c2UgY3JlYXRlUHNldWRvIHRvIGluZGljYXRlIHRoYXRcclxuXHRcdFx0Ly8gYXJndW1lbnRzIGFyZSBuZWVkZWQgdG8gY3JlYXRlIHRoZSBmaWx0ZXIgZnVuY3Rpb25cclxuXHRcdFx0Ly8ganVzdCBhcyBTaXp6bGUgZG9lc1xyXG5cdFx0XHRpZiAoIGZuWyBleHBhbmRvIF0gKSB7XHJcblx0XHRcdFx0cmV0dXJuIGZuKCBhcmd1bWVudCApO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHQvLyBCdXQgbWFpbnRhaW4gc3VwcG9ydCBmb3Igb2xkIHNpZ25hdHVyZXNcclxuXHRcdFx0aWYgKCBmbi5sZW5ndGggPiAxICkge1xyXG5cdFx0XHRcdGFyZ3MgPSBbIHBzZXVkbywgcHNldWRvLCBcIlwiLCBhcmd1bWVudCBdO1xyXG5cdFx0XHRcdHJldHVybiBFeHByLnNldEZpbHRlcnMuaGFzT3duUHJvcGVydHkoIHBzZXVkby50b0xvd2VyQ2FzZSgpICkgP1xyXG5cdFx0XHRcdFx0bWFya0Z1bmN0aW9uKGZ1bmN0aW9uKCBzZWVkLCBtYXRjaGVzICkge1xyXG5cdFx0XHRcdFx0XHR2YXIgaWR4LFxyXG5cdFx0XHRcdFx0XHRcdG1hdGNoZWQgPSBmbiggc2VlZCwgYXJndW1lbnQgKSxcclxuXHRcdFx0XHRcdFx0XHRpID0gbWF0Y2hlZC5sZW5ndGg7XHJcblx0XHRcdFx0XHRcdHdoaWxlICggaS0tICkge1xyXG5cdFx0XHRcdFx0XHRcdGlkeCA9IGluZGV4T2YoIHNlZWQsIG1hdGNoZWRbaV0gKTtcclxuXHRcdFx0XHRcdFx0XHRzZWVkWyBpZHggXSA9ICEoIG1hdGNoZXNbIGlkeCBdID0gbWF0Y2hlZFtpXSApO1xyXG5cdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHR9KSA6XHJcblx0XHRcdFx0XHRmdW5jdGlvbiggZWxlbSApIHtcclxuXHRcdFx0XHRcdFx0cmV0dXJuIGZuKCBlbGVtLCAwLCBhcmdzICk7XHJcblx0XHRcdFx0XHR9O1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRyZXR1cm4gZm47XHJcblx0XHR9XHJcblx0fSxcclxuXHJcblx0cHNldWRvczoge1xyXG5cdFx0Ly8gUG90ZW50aWFsbHkgY29tcGxleCBwc2V1ZG9zXHJcblx0XHRcIm5vdFwiOiBtYXJrRnVuY3Rpb24oZnVuY3Rpb24oIHNlbGVjdG9yICkge1xyXG5cdFx0XHQvLyBUcmltIHRoZSBzZWxlY3RvciBwYXNzZWQgdG8gY29tcGlsZVxyXG5cdFx0XHQvLyB0byBhdm9pZCB0cmVhdGluZyBsZWFkaW5nIGFuZCB0cmFpbGluZ1xyXG5cdFx0XHQvLyBzcGFjZXMgYXMgY29tYmluYXRvcnNcclxuXHRcdFx0dmFyIGlucHV0ID0gW10sXHJcblx0XHRcdFx0cmVzdWx0cyA9IFtdLFxyXG5cdFx0XHRcdG1hdGNoZXIgPSBjb21waWxlKCBzZWxlY3Rvci5yZXBsYWNlKCBydHJpbSwgXCIkMVwiICkgKTtcclxuXHJcblx0XHRcdHJldHVybiBtYXRjaGVyWyBleHBhbmRvIF0gP1xyXG5cdFx0XHRcdG1hcmtGdW5jdGlvbihmdW5jdGlvbiggc2VlZCwgbWF0Y2hlcywgY29udGV4dCwgeG1sICkge1xyXG5cdFx0XHRcdFx0dmFyIGVsZW0sXHJcblx0XHRcdFx0XHRcdHVubWF0Y2hlZCA9IG1hdGNoZXIoIHNlZWQsIG51bGwsIHhtbCwgW10gKSxcclxuXHRcdFx0XHRcdFx0aSA9IHNlZWQubGVuZ3RoO1xyXG5cclxuXHRcdFx0XHRcdC8vIE1hdGNoIGVsZW1lbnRzIHVubWF0Y2hlZCBieSBgbWF0Y2hlcmBcclxuXHRcdFx0XHRcdHdoaWxlICggaS0tICkge1xyXG5cdFx0XHRcdFx0XHRpZiAoIChlbGVtID0gdW5tYXRjaGVkW2ldKSApIHtcclxuXHRcdFx0XHRcdFx0XHRzZWVkW2ldID0gIShtYXRjaGVzW2ldID0gZWxlbSk7XHJcblx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9KSA6XHJcblx0XHRcdFx0ZnVuY3Rpb24oIGVsZW0sIGNvbnRleHQsIHhtbCApIHtcclxuXHRcdFx0XHRcdGlucHV0WzBdID0gZWxlbTtcclxuXHRcdFx0XHRcdG1hdGNoZXIoIGlucHV0LCBudWxsLCB4bWwsIHJlc3VsdHMgKTtcclxuXHRcdFx0XHRcdC8vIERvbid0IGtlZXAgdGhlIGVsZW1lbnQgKGlzc3VlICMyOTkpXHJcblx0XHRcdFx0XHRpbnB1dFswXSA9IG51bGw7XHJcblx0XHRcdFx0XHRyZXR1cm4gIXJlc3VsdHMucG9wKCk7XHJcblx0XHRcdFx0fTtcclxuXHRcdH0pLFxyXG5cclxuXHRcdFwiaGFzXCI6IG1hcmtGdW5jdGlvbihmdW5jdGlvbiggc2VsZWN0b3IgKSB7XHJcblx0XHRcdHJldHVybiBmdW5jdGlvbiggZWxlbSApIHtcclxuXHRcdFx0XHRyZXR1cm4gU2l6emxlKCBzZWxlY3RvciwgZWxlbSApLmxlbmd0aCA+IDA7XHJcblx0XHRcdH07XHJcblx0XHR9KSxcclxuXHJcblx0XHRcImNvbnRhaW5zXCI6IG1hcmtGdW5jdGlvbihmdW5jdGlvbiggdGV4dCApIHtcclxuXHRcdFx0dGV4dCA9IHRleHQucmVwbGFjZSggcnVuZXNjYXBlLCBmdW5lc2NhcGUgKTtcclxuXHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xyXG5cdFx0XHRcdHJldHVybiAoIGVsZW0udGV4dENvbnRlbnQgfHwgZWxlbS5pbm5lclRleHQgfHwgZ2V0VGV4dCggZWxlbSApICkuaW5kZXhPZiggdGV4dCApID4gLTE7XHJcblx0XHRcdH07XHJcblx0XHR9KSxcclxuXHJcblx0XHQvLyBcIldoZXRoZXIgYW4gZWxlbWVudCBpcyByZXByZXNlbnRlZCBieSBhIDpsYW5nKCkgc2VsZWN0b3JcclxuXHRcdC8vIGlzIGJhc2VkIHNvbGVseSBvbiB0aGUgZWxlbWVudCdzIGxhbmd1YWdlIHZhbHVlXHJcblx0XHQvLyBiZWluZyBlcXVhbCB0byB0aGUgaWRlbnRpZmllciBDLFxyXG5cdFx0Ly8gb3IgYmVnaW5uaW5nIHdpdGggdGhlIGlkZW50aWZpZXIgQyBpbW1lZGlhdGVseSBmb2xsb3dlZCBieSBcIi1cIi5cclxuXHRcdC8vIFRoZSBtYXRjaGluZyBvZiBDIGFnYWluc3QgdGhlIGVsZW1lbnQncyBsYW5ndWFnZSB2YWx1ZSBpcyBwZXJmb3JtZWQgY2FzZS1pbnNlbnNpdGl2ZWx5LlxyXG5cdFx0Ly8gVGhlIGlkZW50aWZpZXIgQyBkb2VzIG5vdCBoYXZlIHRvIGJlIGEgdmFsaWQgbGFuZ3VhZ2UgbmFtZS5cIlxyXG5cdFx0Ly8gaHR0cDovL3d3dy53My5vcmcvVFIvc2VsZWN0b3JzLyNsYW5nLXBzZXVkb1xyXG5cdFx0XCJsYW5nXCI6IG1hcmtGdW5jdGlvbiggZnVuY3Rpb24oIGxhbmcgKSB7XHJcblx0XHRcdC8vIGxhbmcgdmFsdWUgbXVzdCBiZSBhIHZhbGlkIGlkZW50aWZpZXJcclxuXHRcdFx0aWYgKCAhcmlkZW50aWZpZXIudGVzdChsYW5nIHx8IFwiXCIpICkge1xyXG5cdFx0XHRcdFNpenpsZS5lcnJvciggXCJ1bnN1cHBvcnRlZCBsYW5nOiBcIiArIGxhbmcgKTtcclxuXHRcdFx0fVxyXG5cdFx0XHRsYW5nID0gbGFuZy5yZXBsYWNlKCBydW5lc2NhcGUsIGZ1bmVzY2FwZSApLnRvTG93ZXJDYXNlKCk7XHJcblx0XHRcdHJldHVybiBmdW5jdGlvbiggZWxlbSApIHtcclxuXHRcdFx0XHR2YXIgZWxlbUxhbmc7XHJcblx0XHRcdFx0ZG8ge1xyXG5cdFx0XHRcdFx0aWYgKCAoZWxlbUxhbmcgPSBkb2N1bWVudElzSFRNTCA/XHJcblx0XHRcdFx0XHRcdGVsZW0ubGFuZyA6XHJcblx0XHRcdFx0XHRcdGVsZW0uZ2V0QXR0cmlidXRlKFwieG1sOmxhbmdcIikgfHwgZWxlbS5nZXRBdHRyaWJ1dGUoXCJsYW5nXCIpKSApIHtcclxuXHJcblx0XHRcdFx0XHRcdGVsZW1MYW5nID0gZWxlbUxhbmcudG9Mb3dlckNhc2UoKTtcclxuXHRcdFx0XHRcdFx0cmV0dXJuIGVsZW1MYW5nID09PSBsYW5nIHx8IGVsZW1MYW5nLmluZGV4T2YoIGxhbmcgKyBcIi1cIiApID09PSAwO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH0gd2hpbGUgKCAoZWxlbSA9IGVsZW0ucGFyZW50Tm9kZSkgJiYgZWxlbS5ub2RlVHlwZSA9PT0gMSApO1xyXG5cdFx0XHRcdHJldHVybiBmYWxzZTtcclxuXHRcdFx0fTtcclxuXHRcdH0pLFxyXG5cclxuXHRcdC8vIE1pc2NlbGxhbmVvdXNcclxuXHRcdFwidGFyZ2V0XCI6IGZ1bmN0aW9uKCBlbGVtICkge1xyXG5cdFx0XHR2YXIgaGFzaCA9IHdpbmRvdy5sb2NhdGlvbiAmJiB3aW5kb3cubG9jYXRpb24uaGFzaDtcclxuXHRcdFx0cmV0dXJuIGhhc2ggJiYgaGFzaC5zbGljZSggMSApID09PSBlbGVtLmlkO1xyXG5cdFx0fSxcclxuXHJcblx0XHRcInJvb3RcIjogZnVuY3Rpb24oIGVsZW0gKSB7XHJcblx0XHRcdHJldHVybiBlbGVtID09PSBkb2NFbGVtO1xyXG5cdFx0fSxcclxuXHJcblx0XHRcImZvY3VzXCI6IGZ1bmN0aW9uKCBlbGVtICkge1xyXG5cdFx0XHRyZXR1cm4gZWxlbSA9PT0gZG9jdW1lbnQuYWN0aXZlRWxlbWVudCAmJiAoIWRvY3VtZW50Lmhhc0ZvY3VzIHx8IGRvY3VtZW50Lmhhc0ZvY3VzKCkpICYmICEhKGVsZW0udHlwZSB8fCBlbGVtLmhyZWYgfHwgfmVsZW0udGFiSW5kZXgpO1xyXG5cdFx0fSxcclxuXHJcblx0XHQvLyBCb29sZWFuIHByb3BlcnRpZXNcclxuXHRcdFwiZW5hYmxlZFwiOiBmdW5jdGlvbiggZWxlbSApIHtcclxuXHRcdFx0cmV0dXJuIGVsZW0uZGlzYWJsZWQgPT09IGZhbHNlO1xyXG5cdFx0fSxcclxuXHJcblx0XHRcImRpc2FibGVkXCI6IGZ1bmN0aW9uKCBlbGVtICkge1xyXG5cdFx0XHRyZXR1cm4gZWxlbS5kaXNhYmxlZCA9PT0gdHJ1ZTtcclxuXHRcdH0sXHJcblxyXG5cdFx0XCJjaGVja2VkXCI6IGZ1bmN0aW9uKCBlbGVtICkge1xyXG5cdFx0XHQvLyBJbiBDU1MzLCA6Y2hlY2tlZCBzaG91bGQgcmV0dXJuIGJvdGggY2hlY2tlZCBhbmQgc2VsZWN0ZWQgZWxlbWVudHNcclxuXHRcdFx0Ly8gaHR0cDovL3d3dy53My5vcmcvVFIvMjAxMS9SRUMtY3NzMy1zZWxlY3RvcnMtMjAxMTA5MjkvI2NoZWNrZWRcclxuXHRcdFx0dmFyIG5vZGVOYW1lID0gZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO1xyXG5cdFx0XHRyZXR1cm4gKG5vZGVOYW1lID09PSBcImlucHV0XCIgJiYgISFlbGVtLmNoZWNrZWQpIHx8IChub2RlTmFtZSA9PT0gXCJvcHRpb25cIiAmJiAhIWVsZW0uc2VsZWN0ZWQpO1xyXG5cdFx0fSxcclxuXHJcblx0XHRcInNlbGVjdGVkXCI6IGZ1bmN0aW9uKCBlbGVtICkge1xyXG5cdFx0XHQvLyBBY2Nlc3NpbmcgdGhpcyBwcm9wZXJ0eSBtYWtlcyBzZWxlY3RlZC1ieS1kZWZhdWx0XHJcblx0XHRcdC8vIG9wdGlvbnMgaW4gU2FmYXJpIHdvcmsgcHJvcGVybHlcclxuXHRcdFx0aWYgKCBlbGVtLnBhcmVudE5vZGUgKSB7XHJcblx0XHRcdFx0ZWxlbS5wYXJlbnROb2RlLnNlbGVjdGVkSW5kZXg7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdHJldHVybiBlbGVtLnNlbGVjdGVkID09PSB0cnVlO1xyXG5cdFx0fSxcclxuXHJcblx0XHQvLyBDb250ZW50c1xyXG5cdFx0XCJlbXB0eVwiOiBmdW5jdGlvbiggZWxlbSApIHtcclxuXHRcdFx0Ly8gaHR0cDovL3d3dy53My5vcmcvVFIvc2VsZWN0b3JzLyNlbXB0eS1wc2V1ZG9cclxuXHRcdFx0Ly8gOmVtcHR5IGlzIG5lZ2F0ZWQgYnkgZWxlbWVudCAoMSkgb3IgY29udGVudCBub2RlcyAodGV4dDogMzsgY2RhdGE6IDQ7IGVudGl0eSByZWY6IDUpLFxyXG5cdFx0XHQvLyAgIGJ1dCBub3QgYnkgb3RoZXJzIChjb21tZW50OiA4OyBwcm9jZXNzaW5nIGluc3RydWN0aW9uOiA3OyBldGMuKVxyXG5cdFx0XHQvLyBub2RlVHlwZSA8IDYgd29ya3MgYmVjYXVzZSBhdHRyaWJ1dGVzICgyKSBkbyBub3QgYXBwZWFyIGFzIGNoaWxkcmVuXHJcblx0XHRcdGZvciAoIGVsZW0gPSBlbGVtLmZpcnN0Q2hpbGQ7IGVsZW07IGVsZW0gPSBlbGVtLm5leHRTaWJsaW5nICkge1xyXG5cdFx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA8IDYgKSB7XHJcblx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHRcdHJldHVybiB0cnVlO1xyXG5cdFx0fSxcclxuXHJcblx0XHRcInBhcmVudFwiOiBmdW5jdGlvbiggZWxlbSApIHtcclxuXHRcdFx0cmV0dXJuICFFeHByLnBzZXVkb3NbXCJlbXB0eVwiXSggZWxlbSApO1xyXG5cdFx0fSxcclxuXHJcblx0XHQvLyBFbGVtZW50L2lucHV0IHR5cGVzXHJcblx0XHRcImhlYWRlclwiOiBmdW5jdGlvbiggZWxlbSApIHtcclxuXHRcdFx0cmV0dXJuIHJoZWFkZXIudGVzdCggZWxlbS5ub2RlTmFtZSApO1xyXG5cdFx0fSxcclxuXHJcblx0XHRcImlucHV0XCI6IGZ1bmN0aW9uKCBlbGVtICkge1xyXG5cdFx0XHRyZXR1cm4gcmlucHV0cy50ZXN0KCBlbGVtLm5vZGVOYW1lICk7XHJcblx0XHR9LFxyXG5cclxuXHRcdFwiYnV0dG9uXCI6IGZ1bmN0aW9uKCBlbGVtICkge1xyXG5cdFx0XHR2YXIgbmFtZSA9IGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtcclxuXHRcdFx0cmV0dXJuIG5hbWUgPT09IFwiaW5wdXRcIiAmJiBlbGVtLnR5cGUgPT09IFwiYnV0dG9uXCIgfHwgbmFtZSA9PT0gXCJidXR0b25cIjtcclxuXHRcdH0sXHJcblxyXG5cdFx0XCJ0ZXh0XCI6IGZ1bmN0aW9uKCBlbGVtICkge1xyXG5cdFx0XHR2YXIgYXR0cjtcclxuXHRcdFx0cmV0dXJuIGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gXCJpbnB1dFwiICYmXHJcblx0XHRcdFx0ZWxlbS50eXBlID09PSBcInRleHRcIiAmJlxyXG5cclxuXHRcdFx0XHQvLyBTdXBwb3J0OiBJRTw4XHJcblx0XHRcdFx0Ly8gTmV3IEhUTUw1IGF0dHJpYnV0ZSB2YWx1ZXMgKGUuZy4sIFwic2VhcmNoXCIpIGFwcGVhciB3aXRoIGVsZW0udHlwZSA9PT0gXCJ0ZXh0XCJcclxuXHRcdFx0XHQoIChhdHRyID0gZWxlbS5nZXRBdHRyaWJ1dGUoXCJ0eXBlXCIpKSA9PSBudWxsIHx8IGF0dHIudG9Mb3dlckNhc2UoKSA9PT0gXCJ0ZXh0XCIgKTtcclxuXHRcdH0sXHJcblxyXG5cdFx0Ly8gUG9zaXRpb24taW4tY29sbGVjdGlvblxyXG5cdFx0XCJmaXJzdFwiOiBjcmVhdGVQb3NpdGlvbmFsUHNldWRvKGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRyZXR1cm4gWyAwIF07XHJcblx0XHR9KSxcclxuXHJcblx0XHRcImxhc3RcIjogY3JlYXRlUG9zaXRpb25hbFBzZXVkbyhmdW5jdGlvbiggbWF0Y2hJbmRleGVzLCBsZW5ndGggKSB7XHJcblx0XHRcdHJldHVybiBbIGxlbmd0aCAtIDEgXTtcclxuXHRcdH0pLFxyXG5cclxuXHRcdFwiZXFcIjogY3JlYXRlUG9zaXRpb25hbFBzZXVkbyhmdW5jdGlvbiggbWF0Y2hJbmRleGVzLCBsZW5ndGgsIGFyZ3VtZW50ICkge1xyXG5cdFx0XHRyZXR1cm4gWyBhcmd1bWVudCA8IDAgPyBhcmd1bWVudCArIGxlbmd0aCA6IGFyZ3VtZW50IF07XHJcblx0XHR9KSxcclxuXHJcblx0XHRcImV2ZW5cIjogY3JlYXRlUG9zaXRpb25hbFBzZXVkbyhmdW5jdGlvbiggbWF0Y2hJbmRleGVzLCBsZW5ndGggKSB7XHJcblx0XHRcdHZhciBpID0gMDtcclxuXHRcdFx0Zm9yICggOyBpIDwgbGVuZ3RoOyBpICs9IDIgKSB7XHJcblx0XHRcdFx0bWF0Y2hJbmRleGVzLnB1c2goIGkgKTtcclxuXHRcdFx0fVxyXG5cdFx0XHRyZXR1cm4gbWF0Y2hJbmRleGVzO1xyXG5cdFx0fSksXHJcblxyXG5cdFx0XCJvZGRcIjogY3JlYXRlUG9zaXRpb25hbFBzZXVkbyhmdW5jdGlvbiggbWF0Y2hJbmRleGVzLCBsZW5ndGggKSB7XHJcblx0XHRcdHZhciBpID0gMTtcclxuXHRcdFx0Zm9yICggOyBpIDwgbGVuZ3RoOyBpICs9IDIgKSB7XHJcblx0XHRcdFx0bWF0Y2hJbmRleGVzLnB1c2goIGkgKTtcclxuXHRcdFx0fVxyXG5cdFx0XHRyZXR1cm4gbWF0Y2hJbmRleGVzO1xyXG5cdFx0fSksXHJcblxyXG5cdFx0XCJsdFwiOiBjcmVhdGVQb3NpdGlvbmFsUHNldWRvKGZ1bmN0aW9uKCBtYXRjaEluZGV4ZXMsIGxlbmd0aCwgYXJndW1lbnQgKSB7XHJcblx0XHRcdHZhciBpID0gYXJndW1lbnQgPCAwID8gYXJndW1lbnQgKyBsZW5ndGggOiBhcmd1bWVudDtcclxuXHRcdFx0Zm9yICggOyAtLWkgPj0gMDsgKSB7XHJcblx0XHRcdFx0bWF0Y2hJbmRleGVzLnB1c2goIGkgKTtcclxuXHRcdFx0fVxyXG5cdFx0XHRyZXR1cm4gbWF0Y2hJbmRleGVzO1xyXG5cdFx0fSksXHJcblxyXG5cdFx0XCJndFwiOiBjcmVhdGVQb3NpdGlvbmFsUHNldWRvKGZ1bmN0aW9uKCBtYXRjaEluZGV4ZXMsIGxlbmd0aCwgYXJndW1lbnQgKSB7XHJcblx0XHRcdHZhciBpID0gYXJndW1lbnQgPCAwID8gYXJndW1lbnQgKyBsZW5ndGggOiBhcmd1bWVudDtcclxuXHRcdFx0Zm9yICggOyArK2kgPCBsZW5ndGg7ICkge1xyXG5cdFx0XHRcdG1hdGNoSW5kZXhlcy5wdXNoKCBpICk7XHJcblx0XHRcdH1cclxuXHRcdFx0cmV0dXJuIG1hdGNoSW5kZXhlcztcclxuXHRcdH0pXHJcblx0fVxyXG59O1xyXG5cclxuRXhwci5wc2V1ZG9zW1wibnRoXCJdID0gRXhwci5wc2V1ZG9zW1wiZXFcIl07XHJcblxyXG4vLyBBZGQgYnV0dG9uL2lucHV0IHR5cGUgcHNldWRvc1xyXG5mb3IgKCBpIGluIHsgcmFkaW86IHRydWUsIGNoZWNrYm94OiB0cnVlLCBmaWxlOiB0cnVlLCBwYXNzd29yZDogdHJ1ZSwgaW1hZ2U6IHRydWUgfSApIHtcclxuXHRFeHByLnBzZXVkb3NbIGkgXSA9IGNyZWF0ZUlucHV0UHNldWRvKCBpICk7XHJcbn1cclxuZm9yICggaSBpbiB7IHN1Ym1pdDogdHJ1ZSwgcmVzZXQ6IHRydWUgfSApIHtcclxuXHRFeHByLnBzZXVkb3NbIGkgXSA9IGNyZWF0ZUJ1dHRvblBzZXVkbyggaSApO1xyXG59XHJcblxyXG4vLyBFYXN5IEFQSSBmb3IgY3JlYXRpbmcgbmV3IHNldEZpbHRlcnNcclxuZnVuY3Rpb24gc2V0RmlsdGVycygpIHt9XHJcbnNldEZpbHRlcnMucHJvdG90eXBlID0gRXhwci5maWx0ZXJzID0gRXhwci5wc2V1ZG9zO1xyXG5FeHByLnNldEZpbHRlcnMgPSBuZXcgc2V0RmlsdGVycygpO1xyXG5cclxudG9rZW5pemUgPSBTaXp6bGUudG9rZW5pemUgPSBmdW5jdGlvbiggc2VsZWN0b3IsIHBhcnNlT25seSApIHtcclxuXHR2YXIgbWF0Y2hlZCwgbWF0Y2gsIHRva2VucywgdHlwZSxcclxuXHRcdHNvRmFyLCBncm91cHMsIHByZUZpbHRlcnMsXHJcblx0XHRjYWNoZWQgPSB0b2tlbkNhY2hlWyBzZWxlY3RvciArIFwiIFwiIF07XHJcblxyXG5cdGlmICggY2FjaGVkICkge1xyXG5cdFx0cmV0dXJuIHBhcnNlT25seSA/IDAgOiBjYWNoZWQuc2xpY2UoIDAgKTtcclxuXHR9XHJcblxyXG5cdHNvRmFyID0gc2VsZWN0b3I7XHJcblx0Z3JvdXBzID0gW107XHJcblx0cHJlRmlsdGVycyA9IEV4cHIucHJlRmlsdGVyO1xyXG5cclxuXHR3aGlsZSAoIHNvRmFyICkge1xyXG5cclxuXHRcdC8vIENvbW1hIGFuZCBmaXJzdCBydW5cclxuXHRcdGlmICggIW1hdGNoZWQgfHwgKG1hdGNoID0gcmNvbW1hLmV4ZWMoIHNvRmFyICkpICkge1xyXG5cdFx0XHRpZiAoIG1hdGNoICkge1xyXG5cdFx0XHRcdC8vIERvbid0IGNvbnN1bWUgdHJhaWxpbmcgY29tbWFzIGFzIHZhbGlkXHJcblx0XHRcdFx0c29GYXIgPSBzb0Zhci5zbGljZSggbWF0Y2hbMF0ubGVuZ3RoICkgfHwgc29GYXI7XHJcblx0XHRcdH1cclxuXHRcdFx0Z3JvdXBzLnB1c2goICh0b2tlbnMgPSBbXSkgKTtcclxuXHRcdH1cclxuXHJcblx0XHRtYXRjaGVkID0gZmFsc2U7XHJcblxyXG5cdFx0Ly8gQ29tYmluYXRvcnNcclxuXHRcdGlmICggKG1hdGNoID0gcmNvbWJpbmF0b3JzLmV4ZWMoIHNvRmFyICkpICkge1xyXG5cdFx0XHRtYXRjaGVkID0gbWF0Y2guc2hpZnQoKTtcclxuXHRcdFx0dG9rZW5zLnB1c2goe1xyXG5cdFx0XHRcdHZhbHVlOiBtYXRjaGVkLFxyXG5cdFx0XHRcdC8vIENhc3QgZGVzY2VuZGFudCBjb21iaW5hdG9ycyB0byBzcGFjZVxyXG5cdFx0XHRcdHR5cGU6IG1hdGNoWzBdLnJlcGxhY2UoIHJ0cmltLCBcIiBcIiApXHJcblx0XHRcdH0pO1xyXG5cdFx0XHRzb0ZhciA9IHNvRmFyLnNsaWNlKCBtYXRjaGVkLmxlbmd0aCApO1xyXG5cdFx0fVxyXG5cclxuXHRcdC8vIEZpbHRlcnNcclxuXHRcdGZvciAoIHR5cGUgaW4gRXhwci5maWx0ZXIgKSB7XHJcblx0XHRcdGlmICggKG1hdGNoID0gbWF0Y2hFeHByWyB0eXBlIF0uZXhlYyggc29GYXIgKSkgJiYgKCFwcmVGaWx0ZXJzWyB0eXBlIF0gfHxcclxuXHRcdFx0XHQobWF0Y2ggPSBwcmVGaWx0ZXJzWyB0eXBlIF0oIG1hdGNoICkpKSApIHtcclxuXHRcdFx0XHRtYXRjaGVkID0gbWF0Y2guc2hpZnQoKTtcclxuXHRcdFx0XHR0b2tlbnMucHVzaCh7XHJcblx0XHRcdFx0XHR2YWx1ZTogbWF0Y2hlZCxcclxuXHRcdFx0XHRcdHR5cGU6IHR5cGUsXHJcblx0XHRcdFx0XHRtYXRjaGVzOiBtYXRjaFxyXG5cdFx0XHRcdH0pO1xyXG5cdFx0XHRcdHNvRmFyID0gc29GYXIuc2xpY2UoIG1hdGNoZWQubGVuZ3RoICk7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHJcblx0XHRpZiAoICFtYXRjaGVkICkge1xyXG5cdFx0XHRicmVhaztcclxuXHRcdH1cclxuXHR9XHJcblxyXG5cdC8vIFJldHVybiB0aGUgbGVuZ3RoIG9mIHRoZSBpbnZhbGlkIGV4Y2Vzc1xyXG5cdC8vIGlmIHdlJ3JlIGp1c3QgcGFyc2luZ1xyXG5cdC8vIE90aGVyd2lzZSwgdGhyb3cgYW4gZXJyb3Igb3IgcmV0dXJuIHRva2Vuc1xyXG5cdHJldHVybiBwYXJzZU9ubHkgP1xyXG5cdFx0c29GYXIubGVuZ3RoIDpcclxuXHRcdHNvRmFyID9cclxuXHRcdFx0U2l6emxlLmVycm9yKCBzZWxlY3RvciApIDpcclxuXHRcdFx0Ly8gQ2FjaGUgdGhlIHRva2Vuc1xyXG5cdFx0XHR0b2tlbkNhY2hlKCBzZWxlY3RvciwgZ3JvdXBzICkuc2xpY2UoIDAgKTtcclxufTtcclxuXHJcbmZ1bmN0aW9uIHRvU2VsZWN0b3IoIHRva2VucyApIHtcclxuXHR2YXIgaSA9IDAsXHJcblx0XHRsZW4gPSB0b2tlbnMubGVuZ3RoLFxyXG5cdFx0c2VsZWN0b3IgPSBcIlwiO1xyXG5cdGZvciAoIDsgaSA8IGxlbjsgaSsrICkge1xyXG5cdFx0c2VsZWN0b3IgKz0gdG9rZW5zW2ldLnZhbHVlO1xyXG5cdH1cclxuXHRyZXR1cm4gc2VsZWN0b3I7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGFkZENvbWJpbmF0b3IoIG1hdGNoZXIsIGNvbWJpbmF0b3IsIGJhc2UgKSB7XHJcblx0dmFyIGRpciA9IGNvbWJpbmF0b3IuZGlyLFxyXG5cdFx0Y2hlY2tOb25FbGVtZW50cyA9IGJhc2UgJiYgZGlyID09PSBcInBhcmVudE5vZGVcIixcclxuXHRcdGRvbmVOYW1lID0gZG9uZSsrO1xyXG5cclxuXHRyZXR1cm4gY29tYmluYXRvci5maXJzdCA/XHJcblx0XHQvLyBDaGVjayBhZ2FpbnN0IGNsb3Nlc3QgYW5jZXN0b3IvcHJlY2VkaW5nIGVsZW1lbnRcclxuXHRcdGZ1bmN0aW9uKCBlbGVtLCBjb250ZXh0LCB4bWwgKSB7XHJcblx0XHRcdHdoaWxlICggKGVsZW0gPSBlbGVtWyBkaXIgXSkgKSB7XHJcblx0XHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxIHx8IGNoZWNrTm9uRWxlbWVudHMgKSB7XHJcblx0XHRcdFx0XHRyZXR1cm4gbWF0Y2hlciggZWxlbSwgY29udGV4dCwgeG1sICk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHR9IDpcclxuXHJcblx0XHQvLyBDaGVjayBhZ2FpbnN0IGFsbCBhbmNlc3Rvci9wcmVjZWRpbmcgZWxlbWVudHNcclxuXHRcdGZ1bmN0aW9uKCBlbGVtLCBjb250ZXh0LCB4bWwgKSB7XHJcblx0XHRcdHZhciBvbGRDYWNoZSwgb3V0ZXJDYWNoZSxcclxuXHRcdFx0XHRuZXdDYWNoZSA9IFsgZGlycnVucywgZG9uZU5hbWUgXTtcclxuXHJcblx0XHRcdC8vIFdlIGNhbid0IHNldCBhcmJpdHJhcnkgZGF0YSBvbiBYTUwgbm9kZXMsIHNvIHRoZXkgZG9uJ3QgYmVuZWZpdCBmcm9tIGRpciBjYWNoaW5nXHJcblx0XHRcdGlmICggeG1sICkge1xyXG5cdFx0XHRcdHdoaWxlICggKGVsZW0gPSBlbGVtWyBkaXIgXSkgKSB7XHJcblx0XHRcdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgfHwgY2hlY2tOb25FbGVtZW50cyApIHtcclxuXHRcdFx0XHRcdFx0aWYgKCBtYXRjaGVyKCBlbGVtLCBjb250ZXh0LCB4bWwgKSApIHtcclxuXHRcdFx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcclxuXHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH1cclxuXHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHR3aGlsZSAoIChlbGVtID0gZWxlbVsgZGlyIF0pICkge1xyXG5cdFx0XHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxIHx8IGNoZWNrTm9uRWxlbWVudHMgKSB7XHJcblx0XHRcdFx0XHRcdG91dGVyQ2FjaGUgPSBlbGVtWyBleHBhbmRvIF0gfHwgKGVsZW1bIGV4cGFuZG8gXSA9IHt9KTtcclxuXHRcdFx0XHRcdFx0aWYgKCAob2xkQ2FjaGUgPSBvdXRlckNhY2hlWyBkaXIgXSkgJiZcclxuXHRcdFx0XHRcdFx0XHRvbGRDYWNoZVsgMCBdID09PSBkaXJydW5zICYmIG9sZENhY2hlWyAxIF0gPT09IGRvbmVOYW1lICkge1xyXG5cclxuXHRcdFx0XHRcdFx0XHQvLyBBc3NpZ24gdG8gbmV3Q2FjaGUgc28gcmVzdWx0cyBiYWNrLXByb3BhZ2F0ZSB0byBwcmV2aW91cyBlbGVtZW50c1xyXG5cdFx0XHRcdFx0XHRcdHJldHVybiAobmV3Q2FjaGVbIDIgXSA9IG9sZENhY2hlWyAyIF0pO1xyXG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdFx0XHRcdC8vIFJldXNlIG5ld2NhY2hlIHNvIHJlc3VsdHMgYmFjay1wcm9wYWdhdGUgdG8gcHJldmlvdXMgZWxlbWVudHNcclxuXHRcdFx0XHRcdFx0XHRvdXRlckNhY2hlWyBkaXIgXSA9IG5ld0NhY2hlO1xyXG5cclxuXHRcdFx0XHRcdFx0XHQvLyBBIG1hdGNoIG1lYW5zIHdlJ3JlIGRvbmU7IGEgZmFpbCBtZWFucyB3ZSBoYXZlIHRvIGtlZXAgY2hlY2tpbmdcclxuXHRcdFx0XHRcdFx0XHRpZiAoIChuZXdDYWNoZVsgMiBdID0gbWF0Y2hlciggZWxlbSwgY29udGV4dCwgeG1sICkpICkge1xyXG5cdFx0XHRcdFx0XHRcdFx0cmV0dXJuIHRydWU7XHJcblx0XHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHR9O1xyXG59XHJcblxyXG5mdW5jdGlvbiBlbGVtZW50TWF0Y2hlciggbWF0Y2hlcnMgKSB7XHJcblx0cmV0dXJuIG1hdGNoZXJzLmxlbmd0aCA+IDEgP1xyXG5cdFx0ZnVuY3Rpb24oIGVsZW0sIGNvbnRleHQsIHhtbCApIHtcclxuXHRcdFx0dmFyIGkgPSBtYXRjaGVycy5sZW5ndGg7XHJcblx0XHRcdHdoaWxlICggaS0tICkge1xyXG5cdFx0XHRcdGlmICggIW1hdGNoZXJzW2ldKCBlbGVtLCBjb250ZXh0LCB4bWwgKSApIHtcclxuXHRcdFx0XHRcdHJldHVybiBmYWxzZTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdFx0cmV0dXJuIHRydWU7XHJcblx0XHR9IDpcclxuXHRcdG1hdGNoZXJzWzBdO1xyXG59XHJcblxyXG5mdW5jdGlvbiBtdWx0aXBsZUNvbnRleHRzKCBzZWxlY3RvciwgY29udGV4dHMsIHJlc3VsdHMgKSB7XHJcblx0dmFyIGkgPSAwLFxyXG5cdFx0bGVuID0gY29udGV4dHMubGVuZ3RoO1xyXG5cdGZvciAoIDsgaSA8IGxlbjsgaSsrICkge1xyXG5cdFx0U2l6emxlKCBzZWxlY3RvciwgY29udGV4dHNbaV0sIHJlc3VsdHMgKTtcclxuXHR9XHJcblx0cmV0dXJuIHJlc3VsdHM7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGNvbmRlbnNlKCB1bm1hdGNoZWQsIG1hcCwgZmlsdGVyLCBjb250ZXh0LCB4bWwgKSB7XHJcblx0dmFyIGVsZW0sXHJcblx0XHRuZXdVbm1hdGNoZWQgPSBbXSxcclxuXHRcdGkgPSAwLFxyXG5cdFx0bGVuID0gdW5tYXRjaGVkLmxlbmd0aCxcclxuXHRcdG1hcHBlZCA9IG1hcCAhPSBudWxsO1xyXG5cclxuXHRmb3IgKCA7IGkgPCBsZW47IGkrKyApIHtcclxuXHRcdGlmICggKGVsZW0gPSB1bm1hdGNoZWRbaV0pICkge1xyXG5cdFx0XHRpZiAoICFmaWx0ZXIgfHwgZmlsdGVyKCBlbGVtLCBjb250ZXh0LCB4bWwgKSApIHtcclxuXHRcdFx0XHRuZXdVbm1hdGNoZWQucHVzaCggZWxlbSApO1xyXG5cdFx0XHRcdGlmICggbWFwcGVkICkge1xyXG5cdFx0XHRcdFx0bWFwLnB1c2goIGkgKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHR9XHJcblxyXG5cdHJldHVybiBuZXdVbm1hdGNoZWQ7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHNldE1hdGNoZXIoIHByZUZpbHRlciwgc2VsZWN0b3IsIG1hdGNoZXIsIHBvc3RGaWx0ZXIsIHBvc3RGaW5kZXIsIHBvc3RTZWxlY3RvciApIHtcclxuXHRpZiAoIHBvc3RGaWx0ZXIgJiYgIXBvc3RGaWx0ZXJbIGV4cGFuZG8gXSApIHtcclxuXHRcdHBvc3RGaWx0ZXIgPSBzZXRNYXRjaGVyKCBwb3N0RmlsdGVyICk7XHJcblx0fVxyXG5cdGlmICggcG9zdEZpbmRlciAmJiAhcG9zdEZpbmRlclsgZXhwYW5kbyBdICkge1xyXG5cdFx0cG9zdEZpbmRlciA9IHNldE1hdGNoZXIoIHBvc3RGaW5kZXIsIHBvc3RTZWxlY3RvciApO1xyXG5cdH1cclxuXHRyZXR1cm4gbWFya0Z1bmN0aW9uKGZ1bmN0aW9uKCBzZWVkLCByZXN1bHRzLCBjb250ZXh0LCB4bWwgKSB7XHJcblx0XHR2YXIgdGVtcCwgaSwgZWxlbSxcclxuXHRcdFx0cHJlTWFwID0gW10sXHJcblx0XHRcdHBvc3RNYXAgPSBbXSxcclxuXHRcdFx0cHJlZXhpc3RpbmcgPSByZXN1bHRzLmxlbmd0aCxcclxuXHJcblx0XHRcdC8vIEdldCBpbml0aWFsIGVsZW1lbnRzIGZyb20gc2VlZCBvciBjb250ZXh0XHJcblx0XHRcdGVsZW1zID0gc2VlZCB8fCBtdWx0aXBsZUNvbnRleHRzKCBzZWxlY3RvciB8fCBcIipcIiwgY29udGV4dC5ub2RlVHlwZSA/IFsgY29udGV4dCBdIDogY29udGV4dCwgW10gKSxcclxuXHJcblx0XHRcdC8vIFByZWZpbHRlciB0byBnZXQgbWF0Y2hlciBpbnB1dCwgcHJlc2VydmluZyBhIG1hcCBmb3Igc2VlZC1yZXN1bHRzIHN5bmNocm9uaXphdGlvblxyXG5cdFx0XHRtYXRjaGVySW4gPSBwcmVGaWx0ZXIgJiYgKCBzZWVkIHx8ICFzZWxlY3RvciApID9cclxuXHRcdFx0XHRjb25kZW5zZSggZWxlbXMsIHByZU1hcCwgcHJlRmlsdGVyLCBjb250ZXh0LCB4bWwgKSA6XHJcblx0XHRcdFx0ZWxlbXMsXHJcblxyXG5cdFx0XHRtYXRjaGVyT3V0ID0gbWF0Y2hlciA/XHJcblx0XHRcdFx0Ly8gSWYgd2UgaGF2ZSBhIHBvc3RGaW5kZXIsIG9yIGZpbHRlcmVkIHNlZWQsIG9yIG5vbi1zZWVkIHBvc3RGaWx0ZXIgb3IgcHJlZXhpc3RpbmcgcmVzdWx0cyxcclxuXHRcdFx0XHRwb3N0RmluZGVyIHx8ICggc2VlZCA/IHByZUZpbHRlciA6IHByZWV4aXN0aW5nIHx8IHBvc3RGaWx0ZXIgKSA/XHJcblxyXG5cdFx0XHRcdFx0Ly8gLi4uaW50ZXJtZWRpYXRlIHByb2Nlc3NpbmcgaXMgbmVjZXNzYXJ5XHJcblx0XHRcdFx0XHRbXSA6XHJcblxyXG5cdFx0XHRcdFx0Ly8gLi4ub3RoZXJ3aXNlIHVzZSByZXN1bHRzIGRpcmVjdGx5XHJcblx0XHRcdFx0XHRyZXN1bHRzIDpcclxuXHRcdFx0XHRtYXRjaGVySW47XHJcblxyXG5cdFx0Ly8gRmluZCBwcmltYXJ5IG1hdGNoZXNcclxuXHRcdGlmICggbWF0Y2hlciApIHtcclxuXHRcdFx0bWF0Y2hlciggbWF0Y2hlckluLCBtYXRjaGVyT3V0LCBjb250ZXh0LCB4bWwgKTtcclxuXHRcdH1cclxuXHJcblx0XHQvLyBBcHBseSBwb3N0RmlsdGVyXHJcblx0XHRpZiAoIHBvc3RGaWx0ZXIgKSB7XHJcblx0XHRcdHRlbXAgPSBjb25kZW5zZSggbWF0Y2hlck91dCwgcG9zdE1hcCApO1xyXG5cdFx0XHRwb3N0RmlsdGVyKCB0ZW1wLCBbXSwgY29udGV4dCwgeG1sICk7XHJcblxyXG5cdFx0XHQvLyBVbi1tYXRjaCBmYWlsaW5nIGVsZW1lbnRzIGJ5IG1vdmluZyB0aGVtIGJhY2sgdG8gbWF0Y2hlckluXHJcblx0XHRcdGkgPSB0ZW1wLmxlbmd0aDtcclxuXHRcdFx0d2hpbGUgKCBpLS0gKSB7XHJcblx0XHRcdFx0aWYgKCAoZWxlbSA9IHRlbXBbaV0pICkge1xyXG5cdFx0XHRcdFx0bWF0Y2hlck91dFsgcG9zdE1hcFtpXSBdID0gIShtYXRjaGVySW5bIHBvc3RNYXBbaV0gXSA9IGVsZW0pO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cclxuXHRcdGlmICggc2VlZCApIHtcclxuXHRcdFx0aWYgKCBwb3N0RmluZGVyIHx8IHByZUZpbHRlciApIHtcclxuXHRcdFx0XHRpZiAoIHBvc3RGaW5kZXIgKSB7XHJcblx0XHRcdFx0XHQvLyBHZXQgdGhlIGZpbmFsIG1hdGNoZXJPdXQgYnkgY29uZGVuc2luZyB0aGlzIGludGVybWVkaWF0ZSBpbnRvIHBvc3RGaW5kZXIgY29udGV4dHNcclxuXHRcdFx0XHRcdHRlbXAgPSBbXTtcclxuXHRcdFx0XHRcdGkgPSBtYXRjaGVyT3V0Lmxlbmd0aDtcclxuXHRcdFx0XHRcdHdoaWxlICggaS0tICkge1xyXG5cdFx0XHRcdFx0XHRpZiAoIChlbGVtID0gbWF0Y2hlck91dFtpXSkgKSB7XHJcblx0XHRcdFx0XHRcdFx0Ly8gUmVzdG9yZSBtYXRjaGVySW4gc2luY2UgZWxlbSBpcyBub3QgeWV0IGEgZmluYWwgbWF0Y2hcclxuXHRcdFx0XHRcdFx0XHR0ZW1wLnB1c2goIChtYXRjaGVySW5baV0gPSBlbGVtKSApO1xyXG5cdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRwb3N0RmluZGVyKCBudWxsLCAobWF0Y2hlck91dCA9IFtdKSwgdGVtcCwgeG1sICk7XHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHQvLyBNb3ZlIG1hdGNoZWQgZWxlbWVudHMgZnJvbSBzZWVkIHRvIHJlc3VsdHMgdG8ga2VlcCB0aGVtIHN5bmNocm9uaXplZFxyXG5cdFx0XHRcdGkgPSBtYXRjaGVyT3V0Lmxlbmd0aDtcclxuXHRcdFx0XHR3aGlsZSAoIGktLSApIHtcclxuXHRcdFx0XHRcdGlmICggKGVsZW0gPSBtYXRjaGVyT3V0W2ldKSAmJlxyXG5cdFx0XHRcdFx0XHQodGVtcCA9IHBvc3RGaW5kZXIgPyBpbmRleE9mKCBzZWVkLCBlbGVtICkgOiBwcmVNYXBbaV0pID4gLTEgKSB7XHJcblxyXG5cdFx0XHRcdFx0XHRzZWVkW3RlbXBdID0gIShyZXN1bHRzW3RlbXBdID0gZWxlbSk7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblxyXG5cdFx0Ly8gQWRkIGVsZW1lbnRzIHRvIHJlc3VsdHMsIHRocm91Z2ggcG9zdEZpbmRlciBpZiBkZWZpbmVkXHJcblx0XHR9IGVsc2Uge1xyXG5cdFx0XHRtYXRjaGVyT3V0ID0gY29uZGVuc2UoXHJcblx0XHRcdFx0bWF0Y2hlck91dCA9PT0gcmVzdWx0cyA/XHJcblx0XHRcdFx0XHRtYXRjaGVyT3V0LnNwbGljZSggcHJlZXhpc3RpbmcsIG1hdGNoZXJPdXQubGVuZ3RoICkgOlxyXG5cdFx0XHRcdFx0bWF0Y2hlck91dFxyXG5cdFx0XHQpO1xyXG5cdFx0XHRpZiAoIHBvc3RGaW5kZXIgKSB7XHJcblx0XHRcdFx0cG9zdEZpbmRlciggbnVsbCwgcmVzdWx0cywgbWF0Y2hlck91dCwgeG1sICk7XHJcblx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0cHVzaC5hcHBseSggcmVzdWx0cywgbWF0Y2hlck91dCApO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0fSk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIG1hdGNoZXJGcm9tVG9rZW5zKCB0b2tlbnMgKSB7XHJcblx0dmFyIGNoZWNrQ29udGV4dCwgbWF0Y2hlciwgaixcclxuXHRcdGxlbiA9IHRva2Vucy5sZW5ndGgsXHJcblx0XHRsZWFkaW5nUmVsYXRpdmUgPSBFeHByLnJlbGF0aXZlWyB0b2tlbnNbMF0udHlwZSBdLFxyXG5cdFx0aW1wbGljaXRSZWxhdGl2ZSA9IGxlYWRpbmdSZWxhdGl2ZSB8fCBFeHByLnJlbGF0aXZlW1wiIFwiXSxcclxuXHRcdGkgPSBsZWFkaW5nUmVsYXRpdmUgPyAxIDogMCxcclxuXHJcblx0XHQvLyBUaGUgZm91bmRhdGlvbmFsIG1hdGNoZXIgZW5zdXJlcyB0aGF0IGVsZW1lbnRzIGFyZSByZWFjaGFibGUgZnJvbSB0b3AtbGV2ZWwgY29udGV4dChzKVxyXG5cdFx0bWF0Y2hDb250ZXh0ID0gYWRkQ29tYmluYXRvciggZnVuY3Rpb24oIGVsZW0gKSB7XHJcblx0XHRcdHJldHVybiBlbGVtID09PSBjaGVja0NvbnRleHQ7XHJcblx0XHR9LCBpbXBsaWNpdFJlbGF0aXZlLCB0cnVlICksXHJcblx0XHRtYXRjaEFueUNvbnRleHQgPSBhZGRDb21iaW5hdG9yKCBmdW5jdGlvbiggZWxlbSApIHtcclxuXHRcdFx0cmV0dXJuIGluZGV4T2YoIGNoZWNrQ29udGV4dCwgZWxlbSApID4gLTE7XHJcblx0XHR9LCBpbXBsaWNpdFJlbGF0aXZlLCB0cnVlICksXHJcblx0XHRtYXRjaGVycyA9IFsgZnVuY3Rpb24oIGVsZW0sIGNvbnRleHQsIHhtbCApIHtcclxuXHRcdFx0dmFyIHJldCA9ICggIWxlYWRpbmdSZWxhdGl2ZSAmJiAoIHhtbCB8fCBjb250ZXh0ICE9PSBvdXRlcm1vc3RDb250ZXh0ICkgKSB8fCAoXHJcblx0XHRcdFx0KGNoZWNrQ29udGV4dCA9IGNvbnRleHQpLm5vZGVUeXBlID9cclxuXHRcdFx0XHRcdG1hdGNoQ29udGV4dCggZWxlbSwgY29udGV4dCwgeG1sICkgOlxyXG5cdFx0XHRcdFx0bWF0Y2hBbnlDb250ZXh0KCBlbGVtLCBjb250ZXh0LCB4bWwgKSApO1xyXG5cdFx0XHQvLyBBdm9pZCBoYW5naW5nIG9udG8gZWxlbWVudCAoaXNzdWUgIzI5OSlcclxuXHRcdFx0Y2hlY2tDb250ZXh0ID0gbnVsbDtcclxuXHRcdFx0cmV0dXJuIHJldDtcclxuXHRcdH0gXTtcclxuXHJcblx0Zm9yICggOyBpIDwgbGVuOyBpKysgKSB7XHJcblx0XHRpZiAoIChtYXRjaGVyID0gRXhwci5yZWxhdGl2ZVsgdG9rZW5zW2ldLnR5cGUgXSkgKSB7XHJcblx0XHRcdG1hdGNoZXJzID0gWyBhZGRDb21iaW5hdG9yKGVsZW1lbnRNYXRjaGVyKCBtYXRjaGVycyApLCBtYXRjaGVyKSBdO1xyXG5cdFx0fSBlbHNlIHtcclxuXHRcdFx0bWF0Y2hlciA9IEV4cHIuZmlsdGVyWyB0b2tlbnNbaV0udHlwZSBdLmFwcGx5KCBudWxsLCB0b2tlbnNbaV0ubWF0Y2hlcyApO1xyXG5cclxuXHRcdFx0Ly8gUmV0dXJuIHNwZWNpYWwgdXBvbiBzZWVpbmcgYSBwb3NpdGlvbmFsIG1hdGNoZXJcclxuXHRcdFx0aWYgKCBtYXRjaGVyWyBleHBhbmRvIF0gKSB7XHJcblx0XHRcdFx0Ly8gRmluZCB0aGUgbmV4dCByZWxhdGl2ZSBvcGVyYXRvciAoaWYgYW55KSBmb3IgcHJvcGVyIGhhbmRsaW5nXHJcblx0XHRcdFx0aiA9ICsraTtcclxuXHRcdFx0XHRmb3IgKCA7IGogPCBsZW47IGorKyApIHtcclxuXHRcdFx0XHRcdGlmICggRXhwci5yZWxhdGl2ZVsgdG9rZW5zW2pdLnR5cGUgXSApIHtcclxuXHRcdFx0XHRcdFx0YnJlYWs7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fVxyXG5cdFx0XHRcdHJldHVybiBzZXRNYXRjaGVyKFxyXG5cdFx0XHRcdFx0aSA+IDEgJiYgZWxlbWVudE1hdGNoZXIoIG1hdGNoZXJzICksXHJcblx0XHRcdFx0XHRpID4gMSAmJiB0b1NlbGVjdG9yKFxyXG5cdFx0XHRcdFx0XHQvLyBJZiB0aGUgcHJlY2VkaW5nIHRva2VuIHdhcyBhIGRlc2NlbmRhbnQgY29tYmluYXRvciwgaW5zZXJ0IGFuIGltcGxpY2l0IGFueS1lbGVtZW50IGAqYFxyXG5cdFx0XHRcdFx0XHR0b2tlbnMuc2xpY2UoIDAsIGkgLSAxICkuY29uY2F0KHsgdmFsdWU6IHRva2Vuc1sgaSAtIDIgXS50eXBlID09PSBcIiBcIiA/IFwiKlwiIDogXCJcIiB9KVxyXG5cdFx0XHRcdFx0KS5yZXBsYWNlKCBydHJpbSwgXCIkMVwiICksXHJcblx0XHRcdFx0XHRtYXRjaGVyLFxyXG5cdFx0XHRcdFx0aSA8IGogJiYgbWF0Y2hlckZyb21Ub2tlbnMoIHRva2Vucy5zbGljZSggaSwgaiApICksXHJcblx0XHRcdFx0XHRqIDwgbGVuICYmIG1hdGNoZXJGcm9tVG9rZW5zKCAodG9rZW5zID0gdG9rZW5zLnNsaWNlKCBqICkpICksXHJcblx0XHRcdFx0XHRqIDwgbGVuICYmIHRvU2VsZWN0b3IoIHRva2VucyApXHJcblx0XHRcdFx0KTtcclxuXHRcdFx0fVxyXG5cdFx0XHRtYXRjaGVycy5wdXNoKCBtYXRjaGVyICk7XHJcblx0XHR9XHJcblx0fVxyXG5cclxuXHRyZXR1cm4gZWxlbWVudE1hdGNoZXIoIG1hdGNoZXJzICk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIG1hdGNoZXJGcm9tR3JvdXBNYXRjaGVycyggZWxlbWVudE1hdGNoZXJzLCBzZXRNYXRjaGVycyApIHtcclxuXHR2YXIgYnlTZXQgPSBzZXRNYXRjaGVycy5sZW5ndGggPiAwLFxyXG5cdFx0YnlFbGVtZW50ID0gZWxlbWVudE1hdGNoZXJzLmxlbmd0aCA+IDAsXHJcblx0XHRzdXBlck1hdGNoZXIgPSBmdW5jdGlvbiggc2VlZCwgY29udGV4dCwgeG1sLCByZXN1bHRzLCBvdXRlcm1vc3QgKSB7XHJcblx0XHRcdHZhciBlbGVtLCBqLCBtYXRjaGVyLFxyXG5cdFx0XHRcdG1hdGNoZWRDb3VudCA9IDAsXHJcblx0XHRcdFx0aSA9IFwiMFwiLFxyXG5cdFx0XHRcdHVubWF0Y2hlZCA9IHNlZWQgJiYgW10sXHJcblx0XHRcdFx0c2V0TWF0Y2hlZCA9IFtdLFxyXG5cdFx0XHRcdGNvbnRleHRCYWNrdXAgPSBvdXRlcm1vc3RDb250ZXh0LFxyXG5cdFx0XHRcdC8vIFdlIG11c3QgYWx3YXlzIGhhdmUgZWl0aGVyIHNlZWQgZWxlbWVudHMgb3Igb3V0ZXJtb3N0IGNvbnRleHRcclxuXHRcdFx0XHRlbGVtcyA9IHNlZWQgfHwgYnlFbGVtZW50ICYmIEV4cHIuZmluZFtcIlRBR1wiXSggXCIqXCIsIG91dGVybW9zdCApLFxyXG5cdFx0XHRcdC8vIFVzZSBpbnRlZ2VyIGRpcnJ1bnMgaWZmIHRoaXMgaXMgdGhlIG91dGVybW9zdCBtYXRjaGVyXHJcblx0XHRcdFx0ZGlycnVuc1VuaXF1ZSA9IChkaXJydW5zICs9IGNvbnRleHRCYWNrdXAgPT0gbnVsbCA/IDEgOiBNYXRoLnJhbmRvbSgpIHx8IDAuMSksXHJcblx0XHRcdFx0bGVuID0gZWxlbXMubGVuZ3RoO1xyXG5cclxuXHRcdFx0aWYgKCBvdXRlcm1vc3QgKSB7XHJcblx0XHRcdFx0b3V0ZXJtb3N0Q29udGV4dCA9IGNvbnRleHQgIT09IGRvY3VtZW50ICYmIGNvbnRleHQ7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdC8vIEFkZCBlbGVtZW50cyBwYXNzaW5nIGVsZW1lbnRNYXRjaGVycyBkaXJlY3RseSB0byByZXN1bHRzXHJcblx0XHRcdC8vIEtlZXAgYGlgIGEgc3RyaW5nIGlmIHRoZXJlIGFyZSBubyBlbGVtZW50cyBzbyBgbWF0Y2hlZENvdW50YCB3aWxsIGJlIFwiMDBcIiBiZWxvd1xyXG5cdFx0XHQvLyBTdXBwb3J0OiBJRTw5LCBTYWZhcmlcclxuXHRcdFx0Ly8gVG9sZXJhdGUgTm9kZUxpc3QgcHJvcGVydGllcyAoSUU6IFwibGVuZ3RoXCI7IFNhZmFyaTogPG51bWJlcj4pIG1hdGNoaW5nIGVsZW1lbnRzIGJ5IGlkXHJcblx0XHRcdGZvciAoIDsgaSAhPT0gbGVuICYmIChlbGVtID0gZWxlbXNbaV0pICE9IG51bGw7IGkrKyApIHtcclxuXHRcdFx0XHRpZiAoIGJ5RWxlbWVudCAmJiBlbGVtICkge1xyXG5cdFx0XHRcdFx0aiA9IDA7XHJcblx0XHRcdFx0XHR3aGlsZSAoIChtYXRjaGVyID0gZWxlbWVudE1hdGNoZXJzW2orK10pICkge1xyXG5cdFx0XHRcdFx0XHRpZiAoIG1hdGNoZXIoIGVsZW0sIGNvbnRleHQsIHhtbCApICkge1xyXG5cdFx0XHRcdFx0XHRcdHJlc3VsdHMucHVzaCggZWxlbSApO1xyXG5cdFx0XHRcdFx0XHRcdGJyZWFrO1xyXG5cdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRpZiAoIG91dGVybW9zdCApIHtcclxuXHRcdFx0XHRcdFx0ZGlycnVucyA9IGRpcnJ1bnNVbmlxdWU7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHQvLyBUcmFjayB1bm1hdGNoZWQgZWxlbWVudHMgZm9yIHNldCBmaWx0ZXJzXHJcblx0XHRcdFx0aWYgKCBieVNldCApIHtcclxuXHRcdFx0XHRcdC8vIFRoZXkgd2lsbCBoYXZlIGdvbmUgdGhyb3VnaCBhbGwgcG9zc2libGUgbWF0Y2hlcnNcclxuXHRcdFx0XHRcdGlmICggKGVsZW0gPSAhbWF0Y2hlciAmJiBlbGVtKSApIHtcclxuXHRcdFx0XHRcdFx0bWF0Y2hlZENvdW50LS07XHJcblx0XHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdFx0Ly8gTGVuZ3RoZW4gdGhlIGFycmF5IGZvciBldmVyeSBlbGVtZW50LCBtYXRjaGVkIG9yIG5vdFxyXG5cdFx0XHRcdFx0aWYgKCBzZWVkICkge1xyXG5cdFx0XHRcdFx0XHR1bm1hdGNoZWQucHVzaCggZWxlbSApO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0Ly8gQXBwbHkgc2V0IGZpbHRlcnMgdG8gdW5tYXRjaGVkIGVsZW1lbnRzXHJcblx0XHRcdG1hdGNoZWRDb3VudCArPSBpO1xyXG5cdFx0XHRpZiAoIGJ5U2V0ICYmIGkgIT09IG1hdGNoZWRDb3VudCApIHtcclxuXHRcdFx0XHRqID0gMDtcclxuXHRcdFx0XHR3aGlsZSAoIChtYXRjaGVyID0gc2V0TWF0Y2hlcnNbaisrXSkgKSB7XHJcblx0XHRcdFx0XHRtYXRjaGVyKCB1bm1hdGNoZWQsIHNldE1hdGNoZWQsIGNvbnRleHQsIHhtbCApO1xyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0aWYgKCBzZWVkICkge1xyXG5cdFx0XHRcdFx0Ly8gUmVpbnRlZ3JhdGUgZWxlbWVudCBtYXRjaGVzIHRvIGVsaW1pbmF0ZSB0aGUgbmVlZCBmb3Igc29ydGluZ1xyXG5cdFx0XHRcdFx0aWYgKCBtYXRjaGVkQ291bnQgPiAwICkge1xyXG5cdFx0XHRcdFx0XHR3aGlsZSAoIGktLSApIHtcclxuXHRcdFx0XHRcdFx0XHRpZiAoICEodW5tYXRjaGVkW2ldIHx8IHNldE1hdGNoZWRbaV0pICkge1xyXG5cdFx0XHRcdFx0XHRcdFx0c2V0TWF0Y2hlZFtpXSA9IHBvcC5jYWxsKCByZXN1bHRzICk7XHJcblx0XHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdFx0Ly8gRGlzY2FyZCBpbmRleCBwbGFjZWhvbGRlciB2YWx1ZXMgdG8gZ2V0IG9ubHkgYWN0dWFsIG1hdGNoZXNcclxuXHRcdFx0XHRcdHNldE1hdGNoZWQgPSBjb25kZW5zZSggc2V0TWF0Y2hlZCApO1xyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0Ly8gQWRkIG1hdGNoZXMgdG8gcmVzdWx0c1xyXG5cdFx0XHRcdHB1c2guYXBwbHkoIHJlc3VsdHMsIHNldE1hdGNoZWQgKTtcclxuXHJcblx0XHRcdFx0Ly8gU2VlZGxlc3Mgc2V0IG1hdGNoZXMgc3VjY2VlZGluZyBtdWx0aXBsZSBzdWNjZXNzZnVsIG1hdGNoZXJzIHN0aXB1bGF0ZSBzb3J0aW5nXHJcblx0XHRcdFx0aWYgKCBvdXRlcm1vc3QgJiYgIXNlZWQgJiYgc2V0TWF0Y2hlZC5sZW5ndGggPiAwICYmXHJcblx0XHRcdFx0XHQoIG1hdGNoZWRDb3VudCArIHNldE1hdGNoZXJzLmxlbmd0aCApID4gMSApIHtcclxuXHJcblx0XHRcdFx0XHRTaXp6bGUudW5pcXVlU29ydCggcmVzdWx0cyApO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0Ly8gT3ZlcnJpZGUgbWFuaXB1bGF0aW9uIG9mIGdsb2JhbHMgYnkgbmVzdGVkIG1hdGNoZXJzXHJcblx0XHRcdGlmICggb3V0ZXJtb3N0ICkge1xyXG5cdFx0XHRcdGRpcnJ1bnMgPSBkaXJydW5zVW5pcXVlO1xyXG5cdFx0XHRcdG91dGVybW9zdENvbnRleHQgPSBjb250ZXh0QmFja3VwO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRyZXR1cm4gdW5tYXRjaGVkO1xyXG5cdFx0fTtcclxuXHJcblx0cmV0dXJuIGJ5U2V0ID9cclxuXHRcdG1hcmtGdW5jdGlvbiggc3VwZXJNYXRjaGVyICkgOlxyXG5cdFx0c3VwZXJNYXRjaGVyO1xyXG59XHJcblxyXG5jb21waWxlID0gU2l6emxlLmNvbXBpbGUgPSBmdW5jdGlvbiggc2VsZWN0b3IsIG1hdGNoIC8qIEludGVybmFsIFVzZSBPbmx5ICovICkge1xyXG5cdHZhciBpLFxyXG5cdFx0c2V0TWF0Y2hlcnMgPSBbXSxcclxuXHRcdGVsZW1lbnRNYXRjaGVycyA9IFtdLFxyXG5cdFx0Y2FjaGVkID0gY29tcGlsZXJDYWNoZVsgc2VsZWN0b3IgKyBcIiBcIiBdO1xyXG5cclxuXHRpZiAoICFjYWNoZWQgKSB7XHJcblx0XHQvLyBHZW5lcmF0ZSBhIGZ1bmN0aW9uIG9mIHJlY3Vyc2l2ZSBmdW5jdGlvbnMgdGhhdCBjYW4gYmUgdXNlZCB0byBjaGVjayBlYWNoIGVsZW1lbnRcclxuXHRcdGlmICggIW1hdGNoICkge1xyXG5cdFx0XHRtYXRjaCA9IHRva2VuaXplKCBzZWxlY3RvciApO1xyXG5cdFx0fVxyXG5cdFx0aSA9IG1hdGNoLmxlbmd0aDtcclxuXHRcdHdoaWxlICggaS0tICkge1xyXG5cdFx0XHRjYWNoZWQgPSBtYXRjaGVyRnJvbVRva2VucyggbWF0Y2hbaV0gKTtcclxuXHRcdFx0aWYgKCBjYWNoZWRbIGV4cGFuZG8gXSApIHtcclxuXHRcdFx0XHRzZXRNYXRjaGVycy5wdXNoKCBjYWNoZWQgKTtcclxuXHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRlbGVtZW50TWF0Y2hlcnMucHVzaCggY2FjaGVkICk7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHJcblx0XHQvLyBDYWNoZSB0aGUgY29tcGlsZWQgZnVuY3Rpb25cclxuXHRcdGNhY2hlZCA9IGNvbXBpbGVyQ2FjaGUoIHNlbGVjdG9yLCBtYXRjaGVyRnJvbUdyb3VwTWF0Y2hlcnMoIGVsZW1lbnRNYXRjaGVycywgc2V0TWF0Y2hlcnMgKSApO1xyXG5cclxuXHRcdC8vIFNhdmUgc2VsZWN0b3IgYW5kIHRva2VuaXphdGlvblxyXG5cdFx0Y2FjaGVkLnNlbGVjdG9yID0gc2VsZWN0b3I7XHJcblx0fVxyXG5cdHJldHVybiBjYWNoZWQ7XHJcbn07XHJcblxyXG4vKipcclxuICogQSBsb3ctbGV2ZWwgc2VsZWN0aW9uIGZ1bmN0aW9uIHRoYXQgd29ya3Mgd2l0aCBTaXp6bGUncyBjb21waWxlZFxyXG4gKiAgc2VsZWN0b3IgZnVuY3Rpb25zXHJcbiAqIEBwYXJhbSB7U3RyaW5nfEZ1bmN0aW9ufSBzZWxlY3RvciBBIHNlbGVjdG9yIG9yIGEgcHJlLWNvbXBpbGVkXHJcbiAqICBzZWxlY3RvciBmdW5jdGlvbiBidWlsdCB3aXRoIFNpenpsZS5jb21waWxlXHJcbiAqIEBwYXJhbSB7RWxlbWVudH0gY29udGV4dFxyXG4gKiBAcGFyYW0ge0FycmF5fSBbcmVzdWx0c11cclxuICogQHBhcmFtIHtBcnJheX0gW3NlZWRdIEEgc2V0IG9mIGVsZW1lbnRzIHRvIG1hdGNoIGFnYWluc3RcclxuICovXHJcbnNlbGVjdCA9IFNpenpsZS5zZWxlY3QgPSBmdW5jdGlvbiggc2VsZWN0b3IsIGNvbnRleHQsIHJlc3VsdHMsIHNlZWQgKSB7XHJcblx0dmFyIGksIHRva2VucywgdG9rZW4sIHR5cGUsIGZpbmQsXHJcblx0XHRjb21waWxlZCA9IHR5cGVvZiBzZWxlY3RvciA9PT0gXCJmdW5jdGlvblwiICYmIHNlbGVjdG9yLFxyXG5cdFx0bWF0Y2ggPSAhc2VlZCAmJiB0b2tlbml6ZSggKHNlbGVjdG9yID0gY29tcGlsZWQuc2VsZWN0b3IgfHwgc2VsZWN0b3IpICk7XHJcblxyXG5cdHJlc3VsdHMgPSByZXN1bHRzIHx8IFtdO1xyXG5cclxuXHQvLyBUcnkgdG8gbWluaW1pemUgb3BlcmF0aW9ucyBpZiB0aGVyZSBpcyBubyBzZWVkIGFuZCBvbmx5IG9uZSBncm91cFxyXG5cdGlmICggbWF0Y2gubGVuZ3RoID09PSAxICkge1xyXG5cclxuXHRcdC8vIFRha2UgYSBzaG9ydGN1dCBhbmQgc2V0IHRoZSBjb250ZXh0IGlmIHRoZSByb290IHNlbGVjdG9yIGlzIGFuIElEXHJcblx0XHR0b2tlbnMgPSBtYXRjaFswXSA9IG1hdGNoWzBdLnNsaWNlKCAwICk7XHJcblx0XHRpZiAoIHRva2Vucy5sZW5ndGggPiAyICYmICh0b2tlbiA9IHRva2Vuc1swXSkudHlwZSA9PT0gXCJJRFwiICYmXHJcblx0XHRcdFx0c3VwcG9ydC5nZXRCeUlkICYmIGNvbnRleHQubm9kZVR5cGUgPT09IDkgJiYgZG9jdW1lbnRJc0hUTUwgJiZcclxuXHRcdFx0XHRFeHByLnJlbGF0aXZlWyB0b2tlbnNbMV0udHlwZSBdICkge1xyXG5cclxuXHRcdFx0Y29udGV4dCA9ICggRXhwci5maW5kW1wiSURcIl0oIHRva2VuLm1hdGNoZXNbMF0ucmVwbGFjZShydW5lc2NhcGUsIGZ1bmVzY2FwZSksIGNvbnRleHQgKSB8fCBbXSApWzBdO1xyXG5cdFx0XHRpZiAoICFjb250ZXh0ICkge1xyXG5cdFx0XHRcdHJldHVybiByZXN1bHRzO1xyXG5cclxuXHRcdFx0Ly8gUHJlY29tcGlsZWQgbWF0Y2hlcnMgd2lsbCBzdGlsbCB2ZXJpZnkgYW5jZXN0cnksIHNvIHN0ZXAgdXAgYSBsZXZlbFxyXG5cdFx0XHR9IGVsc2UgaWYgKCBjb21waWxlZCApIHtcclxuXHRcdFx0XHRjb250ZXh0ID0gY29udGV4dC5wYXJlbnROb2RlO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRzZWxlY3RvciA9IHNlbGVjdG9yLnNsaWNlKCB0b2tlbnMuc2hpZnQoKS52YWx1ZS5sZW5ndGggKTtcclxuXHRcdH1cclxuXHJcblx0XHQvLyBGZXRjaCBhIHNlZWQgc2V0IGZvciByaWdodC10by1sZWZ0IG1hdGNoaW5nXHJcblx0XHRpID0gbWF0Y2hFeHByW1wibmVlZHNDb250ZXh0XCJdLnRlc3QoIHNlbGVjdG9yICkgPyAwIDogdG9rZW5zLmxlbmd0aDtcclxuXHRcdHdoaWxlICggaS0tICkge1xyXG5cdFx0XHR0b2tlbiA9IHRva2Vuc1tpXTtcclxuXHJcblx0XHRcdC8vIEFib3J0IGlmIHdlIGhpdCBhIGNvbWJpbmF0b3JcclxuXHRcdFx0aWYgKCBFeHByLnJlbGF0aXZlWyAodHlwZSA9IHRva2VuLnR5cGUpIF0gKSB7XHJcblx0XHRcdFx0YnJlYWs7XHJcblx0XHRcdH1cclxuXHRcdFx0aWYgKCAoZmluZCA9IEV4cHIuZmluZFsgdHlwZSBdKSApIHtcclxuXHRcdFx0XHQvLyBTZWFyY2gsIGV4cGFuZGluZyBjb250ZXh0IGZvciBsZWFkaW5nIHNpYmxpbmcgY29tYmluYXRvcnNcclxuXHRcdFx0XHRpZiAoIChzZWVkID0gZmluZChcclxuXHRcdFx0XHRcdHRva2VuLm1hdGNoZXNbMF0ucmVwbGFjZSggcnVuZXNjYXBlLCBmdW5lc2NhcGUgKSxcclxuXHRcdFx0XHRcdHJzaWJsaW5nLnRlc3QoIHRva2Vuc1swXS50eXBlICkgJiYgdGVzdENvbnRleHQoIGNvbnRleHQucGFyZW50Tm9kZSApIHx8IGNvbnRleHRcclxuXHRcdFx0XHQpKSApIHtcclxuXHJcblx0XHRcdFx0XHQvLyBJZiBzZWVkIGlzIGVtcHR5IG9yIG5vIHRva2VucyByZW1haW4sIHdlIGNhbiByZXR1cm4gZWFybHlcclxuXHRcdFx0XHRcdHRva2Vucy5zcGxpY2UoIGksIDEgKTtcclxuXHRcdFx0XHRcdHNlbGVjdG9yID0gc2VlZC5sZW5ndGggJiYgdG9TZWxlY3RvciggdG9rZW5zICk7XHJcblx0XHRcdFx0XHRpZiAoICFzZWxlY3RvciApIHtcclxuXHRcdFx0XHRcdFx0cHVzaC5hcHBseSggcmVzdWx0cywgc2VlZCApO1xyXG5cdFx0XHRcdFx0XHRyZXR1cm4gcmVzdWx0cztcclxuXHRcdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0XHRicmVhaztcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHR9XHJcblxyXG5cdC8vIENvbXBpbGUgYW5kIGV4ZWN1dGUgYSBmaWx0ZXJpbmcgZnVuY3Rpb24gaWYgb25lIGlzIG5vdCBwcm92aWRlZFxyXG5cdC8vIFByb3ZpZGUgYG1hdGNoYCB0byBhdm9pZCByZXRva2VuaXphdGlvbiBpZiB3ZSBtb2RpZmllZCB0aGUgc2VsZWN0b3IgYWJvdmVcclxuXHQoIGNvbXBpbGVkIHx8IGNvbXBpbGUoIHNlbGVjdG9yLCBtYXRjaCApICkoXHJcblx0XHRzZWVkLFxyXG5cdFx0Y29udGV4dCxcclxuXHRcdCFkb2N1bWVudElzSFRNTCxcclxuXHRcdHJlc3VsdHMsXHJcblx0XHRyc2libGluZy50ZXN0KCBzZWxlY3RvciApICYmIHRlc3RDb250ZXh0KCBjb250ZXh0LnBhcmVudE5vZGUgKSB8fCBjb250ZXh0XHJcblx0KTtcclxuXHRyZXR1cm4gcmVzdWx0cztcclxufTtcclxuXHJcbi8vIE9uZS10aW1lIGFzc2lnbm1lbnRzXHJcblxyXG4vLyBTb3J0IHN0YWJpbGl0eVxyXG5zdXBwb3J0LnNvcnRTdGFibGUgPSBleHBhbmRvLnNwbGl0KFwiXCIpLnNvcnQoIHNvcnRPcmRlciApLmpvaW4oXCJcIikgPT09IGV4cGFuZG87XHJcblxyXG4vLyBTdXBwb3J0OiBDaHJvbWUgMTQtMzUrXHJcbi8vIEFsd2F5cyBhc3N1bWUgZHVwbGljYXRlcyBpZiB0aGV5IGFyZW4ndCBwYXNzZWQgdG8gdGhlIGNvbXBhcmlzb24gZnVuY3Rpb25cclxuc3VwcG9ydC5kZXRlY3REdXBsaWNhdGVzID0gISFoYXNEdXBsaWNhdGU7XHJcblxyXG4vLyBJbml0aWFsaXplIGFnYWluc3QgdGhlIGRlZmF1bHQgZG9jdW1lbnRcclxuc2V0RG9jdW1lbnQoKTtcclxuXHJcbi8vIFN1cHBvcnQ6IFdlYmtpdDw1MzcuMzIgLSBTYWZhcmkgNi4wLjMvQ2hyb21lIDI1IChmaXhlZCBpbiBDaHJvbWUgMjcpXHJcbi8vIERldGFjaGVkIG5vZGVzIGNvbmZvdW5kaW5nbHkgZm9sbG93ICplYWNoIG90aGVyKlxyXG5zdXBwb3J0LnNvcnREZXRhY2hlZCA9IGFzc2VydChmdW5jdGlvbiggZGl2MSApIHtcclxuXHQvLyBTaG91bGQgcmV0dXJuIDEsIGJ1dCByZXR1cm5zIDQgKGZvbGxvd2luZylcclxuXHRyZXR1cm4gZGl2MS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbiggZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKSApICYgMTtcclxufSk7XHJcblxyXG4vLyBTdXBwb3J0OiBJRTw4XHJcbi8vIFByZXZlbnQgYXR0cmlidXRlL3Byb3BlcnR5IFwiaW50ZXJwb2xhdGlvblwiXHJcbi8vIGh0dHA6Ly9tc2RuLm1pY3Jvc29mdC5jb20vZW4tdXMvbGlicmFyeS9tczUzNjQyOSUyOFZTLjg1JTI5LmFzcHhcclxuaWYgKCAhYXNzZXJ0KGZ1bmN0aW9uKCBkaXYgKSB7XHJcblx0ZGl2LmlubmVySFRNTCA9IFwiPGEgaHJlZj0nIyc+PC9hPlwiO1xyXG5cdHJldHVybiBkaXYuZmlyc3RDaGlsZC5nZXRBdHRyaWJ1dGUoXCJocmVmXCIpID09PSBcIiNcIiA7XHJcbn0pICkge1xyXG5cdGFkZEhhbmRsZSggXCJ0eXBlfGhyZWZ8aGVpZ2h0fHdpZHRoXCIsIGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCBpc1hNTCApIHtcclxuXHRcdGlmICggIWlzWE1MICkge1xyXG5cdFx0XHRyZXR1cm4gZWxlbS5nZXRBdHRyaWJ1dGUoIG5hbWUsIG5hbWUudG9Mb3dlckNhc2UoKSA9PT0gXCJ0eXBlXCIgPyAxIDogMiApO1xyXG5cdFx0fVxyXG5cdH0pO1xyXG59XHJcblxyXG4vLyBTdXBwb3J0OiBJRTw5XHJcbi8vIFVzZSBkZWZhdWx0VmFsdWUgaW4gcGxhY2Ugb2YgZ2V0QXR0cmlidXRlKFwidmFsdWVcIilcclxuaWYgKCAhc3VwcG9ydC5hdHRyaWJ1dGVzIHx8ICFhc3NlcnQoZnVuY3Rpb24oIGRpdiApIHtcclxuXHRkaXYuaW5uZXJIVE1MID0gXCI8aW5wdXQvPlwiO1xyXG5cdGRpdi5maXJzdENoaWxkLnNldEF0dHJpYnV0ZSggXCJ2YWx1ZVwiLCBcIlwiICk7XHJcblx0cmV0dXJuIGRpdi5maXJzdENoaWxkLmdldEF0dHJpYnV0ZSggXCJ2YWx1ZVwiICkgPT09IFwiXCI7XHJcbn0pICkge1xyXG5cdGFkZEhhbmRsZSggXCJ2YWx1ZVwiLCBmdW5jdGlvbiggZWxlbSwgbmFtZSwgaXNYTUwgKSB7XHJcblx0XHRpZiAoICFpc1hNTCAmJiBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09IFwiaW5wdXRcIiApIHtcclxuXHRcdFx0cmV0dXJuIGVsZW0uZGVmYXVsdFZhbHVlO1xyXG5cdFx0fVxyXG5cdH0pO1xyXG59XHJcblxyXG4vLyBTdXBwb3J0OiBJRTw5XHJcbi8vIFVzZSBnZXRBdHRyaWJ1dGVOb2RlIHRvIGZldGNoIGJvb2xlYW5zIHdoZW4gZ2V0QXR0cmlidXRlIGxpZXNcclxuaWYgKCAhYXNzZXJ0KGZ1bmN0aW9uKCBkaXYgKSB7XHJcblx0cmV0dXJuIGRpdi5nZXRBdHRyaWJ1dGUoXCJkaXNhYmxlZFwiKSA9PSBudWxsO1xyXG59KSApIHtcclxuXHRhZGRIYW5kbGUoIGJvb2xlYW5zLCBmdW5jdGlvbiggZWxlbSwgbmFtZSwgaXNYTUwgKSB7XHJcblx0XHR2YXIgdmFsO1xyXG5cdFx0aWYgKCAhaXNYTUwgKSB7XHJcblx0XHRcdHJldHVybiBlbGVtWyBuYW1lIF0gPT09IHRydWUgPyBuYW1lLnRvTG93ZXJDYXNlKCkgOlxyXG5cdFx0XHRcdFx0KHZhbCA9IGVsZW0uZ2V0QXR0cmlidXRlTm9kZSggbmFtZSApKSAmJiB2YWwuc3BlY2lmaWVkID9cclxuXHRcdFx0XHRcdHZhbC52YWx1ZSA6XHJcblx0XHRcdFx0bnVsbDtcclxuXHRcdH1cclxuXHR9KTtcclxufVxyXG5cclxucmV0dXJuIFNpenpsZTtcclxuXHJcbn0pKCB3aW5kb3cgKTtcclxuXHJcblxyXG5cclxualF1ZXJ5LmZpbmQgPSBTaXp6bGU7XHJcbmpRdWVyeS5leHByID0gU2l6emxlLnNlbGVjdG9ycztcclxualF1ZXJ5LmV4cHJbXCI6XCJdID0galF1ZXJ5LmV4cHIucHNldWRvcztcclxualF1ZXJ5LnVuaXF1ZSA9IFNpenpsZS51bmlxdWVTb3J0O1xyXG5qUXVlcnkudGV4dCA9IFNpenpsZS5nZXRUZXh0O1xyXG5qUXVlcnkuaXNYTUxEb2MgPSBTaXp6bGUuaXNYTUw7XHJcbmpRdWVyeS5jb250YWlucyA9IFNpenpsZS5jb250YWlucztcclxuXHJcblxyXG5cclxudmFyIHJuZWVkc0NvbnRleHQgPSBqUXVlcnkuZXhwci5tYXRjaC5uZWVkc0NvbnRleHQ7XHJcblxyXG52YXIgcnNpbmdsZVRhZyA9ICgvXjwoXFx3KylcXHMqXFwvPz4oPzo8XFwvXFwxPnwpJC8pO1xyXG5cclxuXHJcblxyXG52YXIgcmlzU2ltcGxlID0gL14uW146I1xcW1xcLixdKiQvO1xyXG5cclxuLy8gSW1wbGVtZW50IHRoZSBpZGVudGljYWwgZnVuY3Rpb25hbGl0eSBmb3IgZmlsdGVyIGFuZCBub3RcclxuZnVuY3Rpb24gd2lubm93KCBlbGVtZW50cywgcXVhbGlmaWVyLCBub3QgKSB7XHJcblx0aWYgKCBqUXVlcnkuaXNGdW5jdGlvbiggcXVhbGlmaWVyICkgKSB7XHJcblx0XHRyZXR1cm4galF1ZXJ5LmdyZXAoIGVsZW1lbnRzLCBmdW5jdGlvbiggZWxlbSwgaSApIHtcclxuXHRcdFx0LyoganNoaW50IC1XMDE4ICovXHJcblx0XHRcdHJldHVybiAhIXF1YWxpZmllci5jYWxsKCBlbGVtLCBpLCBlbGVtICkgIT09IG5vdDtcclxuXHRcdH0pO1xyXG5cclxuXHR9XHJcblxyXG5cdGlmICggcXVhbGlmaWVyLm5vZGVUeXBlICkge1xyXG5cdFx0cmV0dXJuIGpRdWVyeS5ncmVwKCBlbGVtZW50cywgZnVuY3Rpb24oIGVsZW0gKSB7XHJcblx0XHRcdHJldHVybiAoIGVsZW0gPT09IHF1YWxpZmllciApICE9PSBub3Q7XHJcblx0XHR9KTtcclxuXHJcblx0fVxyXG5cclxuXHRpZiAoIHR5cGVvZiBxdWFsaWZpZXIgPT09IFwic3RyaW5nXCIgKSB7XHJcblx0XHRpZiAoIHJpc1NpbXBsZS50ZXN0KCBxdWFsaWZpZXIgKSApIHtcclxuXHRcdFx0cmV0dXJuIGpRdWVyeS5maWx0ZXIoIHF1YWxpZmllciwgZWxlbWVudHMsIG5vdCApO1xyXG5cdFx0fVxyXG5cclxuXHRcdHF1YWxpZmllciA9IGpRdWVyeS5maWx0ZXIoIHF1YWxpZmllciwgZWxlbWVudHMgKTtcclxuXHR9XHJcblxyXG5cdHJldHVybiBqUXVlcnkuZ3JlcCggZWxlbWVudHMsIGZ1bmN0aW9uKCBlbGVtICkge1xyXG5cdFx0cmV0dXJuICggalF1ZXJ5LmluQXJyYXkoIGVsZW0sIHF1YWxpZmllciApID49IDAgKSAhPT0gbm90O1xyXG5cdH0pO1xyXG59XHJcblxyXG5qUXVlcnkuZmlsdGVyID0gZnVuY3Rpb24oIGV4cHIsIGVsZW1zLCBub3QgKSB7XHJcblx0dmFyIGVsZW0gPSBlbGVtc1sgMCBdO1xyXG5cclxuXHRpZiAoIG5vdCApIHtcclxuXHRcdGV4cHIgPSBcIjpub3QoXCIgKyBleHByICsgXCIpXCI7XHJcblx0fVxyXG5cclxuXHRyZXR1cm4gZWxlbXMubGVuZ3RoID09PSAxICYmIGVsZW0ubm9kZVR5cGUgPT09IDEgP1xyXG5cdFx0alF1ZXJ5LmZpbmQubWF0Y2hlc1NlbGVjdG9yKCBlbGVtLCBleHByICkgPyBbIGVsZW0gXSA6IFtdIDpcclxuXHRcdGpRdWVyeS5maW5kLm1hdGNoZXMoIGV4cHIsIGpRdWVyeS5ncmVwKCBlbGVtcywgZnVuY3Rpb24oIGVsZW0gKSB7XHJcblx0XHRcdHJldHVybiBlbGVtLm5vZGVUeXBlID09PSAxO1xyXG5cdFx0fSkpO1xyXG59O1xyXG5cclxualF1ZXJ5LmZuLmV4dGVuZCh7XHJcblx0ZmluZDogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xyXG5cdFx0dmFyIGksXHJcblx0XHRcdHJldCA9IFtdLFxyXG5cdFx0XHRzZWxmID0gdGhpcyxcclxuXHRcdFx0bGVuID0gc2VsZi5sZW5ndGg7XHJcblxyXG5cdFx0aWYgKCB0eXBlb2Ygc2VsZWN0b3IgIT09IFwic3RyaW5nXCIgKSB7XHJcblx0XHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggalF1ZXJ5KCBzZWxlY3RvciApLmZpbHRlcihmdW5jdGlvbigpIHtcclxuXHRcdFx0XHRmb3IgKCBpID0gMDsgaSA8IGxlbjsgaSsrICkge1xyXG5cdFx0XHRcdFx0aWYgKCBqUXVlcnkuY29udGFpbnMoIHNlbGZbIGkgXSwgdGhpcyApICkge1xyXG5cdFx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9XHJcblx0XHRcdH0pICk7XHJcblx0XHR9XHJcblxyXG5cdFx0Zm9yICggaSA9IDA7IGkgPCBsZW47IGkrKyApIHtcclxuXHRcdFx0alF1ZXJ5LmZpbmQoIHNlbGVjdG9yLCBzZWxmWyBpIF0sIHJldCApO1xyXG5cdFx0fVxyXG5cclxuXHRcdC8vIE5lZWRlZCBiZWNhdXNlICQoIHNlbGVjdG9yLCBjb250ZXh0ICkgYmVjb21lcyAkKCBjb250ZXh0ICkuZmluZCggc2VsZWN0b3IgKVxyXG5cdFx0cmV0ID0gdGhpcy5wdXNoU3RhY2soIGxlbiA+IDEgPyBqUXVlcnkudW5pcXVlKCByZXQgKSA6IHJldCApO1xyXG5cdFx0cmV0LnNlbGVjdG9yID0gdGhpcy5zZWxlY3RvciA/IHRoaXMuc2VsZWN0b3IgKyBcIiBcIiArIHNlbGVjdG9yIDogc2VsZWN0b3I7XHJcblx0XHRyZXR1cm4gcmV0O1xyXG5cdH0sXHJcblx0ZmlsdGVyOiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XHJcblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIHdpbm5vdyh0aGlzLCBzZWxlY3RvciB8fCBbXSwgZmFsc2UpICk7XHJcblx0fSxcclxuXHRub3Q6IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcclxuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggd2lubm93KHRoaXMsIHNlbGVjdG9yIHx8IFtdLCB0cnVlKSApO1xyXG5cdH0sXHJcblx0aXM6IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcclxuXHRcdHJldHVybiAhIXdpbm5vdyhcclxuXHRcdFx0dGhpcyxcclxuXHJcblx0XHRcdC8vIElmIHRoaXMgaXMgYSBwb3NpdGlvbmFsL3JlbGF0aXZlIHNlbGVjdG9yLCBjaGVjayBtZW1iZXJzaGlwIGluIHRoZSByZXR1cm5lZCBzZXRcclxuXHRcdFx0Ly8gc28gJChcInA6Zmlyc3RcIikuaXMoXCJwOmxhc3RcIikgd29uJ3QgcmV0dXJuIHRydWUgZm9yIGEgZG9jIHdpdGggdHdvIFwicFwiLlxyXG5cdFx0XHR0eXBlb2Ygc2VsZWN0b3IgPT09IFwic3RyaW5nXCIgJiYgcm5lZWRzQ29udGV4dC50ZXN0KCBzZWxlY3RvciApID9cclxuXHRcdFx0XHRqUXVlcnkoIHNlbGVjdG9yICkgOlxyXG5cdFx0XHRcdHNlbGVjdG9yIHx8IFtdLFxyXG5cdFx0XHRmYWxzZVxyXG5cdFx0KS5sZW5ndGg7XHJcblx0fVxyXG59KTtcclxuXHJcblxyXG4vLyBJbml0aWFsaXplIGEgalF1ZXJ5IG9iamVjdFxyXG5cclxuXHJcbi8vIEEgY2VudHJhbCByZWZlcmVuY2UgdG8gdGhlIHJvb3QgalF1ZXJ5KGRvY3VtZW50KVxyXG52YXIgcm9vdGpRdWVyeSxcclxuXHJcblx0Ly8gVXNlIHRoZSBjb3JyZWN0IGRvY3VtZW50IGFjY29yZGluZ2x5IHdpdGggd2luZG93IGFyZ3VtZW50IChzYW5kYm94KVxyXG5cdGRvY3VtZW50ID0gd2luZG93LmRvY3VtZW50LFxyXG5cclxuXHQvLyBBIHNpbXBsZSB3YXkgdG8gY2hlY2sgZm9yIEhUTUwgc3RyaW5nc1xyXG5cdC8vIFByaW9yaXRpemUgI2lkIG92ZXIgPHRhZz4gdG8gYXZvaWQgWFNTIHZpYSBsb2NhdGlvbi5oYXNoICgjOTUyMSlcclxuXHQvLyBTdHJpY3QgSFRNTCByZWNvZ25pdGlvbiAoIzExMjkwOiBtdXN0IHN0YXJ0IHdpdGggPClcclxuXHRycXVpY2tFeHByID0gL14oPzpcXHMqKDxbXFx3XFxXXSs+KVtePl0qfCMoW1xcdy1dKikpJC8sXHJcblxyXG5cdGluaXQgPSBqUXVlcnkuZm4uaW5pdCA9IGZ1bmN0aW9uKCBzZWxlY3RvciwgY29udGV4dCApIHtcclxuXHRcdHZhciBtYXRjaCwgZWxlbTtcclxuXHJcblx0XHQvLyBIQU5ETEU6ICQoXCJcIiksICQobnVsbCksICQodW5kZWZpbmVkKSwgJChmYWxzZSlcclxuXHRcdGlmICggIXNlbGVjdG9yICkge1xyXG5cdFx0XHRyZXR1cm4gdGhpcztcclxuXHRcdH1cclxuXHJcblx0XHQvLyBIYW5kbGUgSFRNTCBzdHJpbmdzXHJcblx0XHRpZiAoIHR5cGVvZiBzZWxlY3RvciA9PT0gXCJzdHJpbmdcIiApIHtcclxuXHRcdFx0aWYgKCBzZWxlY3Rvci5jaGFyQXQoMCkgPT09IFwiPFwiICYmIHNlbGVjdG9yLmNoYXJBdCggc2VsZWN0b3IubGVuZ3RoIC0gMSApID09PSBcIj5cIiAmJiBzZWxlY3Rvci5sZW5ndGggPj0gMyApIHtcclxuXHRcdFx0XHQvLyBBc3N1bWUgdGhhdCBzdHJpbmdzIHRoYXQgc3RhcnQgYW5kIGVuZCB3aXRoIDw+IGFyZSBIVE1MIGFuZCBza2lwIHRoZSByZWdleCBjaGVja1xyXG5cdFx0XHRcdG1hdGNoID0gWyBudWxsLCBzZWxlY3RvciwgbnVsbCBdO1xyXG5cclxuXHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRtYXRjaCA9IHJxdWlja0V4cHIuZXhlYyggc2VsZWN0b3IgKTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0Ly8gTWF0Y2ggaHRtbCBvciBtYWtlIHN1cmUgbm8gY29udGV4dCBpcyBzcGVjaWZpZWQgZm9yICNpZFxyXG5cdFx0XHRpZiAoIG1hdGNoICYmIChtYXRjaFsxXSB8fCAhY29udGV4dCkgKSB7XHJcblxyXG5cdFx0XHRcdC8vIEhBTkRMRTogJChodG1sKSAtPiAkKGFycmF5KVxyXG5cdFx0XHRcdGlmICggbWF0Y2hbMV0gKSB7XHJcblx0XHRcdFx0XHRjb250ZXh0ID0gY29udGV4dCBpbnN0YW5jZW9mIGpRdWVyeSA/IGNvbnRleHRbMF0gOiBjb250ZXh0O1xyXG5cclxuXHRcdFx0XHRcdC8vIHNjcmlwdHMgaXMgdHJ1ZSBmb3IgYmFjay1jb21wYXRcclxuXHRcdFx0XHRcdC8vIEludGVudGlvbmFsbHkgbGV0IHRoZSBlcnJvciBiZSB0aHJvd24gaWYgcGFyc2VIVE1MIGlzIG5vdCBwcmVzZW50XHJcblx0XHRcdFx0XHRqUXVlcnkubWVyZ2UoIHRoaXMsIGpRdWVyeS5wYXJzZUhUTUwoXHJcblx0XHRcdFx0XHRcdG1hdGNoWzFdLFxyXG5cdFx0XHRcdFx0XHRjb250ZXh0ICYmIGNvbnRleHQubm9kZVR5cGUgPyBjb250ZXh0Lm93bmVyRG9jdW1lbnQgfHwgY29udGV4dCA6IGRvY3VtZW50LFxyXG5cdFx0XHRcdFx0XHR0cnVlXHJcblx0XHRcdFx0XHQpICk7XHJcblxyXG5cdFx0XHRcdFx0Ly8gSEFORExFOiAkKGh0bWwsIHByb3BzKVxyXG5cdFx0XHRcdFx0aWYgKCByc2luZ2xlVGFnLnRlc3QoIG1hdGNoWzFdICkgJiYgalF1ZXJ5LmlzUGxhaW5PYmplY3QoIGNvbnRleHQgKSApIHtcclxuXHRcdFx0XHRcdFx0Zm9yICggbWF0Y2ggaW4gY29udGV4dCApIHtcclxuXHRcdFx0XHRcdFx0XHQvLyBQcm9wZXJ0aWVzIG9mIGNvbnRleHQgYXJlIGNhbGxlZCBhcyBtZXRob2RzIGlmIHBvc3NpYmxlXHJcblx0XHRcdFx0XHRcdFx0aWYgKCBqUXVlcnkuaXNGdW5jdGlvbiggdGhpc1sgbWF0Y2ggXSApICkge1xyXG5cdFx0XHRcdFx0XHRcdFx0dGhpc1sgbWF0Y2ggXSggY29udGV4dFsgbWF0Y2ggXSApO1xyXG5cclxuXHRcdFx0XHRcdFx0XHQvLyAuLi5hbmQgb3RoZXJ3aXNlIHNldCBhcyBhdHRyaWJ1dGVzXHJcblx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRcdFx0XHRcdHRoaXMuYXR0ciggbWF0Y2gsIGNvbnRleHRbIG1hdGNoIF0gKTtcclxuXHRcdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0XHRyZXR1cm4gdGhpcztcclxuXHJcblx0XHRcdFx0Ly8gSEFORExFOiAkKCNpZClcclxuXHRcdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdFx0ZWxlbSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCBtYXRjaFsyXSApO1xyXG5cclxuXHRcdFx0XHRcdC8vIENoZWNrIHBhcmVudE5vZGUgdG8gY2F0Y2ggd2hlbiBCbGFja2JlcnJ5IDQuNiByZXR1cm5zXHJcblx0XHRcdFx0XHQvLyBub2RlcyB0aGF0IGFyZSBubyBsb25nZXIgaW4gdGhlIGRvY3VtZW50ICM2OTYzXHJcblx0XHRcdFx0XHRpZiAoIGVsZW0gJiYgZWxlbS5wYXJlbnROb2RlICkge1xyXG5cdFx0XHRcdFx0XHQvLyBIYW5kbGUgdGhlIGNhc2Ugd2hlcmUgSUUgYW5kIE9wZXJhIHJldHVybiBpdGVtc1xyXG5cdFx0XHRcdFx0XHQvLyBieSBuYW1lIGluc3RlYWQgb2YgSURcclxuXHRcdFx0XHRcdFx0aWYgKCBlbGVtLmlkICE9PSBtYXRjaFsyXSApIHtcclxuXHRcdFx0XHRcdFx0XHRyZXR1cm4gcm9vdGpRdWVyeS5maW5kKCBzZWxlY3RvciApO1xyXG5cdFx0XHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdFx0XHQvLyBPdGhlcndpc2UsIHdlIGluamVjdCB0aGUgZWxlbWVudCBkaXJlY3RseSBpbnRvIHRoZSBqUXVlcnkgb2JqZWN0XHJcblx0XHRcdFx0XHRcdHRoaXMubGVuZ3RoID0gMTtcclxuXHRcdFx0XHRcdFx0dGhpc1swXSA9IGVsZW07XHJcblx0XHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdFx0dGhpcy5jb250ZXh0ID0gZG9jdW1lbnQ7XHJcblx0XHRcdFx0XHR0aGlzLnNlbGVjdG9yID0gc2VsZWN0b3I7XHJcblx0XHRcdFx0XHRyZXR1cm4gdGhpcztcclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHQvLyBIQU5ETEU6ICQoZXhwciwgJCguLi4pKVxyXG5cdFx0XHR9IGVsc2UgaWYgKCAhY29udGV4dCB8fCBjb250ZXh0LmpxdWVyeSApIHtcclxuXHRcdFx0XHRyZXR1cm4gKCBjb250ZXh0IHx8IHJvb3RqUXVlcnkgKS5maW5kKCBzZWxlY3RvciApO1xyXG5cclxuXHRcdFx0Ly8gSEFORExFOiAkKGV4cHIsIGNvbnRleHQpXHJcblx0XHRcdC8vICh3aGljaCBpcyBqdXN0IGVxdWl2YWxlbnQgdG86ICQoY29udGV4dCkuZmluZChleHByKVxyXG5cdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdHJldHVybiB0aGlzLmNvbnN0cnVjdG9yKCBjb250ZXh0ICkuZmluZCggc2VsZWN0b3IgKTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdC8vIEhBTkRMRTogJChET01FbGVtZW50KVxyXG5cdFx0fSBlbHNlIGlmICggc2VsZWN0b3Iubm9kZVR5cGUgKSB7XHJcblx0XHRcdHRoaXMuY29udGV4dCA9IHRoaXNbMF0gPSBzZWxlY3RvcjtcclxuXHRcdFx0dGhpcy5sZW5ndGggPSAxO1xyXG5cdFx0XHRyZXR1cm4gdGhpcztcclxuXHJcblx0XHQvLyBIQU5ETEU6ICQoZnVuY3Rpb24pXHJcblx0XHQvLyBTaG9ydGN1dCBmb3IgZG9jdW1lbnQgcmVhZHlcclxuXHRcdH0gZWxzZSBpZiAoIGpRdWVyeS5pc0Z1bmN0aW9uKCBzZWxlY3RvciApICkge1xyXG5cdFx0XHRyZXR1cm4gdHlwZW9mIHJvb3RqUXVlcnkucmVhZHkgIT09IFwidW5kZWZpbmVkXCIgP1xyXG5cdFx0XHRcdHJvb3RqUXVlcnkucmVhZHkoIHNlbGVjdG9yICkgOlxyXG5cdFx0XHRcdC8vIEV4ZWN1dGUgaW1tZWRpYXRlbHkgaWYgcmVhZHkgaXMgbm90IHByZXNlbnRcclxuXHRcdFx0XHRzZWxlY3RvciggalF1ZXJ5ICk7XHJcblx0XHR9XHJcblxyXG5cdFx0aWYgKCBzZWxlY3Rvci5zZWxlY3RvciAhPT0gdW5kZWZpbmVkICkge1xyXG5cdFx0XHR0aGlzLnNlbGVjdG9yID0gc2VsZWN0b3Iuc2VsZWN0b3I7XHJcblx0XHRcdHRoaXMuY29udGV4dCA9IHNlbGVjdG9yLmNvbnRleHQ7XHJcblx0XHR9XHJcblxyXG5cdFx0cmV0dXJuIGpRdWVyeS5tYWtlQXJyYXkoIHNlbGVjdG9yLCB0aGlzICk7XHJcblx0fTtcclxuXHJcbi8vIEdpdmUgdGhlIGluaXQgZnVuY3Rpb24gdGhlIGpRdWVyeSBwcm90b3R5cGUgZm9yIGxhdGVyIGluc3RhbnRpYXRpb25cclxuaW5pdC5wcm90b3R5cGUgPSBqUXVlcnkuZm47XHJcblxyXG4vLyBJbml0aWFsaXplIGNlbnRyYWwgcmVmZXJlbmNlXHJcbnJvb3RqUXVlcnkgPSBqUXVlcnkoIGRvY3VtZW50ICk7XHJcblxyXG5cclxudmFyIHJwYXJlbnRzcHJldiA9IC9eKD86cGFyZW50c3xwcmV2KD86VW50aWx8QWxsKSkvLFxyXG5cdC8vIG1ldGhvZHMgZ3VhcmFudGVlZCB0byBwcm9kdWNlIGEgdW5pcXVlIHNldCB3aGVuIHN0YXJ0aW5nIGZyb20gYSB1bmlxdWUgc2V0XHJcblx0Z3VhcmFudGVlZFVuaXF1ZSA9IHtcclxuXHRcdGNoaWxkcmVuOiB0cnVlLFxyXG5cdFx0Y29udGVudHM6IHRydWUsXHJcblx0XHRuZXh0OiB0cnVlLFxyXG5cdFx0cHJldjogdHJ1ZVxyXG5cdH07XHJcblxyXG5qUXVlcnkuZXh0ZW5kKHtcclxuXHRkaXI6IGZ1bmN0aW9uKCBlbGVtLCBkaXIsIHVudGlsICkge1xyXG5cdFx0dmFyIG1hdGNoZWQgPSBbXSxcclxuXHRcdFx0Y3VyID0gZWxlbVsgZGlyIF07XHJcblxyXG5cdFx0d2hpbGUgKCBjdXIgJiYgY3VyLm5vZGVUeXBlICE9PSA5ICYmICh1bnRpbCA9PT0gdW5kZWZpbmVkIHx8IGN1ci5ub2RlVHlwZSAhPT0gMSB8fCAhalF1ZXJ5KCBjdXIgKS5pcyggdW50aWwgKSkgKSB7XHJcblx0XHRcdGlmICggY3VyLm5vZGVUeXBlID09PSAxICkge1xyXG5cdFx0XHRcdG1hdGNoZWQucHVzaCggY3VyICk7XHJcblx0XHRcdH1cclxuXHRcdFx0Y3VyID0gY3VyW2Rpcl07XHJcblx0XHR9XHJcblx0XHRyZXR1cm4gbWF0Y2hlZDtcclxuXHR9LFxyXG5cclxuXHRzaWJsaW5nOiBmdW5jdGlvbiggbiwgZWxlbSApIHtcclxuXHRcdHZhciByID0gW107XHJcblxyXG5cdFx0Zm9yICggOyBuOyBuID0gbi5uZXh0U2libGluZyApIHtcclxuXHRcdFx0aWYgKCBuLm5vZGVUeXBlID09PSAxICYmIG4gIT09IGVsZW0gKSB7XHJcblx0XHRcdFx0ci5wdXNoKCBuICk7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHJcblx0XHRyZXR1cm4gcjtcclxuXHR9XHJcbn0pO1xyXG5cclxualF1ZXJ5LmZuLmV4dGVuZCh7XHJcblx0aGFzOiBmdW5jdGlvbiggdGFyZ2V0ICkge1xyXG5cdFx0dmFyIGksXHJcblx0XHRcdHRhcmdldHMgPSBqUXVlcnkoIHRhcmdldCwgdGhpcyApLFxyXG5cdFx0XHRsZW4gPSB0YXJnZXRzLmxlbmd0aDtcclxuXHJcblx0XHRyZXR1cm4gdGhpcy5maWx0ZXIoZnVuY3Rpb24oKSB7XHJcblx0XHRcdGZvciAoIGkgPSAwOyBpIDwgbGVuOyBpKysgKSB7XHJcblx0XHRcdFx0aWYgKCBqUXVlcnkuY29udGFpbnMoIHRoaXMsIHRhcmdldHNbaV0gKSApIHtcclxuXHRcdFx0XHRcdHJldHVybiB0cnVlO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0fSk7XHJcblx0fSxcclxuXHJcblx0Y2xvc2VzdDogZnVuY3Rpb24oIHNlbGVjdG9ycywgY29udGV4dCApIHtcclxuXHRcdHZhciBjdXIsXHJcblx0XHRcdGkgPSAwLFxyXG5cdFx0XHRsID0gdGhpcy5sZW5ndGgsXHJcblx0XHRcdG1hdGNoZWQgPSBbXSxcclxuXHRcdFx0cG9zID0gcm5lZWRzQ29udGV4dC50ZXN0KCBzZWxlY3RvcnMgKSB8fCB0eXBlb2Ygc2VsZWN0b3JzICE9PSBcInN0cmluZ1wiID9cclxuXHRcdFx0XHRqUXVlcnkoIHNlbGVjdG9ycywgY29udGV4dCB8fCB0aGlzLmNvbnRleHQgKSA6XHJcblx0XHRcdFx0MDtcclxuXHJcblx0XHRmb3IgKCA7IGkgPCBsOyBpKysgKSB7XHJcblx0XHRcdGZvciAoIGN1ciA9IHRoaXNbaV07IGN1ciAmJiBjdXIgIT09IGNvbnRleHQ7IGN1ciA9IGN1ci5wYXJlbnROb2RlICkge1xyXG5cdFx0XHRcdC8vIEFsd2F5cyBza2lwIGRvY3VtZW50IGZyYWdtZW50c1xyXG5cdFx0XHRcdGlmICggY3VyLm5vZGVUeXBlIDwgMTEgJiYgKHBvcyA/XHJcblx0XHRcdFx0XHRwb3MuaW5kZXgoY3VyKSA+IC0xIDpcclxuXHJcblx0XHRcdFx0XHQvLyBEb24ndCBwYXNzIG5vbi1lbGVtZW50cyB0byBTaXp6bGVcclxuXHRcdFx0XHRcdGN1ci5ub2RlVHlwZSA9PT0gMSAmJlxyXG5cdFx0XHRcdFx0XHRqUXVlcnkuZmluZC5tYXRjaGVzU2VsZWN0b3IoY3VyLCBzZWxlY3RvcnMpKSApIHtcclxuXHJcblx0XHRcdFx0XHRtYXRjaGVkLnB1c2goIGN1ciApO1xyXG5cdFx0XHRcdFx0YnJlYWs7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHR9XHJcblxyXG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCBtYXRjaGVkLmxlbmd0aCA+IDEgPyBqUXVlcnkudW5pcXVlKCBtYXRjaGVkICkgOiBtYXRjaGVkICk7XHJcblx0fSxcclxuXHJcblx0Ly8gRGV0ZXJtaW5lIHRoZSBwb3NpdGlvbiBvZiBhbiBlbGVtZW50IHdpdGhpblxyXG5cdC8vIHRoZSBtYXRjaGVkIHNldCBvZiBlbGVtZW50c1xyXG5cdGluZGV4OiBmdW5jdGlvbiggZWxlbSApIHtcclxuXHJcblx0XHQvLyBObyBhcmd1bWVudCwgcmV0dXJuIGluZGV4IGluIHBhcmVudFxyXG5cdFx0aWYgKCAhZWxlbSApIHtcclxuXHRcdFx0cmV0dXJuICggdGhpc1swXSAmJiB0aGlzWzBdLnBhcmVudE5vZGUgKSA/IHRoaXMuZmlyc3QoKS5wcmV2QWxsKCkubGVuZ3RoIDogLTE7XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gaW5kZXggaW4gc2VsZWN0b3JcclxuXHRcdGlmICggdHlwZW9mIGVsZW0gPT09IFwic3RyaW5nXCIgKSB7XHJcblx0XHRcdHJldHVybiBqUXVlcnkuaW5BcnJheSggdGhpc1swXSwgalF1ZXJ5KCBlbGVtICkgKTtcclxuXHRcdH1cclxuXHJcblx0XHQvLyBMb2NhdGUgdGhlIHBvc2l0aW9uIG9mIHRoZSBkZXNpcmVkIGVsZW1lbnRcclxuXHRcdHJldHVybiBqUXVlcnkuaW5BcnJheShcclxuXHRcdFx0Ly8gSWYgaXQgcmVjZWl2ZXMgYSBqUXVlcnkgb2JqZWN0LCB0aGUgZmlyc3QgZWxlbWVudCBpcyB1c2VkXHJcblx0XHRcdGVsZW0uanF1ZXJ5ID8gZWxlbVswXSA6IGVsZW0sIHRoaXMgKTtcclxuXHR9LFxyXG5cclxuXHRhZGQ6IGZ1bmN0aW9uKCBzZWxlY3RvciwgY29udGV4dCApIHtcclxuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayhcclxuXHRcdFx0alF1ZXJ5LnVuaXF1ZShcclxuXHRcdFx0XHRqUXVlcnkubWVyZ2UoIHRoaXMuZ2V0KCksIGpRdWVyeSggc2VsZWN0b3IsIGNvbnRleHQgKSApXHJcblx0XHRcdClcclxuXHRcdCk7XHJcblx0fSxcclxuXHJcblx0YWRkQmFjazogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xyXG5cdFx0cmV0dXJuIHRoaXMuYWRkKCBzZWxlY3RvciA9PSBudWxsID9cclxuXHRcdFx0dGhpcy5wcmV2T2JqZWN0IDogdGhpcy5wcmV2T2JqZWN0LmZpbHRlcihzZWxlY3RvcilcclxuXHRcdCk7XHJcblx0fVxyXG59KTtcclxuXHJcbmZ1bmN0aW9uIHNpYmxpbmcoIGN1ciwgZGlyICkge1xyXG5cdGRvIHtcclxuXHRcdGN1ciA9IGN1clsgZGlyIF07XHJcblx0fSB3aGlsZSAoIGN1ciAmJiBjdXIubm9kZVR5cGUgIT09IDEgKTtcclxuXHJcblx0cmV0dXJuIGN1cjtcclxufVxyXG5cclxualF1ZXJ5LmVhY2goe1xyXG5cdHBhcmVudDogZnVuY3Rpb24oIGVsZW0gKSB7XHJcblx0XHR2YXIgcGFyZW50ID0gZWxlbS5wYXJlbnROb2RlO1xyXG5cdFx0cmV0dXJuIHBhcmVudCAmJiBwYXJlbnQubm9kZVR5cGUgIT09IDExID8gcGFyZW50IDogbnVsbDtcclxuXHR9LFxyXG5cdHBhcmVudHM6IGZ1bmN0aW9uKCBlbGVtICkge1xyXG5cdFx0cmV0dXJuIGpRdWVyeS5kaXIoIGVsZW0sIFwicGFyZW50Tm9kZVwiICk7XHJcblx0fSxcclxuXHRwYXJlbnRzVW50aWw6IGZ1bmN0aW9uKCBlbGVtLCBpLCB1bnRpbCApIHtcclxuXHRcdHJldHVybiBqUXVlcnkuZGlyKCBlbGVtLCBcInBhcmVudE5vZGVcIiwgdW50aWwgKTtcclxuXHR9LFxyXG5cdG5leHQ6IGZ1bmN0aW9uKCBlbGVtICkge1xyXG5cdFx0cmV0dXJuIHNpYmxpbmcoIGVsZW0sIFwibmV4dFNpYmxpbmdcIiApO1xyXG5cdH0sXHJcblx0cHJldjogZnVuY3Rpb24oIGVsZW0gKSB7XHJcblx0XHRyZXR1cm4gc2libGluZyggZWxlbSwgXCJwcmV2aW91c1NpYmxpbmdcIiApO1xyXG5cdH0sXHJcblx0bmV4dEFsbDogZnVuY3Rpb24oIGVsZW0gKSB7XHJcblx0XHRyZXR1cm4galF1ZXJ5LmRpciggZWxlbSwgXCJuZXh0U2libGluZ1wiICk7XHJcblx0fSxcclxuXHRwcmV2QWxsOiBmdW5jdGlvbiggZWxlbSApIHtcclxuXHRcdHJldHVybiBqUXVlcnkuZGlyKCBlbGVtLCBcInByZXZpb3VzU2libGluZ1wiICk7XHJcblx0fSxcclxuXHRuZXh0VW50aWw6IGZ1bmN0aW9uKCBlbGVtLCBpLCB1bnRpbCApIHtcclxuXHRcdHJldHVybiBqUXVlcnkuZGlyKCBlbGVtLCBcIm5leHRTaWJsaW5nXCIsIHVudGlsICk7XHJcblx0fSxcclxuXHRwcmV2VW50aWw6IGZ1bmN0aW9uKCBlbGVtLCBpLCB1bnRpbCApIHtcclxuXHRcdHJldHVybiBqUXVlcnkuZGlyKCBlbGVtLCBcInByZXZpb3VzU2libGluZ1wiLCB1bnRpbCApO1xyXG5cdH0sXHJcblx0c2libGluZ3M6IGZ1bmN0aW9uKCBlbGVtICkge1xyXG5cdFx0cmV0dXJuIGpRdWVyeS5zaWJsaW5nKCAoIGVsZW0ucGFyZW50Tm9kZSB8fCB7fSApLmZpcnN0Q2hpbGQsIGVsZW0gKTtcclxuXHR9LFxyXG5cdGNoaWxkcmVuOiBmdW5jdGlvbiggZWxlbSApIHtcclxuXHRcdHJldHVybiBqUXVlcnkuc2libGluZyggZWxlbS5maXJzdENoaWxkICk7XHJcblx0fSxcclxuXHRjb250ZW50czogZnVuY3Rpb24oIGVsZW0gKSB7XHJcblx0XHRyZXR1cm4galF1ZXJ5Lm5vZGVOYW1lKCBlbGVtLCBcImlmcmFtZVwiICkgP1xyXG5cdFx0XHRlbGVtLmNvbnRlbnREb2N1bWVudCB8fCBlbGVtLmNvbnRlbnRXaW5kb3cuZG9jdW1lbnQgOlxyXG5cdFx0XHRqUXVlcnkubWVyZ2UoIFtdLCBlbGVtLmNoaWxkTm9kZXMgKTtcclxuXHR9XHJcbn0sIGZ1bmN0aW9uKCBuYW1lLCBmbiApIHtcclxuXHRqUXVlcnkuZm5bIG5hbWUgXSA9IGZ1bmN0aW9uKCB1bnRpbCwgc2VsZWN0b3IgKSB7XHJcblx0XHR2YXIgcmV0ID0galF1ZXJ5Lm1hcCggdGhpcywgZm4sIHVudGlsICk7XHJcblxyXG5cdFx0aWYgKCBuYW1lLnNsaWNlKCAtNSApICE9PSBcIlVudGlsXCIgKSB7XHJcblx0XHRcdHNlbGVjdG9yID0gdW50aWw7XHJcblx0XHR9XHJcblxyXG5cdFx0aWYgKCBzZWxlY3RvciAmJiB0eXBlb2Ygc2VsZWN0b3IgPT09IFwic3RyaW5nXCIgKSB7XHJcblx0XHRcdHJldCA9IGpRdWVyeS5maWx0ZXIoIHNlbGVjdG9yLCByZXQgKTtcclxuXHRcdH1cclxuXHJcblx0XHRpZiAoIHRoaXMubGVuZ3RoID4gMSApIHtcclxuXHRcdFx0Ly8gUmVtb3ZlIGR1cGxpY2F0ZXNcclxuXHRcdFx0aWYgKCAhZ3VhcmFudGVlZFVuaXF1ZVsgbmFtZSBdICkge1xyXG5cdFx0XHRcdHJldCA9IGpRdWVyeS51bmlxdWUoIHJldCApO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHQvLyBSZXZlcnNlIG9yZGVyIGZvciBwYXJlbnRzKiBhbmQgcHJldi1kZXJpdmF0aXZlc1xyXG5cdFx0XHRpZiAoIHJwYXJlbnRzcHJldi50ZXN0KCBuYW1lICkgKSB7XHJcblx0XHRcdFx0cmV0ID0gcmV0LnJldmVyc2UoKTtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggcmV0ICk7XHJcblx0fTtcclxufSk7XHJcbnZhciBybm90d2hpdGUgPSAoL1xcUysvZyk7XHJcblxyXG5cclxuXHJcbi8vIFN0cmluZyB0byBPYmplY3Qgb3B0aW9ucyBmb3JtYXQgY2FjaGVcclxudmFyIG9wdGlvbnNDYWNoZSA9IHt9O1xyXG5cclxuLy8gQ29udmVydCBTdHJpbmctZm9ybWF0dGVkIG9wdGlvbnMgaW50byBPYmplY3QtZm9ybWF0dGVkIG9uZXMgYW5kIHN0b3JlIGluIGNhY2hlXHJcbmZ1bmN0aW9uIGNyZWF0ZU9wdGlvbnMoIG9wdGlvbnMgKSB7XHJcblx0dmFyIG9iamVjdCA9IG9wdGlvbnNDYWNoZVsgb3B0aW9ucyBdID0ge307XHJcblx0alF1ZXJ5LmVhY2goIG9wdGlvbnMubWF0Y2goIHJub3R3aGl0ZSApIHx8IFtdLCBmdW5jdGlvbiggXywgZmxhZyApIHtcclxuXHRcdG9iamVjdFsgZmxhZyBdID0gdHJ1ZTtcclxuXHR9KTtcclxuXHRyZXR1cm4gb2JqZWN0O1xyXG59XHJcblxyXG4vKlxyXG4gKiBDcmVhdGUgYSBjYWxsYmFjayBsaXN0IHVzaW5nIHRoZSBmb2xsb3dpbmcgcGFyYW1ldGVyczpcclxuICpcclxuICpcdG9wdGlvbnM6IGFuIG9wdGlvbmFsIGxpc3Qgb2Ygc3BhY2Utc2VwYXJhdGVkIG9wdGlvbnMgdGhhdCB3aWxsIGNoYW5nZSBob3dcclxuICpcdFx0XHR0aGUgY2FsbGJhY2sgbGlzdCBiZWhhdmVzIG9yIGEgbW9yZSB0cmFkaXRpb25hbCBvcHRpb24gb2JqZWN0XHJcbiAqXHJcbiAqIEJ5IGRlZmF1bHQgYSBjYWxsYmFjayBsaXN0IHdpbGwgYWN0IGxpa2UgYW4gZXZlbnQgY2FsbGJhY2sgbGlzdCBhbmQgY2FuIGJlXHJcbiAqIFwiZmlyZWRcIiBtdWx0aXBsZSB0aW1lcy5cclxuICpcclxuICogUG9zc2libGUgb3B0aW9uczpcclxuICpcclxuICpcdG9uY2U6XHRcdFx0d2lsbCBlbnN1cmUgdGhlIGNhbGxiYWNrIGxpc3QgY2FuIG9ubHkgYmUgZmlyZWQgb25jZSAobGlrZSBhIERlZmVycmVkKVxyXG4gKlxyXG4gKlx0bWVtb3J5Olx0XHRcdHdpbGwga2VlcCB0cmFjayBvZiBwcmV2aW91cyB2YWx1ZXMgYW5kIHdpbGwgY2FsbCBhbnkgY2FsbGJhY2sgYWRkZWRcclxuICpcdFx0XHRcdFx0YWZ0ZXIgdGhlIGxpc3QgaGFzIGJlZW4gZmlyZWQgcmlnaHQgYXdheSB3aXRoIHRoZSBsYXRlc3QgXCJtZW1vcml6ZWRcIlxyXG4gKlx0XHRcdFx0XHR2YWx1ZXMgKGxpa2UgYSBEZWZlcnJlZClcclxuICpcclxuICpcdHVuaXF1ZTpcdFx0XHR3aWxsIGVuc3VyZSBhIGNhbGxiYWNrIGNhbiBvbmx5IGJlIGFkZGVkIG9uY2UgKG5vIGR1cGxpY2F0ZSBpbiB0aGUgbGlzdClcclxuICpcclxuICpcdHN0b3BPbkZhbHNlOlx0aW50ZXJydXB0IGNhbGxpbmdzIHdoZW4gYSBjYWxsYmFjayByZXR1cm5zIGZhbHNlXHJcbiAqXHJcbiAqL1xyXG5qUXVlcnkuQ2FsbGJhY2tzID0gZnVuY3Rpb24oIG9wdGlvbnMgKSB7XHJcblxyXG5cdC8vIENvbnZlcnQgb3B0aW9ucyBmcm9tIFN0cmluZy1mb3JtYXR0ZWQgdG8gT2JqZWN0LWZvcm1hdHRlZCBpZiBuZWVkZWRcclxuXHQvLyAod2UgY2hlY2sgaW4gY2FjaGUgZmlyc3QpXHJcblx0b3B0aW9ucyA9IHR5cGVvZiBvcHRpb25zID09PSBcInN0cmluZ1wiID9cclxuXHRcdCggb3B0aW9uc0NhY2hlWyBvcHRpb25zIF0gfHwgY3JlYXRlT3B0aW9ucyggb3B0aW9ucyApICkgOlxyXG5cdFx0alF1ZXJ5LmV4dGVuZCgge30sIG9wdGlvbnMgKTtcclxuXHJcblx0dmFyIC8vIEZsYWcgdG8ga25vdyBpZiBsaXN0IGlzIGN1cnJlbnRseSBmaXJpbmdcclxuXHRcdGZpcmluZyxcclxuXHRcdC8vIExhc3QgZmlyZSB2YWx1ZSAoZm9yIG5vbi1mb3JnZXR0YWJsZSBsaXN0cylcclxuXHRcdG1lbW9yeSxcclxuXHRcdC8vIEZsYWcgdG8ga25vdyBpZiBsaXN0IHdhcyBhbHJlYWR5IGZpcmVkXHJcblx0XHRmaXJlZCxcclxuXHRcdC8vIEVuZCBvZiB0aGUgbG9vcCB3aGVuIGZpcmluZ1xyXG5cdFx0ZmlyaW5nTGVuZ3RoLFxyXG5cdFx0Ly8gSW5kZXggb2YgY3VycmVudGx5IGZpcmluZyBjYWxsYmFjayAobW9kaWZpZWQgYnkgcmVtb3ZlIGlmIG5lZWRlZClcclxuXHRcdGZpcmluZ0luZGV4LFxyXG5cdFx0Ly8gRmlyc3QgY2FsbGJhY2sgdG8gZmlyZSAodXNlZCBpbnRlcm5hbGx5IGJ5IGFkZCBhbmQgZmlyZVdpdGgpXHJcblx0XHRmaXJpbmdTdGFydCxcclxuXHRcdC8vIEFjdHVhbCBjYWxsYmFjayBsaXN0XHJcblx0XHRsaXN0ID0gW10sXHJcblx0XHQvLyBTdGFjayBvZiBmaXJlIGNhbGxzIGZvciByZXBlYXRhYmxlIGxpc3RzXHJcblx0XHRzdGFjayA9ICFvcHRpb25zLm9uY2UgJiYgW10sXHJcblx0XHQvLyBGaXJlIGNhbGxiYWNrc1xyXG5cdFx0ZmlyZSA9IGZ1bmN0aW9uKCBkYXRhICkge1xyXG5cdFx0XHRtZW1vcnkgPSBvcHRpb25zLm1lbW9yeSAmJiBkYXRhO1xyXG5cdFx0XHRmaXJlZCA9IHRydWU7XHJcblx0XHRcdGZpcmluZ0luZGV4ID0gZmlyaW5nU3RhcnQgfHwgMDtcclxuXHRcdFx0ZmlyaW5nU3RhcnQgPSAwO1xyXG5cdFx0XHRmaXJpbmdMZW5ndGggPSBsaXN0Lmxlbmd0aDtcclxuXHRcdFx0ZmlyaW5nID0gdHJ1ZTtcclxuXHRcdFx0Zm9yICggOyBsaXN0ICYmIGZpcmluZ0luZGV4IDwgZmlyaW5nTGVuZ3RoOyBmaXJpbmdJbmRleCsrICkge1xyXG5cdFx0XHRcdGlmICggbGlzdFsgZmlyaW5nSW5kZXggXS5hcHBseSggZGF0YVsgMCBdLCBkYXRhWyAxIF0gKSA9PT0gZmFsc2UgJiYgb3B0aW9ucy5zdG9wT25GYWxzZSApIHtcclxuXHRcdFx0XHRcdG1lbW9yeSA9IGZhbHNlOyAvLyBUbyBwcmV2ZW50IGZ1cnRoZXIgY2FsbHMgdXNpbmcgYWRkXHJcblx0XHRcdFx0XHRicmVhaztcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdFx0ZmlyaW5nID0gZmFsc2U7XHJcblx0XHRcdGlmICggbGlzdCApIHtcclxuXHRcdFx0XHRpZiAoIHN0YWNrICkge1xyXG5cdFx0XHRcdFx0aWYgKCBzdGFjay5sZW5ndGggKSB7XHJcblx0XHRcdFx0XHRcdGZpcmUoIHN0YWNrLnNoaWZ0KCkgKTtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9IGVsc2UgaWYgKCBtZW1vcnkgKSB7XHJcblx0XHRcdFx0XHRsaXN0ID0gW107XHJcblx0XHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRcdHNlbGYuZGlzYWJsZSgpO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0fSxcclxuXHRcdC8vIEFjdHVhbCBDYWxsYmFja3Mgb2JqZWN0XHJcblx0XHRzZWxmID0ge1xyXG5cdFx0XHQvLyBBZGQgYSBjYWxsYmFjayBvciBhIGNvbGxlY3Rpb24gb2YgY2FsbGJhY2tzIHRvIHRoZSBsaXN0XHJcblx0XHRcdGFkZDogZnVuY3Rpb24oKSB7XHJcblx0XHRcdFx0aWYgKCBsaXN0ICkge1xyXG5cdFx0XHRcdFx0Ly8gRmlyc3QsIHdlIHNhdmUgdGhlIGN1cnJlbnQgbGVuZ3RoXHJcblx0XHRcdFx0XHR2YXIgc3RhcnQgPSBsaXN0Lmxlbmd0aDtcclxuXHRcdFx0XHRcdChmdW5jdGlvbiBhZGQoIGFyZ3MgKSB7XHJcblx0XHRcdFx0XHRcdGpRdWVyeS5lYWNoKCBhcmdzLCBmdW5jdGlvbiggXywgYXJnICkge1xyXG5cdFx0XHRcdFx0XHRcdHZhciB0eXBlID0galF1ZXJ5LnR5cGUoIGFyZyApO1xyXG5cdFx0XHRcdFx0XHRcdGlmICggdHlwZSA9PT0gXCJmdW5jdGlvblwiICkge1xyXG5cdFx0XHRcdFx0XHRcdFx0aWYgKCAhb3B0aW9ucy51bmlxdWUgfHwgIXNlbGYuaGFzKCBhcmcgKSApIHtcclxuXHRcdFx0XHRcdFx0XHRcdFx0bGlzdC5wdXNoKCBhcmcgKTtcclxuXHRcdFx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0XHR9IGVsc2UgaWYgKCBhcmcgJiYgYXJnLmxlbmd0aCAmJiB0eXBlICE9PSBcInN0cmluZ1wiICkge1xyXG5cdFx0XHRcdFx0XHRcdFx0Ly8gSW5zcGVjdCByZWN1cnNpdmVseVxyXG5cdFx0XHRcdFx0XHRcdFx0YWRkKCBhcmcgKTtcclxuXHRcdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdH0pO1xyXG5cdFx0XHRcdFx0fSkoIGFyZ3VtZW50cyApO1xyXG5cdFx0XHRcdFx0Ly8gRG8gd2UgbmVlZCB0byBhZGQgdGhlIGNhbGxiYWNrcyB0byB0aGVcclxuXHRcdFx0XHRcdC8vIGN1cnJlbnQgZmlyaW5nIGJhdGNoP1xyXG5cdFx0XHRcdFx0aWYgKCBmaXJpbmcgKSB7XHJcblx0XHRcdFx0XHRcdGZpcmluZ0xlbmd0aCA9IGxpc3QubGVuZ3RoO1xyXG5cdFx0XHRcdFx0Ly8gV2l0aCBtZW1vcnksIGlmIHdlJ3JlIG5vdCBmaXJpbmcgdGhlblxyXG5cdFx0XHRcdFx0Ly8gd2Ugc2hvdWxkIGNhbGwgcmlnaHQgYXdheVxyXG5cdFx0XHRcdFx0fSBlbHNlIGlmICggbWVtb3J5ICkge1xyXG5cdFx0XHRcdFx0XHRmaXJpbmdTdGFydCA9IHN0YXJ0O1xyXG5cdFx0XHRcdFx0XHRmaXJlKCBtZW1vcnkgKTtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9XHJcblx0XHRcdFx0cmV0dXJuIHRoaXM7XHJcblx0XHRcdH0sXHJcblx0XHRcdC8vIFJlbW92ZSBhIGNhbGxiYWNrIGZyb20gdGhlIGxpc3RcclxuXHRcdFx0cmVtb3ZlOiBmdW5jdGlvbigpIHtcclxuXHRcdFx0XHRpZiAoIGxpc3QgKSB7XHJcblx0XHRcdFx0XHRqUXVlcnkuZWFjaCggYXJndW1lbnRzLCBmdW5jdGlvbiggXywgYXJnICkge1xyXG5cdFx0XHRcdFx0XHR2YXIgaW5kZXg7XHJcblx0XHRcdFx0XHRcdHdoaWxlICggKCBpbmRleCA9IGpRdWVyeS5pbkFycmF5KCBhcmcsIGxpc3QsIGluZGV4ICkgKSA+IC0xICkge1xyXG5cdFx0XHRcdFx0XHRcdGxpc3Quc3BsaWNlKCBpbmRleCwgMSApO1xyXG5cdFx0XHRcdFx0XHRcdC8vIEhhbmRsZSBmaXJpbmcgaW5kZXhlc1xyXG5cdFx0XHRcdFx0XHRcdGlmICggZmlyaW5nICkge1xyXG5cdFx0XHRcdFx0XHRcdFx0aWYgKCBpbmRleCA8PSBmaXJpbmdMZW5ndGggKSB7XHJcblx0XHRcdFx0XHRcdFx0XHRcdGZpcmluZ0xlbmd0aC0tO1xyXG5cdFx0XHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHRcdFx0aWYgKCBpbmRleCA8PSBmaXJpbmdJbmRleCApIHtcclxuXHRcdFx0XHRcdFx0XHRcdFx0ZmlyaW5nSW5kZXgtLTtcclxuXHRcdFx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdH0pO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHRyZXR1cm4gdGhpcztcclxuXHRcdFx0fSxcclxuXHRcdFx0Ly8gQ2hlY2sgaWYgYSBnaXZlbiBjYWxsYmFjayBpcyBpbiB0aGUgbGlzdC5cclxuXHRcdFx0Ly8gSWYgbm8gYXJndW1lbnQgaXMgZ2l2ZW4sIHJldHVybiB3aGV0aGVyIG9yIG5vdCBsaXN0IGhhcyBjYWxsYmFja3MgYXR0YWNoZWQuXHJcblx0XHRcdGhhczogZnVuY3Rpb24oIGZuICkge1xyXG5cdFx0XHRcdHJldHVybiBmbiA/IGpRdWVyeS5pbkFycmF5KCBmbiwgbGlzdCApID4gLTEgOiAhISggbGlzdCAmJiBsaXN0Lmxlbmd0aCApO1xyXG5cdFx0XHR9LFxyXG5cdFx0XHQvLyBSZW1vdmUgYWxsIGNhbGxiYWNrcyBmcm9tIHRoZSBsaXN0XHJcblx0XHRcdGVtcHR5OiBmdW5jdGlvbigpIHtcclxuXHRcdFx0XHRsaXN0ID0gW107XHJcblx0XHRcdFx0ZmlyaW5nTGVuZ3RoID0gMDtcclxuXHRcdFx0XHRyZXR1cm4gdGhpcztcclxuXHRcdFx0fSxcclxuXHRcdFx0Ly8gSGF2ZSB0aGUgbGlzdCBkbyBub3RoaW5nIGFueW1vcmVcclxuXHRcdFx0ZGlzYWJsZTogZnVuY3Rpb24oKSB7XHJcblx0XHRcdFx0bGlzdCA9IHN0YWNrID0gbWVtb3J5ID0gdW5kZWZpbmVkO1xyXG5cdFx0XHRcdHJldHVybiB0aGlzO1xyXG5cdFx0XHR9LFxyXG5cdFx0XHQvLyBJcyBpdCBkaXNhYmxlZD9cclxuXHRcdFx0ZGlzYWJsZWQ6IGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRcdHJldHVybiAhbGlzdDtcclxuXHRcdFx0fSxcclxuXHRcdFx0Ly8gTG9jayB0aGUgbGlzdCBpbiBpdHMgY3VycmVudCBzdGF0ZVxyXG5cdFx0XHRsb2NrOiBmdW5jdGlvbigpIHtcclxuXHRcdFx0XHRzdGFjayA9IHVuZGVmaW5lZDtcclxuXHRcdFx0XHRpZiAoICFtZW1vcnkgKSB7XHJcblx0XHRcdFx0XHRzZWxmLmRpc2FibGUoKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdFx0cmV0dXJuIHRoaXM7XHJcblx0XHRcdH0sXHJcblx0XHRcdC8vIElzIGl0IGxvY2tlZD9cclxuXHRcdFx0bG9ja2VkOiBmdW5jdGlvbigpIHtcclxuXHRcdFx0XHRyZXR1cm4gIXN0YWNrO1xyXG5cdFx0XHR9LFxyXG5cdFx0XHQvLyBDYWxsIGFsbCBjYWxsYmFja3Mgd2l0aCB0aGUgZ2l2ZW4gY29udGV4dCBhbmQgYXJndW1lbnRzXHJcblx0XHRcdGZpcmVXaXRoOiBmdW5jdGlvbiggY29udGV4dCwgYXJncyApIHtcclxuXHRcdFx0XHRpZiAoIGxpc3QgJiYgKCAhZmlyZWQgfHwgc3RhY2sgKSApIHtcclxuXHRcdFx0XHRcdGFyZ3MgPSBhcmdzIHx8IFtdO1xyXG5cdFx0XHRcdFx0YXJncyA9IFsgY29udGV4dCwgYXJncy5zbGljZSA/IGFyZ3Muc2xpY2UoKSA6IGFyZ3MgXTtcclxuXHRcdFx0XHRcdGlmICggZmlyaW5nICkge1xyXG5cdFx0XHRcdFx0XHRzdGFjay5wdXNoKCBhcmdzICk7XHJcblx0XHRcdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdFx0XHRmaXJlKCBhcmdzICk7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fVxyXG5cdFx0XHRcdHJldHVybiB0aGlzO1xyXG5cdFx0XHR9LFxyXG5cdFx0XHQvLyBDYWxsIGFsbCB0aGUgY2FsbGJhY2tzIHdpdGggdGhlIGdpdmVuIGFyZ3VtZW50c1xyXG5cdFx0XHRmaXJlOiBmdW5jdGlvbigpIHtcclxuXHRcdFx0XHRzZWxmLmZpcmVXaXRoKCB0aGlzLCBhcmd1bWVudHMgKTtcclxuXHRcdFx0XHRyZXR1cm4gdGhpcztcclxuXHRcdFx0fSxcclxuXHRcdFx0Ly8gVG8ga25vdyBpZiB0aGUgY2FsbGJhY2tzIGhhdmUgYWxyZWFkeSBiZWVuIGNhbGxlZCBhdCBsZWFzdCBvbmNlXHJcblx0XHRcdGZpcmVkOiBmdW5jdGlvbigpIHtcclxuXHRcdFx0XHRyZXR1cm4gISFmaXJlZDtcclxuXHRcdFx0fVxyXG5cdFx0fTtcclxuXHJcblx0cmV0dXJuIHNlbGY7XHJcbn07XHJcblxyXG5cclxualF1ZXJ5LmV4dGVuZCh7XHJcblxyXG5cdERlZmVycmVkOiBmdW5jdGlvbiggZnVuYyApIHtcclxuXHRcdHZhciB0dXBsZXMgPSBbXHJcblx0XHRcdFx0Ly8gYWN0aW9uLCBhZGQgbGlzdGVuZXIsIGxpc3RlbmVyIGxpc3QsIGZpbmFsIHN0YXRlXHJcblx0XHRcdFx0WyBcInJlc29sdmVcIiwgXCJkb25lXCIsIGpRdWVyeS5DYWxsYmFja3MoXCJvbmNlIG1lbW9yeVwiKSwgXCJyZXNvbHZlZFwiIF0sXHJcblx0XHRcdFx0WyBcInJlamVjdFwiLCBcImZhaWxcIiwgalF1ZXJ5LkNhbGxiYWNrcyhcIm9uY2UgbWVtb3J5XCIpLCBcInJlamVjdGVkXCIgXSxcclxuXHRcdFx0XHRbIFwibm90aWZ5XCIsIFwicHJvZ3Jlc3NcIiwgalF1ZXJ5LkNhbGxiYWNrcyhcIm1lbW9yeVwiKSBdXHJcblx0XHRcdF0sXHJcblx0XHRcdHN0YXRlID0gXCJwZW5kaW5nXCIsXHJcblx0XHRcdHByb21pc2UgPSB7XHJcblx0XHRcdFx0c3RhdGU6IGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRcdFx0cmV0dXJuIHN0YXRlO1xyXG5cdFx0XHRcdH0sXHJcblx0XHRcdFx0YWx3YXlzOiBmdW5jdGlvbigpIHtcclxuXHRcdFx0XHRcdGRlZmVycmVkLmRvbmUoIGFyZ3VtZW50cyApLmZhaWwoIGFyZ3VtZW50cyApO1xyXG5cdFx0XHRcdFx0cmV0dXJuIHRoaXM7XHJcblx0XHRcdFx0fSxcclxuXHRcdFx0XHR0aGVuOiBmdW5jdGlvbiggLyogZm5Eb25lLCBmbkZhaWwsIGZuUHJvZ3Jlc3MgKi8gKSB7XHJcblx0XHRcdFx0XHR2YXIgZm5zID0gYXJndW1lbnRzO1xyXG5cdFx0XHRcdFx0cmV0dXJuIGpRdWVyeS5EZWZlcnJlZChmdW5jdGlvbiggbmV3RGVmZXIgKSB7XHJcblx0XHRcdFx0XHRcdGpRdWVyeS5lYWNoKCB0dXBsZXMsIGZ1bmN0aW9uKCBpLCB0dXBsZSApIHtcclxuXHRcdFx0XHRcdFx0XHR2YXIgZm4gPSBqUXVlcnkuaXNGdW5jdGlvbiggZm5zWyBpIF0gKSAmJiBmbnNbIGkgXTtcclxuXHRcdFx0XHRcdFx0XHQvLyBkZWZlcnJlZFsgZG9uZSB8IGZhaWwgfCBwcm9ncmVzcyBdIGZvciBmb3J3YXJkaW5nIGFjdGlvbnMgdG8gbmV3RGVmZXJcclxuXHRcdFx0XHRcdFx0XHRkZWZlcnJlZFsgdHVwbGVbMV0gXShmdW5jdGlvbigpIHtcclxuXHRcdFx0XHRcdFx0XHRcdHZhciByZXR1cm5lZCA9IGZuICYmIGZuLmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKTtcclxuXHRcdFx0XHRcdFx0XHRcdGlmICggcmV0dXJuZWQgJiYgalF1ZXJ5LmlzRnVuY3Rpb24oIHJldHVybmVkLnByb21pc2UgKSApIHtcclxuXHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuZWQucHJvbWlzZSgpXHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0LmRvbmUoIG5ld0RlZmVyLnJlc29sdmUgKVxyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC5mYWlsKCBuZXdEZWZlci5yZWplY3QgKVxyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC5wcm9ncmVzcyggbmV3RGVmZXIubm90aWZ5ICk7XHJcblx0XHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdFx0XHRcdFx0XHRuZXdEZWZlclsgdHVwbGVbIDAgXSArIFwiV2l0aFwiIF0oIHRoaXMgPT09IHByb21pc2UgPyBuZXdEZWZlci5wcm9taXNlKCkgOiB0aGlzLCBmbiA/IFsgcmV0dXJuZWQgXSA6IGFyZ3VtZW50cyApO1xyXG5cdFx0XHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHRcdH0pO1xyXG5cdFx0XHRcdFx0XHR9KTtcclxuXHRcdFx0XHRcdFx0Zm5zID0gbnVsbDtcclxuXHRcdFx0XHRcdH0pLnByb21pc2UoKTtcclxuXHRcdFx0XHR9LFxyXG5cdFx0XHRcdC8vIEdldCBhIHByb21pc2UgZm9yIHRoaXMgZGVmZXJyZWRcclxuXHRcdFx0XHQvLyBJZiBvYmogaXMgcHJvdmlkZWQsIHRoZSBwcm9taXNlIGFzcGVjdCBpcyBhZGRlZCB0byB0aGUgb2JqZWN0XHJcblx0XHRcdFx0cHJvbWlzZTogZnVuY3Rpb24oIG9iaiApIHtcclxuXHRcdFx0XHRcdHJldHVybiBvYmogIT0gbnVsbCA/IGpRdWVyeS5leHRlbmQoIG9iaiwgcHJvbWlzZSApIDogcHJvbWlzZTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH0sXHJcblx0XHRcdGRlZmVycmVkID0ge307XHJcblxyXG5cdFx0Ly8gS2VlcCBwaXBlIGZvciBiYWNrLWNvbXBhdFxyXG5cdFx0cHJvbWlzZS5waXBlID0gcHJvbWlzZS50aGVuO1xyXG5cclxuXHRcdC8vIEFkZCBsaXN0LXNwZWNpZmljIG1ldGhvZHNcclxuXHRcdGpRdWVyeS5lYWNoKCB0dXBsZXMsIGZ1bmN0aW9uKCBpLCB0dXBsZSApIHtcclxuXHRcdFx0dmFyIGxpc3QgPSB0dXBsZVsgMiBdLFxyXG5cdFx0XHRcdHN0YXRlU3RyaW5nID0gdHVwbGVbIDMgXTtcclxuXHJcblx0XHRcdC8vIHByb21pc2VbIGRvbmUgfCBmYWlsIHwgcHJvZ3Jlc3MgXSA9IGxpc3QuYWRkXHJcblx0XHRcdHByb21pc2VbIHR1cGxlWzFdIF0gPSBsaXN0LmFkZDtcclxuXHJcblx0XHRcdC8vIEhhbmRsZSBzdGF0ZVxyXG5cdFx0XHRpZiAoIHN0YXRlU3RyaW5nICkge1xyXG5cdFx0XHRcdGxpc3QuYWRkKGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRcdFx0Ly8gc3RhdGUgPSBbIHJlc29sdmVkIHwgcmVqZWN0ZWQgXVxyXG5cdFx0XHRcdFx0c3RhdGUgPSBzdGF0ZVN0cmluZztcclxuXHJcblx0XHRcdFx0Ly8gWyByZWplY3RfbGlzdCB8IHJlc29sdmVfbGlzdCBdLmRpc2FibGU7IHByb2dyZXNzX2xpc3QubG9ja1xyXG5cdFx0XHRcdH0sIHR1cGxlc1sgaSBeIDEgXVsgMiBdLmRpc2FibGUsIHR1cGxlc1sgMiBdWyAyIF0ubG9jayApO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHQvLyBkZWZlcnJlZFsgcmVzb2x2ZSB8IHJlamVjdCB8IG5vdGlmeSBdXHJcblx0XHRcdGRlZmVycmVkWyB0dXBsZVswXSBdID0gZnVuY3Rpb24oKSB7XHJcblx0XHRcdFx0ZGVmZXJyZWRbIHR1cGxlWzBdICsgXCJXaXRoXCIgXSggdGhpcyA9PT0gZGVmZXJyZWQgPyBwcm9taXNlIDogdGhpcywgYXJndW1lbnRzICk7XHJcblx0XHRcdFx0cmV0dXJuIHRoaXM7XHJcblx0XHRcdH07XHJcblx0XHRcdGRlZmVycmVkWyB0dXBsZVswXSArIFwiV2l0aFwiIF0gPSBsaXN0LmZpcmVXaXRoO1xyXG5cdFx0fSk7XHJcblxyXG5cdFx0Ly8gTWFrZSB0aGUgZGVmZXJyZWQgYSBwcm9taXNlXHJcblx0XHRwcm9taXNlLnByb21pc2UoIGRlZmVycmVkICk7XHJcblxyXG5cdFx0Ly8gQ2FsbCBnaXZlbiBmdW5jIGlmIGFueVxyXG5cdFx0aWYgKCBmdW5jICkge1xyXG5cdFx0XHRmdW5jLmNhbGwoIGRlZmVycmVkLCBkZWZlcnJlZCApO1xyXG5cdFx0fVxyXG5cclxuXHRcdC8vIEFsbCBkb25lIVxyXG5cdFx0cmV0dXJuIGRlZmVycmVkO1xyXG5cdH0sXHJcblxyXG5cdC8vIERlZmVycmVkIGhlbHBlclxyXG5cdHdoZW46IGZ1bmN0aW9uKCBzdWJvcmRpbmF0ZSAvKiAsIC4uLiwgc3Vib3JkaW5hdGVOICovICkge1xyXG5cdFx0dmFyIGkgPSAwLFxyXG5cdFx0XHRyZXNvbHZlVmFsdWVzID0gc2xpY2UuY2FsbCggYXJndW1lbnRzICksXHJcblx0XHRcdGxlbmd0aCA9IHJlc29sdmVWYWx1ZXMubGVuZ3RoLFxyXG5cclxuXHRcdFx0Ly8gdGhlIGNvdW50IG9mIHVuY29tcGxldGVkIHN1Ym9yZGluYXRlc1xyXG5cdFx0XHRyZW1haW5pbmcgPSBsZW5ndGggIT09IDEgfHwgKCBzdWJvcmRpbmF0ZSAmJiBqUXVlcnkuaXNGdW5jdGlvbiggc3Vib3JkaW5hdGUucHJvbWlzZSApICkgPyBsZW5ndGggOiAwLFxyXG5cclxuXHRcdFx0Ly8gdGhlIG1hc3RlciBEZWZlcnJlZC4gSWYgcmVzb2x2ZVZhbHVlcyBjb25zaXN0IG9mIG9ubHkgYSBzaW5nbGUgRGVmZXJyZWQsIGp1c3QgdXNlIHRoYXQuXHJcblx0XHRcdGRlZmVycmVkID0gcmVtYWluaW5nID09PSAxID8gc3Vib3JkaW5hdGUgOiBqUXVlcnkuRGVmZXJyZWQoKSxcclxuXHJcblx0XHRcdC8vIFVwZGF0ZSBmdW5jdGlvbiBmb3IgYm90aCByZXNvbHZlIGFuZCBwcm9ncmVzcyB2YWx1ZXNcclxuXHRcdFx0dXBkYXRlRnVuYyA9IGZ1bmN0aW9uKCBpLCBjb250ZXh0cywgdmFsdWVzICkge1xyXG5cdFx0XHRcdHJldHVybiBmdW5jdGlvbiggdmFsdWUgKSB7XHJcblx0XHRcdFx0XHRjb250ZXh0c1sgaSBdID0gdGhpcztcclxuXHRcdFx0XHRcdHZhbHVlc1sgaSBdID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBzbGljZS5jYWxsKCBhcmd1bWVudHMgKSA6IHZhbHVlO1xyXG5cdFx0XHRcdFx0aWYgKCB2YWx1ZXMgPT09IHByb2dyZXNzVmFsdWVzICkge1xyXG5cdFx0XHRcdFx0XHRkZWZlcnJlZC5ub3RpZnlXaXRoKCBjb250ZXh0cywgdmFsdWVzICk7XHJcblxyXG5cdFx0XHRcdFx0fSBlbHNlIGlmICggISgtLXJlbWFpbmluZykgKSB7XHJcblx0XHRcdFx0XHRcdGRlZmVycmVkLnJlc29sdmVXaXRoKCBjb250ZXh0cywgdmFsdWVzICk7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fTtcclxuXHRcdFx0fSxcclxuXHJcblx0XHRcdHByb2dyZXNzVmFsdWVzLCBwcm9ncmVzc0NvbnRleHRzLCByZXNvbHZlQ29udGV4dHM7XHJcblxyXG5cdFx0Ly8gYWRkIGxpc3RlbmVycyB0byBEZWZlcnJlZCBzdWJvcmRpbmF0ZXM7IHRyZWF0IG90aGVycyBhcyByZXNvbHZlZFxyXG5cdFx0aWYgKCBsZW5ndGggPiAxICkge1xyXG5cdFx0XHRwcm9ncmVzc1ZhbHVlcyA9IG5ldyBBcnJheSggbGVuZ3RoICk7XHJcblx0XHRcdHByb2dyZXNzQ29udGV4dHMgPSBuZXcgQXJyYXkoIGxlbmd0aCApO1xyXG5cdFx0XHRyZXNvbHZlQ29udGV4dHMgPSBuZXcgQXJyYXkoIGxlbmd0aCApO1xyXG5cdFx0XHRmb3IgKCA7IGkgPCBsZW5ndGg7IGkrKyApIHtcclxuXHRcdFx0XHRpZiAoIHJlc29sdmVWYWx1ZXNbIGkgXSAmJiBqUXVlcnkuaXNGdW5jdGlvbiggcmVzb2x2ZVZhbHVlc1sgaSBdLnByb21pc2UgKSApIHtcclxuXHRcdFx0XHRcdHJlc29sdmVWYWx1ZXNbIGkgXS5wcm9taXNlKClcclxuXHRcdFx0XHRcdFx0LmRvbmUoIHVwZGF0ZUZ1bmMoIGksIHJlc29sdmVDb250ZXh0cywgcmVzb2x2ZVZhbHVlcyApIClcclxuXHRcdFx0XHRcdFx0LmZhaWwoIGRlZmVycmVkLnJlamVjdCApXHJcblx0XHRcdFx0XHRcdC5wcm9ncmVzcyggdXBkYXRlRnVuYyggaSwgcHJvZ3Jlc3NDb250ZXh0cywgcHJvZ3Jlc3NWYWx1ZXMgKSApO1xyXG5cdFx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0XHQtLXJlbWFpbmluZztcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHJcblx0XHQvLyBpZiB3ZSdyZSBub3Qgd2FpdGluZyBvbiBhbnl0aGluZywgcmVzb2x2ZSB0aGUgbWFzdGVyXHJcblx0XHRpZiAoICFyZW1haW5pbmcgKSB7XHJcblx0XHRcdGRlZmVycmVkLnJlc29sdmVXaXRoKCByZXNvbHZlQ29udGV4dHMsIHJlc29sdmVWYWx1ZXMgKTtcclxuXHRcdH1cclxuXHJcblx0XHRyZXR1cm4gZGVmZXJyZWQucHJvbWlzZSgpO1xyXG5cdH1cclxufSk7XHJcblxyXG5cclxuLy8gVGhlIGRlZmVycmVkIHVzZWQgb24gRE9NIHJlYWR5XHJcbnZhciByZWFkeUxpc3Q7XHJcblxyXG5qUXVlcnkuZm4ucmVhZHkgPSBmdW5jdGlvbiggZm4gKSB7XHJcblx0Ly8gQWRkIHRoZSBjYWxsYmFja1xyXG5cdGpRdWVyeS5yZWFkeS5wcm9taXNlKCkuZG9uZSggZm4gKTtcclxuXHJcblx0cmV0dXJuIHRoaXM7XHJcbn07XHJcblxyXG5qUXVlcnkuZXh0ZW5kKHtcclxuXHQvLyBJcyB0aGUgRE9NIHJlYWR5IHRvIGJlIHVzZWQ/IFNldCB0byB0cnVlIG9uY2UgaXQgb2NjdXJzLlxyXG5cdGlzUmVhZHk6IGZhbHNlLFxyXG5cclxuXHQvLyBBIGNvdW50ZXIgdG8gdHJhY2sgaG93IG1hbnkgaXRlbXMgdG8gd2FpdCBmb3IgYmVmb3JlXHJcblx0Ly8gdGhlIHJlYWR5IGV2ZW50IGZpcmVzLiBTZWUgIzY3ODFcclxuXHRyZWFkeVdhaXQ6IDEsXHJcblxyXG5cdC8vIEhvbGQgKG9yIHJlbGVhc2UpIHRoZSByZWFkeSBldmVudFxyXG5cdGhvbGRSZWFkeTogZnVuY3Rpb24oIGhvbGQgKSB7XHJcblx0XHRpZiAoIGhvbGQgKSB7XHJcblx0XHRcdGpRdWVyeS5yZWFkeVdhaXQrKztcclxuXHRcdH0gZWxzZSB7XHJcblx0XHRcdGpRdWVyeS5yZWFkeSggdHJ1ZSApO1xyXG5cdFx0fVxyXG5cdH0sXHJcblxyXG5cdC8vIEhhbmRsZSB3aGVuIHRoZSBET00gaXMgcmVhZHlcclxuXHRyZWFkeTogZnVuY3Rpb24oIHdhaXQgKSB7XHJcblxyXG5cdFx0Ly8gQWJvcnQgaWYgdGhlcmUgYXJlIHBlbmRpbmcgaG9sZHMgb3Igd2UncmUgYWxyZWFkeSByZWFkeVxyXG5cdFx0aWYgKCB3YWl0ID09PSB0cnVlID8gLS1qUXVlcnkucmVhZHlXYWl0IDogalF1ZXJ5LmlzUmVhZHkgKSB7XHJcblx0XHRcdHJldHVybjtcclxuXHRcdH1cclxuXHJcblx0XHQvLyBNYWtlIHN1cmUgYm9keSBleGlzdHMsIGF0IGxlYXN0LCBpbiBjYXNlIElFIGdldHMgYSBsaXR0bGUgb3ZlcnplYWxvdXMgKHRpY2tldCAjNTQ0MykuXHJcblx0XHRpZiAoICFkb2N1bWVudC5ib2R5ICkge1xyXG5cdFx0XHRyZXR1cm4gc2V0VGltZW91dCggalF1ZXJ5LnJlYWR5ICk7XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gUmVtZW1iZXIgdGhhdCB0aGUgRE9NIGlzIHJlYWR5XHJcblx0XHRqUXVlcnkuaXNSZWFkeSA9IHRydWU7XHJcblxyXG5cdFx0Ly8gSWYgYSBub3JtYWwgRE9NIFJlYWR5IGV2ZW50IGZpcmVkLCBkZWNyZW1lbnQsIGFuZCB3YWl0IGlmIG5lZWQgYmVcclxuXHRcdGlmICggd2FpdCAhPT0gdHJ1ZSAmJiAtLWpRdWVyeS5yZWFkeVdhaXQgPiAwICkge1xyXG5cdFx0XHRyZXR1cm47XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gSWYgdGhlcmUgYXJlIGZ1bmN0aW9ucyBib3VuZCwgdG8gZXhlY3V0ZVxyXG5cdFx0cmVhZHlMaXN0LnJlc29sdmVXaXRoKCBkb2N1bWVudCwgWyBqUXVlcnkgXSApO1xyXG5cclxuXHRcdC8vIFRyaWdnZXIgYW55IGJvdW5kIHJlYWR5IGV2ZW50c1xyXG5cdFx0aWYgKCBqUXVlcnkuZm4udHJpZ2dlckhhbmRsZXIgKSB7XHJcblx0XHRcdGpRdWVyeSggZG9jdW1lbnQgKS50cmlnZ2VySGFuZGxlciggXCJyZWFkeVwiICk7XHJcblx0XHRcdGpRdWVyeSggZG9jdW1lbnQgKS5vZmYoIFwicmVhZHlcIiApO1xyXG5cdFx0fVxyXG5cdH1cclxufSk7XHJcblxyXG4vKipcclxuICogQ2xlYW4tdXAgbWV0aG9kIGZvciBkb20gcmVhZHkgZXZlbnRzXHJcbiAqL1xyXG5mdW5jdGlvbiBkZXRhY2goKSB7XHJcblx0aWYgKCBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyICkge1xyXG5cdFx0ZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lciggXCJET01Db250ZW50TG9hZGVkXCIsIGNvbXBsZXRlZCwgZmFsc2UgKTtcclxuXHRcdHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCBcImxvYWRcIiwgY29tcGxldGVkLCBmYWxzZSApO1xyXG5cclxuXHR9IGVsc2Uge1xyXG5cdFx0ZG9jdW1lbnQuZGV0YWNoRXZlbnQoIFwib25yZWFkeXN0YXRlY2hhbmdlXCIsIGNvbXBsZXRlZCApO1xyXG5cdFx0d2luZG93LmRldGFjaEV2ZW50KCBcIm9ubG9hZFwiLCBjb21wbGV0ZWQgKTtcclxuXHR9XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBUaGUgcmVhZHkgZXZlbnQgaGFuZGxlciBhbmQgc2VsZiBjbGVhbnVwIG1ldGhvZFxyXG4gKi9cclxuZnVuY3Rpb24gY29tcGxldGVkKCkge1xyXG5cdC8vIHJlYWR5U3RhdGUgPT09IFwiY29tcGxldGVcIiBpcyBnb29kIGVub3VnaCBmb3IgdXMgdG8gY2FsbCB0aGUgZG9tIHJlYWR5IGluIG9sZElFXHJcblx0aWYgKCBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyIHx8IGV2ZW50LnR5cGUgPT09IFwibG9hZFwiIHx8IGRvY3VtZW50LnJlYWR5U3RhdGUgPT09IFwiY29tcGxldGVcIiApIHtcclxuXHRcdGRldGFjaCgpO1xyXG5cdFx0alF1ZXJ5LnJlYWR5KCk7XHJcblx0fVxyXG59XHJcblxyXG5qUXVlcnkucmVhZHkucHJvbWlzZSA9IGZ1bmN0aW9uKCBvYmogKSB7XHJcblx0aWYgKCAhcmVhZHlMaXN0ICkge1xyXG5cclxuXHRcdHJlYWR5TGlzdCA9IGpRdWVyeS5EZWZlcnJlZCgpO1xyXG5cclxuXHRcdC8vIENhdGNoIGNhc2VzIHdoZXJlICQoZG9jdW1lbnQpLnJlYWR5KCkgaXMgY2FsbGVkIGFmdGVyIHRoZSBicm93c2VyIGV2ZW50IGhhcyBhbHJlYWR5IG9jY3VycmVkLlxyXG5cdFx0Ly8gd2Ugb25jZSB0cmllZCB0byB1c2UgcmVhZHlTdGF0ZSBcImludGVyYWN0aXZlXCIgaGVyZSwgYnV0IGl0IGNhdXNlZCBpc3N1ZXMgbGlrZSB0aGUgb25lXHJcblx0XHQvLyBkaXNjb3ZlcmVkIGJ5IENocmlzUyBoZXJlOiBodHRwOi8vYnVncy5qcXVlcnkuY29tL3RpY2tldC8xMjI4MiNjb21tZW50OjE1XHJcblx0XHRpZiAoIGRvY3VtZW50LnJlYWR5U3RhdGUgPT09IFwiY29tcGxldGVcIiApIHtcclxuXHRcdFx0Ly8gSGFuZGxlIGl0IGFzeW5jaHJvbm91c2x5IHRvIGFsbG93IHNjcmlwdHMgdGhlIG9wcG9ydHVuaXR5IHRvIGRlbGF5IHJlYWR5XHJcblx0XHRcdHNldFRpbWVvdXQoIGpRdWVyeS5yZWFkeSApO1xyXG5cclxuXHRcdC8vIFN0YW5kYXJkcy1iYXNlZCBicm93c2VycyBzdXBwb3J0IERPTUNvbnRlbnRMb2FkZWRcclxuXHRcdH0gZWxzZSBpZiAoIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIgKSB7XHJcblx0XHRcdC8vIFVzZSB0aGUgaGFuZHkgZXZlbnQgY2FsbGJhY2tcclxuXHRcdFx0ZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lciggXCJET01Db250ZW50TG9hZGVkXCIsIGNvbXBsZXRlZCwgZmFsc2UgKTtcclxuXHJcblx0XHRcdC8vIEEgZmFsbGJhY2sgdG8gd2luZG93Lm9ubG9hZCwgdGhhdCB3aWxsIGFsd2F5cyB3b3JrXHJcblx0XHRcdHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCBcImxvYWRcIiwgY29tcGxldGVkLCBmYWxzZSApO1xyXG5cclxuXHRcdC8vIElmIElFIGV2ZW50IG1vZGVsIGlzIHVzZWRcclxuXHRcdH0gZWxzZSB7XHJcblx0XHRcdC8vIEVuc3VyZSBmaXJpbmcgYmVmb3JlIG9ubG9hZCwgbWF5YmUgbGF0ZSBidXQgc2FmZSBhbHNvIGZvciBpZnJhbWVzXHJcblx0XHRcdGRvY3VtZW50LmF0dGFjaEV2ZW50KCBcIm9ucmVhZHlzdGF0ZWNoYW5nZVwiLCBjb21wbGV0ZWQgKTtcclxuXHJcblx0XHRcdC8vIEEgZmFsbGJhY2sgdG8gd2luZG93Lm9ubG9hZCwgdGhhdCB3aWxsIGFsd2F5cyB3b3JrXHJcblx0XHRcdHdpbmRvdy5hdHRhY2hFdmVudCggXCJvbmxvYWRcIiwgY29tcGxldGVkICk7XHJcblxyXG5cdFx0XHQvLyBJZiBJRSBhbmQgbm90IGEgZnJhbWVcclxuXHRcdFx0Ly8gY29udGludWFsbHkgY2hlY2sgdG8gc2VlIGlmIHRoZSBkb2N1bWVudCBpcyByZWFkeVxyXG5cdFx0XHR2YXIgdG9wID0gZmFsc2U7XHJcblxyXG5cdFx0XHR0cnkge1xyXG5cdFx0XHRcdHRvcCA9IHdpbmRvdy5mcmFtZUVsZW1lbnQgPT0gbnVsbCAmJiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XHJcblx0XHRcdH0gY2F0Y2goZSkge31cclxuXHJcblx0XHRcdGlmICggdG9wICYmIHRvcC5kb1Njcm9sbCApIHtcclxuXHRcdFx0XHQoZnVuY3Rpb24gZG9TY3JvbGxDaGVjaygpIHtcclxuXHRcdFx0XHRcdGlmICggIWpRdWVyeS5pc1JlYWR5ICkge1xyXG5cclxuXHRcdFx0XHRcdFx0dHJ5IHtcclxuXHRcdFx0XHRcdFx0XHQvLyBVc2UgdGhlIHRyaWNrIGJ5IERpZWdvIFBlcmluaVxyXG5cdFx0XHRcdFx0XHRcdC8vIGh0dHA6Ly9qYXZhc2NyaXB0Lm53Ym94LmNvbS9JRUNvbnRlbnRMb2FkZWQvXHJcblx0XHRcdFx0XHRcdFx0dG9wLmRvU2Nyb2xsKFwibGVmdFwiKTtcclxuXHRcdFx0XHRcdFx0fSBjYXRjaChlKSB7XHJcblx0XHRcdFx0XHRcdFx0cmV0dXJuIHNldFRpbWVvdXQoIGRvU2Nyb2xsQ2hlY2ssIDUwICk7XHJcblx0XHRcdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0XHRcdC8vIGRldGFjaCBhbGwgZG9tIHJlYWR5IGV2ZW50c1xyXG5cdFx0XHRcdFx0XHRkZXRhY2goKTtcclxuXHJcblx0XHRcdFx0XHRcdC8vIGFuZCBleGVjdXRlIGFueSB3YWl0aW5nIGZ1bmN0aW9uc1xyXG5cdFx0XHRcdFx0XHRqUXVlcnkucmVhZHkoKTtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9KSgpO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0fVxyXG5cdHJldHVybiByZWFkeUxpc3QucHJvbWlzZSggb2JqICk7XHJcbn07XHJcblxyXG5cclxudmFyIHN0cnVuZGVmaW5lZCA9IHR5cGVvZiB1bmRlZmluZWQ7XHJcblxyXG5cclxuXHJcbi8vIFN1cHBvcnQ6IElFPDlcclxuLy8gSXRlcmF0aW9uIG92ZXIgb2JqZWN0J3MgaW5oZXJpdGVkIHByb3BlcnRpZXMgYmVmb3JlIGl0cyBvd25cclxudmFyIGk7XHJcbmZvciAoIGkgaW4galF1ZXJ5KCBzdXBwb3J0ICkgKSB7XHJcblx0YnJlYWs7XHJcbn1cclxuc3VwcG9ydC5vd25MYXN0ID0gaSAhPT0gXCIwXCI7XHJcblxyXG4vLyBOb3RlOiBtb3N0IHN1cHBvcnQgdGVzdHMgYXJlIGRlZmluZWQgaW4gdGhlaXIgcmVzcGVjdGl2ZSBtb2R1bGVzLlxyXG4vLyBmYWxzZSB1bnRpbCB0aGUgdGVzdCBpcyBydW5cclxuc3VwcG9ydC5pbmxpbmVCbG9ja05lZWRzTGF5b3V0ID0gZmFsc2U7XHJcblxyXG4vLyBFeGVjdXRlIEFTQVAgaW4gY2FzZSB3ZSBuZWVkIHRvIHNldCBib2R5LnN0eWxlLnpvb21cclxualF1ZXJ5KGZ1bmN0aW9uKCkge1xyXG5cdC8vIE1pbmlmaWVkOiB2YXIgYSxiLGMsZFxyXG5cdHZhciB2YWwsIGRpdiwgYm9keSwgY29udGFpbmVyO1xyXG5cclxuXHRib2R5ID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoIFwiYm9keVwiIClbIDAgXTtcclxuXHRpZiAoICFib2R5IHx8ICFib2R5LnN0eWxlICkge1xyXG5cdFx0Ly8gUmV0dXJuIGZvciBmcmFtZXNldCBkb2NzIHRoYXQgZG9uJ3QgaGF2ZSBhIGJvZHlcclxuXHRcdHJldHVybjtcclxuXHR9XHJcblxyXG5cdC8vIFNldHVwXHJcblx0ZGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJkaXZcIiApO1xyXG5cdGNvbnRhaW5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiZGl2XCIgKTtcclxuXHRjb250YWluZXIuc3R5bGUuY3NzVGV4dCA9IFwicG9zaXRpb246YWJzb2x1dGU7Ym9yZGVyOjA7d2lkdGg6MDtoZWlnaHQ6MDt0b3A6MDtsZWZ0Oi05OTk5cHhcIjtcclxuXHRib2R5LmFwcGVuZENoaWxkKCBjb250YWluZXIgKS5hcHBlbmRDaGlsZCggZGl2ICk7XHJcblxyXG5cdGlmICggdHlwZW9mIGRpdi5zdHlsZS56b29tICE9PSBzdHJ1bmRlZmluZWQgKSB7XHJcblx0XHQvLyBTdXBwb3J0OiBJRTw4XHJcblx0XHQvLyBDaGVjayBpZiBuYXRpdmVseSBibG9jay1sZXZlbCBlbGVtZW50cyBhY3QgbGlrZSBpbmxpbmUtYmxvY2tcclxuXHRcdC8vIGVsZW1lbnRzIHdoZW4gc2V0dGluZyB0aGVpciBkaXNwbGF5IHRvICdpbmxpbmUnIGFuZCBnaXZpbmdcclxuXHRcdC8vIHRoZW0gbGF5b3V0XHJcblx0XHRkaXYuc3R5bGUuY3NzVGV4dCA9IFwiZGlzcGxheTppbmxpbmU7bWFyZ2luOjA7Ym9yZGVyOjA7cGFkZGluZzoxcHg7d2lkdGg6MXB4O3pvb206MVwiO1xyXG5cclxuXHRcdHN1cHBvcnQuaW5saW5lQmxvY2tOZWVkc0xheW91dCA9IHZhbCA9IGRpdi5vZmZzZXRXaWR0aCA9PT0gMztcclxuXHRcdGlmICggdmFsICkge1xyXG5cdFx0XHQvLyBQcmV2ZW50IElFIDYgZnJvbSBhZmZlY3RpbmcgbGF5b3V0IGZvciBwb3NpdGlvbmVkIGVsZW1lbnRzICMxMTA0OFxyXG5cdFx0XHQvLyBQcmV2ZW50IElFIGZyb20gc2hyaW5raW5nIHRoZSBib2R5IGluIElFIDcgbW9kZSAjMTI4NjlcclxuXHRcdFx0Ly8gU3VwcG9ydDogSUU8OFxyXG5cdFx0XHRib2R5LnN0eWxlLnpvb20gPSAxO1xyXG5cdFx0fVxyXG5cdH1cclxuXHJcblx0Ym9keS5yZW1vdmVDaGlsZCggY29udGFpbmVyICk7XHJcbn0pO1xyXG5cclxuXHJcblxyXG5cclxuKGZ1bmN0aW9uKCkge1xyXG5cdHZhciBkaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImRpdlwiICk7XHJcblxyXG5cdC8vIEV4ZWN1dGUgdGhlIHRlc3Qgb25seSBpZiBub3QgYWxyZWFkeSBleGVjdXRlZCBpbiBhbm90aGVyIG1vZHVsZS5cclxuXHRpZiAoc3VwcG9ydC5kZWxldGVFeHBhbmRvID09IG51bGwpIHtcclxuXHRcdC8vIFN1cHBvcnQ6IElFPDlcclxuXHRcdHN1cHBvcnQuZGVsZXRlRXhwYW5kbyA9IHRydWU7XHJcblx0XHR0cnkge1xyXG5cdFx0XHRkZWxldGUgZGl2LnRlc3Q7XHJcblx0XHR9IGNhdGNoKCBlICkge1xyXG5cdFx0XHRzdXBwb3J0LmRlbGV0ZUV4cGFuZG8gPSBmYWxzZTtcclxuXHRcdH1cclxuXHR9XHJcblxyXG5cdC8vIE51bGwgZWxlbWVudHMgdG8gYXZvaWQgbGVha3MgaW4gSUUuXHJcblx0ZGl2ID0gbnVsbDtcclxufSkoKTtcclxuXHJcblxyXG4vKipcclxuICogRGV0ZXJtaW5lcyB3aGV0aGVyIGFuIG9iamVjdCBjYW4gaGF2ZSBkYXRhXHJcbiAqL1xyXG5qUXVlcnkuYWNjZXB0RGF0YSA9IGZ1bmN0aW9uKCBlbGVtICkge1xyXG5cdHZhciBub0RhdGEgPSBqUXVlcnkubm9EYXRhWyAoZWxlbS5ub2RlTmFtZSArIFwiIFwiKS50b0xvd2VyQ2FzZSgpIF0sXHJcblx0XHRub2RlVHlwZSA9ICtlbGVtLm5vZGVUeXBlIHx8IDE7XHJcblxyXG5cdC8vIERvIG5vdCBzZXQgZGF0YSBvbiBub24tZWxlbWVudCBET00gbm9kZXMgYmVjYXVzZSBpdCB3aWxsIG5vdCBiZSBjbGVhcmVkICgjODMzNSkuXHJcblx0cmV0dXJuIG5vZGVUeXBlICE9PSAxICYmIG5vZGVUeXBlICE9PSA5ID9cclxuXHRcdGZhbHNlIDpcclxuXHJcblx0XHQvLyBOb2RlcyBhY2NlcHQgZGF0YSB1bmxlc3Mgb3RoZXJ3aXNlIHNwZWNpZmllZDsgcmVqZWN0aW9uIGNhbiBiZSBjb25kaXRpb25hbFxyXG5cdFx0IW5vRGF0YSB8fCBub0RhdGEgIT09IHRydWUgJiYgZWxlbS5nZXRBdHRyaWJ1dGUoXCJjbGFzc2lkXCIpID09PSBub0RhdGE7XHJcbn07XHJcblxyXG5cclxudmFyIHJicmFjZSA9IC9eKD86XFx7W1xcd1xcV10qXFx9fFxcW1tcXHdcXFddKlxcXSkkLyxcclxuXHRybXVsdGlEYXNoID0gLyhbQS1aXSkvZztcclxuXHJcbmZ1bmN0aW9uIGRhdGFBdHRyKCBlbGVtLCBrZXksIGRhdGEgKSB7XHJcblx0Ly8gSWYgbm90aGluZyB3YXMgZm91bmQgaW50ZXJuYWxseSwgdHJ5IHRvIGZldGNoIGFueVxyXG5cdC8vIGRhdGEgZnJvbSB0aGUgSFRNTDUgZGF0YS0qIGF0dHJpYnV0ZVxyXG5cdGlmICggZGF0YSA9PT0gdW5kZWZpbmVkICYmIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7XHJcblxyXG5cdFx0dmFyIG5hbWUgPSBcImRhdGEtXCIgKyBrZXkucmVwbGFjZSggcm11bHRpRGFzaCwgXCItJDFcIiApLnRvTG93ZXJDYXNlKCk7XHJcblxyXG5cdFx0ZGF0YSA9IGVsZW0uZ2V0QXR0cmlidXRlKCBuYW1lICk7XHJcblxyXG5cdFx0aWYgKCB0eXBlb2YgZGF0YSA9PT0gXCJzdHJpbmdcIiApIHtcclxuXHRcdFx0dHJ5IHtcclxuXHRcdFx0XHRkYXRhID0gZGF0YSA9PT0gXCJ0cnVlXCIgPyB0cnVlIDpcclxuXHRcdFx0XHRcdGRhdGEgPT09IFwiZmFsc2VcIiA/IGZhbHNlIDpcclxuXHRcdFx0XHRcdGRhdGEgPT09IFwibnVsbFwiID8gbnVsbCA6XHJcblx0XHRcdFx0XHQvLyBPbmx5IGNvbnZlcnQgdG8gYSBudW1iZXIgaWYgaXQgZG9lc24ndCBjaGFuZ2UgdGhlIHN0cmluZ1xyXG5cdFx0XHRcdFx0K2RhdGEgKyBcIlwiID09PSBkYXRhID8gK2RhdGEgOlxyXG5cdFx0XHRcdFx0cmJyYWNlLnRlc3QoIGRhdGEgKSA/IGpRdWVyeS5wYXJzZUpTT04oIGRhdGEgKSA6XHJcblx0XHRcdFx0XHRkYXRhO1xyXG5cdFx0XHR9IGNhdGNoKCBlICkge31cclxuXHJcblx0XHRcdC8vIE1ha2Ugc3VyZSB3ZSBzZXQgdGhlIGRhdGEgc28gaXQgaXNuJ3QgY2hhbmdlZCBsYXRlclxyXG5cdFx0XHRqUXVlcnkuZGF0YSggZWxlbSwga2V5LCBkYXRhICk7XHJcblxyXG5cdFx0fSBlbHNlIHtcclxuXHRcdFx0ZGF0YSA9IHVuZGVmaW5lZDtcclxuXHRcdH1cclxuXHR9XHJcblxyXG5cdHJldHVybiBkYXRhO1xyXG59XHJcblxyXG4vLyBjaGVja3MgYSBjYWNoZSBvYmplY3QgZm9yIGVtcHRpbmVzc1xyXG5mdW5jdGlvbiBpc0VtcHR5RGF0YU9iamVjdCggb2JqICkge1xyXG5cdHZhciBuYW1lO1xyXG5cdGZvciAoIG5hbWUgaW4gb2JqICkge1xyXG5cclxuXHRcdC8vIGlmIHRoZSBwdWJsaWMgZGF0YSBvYmplY3QgaXMgZW1wdHksIHRoZSBwcml2YXRlIGlzIHN0aWxsIGVtcHR5XHJcblx0XHRpZiAoIG5hbWUgPT09IFwiZGF0YVwiICYmIGpRdWVyeS5pc0VtcHR5T2JqZWN0KCBvYmpbbmFtZV0gKSApIHtcclxuXHRcdFx0Y29udGludWU7XHJcblx0XHR9XHJcblx0XHRpZiAoIG5hbWUgIT09IFwidG9KU09OXCIgKSB7XHJcblx0XHRcdHJldHVybiBmYWxzZTtcclxuXHRcdH1cclxuXHR9XHJcblxyXG5cdHJldHVybiB0cnVlO1xyXG59XHJcblxyXG5mdW5jdGlvbiBpbnRlcm5hbERhdGEoIGVsZW0sIG5hbWUsIGRhdGEsIHB2dCAvKiBJbnRlcm5hbCBVc2UgT25seSAqLyApIHtcclxuXHRpZiAoICFqUXVlcnkuYWNjZXB0RGF0YSggZWxlbSApICkge1xyXG5cdFx0cmV0dXJuO1xyXG5cdH1cclxuXHJcblx0dmFyIHJldCwgdGhpc0NhY2hlLFxyXG5cdFx0aW50ZXJuYWxLZXkgPSBqUXVlcnkuZXhwYW5kbyxcclxuXHJcblx0XHQvLyBXZSBoYXZlIHRvIGhhbmRsZSBET00gbm9kZXMgYW5kIEpTIG9iamVjdHMgZGlmZmVyZW50bHkgYmVjYXVzZSBJRTYtN1xyXG5cdFx0Ly8gY2FuJ3QgR0Mgb2JqZWN0IHJlZmVyZW5jZXMgcHJvcGVybHkgYWNyb3NzIHRoZSBET00tSlMgYm91bmRhcnlcclxuXHRcdGlzTm9kZSA9IGVsZW0ubm9kZVR5cGUsXHJcblxyXG5cdFx0Ly8gT25seSBET00gbm9kZXMgbmVlZCB0aGUgZ2xvYmFsIGpRdWVyeSBjYWNoZTsgSlMgb2JqZWN0IGRhdGEgaXNcclxuXHRcdC8vIGF0dGFjaGVkIGRpcmVjdGx5IHRvIHRoZSBvYmplY3Qgc28gR0MgY2FuIG9jY3VyIGF1dG9tYXRpY2FsbHlcclxuXHRcdGNhY2hlID0gaXNOb2RlID8galF1ZXJ5LmNhY2hlIDogZWxlbSxcclxuXHJcblx0XHQvLyBPbmx5IGRlZmluaW5nIGFuIElEIGZvciBKUyBvYmplY3RzIGlmIGl0cyBjYWNoZSBhbHJlYWR5IGV4aXN0cyBhbGxvd3NcclxuXHRcdC8vIHRoZSBjb2RlIHRvIHNob3J0Y3V0IG9uIHRoZSBzYW1lIHBhdGggYXMgYSBET00gbm9kZSB3aXRoIG5vIGNhY2hlXHJcblx0XHRpZCA9IGlzTm9kZSA/IGVsZW1bIGludGVybmFsS2V5IF0gOiBlbGVtWyBpbnRlcm5hbEtleSBdICYmIGludGVybmFsS2V5O1xyXG5cclxuXHQvLyBBdm9pZCBkb2luZyBhbnkgbW9yZSB3b3JrIHRoYW4gd2UgbmVlZCB0byB3aGVuIHRyeWluZyB0byBnZXQgZGF0YSBvbiBhblxyXG5cdC8vIG9iamVjdCB0aGF0IGhhcyBubyBkYXRhIGF0IGFsbFxyXG5cdGlmICggKCFpZCB8fCAhY2FjaGVbaWRdIHx8ICghcHZ0ICYmICFjYWNoZVtpZF0uZGF0YSkpICYmIGRhdGEgPT09IHVuZGVmaW5lZCAmJiB0eXBlb2YgbmFtZSA9PT0gXCJzdHJpbmdcIiApIHtcclxuXHRcdHJldHVybjtcclxuXHR9XHJcblxyXG5cdGlmICggIWlkICkge1xyXG5cdFx0Ly8gT25seSBET00gbm9kZXMgbmVlZCBhIG5ldyB1bmlxdWUgSUQgZm9yIGVhY2ggZWxlbWVudCBzaW5jZSB0aGVpciBkYXRhXHJcblx0XHQvLyBlbmRzIHVwIGluIHRoZSBnbG9iYWwgY2FjaGVcclxuXHRcdGlmICggaXNOb2RlICkge1xyXG5cdFx0XHRpZCA9IGVsZW1bIGludGVybmFsS2V5IF0gPSBkZWxldGVkSWRzLnBvcCgpIHx8IGpRdWVyeS5ndWlkKys7XHJcblx0XHR9IGVsc2Uge1xyXG5cdFx0XHRpZCA9IGludGVybmFsS2V5O1xyXG5cdFx0fVxyXG5cdH1cclxuXHJcblx0aWYgKCAhY2FjaGVbIGlkIF0gKSB7XHJcblx0XHQvLyBBdm9pZCBleHBvc2luZyBqUXVlcnkgbWV0YWRhdGEgb24gcGxhaW4gSlMgb2JqZWN0cyB3aGVuIHRoZSBvYmplY3RcclxuXHRcdC8vIGlzIHNlcmlhbGl6ZWQgdXNpbmcgSlNPTi5zdHJpbmdpZnlcclxuXHRcdGNhY2hlWyBpZCBdID0gaXNOb2RlID8ge30gOiB7IHRvSlNPTjogalF1ZXJ5Lm5vb3AgfTtcclxuXHR9XHJcblxyXG5cdC8vIEFuIG9iamVjdCBjYW4gYmUgcGFzc2VkIHRvIGpRdWVyeS5kYXRhIGluc3RlYWQgb2YgYSBrZXkvdmFsdWUgcGFpcjsgdGhpcyBnZXRzXHJcblx0Ly8gc2hhbGxvdyBjb3BpZWQgb3ZlciBvbnRvIHRoZSBleGlzdGluZyBjYWNoZVxyXG5cdGlmICggdHlwZW9mIG5hbWUgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIG5hbWUgPT09IFwiZnVuY3Rpb25cIiApIHtcclxuXHRcdGlmICggcHZ0ICkge1xyXG5cdFx0XHRjYWNoZVsgaWQgXSA9IGpRdWVyeS5leHRlbmQoIGNhY2hlWyBpZCBdLCBuYW1lICk7XHJcblx0XHR9IGVsc2Uge1xyXG5cdFx0XHRjYWNoZVsgaWQgXS5kYXRhID0galF1ZXJ5LmV4dGVuZCggY2FjaGVbIGlkIF0uZGF0YSwgbmFtZSApO1xyXG5cdFx0fVxyXG5cdH1cclxuXHJcblx0dGhpc0NhY2hlID0gY2FjaGVbIGlkIF07XHJcblxyXG5cdC8vIGpRdWVyeSBkYXRhKCkgaXMgc3RvcmVkIGluIGEgc2VwYXJhdGUgb2JqZWN0IGluc2lkZSB0aGUgb2JqZWN0J3MgaW50ZXJuYWwgZGF0YVxyXG5cdC8vIGNhY2hlIGluIG9yZGVyIHRvIGF2b2lkIGtleSBjb2xsaXNpb25zIGJldHdlZW4gaW50ZXJuYWwgZGF0YSBhbmQgdXNlci1kZWZpbmVkXHJcblx0Ly8gZGF0YS5cclxuXHRpZiAoICFwdnQgKSB7XHJcblx0XHRpZiAoICF0aGlzQ2FjaGUuZGF0YSApIHtcclxuXHRcdFx0dGhpc0NhY2hlLmRhdGEgPSB7fTtcclxuXHRcdH1cclxuXHJcblx0XHR0aGlzQ2FjaGUgPSB0aGlzQ2FjaGUuZGF0YTtcclxuXHR9XHJcblxyXG5cdGlmICggZGF0YSAhPT0gdW5kZWZpbmVkICkge1xyXG5cdFx0dGhpc0NhY2hlWyBqUXVlcnkuY2FtZWxDYXNlKCBuYW1lICkgXSA9IGRhdGE7XHJcblx0fVxyXG5cclxuXHQvLyBDaGVjayBmb3IgYm90aCBjb252ZXJ0ZWQtdG8tY2FtZWwgYW5kIG5vbi1jb252ZXJ0ZWQgZGF0YSBwcm9wZXJ0eSBuYW1lc1xyXG5cdC8vIElmIGEgZGF0YSBwcm9wZXJ0eSB3YXMgc3BlY2lmaWVkXHJcblx0aWYgKCB0eXBlb2YgbmFtZSA9PT0gXCJzdHJpbmdcIiApIHtcclxuXHJcblx0XHQvLyBGaXJzdCBUcnkgdG8gZmluZCBhcy1pcyBwcm9wZXJ0eSBkYXRhXHJcblx0XHRyZXQgPSB0aGlzQ2FjaGVbIG5hbWUgXTtcclxuXHJcblx0XHQvLyBUZXN0IGZvciBudWxsfHVuZGVmaW5lZCBwcm9wZXJ0eSBkYXRhXHJcblx0XHRpZiAoIHJldCA9PSBudWxsICkge1xyXG5cclxuXHRcdFx0Ly8gVHJ5IHRvIGZpbmQgdGhlIGNhbWVsQ2FzZWQgcHJvcGVydHlcclxuXHRcdFx0cmV0ID0gdGhpc0NhY2hlWyBqUXVlcnkuY2FtZWxDYXNlKCBuYW1lICkgXTtcclxuXHRcdH1cclxuXHR9IGVsc2Uge1xyXG5cdFx0cmV0ID0gdGhpc0NhY2hlO1xyXG5cdH1cclxuXHJcblx0cmV0dXJuIHJldDtcclxufVxyXG5cclxuZnVuY3Rpb24gaW50ZXJuYWxSZW1vdmVEYXRhKCBlbGVtLCBuYW1lLCBwdnQgKSB7XHJcblx0aWYgKCAhalF1ZXJ5LmFjY2VwdERhdGEoIGVsZW0gKSApIHtcclxuXHRcdHJldHVybjtcclxuXHR9XHJcblxyXG5cdHZhciB0aGlzQ2FjaGUsIGksXHJcblx0XHRpc05vZGUgPSBlbGVtLm5vZGVUeXBlLFxyXG5cclxuXHRcdC8vIFNlZSBqUXVlcnkuZGF0YSBmb3IgbW9yZSBpbmZvcm1hdGlvblxyXG5cdFx0Y2FjaGUgPSBpc05vZGUgPyBqUXVlcnkuY2FjaGUgOiBlbGVtLFxyXG5cdFx0aWQgPSBpc05vZGUgPyBlbGVtWyBqUXVlcnkuZXhwYW5kbyBdIDogalF1ZXJ5LmV4cGFuZG87XHJcblxyXG5cdC8vIElmIHRoZXJlIGlzIGFscmVhZHkgbm8gY2FjaGUgZW50cnkgZm9yIHRoaXMgb2JqZWN0LCB0aGVyZSBpcyBub1xyXG5cdC8vIHB1cnBvc2UgaW4gY29udGludWluZ1xyXG5cdGlmICggIWNhY2hlWyBpZCBdICkge1xyXG5cdFx0cmV0dXJuO1xyXG5cdH1cclxuXHJcblx0aWYgKCBuYW1lICkge1xyXG5cclxuXHRcdHRoaXNDYWNoZSA9IHB2dCA/IGNhY2hlWyBpZCBdIDogY2FjaGVbIGlkIF0uZGF0YTtcclxuXHJcblx0XHRpZiAoIHRoaXNDYWNoZSApIHtcclxuXHJcblx0XHRcdC8vIFN1cHBvcnQgYXJyYXkgb3Igc3BhY2Ugc2VwYXJhdGVkIHN0cmluZyBuYW1lcyBmb3IgZGF0YSBrZXlzXHJcblx0XHRcdGlmICggIWpRdWVyeS5pc0FycmF5KCBuYW1lICkgKSB7XHJcblxyXG5cdFx0XHRcdC8vIHRyeSB0aGUgc3RyaW5nIGFzIGEga2V5IGJlZm9yZSBhbnkgbWFuaXB1bGF0aW9uXHJcblx0XHRcdFx0aWYgKCBuYW1lIGluIHRoaXNDYWNoZSApIHtcclxuXHRcdFx0XHRcdG5hbWUgPSBbIG5hbWUgXTtcclxuXHRcdFx0XHR9IGVsc2Uge1xyXG5cclxuXHRcdFx0XHRcdC8vIHNwbGl0IHRoZSBjYW1lbCBjYXNlZCB2ZXJzaW9uIGJ5IHNwYWNlcyB1bmxlc3MgYSBrZXkgd2l0aCB0aGUgc3BhY2VzIGV4aXN0c1xyXG5cdFx0XHRcdFx0bmFtZSA9IGpRdWVyeS5jYW1lbENhc2UoIG5hbWUgKTtcclxuXHRcdFx0XHRcdGlmICggbmFtZSBpbiB0aGlzQ2FjaGUgKSB7XHJcblx0XHRcdFx0XHRcdG5hbWUgPSBbIG5hbWUgXTtcclxuXHRcdFx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0XHRcdG5hbWUgPSBuYW1lLnNwbGl0KFwiIFwiKTtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9XHJcblx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0Ly8gSWYgXCJuYW1lXCIgaXMgYW4gYXJyYXkgb2Yga2V5cy4uLlxyXG5cdFx0XHRcdC8vIFdoZW4gZGF0YSBpcyBpbml0aWFsbHkgY3JlYXRlZCwgdmlhIChcImtleVwiLCBcInZhbFwiKSBzaWduYXR1cmUsXHJcblx0XHRcdFx0Ly8ga2V5cyB3aWxsIGJlIGNvbnZlcnRlZCB0byBjYW1lbENhc2UuXHJcblx0XHRcdFx0Ly8gU2luY2UgdGhlcmUgaXMgbm8gd2F5IHRvIHRlbGwgX2hvd18gYSBrZXkgd2FzIGFkZGVkLCByZW1vdmVcclxuXHRcdFx0XHQvLyBib3RoIHBsYWluIGtleSBhbmQgY2FtZWxDYXNlIGtleS4gIzEyNzg2XHJcblx0XHRcdFx0Ly8gVGhpcyB3aWxsIG9ubHkgcGVuYWxpemUgdGhlIGFycmF5IGFyZ3VtZW50IHBhdGguXHJcblx0XHRcdFx0bmFtZSA9IG5hbWUuY29uY2F0KCBqUXVlcnkubWFwKCBuYW1lLCBqUXVlcnkuY2FtZWxDYXNlICkgKTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0aSA9IG5hbWUubGVuZ3RoO1xyXG5cdFx0XHR3aGlsZSAoIGktLSApIHtcclxuXHRcdFx0XHRkZWxldGUgdGhpc0NhY2hlWyBuYW1lW2ldIF07XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdC8vIElmIHRoZXJlIGlzIG5vIGRhdGEgbGVmdCBpbiB0aGUgY2FjaGUsIHdlIHdhbnQgdG8gY29udGludWVcclxuXHRcdFx0Ly8gYW5kIGxldCB0aGUgY2FjaGUgb2JqZWN0IGl0c2VsZiBnZXQgZGVzdHJveWVkXHJcblx0XHRcdGlmICggcHZ0ID8gIWlzRW1wdHlEYXRhT2JqZWN0KHRoaXNDYWNoZSkgOiAhalF1ZXJ5LmlzRW1wdHlPYmplY3QodGhpc0NhY2hlKSApIHtcclxuXHRcdFx0XHRyZXR1cm47XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHR9XHJcblxyXG5cdC8vIFNlZSBqUXVlcnkuZGF0YSBmb3IgbW9yZSBpbmZvcm1hdGlvblxyXG5cdGlmICggIXB2dCApIHtcclxuXHRcdGRlbGV0ZSBjYWNoZVsgaWQgXS5kYXRhO1xyXG5cclxuXHRcdC8vIERvbid0IGRlc3Ryb3kgdGhlIHBhcmVudCBjYWNoZSB1bmxlc3MgdGhlIGludGVybmFsIGRhdGEgb2JqZWN0XHJcblx0XHQvLyBoYWQgYmVlbiB0aGUgb25seSB0aGluZyBsZWZ0IGluIGl0XHJcblx0XHRpZiAoICFpc0VtcHR5RGF0YU9iamVjdCggY2FjaGVbIGlkIF0gKSApIHtcclxuXHRcdFx0cmV0dXJuO1xyXG5cdFx0fVxyXG5cdH1cclxuXHJcblx0Ly8gRGVzdHJveSB0aGUgY2FjaGVcclxuXHRpZiAoIGlzTm9kZSApIHtcclxuXHRcdGpRdWVyeS5jbGVhbkRhdGEoIFsgZWxlbSBdLCB0cnVlICk7XHJcblxyXG5cdC8vIFVzZSBkZWxldGUgd2hlbiBzdXBwb3J0ZWQgZm9yIGV4cGFuZG9zIG9yIGBjYWNoZWAgaXMgbm90IGEgd2luZG93IHBlciBpc1dpbmRvdyAoIzEwMDgwKVxyXG5cdC8qIGpzaGludCBlcWVxZXE6IGZhbHNlICovXHJcblx0fSBlbHNlIGlmICggc3VwcG9ydC5kZWxldGVFeHBhbmRvIHx8IGNhY2hlICE9IGNhY2hlLndpbmRvdyApIHtcclxuXHRcdC8qIGpzaGludCBlcWVxZXE6IHRydWUgKi9cclxuXHRcdGRlbGV0ZSBjYWNoZVsgaWQgXTtcclxuXHJcblx0Ly8gV2hlbiBhbGwgZWxzZSBmYWlscywgbnVsbFxyXG5cdH0gZWxzZSB7XHJcblx0XHRjYWNoZVsgaWQgXSA9IG51bGw7XHJcblx0fVxyXG59XHJcblxyXG5qUXVlcnkuZXh0ZW5kKHtcclxuXHRjYWNoZToge30sXHJcblxyXG5cdC8vIFRoZSBmb2xsb3dpbmcgZWxlbWVudHMgKHNwYWNlLXN1ZmZpeGVkIHRvIGF2b2lkIE9iamVjdC5wcm90b3R5cGUgY29sbGlzaW9ucylcclxuXHQvLyB0aHJvdyB1bmNhdGNoYWJsZSBleGNlcHRpb25zIGlmIHlvdSBhdHRlbXB0IHRvIHNldCBleHBhbmRvIHByb3BlcnRpZXNcclxuXHRub0RhdGE6IHtcclxuXHRcdFwiYXBwbGV0IFwiOiB0cnVlLFxyXG5cdFx0XCJlbWJlZCBcIjogdHJ1ZSxcclxuXHRcdC8vIC4uLmJ1dCBGbGFzaCBvYmplY3RzICh3aGljaCBoYXZlIHRoaXMgY2xhc3NpZCkgKmNhbiogaGFuZGxlIGV4cGFuZG9zXHJcblx0XHRcIm9iamVjdCBcIjogXCJjbHNpZDpEMjdDREI2RS1BRTZELTExY2YtOTZCOC00NDQ1NTM1NDAwMDBcIlxyXG5cdH0sXHJcblxyXG5cdGhhc0RhdGE6IGZ1bmN0aW9uKCBlbGVtICkge1xyXG5cdFx0ZWxlbSA9IGVsZW0ubm9kZVR5cGUgPyBqUXVlcnkuY2FjaGVbIGVsZW1balF1ZXJ5LmV4cGFuZG9dIF0gOiBlbGVtWyBqUXVlcnkuZXhwYW5kbyBdO1xyXG5cdFx0cmV0dXJuICEhZWxlbSAmJiAhaXNFbXB0eURhdGFPYmplY3QoIGVsZW0gKTtcclxuXHR9LFxyXG5cclxuXHRkYXRhOiBmdW5jdGlvbiggZWxlbSwgbmFtZSwgZGF0YSApIHtcclxuXHRcdHJldHVybiBpbnRlcm5hbERhdGEoIGVsZW0sIG5hbWUsIGRhdGEgKTtcclxuXHR9LFxyXG5cclxuXHRyZW1vdmVEYXRhOiBmdW5jdGlvbiggZWxlbSwgbmFtZSApIHtcclxuXHRcdHJldHVybiBpbnRlcm5hbFJlbW92ZURhdGEoIGVsZW0sIG5hbWUgKTtcclxuXHR9LFxyXG5cclxuXHQvLyBGb3IgaW50ZXJuYWwgdXNlIG9ubHkuXHJcblx0X2RhdGE6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCBkYXRhICkge1xyXG5cdFx0cmV0dXJuIGludGVybmFsRGF0YSggZWxlbSwgbmFtZSwgZGF0YSwgdHJ1ZSApO1xyXG5cdH0sXHJcblxyXG5cdF9yZW1vdmVEYXRhOiBmdW5jdGlvbiggZWxlbSwgbmFtZSApIHtcclxuXHRcdHJldHVybiBpbnRlcm5hbFJlbW92ZURhdGEoIGVsZW0sIG5hbWUsIHRydWUgKTtcclxuXHR9XHJcbn0pO1xyXG5cclxualF1ZXJ5LmZuLmV4dGVuZCh7XHJcblx0ZGF0YTogZnVuY3Rpb24oIGtleSwgdmFsdWUgKSB7XHJcblx0XHR2YXIgaSwgbmFtZSwgZGF0YSxcclxuXHRcdFx0ZWxlbSA9IHRoaXNbMF0sXHJcblx0XHRcdGF0dHJzID0gZWxlbSAmJiBlbGVtLmF0dHJpYnV0ZXM7XHJcblxyXG5cdFx0Ly8gU3BlY2lhbCBleHBlY3Rpb25zIG9mIC5kYXRhIGJhc2ljYWxseSB0aHdhcnQgalF1ZXJ5LmFjY2VzcyxcclxuXHRcdC8vIHNvIGltcGxlbWVudCB0aGUgcmVsZXZhbnQgYmVoYXZpb3Igb3Vyc2VsdmVzXHJcblxyXG5cdFx0Ly8gR2V0cyBhbGwgdmFsdWVzXHJcblx0XHRpZiAoIGtleSA9PT0gdW5kZWZpbmVkICkge1xyXG5cdFx0XHRpZiAoIHRoaXMubGVuZ3RoICkge1xyXG5cdFx0XHRcdGRhdGEgPSBqUXVlcnkuZGF0YSggZWxlbSApO1xyXG5cclxuXHRcdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgJiYgIWpRdWVyeS5fZGF0YSggZWxlbSwgXCJwYXJzZWRBdHRyc1wiICkgKSB7XHJcblx0XHRcdFx0XHRpID0gYXR0cnMubGVuZ3RoO1xyXG5cdFx0XHRcdFx0d2hpbGUgKCBpLS0gKSB7XHJcblxyXG5cdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRTExK1xyXG5cdFx0XHRcdFx0XHQvLyBUaGUgYXR0cnMgZWxlbWVudHMgY2FuIGJlIG51bGwgKCMxNDg5NClcclxuXHRcdFx0XHRcdFx0aWYgKCBhdHRyc1sgaSBdICkge1xyXG5cdFx0XHRcdFx0XHRcdG5hbWUgPSBhdHRyc1sgaSBdLm5hbWU7XHJcblx0XHRcdFx0XHRcdFx0aWYgKCBuYW1lLmluZGV4T2YoIFwiZGF0YS1cIiApID09PSAwICkge1xyXG5cdFx0XHRcdFx0XHRcdFx0bmFtZSA9IGpRdWVyeS5jYW1lbENhc2UoIG5hbWUuc2xpY2UoNSkgKTtcclxuXHRcdFx0XHRcdFx0XHRcdGRhdGFBdHRyKCBlbGVtLCBuYW1lLCBkYXRhWyBuYW1lIF0gKTtcclxuXHRcdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdGpRdWVyeS5fZGF0YSggZWxlbSwgXCJwYXJzZWRBdHRyc1wiLCB0cnVlICk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRyZXR1cm4gZGF0YTtcclxuXHRcdH1cclxuXHJcblx0XHQvLyBTZXRzIG11bHRpcGxlIHZhbHVlc1xyXG5cdFx0aWYgKCB0eXBlb2Yga2V5ID09PSBcIm9iamVjdFwiICkge1xyXG5cdFx0XHRyZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRcdGpRdWVyeS5kYXRhKCB0aGlzLCBrZXkgKTtcclxuXHRcdFx0fSk7XHJcblx0XHR9XHJcblxyXG5cdFx0cmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPiAxID9cclxuXHJcblx0XHRcdC8vIFNldHMgb25lIHZhbHVlXHJcblx0XHRcdHRoaXMuZWFjaChmdW5jdGlvbigpIHtcclxuXHRcdFx0XHRqUXVlcnkuZGF0YSggdGhpcywga2V5LCB2YWx1ZSApO1xyXG5cdFx0XHR9KSA6XHJcblxyXG5cdFx0XHQvLyBHZXRzIG9uZSB2YWx1ZVxyXG5cdFx0XHQvLyBUcnkgdG8gZmV0Y2ggYW55IGludGVybmFsbHkgc3RvcmVkIGRhdGEgZmlyc3RcclxuXHRcdFx0ZWxlbSA/IGRhdGFBdHRyKCBlbGVtLCBrZXksIGpRdWVyeS5kYXRhKCBlbGVtLCBrZXkgKSApIDogdW5kZWZpbmVkO1xyXG5cdH0sXHJcblxyXG5cdHJlbW92ZURhdGE6IGZ1bmN0aW9uKCBrZXkgKSB7XHJcblx0XHRyZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRqUXVlcnkucmVtb3ZlRGF0YSggdGhpcywga2V5ICk7XHJcblx0XHR9KTtcclxuXHR9XHJcbn0pO1xyXG5cclxuXHJcbmpRdWVyeS5leHRlbmQoe1xyXG5cdHF1ZXVlOiBmdW5jdGlvbiggZWxlbSwgdHlwZSwgZGF0YSApIHtcclxuXHRcdHZhciBxdWV1ZTtcclxuXHJcblx0XHRpZiAoIGVsZW0gKSB7XHJcblx0XHRcdHR5cGUgPSAoIHR5cGUgfHwgXCJmeFwiICkgKyBcInF1ZXVlXCI7XHJcblx0XHRcdHF1ZXVlID0galF1ZXJ5Ll9kYXRhKCBlbGVtLCB0eXBlICk7XHJcblxyXG5cdFx0XHQvLyBTcGVlZCB1cCBkZXF1ZXVlIGJ5IGdldHRpbmcgb3V0IHF1aWNrbHkgaWYgdGhpcyBpcyBqdXN0IGEgbG9va3VwXHJcblx0XHRcdGlmICggZGF0YSApIHtcclxuXHRcdFx0XHRpZiAoICFxdWV1ZSB8fCBqUXVlcnkuaXNBcnJheShkYXRhKSApIHtcclxuXHRcdFx0XHRcdHF1ZXVlID0galF1ZXJ5Ll9kYXRhKCBlbGVtLCB0eXBlLCBqUXVlcnkubWFrZUFycmF5KGRhdGEpICk7XHJcblx0XHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRcdHF1ZXVlLnB1c2goIGRhdGEgKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdFx0cmV0dXJuIHF1ZXVlIHx8IFtdO1xyXG5cdFx0fVxyXG5cdH0sXHJcblxyXG5cdGRlcXVldWU6IGZ1bmN0aW9uKCBlbGVtLCB0eXBlICkge1xyXG5cdFx0dHlwZSA9IHR5cGUgfHwgXCJmeFwiO1xyXG5cclxuXHRcdHZhciBxdWV1ZSA9IGpRdWVyeS5xdWV1ZSggZWxlbSwgdHlwZSApLFxyXG5cdFx0XHRzdGFydExlbmd0aCA9IHF1ZXVlLmxlbmd0aCxcclxuXHRcdFx0Zm4gPSBxdWV1ZS5zaGlmdCgpLFxyXG5cdFx0XHRob29rcyA9IGpRdWVyeS5fcXVldWVIb29rcyggZWxlbSwgdHlwZSApLFxyXG5cdFx0XHRuZXh0ID0gZnVuY3Rpb24oKSB7XHJcblx0XHRcdFx0alF1ZXJ5LmRlcXVldWUoIGVsZW0sIHR5cGUgKTtcclxuXHRcdFx0fTtcclxuXHJcblx0XHQvLyBJZiB0aGUgZnggcXVldWUgaXMgZGVxdWV1ZWQsIGFsd2F5cyByZW1vdmUgdGhlIHByb2dyZXNzIHNlbnRpbmVsXHJcblx0XHRpZiAoIGZuID09PSBcImlucHJvZ3Jlc3NcIiApIHtcclxuXHRcdFx0Zm4gPSBxdWV1ZS5zaGlmdCgpO1xyXG5cdFx0XHRzdGFydExlbmd0aC0tO1xyXG5cdFx0fVxyXG5cclxuXHRcdGlmICggZm4gKSB7XHJcblxyXG5cdFx0XHQvLyBBZGQgYSBwcm9ncmVzcyBzZW50aW5lbCB0byBwcmV2ZW50IHRoZSBmeCBxdWV1ZSBmcm9tIGJlaW5nXHJcblx0XHRcdC8vIGF1dG9tYXRpY2FsbHkgZGVxdWV1ZWRcclxuXHRcdFx0aWYgKCB0eXBlID09PSBcImZ4XCIgKSB7XHJcblx0XHRcdFx0cXVldWUudW5zaGlmdCggXCJpbnByb2dyZXNzXCIgKTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0Ly8gY2xlYXIgdXAgdGhlIGxhc3QgcXVldWUgc3RvcCBmdW5jdGlvblxyXG5cdFx0XHRkZWxldGUgaG9va3Muc3RvcDtcclxuXHRcdFx0Zm4uY2FsbCggZWxlbSwgbmV4dCwgaG9va3MgKTtcclxuXHRcdH1cclxuXHJcblx0XHRpZiAoICFzdGFydExlbmd0aCAmJiBob29rcyApIHtcclxuXHRcdFx0aG9va3MuZW1wdHkuZmlyZSgpO1xyXG5cdFx0fVxyXG5cdH0sXHJcblxyXG5cdC8vIG5vdCBpbnRlbmRlZCBmb3IgcHVibGljIGNvbnN1bXB0aW9uIC0gZ2VuZXJhdGVzIGEgcXVldWVIb29rcyBvYmplY3QsIG9yIHJldHVybnMgdGhlIGN1cnJlbnQgb25lXHJcblx0X3F1ZXVlSG9va3M6IGZ1bmN0aW9uKCBlbGVtLCB0eXBlICkge1xyXG5cdFx0dmFyIGtleSA9IHR5cGUgKyBcInF1ZXVlSG9va3NcIjtcclxuXHRcdHJldHVybiBqUXVlcnkuX2RhdGEoIGVsZW0sIGtleSApIHx8IGpRdWVyeS5fZGF0YSggZWxlbSwga2V5LCB7XHJcblx0XHRcdGVtcHR5OiBqUXVlcnkuQ2FsbGJhY2tzKFwib25jZSBtZW1vcnlcIikuYWRkKGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRcdGpRdWVyeS5fcmVtb3ZlRGF0YSggZWxlbSwgdHlwZSArIFwicXVldWVcIiApO1xyXG5cdFx0XHRcdGpRdWVyeS5fcmVtb3ZlRGF0YSggZWxlbSwga2V5ICk7XHJcblx0XHRcdH0pXHJcblx0XHR9KTtcclxuXHR9XHJcbn0pO1xyXG5cclxualF1ZXJ5LmZuLmV4dGVuZCh7XHJcblx0cXVldWU6IGZ1bmN0aW9uKCB0eXBlLCBkYXRhICkge1xyXG5cdFx0dmFyIHNldHRlciA9IDI7XHJcblxyXG5cdFx0aWYgKCB0eXBlb2YgdHlwZSAhPT0gXCJzdHJpbmdcIiApIHtcclxuXHRcdFx0ZGF0YSA9IHR5cGU7XHJcblx0XHRcdHR5cGUgPSBcImZ4XCI7XHJcblx0XHRcdHNldHRlci0tO1xyXG5cdFx0fVxyXG5cclxuXHRcdGlmICggYXJndW1lbnRzLmxlbmd0aCA8IHNldHRlciApIHtcclxuXHRcdFx0cmV0dXJuIGpRdWVyeS5xdWV1ZSggdGhpc1swXSwgdHlwZSApO1xyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiBkYXRhID09PSB1bmRlZmluZWQgP1xyXG5cdFx0XHR0aGlzIDpcclxuXHRcdFx0dGhpcy5lYWNoKGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRcdHZhciBxdWV1ZSA9IGpRdWVyeS5xdWV1ZSggdGhpcywgdHlwZSwgZGF0YSApO1xyXG5cclxuXHRcdFx0XHQvLyBlbnN1cmUgYSBob29rcyBmb3IgdGhpcyBxdWV1ZVxyXG5cdFx0XHRcdGpRdWVyeS5fcXVldWVIb29rcyggdGhpcywgdHlwZSApO1xyXG5cclxuXHRcdFx0XHRpZiAoIHR5cGUgPT09IFwiZnhcIiAmJiBxdWV1ZVswXSAhPT0gXCJpbnByb2dyZXNzXCIgKSB7XHJcblx0XHRcdFx0XHRqUXVlcnkuZGVxdWV1ZSggdGhpcywgdHlwZSApO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fSk7XHJcblx0fSxcclxuXHRkZXF1ZXVlOiBmdW5jdGlvbiggdHlwZSApIHtcclxuXHRcdHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oKSB7XHJcblx0XHRcdGpRdWVyeS5kZXF1ZXVlKCB0aGlzLCB0eXBlICk7XHJcblx0XHR9KTtcclxuXHR9LFxyXG5cdGNsZWFyUXVldWU6IGZ1bmN0aW9uKCB0eXBlICkge1xyXG5cdFx0cmV0dXJuIHRoaXMucXVldWUoIHR5cGUgfHwgXCJmeFwiLCBbXSApO1xyXG5cdH0sXHJcblx0Ly8gR2V0IGEgcHJvbWlzZSByZXNvbHZlZCB3aGVuIHF1ZXVlcyBvZiBhIGNlcnRhaW4gdHlwZVxyXG5cdC8vIGFyZSBlbXB0aWVkIChmeCBpcyB0aGUgdHlwZSBieSBkZWZhdWx0KVxyXG5cdHByb21pc2U6IGZ1bmN0aW9uKCB0eXBlLCBvYmogKSB7XHJcblx0XHR2YXIgdG1wLFxyXG5cdFx0XHRjb3VudCA9IDEsXHJcblx0XHRcdGRlZmVyID0galF1ZXJ5LkRlZmVycmVkKCksXHJcblx0XHRcdGVsZW1lbnRzID0gdGhpcyxcclxuXHRcdFx0aSA9IHRoaXMubGVuZ3RoLFxyXG5cdFx0XHRyZXNvbHZlID0gZnVuY3Rpb24oKSB7XHJcblx0XHRcdFx0aWYgKCAhKCAtLWNvdW50ICkgKSB7XHJcblx0XHRcdFx0XHRkZWZlci5yZXNvbHZlV2l0aCggZWxlbWVudHMsIFsgZWxlbWVudHMgXSApO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fTtcclxuXHJcblx0XHRpZiAoIHR5cGVvZiB0eXBlICE9PSBcInN0cmluZ1wiICkge1xyXG5cdFx0XHRvYmogPSB0eXBlO1xyXG5cdFx0XHR0eXBlID0gdW5kZWZpbmVkO1xyXG5cdFx0fVxyXG5cdFx0dHlwZSA9IHR5cGUgfHwgXCJmeFwiO1xyXG5cclxuXHRcdHdoaWxlICggaS0tICkge1xyXG5cdFx0XHR0bXAgPSBqUXVlcnkuX2RhdGEoIGVsZW1lbnRzWyBpIF0sIHR5cGUgKyBcInF1ZXVlSG9va3NcIiApO1xyXG5cdFx0XHRpZiAoIHRtcCAmJiB0bXAuZW1wdHkgKSB7XHJcblx0XHRcdFx0Y291bnQrKztcclxuXHRcdFx0XHR0bXAuZW1wdHkuYWRkKCByZXNvbHZlICk7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHRcdHJlc29sdmUoKTtcclxuXHRcdHJldHVybiBkZWZlci5wcm9taXNlKCBvYmogKTtcclxuXHR9XHJcbn0pO1xyXG52YXIgcG51bSA9ICgvWystXT8oPzpcXGQqXFwufClcXGQrKD86W2VFXVsrLV0/XFxkK3wpLykuc291cmNlO1xyXG5cclxudmFyIGNzc0V4cGFuZCA9IFsgXCJUb3BcIiwgXCJSaWdodFwiLCBcIkJvdHRvbVwiLCBcIkxlZnRcIiBdO1xyXG5cclxudmFyIGlzSGlkZGVuID0gZnVuY3Rpb24oIGVsZW0sIGVsICkge1xyXG5cdFx0Ly8gaXNIaWRkZW4gbWlnaHQgYmUgY2FsbGVkIGZyb20galF1ZXJ5I2ZpbHRlciBmdW5jdGlvbjtcclxuXHRcdC8vIGluIHRoYXQgY2FzZSwgZWxlbWVudCB3aWxsIGJlIHNlY29uZCBhcmd1bWVudFxyXG5cdFx0ZWxlbSA9IGVsIHx8IGVsZW07XHJcblx0XHRyZXR1cm4galF1ZXJ5LmNzcyggZWxlbSwgXCJkaXNwbGF5XCIgKSA9PT0gXCJub25lXCIgfHwgIWpRdWVyeS5jb250YWlucyggZWxlbS5vd25lckRvY3VtZW50LCBlbGVtICk7XHJcblx0fTtcclxuXHJcblxyXG5cclxuLy8gTXVsdGlmdW5jdGlvbmFsIG1ldGhvZCB0byBnZXQgYW5kIHNldCB2YWx1ZXMgb2YgYSBjb2xsZWN0aW9uXHJcbi8vIFRoZSB2YWx1ZS9zIGNhbiBvcHRpb25hbGx5IGJlIGV4ZWN1dGVkIGlmIGl0J3MgYSBmdW5jdGlvblxyXG52YXIgYWNjZXNzID0galF1ZXJ5LmFjY2VzcyA9IGZ1bmN0aW9uKCBlbGVtcywgZm4sIGtleSwgdmFsdWUsIGNoYWluYWJsZSwgZW1wdHlHZXQsIHJhdyApIHtcclxuXHR2YXIgaSA9IDAsXHJcblx0XHRsZW5ndGggPSBlbGVtcy5sZW5ndGgsXHJcblx0XHRidWxrID0ga2V5ID09IG51bGw7XHJcblxyXG5cdC8vIFNldHMgbWFueSB2YWx1ZXNcclxuXHRpZiAoIGpRdWVyeS50eXBlKCBrZXkgKSA9PT0gXCJvYmplY3RcIiApIHtcclxuXHRcdGNoYWluYWJsZSA9IHRydWU7XHJcblx0XHRmb3IgKCBpIGluIGtleSApIHtcclxuXHRcdFx0alF1ZXJ5LmFjY2VzcyggZWxlbXMsIGZuLCBpLCBrZXlbaV0sIHRydWUsIGVtcHR5R2V0LCByYXcgKTtcclxuXHRcdH1cclxuXHJcblx0Ly8gU2V0cyBvbmUgdmFsdWVcclxuXHR9IGVsc2UgaWYgKCB2YWx1ZSAhPT0gdW5kZWZpbmVkICkge1xyXG5cdFx0Y2hhaW5hYmxlID0gdHJ1ZTtcclxuXHJcblx0XHRpZiAoICFqUXVlcnkuaXNGdW5jdGlvbiggdmFsdWUgKSApIHtcclxuXHRcdFx0cmF3ID0gdHJ1ZTtcclxuXHRcdH1cclxuXHJcblx0XHRpZiAoIGJ1bGsgKSB7XHJcblx0XHRcdC8vIEJ1bGsgb3BlcmF0aW9ucyBydW4gYWdhaW5zdCB0aGUgZW50aXJlIHNldFxyXG5cdFx0XHRpZiAoIHJhdyApIHtcclxuXHRcdFx0XHRmbi5jYWxsKCBlbGVtcywgdmFsdWUgKTtcclxuXHRcdFx0XHRmbiA9IG51bGw7XHJcblxyXG5cdFx0XHQvLyAuLi5leGNlcHQgd2hlbiBleGVjdXRpbmcgZnVuY3Rpb24gdmFsdWVzXHJcblx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0YnVsayA9IGZuO1xyXG5cdFx0XHRcdGZuID0gZnVuY3Rpb24oIGVsZW0sIGtleSwgdmFsdWUgKSB7XHJcblx0XHRcdFx0XHRyZXR1cm4gYnVsay5jYWxsKCBqUXVlcnkoIGVsZW0gKSwgdmFsdWUgKTtcclxuXHRcdFx0XHR9O1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblxyXG5cdFx0aWYgKCBmbiApIHtcclxuXHRcdFx0Zm9yICggOyBpIDwgbGVuZ3RoOyBpKysgKSB7XHJcblx0XHRcdFx0Zm4oIGVsZW1zW2ldLCBrZXksIHJhdyA/IHZhbHVlIDogdmFsdWUuY2FsbCggZWxlbXNbaV0sIGksIGZuKCBlbGVtc1tpXSwga2V5ICkgKSApO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0fVxyXG5cclxuXHRyZXR1cm4gY2hhaW5hYmxlID9cclxuXHRcdGVsZW1zIDpcclxuXHJcblx0XHQvLyBHZXRzXHJcblx0XHRidWxrID9cclxuXHRcdFx0Zm4uY2FsbCggZWxlbXMgKSA6XHJcblx0XHRcdGxlbmd0aCA/IGZuKCBlbGVtc1swXSwga2V5ICkgOiBlbXB0eUdldDtcclxufTtcclxudmFyIHJjaGVja2FibGVUeXBlID0gKC9eKD86Y2hlY2tib3h8cmFkaW8pJC9pKTtcclxuXHJcblxyXG5cclxuKGZ1bmN0aW9uKCkge1xyXG5cdC8vIE1pbmlmaWVkOiB2YXIgYSxiLGNcclxuXHR2YXIgaW5wdXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImlucHV0XCIgKSxcclxuXHRcdGRpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiZGl2XCIgKSxcclxuXHRcdGZyYWdtZW50ID0gZG9jdW1lbnQuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpO1xyXG5cclxuXHQvLyBTZXR1cFxyXG5cdGRpdi5pbm5lckhUTUwgPSBcIiAgPGxpbmsvPjx0YWJsZT48L3RhYmxlPjxhIGhyZWY9Jy9hJz5hPC9hPjxpbnB1dCB0eXBlPSdjaGVja2JveCcvPlwiO1xyXG5cclxuXHQvLyBJRSBzdHJpcHMgbGVhZGluZyB3aGl0ZXNwYWNlIHdoZW4gLmlubmVySFRNTCBpcyB1c2VkXHJcblx0c3VwcG9ydC5sZWFkaW5nV2hpdGVzcGFjZSA9IGRpdi5maXJzdENoaWxkLm5vZGVUeXBlID09PSAzO1xyXG5cclxuXHQvLyBNYWtlIHN1cmUgdGhhdCB0Ym9keSBlbGVtZW50cyBhcmVuJ3QgYXV0b21hdGljYWxseSBpbnNlcnRlZFxyXG5cdC8vIElFIHdpbGwgaW5zZXJ0IHRoZW0gaW50byBlbXB0eSB0YWJsZXNcclxuXHRzdXBwb3J0LnRib2R5ID0gIWRpdi5nZXRFbGVtZW50c0J5VGFnTmFtZSggXCJ0Ym9keVwiICkubGVuZ3RoO1xyXG5cclxuXHQvLyBNYWtlIHN1cmUgdGhhdCBsaW5rIGVsZW1lbnRzIGdldCBzZXJpYWxpemVkIGNvcnJlY3RseSBieSBpbm5lckhUTUxcclxuXHQvLyBUaGlzIHJlcXVpcmVzIGEgd3JhcHBlciBlbGVtZW50IGluIElFXHJcblx0c3VwcG9ydC5odG1sU2VyaWFsaXplID0gISFkaXYuZ2V0RWxlbWVudHNCeVRhZ05hbWUoIFwibGlua1wiICkubGVuZ3RoO1xyXG5cclxuXHQvLyBNYWtlcyBzdXJlIGNsb25pbmcgYW4gaHRtbDUgZWxlbWVudCBkb2VzIG5vdCBjYXVzZSBwcm9ibGVtc1xyXG5cdC8vIFdoZXJlIG91dGVySFRNTCBpcyB1bmRlZmluZWQsIHRoaXMgc3RpbGwgd29ya3NcclxuXHRzdXBwb3J0Lmh0bWw1Q2xvbmUgPVxyXG5cdFx0ZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJuYXZcIiApLmNsb25lTm9kZSggdHJ1ZSApLm91dGVySFRNTCAhPT0gXCI8Om5hdj48LzpuYXY+XCI7XHJcblxyXG5cdC8vIENoZWNrIGlmIGEgZGlzY29ubmVjdGVkIGNoZWNrYm94IHdpbGwgcmV0YWluIGl0cyBjaGVja2VkXHJcblx0Ly8gdmFsdWUgb2YgdHJ1ZSBhZnRlciBhcHBlbmRlZCB0byB0aGUgRE9NIChJRTYvNylcclxuXHRpbnB1dC50eXBlID0gXCJjaGVja2JveFwiO1xyXG5cdGlucHV0LmNoZWNrZWQgPSB0cnVlO1xyXG5cdGZyYWdtZW50LmFwcGVuZENoaWxkKCBpbnB1dCApO1xyXG5cdHN1cHBvcnQuYXBwZW5kQ2hlY2tlZCA9IGlucHV0LmNoZWNrZWQ7XHJcblxyXG5cdC8vIE1ha2Ugc3VyZSB0ZXh0YXJlYSAoYW5kIGNoZWNrYm94KSBkZWZhdWx0VmFsdWUgaXMgcHJvcGVybHkgY2xvbmVkXHJcblx0Ly8gU3VwcG9ydDogSUU2LUlFMTErXHJcblx0ZGl2LmlubmVySFRNTCA9IFwiPHRleHRhcmVhPng8L3RleHRhcmVhPlwiO1xyXG5cdHN1cHBvcnQubm9DbG9uZUNoZWNrZWQgPSAhIWRpdi5jbG9uZU5vZGUoIHRydWUgKS5sYXN0Q2hpbGQuZGVmYXVsdFZhbHVlO1xyXG5cclxuXHQvLyAjMTEyMTcgLSBXZWJLaXQgbG9zZXMgY2hlY2sgd2hlbiB0aGUgbmFtZSBpcyBhZnRlciB0aGUgY2hlY2tlZCBhdHRyaWJ1dGVcclxuXHRmcmFnbWVudC5hcHBlbmRDaGlsZCggZGl2ICk7XHJcblx0ZGl2LmlubmVySFRNTCA9IFwiPGlucHV0IHR5cGU9J3JhZGlvJyBjaGVja2VkPSdjaGVja2VkJyBuYW1lPSd0Jy8+XCI7XHJcblxyXG5cdC8vIFN1cHBvcnQ6IFNhZmFyaSA1LjEsIGlPUyA1LjEsIEFuZHJvaWQgNC54LCBBbmRyb2lkIDIuM1xyXG5cdC8vIG9sZCBXZWJLaXQgZG9lc24ndCBjbG9uZSBjaGVja2VkIHN0YXRlIGNvcnJlY3RseSBpbiBmcmFnbWVudHNcclxuXHRzdXBwb3J0LmNoZWNrQ2xvbmUgPSBkaXYuY2xvbmVOb2RlKCB0cnVlICkuY2xvbmVOb2RlKCB0cnVlICkubGFzdENoaWxkLmNoZWNrZWQ7XHJcblxyXG5cdC8vIFN1cHBvcnQ6IElFPDlcclxuXHQvLyBPcGVyYSBkb2VzIG5vdCBjbG9uZSBldmVudHMgKGFuZCB0eXBlb2YgZGl2LmF0dGFjaEV2ZW50ID09PSB1bmRlZmluZWQpLlxyXG5cdC8vIElFOS0xMCBjbG9uZXMgZXZlbnRzIGJvdW5kIHZpYSBhdHRhY2hFdmVudCwgYnV0IHRoZXkgZG9uJ3QgdHJpZ2dlciB3aXRoIC5jbGljaygpXHJcblx0c3VwcG9ydC5ub0Nsb25lRXZlbnQgPSB0cnVlO1xyXG5cdGlmICggZGl2LmF0dGFjaEV2ZW50ICkge1xyXG5cdFx0ZGl2LmF0dGFjaEV2ZW50KCBcIm9uY2xpY2tcIiwgZnVuY3Rpb24oKSB7XHJcblx0XHRcdHN1cHBvcnQubm9DbG9uZUV2ZW50ID0gZmFsc2U7XHJcblx0XHR9KTtcclxuXHJcblx0XHRkaXYuY2xvbmVOb2RlKCB0cnVlICkuY2xpY2soKTtcclxuXHR9XHJcblxyXG5cdC8vIEV4ZWN1dGUgdGhlIHRlc3Qgb25seSBpZiBub3QgYWxyZWFkeSBleGVjdXRlZCBpbiBhbm90aGVyIG1vZHVsZS5cclxuXHRpZiAoc3VwcG9ydC5kZWxldGVFeHBhbmRvID09IG51bGwpIHtcclxuXHRcdC8vIFN1cHBvcnQ6IElFPDlcclxuXHRcdHN1cHBvcnQuZGVsZXRlRXhwYW5kbyA9IHRydWU7XHJcblx0XHR0cnkge1xyXG5cdFx0XHRkZWxldGUgZGl2LnRlc3Q7XHJcblx0XHR9IGNhdGNoKCBlICkge1xyXG5cdFx0XHRzdXBwb3J0LmRlbGV0ZUV4cGFuZG8gPSBmYWxzZTtcclxuXHRcdH1cclxuXHR9XHJcbn0pKCk7XHJcblxyXG5cclxuKGZ1bmN0aW9uKCkge1xyXG5cdHZhciBpLCBldmVudE5hbWUsXHJcblx0XHRkaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImRpdlwiICk7XHJcblxyXG5cdC8vIFN1cHBvcnQ6IElFPDkgKGxhY2sgc3VibWl0L2NoYW5nZSBidWJibGUpLCBGaXJlZm94IDIzKyAobGFjayBmb2N1c2luIGV2ZW50KVxyXG5cdGZvciAoIGkgaW4geyBzdWJtaXQ6IHRydWUsIGNoYW5nZTogdHJ1ZSwgZm9jdXNpbjogdHJ1ZSB9KSB7XHJcblx0XHRldmVudE5hbWUgPSBcIm9uXCIgKyBpO1xyXG5cclxuXHRcdGlmICggIShzdXBwb3J0WyBpICsgXCJCdWJibGVzXCIgXSA9IGV2ZW50TmFtZSBpbiB3aW5kb3cpICkge1xyXG5cdFx0XHQvLyBCZXdhcmUgb2YgQ1NQIHJlc3RyaWN0aW9ucyAoaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4vU2VjdXJpdHkvQ1NQKVxyXG5cdFx0XHRkaXYuc2V0QXR0cmlidXRlKCBldmVudE5hbWUsIFwidFwiICk7XHJcblx0XHRcdHN1cHBvcnRbIGkgKyBcIkJ1YmJsZXNcIiBdID0gZGl2LmF0dHJpYnV0ZXNbIGV2ZW50TmFtZSBdLmV4cGFuZG8gPT09IGZhbHNlO1xyXG5cdFx0fVxyXG5cdH1cclxuXHJcblx0Ly8gTnVsbCBlbGVtZW50cyB0byBhdm9pZCBsZWFrcyBpbiBJRS5cclxuXHRkaXYgPSBudWxsO1xyXG59KSgpO1xyXG5cclxuXHJcbnZhciByZm9ybUVsZW1zID0gL14oPzppbnB1dHxzZWxlY3R8dGV4dGFyZWEpJC9pLFxyXG5cdHJrZXlFdmVudCA9IC9ea2V5LyxcclxuXHRybW91c2VFdmVudCA9IC9eKD86bW91c2V8cG9pbnRlcnxjb250ZXh0bWVudSl8Y2xpY2svLFxyXG5cdHJmb2N1c01vcnBoID0gL14oPzpmb2N1c2luZm9jdXN8Zm9jdXNvdXRibHVyKSQvLFxyXG5cdHJ0eXBlbmFtZXNwYWNlID0gL14oW14uXSopKD86XFwuKC4rKXwpJC87XHJcblxyXG5mdW5jdGlvbiByZXR1cm5UcnVlKCkge1xyXG5cdHJldHVybiB0cnVlO1xyXG59XHJcblxyXG5mdW5jdGlvbiByZXR1cm5GYWxzZSgpIHtcclxuXHRyZXR1cm4gZmFsc2U7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHNhZmVBY3RpdmVFbGVtZW50KCkge1xyXG5cdHRyeSB7XHJcblx0XHRyZXR1cm4gZG9jdW1lbnQuYWN0aXZlRWxlbWVudDtcclxuXHR9IGNhdGNoICggZXJyICkgeyB9XHJcbn1cclxuXHJcbi8qXHJcbiAqIEhlbHBlciBmdW5jdGlvbnMgZm9yIG1hbmFnaW5nIGV2ZW50cyAtLSBub3QgcGFydCBvZiB0aGUgcHVibGljIGludGVyZmFjZS5cclxuICogUHJvcHMgdG8gRGVhbiBFZHdhcmRzJyBhZGRFdmVudCBsaWJyYXJ5IGZvciBtYW55IG9mIHRoZSBpZGVhcy5cclxuICovXHJcbmpRdWVyeS5ldmVudCA9IHtcclxuXHJcblx0Z2xvYmFsOiB7fSxcclxuXHJcblx0YWRkOiBmdW5jdGlvbiggZWxlbSwgdHlwZXMsIGhhbmRsZXIsIGRhdGEsIHNlbGVjdG9yICkge1xyXG5cdFx0dmFyIHRtcCwgZXZlbnRzLCB0LCBoYW5kbGVPYmpJbixcclxuXHRcdFx0c3BlY2lhbCwgZXZlbnRIYW5kbGUsIGhhbmRsZU9iaixcclxuXHRcdFx0aGFuZGxlcnMsIHR5cGUsIG5hbWVzcGFjZXMsIG9yaWdUeXBlLFxyXG5cdFx0XHRlbGVtRGF0YSA9IGpRdWVyeS5fZGF0YSggZWxlbSApO1xyXG5cclxuXHRcdC8vIERvbid0IGF0dGFjaCBldmVudHMgdG8gbm9EYXRhIG9yIHRleHQvY29tbWVudCBub2RlcyAoYnV0IGFsbG93IHBsYWluIG9iamVjdHMpXHJcblx0XHRpZiAoICFlbGVtRGF0YSApIHtcclxuXHRcdFx0cmV0dXJuO1xyXG5cdFx0fVxyXG5cclxuXHRcdC8vIENhbGxlciBjYW4gcGFzcyBpbiBhbiBvYmplY3Qgb2YgY3VzdG9tIGRhdGEgaW4gbGlldSBvZiB0aGUgaGFuZGxlclxyXG5cdFx0aWYgKCBoYW5kbGVyLmhhbmRsZXIgKSB7XHJcblx0XHRcdGhhbmRsZU9iakluID0gaGFuZGxlcjtcclxuXHRcdFx0aGFuZGxlciA9IGhhbmRsZU9iakluLmhhbmRsZXI7XHJcblx0XHRcdHNlbGVjdG9yID0gaGFuZGxlT2JqSW4uc2VsZWN0b3I7XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gTWFrZSBzdXJlIHRoYXQgdGhlIGhhbmRsZXIgaGFzIGEgdW5pcXVlIElELCB1c2VkIHRvIGZpbmQvcmVtb3ZlIGl0IGxhdGVyXHJcblx0XHRpZiAoICFoYW5kbGVyLmd1aWQgKSB7XHJcblx0XHRcdGhhbmRsZXIuZ3VpZCA9IGpRdWVyeS5ndWlkKys7XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gSW5pdCB0aGUgZWxlbWVudCdzIGV2ZW50IHN0cnVjdHVyZSBhbmQgbWFpbiBoYW5kbGVyLCBpZiB0aGlzIGlzIHRoZSBmaXJzdFxyXG5cdFx0aWYgKCAhKGV2ZW50cyA9IGVsZW1EYXRhLmV2ZW50cykgKSB7XHJcblx0XHRcdGV2ZW50cyA9IGVsZW1EYXRhLmV2ZW50cyA9IHt9O1xyXG5cdFx0fVxyXG5cdFx0aWYgKCAhKGV2ZW50SGFuZGxlID0gZWxlbURhdGEuaGFuZGxlKSApIHtcclxuXHRcdFx0ZXZlbnRIYW5kbGUgPSBlbGVtRGF0YS5oYW5kbGUgPSBmdW5jdGlvbiggZSApIHtcclxuXHRcdFx0XHQvLyBEaXNjYXJkIHRoZSBzZWNvbmQgZXZlbnQgb2YgYSBqUXVlcnkuZXZlbnQudHJpZ2dlcigpIGFuZFxyXG5cdFx0XHRcdC8vIHdoZW4gYW4gZXZlbnQgaXMgY2FsbGVkIGFmdGVyIGEgcGFnZSBoYXMgdW5sb2FkZWRcclxuXHRcdFx0XHRyZXR1cm4gdHlwZW9mIGpRdWVyeSAhPT0gc3RydW5kZWZpbmVkICYmICghZSB8fCBqUXVlcnkuZXZlbnQudHJpZ2dlcmVkICE9PSBlLnR5cGUpID9cclxuXHRcdFx0XHRcdGpRdWVyeS5ldmVudC5kaXNwYXRjaC5hcHBseSggZXZlbnRIYW5kbGUuZWxlbSwgYXJndW1lbnRzICkgOlxyXG5cdFx0XHRcdFx0dW5kZWZpbmVkO1xyXG5cdFx0XHR9O1xyXG5cdFx0XHQvLyBBZGQgZWxlbSBhcyBhIHByb3BlcnR5IG9mIHRoZSBoYW5kbGUgZm4gdG8gcHJldmVudCBhIG1lbW9yeSBsZWFrIHdpdGggSUUgbm9uLW5hdGl2ZSBldmVudHNcclxuXHRcdFx0ZXZlbnRIYW5kbGUuZWxlbSA9IGVsZW07XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gSGFuZGxlIG11bHRpcGxlIGV2ZW50cyBzZXBhcmF0ZWQgYnkgYSBzcGFjZVxyXG5cdFx0dHlwZXMgPSAoIHR5cGVzIHx8IFwiXCIgKS5tYXRjaCggcm5vdHdoaXRlICkgfHwgWyBcIlwiIF07XHJcblx0XHR0ID0gdHlwZXMubGVuZ3RoO1xyXG5cdFx0d2hpbGUgKCB0LS0gKSB7XHJcblx0XHRcdHRtcCA9IHJ0eXBlbmFtZXNwYWNlLmV4ZWMoIHR5cGVzW3RdICkgfHwgW107XHJcblx0XHRcdHR5cGUgPSBvcmlnVHlwZSA9IHRtcFsxXTtcclxuXHRcdFx0bmFtZXNwYWNlcyA9ICggdG1wWzJdIHx8IFwiXCIgKS5zcGxpdCggXCIuXCIgKS5zb3J0KCk7XHJcblxyXG5cdFx0XHQvLyBUaGVyZSAqbXVzdCogYmUgYSB0eXBlLCBubyBhdHRhY2hpbmcgbmFtZXNwYWNlLW9ubHkgaGFuZGxlcnNcclxuXHRcdFx0aWYgKCAhdHlwZSApIHtcclxuXHRcdFx0XHRjb250aW51ZTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0Ly8gSWYgZXZlbnQgY2hhbmdlcyBpdHMgdHlwZSwgdXNlIHRoZSBzcGVjaWFsIGV2ZW50IGhhbmRsZXJzIGZvciB0aGUgY2hhbmdlZCB0eXBlXHJcblx0XHRcdHNwZWNpYWwgPSBqUXVlcnkuZXZlbnQuc3BlY2lhbFsgdHlwZSBdIHx8IHt9O1xyXG5cclxuXHRcdFx0Ly8gSWYgc2VsZWN0b3IgZGVmaW5lZCwgZGV0ZXJtaW5lIHNwZWNpYWwgZXZlbnQgYXBpIHR5cGUsIG90aGVyd2lzZSBnaXZlbiB0eXBlXHJcblx0XHRcdHR5cGUgPSAoIHNlbGVjdG9yID8gc3BlY2lhbC5kZWxlZ2F0ZVR5cGUgOiBzcGVjaWFsLmJpbmRUeXBlICkgfHwgdHlwZTtcclxuXHJcblx0XHRcdC8vIFVwZGF0ZSBzcGVjaWFsIGJhc2VkIG9uIG5ld2x5IHJlc2V0IHR5cGVcclxuXHRcdFx0c3BlY2lhbCA9IGpRdWVyeS5ldmVudC5zcGVjaWFsWyB0eXBlIF0gfHwge307XHJcblxyXG5cdFx0XHQvLyBoYW5kbGVPYmogaXMgcGFzc2VkIHRvIGFsbCBldmVudCBoYW5kbGVyc1xyXG5cdFx0XHRoYW5kbGVPYmogPSBqUXVlcnkuZXh0ZW5kKHtcclxuXHRcdFx0XHR0eXBlOiB0eXBlLFxyXG5cdFx0XHRcdG9yaWdUeXBlOiBvcmlnVHlwZSxcclxuXHRcdFx0XHRkYXRhOiBkYXRhLFxyXG5cdFx0XHRcdGhhbmRsZXI6IGhhbmRsZXIsXHJcblx0XHRcdFx0Z3VpZDogaGFuZGxlci5ndWlkLFxyXG5cdFx0XHRcdHNlbGVjdG9yOiBzZWxlY3RvcixcclxuXHRcdFx0XHRuZWVkc0NvbnRleHQ6IHNlbGVjdG9yICYmIGpRdWVyeS5leHByLm1hdGNoLm5lZWRzQ29udGV4dC50ZXN0KCBzZWxlY3RvciApLFxyXG5cdFx0XHRcdG5hbWVzcGFjZTogbmFtZXNwYWNlcy5qb2luKFwiLlwiKVxyXG5cdFx0XHR9LCBoYW5kbGVPYmpJbiApO1xyXG5cclxuXHRcdFx0Ly8gSW5pdCB0aGUgZXZlbnQgaGFuZGxlciBxdWV1ZSBpZiB3ZSdyZSB0aGUgZmlyc3RcclxuXHRcdFx0aWYgKCAhKGhhbmRsZXJzID0gZXZlbnRzWyB0eXBlIF0pICkge1xyXG5cdFx0XHRcdGhhbmRsZXJzID0gZXZlbnRzWyB0eXBlIF0gPSBbXTtcclxuXHRcdFx0XHRoYW5kbGVycy5kZWxlZ2F0ZUNvdW50ID0gMDtcclxuXHJcblx0XHRcdFx0Ly8gT25seSB1c2UgYWRkRXZlbnRMaXN0ZW5lci9hdHRhY2hFdmVudCBpZiB0aGUgc3BlY2lhbCBldmVudHMgaGFuZGxlciByZXR1cm5zIGZhbHNlXHJcblx0XHRcdFx0aWYgKCAhc3BlY2lhbC5zZXR1cCB8fCBzcGVjaWFsLnNldHVwLmNhbGwoIGVsZW0sIGRhdGEsIG5hbWVzcGFjZXMsIGV2ZW50SGFuZGxlICkgPT09IGZhbHNlICkge1xyXG5cdFx0XHRcdFx0Ly8gQmluZCB0aGUgZ2xvYmFsIGV2ZW50IGhhbmRsZXIgdG8gdGhlIGVsZW1lbnRcclxuXHRcdFx0XHRcdGlmICggZWxlbS5hZGRFdmVudExpc3RlbmVyICkge1xyXG5cdFx0XHRcdFx0XHRlbGVtLmFkZEV2ZW50TGlzdGVuZXIoIHR5cGUsIGV2ZW50SGFuZGxlLCBmYWxzZSApO1xyXG5cclxuXHRcdFx0XHRcdH0gZWxzZSBpZiAoIGVsZW0uYXR0YWNoRXZlbnQgKSB7XHJcblx0XHRcdFx0XHRcdGVsZW0uYXR0YWNoRXZlbnQoIFwib25cIiArIHR5cGUsIGV2ZW50SGFuZGxlICk7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRpZiAoIHNwZWNpYWwuYWRkICkge1xyXG5cdFx0XHRcdHNwZWNpYWwuYWRkLmNhbGwoIGVsZW0sIGhhbmRsZU9iaiApO1xyXG5cclxuXHRcdFx0XHRpZiAoICFoYW5kbGVPYmouaGFuZGxlci5ndWlkICkge1xyXG5cdFx0XHRcdFx0aGFuZGxlT2JqLmhhbmRsZXIuZ3VpZCA9IGhhbmRsZXIuZ3VpZDtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdC8vIEFkZCB0byB0aGUgZWxlbWVudCdzIGhhbmRsZXIgbGlzdCwgZGVsZWdhdGVzIGluIGZyb250XHJcblx0XHRcdGlmICggc2VsZWN0b3IgKSB7XHJcblx0XHRcdFx0aGFuZGxlcnMuc3BsaWNlKCBoYW5kbGVycy5kZWxlZ2F0ZUNvdW50KyssIDAsIGhhbmRsZU9iaiApO1xyXG5cdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdGhhbmRsZXJzLnB1c2goIGhhbmRsZU9iaiApO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHQvLyBLZWVwIHRyYWNrIG9mIHdoaWNoIGV2ZW50cyBoYXZlIGV2ZXIgYmVlbiB1c2VkLCBmb3IgZXZlbnQgb3B0aW1pemF0aW9uXHJcblx0XHRcdGpRdWVyeS5ldmVudC5nbG9iYWxbIHR5cGUgXSA9IHRydWU7XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gTnVsbGlmeSBlbGVtIHRvIHByZXZlbnQgbWVtb3J5IGxlYWtzIGluIElFXHJcblx0XHRlbGVtID0gbnVsbDtcclxuXHR9LFxyXG5cclxuXHQvLyBEZXRhY2ggYW4gZXZlbnQgb3Igc2V0IG9mIGV2ZW50cyBmcm9tIGFuIGVsZW1lbnRcclxuXHRyZW1vdmU6IGZ1bmN0aW9uKCBlbGVtLCB0eXBlcywgaGFuZGxlciwgc2VsZWN0b3IsIG1hcHBlZFR5cGVzICkge1xyXG5cdFx0dmFyIGosIGhhbmRsZU9iaiwgdG1wLFxyXG5cdFx0XHRvcmlnQ291bnQsIHQsIGV2ZW50cyxcclxuXHRcdFx0c3BlY2lhbCwgaGFuZGxlcnMsIHR5cGUsXHJcblx0XHRcdG5hbWVzcGFjZXMsIG9yaWdUeXBlLFxyXG5cdFx0XHRlbGVtRGF0YSA9IGpRdWVyeS5oYXNEYXRhKCBlbGVtICkgJiYgalF1ZXJ5Ll9kYXRhKCBlbGVtICk7XHJcblxyXG5cdFx0aWYgKCAhZWxlbURhdGEgfHwgIShldmVudHMgPSBlbGVtRGF0YS5ldmVudHMpICkge1xyXG5cdFx0XHRyZXR1cm47XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gT25jZSBmb3IgZWFjaCB0eXBlLm5hbWVzcGFjZSBpbiB0eXBlczsgdHlwZSBtYXkgYmUgb21pdHRlZFxyXG5cdFx0dHlwZXMgPSAoIHR5cGVzIHx8IFwiXCIgKS5tYXRjaCggcm5vdHdoaXRlICkgfHwgWyBcIlwiIF07XHJcblx0XHR0ID0gdHlwZXMubGVuZ3RoO1xyXG5cdFx0d2hpbGUgKCB0LS0gKSB7XHJcblx0XHRcdHRtcCA9IHJ0eXBlbmFtZXNwYWNlLmV4ZWMoIHR5cGVzW3RdICkgfHwgW107XHJcblx0XHRcdHR5cGUgPSBvcmlnVHlwZSA9IHRtcFsxXTtcclxuXHRcdFx0bmFtZXNwYWNlcyA9ICggdG1wWzJdIHx8IFwiXCIgKS5zcGxpdCggXCIuXCIgKS5zb3J0KCk7XHJcblxyXG5cdFx0XHQvLyBVbmJpbmQgYWxsIGV2ZW50cyAob24gdGhpcyBuYW1lc3BhY2UsIGlmIHByb3ZpZGVkKSBmb3IgdGhlIGVsZW1lbnRcclxuXHRcdFx0aWYgKCAhdHlwZSApIHtcclxuXHRcdFx0XHRmb3IgKCB0eXBlIGluIGV2ZW50cyApIHtcclxuXHRcdFx0XHRcdGpRdWVyeS5ldmVudC5yZW1vdmUoIGVsZW0sIHR5cGUgKyB0eXBlc1sgdCBdLCBoYW5kbGVyLCBzZWxlY3RvciwgdHJ1ZSApO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHRjb250aW51ZTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0c3BlY2lhbCA9IGpRdWVyeS5ldmVudC5zcGVjaWFsWyB0eXBlIF0gfHwge307XHJcblx0XHRcdHR5cGUgPSAoIHNlbGVjdG9yID8gc3BlY2lhbC5kZWxlZ2F0ZVR5cGUgOiBzcGVjaWFsLmJpbmRUeXBlICkgfHwgdHlwZTtcclxuXHRcdFx0aGFuZGxlcnMgPSBldmVudHNbIHR5cGUgXSB8fCBbXTtcclxuXHRcdFx0dG1wID0gdG1wWzJdICYmIG5ldyBSZWdFeHAoIFwiKF58XFxcXC4pXCIgKyBuYW1lc3BhY2VzLmpvaW4oXCJcXFxcLig/Oi4qXFxcXC58KVwiKSArIFwiKFxcXFwufCQpXCIgKTtcclxuXHJcblx0XHRcdC8vIFJlbW92ZSBtYXRjaGluZyBldmVudHNcclxuXHRcdFx0b3JpZ0NvdW50ID0gaiA9IGhhbmRsZXJzLmxlbmd0aDtcclxuXHRcdFx0d2hpbGUgKCBqLS0gKSB7XHJcblx0XHRcdFx0aGFuZGxlT2JqID0gaGFuZGxlcnNbIGogXTtcclxuXHJcblx0XHRcdFx0aWYgKCAoIG1hcHBlZFR5cGVzIHx8IG9yaWdUeXBlID09PSBoYW5kbGVPYmoub3JpZ1R5cGUgKSAmJlxyXG5cdFx0XHRcdFx0KCAhaGFuZGxlciB8fCBoYW5kbGVyLmd1aWQgPT09IGhhbmRsZU9iai5ndWlkICkgJiZcclxuXHRcdFx0XHRcdCggIXRtcCB8fCB0bXAudGVzdCggaGFuZGxlT2JqLm5hbWVzcGFjZSApICkgJiZcclxuXHRcdFx0XHRcdCggIXNlbGVjdG9yIHx8IHNlbGVjdG9yID09PSBoYW5kbGVPYmouc2VsZWN0b3IgfHwgc2VsZWN0b3IgPT09IFwiKipcIiAmJiBoYW5kbGVPYmouc2VsZWN0b3IgKSApIHtcclxuXHRcdFx0XHRcdGhhbmRsZXJzLnNwbGljZSggaiwgMSApO1xyXG5cclxuXHRcdFx0XHRcdGlmICggaGFuZGxlT2JqLnNlbGVjdG9yICkge1xyXG5cdFx0XHRcdFx0XHRoYW5kbGVycy5kZWxlZ2F0ZUNvdW50LS07XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRpZiAoIHNwZWNpYWwucmVtb3ZlICkge1xyXG5cdFx0XHRcdFx0XHRzcGVjaWFsLnJlbW92ZS5jYWxsKCBlbGVtLCBoYW5kbGVPYmogKTtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdC8vIFJlbW92ZSBnZW5lcmljIGV2ZW50IGhhbmRsZXIgaWYgd2UgcmVtb3ZlZCBzb21ldGhpbmcgYW5kIG5vIG1vcmUgaGFuZGxlcnMgZXhpc3RcclxuXHRcdFx0Ly8gKGF2b2lkcyBwb3RlbnRpYWwgZm9yIGVuZGxlc3MgcmVjdXJzaW9uIGR1cmluZyByZW1vdmFsIG9mIHNwZWNpYWwgZXZlbnQgaGFuZGxlcnMpXHJcblx0XHRcdGlmICggb3JpZ0NvdW50ICYmICFoYW5kbGVycy5sZW5ndGggKSB7XHJcblx0XHRcdFx0aWYgKCAhc3BlY2lhbC50ZWFyZG93biB8fCBzcGVjaWFsLnRlYXJkb3duLmNhbGwoIGVsZW0sIG5hbWVzcGFjZXMsIGVsZW1EYXRhLmhhbmRsZSApID09PSBmYWxzZSApIHtcclxuXHRcdFx0XHRcdGpRdWVyeS5yZW1vdmVFdmVudCggZWxlbSwgdHlwZSwgZWxlbURhdGEuaGFuZGxlICk7XHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRkZWxldGUgZXZlbnRzWyB0eXBlIF07XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHJcblx0XHQvLyBSZW1vdmUgdGhlIGV4cGFuZG8gaWYgaXQncyBubyBsb25nZXIgdXNlZFxyXG5cdFx0aWYgKCBqUXVlcnkuaXNFbXB0eU9iamVjdCggZXZlbnRzICkgKSB7XHJcblx0XHRcdGRlbGV0ZSBlbGVtRGF0YS5oYW5kbGU7XHJcblxyXG5cdFx0XHQvLyByZW1vdmVEYXRhIGFsc28gY2hlY2tzIGZvciBlbXB0aW5lc3MgYW5kIGNsZWFycyB0aGUgZXhwYW5kbyBpZiBlbXB0eVxyXG5cdFx0XHQvLyBzbyB1c2UgaXQgaW5zdGVhZCBvZiBkZWxldGVcclxuXHRcdFx0alF1ZXJ5Ll9yZW1vdmVEYXRhKCBlbGVtLCBcImV2ZW50c1wiICk7XHJcblx0XHR9XHJcblx0fSxcclxuXHJcblx0dHJpZ2dlcjogZnVuY3Rpb24oIGV2ZW50LCBkYXRhLCBlbGVtLCBvbmx5SGFuZGxlcnMgKSB7XHJcblx0XHR2YXIgaGFuZGxlLCBvbnR5cGUsIGN1cixcclxuXHRcdFx0YnViYmxlVHlwZSwgc3BlY2lhbCwgdG1wLCBpLFxyXG5cdFx0XHRldmVudFBhdGggPSBbIGVsZW0gfHwgZG9jdW1lbnQgXSxcclxuXHRcdFx0dHlwZSA9IGhhc093bi5jYWxsKCBldmVudCwgXCJ0eXBlXCIgKSA/IGV2ZW50LnR5cGUgOiBldmVudCxcclxuXHRcdFx0bmFtZXNwYWNlcyA9IGhhc093bi5jYWxsKCBldmVudCwgXCJuYW1lc3BhY2VcIiApID8gZXZlbnQubmFtZXNwYWNlLnNwbGl0KFwiLlwiKSA6IFtdO1xyXG5cclxuXHRcdGN1ciA9IHRtcCA9IGVsZW0gPSBlbGVtIHx8IGRvY3VtZW50O1xyXG5cclxuXHRcdC8vIERvbid0IGRvIGV2ZW50cyBvbiB0ZXh0IGFuZCBjb21tZW50IG5vZGVzXHJcblx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDMgfHwgZWxlbS5ub2RlVHlwZSA9PT0gOCApIHtcclxuXHRcdFx0cmV0dXJuO1xyXG5cdFx0fVxyXG5cclxuXHRcdC8vIGZvY3VzL2JsdXIgbW9ycGhzIHRvIGZvY3VzaW4vb3V0OyBlbnN1cmUgd2UncmUgbm90IGZpcmluZyB0aGVtIHJpZ2h0IG5vd1xyXG5cdFx0aWYgKCByZm9jdXNNb3JwaC50ZXN0KCB0eXBlICsgalF1ZXJ5LmV2ZW50LnRyaWdnZXJlZCApICkge1xyXG5cdFx0XHRyZXR1cm47XHJcblx0XHR9XHJcblxyXG5cdFx0aWYgKCB0eXBlLmluZGV4T2YoXCIuXCIpID49IDAgKSB7XHJcblx0XHRcdC8vIE5hbWVzcGFjZWQgdHJpZ2dlcjsgY3JlYXRlIGEgcmVnZXhwIHRvIG1hdGNoIGV2ZW50IHR5cGUgaW4gaGFuZGxlKClcclxuXHRcdFx0bmFtZXNwYWNlcyA9IHR5cGUuc3BsaXQoXCIuXCIpO1xyXG5cdFx0XHR0eXBlID0gbmFtZXNwYWNlcy5zaGlmdCgpO1xyXG5cdFx0XHRuYW1lc3BhY2VzLnNvcnQoKTtcclxuXHRcdH1cclxuXHRcdG9udHlwZSA9IHR5cGUuaW5kZXhPZihcIjpcIikgPCAwICYmIFwib25cIiArIHR5cGU7XHJcblxyXG5cdFx0Ly8gQ2FsbGVyIGNhbiBwYXNzIGluIGEgalF1ZXJ5LkV2ZW50IG9iamVjdCwgT2JqZWN0LCBvciBqdXN0IGFuIGV2ZW50IHR5cGUgc3RyaW5nXHJcblx0XHRldmVudCA9IGV2ZW50WyBqUXVlcnkuZXhwYW5kbyBdID9cclxuXHRcdFx0ZXZlbnQgOlxyXG5cdFx0XHRuZXcgalF1ZXJ5LkV2ZW50KCB0eXBlLCB0eXBlb2YgZXZlbnQgPT09IFwib2JqZWN0XCIgJiYgZXZlbnQgKTtcclxuXHJcblx0XHQvLyBUcmlnZ2VyIGJpdG1hc2s6ICYgMSBmb3IgbmF0aXZlIGhhbmRsZXJzOyAmIDIgZm9yIGpRdWVyeSAoYWx3YXlzIHRydWUpXHJcblx0XHRldmVudC5pc1RyaWdnZXIgPSBvbmx5SGFuZGxlcnMgPyAyIDogMztcclxuXHRcdGV2ZW50Lm5hbWVzcGFjZSA9IG5hbWVzcGFjZXMuam9pbihcIi5cIik7XHJcblx0XHRldmVudC5uYW1lc3BhY2VfcmUgPSBldmVudC5uYW1lc3BhY2UgP1xyXG5cdFx0XHRuZXcgUmVnRXhwKCBcIihefFxcXFwuKVwiICsgbmFtZXNwYWNlcy5qb2luKFwiXFxcXC4oPzouKlxcXFwufClcIikgKyBcIihcXFxcLnwkKVwiICkgOlxyXG5cdFx0XHRudWxsO1xyXG5cclxuXHRcdC8vIENsZWFuIHVwIHRoZSBldmVudCBpbiBjYXNlIGl0IGlzIGJlaW5nIHJldXNlZFxyXG5cdFx0ZXZlbnQucmVzdWx0ID0gdW5kZWZpbmVkO1xyXG5cdFx0aWYgKCAhZXZlbnQudGFyZ2V0ICkge1xyXG5cdFx0XHRldmVudC50YXJnZXQgPSBlbGVtO1xyXG5cdFx0fVxyXG5cclxuXHRcdC8vIENsb25lIGFueSBpbmNvbWluZyBkYXRhIGFuZCBwcmVwZW5kIHRoZSBldmVudCwgY3JlYXRpbmcgdGhlIGhhbmRsZXIgYXJnIGxpc3RcclxuXHRcdGRhdGEgPSBkYXRhID09IG51bGwgP1xyXG5cdFx0XHRbIGV2ZW50IF0gOlxyXG5cdFx0XHRqUXVlcnkubWFrZUFycmF5KCBkYXRhLCBbIGV2ZW50IF0gKTtcclxuXHJcblx0XHQvLyBBbGxvdyBzcGVjaWFsIGV2ZW50cyB0byBkcmF3IG91dHNpZGUgdGhlIGxpbmVzXHJcblx0XHRzcGVjaWFsID0galF1ZXJ5LmV2ZW50LnNwZWNpYWxbIHR5cGUgXSB8fCB7fTtcclxuXHRcdGlmICggIW9ubHlIYW5kbGVycyAmJiBzcGVjaWFsLnRyaWdnZXIgJiYgc3BlY2lhbC50cmlnZ2VyLmFwcGx5KCBlbGVtLCBkYXRhICkgPT09IGZhbHNlICkge1xyXG5cdFx0XHRyZXR1cm47XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gRGV0ZXJtaW5lIGV2ZW50IHByb3BhZ2F0aW9uIHBhdGggaW4gYWR2YW5jZSwgcGVyIFczQyBldmVudHMgc3BlYyAoIzk5NTEpXHJcblx0XHQvLyBCdWJibGUgdXAgdG8gZG9jdW1lbnQsIHRoZW4gdG8gd2luZG93OyB3YXRjaCBmb3IgYSBnbG9iYWwgb3duZXJEb2N1bWVudCB2YXIgKCM5NzI0KVxyXG5cdFx0aWYgKCAhb25seUhhbmRsZXJzICYmICFzcGVjaWFsLm5vQnViYmxlICYmICFqUXVlcnkuaXNXaW5kb3coIGVsZW0gKSApIHtcclxuXHJcblx0XHRcdGJ1YmJsZVR5cGUgPSBzcGVjaWFsLmRlbGVnYXRlVHlwZSB8fCB0eXBlO1xyXG5cdFx0XHRpZiAoICFyZm9jdXNNb3JwaC50ZXN0KCBidWJibGVUeXBlICsgdHlwZSApICkge1xyXG5cdFx0XHRcdGN1ciA9IGN1ci5wYXJlbnROb2RlO1xyXG5cdFx0XHR9XHJcblx0XHRcdGZvciAoIDsgY3VyOyBjdXIgPSBjdXIucGFyZW50Tm9kZSApIHtcclxuXHRcdFx0XHRldmVudFBhdGgucHVzaCggY3VyICk7XHJcblx0XHRcdFx0dG1wID0gY3VyO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHQvLyBPbmx5IGFkZCB3aW5kb3cgaWYgd2UgZ290IHRvIGRvY3VtZW50IChlLmcuLCBub3QgcGxhaW4gb2JqIG9yIGRldGFjaGVkIERPTSlcclxuXHRcdFx0aWYgKCB0bXAgPT09IChlbGVtLm93bmVyRG9jdW1lbnQgfHwgZG9jdW1lbnQpICkge1xyXG5cdFx0XHRcdGV2ZW50UGF0aC5wdXNoKCB0bXAuZGVmYXVsdFZpZXcgfHwgdG1wLnBhcmVudFdpbmRvdyB8fCB3aW5kb3cgKTtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cclxuXHRcdC8vIEZpcmUgaGFuZGxlcnMgb24gdGhlIGV2ZW50IHBhdGhcclxuXHRcdGkgPSAwO1xyXG5cdFx0d2hpbGUgKCAoY3VyID0gZXZlbnRQYXRoW2krK10pICYmICFldmVudC5pc1Byb3BhZ2F0aW9uU3RvcHBlZCgpICkge1xyXG5cclxuXHRcdFx0ZXZlbnQudHlwZSA9IGkgPiAxID9cclxuXHRcdFx0XHRidWJibGVUeXBlIDpcclxuXHRcdFx0XHRzcGVjaWFsLmJpbmRUeXBlIHx8IHR5cGU7XHJcblxyXG5cdFx0XHQvLyBqUXVlcnkgaGFuZGxlclxyXG5cdFx0XHRoYW5kbGUgPSAoIGpRdWVyeS5fZGF0YSggY3VyLCBcImV2ZW50c1wiICkgfHwge30gKVsgZXZlbnQudHlwZSBdICYmIGpRdWVyeS5fZGF0YSggY3VyLCBcImhhbmRsZVwiICk7XHJcblx0XHRcdGlmICggaGFuZGxlICkge1xyXG5cdFx0XHRcdGhhbmRsZS5hcHBseSggY3VyLCBkYXRhICk7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdC8vIE5hdGl2ZSBoYW5kbGVyXHJcblx0XHRcdGhhbmRsZSA9IG9udHlwZSAmJiBjdXJbIG9udHlwZSBdO1xyXG5cdFx0XHRpZiAoIGhhbmRsZSAmJiBoYW5kbGUuYXBwbHkgJiYgalF1ZXJ5LmFjY2VwdERhdGEoIGN1ciApICkge1xyXG5cdFx0XHRcdGV2ZW50LnJlc3VsdCA9IGhhbmRsZS5hcHBseSggY3VyLCBkYXRhICk7XHJcblx0XHRcdFx0aWYgKCBldmVudC5yZXN1bHQgPT09IGZhbHNlICkge1xyXG5cdFx0XHRcdFx0ZXZlbnQucHJldmVudERlZmF1bHQoKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHRcdGV2ZW50LnR5cGUgPSB0eXBlO1xyXG5cclxuXHRcdC8vIElmIG5vYm9keSBwcmV2ZW50ZWQgdGhlIGRlZmF1bHQgYWN0aW9uLCBkbyBpdCBub3dcclxuXHRcdGlmICggIW9ubHlIYW5kbGVycyAmJiAhZXZlbnQuaXNEZWZhdWx0UHJldmVudGVkKCkgKSB7XHJcblxyXG5cdFx0XHRpZiAoICghc3BlY2lhbC5fZGVmYXVsdCB8fCBzcGVjaWFsLl9kZWZhdWx0LmFwcGx5KCBldmVudFBhdGgucG9wKCksIGRhdGEgKSA9PT0gZmFsc2UpICYmXHJcblx0XHRcdFx0alF1ZXJ5LmFjY2VwdERhdGEoIGVsZW0gKSApIHtcclxuXHJcblx0XHRcdFx0Ly8gQ2FsbCBhIG5hdGl2ZSBET00gbWV0aG9kIG9uIHRoZSB0YXJnZXQgd2l0aCB0aGUgc2FtZSBuYW1lIG5hbWUgYXMgdGhlIGV2ZW50LlxyXG5cdFx0XHRcdC8vIENhbid0IHVzZSBhbiAuaXNGdW5jdGlvbigpIGNoZWNrIGhlcmUgYmVjYXVzZSBJRTYvNyBmYWlscyB0aGF0IHRlc3QuXHJcblx0XHRcdFx0Ly8gRG9uJ3QgZG8gZGVmYXVsdCBhY3Rpb25zIG9uIHdpbmRvdywgdGhhdCdzIHdoZXJlIGdsb2JhbCB2YXJpYWJsZXMgYmUgKCM2MTcwKVxyXG5cdFx0XHRcdGlmICggb250eXBlICYmIGVsZW1bIHR5cGUgXSAmJiAhalF1ZXJ5LmlzV2luZG93KCBlbGVtICkgKSB7XHJcblxyXG5cdFx0XHRcdFx0Ly8gRG9uJ3QgcmUtdHJpZ2dlciBhbiBvbkZPTyBldmVudCB3aGVuIHdlIGNhbGwgaXRzIEZPTygpIG1ldGhvZFxyXG5cdFx0XHRcdFx0dG1wID0gZWxlbVsgb250eXBlIF07XHJcblxyXG5cdFx0XHRcdFx0aWYgKCB0bXAgKSB7XHJcblx0XHRcdFx0XHRcdGVsZW1bIG9udHlwZSBdID0gbnVsbDtcclxuXHRcdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0XHQvLyBQcmV2ZW50IHJlLXRyaWdnZXJpbmcgb2YgdGhlIHNhbWUgZXZlbnQsIHNpbmNlIHdlIGFscmVhZHkgYnViYmxlZCBpdCBhYm92ZVxyXG5cdFx0XHRcdFx0alF1ZXJ5LmV2ZW50LnRyaWdnZXJlZCA9IHR5cGU7XHJcblx0XHRcdFx0XHR0cnkge1xyXG5cdFx0XHRcdFx0XHRlbGVtWyB0eXBlIF0oKTtcclxuXHRcdFx0XHRcdH0gY2F0Y2ggKCBlICkge1xyXG5cdFx0XHRcdFx0XHQvLyBJRTw5IGRpZXMgb24gZm9jdXMvYmx1ciB0byBoaWRkZW4gZWxlbWVudCAoIzE0ODYsIzEyNTE4KVxyXG5cdFx0XHRcdFx0XHQvLyBvbmx5IHJlcHJvZHVjaWJsZSBvbiB3aW5YUCBJRTggbmF0aXZlLCBub3QgSUU5IGluIElFOCBtb2RlXHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRqUXVlcnkuZXZlbnQudHJpZ2dlcmVkID0gdW5kZWZpbmVkO1xyXG5cclxuXHRcdFx0XHRcdGlmICggdG1wICkge1xyXG5cdFx0XHRcdFx0XHRlbGVtWyBvbnR5cGUgXSA9IHRtcDtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHJcblx0XHRyZXR1cm4gZXZlbnQucmVzdWx0O1xyXG5cdH0sXHJcblxyXG5cdGRpc3BhdGNoOiBmdW5jdGlvbiggZXZlbnQgKSB7XHJcblxyXG5cdFx0Ly8gTWFrZSBhIHdyaXRhYmxlIGpRdWVyeS5FdmVudCBmcm9tIHRoZSBuYXRpdmUgZXZlbnQgb2JqZWN0XHJcblx0XHRldmVudCA9IGpRdWVyeS5ldmVudC5maXgoIGV2ZW50ICk7XHJcblxyXG5cdFx0dmFyIGksIHJldCwgaGFuZGxlT2JqLCBtYXRjaGVkLCBqLFxyXG5cdFx0XHRoYW5kbGVyUXVldWUgPSBbXSxcclxuXHRcdFx0YXJncyA9IHNsaWNlLmNhbGwoIGFyZ3VtZW50cyApLFxyXG5cdFx0XHRoYW5kbGVycyA9ICggalF1ZXJ5Ll9kYXRhKCB0aGlzLCBcImV2ZW50c1wiICkgfHwge30gKVsgZXZlbnQudHlwZSBdIHx8IFtdLFxyXG5cdFx0XHRzcGVjaWFsID0galF1ZXJ5LmV2ZW50LnNwZWNpYWxbIGV2ZW50LnR5cGUgXSB8fCB7fTtcclxuXHJcblx0XHQvLyBVc2UgdGhlIGZpeC1lZCBqUXVlcnkuRXZlbnQgcmF0aGVyIHRoYW4gdGhlIChyZWFkLW9ubHkpIG5hdGl2ZSBldmVudFxyXG5cdFx0YXJnc1swXSA9IGV2ZW50O1xyXG5cdFx0ZXZlbnQuZGVsZWdhdGVUYXJnZXQgPSB0aGlzO1xyXG5cclxuXHRcdC8vIENhbGwgdGhlIHByZURpc3BhdGNoIGhvb2sgZm9yIHRoZSBtYXBwZWQgdHlwZSwgYW5kIGxldCBpdCBiYWlsIGlmIGRlc2lyZWRcclxuXHRcdGlmICggc3BlY2lhbC5wcmVEaXNwYXRjaCAmJiBzcGVjaWFsLnByZURpc3BhdGNoLmNhbGwoIHRoaXMsIGV2ZW50ICkgPT09IGZhbHNlICkge1xyXG5cdFx0XHRyZXR1cm47XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gRGV0ZXJtaW5lIGhhbmRsZXJzXHJcblx0XHRoYW5kbGVyUXVldWUgPSBqUXVlcnkuZXZlbnQuaGFuZGxlcnMuY2FsbCggdGhpcywgZXZlbnQsIGhhbmRsZXJzICk7XHJcblxyXG5cdFx0Ly8gUnVuIGRlbGVnYXRlcyBmaXJzdDsgdGhleSBtYXkgd2FudCB0byBzdG9wIHByb3BhZ2F0aW9uIGJlbmVhdGggdXNcclxuXHRcdGkgPSAwO1xyXG5cdFx0d2hpbGUgKCAobWF0Y2hlZCA9IGhhbmRsZXJRdWV1ZVsgaSsrIF0pICYmICFldmVudC5pc1Byb3BhZ2F0aW9uU3RvcHBlZCgpICkge1xyXG5cdFx0XHRldmVudC5jdXJyZW50VGFyZ2V0ID0gbWF0Y2hlZC5lbGVtO1xyXG5cclxuXHRcdFx0aiA9IDA7XHJcblx0XHRcdHdoaWxlICggKGhhbmRsZU9iaiA9IG1hdGNoZWQuaGFuZGxlcnNbIGorKyBdKSAmJiAhZXZlbnQuaXNJbW1lZGlhdGVQcm9wYWdhdGlvblN0b3BwZWQoKSApIHtcclxuXHJcblx0XHRcdFx0Ly8gVHJpZ2dlcmVkIGV2ZW50IG11c3QgZWl0aGVyIDEpIGhhdmUgbm8gbmFtZXNwYWNlLCBvclxyXG5cdFx0XHRcdC8vIDIpIGhhdmUgbmFtZXNwYWNlKHMpIGEgc3Vic2V0IG9yIGVxdWFsIHRvIHRob3NlIGluIHRoZSBib3VuZCBldmVudCAoYm90aCBjYW4gaGF2ZSBubyBuYW1lc3BhY2UpLlxyXG5cdFx0XHRcdGlmICggIWV2ZW50Lm5hbWVzcGFjZV9yZSB8fCBldmVudC5uYW1lc3BhY2VfcmUudGVzdCggaGFuZGxlT2JqLm5hbWVzcGFjZSApICkge1xyXG5cclxuXHRcdFx0XHRcdGV2ZW50LmhhbmRsZU9iaiA9IGhhbmRsZU9iajtcclxuXHRcdFx0XHRcdGV2ZW50LmRhdGEgPSBoYW5kbGVPYmouZGF0YTtcclxuXHJcblx0XHRcdFx0XHRyZXQgPSAoIChqUXVlcnkuZXZlbnQuc3BlY2lhbFsgaGFuZGxlT2JqLm9yaWdUeXBlIF0gfHwge30pLmhhbmRsZSB8fCBoYW5kbGVPYmouaGFuZGxlciApXHJcblx0XHRcdFx0XHRcdFx0LmFwcGx5KCBtYXRjaGVkLmVsZW0sIGFyZ3MgKTtcclxuXHJcblx0XHRcdFx0XHRpZiAoIHJldCAhPT0gdW5kZWZpbmVkICkge1xyXG5cdFx0XHRcdFx0XHRpZiAoIChldmVudC5yZXN1bHQgPSByZXQpID09PSBmYWxzZSApIHtcclxuXHRcdFx0XHRcdFx0XHRldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xyXG5cdFx0XHRcdFx0XHRcdGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xyXG5cdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gQ2FsbCB0aGUgcG9zdERpc3BhdGNoIGhvb2sgZm9yIHRoZSBtYXBwZWQgdHlwZVxyXG5cdFx0aWYgKCBzcGVjaWFsLnBvc3REaXNwYXRjaCApIHtcclxuXHRcdFx0c3BlY2lhbC5wb3N0RGlzcGF0Y2guY2FsbCggdGhpcywgZXZlbnQgKTtcclxuXHRcdH1cclxuXHJcblx0XHRyZXR1cm4gZXZlbnQucmVzdWx0O1xyXG5cdH0sXHJcblxyXG5cdGhhbmRsZXJzOiBmdW5jdGlvbiggZXZlbnQsIGhhbmRsZXJzICkge1xyXG5cdFx0dmFyIHNlbCwgaGFuZGxlT2JqLCBtYXRjaGVzLCBpLFxyXG5cdFx0XHRoYW5kbGVyUXVldWUgPSBbXSxcclxuXHRcdFx0ZGVsZWdhdGVDb3VudCA9IGhhbmRsZXJzLmRlbGVnYXRlQ291bnQsXHJcblx0XHRcdGN1ciA9IGV2ZW50LnRhcmdldDtcclxuXHJcblx0XHQvLyBGaW5kIGRlbGVnYXRlIGhhbmRsZXJzXHJcblx0XHQvLyBCbGFjay1ob2xlIFNWRyA8dXNlPiBpbnN0YW5jZSB0cmVlcyAoIzEzMTgwKVxyXG5cdFx0Ly8gQXZvaWQgbm9uLWxlZnQtY2xpY2sgYnViYmxpbmcgaW4gRmlyZWZveCAoIzM4NjEpXHJcblx0XHRpZiAoIGRlbGVnYXRlQ291bnQgJiYgY3VyLm5vZGVUeXBlICYmICghZXZlbnQuYnV0dG9uIHx8IGV2ZW50LnR5cGUgIT09IFwiY2xpY2tcIikgKSB7XHJcblxyXG5cdFx0XHQvKiBqc2hpbnQgZXFlcWVxOiBmYWxzZSAqL1xyXG5cdFx0XHRmb3IgKCA7IGN1ciAhPSB0aGlzOyBjdXIgPSBjdXIucGFyZW50Tm9kZSB8fCB0aGlzICkge1xyXG5cdFx0XHRcdC8qIGpzaGludCBlcWVxZXE6IHRydWUgKi9cclxuXHJcblx0XHRcdFx0Ly8gRG9uJ3QgY2hlY2sgbm9uLWVsZW1lbnRzICgjMTMyMDgpXHJcblx0XHRcdFx0Ly8gRG9uJ3QgcHJvY2VzcyBjbGlja3Mgb24gZGlzYWJsZWQgZWxlbWVudHMgKCM2OTExLCAjODE2NSwgIzExMzgyLCAjMTE3NjQpXHJcblx0XHRcdFx0aWYgKCBjdXIubm9kZVR5cGUgPT09IDEgJiYgKGN1ci5kaXNhYmxlZCAhPT0gdHJ1ZSB8fCBldmVudC50eXBlICE9PSBcImNsaWNrXCIpICkge1xyXG5cdFx0XHRcdFx0bWF0Y2hlcyA9IFtdO1xyXG5cdFx0XHRcdFx0Zm9yICggaSA9IDA7IGkgPCBkZWxlZ2F0ZUNvdW50OyBpKysgKSB7XHJcblx0XHRcdFx0XHRcdGhhbmRsZU9iaiA9IGhhbmRsZXJzWyBpIF07XHJcblxyXG5cdFx0XHRcdFx0XHQvLyBEb24ndCBjb25mbGljdCB3aXRoIE9iamVjdC5wcm90b3R5cGUgcHJvcGVydGllcyAoIzEzMjAzKVxyXG5cdFx0XHRcdFx0XHRzZWwgPSBoYW5kbGVPYmouc2VsZWN0b3IgKyBcIiBcIjtcclxuXHJcblx0XHRcdFx0XHRcdGlmICggbWF0Y2hlc1sgc2VsIF0gPT09IHVuZGVmaW5lZCApIHtcclxuXHRcdFx0XHRcdFx0XHRtYXRjaGVzWyBzZWwgXSA9IGhhbmRsZU9iai5uZWVkc0NvbnRleHQgP1xyXG5cdFx0XHRcdFx0XHRcdFx0alF1ZXJ5KCBzZWwsIHRoaXMgKS5pbmRleCggY3VyICkgPj0gMCA6XHJcblx0XHRcdFx0XHRcdFx0XHRqUXVlcnkuZmluZCggc2VsLCB0aGlzLCBudWxsLCBbIGN1ciBdICkubGVuZ3RoO1xyXG5cdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdGlmICggbWF0Y2hlc1sgc2VsIF0gKSB7XHJcblx0XHRcdFx0XHRcdFx0bWF0Y2hlcy5wdXNoKCBoYW5kbGVPYmogKTtcclxuXHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0aWYgKCBtYXRjaGVzLmxlbmd0aCApIHtcclxuXHRcdFx0XHRcdFx0aGFuZGxlclF1ZXVlLnB1c2goeyBlbGVtOiBjdXIsIGhhbmRsZXJzOiBtYXRjaGVzIH0pO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cclxuXHRcdC8vIEFkZCB0aGUgcmVtYWluaW5nIChkaXJlY3RseS1ib3VuZCkgaGFuZGxlcnNcclxuXHRcdGlmICggZGVsZWdhdGVDb3VudCA8IGhhbmRsZXJzLmxlbmd0aCApIHtcclxuXHRcdFx0aGFuZGxlclF1ZXVlLnB1c2goeyBlbGVtOiB0aGlzLCBoYW5kbGVyczogaGFuZGxlcnMuc2xpY2UoIGRlbGVnYXRlQ291bnQgKSB9KTtcclxuXHRcdH1cclxuXHJcblx0XHRyZXR1cm4gaGFuZGxlclF1ZXVlO1xyXG5cdH0sXHJcblxyXG5cdGZpeDogZnVuY3Rpb24oIGV2ZW50ICkge1xyXG5cdFx0aWYgKCBldmVudFsgalF1ZXJ5LmV4cGFuZG8gXSApIHtcclxuXHRcdFx0cmV0dXJuIGV2ZW50O1xyXG5cdFx0fVxyXG5cclxuXHRcdC8vIENyZWF0ZSBhIHdyaXRhYmxlIGNvcHkgb2YgdGhlIGV2ZW50IG9iamVjdCBhbmQgbm9ybWFsaXplIHNvbWUgcHJvcGVydGllc1xyXG5cdFx0dmFyIGksIHByb3AsIGNvcHksXHJcblx0XHRcdHR5cGUgPSBldmVudC50eXBlLFxyXG5cdFx0XHRvcmlnaW5hbEV2ZW50ID0gZXZlbnQsXHJcblx0XHRcdGZpeEhvb2sgPSB0aGlzLmZpeEhvb2tzWyB0eXBlIF07XHJcblxyXG5cdFx0aWYgKCAhZml4SG9vayApIHtcclxuXHRcdFx0dGhpcy5maXhIb29rc1sgdHlwZSBdID0gZml4SG9vayA9XHJcblx0XHRcdFx0cm1vdXNlRXZlbnQudGVzdCggdHlwZSApID8gdGhpcy5tb3VzZUhvb2tzIDpcclxuXHRcdFx0XHRya2V5RXZlbnQudGVzdCggdHlwZSApID8gdGhpcy5rZXlIb29rcyA6XHJcblx0XHRcdFx0e307XHJcblx0XHR9XHJcblx0XHRjb3B5ID0gZml4SG9vay5wcm9wcyA/IHRoaXMucHJvcHMuY29uY2F0KCBmaXhIb29rLnByb3BzICkgOiB0aGlzLnByb3BzO1xyXG5cclxuXHRcdGV2ZW50ID0gbmV3IGpRdWVyeS5FdmVudCggb3JpZ2luYWxFdmVudCApO1xyXG5cclxuXHRcdGkgPSBjb3B5Lmxlbmd0aDtcclxuXHRcdHdoaWxlICggaS0tICkge1xyXG5cdFx0XHRwcm9wID0gY29weVsgaSBdO1xyXG5cdFx0XHRldmVudFsgcHJvcCBdID0gb3JpZ2luYWxFdmVudFsgcHJvcCBdO1xyXG5cdFx0fVxyXG5cclxuXHRcdC8vIFN1cHBvcnQ6IElFPDlcclxuXHRcdC8vIEZpeCB0YXJnZXQgcHJvcGVydHkgKCMxOTI1KVxyXG5cdFx0aWYgKCAhZXZlbnQudGFyZ2V0ICkge1xyXG5cdFx0XHRldmVudC50YXJnZXQgPSBvcmlnaW5hbEV2ZW50LnNyY0VsZW1lbnQgfHwgZG9jdW1lbnQ7XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gU3VwcG9ydDogQ2hyb21lIDIzKywgU2FmYXJpP1xyXG5cdFx0Ly8gVGFyZ2V0IHNob3VsZCBub3QgYmUgYSB0ZXh0IG5vZGUgKCM1MDQsICMxMzE0MylcclxuXHRcdGlmICggZXZlbnQudGFyZ2V0Lm5vZGVUeXBlID09PSAzICkge1xyXG5cdFx0XHRldmVudC50YXJnZXQgPSBldmVudC50YXJnZXQucGFyZW50Tm9kZTtcclxuXHRcdH1cclxuXHJcblx0XHQvLyBTdXBwb3J0OiBJRTw5XHJcblx0XHQvLyBGb3IgbW91c2Uva2V5IGV2ZW50cywgbWV0YUtleT09ZmFsc2UgaWYgaXQncyB1bmRlZmluZWQgKCMzMzY4LCAjMTEzMjgpXHJcblx0XHRldmVudC5tZXRhS2V5ID0gISFldmVudC5tZXRhS2V5O1xyXG5cclxuXHRcdHJldHVybiBmaXhIb29rLmZpbHRlciA/IGZpeEhvb2suZmlsdGVyKCBldmVudCwgb3JpZ2luYWxFdmVudCApIDogZXZlbnQ7XHJcblx0fSxcclxuXHJcblx0Ly8gSW5jbHVkZXMgc29tZSBldmVudCBwcm9wcyBzaGFyZWQgYnkgS2V5RXZlbnQgYW5kIE1vdXNlRXZlbnRcclxuXHRwcm9wczogXCJhbHRLZXkgYnViYmxlcyBjYW5jZWxhYmxlIGN0cmxLZXkgY3VycmVudFRhcmdldCBldmVudFBoYXNlIG1ldGFLZXkgcmVsYXRlZFRhcmdldCBzaGlmdEtleSB0YXJnZXQgdGltZVN0YW1wIHZpZXcgd2hpY2hcIi5zcGxpdChcIiBcIiksXHJcblxyXG5cdGZpeEhvb2tzOiB7fSxcclxuXHJcblx0a2V5SG9va3M6IHtcclxuXHRcdHByb3BzOiBcImNoYXIgY2hhckNvZGUga2V5IGtleUNvZGVcIi5zcGxpdChcIiBcIiksXHJcblx0XHRmaWx0ZXI6IGZ1bmN0aW9uKCBldmVudCwgb3JpZ2luYWwgKSB7XHJcblxyXG5cdFx0XHQvLyBBZGQgd2hpY2ggZm9yIGtleSBldmVudHNcclxuXHRcdFx0aWYgKCBldmVudC53aGljaCA9PSBudWxsICkge1xyXG5cdFx0XHRcdGV2ZW50LndoaWNoID0gb3JpZ2luYWwuY2hhckNvZGUgIT0gbnVsbCA/IG9yaWdpbmFsLmNoYXJDb2RlIDogb3JpZ2luYWwua2V5Q29kZTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0cmV0dXJuIGV2ZW50O1xyXG5cdFx0fVxyXG5cdH0sXHJcblxyXG5cdG1vdXNlSG9va3M6IHtcclxuXHRcdHByb3BzOiBcImJ1dHRvbiBidXR0b25zIGNsaWVudFggY2xpZW50WSBmcm9tRWxlbWVudCBvZmZzZXRYIG9mZnNldFkgcGFnZVggcGFnZVkgc2NyZWVuWCBzY3JlZW5ZIHRvRWxlbWVudFwiLnNwbGl0KFwiIFwiKSxcclxuXHRcdGZpbHRlcjogZnVuY3Rpb24oIGV2ZW50LCBvcmlnaW5hbCApIHtcclxuXHRcdFx0dmFyIGJvZHksIGV2ZW50RG9jLCBkb2MsXHJcblx0XHRcdFx0YnV0dG9uID0gb3JpZ2luYWwuYnV0dG9uLFxyXG5cdFx0XHRcdGZyb21FbGVtZW50ID0gb3JpZ2luYWwuZnJvbUVsZW1lbnQ7XHJcblxyXG5cdFx0XHQvLyBDYWxjdWxhdGUgcGFnZVgvWSBpZiBtaXNzaW5nIGFuZCBjbGllbnRYL1kgYXZhaWxhYmxlXHJcblx0XHRcdGlmICggZXZlbnQucGFnZVggPT0gbnVsbCAmJiBvcmlnaW5hbC5jbGllbnRYICE9IG51bGwgKSB7XHJcblx0XHRcdFx0ZXZlbnREb2MgPSBldmVudC50YXJnZXQub3duZXJEb2N1bWVudCB8fCBkb2N1bWVudDtcclxuXHRcdFx0XHRkb2MgPSBldmVudERvYy5kb2N1bWVudEVsZW1lbnQ7XHJcblx0XHRcdFx0Ym9keSA9IGV2ZW50RG9jLmJvZHk7XHJcblxyXG5cdFx0XHRcdGV2ZW50LnBhZ2VYID0gb3JpZ2luYWwuY2xpZW50WCArICggZG9jICYmIGRvYy5zY3JvbGxMZWZ0IHx8IGJvZHkgJiYgYm9keS5zY3JvbGxMZWZ0IHx8IDAgKSAtICggZG9jICYmIGRvYy5jbGllbnRMZWZ0IHx8IGJvZHkgJiYgYm9keS5jbGllbnRMZWZ0IHx8IDAgKTtcclxuXHRcdFx0XHRldmVudC5wYWdlWSA9IG9yaWdpbmFsLmNsaWVudFkgKyAoIGRvYyAmJiBkb2Muc2Nyb2xsVG9wICB8fCBib2R5ICYmIGJvZHkuc2Nyb2xsVG9wICB8fCAwICkgLSAoIGRvYyAmJiBkb2MuY2xpZW50VG9wICB8fCBib2R5ICYmIGJvZHkuY2xpZW50VG9wICB8fCAwICk7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdC8vIEFkZCByZWxhdGVkVGFyZ2V0LCBpZiBuZWNlc3NhcnlcclxuXHRcdFx0aWYgKCAhZXZlbnQucmVsYXRlZFRhcmdldCAmJiBmcm9tRWxlbWVudCApIHtcclxuXHRcdFx0XHRldmVudC5yZWxhdGVkVGFyZ2V0ID0gZnJvbUVsZW1lbnQgPT09IGV2ZW50LnRhcmdldCA/IG9yaWdpbmFsLnRvRWxlbWVudCA6IGZyb21FbGVtZW50O1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHQvLyBBZGQgd2hpY2ggZm9yIGNsaWNrOiAxID09PSBsZWZ0OyAyID09PSBtaWRkbGU7IDMgPT09IHJpZ2h0XHJcblx0XHRcdC8vIE5vdGU6IGJ1dHRvbiBpcyBub3Qgbm9ybWFsaXplZCwgc28gZG9uJ3QgdXNlIGl0XHJcblx0XHRcdGlmICggIWV2ZW50LndoaWNoICYmIGJ1dHRvbiAhPT0gdW5kZWZpbmVkICkge1xyXG5cdFx0XHRcdGV2ZW50LndoaWNoID0gKCBidXR0b24gJiAxID8gMSA6ICggYnV0dG9uICYgMiA/IDMgOiAoIGJ1dHRvbiAmIDQgPyAyIDogMCApICkgKTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0cmV0dXJuIGV2ZW50O1xyXG5cdFx0fVxyXG5cdH0sXHJcblxyXG5cdHNwZWNpYWw6IHtcclxuXHRcdGxvYWQ6IHtcclxuXHRcdFx0Ly8gUHJldmVudCB0cmlnZ2VyZWQgaW1hZ2UubG9hZCBldmVudHMgZnJvbSBidWJibGluZyB0byB3aW5kb3cubG9hZFxyXG5cdFx0XHRub0J1YmJsZTogdHJ1ZVxyXG5cdFx0fSxcclxuXHRcdGZvY3VzOiB7XHJcblx0XHRcdC8vIEZpcmUgbmF0aXZlIGV2ZW50IGlmIHBvc3NpYmxlIHNvIGJsdXIvZm9jdXMgc2VxdWVuY2UgaXMgY29ycmVjdFxyXG5cdFx0XHR0cmlnZ2VyOiBmdW5jdGlvbigpIHtcclxuXHRcdFx0XHRpZiAoIHRoaXMgIT09IHNhZmVBY3RpdmVFbGVtZW50KCkgJiYgdGhpcy5mb2N1cyApIHtcclxuXHRcdFx0XHRcdHRyeSB7XHJcblx0XHRcdFx0XHRcdHRoaXMuZm9jdXMoKTtcclxuXHRcdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xyXG5cdFx0XHRcdFx0fSBjYXRjaCAoIGUgKSB7XHJcblx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFPDlcclxuXHRcdFx0XHRcdFx0Ly8gSWYgd2UgZXJyb3Igb24gZm9jdXMgdG8gaGlkZGVuIGVsZW1lbnQgKCMxNDg2LCAjMTI1MTgpLFxyXG5cdFx0XHRcdFx0XHQvLyBsZXQgLnRyaWdnZXIoKSBydW4gdGhlIGhhbmRsZXJzXHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9LFxyXG5cdFx0XHRkZWxlZ2F0ZVR5cGU6IFwiZm9jdXNpblwiXHJcblx0XHR9LFxyXG5cdFx0Ymx1cjoge1xyXG5cdFx0XHR0cmlnZ2VyOiBmdW5jdGlvbigpIHtcclxuXHRcdFx0XHRpZiAoIHRoaXMgPT09IHNhZmVBY3RpdmVFbGVtZW50KCkgJiYgdGhpcy5ibHVyICkge1xyXG5cdFx0XHRcdFx0dGhpcy5ibHVyKCk7XHJcblx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9LFxyXG5cdFx0XHRkZWxlZ2F0ZVR5cGU6IFwiZm9jdXNvdXRcIlxyXG5cdFx0fSxcclxuXHRcdGNsaWNrOiB7XHJcblx0XHRcdC8vIEZvciBjaGVja2JveCwgZmlyZSBuYXRpdmUgZXZlbnQgc28gY2hlY2tlZCBzdGF0ZSB3aWxsIGJlIHJpZ2h0XHJcblx0XHRcdHRyaWdnZXI6IGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRcdGlmICggalF1ZXJ5Lm5vZGVOYW1lKCB0aGlzLCBcImlucHV0XCIgKSAmJiB0aGlzLnR5cGUgPT09IFwiY2hlY2tib3hcIiAmJiB0aGlzLmNsaWNrICkge1xyXG5cdFx0XHRcdFx0dGhpcy5jbGljaygpO1xyXG5cdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fSxcclxuXHJcblx0XHRcdC8vIEZvciBjcm9zcy1icm93c2VyIGNvbnNpc3RlbmN5LCBkb24ndCBmaXJlIG5hdGl2ZSAuY2xpY2soKSBvbiBsaW5rc1xyXG5cdFx0XHRfZGVmYXVsdDogZnVuY3Rpb24oIGV2ZW50ICkge1xyXG5cdFx0XHRcdHJldHVybiBqUXVlcnkubm9kZU5hbWUoIGV2ZW50LnRhcmdldCwgXCJhXCIgKTtcclxuXHRcdFx0fVxyXG5cdFx0fSxcclxuXHJcblx0XHRiZWZvcmV1bmxvYWQ6IHtcclxuXHRcdFx0cG9zdERpc3BhdGNoOiBmdW5jdGlvbiggZXZlbnQgKSB7XHJcblxyXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IEZpcmVmb3ggMjArXHJcblx0XHRcdFx0Ly8gRmlyZWZveCBkb2Vzbid0IGFsZXJ0IGlmIHRoZSByZXR1cm5WYWx1ZSBmaWVsZCBpcyBub3Qgc2V0LlxyXG5cdFx0XHRcdGlmICggZXZlbnQucmVzdWx0ICE9PSB1bmRlZmluZWQgJiYgZXZlbnQub3JpZ2luYWxFdmVudCApIHtcclxuXHRcdFx0XHRcdGV2ZW50Lm9yaWdpbmFsRXZlbnQucmV0dXJuVmFsdWUgPSBldmVudC5yZXN1bHQ7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0fSxcclxuXHJcblx0c2ltdWxhdGU6IGZ1bmN0aW9uKCB0eXBlLCBlbGVtLCBldmVudCwgYnViYmxlICkge1xyXG5cdFx0Ly8gUGlnZ3liYWNrIG9uIGEgZG9ub3IgZXZlbnQgdG8gc2ltdWxhdGUgYSBkaWZmZXJlbnQgb25lLlxyXG5cdFx0Ly8gRmFrZSBvcmlnaW5hbEV2ZW50IHRvIGF2b2lkIGRvbm9yJ3Mgc3RvcFByb3BhZ2F0aW9uLCBidXQgaWYgdGhlXHJcblx0XHQvLyBzaW11bGF0ZWQgZXZlbnQgcHJldmVudHMgZGVmYXVsdCB0aGVuIHdlIGRvIHRoZSBzYW1lIG9uIHRoZSBkb25vci5cclxuXHRcdHZhciBlID0galF1ZXJ5LmV4dGVuZChcclxuXHRcdFx0bmV3IGpRdWVyeS5FdmVudCgpLFxyXG5cdFx0XHRldmVudCxcclxuXHRcdFx0e1xyXG5cdFx0XHRcdHR5cGU6IHR5cGUsXHJcblx0XHRcdFx0aXNTaW11bGF0ZWQ6IHRydWUsXHJcblx0XHRcdFx0b3JpZ2luYWxFdmVudDoge31cclxuXHRcdFx0fVxyXG5cdFx0KTtcclxuXHRcdGlmICggYnViYmxlICkge1xyXG5cdFx0XHRqUXVlcnkuZXZlbnQudHJpZ2dlciggZSwgbnVsbCwgZWxlbSApO1xyXG5cdFx0fSBlbHNlIHtcclxuXHRcdFx0alF1ZXJ5LmV2ZW50LmRpc3BhdGNoLmNhbGwoIGVsZW0sIGUgKTtcclxuXHRcdH1cclxuXHRcdGlmICggZS5pc0RlZmF1bHRQcmV2ZW50ZWQoKSApIHtcclxuXHRcdFx0ZXZlbnQucHJldmVudERlZmF1bHQoKTtcclxuXHRcdH1cclxuXHR9XHJcbn07XHJcblxyXG5qUXVlcnkucmVtb3ZlRXZlbnQgPSBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyID9cclxuXHRmdW5jdGlvbiggZWxlbSwgdHlwZSwgaGFuZGxlICkge1xyXG5cdFx0aWYgKCBlbGVtLnJlbW92ZUV2ZW50TGlzdGVuZXIgKSB7XHJcblx0XHRcdGVsZW0ucmVtb3ZlRXZlbnRMaXN0ZW5lciggdHlwZSwgaGFuZGxlLCBmYWxzZSApO1xyXG5cdFx0fVxyXG5cdH0gOlxyXG5cdGZ1bmN0aW9uKCBlbGVtLCB0eXBlLCBoYW5kbGUgKSB7XHJcblx0XHR2YXIgbmFtZSA9IFwib25cIiArIHR5cGU7XHJcblxyXG5cdFx0aWYgKCBlbGVtLmRldGFjaEV2ZW50ICkge1xyXG5cclxuXHRcdFx0Ly8gIzg1NDUsICM3MDU0LCBwcmV2ZW50aW5nIG1lbW9yeSBsZWFrcyBmb3IgY3VzdG9tIGV2ZW50cyBpbiBJRTYtOFxyXG5cdFx0XHQvLyBkZXRhY2hFdmVudCBuZWVkZWQgcHJvcGVydHkgb24gZWxlbWVudCwgYnkgbmFtZSBvZiB0aGF0IGV2ZW50LCB0byBwcm9wZXJseSBleHBvc2UgaXQgdG8gR0NcclxuXHRcdFx0aWYgKCB0eXBlb2YgZWxlbVsgbmFtZSBdID09PSBzdHJ1bmRlZmluZWQgKSB7XHJcblx0XHRcdFx0ZWxlbVsgbmFtZSBdID0gbnVsbDtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0ZWxlbS5kZXRhY2hFdmVudCggbmFtZSwgaGFuZGxlICk7XHJcblx0XHR9XHJcblx0fTtcclxuXHJcbmpRdWVyeS5FdmVudCA9IGZ1bmN0aW9uKCBzcmMsIHByb3BzICkge1xyXG5cdC8vIEFsbG93IGluc3RhbnRpYXRpb24gd2l0aG91dCB0aGUgJ25ldycga2V5d29yZFxyXG5cdGlmICggISh0aGlzIGluc3RhbmNlb2YgalF1ZXJ5LkV2ZW50KSApIHtcclxuXHRcdHJldHVybiBuZXcgalF1ZXJ5LkV2ZW50KCBzcmMsIHByb3BzICk7XHJcblx0fVxyXG5cclxuXHQvLyBFdmVudCBvYmplY3RcclxuXHRpZiAoIHNyYyAmJiBzcmMudHlwZSApIHtcclxuXHRcdHRoaXMub3JpZ2luYWxFdmVudCA9IHNyYztcclxuXHRcdHRoaXMudHlwZSA9IHNyYy50eXBlO1xyXG5cclxuXHRcdC8vIEV2ZW50cyBidWJibGluZyB1cCB0aGUgZG9jdW1lbnQgbWF5IGhhdmUgYmVlbiBtYXJrZWQgYXMgcHJldmVudGVkXHJcblx0XHQvLyBieSBhIGhhbmRsZXIgbG93ZXIgZG93biB0aGUgdHJlZTsgcmVmbGVjdCB0aGUgY29ycmVjdCB2YWx1ZS5cclxuXHRcdHRoaXMuaXNEZWZhdWx0UHJldmVudGVkID0gc3JjLmRlZmF1bHRQcmV2ZW50ZWQgfHxcclxuXHRcdFx0XHRzcmMuZGVmYXVsdFByZXZlbnRlZCA9PT0gdW5kZWZpbmVkICYmXHJcblx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPCA5LCBBbmRyb2lkIDwgNC4wXHJcblx0XHRcdFx0c3JjLnJldHVyblZhbHVlID09PSBmYWxzZSA/XHJcblx0XHRcdHJldHVyblRydWUgOlxyXG5cdFx0XHRyZXR1cm5GYWxzZTtcclxuXHJcblx0Ly8gRXZlbnQgdHlwZVxyXG5cdH0gZWxzZSB7XHJcblx0XHR0aGlzLnR5cGUgPSBzcmM7XHJcblx0fVxyXG5cclxuXHQvLyBQdXQgZXhwbGljaXRseSBwcm92aWRlZCBwcm9wZXJ0aWVzIG9udG8gdGhlIGV2ZW50IG9iamVjdFxyXG5cdGlmICggcHJvcHMgKSB7XHJcblx0XHRqUXVlcnkuZXh0ZW5kKCB0aGlzLCBwcm9wcyApO1xyXG5cdH1cclxuXHJcblx0Ly8gQ3JlYXRlIGEgdGltZXN0YW1wIGlmIGluY29taW5nIGV2ZW50IGRvZXNuJ3QgaGF2ZSBvbmVcclxuXHR0aGlzLnRpbWVTdGFtcCA9IHNyYyAmJiBzcmMudGltZVN0YW1wIHx8IGpRdWVyeS5ub3coKTtcclxuXHJcblx0Ly8gTWFyayBpdCBhcyBmaXhlZFxyXG5cdHRoaXNbIGpRdWVyeS5leHBhbmRvIF0gPSB0cnVlO1xyXG59O1xyXG5cclxuLy8galF1ZXJ5LkV2ZW50IGlzIGJhc2VkIG9uIERPTTMgRXZlbnRzIGFzIHNwZWNpZmllZCBieSB0aGUgRUNNQVNjcmlwdCBMYW5ndWFnZSBCaW5kaW5nXHJcbi8vIGh0dHA6Ly93d3cudzMub3JnL1RSLzIwMDMvV0QtRE9NLUxldmVsLTMtRXZlbnRzLTIwMDMwMzMxL2VjbWEtc2NyaXB0LWJpbmRpbmcuaHRtbFxyXG5qUXVlcnkuRXZlbnQucHJvdG90eXBlID0ge1xyXG5cdGlzRGVmYXVsdFByZXZlbnRlZDogcmV0dXJuRmFsc2UsXHJcblx0aXNQcm9wYWdhdGlvblN0b3BwZWQ6IHJldHVybkZhbHNlLFxyXG5cdGlzSW1tZWRpYXRlUHJvcGFnYXRpb25TdG9wcGVkOiByZXR1cm5GYWxzZSxcclxuXHJcblx0cHJldmVudERlZmF1bHQ6IGZ1bmN0aW9uKCkge1xyXG5cdFx0dmFyIGUgPSB0aGlzLm9yaWdpbmFsRXZlbnQ7XHJcblxyXG5cdFx0dGhpcy5pc0RlZmF1bHRQcmV2ZW50ZWQgPSByZXR1cm5UcnVlO1xyXG5cdFx0aWYgKCAhZSApIHtcclxuXHRcdFx0cmV0dXJuO1xyXG5cdFx0fVxyXG5cclxuXHRcdC8vIElmIHByZXZlbnREZWZhdWx0IGV4aXN0cywgcnVuIGl0IG9uIHRoZSBvcmlnaW5hbCBldmVudFxyXG5cdFx0aWYgKCBlLnByZXZlbnREZWZhdWx0ICkge1xyXG5cdFx0XHRlLnByZXZlbnREZWZhdWx0KCk7XHJcblxyXG5cdFx0Ly8gU3VwcG9ydDogSUVcclxuXHRcdC8vIE90aGVyd2lzZSBzZXQgdGhlIHJldHVyblZhbHVlIHByb3BlcnR5IG9mIHRoZSBvcmlnaW5hbCBldmVudCB0byBmYWxzZVxyXG5cdFx0fSBlbHNlIHtcclxuXHRcdFx0ZS5yZXR1cm5WYWx1ZSA9IGZhbHNlO1xyXG5cdFx0fVxyXG5cdH0sXHJcblx0c3RvcFByb3BhZ2F0aW9uOiBmdW5jdGlvbigpIHtcclxuXHRcdHZhciBlID0gdGhpcy5vcmlnaW5hbEV2ZW50O1xyXG5cclxuXHRcdHRoaXMuaXNQcm9wYWdhdGlvblN0b3BwZWQgPSByZXR1cm5UcnVlO1xyXG5cdFx0aWYgKCAhZSApIHtcclxuXHRcdFx0cmV0dXJuO1xyXG5cdFx0fVxyXG5cdFx0Ly8gSWYgc3RvcFByb3BhZ2F0aW9uIGV4aXN0cywgcnVuIGl0IG9uIHRoZSBvcmlnaW5hbCBldmVudFxyXG5cdFx0aWYgKCBlLnN0b3BQcm9wYWdhdGlvbiApIHtcclxuXHRcdFx0ZS5zdG9wUHJvcGFnYXRpb24oKTtcclxuXHRcdH1cclxuXHJcblx0XHQvLyBTdXBwb3J0OiBJRVxyXG5cdFx0Ly8gU2V0IHRoZSBjYW5jZWxCdWJibGUgcHJvcGVydHkgb2YgdGhlIG9yaWdpbmFsIGV2ZW50IHRvIHRydWVcclxuXHRcdGUuY2FuY2VsQnViYmxlID0gdHJ1ZTtcclxuXHR9LFxyXG5cdHN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbjogZnVuY3Rpb24oKSB7XHJcblx0XHR2YXIgZSA9IHRoaXMub3JpZ2luYWxFdmVudDtcclxuXHJcblx0XHR0aGlzLmlzSW1tZWRpYXRlUHJvcGFnYXRpb25TdG9wcGVkID0gcmV0dXJuVHJ1ZTtcclxuXHJcblx0XHRpZiAoIGUgJiYgZS5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24gKSB7XHJcblx0XHRcdGUuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCk7XHJcblx0XHR9XHJcblxyXG5cdFx0dGhpcy5zdG9wUHJvcGFnYXRpb24oKTtcclxuXHR9XHJcbn07XHJcblxyXG4vLyBDcmVhdGUgbW91c2VlbnRlci9sZWF2ZSBldmVudHMgdXNpbmcgbW91c2VvdmVyL291dCBhbmQgZXZlbnQtdGltZSBjaGVja3NcclxualF1ZXJ5LmVhY2goe1xyXG5cdG1vdXNlZW50ZXI6IFwibW91c2VvdmVyXCIsXHJcblx0bW91c2VsZWF2ZTogXCJtb3VzZW91dFwiLFxyXG5cdHBvaW50ZXJlbnRlcjogXCJwb2ludGVyb3ZlclwiLFxyXG5cdHBvaW50ZXJsZWF2ZTogXCJwb2ludGVyb3V0XCJcclxufSwgZnVuY3Rpb24oIG9yaWcsIGZpeCApIHtcclxuXHRqUXVlcnkuZXZlbnQuc3BlY2lhbFsgb3JpZyBdID0ge1xyXG5cdFx0ZGVsZWdhdGVUeXBlOiBmaXgsXHJcblx0XHRiaW5kVHlwZTogZml4LFxyXG5cclxuXHRcdGhhbmRsZTogZnVuY3Rpb24oIGV2ZW50ICkge1xyXG5cdFx0XHR2YXIgcmV0LFxyXG5cdFx0XHRcdHRhcmdldCA9IHRoaXMsXHJcblx0XHRcdFx0cmVsYXRlZCA9IGV2ZW50LnJlbGF0ZWRUYXJnZXQsXHJcblx0XHRcdFx0aGFuZGxlT2JqID0gZXZlbnQuaGFuZGxlT2JqO1xyXG5cclxuXHRcdFx0Ly8gRm9yIG1vdXNlbnRlci9sZWF2ZSBjYWxsIHRoZSBoYW5kbGVyIGlmIHJlbGF0ZWQgaXMgb3V0c2lkZSB0aGUgdGFyZ2V0LlxyXG5cdFx0XHQvLyBOQjogTm8gcmVsYXRlZFRhcmdldCBpZiB0aGUgbW91c2UgbGVmdC9lbnRlcmVkIHRoZSBicm93c2VyIHdpbmRvd1xyXG5cdFx0XHRpZiAoICFyZWxhdGVkIHx8IChyZWxhdGVkICE9PSB0YXJnZXQgJiYgIWpRdWVyeS5jb250YWlucyggdGFyZ2V0LCByZWxhdGVkICkpICkge1xyXG5cdFx0XHRcdGV2ZW50LnR5cGUgPSBoYW5kbGVPYmoub3JpZ1R5cGU7XHJcblx0XHRcdFx0cmV0ID0gaGFuZGxlT2JqLmhhbmRsZXIuYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApO1xyXG5cdFx0XHRcdGV2ZW50LnR5cGUgPSBmaXg7XHJcblx0XHRcdH1cclxuXHRcdFx0cmV0dXJuIHJldDtcclxuXHRcdH1cclxuXHR9O1xyXG59KTtcclxuXHJcbi8vIElFIHN1Ym1pdCBkZWxlZ2F0aW9uXHJcbmlmICggIXN1cHBvcnQuc3VibWl0QnViYmxlcyApIHtcclxuXHJcblx0alF1ZXJ5LmV2ZW50LnNwZWNpYWwuc3VibWl0ID0ge1xyXG5cdFx0c2V0dXA6IGZ1bmN0aW9uKCkge1xyXG5cdFx0XHQvLyBPbmx5IG5lZWQgdGhpcyBmb3IgZGVsZWdhdGVkIGZvcm0gc3VibWl0IGV2ZW50c1xyXG5cdFx0XHRpZiAoIGpRdWVyeS5ub2RlTmFtZSggdGhpcywgXCJmb3JtXCIgKSApIHtcclxuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdC8vIExhenktYWRkIGEgc3VibWl0IGhhbmRsZXIgd2hlbiBhIGRlc2NlbmRhbnQgZm9ybSBtYXkgcG90ZW50aWFsbHkgYmUgc3VibWl0dGVkXHJcblx0XHRcdGpRdWVyeS5ldmVudC5hZGQoIHRoaXMsIFwiY2xpY2suX3N1Ym1pdCBrZXlwcmVzcy5fc3VibWl0XCIsIGZ1bmN0aW9uKCBlICkge1xyXG5cdFx0XHRcdC8vIE5vZGUgbmFtZSBjaGVjayBhdm9pZHMgYSBWTUwtcmVsYXRlZCBjcmFzaCBpbiBJRSAoIzk4MDcpXHJcblx0XHRcdFx0dmFyIGVsZW0gPSBlLnRhcmdldCxcclxuXHRcdFx0XHRcdGZvcm0gPSBqUXVlcnkubm9kZU5hbWUoIGVsZW0sIFwiaW5wdXRcIiApIHx8IGpRdWVyeS5ub2RlTmFtZSggZWxlbSwgXCJidXR0b25cIiApID8gZWxlbS5mb3JtIDogdW5kZWZpbmVkO1xyXG5cdFx0XHRcdGlmICggZm9ybSAmJiAhalF1ZXJ5Ll9kYXRhKCBmb3JtLCBcInN1Ym1pdEJ1YmJsZXNcIiApICkge1xyXG5cdFx0XHRcdFx0alF1ZXJ5LmV2ZW50LmFkZCggZm9ybSwgXCJzdWJtaXQuX3N1Ym1pdFwiLCBmdW5jdGlvbiggZXZlbnQgKSB7XHJcblx0XHRcdFx0XHRcdGV2ZW50Ll9zdWJtaXRfYnViYmxlID0gdHJ1ZTtcclxuXHRcdFx0XHRcdH0pO1xyXG5cdFx0XHRcdFx0alF1ZXJ5Ll9kYXRhKCBmb3JtLCBcInN1Ym1pdEJ1YmJsZXNcIiwgdHJ1ZSApO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fSk7XHJcblx0XHRcdC8vIHJldHVybiB1bmRlZmluZWQgc2luY2Ugd2UgZG9uJ3QgbmVlZCBhbiBldmVudCBsaXN0ZW5lclxyXG5cdFx0fSxcclxuXHJcblx0XHRwb3N0RGlzcGF0Y2g6IGZ1bmN0aW9uKCBldmVudCApIHtcclxuXHRcdFx0Ly8gSWYgZm9ybSB3YXMgc3VibWl0dGVkIGJ5IHRoZSB1c2VyLCBidWJibGUgdGhlIGV2ZW50IHVwIHRoZSB0cmVlXHJcblx0XHRcdGlmICggZXZlbnQuX3N1Ym1pdF9idWJibGUgKSB7XHJcblx0XHRcdFx0ZGVsZXRlIGV2ZW50Ll9zdWJtaXRfYnViYmxlO1xyXG5cdFx0XHRcdGlmICggdGhpcy5wYXJlbnROb2RlICYmICFldmVudC5pc1RyaWdnZXIgKSB7XHJcblx0XHRcdFx0XHRqUXVlcnkuZXZlbnQuc2ltdWxhdGUoIFwic3VibWl0XCIsIHRoaXMucGFyZW50Tm9kZSwgZXZlbnQsIHRydWUgKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdH0sXHJcblxyXG5cdFx0dGVhcmRvd246IGZ1bmN0aW9uKCkge1xyXG5cdFx0XHQvLyBPbmx5IG5lZWQgdGhpcyBmb3IgZGVsZWdhdGVkIGZvcm0gc3VibWl0IGV2ZW50c1xyXG5cdFx0XHRpZiAoIGpRdWVyeS5ub2RlTmFtZSggdGhpcywgXCJmb3JtXCIgKSApIHtcclxuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdC8vIFJlbW92ZSBkZWxlZ2F0ZWQgaGFuZGxlcnM7IGNsZWFuRGF0YSBldmVudHVhbGx5IHJlYXBzIHN1Ym1pdCBoYW5kbGVycyBhdHRhY2hlZCBhYm92ZVxyXG5cdFx0XHRqUXVlcnkuZXZlbnQucmVtb3ZlKCB0aGlzLCBcIi5fc3VibWl0XCIgKTtcclxuXHRcdH1cclxuXHR9O1xyXG59XHJcblxyXG4vLyBJRSBjaGFuZ2UgZGVsZWdhdGlvbiBhbmQgY2hlY2tib3gvcmFkaW8gZml4XHJcbmlmICggIXN1cHBvcnQuY2hhbmdlQnViYmxlcyApIHtcclxuXHJcblx0alF1ZXJ5LmV2ZW50LnNwZWNpYWwuY2hhbmdlID0ge1xyXG5cclxuXHRcdHNldHVwOiBmdW5jdGlvbigpIHtcclxuXHJcblx0XHRcdGlmICggcmZvcm1FbGVtcy50ZXN0KCB0aGlzLm5vZGVOYW1lICkgKSB7XHJcblx0XHRcdFx0Ly8gSUUgZG9lc24ndCBmaXJlIGNoYW5nZSBvbiBhIGNoZWNrL3JhZGlvIHVudGlsIGJsdXI7IHRyaWdnZXIgaXQgb24gY2xpY2tcclxuXHRcdFx0XHQvLyBhZnRlciBhIHByb3BlcnR5Y2hhbmdlLiBFYXQgdGhlIGJsdXItY2hhbmdlIGluIHNwZWNpYWwuY2hhbmdlLmhhbmRsZS5cclxuXHRcdFx0XHQvLyBUaGlzIHN0aWxsIGZpcmVzIG9uY2hhbmdlIGEgc2Vjb25kIHRpbWUgZm9yIGNoZWNrL3JhZGlvIGFmdGVyIGJsdXIuXHJcblx0XHRcdFx0aWYgKCB0aGlzLnR5cGUgPT09IFwiY2hlY2tib3hcIiB8fCB0aGlzLnR5cGUgPT09IFwicmFkaW9cIiApIHtcclxuXHRcdFx0XHRcdGpRdWVyeS5ldmVudC5hZGQoIHRoaXMsIFwicHJvcGVydHljaGFuZ2UuX2NoYW5nZVwiLCBmdW5jdGlvbiggZXZlbnQgKSB7XHJcblx0XHRcdFx0XHRcdGlmICggZXZlbnQub3JpZ2luYWxFdmVudC5wcm9wZXJ0eU5hbWUgPT09IFwiY2hlY2tlZFwiICkge1xyXG5cdFx0XHRcdFx0XHRcdHRoaXMuX2p1c3RfY2hhbmdlZCA9IHRydWU7XHJcblx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdH0pO1xyXG5cdFx0XHRcdFx0alF1ZXJ5LmV2ZW50LmFkZCggdGhpcywgXCJjbGljay5fY2hhbmdlXCIsIGZ1bmN0aW9uKCBldmVudCApIHtcclxuXHRcdFx0XHRcdFx0aWYgKCB0aGlzLl9qdXN0X2NoYW5nZWQgJiYgIWV2ZW50LmlzVHJpZ2dlciApIHtcclxuXHRcdFx0XHRcdFx0XHR0aGlzLl9qdXN0X2NoYW5nZWQgPSBmYWxzZTtcclxuXHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHQvLyBBbGxvdyB0cmlnZ2VyZWQsIHNpbXVsYXRlZCBjaGFuZ2UgZXZlbnRzICgjMTE1MDApXHJcblx0XHRcdFx0XHRcdGpRdWVyeS5ldmVudC5zaW11bGF0ZSggXCJjaGFuZ2VcIiwgdGhpcywgZXZlbnQsIHRydWUgKTtcclxuXHRcdFx0XHRcdH0pO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XHJcblx0XHRcdH1cclxuXHRcdFx0Ly8gRGVsZWdhdGVkIGV2ZW50OyBsYXp5LWFkZCBhIGNoYW5nZSBoYW5kbGVyIG9uIGRlc2NlbmRhbnQgaW5wdXRzXHJcblx0XHRcdGpRdWVyeS5ldmVudC5hZGQoIHRoaXMsIFwiYmVmb3JlYWN0aXZhdGUuX2NoYW5nZVwiLCBmdW5jdGlvbiggZSApIHtcclxuXHRcdFx0XHR2YXIgZWxlbSA9IGUudGFyZ2V0O1xyXG5cclxuXHRcdFx0XHRpZiAoIHJmb3JtRWxlbXMudGVzdCggZWxlbS5ub2RlTmFtZSApICYmICFqUXVlcnkuX2RhdGEoIGVsZW0sIFwiY2hhbmdlQnViYmxlc1wiICkgKSB7XHJcblx0XHRcdFx0XHRqUXVlcnkuZXZlbnQuYWRkKCBlbGVtLCBcImNoYW5nZS5fY2hhbmdlXCIsIGZ1bmN0aW9uKCBldmVudCApIHtcclxuXHRcdFx0XHRcdFx0aWYgKCB0aGlzLnBhcmVudE5vZGUgJiYgIWV2ZW50LmlzU2ltdWxhdGVkICYmICFldmVudC5pc1RyaWdnZXIgKSB7XHJcblx0XHRcdFx0XHRcdFx0alF1ZXJ5LmV2ZW50LnNpbXVsYXRlKCBcImNoYW5nZVwiLCB0aGlzLnBhcmVudE5vZGUsIGV2ZW50LCB0cnVlICk7XHJcblx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdH0pO1xyXG5cdFx0XHRcdFx0alF1ZXJ5Ll9kYXRhKCBlbGVtLCBcImNoYW5nZUJ1YmJsZXNcIiwgdHJ1ZSApO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fSk7XHJcblx0XHR9LFxyXG5cclxuXHRcdGhhbmRsZTogZnVuY3Rpb24oIGV2ZW50ICkge1xyXG5cdFx0XHR2YXIgZWxlbSA9IGV2ZW50LnRhcmdldDtcclxuXHJcblx0XHRcdC8vIFN3YWxsb3cgbmF0aXZlIGNoYW5nZSBldmVudHMgZnJvbSBjaGVja2JveC9yYWRpbywgd2UgYWxyZWFkeSB0cmlnZ2VyZWQgdGhlbSBhYm92ZVxyXG5cdFx0XHRpZiAoIHRoaXMgIT09IGVsZW0gfHwgZXZlbnQuaXNTaW11bGF0ZWQgfHwgZXZlbnQuaXNUcmlnZ2VyIHx8IChlbGVtLnR5cGUgIT09IFwicmFkaW9cIiAmJiBlbGVtLnR5cGUgIT09IFwiY2hlY2tib3hcIikgKSB7XHJcblx0XHRcdFx0cmV0dXJuIGV2ZW50LmhhbmRsZU9iai5oYW5kbGVyLmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKTtcclxuXHRcdFx0fVxyXG5cdFx0fSxcclxuXHJcblx0XHR0ZWFyZG93bjogZnVuY3Rpb24oKSB7XHJcblx0XHRcdGpRdWVyeS5ldmVudC5yZW1vdmUoIHRoaXMsIFwiLl9jaGFuZ2VcIiApO1xyXG5cclxuXHRcdFx0cmV0dXJuICFyZm9ybUVsZW1zLnRlc3QoIHRoaXMubm9kZU5hbWUgKTtcclxuXHRcdH1cclxuXHR9O1xyXG59XHJcblxyXG4vLyBDcmVhdGUgXCJidWJibGluZ1wiIGZvY3VzIGFuZCBibHVyIGV2ZW50c1xyXG5pZiAoICFzdXBwb3J0LmZvY3VzaW5CdWJibGVzICkge1xyXG5cdGpRdWVyeS5lYWNoKHsgZm9jdXM6IFwiZm9jdXNpblwiLCBibHVyOiBcImZvY3Vzb3V0XCIgfSwgZnVuY3Rpb24oIG9yaWcsIGZpeCApIHtcclxuXHJcblx0XHQvLyBBdHRhY2ggYSBzaW5nbGUgY2FwdHVyaW5nIGhhbmRsZXIgb24gdGhlIGRvY3VtZW50IHdoaWxlIHNvbWVvbmUgd2FudHMgZm9jdXNpbi9mb2N1c291dFxyXG5cdFx0dmFyIGhhbmRsZXIgPSBmdW5jdGlvbiggZXZlbnQgKSB7XHJcblx0XHRcdFx0alF1ZXJ5LmV2ZW50LnNpbXVsYXRlKCBmaXgsIGV2ZW50LnRhcmdldCwgalF1ZXJ5LmV2ZW50LmZpeCggZXZlbnQgKSwgdHJ1ZSApO1xyXG5cdFx0XHR9O1xyXG5cclxuXHRcdGpRdWVyeS5ldmVudC5zcGVjaWFsWyBmaXggXSA9IHtcclxuXHRcdFx0c2V0dXA6IGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRcdHZhciBkb2MgPSB0aGlzLm93bmVyRG9jdW1lbnQgfHwgdGhpcyxcclxuXHRcdFx0XHRcdGF0dGFjaGVzID0galF1ZXJ5Ll9kYXRhKCBkb2MsIGZpeCApO1xyXG5cclxuXHRcdFx0XHRpZiAoICFhdHRhY2hlcyApIHtcclxuXHRcdFx0XHRcdGRvYy5hZGRFdmVudExpc3RlbmVyKCBvcmlnLCBoYW5kbGVyLCB0cnVlICk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHRcdGpRdWVyeS5fZGF0YSggZG9jLCBmaXgsICggYXR0YWNoZXMgfHwgMCApICsgMSApO1xyXG5cdFx0XHR9LFxyXG5cdFx0XHR0ZWFyZG93bjogZnVuY3Rpb24oKSB7XHJcblx0XHRcdFx0dmFyIGRvYyA9IHRoaXMub3duZXJEb2N1bWVudCB8fCB0aGlzLFxyXG5cdFx0XHRcdFx0YXR0YWNoZXMgPSBqUXVlcnkuX2RhdGEoIGRvYywgZml4ICkgLSAxO1xyXG5cclxuXHRcdFx0XHRpZiAoICFhdHRhY2hlcyApIHtcclxuXHRcdFx0XHRcdGRvYy5yZW1vdmVFdmVudExpc3RlbmVyKCBvcmlnLCBoYW5kbGVyLCB0cnVlICk7XHJcblx0XHRcdFx0XHRqUXVlcnkuX3JlbW92ZURhdGEoIGRvYywgZml4ICk7XHJcblx0XHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRcdGpRdWVyeS5fZGF0YSggZG9jLCBmaXgsIGF0dGFjaGVzICk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHR9O1xyXG5cdH0pO1xyXG59XHJcblxyXG5qUXVlcnkuZm4uZXh0ZW5kKHtcclxuXHJcblx0b246IGZ1bmN0aW9uKCB0eXBlcywgc2VsZWN0b3IsIGRhdGEsIGZuLCAvKklOVEVSTkFMKi8gb25lICkge1xyXG5cdFx0dmFyIHR5cGUsIG9yaWdGbjtcclxuXHJcblx0XHQvLyBUeXBlcyBjYW4gYmUgYSBtYXAgb2YgdHlwZXMvaGFuZGxlcnNcclxuXHRcdGlmICggdHlwZW9mIHR5cGVzID09PSBcIm9iamVjdFwiICkge1xyXG5cdFx0XHQvLyAoIHR5cGVzLU9iamVjdCwgc2VsZWN0b3IsIGRhdGEgKVxyXG5cdFx0XHRpZiAoIHR5cGVvZiBzZWxlY3RvciAhPT0gXCJzdHJpbmdcIiApIHtcclxuXHRcdFx0XHQvLyAoIHR5cGVzLU9iamVjdCwgZGF0YSApXHJcblx0XHRcdFx0ZGF0YSA9IGRhdGEgfHwgc2VsZWN0b3I7XHJcblx0XHRcdFx0c2VsZWN0b3IgPSB1bmRlZmluZWQ7XHJcblx0XHRcdH1cclxuXHRcdFx0Zm9yICggdHlwZSBpbiB0eXBlcyApIHtcclxuXHRcdFx0XHR0aGlzLm9uKCB0eXBlLCBzZWxlY3RvciwgZGF0YSwgdHlwZXNbIHR5cGUgXSwgb25lICk7XHJcblx0XHRcdH1cclxuXHRcdFx0cmV0dXJuIHRoaXM7XHJcblx0XHR9XHJcblxyXG5cdFx0aWYgKCBkYXRhID09IG51bGwgJiYgZm4gPT0gbnVsbCApIHtcclxuXHRcdFx0Ly8gKCB0eXBlcywgZm4gKVxyXG5cdFx0XHRmbiA9IHNlbGVjdG9yO1xyXG5cdFx0XHRkYXRhID0gc2VsZWN0b3IgPSB1bmRlZmluZWQ7XHJcblx0XHR9IGVsc2UgaWYgKCBmbiA9PSBudWxsICkge1xyXG5cdFx0XHRpZiAoIHR5cGVvZiBzZWxlY3RvciA9PT0gXCJzdHJpbmdcIiApIHtcclxuXHRcdFx0XHQvLyAoIHR5cGVzLCBzZWxlY3RvciwgZm4gKVxyXG5cdFx0XHRcdGZuID0gZGF0YTtcclxuXHRcdFx0XHRkYXRhID0gdW5kZWZpbmVkO1xyXG5cdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdC8vICggdHlwZXMsIGRhdGEsIGZuIClcclxuXHRcdFx0XHRmbiA9IGRhdGE7XHJcblx0XHRcdFx0ZGF0YSA9IHNlbGVjdG9yO1xyXG5cdFx0XHRcdHNlbGVjdG9yID0gdW5kZWZpbmVkO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0XHRpZiAoIGZuID09PSBmYWxzZSApIHtcclxuXHRcdFx0Zm4gPSByZXR1cm5GYWxzZTtcclxuXHRcdH0gZWxzZSBpZiAoICFmbiApIHtcclxuXHRcdFx0cmV0dXJuIHRoaXM7XHJcblx0XHR9XHJcblxyXG5cdFx0aWYgKCBvbmUgPT09IDEgKSB7XHJcblx0XHRcdG9yaWdGbiA9IGZuO1xyXG5cdFx0XHRmbiA9IGZ1bmN0aW9uKCBldmVudCApIHtcclxuXHRcdFx0XHQvLyBDYW4gdXNlIGFuIGVtcHR5IHNldCwgc2luY2UgZXZlbnQgY29udGFpbnMgdGhlIGluZm9cclxuXHRcdFx0XHRqUXVlcnkoKS5vZmYoIGV2ZW50ICk7XHJcblx0XHRcdFx0cmV0dXJuIG9yaWdGbi5hcHBseSggdGhpcywgYXJndW1lbnRzICk7XHJcblx0XHRcdH07XHJcblx0XHRcdC8vIFVzZSBzYW1lIGd1aWQgc28gY2FsbGVyIGNhbiByZW1vdmUgdXNpbmcgb3JpZ0ZuXHJcblx0XHRcdGZuLmd1aWQgPSBvcmlnRm4uZ3VpZCB8fCAoIG9yaWdGbi5ndWlkID0galF1ZXJ5Lmd1aWQrKyApO1xyXG5cdFx0fVxyXG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XHJcblx0XHRcdGpRdWVyeS5ldmVudC5hZGQoIHRoaXMsIHR5cGVzLCBmbiwgZGF0YSwgc2VsZWN0b3IgKTtcclxuXHRcdH0pO1xyXG5cdH0sXHJcblx0b25lOiBmdW5jdGlvbiggdHlwZXMsIHNlbGVjdG9yLCBkYXRhLCBmbiApIHtcclxuXHRcdHJldHVybiB0aGlzLm9uKCB0eXBlcywgc2VsZWN0b3IsIGRhdGEsIGZuLCAxICk7XHJcblx0fSxcclxuXHRvZmY6IGZ1bmN0aW9uKCB0eXBlcywgc2VsZWN0b3IsIGZuICkge1xyXG5cdFx0dmFyIGhhbmRsZU9iaiwgdHlwZTtcclxuXHRcdGlmICggdHlwZXMgJiYgdHlwZXMucHJldmVudERlZmF1bHQgJiYgdHlwZXMuaGFuZGxlT2JqICkge1xyXG5cdFx0XHQvLyAoIGV2ZW50ICkgIGRpc3BhdGNoZWQgalF1ZXJ5LkV2ZW50XHJcblx0XHRcdGhhbmRsZU9iaiA9IHR5cGVzLmhhbmRsZU9iajtcclxuXHRcdFx0alF1ZXJ5KCB0eXBlcy5kZWxlZ2F0ZVRhcmdldCApLm9mZihcclxuXHRcdFx0XHRoYW5kbGVPYmoubmFtZXNwYWNlID8gaGFuZGxlT2JqLm9yaWdUeXBlICsgXCIuXCIgKyBoYW5kbGVPYmoubmFtZXNwYWNlIDogaGFuZGxlT2JqLm9yaWdUeXBlLFxyXG5cdFx0XHRcdGhhbmRsZU9iai5zZWxlY3RvcixcclxuXHRcdFx0XHRoYW5kbGVPYmouaGFuZGxlclxyXG5cdFx0XHQpO1xyXG5cdFx0XHRyZXR1cm4gdGhpcztcclxuXHRcdH1cclxuXHRcdGlmICggdHlwZW9mIHR5cGVzID09PSBcIm9iamVjdFwiICkge1xyXG5cdFx0XHQvLyAoIHR5cGVzLW9iamVjdCBbLCBzZWxlY3Rvcl0gKVxyXG5cdFx0XHRmb3IgKCB0eXBlIGluIHR5cGVzICkge1xyXG5cdFx0XHRcdHRoaXMub2ZmKCB0eXBlLCBzZWxlY3RvciwgdHlwZXNbIHR5cGUgXSApO1xyXG5cdFx0XHR9XHJcblx0XHRcdHJldHVybiB0aGlzO1xyXG5cdFx0fVxyXG5cdFx0aWYgKCBzZWxlY3RvciA9PT0gZmFsc2UgfHwgdHlwZW9mIHNlbGVjdG9yID09PSBcImZ1bmN0aW9uXCIgKSB7XHJcblx0XHRcdC8vICggdHlwZXMgWywgZm5dIClcclxuXHRcdFx0Zm4gPSBzZWxlY3RvcjtcclxuXHRcdFx0c2VsZWN0b3IgPSB1bmRlZmluZWQ7XHJcblx0XHR9XHJcblx0XHRpZiAoIGZuID09PSBmYWxzZSApIHtcclxuXHRcdFx0Zm4gPSByZXR1cm5GYWxzZTtcclxuXHRcdH1cclxuXHRcdHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oKSB7XHJcblx0XHRcdGpRdWVyeS5ldmVudC5yZW1vdmUoIHRoaXMsIHR5cGVzLCBmbiwgc2VsZWN0b3IgKTtcclxuXHRcdH0pO1xyXG5cdH0sXHJcblxyXG5cdHRyaWdnZXI6IGZ1bmN0aW9uKCB0eXBlLCBkYXRhICkge1xyXG5cdFx0cmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbigpIHtcclxuXHRcdFx0alF1ZXJ5LmV2ZW50LnRyaWdnZXIoIHR5cGUsIGRhdGEsIHRoaXMgKTtcclxuXHRcdH0pO1xyXG5cdH0sXHJcblx0dHJpZ2dlckhhbmRsZXI6IGZ1bmN0aW9uKCB0eXBlLCBkYXRhICkge1xyXG5cdFx0dmFyIGVsZW0gPSB0aGlzWzBdO1xyXG5cdFx0aWYgKCBlbGVtICkge1xyXG5cdFx0XHRyZXR1cm4galF1ZXJ5LmV2ZW50LnRyaWdnZXIoIHR5cGUsIGRhdGEsIGVsZW0sIHRydWUgKTtcclxuXHRcdH1cclxuXHR9XHJcbn0pO1xyXG5cclxuXHJcbmZ1bmN0aW9uIGNyZWF0ZVNhZmVGcmFnbWVudCggZG9jdW1lbnQgKSB7XHJcblx0dmFyIGxpc3QgPSBub2RlTmFtZXMuc3BsaXQoIFwifFwiICksXHJcblx0XHRzYWZlRnJhZyA9IGRvY3VtZW50LmNyZWF0ZURvY3VtZW50RnJhZ21lbnQoKTtcclxuXHJcblx0aWYgKCBzYWZlRnJhZy5jcmVhdGVFbGVtZW50ICkge1xyXG5cdFx0d2hpbGUgKCBsaXN0Lmxlbmd0aCApIHtcclxuXHRcdFx0c2FmZUZyYWcuY3JlYXRlRWxlbWVudChcclxuXHRcdFx0XHRsaXN0LnBvcCgpXHJcblx0XHRcdCk7XHJcblx0XHR9XHJcblx0fVxyXG5cdHJldHVybiBzYWZlRnJhZztcclxufVxyXG5cclxudmFyIG5vZGVOYW1lcyA9IFwiYWJicnxhcnRpY2xlfGFzaWRlfGF1ZGlvfGJkaXxjYW52YXN8ZGF0YXxkYXRhbGlzdHxkZXRhaWxzfGZpZ2NhcHRpb258ZmlndXJlfGZvb3RlcnxcIiArXHJcblx0XHRcImhlYWRlcnxoZ3JvdXB8bWFya3xtZXRlcnxuYXZ8b3V0cHV0fHByb2dyZXNzfHNlY3Rpb258c3VtbWFyeXx0aW1lfHZpZGVvXCIsXHJcblx0cmlubGluZWpRdWVyeSA9IC8galF1ZXJ5XFxkKz1cIig/Om51bGx8XFxkKylcIi9nLFxyXG5cdHJub3NoaW1jYWNoZSA9IG5ldyBSZWdFeHAoXCI8KD86XCIgKyBub2RlTmFtZXMgKyBcIilbXFxcXHMvPl1cIiwgXCJpXCIpLFxyXG5cdHJsZWFkaW5nV2hpdGVzcGFjZSA9IC9eXFxzKy8sXHJcblx0cnhodG1sVGFnID0gLzwoPyFhcmVhfGJyfGNvbHxlbWJlZHxocnxpbWd8aW5wdXR8bGlua3xtZXRhfHBhcmFtKSgoW1xcdzpdKylbXj5dKilcXC8+L2dpLFxyXG5cdHJ0YWdOYW1lID0gLzwoW1xcdzpdKykvLFxyXG5cdHJ0Ym9keSA9IC88dGJvZHkvaSxcclxuXHRyaHRtbCA9IC88fCYjP1xcdys7LyxcclxuXHRybm9Jbm5lcmh0bWwgPSAvPCg/OnNjcmlwdHxzdHlsZXxsaW5rKS9pLFxyXG5cdC8vIGNoZWNrZWQ9XCJjaGVja2VkXCIgb3IgY2hlY2tlZFxyXG5cdHJjaGVja2VkID0gL2NoZWNrZWRcXHMqKD86W149XXw9XFxzKi5jaGVja2VkLikvaSxcclxuXHRyc2NyaXB0VHlwZSA9IC9eJHxcXC8oPzpqYXZhfGVjbWEpc2NyaXB0L2ksXHJcblx0cnNjcmlwdFR5cGVNYXNrZWQgPSAvXnRydWVcXC8oLiopLyxcclxuXHRyY2xlYW5TY3JpcHQgPSAvXlxccyo8ISg/OlxcW0NEQVRBXFxbfC0tKXwoPzpcXF1cXF18LS0pPlxccyokL2csXHJcblxyXG5cdC8vIFdlIGhhdmUgdG8gY2xvc2UgdGhlc2UgdGFncyB0byBzdXBwb3J0IFhIVE1MICgjMTMyMDApXHJcblx0d3JhcE1hcCA9IHtcclxuXHRcdG9wdGlvbjogWyAxLCBcIjxzZWxlY3QgbXVsdGlwbGU9J211bHRpcGxlJz5cIiwgXCI8L3NlbGVjdD5cIiBdLFxyXG5cdFx0bGVnZW5kOiBbIDEsIFwiPGZpZWxkc2V0PlwiLCBcIjwvZmllbGRzZXQ+XCIgXSxcclxuXHRcdGFyZWE6IFsgMSwgXCI8bWFwPlwiLCBcIjwvbWFwPlwiIF0sXHJcblx0XHRwYXJhbTogWyAxLCBcIjxvYmplY3Q+XCIsIFwiPC9vYmplY3Q+XCIgXSxcclxuXHRcdHRoZWFkOiBbIDEsIFwiPHRhYmxlPlwiLCBcIjwvdGFibGU+XCIgXSxcclxuXHRcdHRyOiBbIDIsIFwiPHRhYmxlPjx0Ym9keT5cIiwgXCI8L3Rib2R5PjwvdGFibGU+XCIgXSxcclxuXHRcdGNvbDogWyAyLCBcIjx0YWJsZT48dGJvZHk+PC90Ym9keT48Y29sZ3JvdXA+XCIsIFwiPC9jb2xncm91cD48L3RhYmxlPlwiIF0sXHJcblx0XHR0ZDogWyAzLCBcIjx0YWJsZT48dGJvZHk+PHRyPlwiLCBcIjwvdHI+PC90Ym9keT48L3RhYmxlPlwiIF0sXHJcblxyXG5cdFx0Ly8gSUU2LTggY2FuJ3Qgc2VyaWFsaXplIGxpbmssIHNjcmlwdCwgc3R5bGUsIG9yIGFueSBodG1sNSAoTm9TY29wZSkgdGFncyxcclxuXHRcdC8vIHVubGVzcyB3cmFwcGVkIGluIGEgZGl2IHdpdGggbm9uLWJyZWFraW5nIGNoYXJhY3RlcnMgaW4gZnJvbnQgb2YgaXQuXHJcblx0XHRfZGVmYXVsdDogc3VwcG9ydC5odG1sU2VyaWFsaXplID8gWyAwLCBcIlwiLCBcIlwiIF0gOiBbIDEsIFwiWDxkaXY+XCIsIFwiPC9kaXY+XCIgIF1cclxuXHR9LFxyXG5cdHNhZmVGcmFnbWVudCA9IGNyZWF0ZVNhZmVGcmFnbWVudCggZG9jdW1lbnQgKSxcclxuXHRmcmFnbWVudERpdiA9IHNhZmVGcmFnbWVudC5hcHBlbmRDaGlsZCggZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKSApO1xyXG5cclxud3JhcE1hcC5vcHRncm91cCA9IHdyYXBNYXAub3B0aW9uO1xyXG53cmFwTWFwLnRib2R5ID0gd3JhcE1hcC50Zm9vdCA9IHdyYXBNYXAuY29sZ3JvdXAgPSB3cmFwTWFwLmNhcHRpb24gPSB3cmFwTWFwLnRoZWFkO1xyXG53cmFwTWFwLnRoID0gd3JhcE1hcC50ZDtcclxuXHJcbmZ1bmN0aW9uIGdldEFsbCggY29udGV4dCwgdGFnICkge1xyXG5cdHZhciBlbGVtcywgZWxlbSxcclxuXHRcdGkgPSAwLFxyXG5cdFx0Zm91bmQgPSB0eXBlb2YgY29udGV4dC5nZXRFbGVtZW50c0J5VGFnTmFtZSAhPT0gc3RydW5kZWZpbmVkID8gY29udGV4dC5nZXRFbGVtZW50c0J5VGFnTmFtZSggdGFnIHx8IFwiKlwiICkgOlxyXG5cdFx0XHR0eXBlb2YgY29udGV4dC5xdWVyeVNlbGVjdG9yQWxsICE9PSBzdHJ1bmRlZmluZWQgPyBjb250ZXh0LnF1ZXJ5U2VsZWN0b3JBbGwoIHRhZyB8fCBcIipcIiApIDpcclxuXHRcdFx0dW5kZWZpbmVkO1xyXG5cclxuXHRpZiAoICFmb3VuZCApIHtcclxuXHRcdGZvciAoIGZvdW5kID0gW10sIGVsZW1zID0gY29udGV4dC5jaGlsZE5vZGVzIHx8IGNvbnRleHQ7IChlbGVtID0gZWxlbXNbaV0pICE9IG51bGw7IGkrKyApIHtcclxuXHRcdFx0aWYgKCAhdGFnIHx8IGpRdWVyeS5ub2RlTmFtZSggZWxlbSwgdGFnICkgKSB7XHJcblx0XHRcdFx0Zm91bmQucHVzaCggZWxlbSApO1xyXG5cdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdGpRdWVyeS5tZXJnZSggZm91bmQsIGdldEFsbCggZWxlbSwgdGFnICkgKTtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdH1cclxuXHJcblx0cmV0dXJuIHRhZyA9PT0gdW5kZWZpbmVkIHx8IHRhZyAmJiBqUXVlcnkubm9kZU5hbWUoIGNvbnRleHQsIHRhZyApID9cclxuXHRcdGpRdWVyeS5tZXJnZSggWyBjb250ZXh0IF0sIGZvdW5kICkgOlxyXG5cdFx0Zm91bmQ7XHJcbn1cclxuXHJcbi8vIFVzZWQgaW4gYnVpbGRGcmFnbWVudCwgZml4ZXMgdGhlIGRlZmF1bHRDaGVja2VkIHByb3BlcnR5XHJcbmZ1bmN0aW9uIGZpeERlZmF1bHRDaGVja2VkKCBlbGVtICkge1xyXG5cdGlmICggcmNoZWNrYWJsZVR5cGUudGVzdCggZWxlbS50eXBlICkgKSB7XHJcblx0XHRlbGVtLmRlZmF1bHRDaGVja2VkID0gZWxlbS5jaGVja2VkO1xyXG5cdH1cclxufVxyXG5cclxuLy8gU3VwcG9ydDogSUU8OFxyXG4vLyBNYW5pcHVsYXRpbmcgdGFibGVzIHJlcXVpcmVzIGEgdGJvZHlcclxuZnVuY3Rpb24gbWFuaXB1bGF0aW9uVGFyZ2V0KCBlbGVtLCBjb250ZW50ICkge1xyXG5cdHJldHVybiBqUXVlcnkubm9kZU5hbWUoIGVsZW0sIFwidGFibGVcIiApICYmXHJcblx0XHRqUXVlcnkubm9kZU5hbWUoIGNvbnRlbnQubm9kZVR5cGUgIT09IDExID8gY29udGVudCA6IGNvbnRlbnQuZmlyc3RDaGlsZCwgXCJ0clwiICkgP1xyXG5cclxuXHRcdGVsZW0uZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJ0Ym9keVwiKVswXSB8fFxyXG5cdFx0XHRlbGVtLmFwcGVuZENoaWxkKCBlbGVtLm93bmVyRG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInRib2R5XCIpICkgOlxyXG5cdFx0ZWxlbTtcclxufVxyXG5cclxuLy8gUmVwbGFjZS9yZXN0b3JlIHRoZSB0eXBlIGF0dHJpYnV0ZSBvZiBzY3JpcHQgZWxlbWVudHMgZm9yIHNhZmUgRE9NIG1hbmlwdWxhdGlvblxyXG5mdW5jdGlvbiBkaXNhYmxlU2NyaXB0KCBlbGVtICkge1xyXG5cdGVsZW0udHlwZSA9IChqUXVlcnkuZmluZC5hdHRyKCBlbGVtLCBcInR5cGVcIiApICE9PSBudWxsKSArIFwiL1wiICsgZWxlbS50eXBlO1xyXG5cdHJldHVybiBlbGVtO1xyXG59XHJcbmZ1bmN0aW9uIHJlc3RvcmVTY3JpcHQoIGVsZW0gKSB7XHJcblx0dmFyIG1hdGNoID0gcnNjcmlwdFR5cGVNYXNrZWQuZXhlYyggZWxlbS50eXBlICk7XHJcblx0aWYgKCBtYXRjaCApIHtcclxuXHRcdGVsZW0udHlwZSA9IG1hdGNoWzFdO1xyXG5cdH0gZWxzZSB7XHJcblx0XHRlbGVtLnJlbW92ZUF0dHJpYnV0ZShcInR5cGVcIik7XHJcblx0fVxyXG5cdHJldHVybiBlbGVtO1xyXG59XHJcblxyXG4vLyBNYXJrIHNjcmlwdHMgYXMgaGF2aW5nIGFscmVhZHkgYmVlbiBldmFsdWF0ZWRcclxuZnVuY3Rpb24gc2V0R2xvYmFsRXZhbCggZWxlbXMsIHJlZkVsZW1lbnRzICkge1xyXG5cdHZhciBlbGVtLFxyXG5cdFx0aSA9IDA7XHJcblx0Zm9yICggOyAoZWxlbSA9IGVsZW1zW2ldKSAhPSBudWxsOyBpKysgKSB7XHJcblx0XHRqUXVlcnkuX2RhdGEoIGVsZW0sIFwiZ2xvYmFsRXZhbFwiLCAhcmVmRWxlbWVudHMgfHwgalF1ZXJ5Ll9kYXRhKCByZWZFbGVtZW50c1tpXSwgXCJnbG9iYWxFdmFsXCIgKSApO1xyXG5cdH1cclxufVxyXG5cclxuZnVuY3Rpb24gY2xvbmVDb3B5RXZlbnQoIHNyYywgZGVzdCApIHtcclxuXHJcblx0aWYgKCBkZXN0Lm5vZGVUeXBlICE9PSAxIHx8ICFqUXVlcnkuaGFzRGF0YSggc3JjICkgKSB7XHJcblx0XHRyZXR1cm47XHJcblx0fVxyXG5cclxuXHR2YXIgdHlwZSwgaSwgbCxcclxuXHRcdG9sZERhdGEgPSBqUXVlcnkuX2RhdGEoIHNyYyApLFxyXG5cdFx0Y3VyRGF0YSA9IGpRdWVyeS5fZGF0YSggZGVzdCwgb2xkRGF0YSApLFxyXG5cdFx0ZXZlbnRzID0gb2xkRGF0YS5ldmVudHM7XHJcblxyXG5cdGlmICggZXZlbnRzICkge1xyXG5cdFx0ZGVsZXRlIGN1ckRhdGEuaGFuZGxlO1xyXG5cdFx0Y3VyRGF0YS5ldmVudHMgPSB7fTtcclxuXHJcblx0XHRmb3IgKCB0eXBlIGluIGV2ZW50cyApIHtcclxuXHRcdFx0Zm9yICggaSA9IDAsIGwgPSBldmVudHNbIHR5cGUgXS5sZW5ndGg7IGkgPCBsOyBpKysgKSB7XHJcblx0XHRcdFx0alF1ZXJ5LmV2ZW50LmFkZCggZGVzdCwgdHlwZSwgZXZlbnRzWyB0eXBlIF1bIGkgXSApO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0fVxyXG5cclxuXHQvLyBtYWtlIHRoZSBjbG9uZWQgcHVibGljIGRhdGEgb2JqZWN0IGEgY29weSBmcm9tIHRoZSBvcmlnaW5hbFxyXG5cdGlmICggY3VyRGF0YS5kYXRhICkge1xyXG5cdFx0Y3VyRGF0YS5kYXRhID0galF1ZXJ5LmV4dGVuZCgge30sIGN1ckRhdGEuZGF0YSApO1xyXG5cdH1cclxufVxyXG5cclxuZnVuY3Rpb24gZml4Q2xvbmVOb2RlSXNzdWVzKCBzcmMsIGRlc3QgKSB7XHJcblx0dmFyIG5vZGVOYW1lLCBlLCBkYXRhO1xyXG5cclxuXHQvLyBXZSBkbyBub3QgbmVlZCB0byBkbyBhbnl0aGluZyBmb3Igbm9uLUVsZW1lbnRzXHJcblx0aWYgKCBkZXN0Lm5vZGVUeXBlICE9PSAxICkge1xyXG5cdFx0cmV0dXJuO1xyXG5cdH1cclxuXHJcblx0bm9kZU5hbWUgPSBkZXN0Lm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7XHJcblxyXG5cdC8vIElFNi04IGNvcGllcyBldmVudHMgYm91bmQgdmlhIGF0dGFjaEV2ZW50IHdoZW4gdXNpbmcgY2xvbmVOb2RlLlxyXG5cdGlmICggIXN1cHBvcnQubm9DbG9uZUV2ZW50ICYmIGRlc3RbIGpRdWVyeS5leHBhbmRvIF0gKSB7XHJcblx0XHRkYXRhID0galF1ZXJ5Ll9kYXRhKCBkZXN0ICk7XHJcblxyXG5cdFx0Zm9yICggZSBpbiBkYXRhLmV2ZW50cyApIHtcclxuXHRcdFx0alF1ZXJ5LnJlbW92ZUV2ZW50KCBkZXN0LCBlLCBkYXRhLmhhbmRsZSApO1xyXG5cdFx0fVxyXG5cclxuXHRcdC8vIEV2ZW50IGRhdGEgZ2V0cyByZWZlcmVuY2VkIGluc3RlYWQgb2YgY29waWVkIGlmIHRoZSBleHBhbmRvIGdldHMgY29waWVkIHRvb1xyXG5cdFx0ZGVzdC5yZW1vdmVBdHRyaWJ1dGUoIGpRdWVyeS5leHBhbmRvICk7XHJcblx0fVxyXG5cclxuXHQvLyBJRSBibGFua3MgY29udGVudHMgd2hlbiBjbG9uaW5nIHNjcmlwdHMsIGFuZCB0cmllcyB0byBldmFsdWF0ZSBuZXdseS1zZXQgdGV4dFxyXG5cdGlmICggbm9kZU5hbWUgPT09IFwic2NyaXB0XCIgJiYgZGVzdC50ZXh0ICE9PSBzcmMudGV4dCApIHtcclxuXHRcdGRpc2FibGVTY3JpcHQoIGRlc3QgKS50ZXh0ID0gc3JjLnRleHQ7XHJcblx0XHRyZXN0b3JlU2NyaXB0KCBkZXN0ICk7XHJcblxyXG5cdC8vIElFNi0xMCBpbXByb3Blcmx5IGNsb25lcyBjaGlsZHJlbiBvZiBvYmplY3QgZWxlbWVudHMgdXNpbmcgY2xhc3NpZC5cclxuXHQvLyBJRTEwIHRocm93cyBOb01vZGlmaWNhdGlvbkFsbG93ZWRFcnJvciBpZiBwYXJlbnQgaXMgbnVsbCwgIzEyMTMyLlxyXG5cdH0gZWxzZSBpZiAoIG5vZGVOYW1lID09PSBcIm9iamVjdFwiICkge1xyXG5cdFx0aWYgKCBkZXN0LnBhcmVudE5vZGUgKSB7XHJcblx0XHRcdGRlc3Qub3V0ZXJIVE1MID0gc3JjLm91dGVySFRNTDtcclxuXHRcdH1cclxuXHJcblx0XHQvLyBUaGlzIHBhdGggYXBwZWFycyB1bmF2b2lkYWJsZSBmb3IgSUU5LiBXaGVuIGNsb25pbmcgYW4gb2JqZWN0XHJcblx0XHQvLyBlbGVtZW50IGluIElFOSwgdGhlIG91dGVySFRNTCBzdHJhdGVneSBhYm92ZSBpcyBub3Qgc3VmZmljaWVudC5cclxuXHRcdC8vIElmIHRoZSBzcmMgaGFzIGlubmVySFRNTCBhbmQgdGhlIGRlc3RpbmF0aW9uIGRvZXMgbm90LFxyXG5cdFx0Ly8gY29weSB0aGUgc3JjLmlubmVySFRNTCBpbnRvIHRoZSBkZXN0LmlubmVySFRNTC4gIzEwMzI0XHJcblx0XHRpZiAoIHN1cHBvcnQuaHRtbDVDbG9uZSAmJiAoIHNyYy5pbm5lckhUTUwgJiYgIWpRdWVyeS50cmltKGRlc3QuaW5uZXJIVE1MKSApICkge1xyXG5cdFx0XHRkZXN0LmlubmVySFRNTCA9IHNyYy5pbm5lckhUTUw7XHJcblx0XHR9XHJcblxyXG5cdH0gZWxzZSBpZiAoIG5vZGVOYW1lID09PSBcImlucHV0XCIgJiYgcmNoZWNrYWJsZVR5cGUudGVzdCggc3JjLnR5cGUgKSApIHtcclxuXHRcdC8vIElFNi04IGZhaWxzIHRvIHBlcnNpc3QgdGhlIGNoZWNrZWQgc3RhdGUgb2YgYSBjbG9uZWQgY2hlY2tib3hcclxuXHRcdC8vIG9yIHJhZGlvIGJ1dHRvbi4gV29yc2UsIElFNi03IGZhaWwgdG8gZ2l2ZSB0aGUgY2xvbmVkIGVsZW1lbnRcclxuXHRcdC8vIGEgY2hlY2tlZCBhcHBlYXJhbmNlIGlmIHRoZSBkZWZhdWx0Q2hlY2tlZCB2YWx1ZSBpc24ndCBhbHNvIHNldFxyXG5cclxuXHRcdGRlc3QuZGVmYXVsdENoZWNrZWQgPSBkZXN0LmNoZWNrZWQgPSBzcmMuY2hlY2tlZDtcclxuXHJcblx0XHQvLyBJRTYtNyBnZXQgY29uZnVzZWQgYW5kIGVuZCB1cCBzZXR0aW5nIHRoZSB2YWx1ZSBvZiBhIGNsb25lZFxyXG5cdFx0Ly8gY2hlY2tib3gvcmFkaW8gYnV0dG9uIHRvIGFuIGVtcHR5IHN0cmluZyBpbnN0ZWFkIG9mIFwib25cIlxyXG5cdFx0aWYgKCBkZXN0LnZhbHVlICE9PSBzcmMudmFsdWUgKSB7XHJcblx0XHRcdGRlc3QudmFsdWUgPSBzcmMudmFsdWU7XHJcblx0XHR9XHJcblxyXG5cdC8vIElFNi04IGZhaWxzIHRvIHJldHVybiB0aGUgc2VsZWN0ZWQgb3B0aW9uIHRvIHRoZSBkZWZhdWx0IHNlbGVjdGVkXHJcblx0Ly8gc3RhdGUgd2hlbiBjbG9uaW5nIG9wdGlvbnNcclxuXHR9IGVsc2UgaWYgKCBub2RlTmFtZSA9PT0gXCJvcHRpb25cIiApIHtcclxuXHRcdGRlc3QuZGVmYXVsdFNlbGVjdGVkID0gZGVzdC5zZWxlY3RlZCA9IHNyYy5kZWZhdWx0U2VsZWN0ZWQ7XHJcblxyXG5cdC8vIElFNi04IGZhaWxzIHRvIHNldCB0aGUgZGVmYXVsdFZhbHVlIHRvIHRoZSBjb3JyZWN0IHZhbHVlIHdoZW5cclxuXHQvLyBjbG9uaW5nIG90aGVyIHR5cGVzIG9mIGlucHV0IGZpZWxkc1xyXG5cdH0gZWxzZSBpZiAoIG5vZGVOYW1lID09PSBcImlucHV0XCIgfHwgbm9kZU5hbWUgPT09IFwidGV4dGFyZWFcIiApIHtcclxuXHRcdGRlc3QuZGVmYXVsdFZhbHVlID0gc3JjLmRlZmF1bHRWYWx1ZTtcclxuXHR9XHJcbn1cclxuXHJcbmpRdWVyeS5leHRlbmQoe1xyXG5cdGNsb25lOiBmdW5jdGlvbiggZWxlbSwgZGF0YUFuZEV2ZW50cywgZGVlcERhdGFBbmRFdmVudHMgKSB7XHJcblx0XHR2YXIgZGVzdEVsZW1lbnRzLCBub2RlLCBjbG9uZSwgaSwgc3JjRWxlbWVudHMsXHJcblx0XHRcdGluUGFnZSA9IGpRdWVyeS5jb250YWlucyggZWxlbS5vd25lckRvY3VtZW50LCBlbGVtICk7XHJcblxyXG5cdFx0aWYgKCBzdXBwb3J0Lmh0bWw1Q2xvbmUgfHwgalF1ZXJ5LmlzWE1MRG9jKGVsZW0pIHx8ICFybm9zaGltY2FjaGUudGVzdCggXCI8XCIgKyBlbGVtLm5vZGVOYW1lICsgXCI+XCIgKSApIHtcclxuXHRcdFx0Y2xvbmUgPSBlbGVtLmNsb25lTm9kZSggdHJ1ZSApO1xyXG5cclxuXHRcdC8vIElFPD04IGRvZXMgbm90IHByb3Blcmx5IGNsb25lIGRldGFjaGVkLCB1bmtub3duIGVsZW1lbnQgbm9kZXNcclxuXHRcdH0gZWxzZSB7XHJcblx0XHRcdGZyYWdtZW50RGl2LmlubmVySFRNTCA9IGVsZW0ub3V0ZXJIVE1MO1xyXG5cdFx0XHRmcmFnbWVudERpdi5yZW1vdmVDaGlsZCggY2xvbmUgPSBmcmFnbWVudERpdi5maXJzdENoaWxkICk7XHJcblx0XHR9XHJcblxyXG5cdFx0aWYgKCAoIXN1cHBvcnQubm9DbG9uZUV2ZW50IHx8ICFzdXBwb3J0Lm5vQ2xvbmVDaGVja2VkKSAmJlxyXG5cdFx0XHRcdChlbGVtLm5vZGVUeXBlID09PSAxIHx8IGVsZW0ubm9kZVR5cGUgPT09IDExKSAmJiAhalF1ZXJ5LmlzWE1MRG9jKGVsZW0pICkge1xyXG5cclxuXHRcdFx0Ly8gV2UgZXNjaGV3IFNpenpsZSBoZXJlIGZvciBwZXJmb3JtYW5jZSByZWFzb25zOiBodHRwOi8vanNwZXJmLmNvbS9nZXRhbGwtdnMtc2l6emxlLzJcclxuXHRcdFx0ZGVzdEVsZW1lbnRzID0gZ2V0QWxsKCBjbG9uZSApO1xyXG5cdFx0XHRzcmNFbGVtZW50cyA9IGdldEFsbCggZWxlbSApO1xyXG5cclxuXHRcdFx0Ly8gRml4IGFsbCBJRSBjbG9uaW5nIGlzc3Vlc1xyXG5cdFx0XHRmb3IgKCBpID0gMDsgKG5vZGUgPSBzcmNFbGVtZW50c1tpXSkgIT0gbnVsbDsgKytpICkge1xyXG5cdFx0XHRcdC8vIEVuc3VyZSB0aGF0IHRoZSBkZXN0aW5hdGlvbiBub2RlIGlzIG5vdCBudWxsOyBGaXhlcyAjOTU4N1xyXG5cdFx0XHRcdGlmICggZGVzdEVsZW1lbnRzW2ldICkge1xyXG5cdFx0XHRcdFx0Zml4Q2xvbmVOb2RlSXNzdWVzKCBub2RlLCBkZXN0RWxlbWVudHNbaV0gKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHJcblx0XHQvLyBDb3B5IHRoZSBldmVudHMgZnJvbSB0aGUgb3JpZ2luYWwgdG8gdGhlIGNsb25lXHJcblx0XHRpZiAoIGRhdGFBbmRFdmVudHMgKSB7XHJcblx0XHRcdGlmICggZGVlcERhdGFBbmRFdmVudHMgKSB7XHJcblx0XHRcdFx0c3JjRWxlbWVudHMgPSBzcmNFbGVtZW50cyB8fCBnZXRBbGwoIGVsZW0gKTtcclxuXHRcdFx0XHRkZXN0RWxlbWVudHMgPSBkZXN0RWxlbWVudHMgfHwgZ2V0QWxsKCBjbG9uZSApO1xyXG5cclxuXHRcdFx0XHRmb3IgKCBpID0gMDsgKG5vZGUgPSBzcmNFbGVtZW50c1tpXSkgIT0gbnVsbDsgaSsrICkge1xyXG5cdFx0XHRcdFx0Y2xvbmVDb3B5RXZlbnQoIG5vZGUsIGRlc3RFbGVtZW50c1tpXSApO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRjbG9uZUNvcHlFdmVudCggZWxlbSwgY2xvbmUgKTtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cclxuXHRcdC8vIFByZXNlcnZlIHNjcmlwdCBldmFsdWF0aW9uIGhpc3RvcnlcclxuXHRcdGRlc3RFbGVtZW50cyA9IGdldEFsbCggY2xvbmUsIFwic2NyaXB0XCIgKTtcclxuXHRcdGlmICggZGVzdEVsZW1lbnRzLmxlbmd0aCA+IDAgKSB7XHJcblx0XHRcdHNldEdsb2JhbEV2YWwoIGRlc3RFbGVtZW50cywgIWluUGFnZSAmJiBnZXRBbGwoIGVsZW0sIFwic2NyaXB0XCIgKSApO1xyXG5cdFx0fVxyXG5cclxuXHRcdGRlc3RFbGVtZW50cyA9IHNyY0VsZW1lbnRzID0gbm9kZSA9IG51bGw7XHJcblxyXG5cdFx0Ly8gUmV0dXJuIHRoZSBjbG9uZWQgc2V0XHJcblx0XHRyZXR1cm4gY2xvbmU7XHJcblx0fSxcclxuXHJcblx0YnVpbGRGcmFnbWVudDogZnVuY3Rpb24oIGVsZW1zLCBjb250ZXh0LCBzY3JpcHRzLCBzZWxlY3Rpb24gKSB7XHJcblx0XHR2YXIgaiwgZWxlbSwgY29udGFpbnMsXHJcblx0XHRcdHRtcCwgdGFnLCB0Ym9keSwgd3JhcCxcclxuXHRcdFx0bCA9IGVsZW1zLmxlbmd0aCxcclxuXHJcblx0XHRcdC8vIEVuc3VyZSBhIHNhZmUgZnJhZ21lbnRcclxuXHRcdFx0c2FmZSA9IGNyZWF0ZVNhZmVGcmFnbWVudCggY29udGV4dCApLFxyXG5cclxuXHRcdFx0bm9kZXMgPSBbXSxcclxuXHRcdFx0aSA9IDA7XHJcblxyXG5cdFx0Zm9yICggOyBpIDwgbDsgaSsrICkge1xyXG5cdFx0XHRlbGVtID0gZWxlbXNbIGkgXTtcclxuXHJcblx0XHRcdGlmICggZWxlbSB8fCBlbGVtID09PSAwICkge1xyXG5cclxuXHRcdFx0XHQvLyBBZGQgbm9kZXMgZGlyZWN0bHlcclxuXHRcdFx0XHRpZiAoIGpRdWVyeS50eXBlKCBlbGVtICkgPT09IFwib2JqZWN0XCIgKSB7XHJcblx0XHRcdFx0XHRqUXVlcnkubWVyZ2UoIG5vZGVzLCBlbGVtLm5vZGVUeXBlID8gWyBlbGVtIF0gOiBlbGVtICk7XHJcblxyXG5cdFx0XHRcdC8vIENvbnZlcnQgbm9uLWh0bWwgaW50byBhIHRleHQgbm9kZVxyXG5cdFx0XHRcdH0gZWxzZSBpZiAoICFyaHRtbC50ZXN0KCBlbGVtICkgKSB7XHJcblx0XHRcdFx0XHRub2Rlcy5wdXNoKCBjb250ZXh0LmNyZWF0ZVRleHROb2RlKCBlbGVtICkgKTtcclxuXHJcblx0XHRcdFx0Ly8gQ29udmVydCBodG1sIGludG8gRE9NIG5vZGVzXHJcblx0XHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRcdHRtcCA9IHRtcCB8fCBzYWZlLmFwcGVuZENoaWxkKCBjb250ZXh0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIikgKTtcclxuXHJcblx0XHRcdFx0XHQvLyBEZXNlcmlhbGl6ZSBhIHN0YW5kYXJkIHJlcHJlc2VudGF0aW9uXHJcblx0XHRcdFx0XHR0YWcgPSAocnRhZ05hbWUuZXhlYyggZWxlbSApIHx8IFsgXCJcIiwgXCJcIiBdKVsgMSBdLnRvTG93ZXJDYXNlKCk7XHJcblx0XHRcdFx0XHR3cmFwID0gd3JhcE1hcFsgdGFnIF0gfHwgd3JhcE1hcC5fZGVmYXVsdDtcclxuXHJcblx0XHRcdFx0XHR0bXAuaW5uZXJIVE1MID0gd3JhcFsxXSArIGVsZW0ucmVwbGFjZSggcnhodG1sVGFnLCBcIjwkMT48LyQyPlwiICkgKyB3cmFwWzJdO1xyXG5cclxuXHRcdFx0XHRcdC8vIERlc2NlbmQgdGhyb3VnaCB3cmFwcGVycyB0byB0aGUgcmlnaHQgY29udGVudFxyXG5cdFx0XHRcdFx0aiA9IHdyYXBbMF07XHJcblx0XHRcdFx0XHR3aGlsZSAoIGotLSApIHtcclxuXHRcdFx0XHRcdFx0dG1wID0gdG1wLmxhc3RDaGlsZDtcclxuXHRcdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0XHQvLyBNYW51YWxseSBhZGQgbGVhZGluZyB3aGl0ZXNwYWNlIHJlbW92ZWQgYnkgSUVcclxuXHRcdFx0XHRcdGlmICggIXN1cHBvcnQubGVhZGluZ1doaXRlc3BhY2UgJiYgcmxlYWRpbmdXaGl0ZXNwYWNlLnRlc3QoIGVsZW0gKSApIHtcclxuXHRcdFx0XHRcdFx0bm9kZXMucHVzaCggY29udGV4dC5jcmVhdGVUZXh0Tm9kZSggcmxlYWRpbmdXaGl0ZXNwYWNlLmV4ZWMoIGVsZW0gKVswXSApICk7XHJcblx0XHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdFx0Ly8gUmVtb3ZlIElFJ3MgYXV0b2luc2VydGVkIDx0Ym9keT4gZnJvbSB0YWJsZSBmcmFnbWVudHNcclxuXHRcdFx0XHRcdGlmICggIXN1cHBvcnQudGJvZHkgKSB7XHJcblxyXG5cdFx0XHRcdFx0XHQvLyBTdHJpbmcgd2FzIGEgPHRhYmxlPiwgKm1heSogaGF2ZSBzcHVyaW91cyA8dGJvZHk+XHJcblx0XHRcdFx0XHRcdGVsZW0gPSB0YWcgPT09IFwidGFibGVcIiAmJiAhcnRib2R5LnRlc3QoIGVsZW0gKSA/XHJcblx0XHRcdFx0XHRcdFx0dG1wLmZpcnN0Q2hpbGQgOlxyXG5cclxuXHRcdFx0XHRcdFx0XHQvLyBTdHJpbmcgd2FzIGEgYmFyZSA8dGhlYWQ+IG9yIDx0Zm9vdD5cclxuXHRcdFx0XHRcdFx0XHR3cmFwWzFdID09PSBcIjx0YWJsZT5cIiAmJiAhcnRib2R5LnRlc3QoIGVsZW0gKSA/XHJcblx0XHRcdFx0XHRcdFx0XHR0bXAgOlxyXG5cdFx0XHRcdFx0XHRcdFx0MDtcclxuXHJcblx0XHRcdFx0XHRcdGogPSBlbGVtICYmIGVsZW0uY2hpbGROb2Rlcy5sZW5ndGg7XHJcblx0XHRcdFx0XHRcdHdoaWxlICggai0tICkge1xyXG5cdFx0XHRcdFx0XHRcdGlmICggalF1ZXJ5Lm5vZGVOYW1lKCAodGJvZHkgPSBlbGVtLmNoaWxkTm9kZXNbal0pLCBcInRib2R5XCIgKSAmJiAhdGJvZHkuY2hpbGROb2Rlcy5sZW5ndGggKSB7XHJcblx0XHRcdFx0XHRcdFx0XHRlbGVtLnJlbW92ZUNoaWxkKCB0Ym9keSApO1xyXG5cdFx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRcdGpRdWVyeS5tZXJnZSggbm9kZXMsIHRtcC5jaGlsZE5vZGVzICk7XHJcblxyXG5cdFx0XHRcdFx0Ly8gRml4ICMxMjM5MiBmb3IgV2ViS2l0IGFuZCBJRSA+IDlcclxuXHRcdFx0XHRcdHRtcC50ZXh0Q29udGVudCA9IFwiXCI7XHJcblxyXG5cdFx0XHRcdFx0Ly8gRml4ICMxMjM5MiBmb3Igb2xkSUVcclxuXHRcdFx0XHRcdHdoaWxlICggdG1wLmZpcnN0Q2hpbGQgKSB7XHJcblx0XHRcdFx0XHRcdHRtcC5yZW1vdmVDaGlsZCggdG1wLmZpcnN0Q2hpbGQgKTtcclxuXHRcdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0XHQvLyBSZW1lbWJlciB0aGUgdG9wLWxldmVsIGNvbnRhaW5lciBmb3IgcHJvcGVyIGNsZWFudXBcclxuXHRcdFx0XHRcdHRtcCA9IHNhZmUubGFzdENoaWxkO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cclxuXHRcdC8vIEZpeCAjMTEzNTY6IENsZWFyIGVsZW1lbnRzIGZyb20gZnJhZ21lbnRcclxuXHRcdGlmICggdG1wICkge1xyXG5cdFx0XHRzYWZlLnJlbW92ZUNoaWxkKCB0bXAgKTtcclxuXHRcdH1cclxuXHJcblx0XHQvLyBSZXNldCBkZWZhdWx0Q2hlY2tlZCBmb3IgYW55IHJhZGlvcyBhbmQgY2hlY2tib3hlc1xyXG5cdFx0Ly8gYWJvdXQgdG8gYmUgYXBwZW5kZWQgdG8gdGhlIERPTSBpbiBJRSA2LzcgKCM4MDYwKVxyXG5cdFx0aWYgKCAhc3VwcG9ydC5hcHBlbmRDaGVja2VkICkge1xyXG5cdFx0XHRqUXVlcnkuZ3JlcCggZ2V0QWxsKCBub2RlcywgXCJpbnB1dFwiICksIGZpeERlZmF1bHRDaGVja2VkICk7XHJcblx0XHR9XHJcblxyXG5cdFx0aSA9IDA7XHJcblx0XHR3aGlsZSAoIChlbGVtID0gbm9kZXNbIGkrKyBdKSApIHtcclxuXHJcblx0XHRcdC8vICM0MDg3IC0gSWYgb3JpZ2luIGFuZCBkZXN0aW5hdGlvbiBlbGVtZW50cyBhcmUgdGhlIHNhbWUsIGFuZCB0aGlzIGlzXHJcblx0XHRcdC8vIHRoYXQgZWxlbWVudCwgZG8gbm90IGRvIGFueXRoaW5nXHJcblx0XHRcdGlmICggc2VsZWN0aW9uICYmIGpRdWVyeS5pbkFycmF5KCBlbGVtLCBzZWxlY3Rpb24gKSAhPT0gLTEgKSB7XHJcblx0XHRcdFx0Y29udGludWU7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdGNvbnRhaW5zID0galF1ZXJ5LmNvbnRhaW5zKCBlbGVtLm93bmVyRG9jdW1lbnQsIGVsZW0gKTtcclxuXHJcblx0XHRcdC8vIEFwcGVuZCB0byBmcmFnbWVudFxyXG5cdFx0XHR0bXAgPSBnZXRBbGwoIHNhZmUuYXBwZW5kQ2hpbGQoIGVsZW0gKSwgXCJzY3JpcHRcIiApO1xyXG5cclxuXHRcdFx0Ly8gUHJlc2VydmUgc2NyaXB0IGV2YWx1YXRpb24gaGlzdG9yeVxyXG5cdFx0XHRpZiAoIGNvbnRhaW5zICkge1xyXG5cdFx0XHRcdHNldEdsb2JhbEV2YWwoIHRtcCApO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHQvLyBDYXB0dXJlIGV4ZWN1dGFibGVzXHJcblx0XHRcdGlmICggc2NyaXB0cyApIHtcclxuXHRcdFx0XHRqID0gMDtcclxuXHRcdFx0XHR3aGlsZSAoIChlbGVtID0gdG1wWyBqKysgXSkgKSB7XHJcblx0XHRcdFx0XHRpZiAoIHJzY3JpcHRUeXBlLnRlc3QoIGVsZW0udHlwZSB8fCBcIlwiICkgKSB7XHJcblx0XHRcdFx0XHRcdHNjcmlwdHMucHVzaCggZWxlbSApO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cclxuXHRcdHRtcCA9IG51bGw7XHJcblxyXG5cdFx0cmV0dXJuIHNhZmU7XHJcblx0fSxcclxuXHJcblx0Y2xlYW5EYXRhOiBmdW5jdGlvbiggZWxlbXMsIC8qIGludGVybmFsICovIGFjY2VwdERhdGEgKSB7XHJcblx0XHR2YXIgZWxlbSwgdHlwZSwgaWQsIGRhdGEsXHJcblx0XHRcdGkgPSAwLFxyXG5cdFx0XHRpbnRlcm5hbEtleSA9IGpRdWVyeS5leHBhbmRvLFxyXG5cdFx0XHRjYWNoZSA9IGpRdWVyeS5jYWNoZSxcclxuXHRcdFx0ZGVsZXRlRXhwYW5kbyA9IHN1cHBvcnQuZGVsZXRlRXhwYW5kbyxcclxuXHRcdFx0c3BlY2lhbCA9IGpRdWVyeS5ldmVudC5zcGVjaWFsO1xyXG5cclxuXHRcdGZvciAoIDsgKGVsZW0gPSBlbGVtc1tpXSkgIT0gbnVsbDsgaSsrICkge1xyXG5cdFx0XHRpZiAoIGFjY2VwdERhdGEgfHwgalF1ZXJ5LmFjY2VwdERhdGEoIGVsZW0gKSApIHtcclxuXHJcblx0XHRcdFx0aWQgPSBlbGVtWyBpbnRlcm5hbEtleSBdO1xyXG5cdFx0XHRcdGRhdGEgPSBpZCAmJiBjYWNoZVsgaWQgXTtcclxuXHJcblx0XHRcdFx0aWYgKCBkYXRhICkge1xyXG5cdFx0XHRcdFx0aWYgKCBkYXRhLmV2ZW50cyApIHtcclxuXHRcdFx0XHRcdFx0Zm9yICggdHlwZSBpbiBkYXRhLmV2ZW50cyApIHtcclxuXHRcdFx0XHRcdFx0XHRpZiAoIHNwZWNpYWxbIHR5cGUgXSApIHtcclxuXHRcdFx0XHRcdFx0XHRcdGpRdWVyeS5ldmVudC5yZW1vdmUoIGVsZW0sIHR5cGUgKTtcclxuXHJcblx0XHRcdFx0XHRcdFx0Ly8gVGhpcyBpcyBhIHNob3J0Y3V0IHRvIGF2b2lkIGpRdWVyeS5ldmVudC5yZW1vdmUncyBvdmVyaGVhZFxyXG5cdFx0XHRcdFx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0XHRcdFx0XHRqUXVlcnkucmVtb3ZlRXZlbnQoIGVsZW0sIHR5cGUsIGRhdGEuaGFuZGxlICk7XHJcblx0XHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdFx0Ly8gUmVtb3ZlIGNhY2hlIG9ubHkgaWYgaXQgd2FzIG5vdCBhbHJlYWR5IHJlbW92ZWQgYnkgalF1ZXJ5LmV2ZW50LnJlbW92ZVxyXG5cdFx0XHRcdFx0aWYgKCBjYWNoZVsgaWQgXSApIHtcclxuXHJcblx0XHRcdFx0XHRcdGRlbGV0ZSBjYWNoZVsgaWQgXTtcclxuXHJcblx0XHRcdFx0XHRcdC8vIElFIGRvZXMgbm90IGFsbG93IHVzIHRvIGRlbGV0ZSBleHBhbmRvIHByb3BlcnRpZXMgZnJvbSBub2RlcyxcclxuXHRcdFx0XHRcdFx0Ly8gbm9yIGRvZXMgaXQgaGF2ZSBhIHJlbW92ZUF0dHJpYnV0ZSBmdW5jdGlvbiBvbiBEb2N1bWVudCBub2RlcztcclxuXHRcdFx0XHRcdFx0Ly8gd2UgbXVzdCBoYW5kbGUgYWxsIG9mIHRoZXNlIGNhc2VzXHJcblx0XHRcdFx0XHRcdGlmICggZGVsZXRlRXhwYW5kbyApIHtcclxuXHRcdFx0XHRcdFx0XHRkZWxldGUgZWxlbVsgaW50ZXJuYWxLZXkgXTtcclxuXHJcblx0XHRcdFx0XHRcdH0gZWxzZSBpZiAoIHR5cGVvZiBlbGVtLnJlbW92ZUF0dHJpYnV0ZSAhPT0gc3RydW5kZWZpbmVkICkge1xyXG5cdFx0XHRcdFx0XHRcdGVsZW0ucmVtb3ZlQXR0cmlidXRlKCBpbnRlcm5hbEtleSApO1xyXG5cclxuXHRcdFx0XHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRcdFx0XHRlbGVtWyBpbnRlcm5hbEtleSBdID0gbnVsbDtcclxuXHRcdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRcdFx0ZGVsZXRlZElkcy5wdXNoKCBpZCApO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdH1cclxufSk7XHJcblxyXG5qUXVlcnkuZm4uZXh0ZW5kKHtcclxuXHR0ZXh0OiBmdW5jdGlvbiggdmFsdWUgKSB7XHJcblx0XHRyZXR1cm4gYWNjZXNzKCB0aGlzLCBmdW5jdGlvbiggdmFsdWUgKSB7XHJcblx0XHRcdHJldHVybiB2YWx1ZSA9PT0gdW5kZWZpbmVkID9cclxuXHRcdFx0XHRqUXVlcnkudGV4dCggdGhpcyApIDpcclxuXHRcdFx0XHR0aGlzLmVtcHR5KCkuYXBwZW5kKCAoIHRoaXNbMF0gJiYgdGhpc1swXS5vd25lckRvY3VtZW50IHx8IGRvY3VtZW50ICkuY3JlYXRlVGV4dE5vZGUoIHZhbHVlICkgKTtcclxuXHRcdH0sIG51bGwsIHZhbHVlLCBhcmd1bWVudHMubGVuZ3RoICk7XHJcblx0fSxcclxuXHJcblx0YXBwZW5kOiBmdW5jdGlvbigpIHtcclxuXHRcdHJldHVybiB0aGlzLmRvbU1hbmlwKCBhcmd1bWVudHMsIGZ1bmN0aW9uKCBlbGVtICkge1xyXG5cdFx0XHRpZiAoIHRoaXMubm9kZVR5cGUgPT09IDEgfHwgdGhpcy5ub2RlVHlwZSA9PT0gMTEgfHwgdGhpcy5ub2RlVHlwZSA9PT0gOSApIHtcclxuXHRcdFx0XHR2YXIgdGFyZ2V0ID0gbWFuaXB1bGF0aW9uVGFyZ2V0KCB0aGlzLCBlbGVtICk7XHJcblx0XHRcdFx0dGFyZ2V0LmFwcGVuZENoaWxkKCBlbGVtICk7XHJcblx0XHRcdH1cclxuXHRcdH0pO1xyXG5cdH0sXHJcblxyXG5cdHByZXBlbmQ6IGZ1bmN0aW9uKCkge1xyXG5cdFx0cmV0dXJuIHRoaXMuZG9tTWFuaXAoIGFyZ3VtZW50cywgZnVuY3Rpb24oIGVsZW0gKSB7XHJcblx0XHRcdGlmICggdGhpcy5ub2RlVHlwZSA9PT0gMSB8fCB0aGlzLm5vZGVUeXBlID09PSAxMSB8fCB0aGlzLm5vZGVUeXBlID09PSA5ICkge1xyXG5cdFx0XHRcdHZhciB0YXJnZXQgPSBtYW5pcHVsYXRpb25UYXJnZXQoIHRoaXMsIGVsZW0gKTtcclxuXHRcdFx0XHR0YXJnZXQuaW5zZXJ0QmVmb3JlKCBlbGVtLCB0YXJnZXQuZmlyc3RDaGlsZCApO1xyXG5cdFx0XHR9XHJcblx0XHR9KTtcclxuXHR9LFxyXG5cclxuXHRiZWZvcmU6IGZ1bmN0aW9uKCkge1xyXG5cdFx0cmV0dXJuIHRoaXMuZG9tTWFuaXAoIGFyZ3VtZW50cywgZnVuY3Rpb24oIGVsZW0gKSB7XHJcblx0XHRcdGlmICggdGhpcy5wYXJlbnROb2RlICkge1xyXG5cdFx0XHRcdHRoaXMucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoIGVsZW0sIHRoaXMgKTtcclxuXHRcdFx0fVxyXG5cdFx0fSk7XHJcblx0fSxcclxuXHJcblx0YWZ0ZXI6IGZ1bmN0aW9uKCkge1xyXG5cdFx0cmV0dXJuIHRoaXMuZG9tTWFuaXAoIGFyZ3VtZW50cywgZnVuY3Rpb24oIGVsZW0gKSB7XHJcblx0XHRcdGlmICggdGhpcy5wYXJlbnROb2RlICkge1xyXG5cdFx0XHRcdHRoaXMucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoIGVsZW0sIHRoaXMubmV4dFNpYmxpbmcgKTtcclxuXHRcdFx0fVxyXG5cdFx0fSk7XHJcblx0fSxcclxuXHJcblx0cmVtb3ZlOiBmdW5jdGlvbiggc2VsZWN0b3IsIGtlZXBEYXRhIC8qIEludGVybmFsIFVzZSBPbmx5ICovICkge1xyXG5cdFx0dmFyIGVsZW0sXHJcblx0XHRcdGVsZW1zID0gc2VsZWN0b3IgPyBqUXVlcnkuZmlsdGVyKCBzZWxlY3RvciwgdGhpcyApIDogdGhpcyxcclxuXHRcdFx0aSA9IDA7XHJcblxyXG5cdFx0Zm9yICggOyAoZWxlbSA9IGVsZW1zW2ldKSAhPSBudWxsOyBpKysgKSB7XHJcblxyXG5cdFx0XHRpZiAoICFrZWVwRGF0YSAmJiBlbGVtLm5vZGVUeXBlID09PSAxICkge1xyXG5cdFx0XHRcdGpRdWVyeS5jbGVhbkRhdGEoIGdldEFsbCggZWxlbSApICk7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdGlmICggZWxlbS5wYXJlbnROb2RlICkge1xyXG5cdFx0XHRcdGlmICgga2VlcERhdGEgJiYgalF1ZXJ5LmNvbnRhaW5zKCBlbGVtLm93bmVyRG9jdW1lbnQsIGVsZW0gKSApIHtcclxuXHRcdFx0XHRcdHNldEdsb2JhbEV2YWwoIGdldEFsbCggZWxlbSwgXCJzY3JpcHRcIiApICk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHRcdGVsZW0ucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCggZWxlbSApO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblxyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblx0fSxcclxuXHJcblx0ZW1wdHk6IGZ1bmN0aW9uKCkge1xyXG5cdFx0dmFyIGVsZW0sXHJcblx0XHRcdGkgPSAwO1xyXG5cclxuXHRcdGZvciAoIDsgKGVsZW0gPSB0aGlzW2ldKSAhPSBudWxsOyBpKysgKSB7XHJcblx0XHRcdC8vIFJlbW92ZSBlbGVtZW50IG5vZGVzIGFuZCBwcmV2ZW50IG1lbW9yeSBsZWFrc1xyXG5cdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7XHJcblx0XHRcdFx0alF1ZXJ5LmNsZWFuRGF0YSggZ2V0QWxsKCBlbGVtLCBmYWxzZSApICk7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdC8vIFJlbW92ZSBhbnkgcmVtYWluaW5nIG5vZGVzXHJcblx0XHRcdHdoaWxlICggZWxlbS5maXJzdENoaWxkICkge1xyXG5cdFx0XHRcdGVsZW0ucmVtb3ZlQ2hpbGQoIGVsZW0uZmlyc3RDaGlsZCApO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHQvLyBJZiB0aGlzIGlzIGEgc2VsZWN0LCBlbnN1cmUgdGhhdCBpdCBkaXNwbGF5cyBlbXB0eSAoIzEyMzM2KVxyXG5cdFx0XHQvLyBTdXBwb3J0OiBJRTw5XHJcblx0XHRcdGlmICggZWxlbS5vcHRpb25zICYmIGpRdWVyeS5ub2RlTmFtZSggZWxlbSwgXCJzZWxlY3RcIiApICkge1xyXG5cdFx0XHRcdGVsZW0ub3B0aW9ucy5sZW5ndGggPSAwO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblxyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblx0fSxcclxuXHJcblx0Y2xvbmU6IGZ1bmN0aW9uKCBkYXRhQW5kRXZlbnRzLCBkZWVwRGF0YUFuZEV2ZW50cyApIHtcclxuXHRcdGRhdGFBbmRFdmVudHMgPSBkYXRhQW5kRXZlbnRzID09IG51bGwgPyBmYWxzZSA6IGRhdGFBbmRFdmVudHM7XHJcblx0XHRkZWVwRGF0YUFuZEV2ZW50cyA9IGRlZXBEYXRhQW5kRXZlbnRzID09IG51bGwgPyBkYXRhQW5kRXZlbnRzIDogZGVlcERhdGFBbmRFdmVudHM7XHJcblxyXG5cdFx0cmV0dXJuIHRoaXMubWFwKGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRyZXR1cm4galF1ZXJ5LmNsb25lKCB0aGlzLCBkYXRhQW5kRXZlbnRzLCBkZWVwRGF0YUFuZEV2ZW50cyApO1xyXG5cdFx0fSk7XHJcblx0fSxcclxuXHJcblx0aHRtbDogZnVuY3Rpb24oIHZhbHVlICkge1xyXG5cdFx0cmV0dXJuIGFjY2VzcyggdGhpcywgZnVuY3Rpb24oIHZhbHVlICkge1xyXG5cdFx0XHR2YXIgZWxlbSA9IHRoaXNbIDAgXSB8fCB7fSxcclxuXHRcdFx0XHRpID0gMCxcclxuXHRcdFx0XHRsID0gdGhpcy5sZW5ndGg7XHJcblxyXG5cdFx0XHRpZiAoIHZhbHVlID09PSB1bmRlZmluZWQgKSB7XHJcblx0XHRcdFx0cmV0dXJuIGVsZW0ubm9kZVR5cGUgPT09IDEgP1xyXG5cdFx0XHRcdFx0ZWxlbS5pbm5lckhUTUwucmVwbGFjZSggcmlubGluZWpRdWVyeSwgXCJcIiApIDpcclxuXHRcdFx0XHRcdHVuZGVmaW5lZDtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0Ly8gU2VlIGlmIHdlIGNhbiB0YWtlIGEgc2hvcnRjdXQgYW5kIGp1c3QgdXNlIGlubmVySFRNTFxyXG5cdFx0XHRpZiAoIHR5cGVvZiB2YWx1ZSA9PT0gXCJzdHJpbmdcIiAmJiAhcm5vSW5uZXJodG1sLnRlc3QoIHZhbHVlICkgJiZcclxuXHRcdFx0XHQoIHN1cHBvcnQuaHRtbFNlcmlhbGl6ZSB8fCAhcm5vc2hpbWNhY2hlLnRlc3QoIHZhbHVlICkgICkgJiZcclxuXHRcdFx0XHQoIHN1cHBvcnQubGVhZGluZ1doaXRlc3BhY2UgfHwgIXJsZWFkaW5nV2hpdGVzcGFjZS50ZXN0KCB2YWx1ZSApICkgJiZcclxuXHRcdFx0XHQhd3JhcE1hcFsgKHJ0YWdOYW1lLmV4ZWMoIHZhbHVlICkgfHwgWyBcIlwiLCBcIlwiIF0pWyAxIF0udG9Mb3dlckNhc2UoKSBdICkge1xyXG5cclxuXHRcdFx0XHR2YWx1ZSA9IHZhbHVlLnJlcGxhY2UoIHJ4aHRtbFRhZywgXCI8JDE+PC8kMj5cIiApO1xyXG5cclxuXHRcdFx0XHR0cnkge1xyXG5cdFx0XHRcdFx0Zm9yICg7IGkgPCBsOyBpKysgKSB7XHJcblx0XHRcdFx0XHRcdC8vIFJlbW92ZSBlbGVtZW50IG5vZGVzIGFuZCBwcmV2ZW50IG1lbW9yeSBsZWFrc1xyXG5cdFx0XHRcdFx0XHRlbGVtID0gdGhpc1tpXSB8fCB7fTtcclxuXHRcdFx0XHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxICkge1xyXG5cdFx0XHRcdFx0XHRcdGpRdWVyeS5jbGVhbkRhdGEoIGdldEFsbCggZWxlbSwgZmFsc2UgKSApO1xyXG5cdFx0XHRcdFx0XHRcdGVsZW0uaW5uZXJIVE1MID0gdmFsdWU7XHJcblx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0XHRlbGVtID0gMDtcclxuXHJcblx0XHRcdFx0Ly8gSWYgdXNpbmcgaW5uZXJIVE1MIHRocm93cyBhbiBleGNlcHRpb24sIHVzZSB0aGUgZmFsbGJhY2sgbWV0aG9kXHJcblx0XHRcdFx0fSBjYXRjaChlKSB7fVxyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRpZiAoIGVsZW0gKSB7XHJcblx0XHRcdFx0dGhpcy5lbXB0eSgpLmFwcGVuZCggdmFsdWUgKTtcclxuXHRcdFx0fVxyXG5cdFx0fSwgbnVsbCwgdmFsdWUsIGFyZ3VtZW50cy5sZW5ndGggKTtcclxuXHR9LFxyXG5cclxuXHRyZXBsYWNlV2l0aDogZnVuY3Rpb24oKSB7XHJcblx0XHR2YXIgYXJnID0gYXJndW1lbnRzWyAwIF07XHJcblxyXG5cdFx0Ly8gTWFrZSB0aGUgY2hhbmdlcywgcmVwbGFjaW5nIGVhY2ggY29udGV4dCBlbGVtZW50IHdpdGggdGhlIG5ldyBjb250ZW50XHJcblx0XHR0aGlzLmRvbU1hbmlwKCBhcmd1bWVudHMsIGZ1bmN0aW9uKCBlbGVtICkge1xyXG5cdFx0XHRhcmcgPSB0aGlzLnBhcmVudE5vZGU7XHJcblxyXG5cdFx0XHRqUXVlcnkuY2xlYW5EYXRhKCBnZXRBbGwoIHRoaXMgKSApO1xyXG5cclxuXHRcdFx0aWYgKCBhcmcgKSB7XHJcblx0XHRcdFx0YXJnLnJlcGxhY2VDaGlsZCggZWxlbSwgdGhpcyApO1xyXG5cdFx0XHR9XHJcblx0XHR9KTtcclxuXHJcblx0XHQvLyBGb3JjZSByZW1vdmFsIGlmIHRoZXJlIHdhcyBubyBuZXcgY29udGVudCAoZS5nLiwgZnJvbSBlbXB0eSBhcmd1bWVudHMpXHJcblx0XHRyZXR1cm4gYXJnICYmIChhcmcubGVuZ3RoIHx8IGFyZy5ub2RlVHlwZSkgPyB0aGlzIDogdGhpcy5yZW1vdmUoKTtcclxuXHR9LFxyXG5cclxuXHRkZXRhY2g6IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcclxuXHRcdHJldHVybiB0aGlzLnJlbW92ZSggc2VsZWN0b3IsIHRydWUgKTtcclxuXHR9LFxyXG5cclxuXHRkb21NYW5pcDogZnVuY3Rpb24oIGFyZ3MsIGNhbGxiYWNrICkge1xyXG5cclxuXHRcdC8vIEZsYXR0ZW4gYW55IG5lc3RlZCBhcnJheXNcclxuXHRcdGFyZ3MgPSBjb25jYXQuYXBwbHkoIFtdLCBhcmdzICk7XHJcblxyXG5cdFx0dmFyIGZpcnN0LCBub2RlLCBoYXNTY3JpcHRzLFxyXG5cdFx0XHRzY3JpcHRzLCBkb2MsIGZyYWdtZW50LFxyXG5cdFx0XHRpID0gMCxcclxuXHRcdFx0bCA9IHRoaXMubGVuZ3RoLFxyXG5cdFx0XHRzZXQgPSB0aGlzLFxyXG5cdFx0XHRpTm9DbG9uZSA9IGwgLSAxLFxyXG5cdFx0XHR2YWx1ZSA9IGFyZ3NbMF0sXHJcblx0XHRcdGlzRnVuY3Rpb24gPSBqUXVlcnkuaXNGdW5jdGlvbiggdmFsdWUgKTtcclxuXHJcblx0XHQvLyBXZSBjYW4ndCBjbG9uZU5vZGUgZnJhZ21lbnRzIHRoYXQgY29udGFpbiBjaGVja2VkLCBpbiBXZWJLaXRcclxuXHRcdGlmICggaXNGdW5jdGlvbiB8fFxyXG5cdFx0XHRcdCggbCA+IDEgJiYgdHlwZW9mIHZhbHVlID09PSBcInN0cmluZ1wiICYmXHJcblx0XHRcdFx0XHQhc3VwcG9ydC5jaGVja0Nsb25lICYmIHJjaGVja2VkLnRlc3QoIHZhbHVlICkgKSApIHtcclxuXHRcdFx0cmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbiggaW5kZXggKSB7XHJcblx0XHRcdFx0dmFyIHNlbGYgPSBzZXQuZXEoIGluZGV4ICk7XHJcblx0XHRcdFx0aWYgKCBpc0Z1bmN0aW9uICkge1xyXG5cdFx0XHRcdFx0YXJnc1swXSA9IHZhbHVlLmNhbGwoIHRoaXMsIGluZGV4LCBzZWxmLmh0bWwoKSApO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHRzZWxmLmRvbU1hbmlwKCBhcmdzLCBjYWxsYmFjayApO1xyXG5cdFx0XHR9KTtcclxuXHRcdH1cclxuXHJcblx0XHRpZiAoIGwgKSB7XHJcblx0XHRcdGZyYWdtZW50ID0galF1ZXJ5LmJ1aWxkRnJhZ21lbnQoIGFyZ3MsIHRoaXNbIDAgXS5vd25lckRvY3VtZW50LCBmYWxzZSwgdGhpcyApO1xyXG5cdFx0XHRmaXJzdCA9IGZyYWdtZW50LmZpcnN0Q2hpbGQ7XHJcblxyXG5cdFx0XHRpZiAoIGZyYWdtZW50LmNoaWxkTm9kZXMubGVuZ3RoID09PSAxICkge1xyXG5cdFx0XHRcdGZyYWdtZW50ID0gZmlyc3Q7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdGlmICggZmlyc3QgKSB7XHJcblx0XHRcdFx0c2NyaXB0cyA9IGpRdWVyeS5tYXAoIGdldEFsbCggZnJhZ21lbnQsIFwic2NyaXB0XCIgKSwgZGlzYWJsZVNjcmlwdCApO1xyXG5cdFx0XHRcdGhhc1NjcmlwdHMgPSBzY3JpcHRzLmxlbmd0aDtcclxuXHJcblx0XHRcdFx0Ly8gVXNlIHRoZSBvcmlnaW5hbCBmcmFnbWVudCBmb3IgdGhlIGxhc3QgaXRlbSBpbnN0ZWFkIG9mIHRoZSBmaXJzdCBiZWNhdXNlIGl0IGNhbiBlbmQgdXBcclxuXHRcdFx0XHQvLyBiZWluZyBlbXB0aWVkIGluY29ycmVjdGx5IGluIGNlcnRhaW4gc2l0dWF0aW9ucyAoIzgwNzApLlxyXG5cdFx0XHRcdGZvciAoIDsgaSA8IGw7IGkrKyApIHtcclxuXHRcdFx0XHRcdG5vZGUgPSBmcmFnbWVudDtcclxuXHJcblx0XHRcdFx0XHRpZiAoIGkgIT09IGlOb0Nsb25lICkge1xyXG5cdFx0XHRcdFx0XHRub2RlID0galF1ZXJ5LmNsb25lKCBub2RlLCB0cnVlLCB0cnVlICk7XHJcblxyXG5cdFx0XHRcdFx0XHQvLyBLZWVwIHJlZmVyZW5jZXMgdG8gY2xvbmVkIHNjcmlwdHMgZm9yIGxhdGVyIHJlc3RvcmF0aW9uXHJcblx0XHRcdFx0XHRcdGlmICggaGFzU2NyaXB0cyApIHtcclxuXHRcdFx0XHRcdFx0XHRqUXVlcnkubWVyZ2UoIHNjcmlwdHMsIGdldEFsbCggbm9kZSwgXCJzY3JpcHRcIiApICk7XHJcblx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0XHRjYWxsYmFjay5jYWxsKCB0aGlzW2ldLCBub2RlLCBpICk7XHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRpZiAoIGhhc1NjcmlwdHMgKSB7XHJcblx0XHRcdFx0XHRkb2MgPSBzY3JpcHRzWyBzY3JpcHRzLmxlbmd0aCAtIDEgXS5vd25lckRvY3VtZW50O1xyXG5cclxuXHRcdFx0XHRcdC8vIFJlZW5hYmxlIHNjcmlwdHNcclxuXHRcdFx0XHRcdGpRdWVyeS5tYXAoIHNjcmlwdHMsIHJlc3RvcmVTY3JpcHQgKTtcclxuXHJcblx0XHRcdFx0XHQvLyBFdmFsdWF0ZSBleGVjdXRhYmxlIHNjcmlwdHMgb24gZmlyc3QgZG9jdW1lbnQgaW5zZXJ0aW9uXHJcblx0XHRcdFx0XHRmb3IgKCBpID0gMDsgaSA8IGhhc1NjcmlwdHM7IGkrKyApIHtcclxuXHRcdFx0XHRcdFx0bm9kZSA9IHNjcmlwdHNbIGkgXTtcclxuXHRcdFx0XHRcdFx0aWYgKCByc2NyaXB0VHlwZS50ZXN0KCBub2RlLnR5cGUgfHwgXCJcIiApICYmXHJcblx0XHRcdFx0XHRcdFx0IWpRdWVyeS5fZGF0YSggbm9kZSwgXCJnbG9iYWxFdmFsXCIgKSAmJiBqUXVlcnkuY29udGFpbnMoIGRvYywgbm9kZSApICkge1xyXG5cclxuXHRcdFx0XHRcdFx0XHRpZiAoIG5vZGUuc3JjICkge1xyXG5cdFx0XHRcdFx0XHRcdFx0Ly8gT3B0aW9uYWwgQUpBWCBkZXBlbmRlbmN5LCBidXQgd29uJ3QgcnVuIHNjcmlwdHMgaWYgbm90IHByZXNlbnRcclxuXHRcdFx0XHRcdFx0XHRcdGlmICggalF1ZXJ5Ll9ldmFsVXJsICkge1xyXG5cdFx0XHRcdFx0XHRcdFx0XHRqUXVlcnkuX2V2YWxVcmwoIG5vZGUuc3JjICk7XHJcblx0XHRcdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRcdFx0XHRcdGpRdWVyeS5nbG9iYWxFdmFsKCAoIG5vZGUudGV4dCB8fCBub2RlLnRleHRDb250ZW50IHx8IG5vZGUuaW5uZXJIVE1MIHx8IFwiXCIgKS5yZXBsYWNlKCByY2xlYW5TY3JpcHQsIFwiXCIgKSApO1xyXG5cdFx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0Ly8gRml4ICMxMTgwOTogQXZvaWQgbGVha2luZyBtZW1vcnlcclxuXHRcdFx0XHRmcmFnbWVudCA9IGZpcnN0ID0gbnVsbDtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cdH1cclxufSk7XHJcblxyXG5qUXVlcnkuZWFjaCh7XHJcblx0YXBwZW5kVG86IFwiYXBwZW5kXCIsXHJcblx0cHJlcGVuZFRvOiBcInByZXBlbmRcIixcclxuXHRpbnNlcnRCZWZvcmU6IFwiYmVmb3JlXCIsXHJcblx0aW5zZXJ0QWZ0ZXI6IFwiYWZ0ZXJcIixcclxuXHRyZXBsYWNlQWxsOiBcInJlcGxhY2VXaXRoXCJcclxufSwgZnVuY3Rpb24oIG5hbWUsIG9yaWdpbmFsICkge1xyXG5cdGpRdWVyeS5mblsgbmFtZSBdID0gZnVuY3Rpb24oIHNlbGVjdG9yICkge1xyXG5cdFx0dmFyIGVsZW1zLFxyXG5cdFx0XHRpID0gMCxcclxuXHRcdFx0cmV0ID0gW10sXHJcblx0XHRcdGluc2VydCA9IGpRdWVyeSggc2VsZWN0b3IgKSxcclxuXHRcdFx0bGFzdCA9IGluc2VydC5sZW5ndGggLSAxO1xyXG5cclxuXHRcdGZvciAoIDsgaSA8PSBsYXN0OyBpKysgKSB7XHJcblx0XHRcdGVsZW1zID0gaSA9PT0gbGFzdCA/IHRoaXMgOiB0aGlzLmNsb25lKHRydWUpO1xyXG5cdFx0XHRqUXVlcnkoIGluc2VydFtpXSApWyBvcmlnaW5hbCBdKCBlbGVtcyApO1xyXG5cclxuXHRcdFx0Ly8gTW9kZXJuIGJyb3dzZXJzIGNhbiBhcHBseSBqUXVlcnkgY29sbGVjdGlvbnMgYXMgYXJyYXlzLCBidXQgb2xkSUUgbmVlZHMgYSAuZ2V0KClcclxuXHRcdFx0cHVzaC5hcHBseSggcmV0LCBlbGVtcy5nZXQoKSApO1xyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggcmV0ICk7XHJcblx0fTtcclxufSk7XHJcblxyXG5cclxudmFyIGlmcmFtZSxcclxuXHRlbGVtZGlzcGxheSA9IHt9O1xyXG5cclxuLyoqXHJcbiAqIFJldHJpZXZlIHRoZSBhY3R1YWwgZGlzcGxheSBvZiBhIGVsZW1lbnRcclxuICogQHBhcmFtIHtTdHJpbmd9IG5hbWUgbm9kZU5hbWUgb2YgdGhlIGVsZW1lbnRcclxuICogQHBhcmFtIHtPYmplY3R9IGRvYyBEb2N1bWVudCBvYmplY3RcclxuICovXHJcbi8vIENhbGxlZCBvbmx5IGZyb20gd2l0aGluIGRlZmF1bHREaXNwbGF5XHJcbmZ1bmN0aW9uIGFjdHVhbERpc3BsYXkoIG5hbWUsIGRvYyApIHtcclxuXHR2YXIgc3R5bGUsXHJcblx0XHRlbGVtID0galF1ZXJ5KCBkb2MuY3JlYXRlRWxlbWVudCggbmFtZSApICkuYXBwZW5kVG8oIGRvYy5ib2R5ICksXHJcblxyXG5cdFx0Ly8gZ2V0RGVmYXVsdENvbXB1dGVkU3R5bGUgbWlnaHQgYmUgcmVsaWFibHkgdXNlZCBvbmx5IG9uIGF0dGFjaGVkIGVsZW1lbnRcclxuXHRcdGRpc3BsYXkgPSB3aW5kb3cuZ2V0RGVmYXVsdENvbXB1dGVkU3R5bGUgJiYgKCBzdHlsZSA9IHdpbmRvdy5nZXREZWZhdWx0Q29tcHV0ZWRTdHlsZSggZWxlbVsgMCBdICkgKSA/XHJcblxyXG5cdFx0XHQvLyBVc2Ugb2YgdGhpcyBtZXRob2QgaXMgYSB0ZW1wb3JhcnkgZml4IChtb3JlIGxpa2Ugb3B0bWl6YXRpb24pIHVudGlsIHNvbWV0aGluZyBiZXR0ZXIgY29tZXMgYWxvbmcsXHJcblx0XHRcdC8vIHNpbmNlIGl0IHdhcyByZW1vdmVkIGZyb20gc3BlY2lmaWNhdGlvbiBhbmQgc3VwcG9ydGVkIG9ubHkgaW4gRkZcclxuXHRcdFx0c3R5bGUuZGlzcGxheSA6IGpRdWVyeS5jc3MoIGVsZW1bIDAgXSwgXCJkaXNwbGF5XCIgKTtcclxuXHJcblx0Ly8gV2UgZG9uJ3QgaGF2ZSBhbnkgZGF0YSBzdG9yZWQgb24gdGhlIGVsZW1lbnQsXHJcblx0Ly8gc28gdXNlIFwiZGV0YWNoXCIgbWV0aG9kIGFzIGZhc3Qgd2F5IHRvIGdldCByaWQgb2YgdGhlIGVsZW1lbnRcclxuXHRlbGVtLmRldGFjaCgpO1xyXG5cclxuXHRyZXR1cm4gZGlzcGxheTtcclxufVxyXG5cclxuLyoqXHJcbiAqIFRyeSB0byBkZXRlcm1pbmUgdGhlIGRlZmF1bHQgZGlzcGxheSB2YWx1ZSBvZiBhbiBlbGVtZW50XHJcbiAqIEBwYXJhbSB7U3RyaW5nfSBub2RlTmFtZVxyXG4gKi9cclxuZnVuY3Rpb24gZGVmYXVsdERpc3BsYXkoIG5vZGVOYW1lICkge1xyXG5cdHZhciBkb2MgPSBkb2N1bWVudCxcclxuXHRcdGRpc3BsYXkgPSBlbGVtZGlzcGxheVsgbm9kZU5hbWUgXTtcclxuXHJcblx0aWYgKCAhZGlzcGxheSApIHtcclxuXHRcdGRpc3BsYXkgPSBhY3R1YWxEaXNwbGF5KCBub2RlTmFtZSwgZG9jICk7XHJcblxyXG5cdFx0Ly8gSWYgdGhlIHNpbXBsZSB3YXkgZmFpbHMsIHJlYWQgZnJvbSBpbnNpZGUgYW4gaWZyYW1lXHJcblx0XHRpZiAoIGRpc3BsYXkgPT09IFwibm9uZVwiIHx8ICFkaXNwbGF5ICkge1xyXG5cclxuXHRcdFx0Ly8gVXNlIHRoZSBhbHJlYWR5LWNyZWF0ZWQgaWZyYW1lIGlmIHBvc3NpYmxlXHJcblx0XHRcdGlmcmFtZSA9IChpZnJhbWUgfHwgalF1ZXJ5KCBcIjxpZnJhbWUgZnJhbWVib3JkZXI9JzAnIHdpZHRoPScwJyBoZWlnaHQ9JzAnLz5cIiApKS5hcHBlbmRUbyggZG9jLmRvY3VtZW50RWxlbWVudCApO1xyXG5cclxuXHRcdFx0Ly8gQWx3YXlzIHdyaXRlIGEgbmV3IEhUTUwgc2tlbGV0b24gc28gV2Via2l0IGFuZCBGaXJlZm94IGRvbid0IGNob2tlIG9uIHJldXNlXHJcblx0XHRcdGRvYyA9ICggaWZyYW1lWyAwIF0uY29udGVudFdpbmRvdyB8fCBpZnJhbWVbIDAgXS5jb250ZW50RG9jdW1lbnQgKS5kb2N1bWVudDtcclxuXHJcblx0XHRcdC8vIFN1cHBvcnQ6IElFXHJcblx0XHRcdGRvYy53cml0ZSgpO1xyXG5cdFx0XHRkb2MuY2xvc2UoKTtcclxuXHJcblx0XHRcdGRpc3BsYXkgPSBhY3R1YWxEaXNwbGF5KCBub2RlTmFtZSwgZG9jICk7XHJcblx0XHRcdGlmcmFtZS5kZXRhY2goKTtcclxuXHRcdH1cclxuXHJcblx0XHQvLyBTdG9yZSB0aGUgY29ycmVjdCBkZWZhdWx0IGRpc3BsYXlcclxuXHRcdGVsZW1kaXNwbGF5WyBub2RlTmFtZSBdID0gZGlzcGxheTtcclxuXHR9XHJcblxyXG5cdHJldHVybiBkaXNwbGF5O1xyXG59XHJcblxyXG5cclxuKGZ1bmN0aW9uKCkge1xyXG5cdHZhciBzaHJpbmtXcmFwQmxvY2tzVmFsO1xyXG5cclxuXHRzdXBwb3J0LnNocmlua1dyYXBCbG9ja3MgPSBmdW5jdGlvbigpIHtcclxuXHRcdGlmICggc2hyaW5rV3JhcEJsb2Nrc1ZhbCAhPSBudWxsICkge1xyXG5cdFx0XHRyZXR1cm4gc2hyaW5rV3JhcEJsb2Nrc1ZhbDtcclxuXHRcdH1cclxuXHJcblx0XHQvLyBXaWxsIGJlIGNoYW5nZWQgbGF0ZXIgaWYgbmVlZGVkLlxyXG5cdFx0c2hyaW5rV3JhcEJsb2Nrc1ZhbCA9IGZhbHNlO1xyXG5cclxuXHRcdC8vIE1pbmlmaWVkOiB2YXIgYixjLGRcclxuXHRcdHZhciBkaXYsIGJvZHksIGNvbnRhaW5lcjtcclxuXHJcblx0XHRib2R5ID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoIFwiYm9keVwiIClbIDAgXTtcclxuXHRcdGlmICggIWJvZHkgfHwgIWJvZHkuc3R5bGUgKSB7XHJcblx0XHRcdC8vIFRlc3QgZmlyZWQgdG9vIGVhcmx5IG9yIGluIGFuIHVuc3VwcG9ydGVkIGVudmlyb25tZW50LCBleGl0LlxyXG5cdFx0XHRyZXR1cm47XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gU2V0dXBcclxuXHRcdGRpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiZGl2XCIgKTtcclxuXHRcdGNvbnRhaW5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiZGl2XCIgKTtcclxuXHRcdGNvbnRhaW5lci5zdHlsZS5jc3NUZXh0ID0gXCJwb3NpdGlvbjphYnNvbHV0ZTtib3JkZXI6MDt3aWR0aDowO2hlaWdodDowO3RvcDowO2xlZnQ6LTk5OTlweFwiO1xyXG5cdFx0Ym9keS5hcHBlbmRDaGlsZCggY29udGFpbmVyICkuYXBwZW5kQ2hpbGQoIGRpdiApO1xyXG5cclxuXHRcdC8vIFN1cHBvcnQ6IElFNlxyXG5cdFx0Ly8gQ2hlY2sgaWYgZWxlbWVudHMgd2l0aCBsYXlvdXQgc2hyaW5rLXdyYXAgdGhlaXIgY2hpbGRyZW5cclxuXHRcdGlmICggdHlwZW9mIGRpdi5zdHlsZS56b29tICE9PSBzdHJ1bmRlZmluZWQgKSB7XHJcblx0XHRcdC8vIFJlc2V0IENTUzogYm94LXNpemluZzsgZGlzcGxheTsgbWFyZ2luOyBib3JkZXJcclxuXHRcdFx0ZGl2LnN0eWxlLmNzc1RleHQgPVxyXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IEZpcmVmb3g8MjksIEFuZHJvaWQgMi4zXHJcblx0XHRcdFx0Ly8gVmVuZG9yLXByZWZpeCBib3gtc2l6aW5nXHJcblx0XHRcdFx0XCItd2Via2l0LWJveC1zaXppbmc6Y29udGVudC1ib3g7LW1vei1ib3gtc2l6aW5nOmNvbnRlbnQtYm94O1wiICtcclxuXHRcdFx0XHRcImJveC1zaXppbmc6Y29udGVudC1ib3g7ZGlzcGxheTpibG9jazttYXJnaW46MDtib3JkZXI6MDtcIiArXHJcblx0XHRcdFx0XCJwYWRkaW5nOjFweDt3aWR0aDoxcHg7em9vbToxXCI7XHJcblx0XHRcdGRpdi5hcHBlbmRDaGlsZCggZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJkaXZcIiApICkuc3R5bGUud2lkdGggPSBcIjVweFwiO1xyXG5cdFx0XHRzaHJpbmtXcmFwQmxvY2tzVmFsID0gZGl2Lm9mZnNldFdpZHRoICE9PSAzO1xyXG5cdFx0fVxyXG5cclxuXHRcdGJvZHkucmVtb3ZlQ2hpbGQoIGNvbnRhaW5lciApO1xyXG5cclxuXHRcdHJldHVybiBzaHJpbmtXcmFwQmxvY2tzVmFsO1xyXG5cdH07XHJcblxyXG59KSgpO1xyXG52YXIgcm1hcmdpbiA9ICgvXm1hcmdpbi8pO1xyXG5cclxudmFyIHJudW1ub25weCA9IG5ldyBSZWdFeHAoIFwiXihcIiArIHBudW0gKyBcIikoPyFweClbYS16JV0rJFwiLCBcImlcIiApO1xyXG5cclxuXHJcblxyXG52YXIgZ2V0U3R5bGVzLCBjdXJDU1MsXHJcblx0cnBvc2l0aW9uID0gL14odG9wfHJpZ2h0fGJvdHRvbXxsZWZ0KSQvO1xyXG5cclxuaWYgKCB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZSApIHtcclxuXHRnZXRTdHlsZXMgPSBmdW5jdGlvbiggZWxlbSApIHtcclxuXHRcdC8vIFN1cHBvcnQ6IElFPD0xMSssIEZpcmVmb3g8PTMwKyAoIzE1MDk4LCAjMTQxNTApXHJcblx0XHQvLyBJRSB0aHJvd3Mgb24gZWxlbWVudHMgY3JlYXRlZCBpbiBwb3B1cHNcclxuXHRcdC8vIEZGIG1lYW53aGlsZSB0aHJvd3Mgb24gZnJhbWUgZWxlbWVudHMgdGhyb3VnaCBcImRlZmF1bHRWaWV3LmdldENvbXB1dGVkU3R5bGVcIlxyXG5cdFx0aWYgKCBlbGVtLm93bmVyRG9jdW1lbnQuZGVmYXVsdFZpZXcub3BlbmVyICkge1xyXG5cdFx0XHRyZXR1cm4gZWxlbS5vd25lckRvY3VtZW50LmRlZmF1bHRWaWV3LmdldENvbXB1dGVkU3R5bGUoIGVsZW0sIG51bGwgKTtcclxuXHRcdH1cclxuXHJcblx0XHRyZXR1cm4gd2luZG93LmdldENvbXB1dGVkU3R5bGUoIGVsZW0sIG51bGwgKTtcclxuXHR9O1xyXG5cclxuXHRjdXJDU1MgPSBmdW5jdGlvbiggZWxlbSwgbmFtZSwgY29tcHV0ZWQgKSB7XHJcblx0XHR2YXIgd2lkdGgsIG1pbldpZHRoLCBtYXhXaWR0aCwgcmV0LFxyXG5cdFx0XHRzdHlsZSA9IGVsZW0uc3R5bGU7XHJcblxyXG5cdFx0Y29tcHV0ZWQgPSBjb21wdXRlZCB8fCBnZXRTdHlsZXMoIGVsZW0gKTtcclxuXHJcblx0XHQvLyBnZXRQcm9wZXJ0eVZhbHVlIGlzIG9ubHkgbmVlZGVkIGZvciAuY3NzKCdmaWx0ZXInKSBpbiBJRTksIHNlZSAjMTI1MzdcclxuXHRcdHJldCA9IGNvbXB1dGVkID8gY29tcHV0ZWQuZ2V0UHJvcGVydHlWYWx1ZSggbmFtZSApIHx8IGNvbXB1dGVkWyBuYW1lIF0gOiB1bmRlZmluZWQ7XHJcblxyXG5cdFx0aWYgKCBjb21wdXRlZCApIHtcclxuXHJcblx0XHRcdGlmICggcmV0ID09PSBcIlwiICYmICFqUXVlcnkuY29udGFpbnMoIGVsZW0ub3duZXJEb2N1bWVudCwgZWxlbSApICkge1xyXG5cdFx0XHRcdHJldCA9IGpRdWVyeS5zdHlsZSggZWxlbSwgbmFtZSApO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHQvLyBBIHRyaWJ1dGUgdG8gdGhlIFwiYXdlc29tZSBoYWNrIGJ5IERlYW4gRWR3YXJkc1wiXHJcblx0XHRcdC8vIENocm9tZSA8IDE3IGFuZCBTYWZhcmkgNS4wIHVzZXMgXCJjb21wdXRlZCB2YWx1ZVwiIGluc3RlYWQgb2YgXCJ1c2VkIHZhbHVlXCIgZm9yIG1hcmdpbi1yaWdodFxyXG5cdFx0XHQvLyBTYWZhcmkgNS4xLjcgKGF0IGxlYXN0KSByZXR1cm5zIHBlcmNlbnRhZ2UgZm9yIGEgbGFyZ2VyIHNldCBvZiB2YWx1ZXMsIGJ1dCB3aWR0aCBzZWVtcyB0byBiZSByZWxpYWJseSBwaXhlbHNcclxuXHRcdFx0Ly8gdGhpcyBpcyBhZ2FpbnN0IHRoZSBDU1NPTSBkcmFmdCBzcGVjOiBodHRwOi8vZGV2LnczLm9yZy9jc3N3Zy9jc3NvbS8jcmVzb2x2ZWQtdmFsdWVzXHJcblx0XHRcdGlmICggcm51bW5vbnB4LnRlc3QoIHJldCApICYmIHJtYXJnaW4udGVzdCggbmFtZSApICkge1xyXG5cclxuXHRcdFx0XHQvLyBSZW1lbWJlciB0aGUgb3JpZ2luYWwgdmFsdWVzXHJcblx0XHRcdFx0d2lkdGggPSBzdHlsZS53aWR0aDtcclxuXHRcdFx0XHRtaW5XaWR0aCA9IHN0eWxlLm1pbldpZHRoO1xyXG5cdFx0XHRcdG1heFdpZHRoID0gc3R5bGUubWF4V2lkdGg7XHJcblxyXG5cdFx0XHRcdC8vIFB1dCBpbiB0aGUgbmV3IHZhbHVlcyB0byBnZXQgYSBjb21wdXRlZCB2YWx1ZSBvdXRcclxuXHRcdFx0XHRzdHlsZS5taW5XaWR0aCA9IHN0eWxlLm1heFdpZHRoID0gc3R5bGUud2lkdGggPSByZXQ7XHJcblx0XHRcdFx0cmV0ID0gY29tcHV0ZWQud2lkdGg7XHJcblxyXG5cdFx0XHRcdC8vIFJldmVydCB0aGUgY2hhbmdlZCB2YWx1ZXNcclxuXHRcdFx0XHRzdHlsZS53aWR0aCA9IHdpZHRoO1xyXG5cdFx0XHRcdHN0eWxlLm1pbldpZHRoID0gbWluV2lkdGg7XHJcblx0XHRcdFx0c3R5bGUubWF4V2lkdGggPSBtYXhXaWR0aDtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cclxuXHRcdC8vIFN1cHBvcnQ6IElFXHJcblx0XHQvLyBJRSByZXR1cm5zIHpJbmRleCB2YWx1ZSBhcyBhbiBpbnRlZ2VyLlxyXG5cdFx0cmV0dXJuIHJldCA9PT0gdW5kZWZpbmVkID9cclxuXHRcdFx0cmV0IDpcclxuXHRcdFx0cmV0ICsgXCJcIjtcclxuXHR9O1xyXG59IGVsc2UgaWYgKCBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY3VycmVudFN0eWxlICkge1xyXG5cdGdldFN0eWxlcyA9IGZ1bmN0aW9uKCBlbGVtICkge1xyXG5cdFx0cmV0dXJuIGVsZW0uY3VycmVudFN0eWxlO1xyXG5cdH07XHJcblxyXG5cdGN1ckNTUyA9IGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCBjb21wdXRlZCApIHtcclxuXHRcdHZhciBsZWZ0LCBycywgcnNMZWZ0LCByZXQsXHJcblx0XHRcdHN0eWxlID0gZWxlbS5zdHlsZTtcclxuXHJcblx0XHRjb21wdXRlZCA9IGNvbXB1dGVkIHx8IGdldFN0eWxlcyggZWxlbSApO1xyXG5cdFx0cmV0ID0gY29tcHV0ZWQgPyBjb21wdXRlZFsgbmFtZSBdIDogdW5kZWZpbmVkO1xyXG5cclxuXHRcdC8vIEF2b2lkIHNldHRpbmcgcmV0IHRvIGVtcHR5IHN0cmluZyBoZXJlXHJcblx0XHQvLyBzbyB3ZSBkb24ndCBkZWZhdWx0IHRvIGF1dG9cclxuXHRcdGlmICggcmV0ID09IG51bGwgJiYgc3R5bGUgJiYgc3R5bGVbIG5hbWUgXSApIHtcclxuXHRcdFx0cmV0ID0gc3R5bGVbIG5hbWUgXTtcclxuXHRcdH1cclxuXHJcblx0XHQvLyBGcm9tIHRoZSBhd2Vzb21lIGhhY2sgYnkgRGVhbiBFZHdhcmRzXHJcblx0XHQvLyBodHRwOi8vZXJpay5lYWUubmV0L2FyY2hpdmVzLzIwMDcvMDcvMjcvMTguNTQuMTUvI2NvbW1lbnQtMTAyMjkxXHJcblxyXG5cdFx0Ly8gSWYgd2UncmUgbm90IGRlYWxpbmcgd2l0aCBhIHJlZ3VsYXIgcGl4ZWwgbnVtYmVyXHJcblx0XHQvLyBidXQgYSBudW1iZXIgdGhhdCBoYXMgYSB3ZWlyZCBlbmRpbmcsIHdlIG5lZWQgdG8gY29udmVydCBpdCB0byBwaXhlbHNcclxuXHRcdC8vIGJ1dCBub3QgcG9zaXRpb24gY3NzIGF0dHJpYnV0ZXMsIGFzIHRob3NlIGFyZSBwcm9wb3J0aW9uYWwgdG8gdGhlIHBhcmVudCBlbGVtZW50IGluc3RlYWRcclxuXHRcdC8vIGFuZCB3ZSBjYW4ndCBtZWFzdXJlIHRoZSBwYXJlbnQgaW5zdGVhZCBiZWNhdXNlIGl0IG1pZ2h0IHRyaWdnZXIgYSBcInN0YWNraW5nIGRvbGxzXCIgcHJvYmxlbVxyXG5cdFx0aWYgKCBybnVtbm9ucHgudGVzdCggcmV0ICkgJiYgIXJwb3NpdGlvbi50ZXN0KCBuYW1lICkgKSB7XHJcblxyXG5cdFx0XHQvLyBSZW1lbWJlciB0aGUgb3JpZ2luYWwgdmFsdWVzXHJcblx0XHRcdGxlZnQgPSBzdHlsZS5sZWZ0O1xyXG5cdFx0XHRycyA9IGVsZW0ucnVudGltZVN0eWxlO1xyXG5cdFx0XHRyc0xlZnQgPSBycyAmJiBycy5sZWZ0O1xyXG5cclxuXHRcdFx0Ly8gUHV0IGluIHRoZSBuZXcgdmFsdWVzIHRvIGdldCBhIGNvbXB1dGVkIHZhbHVlIG91dFxyXG5cdFx0XHRpZiAoIHJzTGVmdCApIHtcclxuXHRcdFx0XHRycy5sZWZ0ID0gZWxlbS5jdXJyZW50U3R5bGUubGVmdDtcclxuXHRcdFx0fVxyXG5cdFx0XHRzdHlsZS5sZWZ0ID0gbmFtZSA9PT0gXCJmb250U2l6ZVwiID8gXCIxZW1cIiA6IHJldDtcclxuXHRcdFx0cmV0ID0gc3R5bGUucGl4ZWxMZWZ0ICsgXCJweFwiO1xyXG5cclxuXHRcdFx0Ly8gUmV2ZXJ0IHRoZSBjaGFuZ2VkIHZhbHVlc1xyXG5cdFx0XHRzdHlsZS5sZWZ0ID0gbGVmdDtcclxuXHRcdFx0aWYgKCByc0xlZnQgKSB7XHJcblx0XHRcdFx0cnMubGVmdCA9IHJzTGVmdDtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cclxuXHRcdC8vIFN1cHBvcnQ6IElFXHJcblx0XHQvLyBJRSByZXR1cm5zIHpJbmRleCB2YWx1ZSBhcyBhbiBpbnRlZ2VyLlxyXG5cdFx0cmV0dXJuIHJldCA9PT0gdW5kZWZpbmVkID9cclxuXHRcdFx0cmV0IDpcclxuXHRcdFx0cmV0ICsgXCJcIiB8fCBcImF1dG9cIjtcclxuXHR9O1xyXG59XHJcblxyXG5cclxuXHJcblxyXG5mdW5jdGlvbiBhZGRHZXRIb29rSWYoIGNvbmRpdGlvbkZuLCBob29rRm4gKSB7XHJcblx0Ly8gRGVmaW5lIHRoZSBob29rLCB3ZSdsbCBjaGVjayBvbiB0aGUgZmlyc3QgcnVuIGlmIGl0J3MgcmVhbGx5IG5lZWRlZC5cclxuXHRyZXR1cm4ge1xyXG5cdFx0Z2V0OiBmdW5jdGlvbigpIHtcclxuXHRcdFx0dmFyIGNvbmRpdGlvbiA9IGNvbmRpdGlvbkZuKCk7XHJcblxyXG5cdFx0XHRpZiAoIGNvbmRpdGlvbiA9PSBudWxsICkge1xyXG5cdFx0XHRcdC8vIFRoZSB0ZXN0IHdhcyBub3QgcmVhZHkgYXQgdGhpcyBwb2ludDsgc2NyZXcgdGhlIGhvb2sgdGhpcyB0aW1lXHJcblx0XHRcdFx0Ly8gYnV0IGNoZWNrIGFnYWluIHdoZW4gbmVlZGVkIG5leHQgdGltZS5cclxuXHRcdFx0XHRyZXR1cm47XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdGlmICggY29uZGl0aW9uICkge1xyXG5cdFx0XHRcdC8vIEhvb2sgbm90IG5lZWRlZCAob3IgaXQncyBub3QgcG9zc2libGUgdG8gdXNlIGl0IGR1ZSB0byBtaXNzaW5nIGRlcGVuZGVuY3kpLFxyXG5cdFx0XHRcdC8vIHJlbW92ZSBpdC5cclxuXHRcdFx0XHQvLyBTaW5jZSB0aGVyZSBhcmUgbm8gb3RoZXIgaG9va3MgZm9yIG1hcmdpblJpZ2h0LCByZW1vdmUgdGhlIHdob2xlIG9iamVjdC5cclxuXHRcdFx0XHRkZWxldGUgdGhpcy5nZXQ7XHJcblx0XHRcdFx0cmV0dXJuO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHQvLyBIb29rIG5lZWRlZDsgcmVkZWZpbmUgaXQgc28gdGhhdCB0aGUgc3VwcG9ydCB0ZXN0IGlzIG5vdCBleGVjdXRlZCBhZ2Fpbi5cclxuXHJcblx0XHRcdHJldHVybiAodGhpcy5nZXQgPSBob29rRm4pLmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKTtcclxuXHRcdH1cclxuXHR9O1xyXG59XHJcblxyXG5cclxuKGZ1bmN0aW9uKCkge1xyXG5cdC8vIE1pbmlmaWVkOiB2YXIgYixjLGQsZSxmLGcsIGgsaVxyXG5cdHZhciBkaXYsIHN0eWxlLCBhLCBwaXhlbFBvc2l0aW9uVmFsLCBib3hTaXppbmdSZWxpYWJsZVZhbCxcclxuXHRcdHJlbGlhYmxlSGlkZGVuT2Zmc2V0c1ZhbCwgcmVsaWFibGVNYXJnaW5SaWdodFZhbDtcclxuXHJcblx0Ly8gU2V0dXBcclxuXHRkaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImRpdlwiICk7XHJcblx0ZGl2LmlubmVySFRNTCA9IFwiICA8bGluay8+PHRhYmxlPjwvdGFibGU+PGEgaHJlZj0nL2EnPmE8L2E+PGlucHV0IHR5cGU9J2NoZWNrYm94Jy8+XCI7XHJcblx0YSA9IGRpdi5nZXRFbGVtZW50c0J5VGFnTmFtZSggXCJhXCIgKVsgMCBdO1xyXG5cdHN0eWxlID0gYSAmJiBhLnN0eWxlO1xyXG5cclxuXHQvLyBGaW5pc2ggZWFybHkgaW4gbGltaXRlZCAobm9uLWJyb3dzZXIpIGVudmlyb25tZW50c1xyXG5cdGlmICggIXN0eWxlICkge1xyXG5cdFx0cmV0dXJuO1xyXG5cdH1cclxuXHJcblx0c3R5bGUuY3NzVGV4dCA9IFwiZmxvYXQ6bGVmdDtvcGFjaXR5Oi41XCI7XHJcblxyXG5cdC8vIFN1cHBvcnQ6IElFPDlcclxuXHQvLyBNYWtlIHN1cmUgdGhhdCBlbGVtZW50IG9wYWNpdHkgZXhpc3RzIChhcyBvcHBvc2VkIHRvIGZpbHRlcilcclxuXHRzdXBwb3J0Lm9wYWNpdHkgPSBzdHlsZS5vcGFjaXR5ID09PSBcIjAuNVwiO1xyXG5cclxuXHQvLyBWZXJpZnkgc3R5bGUgZmxvYXQgZXhpc3RlbmNlXHJcblx0Ly8gKElFIHVzZXMgc3R5bGVGbG9hdCBpbnN0ZWFkIG9mIGNzc0Zsb2F0KVxyXG5cdHN1cHBvcnQuY3NzRmxvYXQgPSAhIXN0eWxlLmNzc0Zsb2F0O1xyXG5cclxuXHRkaXYuc3R5bGUuYmFja2dyb3VuZENsaXAgPSBcImNvbnRlbnQtYm94XCI7XHJcblx0ZGl2LmNsb25lTm9kZSggdHJ1ZSApLnN0eWxlLmJhY2tncm91bmRDbGlwID0gXCJcIjtcclxuXHRzdXBwb3J0LmNsZWFyQ2xvbmVTdHlsZSA9IGRpdi5zdHlsZS5iYWNrZ3JvdW5kQ2xpcCA9PT0gXCJjb250ZW50LWJveFwiO1xyXG5cclxuXHQvLyBTdXBwb3J0OiBGaXJlZm94PDI5LCBBbmRyb2lkIDIuM1xyXG5cdC8vIFZlbmRvci1wcmVmaXggYm94LXNpemluZ1xyXG5cdHN1cHBvcnQuYm94U2l6aW5nID0gc3R5bGUuYm94U2l6aW5nID09PSBcIlwiIHx8IHN0eWxlLk1vekJveFNpemluZyA9PT0gXCJcIiB8fFxyXG5cdFx0c3R5bGUuV2Via2l0Qm94U2l6aW5nID09PSBcIlwiO1xyXG5cclxuXHRqUXVlcnkuZXh0ZW5kKHN1cHBvcnQsIHtcclxuXHRcdHJlbGlhYmxlSGlkZGVuT2Zmc2V0czogZnVuY3Rpb24oKSB7XHJcblx0XHRcdGlmICggcmVsaWFibGVIaWRkZW5PZmZzZXRzVmFsID09IG51bGwgKSB7XHJcblx0XHRcdFx0Y29tcHV0ZVN0eWxlVGVzdHMoKTtcclxuXHRcdFx0fVxyXG5cdFx0XHRyZXR1cm4gcmVsaWFibGVIaWRkZW5PZmZzZXRzVmFsO1xyXG5cdFx0fSxcclxuXHJcblx0XHRib3hTaXppbmdSZWxpYWJsZTogZnVuY3Rpb24oKSB7XHJcblx0XHRcdGlmICggYm94U2l6aW5nUmVsaWFibGVWYWwgPT0gbnVsbCApIHtcclxuXHRcdFx0XHRjb21wdXRlU3R5bGVUZXN0cygpO1xyXG5cdFx0XHR9XHJcblx0XHRcdHJldHVybiBib3hTaXppbmdSZWxpYWJsZVZhbDtcclxuXHRcdH0sXHJcblxyXG5cdFx0cGl4ZWxQb3NpdGlvbjogZnVuY3Rpb24oKSB7XHJcblx0XHRcdGlmICggcGl4ZWxQb3NpdGlvblZhbCA9PSBudWxsICkge1xyXG5cdFx0XHRcdGNvbXB1dGVTdHlsZVRlc3RzKCk7XHJcblx0XHRcdH1cclxuXHRcdFx0cmV0dXJuIHBpeGVsUG9zaXRpb25WYWw7XHJcblx0XHR9LFxyXG5cclxuXHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgMi4zXHJcblx0XHRyZWxpYWJsZU1hcmdpblJpZ2h0OiBmdW5jdGlvbigpIHtcclxuXHRcdFx0aWYgKCByZWxpYWJsZU1hcmdpblJpZ2h0VmFsID09IG51bGwgKSB7XHJcblx0XHRcdFx0Y29tcHV0ZVN0eWxlVGVzdHMoKTtcclxuXHRcdFx0fVxyXG5cdFx0XHRyZXR1cm4gcmVsaWFibGVNYXJnaW5SaWdodFZhbDtcclxuXHRcdH1cclxuXHR9KTtcclxuXHJcblx0ZnVuY3Rpb24gY29tcHV0ZVN0eWxlVGVzdHMoKSB7XHJcblx0XHQvLyBNaW5pZmllZDogdmFyIGIsYyxkLGpcclxuXHRcdHZhciBkaXYsIGJvZHksIGNvbnRhaW5lciwgY29udGVudHM7XHJcblxyXG5cdFx0Ym9keSA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCBcImJvZHlcIiApWyAwIF07XHJcblx0XHRpZiAoICFib2R5IHx8ICFib2R5LnN0eWxlICkge1xyXG5cdFx0XHQvLyBUZXN0IGZpcmVkIHRvbyBlYXJseSBvciBpbiBhbiB1bnN1cHBvcnRlZCBlbnZpcm9ubWVudCwgZXhpdC5cclxuXHRcdFx0cmV0dXJuO1xyXG5cdFx0fVxyXG5cclxuXHRcdC8vIFNldHVwXHJcblx0XHRkaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImRpdlwiICk7XHJcblx0XHRjb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImRpdlwiICk7XHJcblx0XHRjb250YWluZXIuc3R5bGUuY3NzVGV4dCA9IFwicG9zaXRpb246YWJzb2x1dGU7Ym9yZGVyOjA7d2lkdGg6MDtoZWlnaHQ6MDt0b3A6MDtsZWZ0Oi05OTk5cHhcIjtcclxuXHRcdGJvZHkuYXBwZW5kQ2hpbGQoIGNvbnRhaW5lciApLmFwcGVuZENoaWxkKCBkaXYgKTtcclxuXHJcblx0XHRkaXYuc3R5bGUuY3NzVGV4dCA9XHJcblx0XHRcdC8vIFN1cHBvcnQ6IEZpcmVmb3g8MjksIEFuZHJvaWQgMi4zXHJcblx0XHRcdC8vIFZlbmRvci1wcmVmaXggYm94LXNpemluZ1xyXG5cdFx0XHRcIi13ZWJraXQtYm94LXNpemluZzpib3JkZXItYm94Oy1tb3otYm94LXNpemluZzpib3JkZXItYm94O1wiICtcclxuXHRcdFx0XCJib3gtc2l6aW5nOmJvcmRlci1ib3g7ZGlzcGxheTpibG9jazttYXJnaW4tdG9wOjElO3RvcDoxJTtcIiArXHJcblx0XHRcdFwiYm9yZGVyOjFweDtwYWRkaW5nOjFweDt3aWR0aDo0cHg7cG9zaXRpb246YWJzb2x1dGVcIjtcclxuXHJcblx0XHQvLyBTdXBwb3J0OiBJRTw5XHJcblx0XHQvLyBBc3N1bWUgcmVhc29uYWJsZSB2YWx1ZXMgaW4gdGhlIGFic2VuY2Ugb2YgZ2V0Q29tcHV0ZWRTdHlsZVxyXG5cdFx0cGl4ZWxQb3NpdGlvblZhbCA9IGJveFNpemluZ1JlbGlhYmxlVmFsID0gZmFsc2U7XHJcblx0XHRyZWxpYWJsZU1hcmdpblJpZ2h0VmFsID0gdHJ1ZTtcclxuXHJcblx0XHQvLyBDaGVjayBmb3IgZ2V0Q29tcHV0ZWRTdHlsZSBzbyB0aGF0IHRoaXMgY29kZSBpcyBub3QgcnVuIGluIElFPDkuXHJcblx0XHRpZiAoIHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlICkge1xyXG5cdFx0XHRwaXhlbFBvc2l0aW9uVmFsID0gKCB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZSggZGl2LCBudWxsICkgfHwge30gKS50b3AgIT09IFwiMSVcIjtcclxuXHRcdFx0Ym94U2l6aW5nUmVsaWFibGVWYWwgPVxyXG5cdFx0XHRcdCggd2luZG93LmdldENvbXB1dGVkU3R5bGUoIGRpdiwgbnVsbCApIHx8IHsgd2lkdGg6IFwiNHB4XCIgfSApLndpZHRoID09PSBcIjRweFwiO1xyXG5cclxuXHRcdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCAyLjNcclxuXHRcdFx0Ly8gRGl2IHdpdGggZXhwbGljaXQgd2lkdGggYW5kIG5vIG1hcmdpbi1yaWdodCBpbmNvcnJlY3RseVxyXG5cdFx0XHQvLyBnZXRzIGNvbXB1dGVkIG1hcmdpbi1yaWdodCBiYXNlZCBvbiB3aWR0aCBvZiBjb250YWluZXIgKCMzMzMzKVxyXG5cdFx0XHQvLyBXZWJLaXQgQnVnIDEzMzQzIC0gZ2V0Q29tcHV0ZWRTdHlsZSByZXR1cm5zIHdyb25nIHZhbHVlIGZvciBtYXJnaW4tcmlnaHRcclxuXHRcdFx0Y29udGVudHMgPSBkaXYuYXBwZW5kQ2hpbGQoIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiZGl2XCIgKSApO1xyXG5cclxuXHRcdFx0Ly8gUmVzZXQgQ1NTOiBib3gtc2l6aW5nOyBkaXNwbGF5OyBtYXJnaW47IGJvcmRlcjsgcGFkZGluZ1xyXG5cdFx0XHRjb250ZW50cy5zdHlsZS5jc3NUZXh0ID0gZGl2LnN0eWxlLmNzc1RleHQgPVxyXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IEZpcmVmb3g8MjksIEFuZHJvaWQgMi4zXHJcblx0XHRcdFx0Ly8gVmVuZG9yLXByZWZpeCBib3gtc2l6aW5nXHJcblx0XHRcdFx0XCItd2Via2l0LWJveC1zaXppbmc6Y29udGVudC1ib3g7LW1vei1ib3gtc2l6aW5nOmNvbnRlbnQtYm94O1wiICtcclxuXHRcdFx0XHRcImJveC1zaXppbmc6Y29udGVudC1ib3g7ZGlzcGxheTpibG9jazttYXJnaW46MDtib3JkZXI6MDtwYWRkaW5nOjBcIjtcclxuXHRcdFx0Y29udGVudHMuc3R5bGUubWFyZ2luUmlnaHQgPSBjb250ZW50cy5zdHlsZS53aWR0aCA9IFwiMFwiO1xyXG5cdFx0XHRkaXYuc3R5bGUud2lkdGggPSBcIjFweFwiO1xyXG5cclxuXHRcdFx0cmVsaWFibGVNYXJnaW5SaWdodFZhbCA9XHJcblx0XHRcdFx0IXBhcnNlRmxvYXQoICggd2luZG93LmdldENvbXB1dGVkU3R5bGUoIGNvbnRlbnRzLCBudWxsICkgfHwge30gKS5tYXJnaW5SaWdodCApO1xyXG5cclxuXHRcdFx0ZGl2LnJlbW92ZUNoaWxkKCBjb250ZW50cyApO1xyXG5cdFx0fVxyXG5cclxuXHRcdC8vIFN1cHBvcnQ6IElFOFxyXG5cdFx0Ly8gQ2hlY2sgaWYgdGFibGUgY2VsbHMgc3RpbGwgaGF2ZSBvZmZzZXRXaWR0aC9IZWlnaHQgd2hlbiB0aGV5IGFyZSBzZXRcclxuXHRcdC8vIHRvIGRpc3BsYXk6bm9uZSBhbmQgdGhlcmUgYXJlIHN0aWxsIG90aGVyIHZpc2libGUgdGFibGUgY2VsbHMgaW4gYVxyXG5cdFx0Ly8gdGFibGUgcm93OyBpZiBzbywgb2Zmc2V0V2lkdGgvSGVpZ2h0IGFyZSBub3QgcmVsaWFibGUgZm9yIHVzZSB3aGVuXHJcblx0XHQvLyBkZXRlcm1pbmluZyBpZiBhbiBlbGVtZW50IGhhcyBiZWVuIGhpZGRlbiBkaXJlY3RseSB1c2luZ1xyXG5cdFx0Ly8gZGlzcGxheTpub25lIChpdCBpcyBzdGlsbCBzYWZlIHRvIHVzZSBvZmZzZXRzIGlmIGEgcGFyZW50IGVsZW1lbnQgaXNcclxuXHRcdC8vIGhpZGRlbjsgZG9uIHNhZmV0eSBnb2dnbGVzIGFuZCBzZWUgYnVnICM0NTEyIGZvciBtb3JlIGluZm9ybWF0aW9uKS5cclxuXHRcdGRpdi5pbm5lckhUTUwgPSBcIjx0YWJsZT48dHI+PHRkPjwvdGQ+PHRkPnQ8L3RkPjwvdHI+PC90YWJsZT5cIjtcclxuXHRcdGNvbnRlbnRzID0gZGl2LmdldEVsZW1lbnRzQnlUYWdOYW1lKCBcInRkXCIgKTtcclxuXHRcdGNvbnRlbnRzWyAwIF0uc3R5bGUuY3NzVGV4dCA9IFwibWFyZ2luOjA7Ym9yZGVyOjA7cGFkZGluZzowO2Rpc3BsYXk6bm9uZVwiO1xyXG5cdFx0cmVsaWFibGVIaWRkZW5PZmZzZXRzVmFsID0gY29udGVudHNbIDAgXS5vZmZzZXRIZWlnaHQgPT09IDA7XHJcblx0XHRpZiAoIHJlbGlhYmxlSGlkZGVuT2Zmc2V0c1ZhbCApIHtcclxuXHRcdFx0Y29udGVudHNbIDAgXS5zdHlsZS5kaXNwbGF5ID0gXCJcIjtcclxuXHRcdFx0Y29udGVudHNbIDEgXS5zdHlsZS5kaXNwbGF5ID0gXCJub25lXCI7XHJcblx0XHRcdHJlbGlhYmxlSGlkZGVuT2Zmc2V0c1ZhbCA9IGNvbnRlbnRzWyAwIF0ub2Zmc2V0SGVpZ2h0ID09PSAwO1xyXG5cdFx0fVxyXG5cclxuXHRcdGJvZHkucmVtb3ZlQ2hpbGQoIGNvbnRhaW5lciApO1xyXG5cdH1cclxuXHJcbn0pKCk7XHJcblxyXG5cclxuLy8gQSBtZXRob2QgZm9yIHF1aWNrbHkgc3dhcHBpbmcgaW4vb3V0IENTUyBwcm9wZXJ0aWVzIHRvIGdldCBjb3JyZWN0IGNhbGN1bGF0aW9ucy5cclxualF1ZXJ5LnN3YXAgPSBmdW5jdGlvbiggZWxlbSwgb3B0aW9ucywgY2FsbGJhY2ssIGFyZ3MgKSB7XHJcblx0dmFyIHJldCwgbmFtZSxcclxuXHRcdG9sZCA9IHt9O1xyXG5cclxuXHQvLyBSZW1lbWJlciB0aGUgb2xkIHZhbHVlcywgYW5kIGluc2VydCB0aGUgbmV3IG9uZXNcclxuXHRmb3IgKCBuYW1lIGluIG9wdGlvbnMgKSB7XHJcblx0XHRvbGRbIG5hbWUgXSA9IGVsZW0uc3R5bGVbIG5hbWUgXTtcclxuXHRcdGVsZW0uc3R5bGVbIG5hbWUgXSA9IG9wdGlvbnNbIG5hbWUgXTtcclxuXHR9XHJcblxyXG5cdHJldCA9IGNhbGxiYWNrLmFwcGx5KCBlbGVtLCBhcmdzIHx8IFtdICk7XHJcblxyXG5cdC8vIFJldmVydCB0aGUgb2xkIHZhbHVlc1xyXG5cdGZvciAoIG5hbWUgaW4gb3B0aW9ucyApIHtcclxuXHRcdGVsZW0uc3R5bGVbIG5hbWUgXSA9IG9sZFsgbmFtZSBdO1xyXG5cdH1cclxuXHJcblx0cmV0dXJuIHJldDtcclxufTtcclxuXHJcblxyXG52YXJcclxuXHRcdHJhbHBoYSA9IC9hbHBoYVxcKFteKV0qXFwpL2ksXHJcblx0cm9wYWNpdHkgPSAvb3BhY2l0eVxccyo9XFxzKihbXildKikvLFxyXG5cclxuXHQvLyBzd2FwcGFibGUgaWYgZGlzcGxheSBpcyBub25lIG9yIHN0YXJ0cyB3aXRoIHRhYmxlIGV4Y2VwdCBcInRhYmxlXCIsIFwidGFibGUtY2VsbFwiLCBvciBcInRhYmxlLWNhcHRpb25cIlxyXG5cdC8vIHNlZSBoZXJlIGZvciBkaXNwbGF5IHZhbHVlczogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9DU1MvZGlzcGxheVxyXG5cdHJkaXNwbGF5c3dhcCA9IC9eKG5vbmV8dGFibGUoPyEtY1tlYV0pLispLyxcclxuXHRybnVtc3BsaXQgPSBuZXcgUmVnRXhwKCBcIl4oXCIgKyBwbnVtICsgXCIpKC4qKSRcIiwgXCJpXCIgKSxcclxuXHRycmVsTnVtID0gbmV3IFJlZ0V4cCggXCJeKFsrLV0pPShcIiArIHBudW0gKyBcIilcIiwgXCJpXCIgKSxcclxuXHJcblx0Y3NzU2hvdyA9IHsgcG9zaXRpb246IFwiYWJzb2x1dGVcIiwgdmlzaWJpbGl0eTogXCJoaWRkZW5cIiwgZGlzcGxheTogXCJibG9ja1wiIH0sXHJcblx0Y3NzTm9ybWFsVHJhbnNmb3JtID0ge1xyXG5cdFx0bGV0dGVyU3BhY2luZzogXCIwXCIsXHJcblx0XHRmb250V2VpZ2h0OiBcIjQwMFwiXHJcblx0fSxcclxuXHJcblx0Y3NzUHJlZml4ZXMgPSBbIFwiV2Via2l0XCIsIFwiT1wiLCBcIk1velwiLCBcIm1zXCIgXTtcclxuXHJcblxyXG4vLyByZXR1cm4gYSBjc3MgcHJvcGVydHkgbWFwcGVkIHRvIGEgcG90ZW50aWFsbHkgdmVuZG9yIHByZWZpeGVkIHByb3BlcnR5XHJcbmZ1bmN0aW9uIHZlbmRvclByb3BOYW1lKCBzdHlsZSwgbmFtZSApIHtcclxuXHJcblx0Ly8gc2hvcnRjdXQgZm9yIG5hbWVzIHRoYXQgYXJlIG5vdCB2ZW5kb3IgcHJlZml4ZWRcclxuXHRpZiAoIG5hbWUgaW4gc3R5bGUgKSB7XHJcblx0XHRyZXR1cm4gbmFtZTtcclxuXHR9XHJcblxyXG5cdC8vIGNoZWNrIGZvciB2ZW5kb3IgcHJlZml4ZWQgbmFtZXNcclxuXHR2YXIgY2FwTmFtZSA9IG5hbWUuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyBuYW1lLnNsaWNlKDEpLFxyXG5cdFx0b3JpZ05hbWUgPSBuYW1lLFxyXG5cdFx0aSA9IGNzc1ByZWZpeGVzLmxlbmd0aDtcclxuXHJcblx0d2hpbGUgKCBpLS0gKSB7XHJcblx0XHRuYW1lID0gY3NzUHJlZml4ZXNbIGkgXSArIGNhcE5hbWU7XHJcblx0XHRpZiAoIG5hbWUgaW4gc3R5bGUgKSB7XHJcblx0XHRcdHJldHVybiBuYW1lO1xyXG5cdFx0fVxyXG5cdH1cclxuXHJcblx0cmV0dXJuIG9yaWdOYW1lO1xyXG59XHJcblxyXG5mdW5jdGlvbiBzaG93SGlkZSggZWxlbWVudHMsIHNob3cgKSB7XHJcblx0dmFyIGRpc3BsYXksIGVsZW0sIGhpZGRlbixcclxuXHRcdHZhbHVlcyA9IFtdLFxyXG5cdFx0aW5kZXggPSAwLFxyXG5cdFx0bGVuZ3RoID0gZWxlbWVudHMubGVuZ3RoO1xyXG5cclxuXHRmb3IgKCA7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrICkge1xyXG5cdFx0ZWxlbSA9IGVsZW1lbnRzWyBpbmRleCBdO1xyXG5cdFx0aWYgKCAhZWxlbS5zdHlsZSApIHtcclxuXHRcdFx0Y29udGludWU7XHJcblx0XHR9XHJcblxyXG5cdFx0dmFsdWVzWyBpbmRleCBdID0galF1ZXJ5Ll9kYXRhKCBlbGVtLCBcIm9sZGRpc3BsYXlcIiApO1xyXG5cdFx0ZGlzcGxheSA9IGVsZW0uc3R5bGUuZGlzcGxheTtcclxuXHRcdGlmICggc2hvdyApIHtcclxuXHRcdFx0Ly8gUmVzZXQgdGhlIGlubGluZSBkaXNwbGF5IG9mIHRoaXMgZWxlbWVudCB0byBsZWFybiBpZiBpdCBpc1xyXG5cdFx0XHQvLyBiZWluZyBoaWRkZW4gYnkgY2FzY2FkZWQgcnVsZXMgb3Igbm90XHJcblx0XHRcdGlmICggIXZhbHVlc1sgaW5kZXggXSAmJiBkaXNwbGF5ID09PSBcIm5vbmVcIiApIHtcclxuXHRcdFx0XHRlbGVtLnN0eWxlLmRpc3BsYXkgPSBcIlwiO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHQvLyBTZXQgZWxlbWVudHMgd2hpY2ggaGF2ZSBiZWVuIG92ZXJyaWRkZW4gd2l0aCBkaXNwbGF5OiBub25lXHJcblx0XHRcdC8vIGluIGEgc3R5bGVzaGVldCB0byB3aGF0ZXZlciB0aGUgZGVmYXVsdCBicm93c2VyIHN0eWxlIGlzXHJcblx0XHRcdC8vIGZvciBzdWNoIGFuIGVsZW1lbnRcclxuXHRcdFx0aWYgKCBlbGVtLnN0eWxlLmRpc3BsYXkgPT09IFwiXCIgJiYgaXNIaWRkZW4oIGVsZW0gKSApIHtcclxuXHRcdFx0XHR2YWx1ZXNbIGluZGV4IF0gPSBqUXVlcnkuX2RhdGEoIGVsZW0sIFwib2xkZGlzcGxheVwiLCBkZWZhdWx0RGlzcGxheShlbGVtLm5vZGVOYW1lKSApO1xyXG5cdFx0XHR9XHJcblx0XHR9IGVsc2Uge1xyXG5cdFx0XHRoaWRkZW4gPSBpc0hpZGRlbiggZWxlbSApO1xyXG5cclxuXHRcdFx0aWYgKCBkaXNwbGF5ICYmIGRpc3BsYXkgIT09IFwibm9uZVwiIHx8ICFoaWRkZW4gKSB7XHJcblx0XHRcdFx0alF1ZXJ5Ll9kYXRhKCBlbGVtLCBcIm9sZGRpc3BsYXlcIiwgaGlkZGVuID8gZGlzcGxheSA6IGpRdWVyeS5jc3MoIGVsZW0sIFwiZGlzcGxheVwiICkgKTtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdH1cclxuXHJcblx0Ly8gU2V0IHRoZSBkaXNwbGF5IG9mIG1vc3Qgb2YgdGhlIGVsZW1lbnRzIGluIGEgc2Vjb25kIGxvb3BcclxuXHQvLyB0byBhdm9pZCB0aGUgY29uc3RhbnQgcmVmbG93XHJcblx0Zm9yICggaW5kZXggPSAwOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKyApIHtcclxuXHRcdGVsZW0gPSBlbGVtZW50c1sgaW5kZXggXTtcclxuXHRcdGlmICggIWVsZW0uc3R5bGUgKSB7XHJcblx0XHRcdGNvbnRpbnVlO1xyXG5cdFx0fVxyXG5cdFx0aWYgKCAhc2hvdyB8fCBlbGVtLnN0eWxlLmRpc3BsYXkgPT09IFwibm9uZVwiIHx8IGVsZW0uc3R5bGUuZGlzcGxheSA9PT0gXCJcIiApIHtcclxuXHRcdFx0ZWxlbS5zdHlsZS5kaXNwbGF5ID0gc2hvdyA/IHZhbHVlc1sgaW5kZXggXSB8fCBcIlwiIDogXCJub25lXCI7XHJcblx0XHR9XHJcblx0fVxyXG5cclxuXHRyZXR1cm4gZWxlbWVudHM7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHNldFBvc2l0aXZlTnVtYmVyKCBlbGVtLCB2YWx1ZSwgc3VidHJhY3QgKSB7XHJcblx0dmFyIG1hdGNoZXMgPSBybnVtc3BsaXQuZXhlYyggdmFsdWUgKTtcclxuXHRyZXR1cm4gbWF0Y2hlcyA/XHJcblx0XHQvLyBHdWFyZCBhZ2FpbnN0IHVuZGVmaW5lZCBcInN1YnRyYWN0XCIsIGUuZy4sIHdoZW4gdXNlZCBhcyBpbiBjc3NIb29rc1xyXG5cdFx0TWF0aC5tYXgoIDAsIG1hdGNoZXNbIDEgXSAtICggc3VidHJhY3QgfHwgMCApICkgKyAoIG1hdGNoZXNbIDIgXSB8fCBcInB4XCIgKSA6XHJcblx0XHR2YWx1ZTtcclxufVxyXG5cclxuZnVuY3Rpb24gYXVnbWVudFdpZHRoT3JIZWlnaHQoIGVsZW0sIG5hbWUsIGV4dHJhLCBpc0JvcmRlckJveCwgc3R5bGVzICkge1xyXG5cdHZhciBpID0gZXh0cmEgPT09ICggaXNCb3JkZXJCb3ggPyBcImJvcmRlclwiIDogXCJjb250ZW50XCIgKSA/XHJcblx0XHQvLyBJZiB3ZSBhbHJlYWR5IGhhdmUgdGhlIHJpZ2h0IG1lYXN1cmVtZW50LCBhdm9pZCBhdWdtZW50YXRpb25cclxuXHRcdDQgOlxyXG5cdFx0Ly8gT3RoZXJ3aXNlIGluaXRpYWxpemUgZm9yIGhvcml6b250YWwgb3IgdmVydGljYWwgcHJvcGVydGllc1xyXG5cdFx0bmFtZSA9PT0gXCJ3aWR0aFwiID8gMSA6IDAsXHJcblxyXG5cdFx0dmFsID0gMDtcclxuXHJcblx0Zm9yICggOyBpIDwgNDsgaSArPSAyICkge1xyXG5cdFx0Ly8gYm90aCBib3ggbW9kZWxzIGV4Y2x1ZGUgbWFyZ2luLCBzbyBhZGQgaXQgaWYgd2Ugd2FudCBpdFxyXG5cdFx0aWYgKCBleHRyYSA9PT0gXCJtYXJnaW5cIiApIHtcclxuXHRcdFx0dmFsICs9IGpRdWVyeS5jc3MoIGVsZW0sIGV4dHJhICsgY3NzRXhwYW5kWyBpIF0sIHRydWUsIHN0eWxlcyApO1xyXG5cdFx0fVxyXG5cclxuXHRcdGlmICggaXNCb3JkZXJCb3ggKSB7XHJcblx0XHRcdC8vIGJvcmRlci1ib3ggaW5jbHVkZXMgcGFkZGluZywgc28gcmVtb3ZlIGl0IGlmIHdlIHdhbnQgY29udGVudFxyXG5cdFx0XHRpZiAoIGV4dHJhID09PSBcImNvbnRlbnRcIiApIHtcclxuXHRcdFx0XHR2YWwgLT0galF1ZXJ5LmNzcyggZWxlbSwgXCJwYWRkaW5nXCIgKyBjc3NFeHBhbmRbIGkgXSwgdHJ1ZSwgc3R5bGVzICk7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdC8vIGF0IHRoaXMgcG9pbnQsIGV4dHJhIGlzbid0IGJvcmRlciBub3IgbWFyZ2luLCBzbyByZW1vdmUgYm9yZGVyXHJcblx0XHRcdGlmICggZXh0cmEgIT09IFwibWFyZ2luXCIgKSB7XHJcblx0XHRcdFx0dmFsIC09IGpRdWVyeS5jc3MoIGVsZW0sIFwiYm9yZGVyXCIgKyBjc3NFeHBhbmRbIGkgXSArIFwiV2lkdGhcIiwgdHJ1ZSwgc3R5bGVzICk7XHJcblx0XHRcdH1cclxuXHRcdH0gZWxzZSB7XHJcblx0XHRcdC8vIGF0IHRoaXMgcG9pbnQsIGV4dHJhIGlzbid0IGNvbnRlbnQsIHNvIGFkZCBwYWRkaW5nXHJcblx0XHRcdHZhbCArPSBqUXVlcnkuY3NzKCBlbGVtLCBcInBhZGRpbmdcIiArIGNzc0V4cGFuZFsgaSBdLCB0cnVlLCBzdHlsZXMgKTtcclxuXHJcblx0XHRcdC8vIGF0IHRoaXMgcG9pbnQsIGV4dHJhIGlzbid0IGNvbnRlbnQgbm9yIHBhZGRpbmcsIHNvIGFkZCBib3JkZXJcclxuXHRcdFx0aWYgKCBleHRyYSAhPT0gXCJwYWRkaW5nXCIgKSB7XHJcblx0XHRcdFx0dmFsICs9IGpRdWVyeS5jc3MoIGVsZW0sIFwiYm9yZGVyXCIgKyBjc3NFeHBhbmRbIGkgXSArIFwiV2lkdGhcIiwgdHJ1ZSwgc3R5bGVzICk7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHR9XHJcblxyXG5cdHJldHVybiB2YWw7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGdldFdpZHRoT3JIZWlnaHQoIGVsZW0sIG5hbWUsIGV4dHJhICkge1xyXG5cclxuXHQvLyBTdGFydCB3aXRoIG9mZnNldCBwcm9wZXJ0eSwgd2hpY2ggaXMgZXF1aXZhbGVudCB0byB0aGUgYm9yZGVyLWJveCB2YWx1ZVxyXG5cdHZhciB2YWx1ZUlzQm9yZGVyQm94ID0gdHJ1ZSxcclxuXHRcdHZhbCA9IG5hbWUgPT09IFwid2lkdGhcIiA/IGVsZW0ub2Zmc2V0V2lkdGggOiBlbGVtLm9mZnNldEhlaWdodCxcclxuXHRcdHN0eWxlcyA9IGdldFN0eWxlcyggZWxlbSApLFxyXG5cdFx0aXNCb3JkZXJCb3ggPSBzdXBwb3J0LmJveFNpemluZyAmJiBqUXVlcnkuY3NzKCBlbGVtLCBcImJveFNpemluZ1wiLCBmYWxzZSwgc3R5bGVzICkgPT09IFwiYm9yZGVyLWJveFwiO1xyXG5cclxuXHQvLyBzb21lIG5vbi1odG1sIGVsZW1lbnRzIHJldHVybiB1bmRlZmluZWQgZm9yIG9mZnNldFdpZHRoLCBzbyBjaGVjayBmb3IgbnVsbC91bmRlZmluZWRcclxuXHQvLyBzdmcgLSBodHRwczovL2J1Z3ppbGxhLm1vemlsbGEub3JnL3Nob3dfYnVnLmNnaT9pZD02NDkyODVcclxuXHQvLyBNYXRoTUwgLSBodHRwczovL2J1Z3ppbGxhLm1vemlsbGEub3JnL3Nob3dfYnVnLmNnaT9pZD00OTE2NjhcclxuXHRpZiAoIHZhbCA8PSAwIHx8IHZhbCA9PSBudWxsICkge1xyXG5cdFx0Ly8gRmFsbCBiYWNrIHRvIGNvbXB1dGVkIHRoZW4gdW5jb21wdXRlZCBjc3MgaWYgbmVjZXNzYXJ5XHJcblx0XHR2YWwgPSBjdXJDU1MoIGVsZW0sIG5hbWUsIHN0eWxlcyApO1xyXG5cdFx0aWYgKCB2YWwgPCAwIHx8IHZhbCA9PSBudWxsICkge1xyXG5cdFx0XHR2YWwgPSBlbGVtLnN0eWxlWyBuYW1lIF07XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gQ29tcHV0ZWQgdW5pdCBpcyBub3QgcGl4ZWxzLiBTdG9wIGhlcmUgYW5kIHJldHVybi5cclxuXHRcdGlmICggcm51bW5vbnB4LnRlc3QodmFsKSApIHtcclxuXHRcdFx0cmV0dXJuIHZhbDtcclxuXHRcdH1cclxuXHJcblx0XHQvLyB3ZSBuZWVkIHRoZSBjaGVjayBmb3Igc3R5bGUgaW4gY2FzZSBhIGJyb3dzZXIgd2hpY2ggcmV0dXJucyB1bnJlbGlhYmxlIHZhbHVlc1xyXG5cdFx0Ly8gZm9yIGdldENvbXB1dGVkU3R5bGUgc2lsZW50bHkgZmFsbHMgYmFjayB0byB0aGUgcmVsaWFibGUgZWxlbS5zdHlsZVxyXG5cdFx0dmFsdWVJc0JvcmRlckJveCA9IGlzQm9yZGVyQm94ICYmICggc3VwcG9ydC5ib3hTaXppbmdSZWxpYWJsZSgpIHx8IHZhbCA9PT0gZWxlbS5zdHlsZVsgbmFtZSBdICk7XHJcblxyXG5cdFx0Ly8gTm9ybWFsaXplIFwiXCIsIGF1dG8sIGFuZCBwcmVwYXJlIGZvciBleHRyYVxyXG5cdFx0dmFsID0gcGFyc2VGbG9hdCggdmFsICkgfHwgMDtcclxuXHR9XHJcblxyXG5cdC8vIHVzZSB0aGUgYWN0aXZlIGJveC1zaXppbmcgbW9kZWwgdG8gYWRkL3N1YnRyYWN0IGlycmVsZXZhbnQgc3R5bGVzXHJcblx0cmV0dXJuICggdmFsICtcclxuXHRcdGF1Z21lbnRXaWR0aE9ySGVpZ2h0KFxyXG5cdFx0XHRlbGVtLFxyXG5cdFx0XHRuYW1lLFxyXG5cdFx0XHRleHRyYSB8fCAoIGlzQm9yZGVyQm94ID8gXCJib3JkZXJcIiA6IFwiY29udGVudFwiICksXHJcblx0XHRcdHZhbHVlSXNCb3JkZXJCb3gsXHJcblx0XHRcdHN0eWxlc1xyXG5cdFx0KVxyXG5cdCkgKyBcInB4XCI7XHJcbn1cclxuXHJcbmpRdWVyeS5leHRlbmQoe1xyXG5cdC8vIEFkZCBpbiBzdHlsZSBwcm9wZXJ0eSBob29rcyBmb3Igb3ZlcnJpZGluZyB0aGUgZGVmYXVsdFxyXG5cdC8vIGJlaGF2aW9yIG9mIGdldHRpbmcgYW5kIHNldHRpbmcgYSBzdHlsZSBwcm9wZXJ0eVxyXG5cdGNzc0hvb2tzOiB7XHJcblx0XHRvcGFjaXR5OiB7XHJcblx0XHRcdGdldDogZnVuY3Rpb24oIGVsZW0sIGNvbXB1dGVkICkge1xyXG5cdFx0XHRcdGlmICggY29tcHV0ZWQgKSB7XHJcblx0XHRcdFx0XHQvLyBXZSBzaG91bGQgYWx3YXlzIGdldCBhIG51bWJlciBiYWNrIGZyb20gb3BhY2l0eVxyXG5cdFx0XHRcdFx0dmFyIHJldCA9IGN1ckNTUyggZWxlbSwgXCJvcGFjaXR5XCIgKTtcclxuXHRcdFx0XHRcdHJldHVybiByZXQgPT09IFwiXCIgPyBcIjFcIiA6IHJldDtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHR9LFxyXG5cclxuXHQvLyBEb24ndCBhdXRvbWF0aWNhbGx5IGFkZCBcInB4XCIgdG8gdGhlc2UgcG9zc2libHktdW5pdGxlc3MgcHJvcGVydGllc1xyXG5cdGNzc051bWJlcjoge1xyXG5cdFx0XCJjb2x1bW5Db3VudFwiOiB0cnVlLFxyXG5cdFx0XCJmaWxsT3BhY2l0eVwiOiB0cnVlLFxyXG5cdFx0XCJmbGV4R3Jvd1wiOiB0cnVlLFxyXG5cdFx0XCJmbGV4U2hyaW5rXCI6IHRydWUsXHJcblx0XHRcImZvbnRXZWlnaHRcIjogdHJ1ZSxcclxuXHRcdFwibGluZUhlaWdodFwiOiB0cnVlLFxyXG5cdFx0XCJvcGFjaXR5XCI6IHRydWUsXHJcblx0XHRcIm9yZGVyXCI6IHRydWUsXHJcblx0XHRcIm9ycGhhbnNcIjogdHJ1ZSxcclxuXHRcdFwid2lkb3dzXCI6IHRydWUsXHJcblx0XHRcInpJbmRleFwiOiB0cnVlLFxyXG5cdFx0XCJ6b29tXCI6IHRydWVcclxuXHR9LFxyXG5cclxuXHQvLyBBZGQgaW4gcHJvcGVydGllcyB3aG9zZSBuYW1lcyB5b3Ugd2lzaCB0byBmaXggYmVmb3JlXHJcblx0Ly8gc2V0dGluZyBvciBnZXR0aW5nIHRoZSB2YWx1ZVxyXG5cdGNzc1Byb3BzOiB7XHJcblx0XHQvLyBub3JtYWxpemUgZmxvYXQgY3NzIHByb3BlcnR5XHJcblx0XHRcImZsb2F0XCI6IHN1cHBvcnQuY3NzRmxvYXQgPyBcImNzc0Zsb2F0XCIgOiBcInN0eWxlRmxvYXRcIlxyXG5cdH0sXHJcblxyXG5cdC8vIEdldCBhbmQgc2V0IHRoZSBzdHlsZSBwcm9wZXJ0eSBvbiBhIERPTSBOb2RlXHJcblx0c3R5bGU6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCB2YWx1ZSwgZXh0cmEgKSB7XHJcblx0XHQvLyBEb24ndCBzZXQgc3R5bGVzIG9uIHRleHQgYW5kIGNvbW1lbnQgbm9kZXNcclxuXHRcdGlmICggIWVsZW0gfHwgZWxlbS5ub2RlVHlwZSA9PT0gMyB8fCBlbGVtLm5vZGVUeXBlID09PSA4IHx8ICFlbGVtLnN0eWxlICkge1xyXG5cdFx0XHRyZXR1cm47XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gTWFrZSBzdXJlIHRoYXQgd2UncmUgd29ya2luZyB3aXRoIHRoZSByaWdodCBuYW1lXHJcblx0XHR2YXIgcmV0LCB0eXBlLCBob29rcyxcclxuXHRcdFx0b3JpZ05hbWUgPSBqUXVlcnkuY2FtZWxDYXNlKCBuYW1lICksXHJcblx0XHRcdHN0eWxlID0gZWxlbS5zdHlsZTtcclxuXHJcblx0XHRuYW1lID0galF1ZXJ5LmNzc1Byb3BzWyBvcmlnTmFtZSBdIHx8ICggalF1ZXJ5LmNzc1Byb3BzWyBvcmlnTmFtZSBdID0gdmVuZG9yUHJvcE5hbWUoIHN0eWxlLCBvcmlnTmFtZSApICk7XHJcblxyXG5cdFx0Ly8gZ2V0cyBob29rIGZvciB0aGUgcHJlZml4ZWQgdmVyc2lvblxyXG5cdFx0Ly8gZm9sbG93ZWQgYnkgdGhlIHVucHJlZml4ZWQgdmVyc2lvblxyXG5cdFx0aG9va3MgPSBqUXVlcnkuY3NzSG9va3NbIG5hbWUgXSB8fCBqUXVlcnkuY3NzSG9va3NbIG9yaWdOYW1lIF07XHJcblxyXG5cdFx0Ly8gQ2hlY2sgaWYgd2UncmUgc2V0dGluZyBhIHZhbHVlXHJcblx0XHRpZiAoIHZhbHVlICE9PSB1bmRlZmluZWQgKSB7XHJcblx0XHRcdHR5cGUgPSB0eXBlb2YgdmFsdWU7XHJcblxyXG5cdFx0XHQvLyBjb252ZXJ0IHJlbGF0aXZlIG51bWJlciBzdHJpbmdzICgrPSBvciAtPSkgdG8gcmVsYXRpdmUgbnVtYmVycy4gIzczNDVcclxuXHRcdFx0aWYgKCB0eXBlID09PSBcInN0cmluZ1wiICYmIChyZXQgPSBycmVsTnVtLmV4ZWMoIHZhbHVlICkpICkge1xyXG5cdFx0XHRcdHZhbHVlID0gKCByZXRbMV0gKyAxICkgKiByZXRbMl0gKyBwYXJzZUZsb2F0KCBqUXVlcnkuY3NzKCBlbGVtLCBuYW1lICkgKTtcclxuXHRcdFx0XHQvLyBGaXhlcyBidWcgIzkyMzdcclxuXHRcdFx0XHR0eXBlID0gXCJudW1iZXJcIjtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0Ly8gTWFrZSBzdXJlIHRoYXQgbnVsbCBhbmQgTmFOIHZhbHVlcyBhcmVuJ3Qgc2V0LiBTZWU6ICM3MTE2XHJcblx0XHRcdGlmICggdmFsdWUgPT0gbnVsbCB8fCB2YWx1ZSAhPT0gdmFsdWUgKSB7XHJcblx0XHRcdFx0cmV0dXJuO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHQvLyBJZiBhIG51bWJlciB3YXMgcGFzc2VkIGluLCBhZGQgJ3B4JyB0byB0aGUgKGV4Y2VwdCBmb3IgY2VydGFpbiBDU1MgcHJvcGVydGllcylcclxuXHRcdFx0aWYgKCB0eXBlID09PSBcIm51bWJlclwiICYmICFqUXVlcnkuY3NzTnVtYmVyWyBvcmlnTmFtZSBdICkge1xyXG5cdFx0XHRcdHZhbHVlICs9IFwicHhcIjtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0Ly8gRml4ZXMgIzg5MDgsIGl0IGNhbiBiZSBkb25lIG1vcmUgY29ycmVjdGx5IGJ5IHNwZWNpZmluZyBzZXR0ZXJzIGluIGNzc0hvb2tzLFxyXG5cdFx0XHQvLyBidXQgaXQgd291bGQgbWVhbiB0byBkZWZpbmUgZWlnaHQgKGZvciBldmVyeSBwcm9ibGVtYXRpYyBwcm9wZXJ0eSkgaWRlbnRpY2FsIGZ1bmN0aW9uc1xyXG5cdFx0XHRpZiAoICFzdXBwb3J0LmNsZWFyQ2xvbmVTdHlsZSAmJiB2YWx1ZSA9PT0gXCJcIiAmJiBuYW1lLmluZGV4T2YoXCJiYWNrZ3JvdW5kXCIpID09PSAwICkge1xyXG5cdFx0XHRcdHN0eWxlWyBuYW1lIF0gPSBcImluaGVyaXRcIjtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0Ly8gSWYgYSBob29rIHdhcyBwcm92aWRlZCwgdXNlIHRoYXQgdmFsdWUsIG90aGVyd2lzZSBqdXN0IHNldCB0aGUgc3BlY2lmaWVkIHZhbHVlXHJcblx0XHRcdGlmICggIWhvb2tzIHx8ICEoXCJzZXRcIiBpbiBob29rcykgfHwgKHZhbHVlID0gaG9va3Muc2V0KCBlbGVtLCB2YWx1ZSwgZXh0cmEgKSkgIT09IHVuZGVmaW5lZCApIHtcclxuXHJcblx0XHRcdFx0Ly8gU3VwcG9ydDogSUVcclxuXHRcdFx0XHQvLyBTd2FsbG93IGVycm9ycyBmcm9tICdpbnZhbGlkJyBDU1MgdmFsdWVzICgjNTUwOSlcclxuXHRcdFx0XHR0cnkge1xyXG5cdFx0XHRcdFx0c3R5bGVbIG5hbWUgXSA9IHZhbHVlO1xyXG5cdFx0XHRcdH0gY2F0Y2goZSkge31cclxuXHRcdFx0fVxyXG5cclxuXHRcdH0gZWxzZSB7XHJcblx0XHRcdC8vIElmIGEgaG9vayB3YXMgcHJvdmlkZWQgZ2V0IHRoZSBub24tY29tcHV0ZWQgdmFsdWUgZnJvbSB0aGVyZVxyXG5cdFx0XHRpZiAoIGhvb2tzICYmIFwiZ2V0XCIgaW4gaG9va3MgJiYgKHJldCA9IGhvb2tzLmdldCggZWxlbSwgZmFsc2UsIGV4dHJhICkpICE9PSB1bmRlZmluZWQgKSB7XHJcblx0XHRcdFx0cmV0dXJuIHJldDtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0Ly8gT3RoZXJ3aXNlIGp1c3QgZ2V0IHRoZSB2YWx1ZSBmcm9tIHRoZSBzdHlsZSBvYmplY3RcclxuXHRcdFx0cmV0dXJuIHN0eWxlWyBuYW1lIF07XHJcblx0XHR9XHJcblx0fSxcclxuXHJcblx0Y3NzOiBmdW5jdGlvbiggZWxlbSwgbmFtZSwgZXh0cmEsIHN0eWxlcyApIHtcclxuXHRcdHZhciBudW0sIHZhbCwgaG9va3MsXHJcblx0XHRcdG9yaWdOYW1lID0galF1ZXJ5LmNhbWVsQ2FzZSggbmFtZSApO1xyXG5cclxuXHRcdC8vIE1ha2Ugc3VyZSB0aGF0IHdlJ3JlIHdvcmtpbmcgd2l0aCB0aGUgcmlnaHQgbmFtZVxyXG5cdFx0bmFtZSA9IGpRdWVyeS5jc3NQcm9wc1sgb3JpZ05hbWUgXSB8fCAoIGpRdWVyeS5jc3NQcm9wc1sgb3JpZ05hbWUgXSA9IHZlbmRvclByb3BOYW1lKCBlbGVtLnN0eWxlLCBvcmlnTmFtZSApICk7XHJcblxyXG5cdFx0Ly8gZ2V0cyBob29rIGZvciB0aGUgcHJlZml4ZWQgdmVyc2lvblxyXG5cdFx0Ly8gZm9sbG93ZWQgYnkgdGhlIHVucHJlZml4ZWQgdmVyc2lvblxyXG5cdFx0aG9va3MgPSBqUXVlcnkuY3NzSG9va3NbIG5hbWUgXSB8fCBqUXVlcnkuY3NzSG9va3NbIG9yaWdOYW1lIF07XHJcblxyXG5cdFx0Ly8gSWYgYSBob29rIHdhcyBwcm92aWRlZCBnZXQgdGhlIGNvbXB1dGVkIHZhbHVlIGZyb20gdGhlcmVcclxuXHRcdGlmICggaG9va3MgJiYgXCJnZXRcIiBpbiBob29rcyApIHtcclxuXHRcdFx0dmFsID0gaG9va3MuZ2V0KCBlbGVtLCB0cnVlLCBleHRyYSApO1xyXG5cdFx0fVxyXG5cclxuXHRcdC8vIE90aGVyd2lzZSwgaWYgYSB3YXkgdG8gZ2V0IHRoZSBjb21wdXRlZCB2YWx1ZSBleGlzdHMsIHVzZSB0aGF0XHJcblx0XHRpZiAoIHZhbCA9PT0gdW5kZWZpbmVkICkge1xyXG5cdFx0XHR2YWwgPSBjdXJDU1MoIGVsZW0sIG5hbWUsIHN0eWxlcyApO1xyXG5cdFx0fVxyXG5cclxuXHRcdC8vY29udmVydCBcIm5vcm1hbFwiIHRvIGNvbXB1dGVkIHZhbHVlXHJcblx0XHRpZiAoIHZhbCA9PT0gXCJub3JtYWxcIiAmJiBuYW1lIGluIGNzc05vcm1hbFRyYW5zZm9ybSApIHtcclxuXHRcdFx0dmFsID0gY3NzTm9ybWFsVHJhbnNmb3JtWyBuYW1lIF07XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gUmV0dXJuLCBjb252ZXJ0aW5nIHRvIG51bWJlciBpZiBmb3JjZWQgb3IgYSBxdWFsaWZpZXIgd2FzIHByb3ZpZGVkIGFuZCB2YWwgbG9va3MgbnVtZXJpY1xyXG5cdFx0aWYgKCBleHRyYSA9PT0gXCJcIiB8fCBleHRyYSApIHtcclxuXHRcdFx0bnVtID0gcGFyc2VGbG9hdCggdmFsICk7XHJcblx0XHRcdHJldHVybiBleHRyYSA9PT0gdHJ1ZSB8fCBqUXVlcnkuaXNOdW1lcmljKCBudW0gKSA/IG51bSB8fCAwIDogdmFsO1xyXG5cdFx0fVxyXG5cdFx0cmV0dXJuIHZhbDtcclxuXHR9XHJcbn0pO1xyXG5cclxualF1ZXJ5LmVhY2goWyBcImhlaWdodFwiLCBcIndpZHRoXCIgXSwgZnVuY3Rpb24oIGksIG5hbWUgKSB7XHJcblx0alF1ZXJ5LmNzc0hvb2tzWyBuYW1lIF0gPSB7XHJcblx0XHRnZXQ6IGZ1bmN0aW9uKCBlbGVtLCBjb21wdXRlZCwgZXh0cmEgKSB7XHJcblx0XHRcdGlmICggY29tcHV0ZWQgKSB7XHJcblx0XHRcdFx0Ly8gY2VydGFpbiBlbGVtZW50cyBjYW4gaGF2ZSBkaW1lbnNpb24gaW5mbyBpZiB3ZSBpbnZpc2libHkgc2hvdyB0aGVtXHJcblx0XHRcdFx0Ly8gaG93ZXZlciwgaXQgbXVzdCBoYXZlIGEgY3VycmVudCBkaXNwbGF5IHN0eWxlIHRoYXQgd291bGQgYmVuZWZpdCBmcm9tIHRoaXNcclxuXHRcdFx0XHRyZXR1cm4gcmRpc3BsYXlzd2FwLnRlc3QoIGpRdWVyeS5jc3MoIGVsZW0sIFwiZGlzcGxheVwiICkgKSAmJiBlbGVtLm9mZnNldFdpZHRoID09PSAwID9cclxuXHRcdFx0XHRcdGpRdWVyeS5zd2FwKCBlbGVtLCBjc3NTaG93LCBmdW5jdGlvbigpIHtcclxuXHRcdFx0XHRcdFx0cmV0dXJuIGdldFdpZHRoT3JIZWlnaHQoIGVsZW0sIG5hbWUsIGV4dHJhICk7XHJcblx0XHRcdFx0XHR9KSA6XHJcblx0XHRcdFx0XHRnZXRXaWR0aE9ySGVpZ2h0KCBlbGVtLCBuYW1lLCBleHRyYSApO1xyXG5cdFx0XHR9XHJcblx0XHR9LFxyXG5cclxuXHRcdHNldDogZnVuY3Rpb24oIGVsZW0sIHZhbHVlLCBleHRyYSApIHtcclxuXHRcdFx0dmFyIHN0eWxlcyA9IGV4dHJhICYmIGdldFN0eWxlcyggZWxlbSApO1xyXG5cdFx0XHRyZXR1cm4gc2V0UG9zaXRpdmVOdW1iZXIoIGVsZW0sIHZhbHVlLCBleHRyYSA/XHJcblx0XHRcdFx0YXVnbWVudFdpZHRoT3JIZWlnaHQoXHJcblx0XHRcdFx0XHRlbGVtLFxyXG5cdFx0XHRcdFx0bmFtZSxcclxuXHRcdFx0XHRcdGV4dHJhLFxyXG5cdFx0XHRcdFx0c3VwcG9ydC5ib3hTaXppbmcgJiYgalF1ZXJ5LmNzcyggZWxlbSwgXCJib3hTaXppbmdcIiwgZmFsc2UsIHN0eWxlcyApID09PSBcImJvcmRlci1ib3hcIixcclxuXHRcdFx0XHRcdHN0eWxlc1xyXG5cdFx0XHRcdCkgOiAwXHJcblx0XHRcdCk7XHJcblx0XHR9XHJcblx0fTtcclxufSk7XHJcblxyXG5pZiAoICFzdXBwb3J0Lm9wYWNpdHkgKSB7XHJcblx0alF1ZXJ5LmNzc0hvb2tzLm9wYWNpdHkgPSB7XHJcblx0XHRnZXQ6IGZ1bmN0aW9uKCBlbGVtLCBjb21wdXRlZCApIHtcclxuXHRcdFx0Ly8gSUUgdXNlcyBmaWx0ZXJzIGZvciBvcGFjaXR5XHJcblx0XHRcdHJldHVybiByb3BhY2l0eS50ZXN0KCAoY29tcHV0ZWQgJiYgZWxlbS5jdXJyZW50U3R5bGUgPyBlbGVtLmN1cnJlbnRTdHlsZS5maWx0ZXIgOiBlbGVtLnN0eWxlLmZpbHRlcikgfHwgXCJcIiApID9cclxuXHRcdFx0XHQoIDAuMDEgKiBwYXJzZUZsb2F0KCBSZWdFeHAuJDEgKSApICsgXCJcIiA6XHJcblx0XHRcdFx0Y29tcHV0ZWQgPyBcIjFcIiA6IFwiXCI7XHJcblx0XHR9LFxyXG5cclxuXHRcdHNldDogZnVuY3Rpb24oIGVsZW0sIHZhbHVlICkge1xyXG5cdFx0XHR2YXIgc3R5bGUgPSBlbGVtLnN0eWxlLFxyXG5cdFx0XHRcdGN1cnJlbnRTdHlsZSA9IGVsZW0uY3VycmVudFN0eWxlLFxyXG5cdFx0XHRcdG9wYWNpdHkgPSBqUXVlcnkuaXNOdW1lcmljKCB2YWx1ZSApID8gXCJhbHBoYShvcGFjaXR5PVwiICsgdmFsdWUgKiAxMDAgKyBcIilcIiA6IFwiXCIsXHJcblx0XHRcdFx0ZmlsdGVyID0gY3VycmVudFN0eWxlICYmIGN1cnJlbnRTdHlsZS5maWx0ZXIgfHwgc3R5bGUuZmlsdGVyIHx8IFwiXCI7XHJcblxyXG5cdFx0XHQvLyBJRSBoYXMgdHJvdWJsZSB3aXRoIG9wYWNpdHkgaWYgaXQgZG9lcyBub3QgaGF2ZSBsYXlvdXRcclxuXHRcdFx0Ly8gRm9yY2UgaXQgYnkgc2V0dGluZyB0aGUgem9vbSBsZXZlbFxyXG5cdFx0XHRzdHlsZS56b29tID0gMTtcclxuXHJcblx0XHRcdC8vIGlmIHNldHRpbmcgb3BhY2l0eSB0byAxLCBhbmQgbm8gb3RoZXIgZmlsdGVycyBleGlzdCAtIGF0dGVtcHQgdG8gcmVtb3ZlIGZpbHRlciBhdHRyaWJ1dGUgIzY2NTJcclxuXHRcdFx0Ly8gaWYgdmFsdWUgPT09IFwiXCIsIHRoZW4gcmVtb3ZlIGlubGluZSBvcGFjaXR5ICMxMjY4NVxyXG5cdFx0XHRpZiAoICggdmFsdWUgPj0gMSB8fCB2YWx1ZSA9PT0gXCJcIiApICYmXHJcblx0XHRcdFx0XHRqUXVlcnkudHJpbSggZmlsdGVyLnJlcGxhY2UoIHJhbHBoYSwgXCJcIiApICkgPT09IFwiXCIgJiZcclxuXHRcdFx0XHRcdHN0eWxlLnJlbW92ZUF0dHJpYnV0ZSApIHtcclxuXHJcblx0XHRcdFx0Ly8gU2V0dGluZyBzdHlsZS5maWx0ZXIgdG8gbnVsbCwgXCJcIiAmIFwiIFwiIHN0aWxsIGxlYXZlIFwiZmlsdGVyOlwiIGluIHRoZSBjc3NUZXh0XHJcblx0XHRcdFx0Ly8gaWYgXCJmaWx0ZXI6XCIgaXMgcHJlc2VudCBhdCBhbGwsIGNsZWFyVHlwZSBpcyBkaXNhYmxlZCwgd2Ugd2FudCB0byBhdm9pZCB0aGlzXHJcblx0XHRcdFx0Ly8gc3R5bGUucmVtb3ZlQXR0cmlidXRlIGlzIElFIE9ubHksIGJ1dCBzbyBhcHBhcmVudGx5IGlzIHRoaXMgY29kZSBwYXRoLi4uXHJcblx0XHRcdFx0c3R5bGUucmVtb3ZlQXR0cmlidXRlKCBcImZpbHRlclwiICk7XHJcblxyXG5cdFx0XHRcdC8vIGlmIHRoZXJlIGlzIG5vIGZpbHRlciBzdHlsZSBhcHBsaWVkIGluIGEgY3NzIHJ1bGUgb3IgdW5zZXQgaW5saW5lIG9wYWNpdHksIHdlIGFyZSBkb25lXHJcblx0XHRcdFx0aWYgKCB2YWx1ZSA9PT0gXCJcIiB8fCBjdXJyZW50U3R5bGUgJiYgIWN1cnJlbnRTdHlsZS5maWx0ZXIgKSB7XHJcblx0XHRcdFx0XHRyZXR1cm47XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHQvLyBvdGhlcndpc2UsIHNldCBuZXcgZmlsdGVyIHZhbHVlc1xyXG5cdFx0XHRzdHlsZS5maWx0ZXIgPSByYWxwaGEudGVzdCggZmlsdGVyICkgP1xyXG5cdFx0XHRcdGZpbHRlci5yZXBsYWNlKCByYWxwaGEsIG9wYWNpdHkgKSA6XHJcblx0XHRcdFx0ZmlsdGVyICsgXCIgXCIgKyBvcGFjaXR5O1xyXG5cdFx0fVxyXG5cdH07XHJcbn1cclxuXHJcbmpRdWVyeS5jc3NIb29rcy5tYXJnaW5SaWdodCA9IGFkZEdldEhvb2tJZiggc3VwcG9ydC5yZWxpYWJsZU1hcmdpblJpZ2h0LFxyXG5cdGZ1bmN0aW9uKCBlbGVtLCBjb21wdXRlZCApIHtcclxuXHRcdGlmICggY29tcHV0ZWQgKSB7XHJcblx0XHRcdC8vIFdlYktpdCBCdWcgMTMzNDMgLSBnZXRDb21wdXRlZFN0eWxlIHJldHVybnMgd3JvbmcgdmFsdWUgZm9yIG1hcmdpbi1yaWdodFxyXG5cdFx0XHQvLyBXb3JrIGFyb3VuZCBieSB0ZW1wb3JhcmlseSBzZXR0aW5nIGVsZW1lbnQgZGlzcGxheSB0byBpbmxpbmUtYmxvY2tcclxuXHRcdFx0cmV0dXJuIGpRdWVyeS5zd2FwKCBlbGVtLCB7IFwiZGlzcGxheVwiOiBcImlubGluZS1ibG9ja1wiIH0sXHJcblx0XHRcdFx0Y3VyQ1NTLCBbIGVsZW0sIFwibWFyZ2luUmlnaHRcIiBdICk7XHJcblx0XHR9XHJcblx0fVxyXG4pO1xyXG5cclxuLy8gVGhlc2UgaG9va3MgYXJlIHVzZWQgYnkgYW5pbWF0ZSB0byBleHBhbmQgcHJvcGVydGllc1xyXG5qUXVlcnkuZWFjaCh7XHJcblx0bWFyZ2luOiBcIlwiLFxyXG5cdHBhZGRpbmc6IFwiXCIsXHJcblx0Ym9yZGVyOiBcIldpZHRoXCJcclxufSwgZnVuY3Rpb24oIHByZWZpeCwgc3VmZml4ICkge1xyXG5cdGpRdWVyeS5jc3NIb29rc1sgcHJlZml4ICsgc3VmZml4IF0gPSB7XHJcblx0XHRleHBhbmQ6IGZ1bmN0aW9uKCB2YWx1ZSApIHtcclxuXHRcdFx0dmFyIGkgPSAwLFxyXG5cdFx0XHRcdGV4cGFuZGVkID0ge30sXHJcblxyXG5cdFx0XHRcdC8vIGFzc3VtZXMgYSBzaW5nbGUgbnVtYmVyIGlmIG5vdCBhIHN0cmluZ1xyXG5cdFx0XHRcdHBhcnRzID0gdHlwZW9mIHZhbHVlID09PSBcInN0cmluZ1wiID8gdmFsdWUuc3BsaXQoXCIgXCIpIDogWyB2YWx1ZSBdO1xyXG5cclxuXHRcdFx0Zm9yICggOyBpIDwgNDsgaSsrICkge1xyXG5cdFx0XHRcdGV4cGFuZGVkWyBwcmVmaXggKyBjc3NFeHBhbmRbIGkgXSArIHN1ZmZpeCBdID1cclxuXHRcdFx0XHRcdHBhcnRzWyBpIF0gfHwgcGFydHNbIGkgLSAyIF0gfHwgcGFydHNbIDAgXTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0cmV0dXJuIGV4cGFuZGVkO1xyXG5cdFx0fVxyXG5cdH07XHJcblxyXG5cdGlmICggIXJtYXJnaW4udGVzdCggcHJlZml4ICkgKSB7XHJcblx0XHRqUXVlcnkuY3NzSG9va3NbIHByZWZpeCArIHN1ZmZpeCBdLnNldCA9IHNldFBvc2l0aXZlTnVtYmVyO1xyXG5cdH1cclxufSk7XHJcblxyXG5qUXVlcnkuZm4uZXh0ZW5kKHtcclxuXHRjc3M6IGZ1bmN0aW9uKCBuYW1lLCB2YWx1ZSApIHtcclxuXHRcdHJldHVybiBhY2Nlc3MoIHRoaXMsIGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCB2YWx1ZSApIHtcclxuXHRcdFx0dmFyIHN0eWxlcywgbGVuLFxyXG5cdFx0XHRcdG1hcCA9IHt9LFxyXG5cdFx0XHRcdGkgPSAwO1xyXG5cclxuXHRcdFx0aWYgKCBqUXVlcnkuaXNBcnJheSggbmFtZSApICkge1xyXG5cdFx0XHRcdHN0eWxlcyA9IGdldFN0eWxlcyggZWxlbSApO1xyXG5cdFx0XHRcdGxlbiA9IG5hbWUubGVuZ3RoO1xyXG5cclxuXHRcdFx0XHRmb3IgKCA7IGkgPCBsZW47IGkrKyApIHtcclxuXHRcdFx0XHRcdG1hcFsgbmFtZVsgaSBdIF0gPSBqUXVlcnkuY3NzKCBlbGVtLCBuYW1lWyBpIF0sIGZhbHNlLCBzdHlsZXMgKTtcclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdHJldHVybiBtYXA7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdHJldHVybiB2YWx1ZSAhPT0gdW5kZWZpbmVkID9cclxuXHRcdFx0XHRqUXVlcnkuc3R5bGUoIGVsZW0sIG5hbWUsIHZhbHVlICkgOlxyXG5cdFx0XHRcdGpRdWVyeS5jc3MoIGVsZW0sIG5hbWUgKTtcclxuXHRcdH0sIG5hbWUsIHZhbHVlLCBhcmd1bWVudHMubGVuZ3RoID4gMSApO1xyXG5cdH0sXHJcblx0c2hvdzogZnVuY3Rpb24oKSB7XHJcblx0XHRyZXR1cm4gc2hvd0hpZGUoIHRoaXMsIHRydWUgKTtcclxuXHR9LFxyXG5cdGhpZGU6IGZ1bmN0aW9uKCkge1xyXG5cdFx0cmV0dXJuIHNob3dIaWRlKCB0aGlzICk7XHJcblx0fSxcclxuXHR0b2dnbGU6IGZ1bmN0aW9uKCBzdGF0ZSApIHtcclxuXHRcdGlmICggdHlwZW9mIHN0YXRlID09PSBcImJvb2xlYW5cIiApIHtcclxuXHRcdFx0cmV0dXJuIHN0YXRlID8gdGhpcy5zaG93KCkgOiB0aGlzLmhpZGUoKTtcclxuXHRcdH1cclxuXHJcblx0XHRyZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRpZiAoIGlzSGlkZGVuKCB0aGlzICkgKSB7XHJcblx0XHRcdFx0alF1ZXJ5KCB0aGlzICkuc2hvdygpO1xyXG5cdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdGpRdWVyeSggdGhpcyApLmhpZGUoKTtcclxuXHRcdFx0fVxyXG5cdFx0fSk7XHJcblx0fVxyXG59KTtcclxuXHJcblxyXG5mdW5jdGlvbiBUd2VlbiggZWxlbSwgb3B0aW9ucywgcHJvcCwgZW5kLCBlYXNpbmcgKSB7XHJcblx0cmV0dXJuIG5ldyBUd2Vlbi5wcm90b3R5cGUuaW5pdCggZWxlbSwgb3B0aW9ucywgcHJvcCwgZW5kLCBlYXNpbmcgKTtcclxufVxyXG5qUXVlcnkuVHdlZW4gPSBUd2VlbjtcclxuXHJcblR3ZWVuLnByb3RvdHlwZSA9IHtcclxuXHRjb25zdHJ1Y3RvcjogVHdlZW4sXHJcblx0aW5pdDogZnVuY3Rpb24oIGVsZW0sIG9wdGlvbnMsIHByb3AsIGVuZCwgZWFzaW5nLCB1bml0ICkge1xyXG5cdFx0dGhpcy5lbGVtID0gZWxlbTtcclxuXHRcdHRoaXMucHJvcCA9IHByb3A7XHJcblx0XHR0aGlzLmVhc2luZyA9IGVhc2luZyB8fCBcInN3aW5nXCI7XHJcblx0XHR0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xyXG5cdFx0dGhpcy5zdGFydCA9IHRoaXMubm93ID0gdGhpcy5jdXIoKTtcclxuXHRcdHRoaXMuZW5kID0gZW5kO1xyXG5cdFx0dGhpcy51bml0ID0gdW5pdCB8fCAoIGpRdWVyeS5jc3NOdW1iZXJbIHByb3AgXSA/IFwiXCIgOiBcInB4XCIgKTtcclxuXHR9LFxyXG5cdGN1cjogZnVuY3Rpb24oKSB7XHJcblx0XHR2YXIgaG9va3MgPSBUd2Vlbi5wcm9wSG9va3NbIHRoaXMucHJvcCBdO1xyXG5cclxuXHRcdHJldHVybiBob29rcyAmJiBob29rcy5nZXQgP1xyXG5cdFx0XHRob29rcy5nZXQoIHRoaXMgKSA6XHJcblx0XHRcdFR3ZWVuLnByb3BIb29rcy5fZGVmYXVsdC5nZXQoIHRoaXMgKTtcclxuXHR9LFxyXG5cdHJ1bjogZnVuY3Rpb24oIHBlcmNlbnQgKSB7XHJcblx0XHR2YXIgZWFzZWQsXHJcblx0XHRcdGhvb2tzID0gVHdlZW4ucHJvcEhvb2tzWyB0aGlzLnByb3AgXTtcclxuXHJcblx0XHRpZiAoIHRoaXMub3B0aW9ucy5kdXJhdGlvbiApIHtcclxuXHRcdFx0dGhpcy5wb3MgPSBlYXNlZCA9IGpRdWVyeS5lYXNpbmdbIHRoaXMuZWFzaW5nIF0oXHJcblx0XHRcdFx0cGVyY2VudCwgdGhpcy5vcHRpb25zLmR1cmF0aW9uICogcGVyY2VudCwgMCwgMSwgdGhpcy5vcHRpb25zLmR1cmF0aW9uXHJcblx0XHRcdCk7XHJcblx0XHR9IGVsc2Uge1xyXG5cdFx0XHR0aGlzLnBvcyA9IGVhc2VkID0gcGVyY2VudDtcclxuXHRcdH1cclxuXHRcdHRoaXMubm93ID0gKCB0aGlzLmVuZCAtIHRoaXMuc3RhcnQgKSAqIGVhc2VkICsgdGhpcy5zdGFydDtcclxuXHJcblx0XHRpZiAoIHRoaXMub3B0aW9ucy5zdGVwICkge1xyXG5cdFx0XHR0aGlzLm9wdGlvbnMuc3RlcC5jYWxsKCB0aGlzLmVsZW0sIHRoaXMubm93LCB0aGlzICk7XHJcblx0XHR9XHJcblxyXG5cdFx0aWYgKCBob29rcyAmJiBob29rcy5zZXQgKSB7XHJcblx0XHRcdGhvb2tzLnNldCggdGhpcyApO1xyXG5cdFx0fSBlbHNlIHtcclxuXHRcdFx0VHdlZW4ucHJvcEhvb2tzLl9kZWZhdWx0LnNldCggdGhpcyApO1xyXG5cdFx0fVxyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblx0fVxyXG59O1xyXG5cclxuVHdlZW4ucHJvdG90eXBlLmluaXQucHJvdG90eXBlID0gVHdlZW4ucHJvdG90eXBlO1xyXG5cclxuVHdlZW4ucHJvcEhvb2tzID0ge1xyXG5cdF9kZWZhdWx0OiB7XHJcblx0XHRnZXQ6IGZ1bmN0aW9uKCB0d2VlbiApIHtcclxuXHRcdFx0dmFyIHJlc3VsdDtcclxuXHJcblx0XHRcdGlmICggdHdlZW4uZWxlbVsgdHdlZW4ucHJvcCBdICE9IG51bGwgJiZcclxuXHRcdFx0XHQoIXR3ZWVuLmVsZW0uc3R5bGUgfHwgdHdlZW4uZWxlbS5zdHlsZVsgdHdlZW4ucHJvcCBdID09IG51bGwpICkge1xyXG5cdFx0XHRcdHJldHVybiB0d2Vlbi5lbGVtWyB0d2Vlbi5wcm9wIF07XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdC8vIHBhc3NpbmcgYW4gZW1wdHkgc3RyaW5nIGFzIGEgM3JkIHBhcmFtZXRlciB0byAuY3NzIHdpbGwgYXV0b21hdGljYWxseVxyXG5cdFx0XHQvLyBhdHRlbXB0IGEgcGFyc2VGbG9hdCBhbmQgZmFsbGJhY2sgdG8gYSBzdHJpbmcgaWYgdGhlIHBhcnNlIGZhaWxzXHJcblx0XHRcdC8vIHNvLCBzaW1wbGUgdmFsdWVzIHN1Y2ggYXMgXCIxMHB4XCIgYXJlIHBhcnNlZCB0byBGbG9hdC5cclxuXHRcdFx0Ly8gY29tcGxleCB2YWx1ZXMgc3VjaCBhcyBcInJvdGF0ZSgxcmFkKVwiIGFyZSByZXR1cm5lZCBhcyBpcy5cclxuXHRcdFx0cmVzdWx0ID0galF1ZXJ5LmNzcyggdHdlZW4uZWxlbSwgdHdlZW4ucHJvcCwgXCJcIiApO1xyXG5cdFx0XHQvLyBFbXB0eSBzdHJpbmdzLCBudWxsLCB1bmRlZmluZWQgYW5kIFwiYXV0b1wiIGFyZSBjb252ZXJ0ZWQgdG8gMC5cclxuXHRcdFx0cmV0dXJuICFyZXN1bHQgfHwgcmVzdWx0ID09PSBcImF1dG9cIiA/IDAgOiByZXN1bHQ7XHJcblx0XHR9LFxyXG5cdFx0c2V0OiBmdW5jdGlvbiggdHdlZW4gKSB7XHJcblx0XHRcdC8vIHVzZSBzdGVwIGhvb2sgZm9yIGJhY2sgY29tcGF0IC0gdXNlIGNzc0hvb2sgaWYgaXRzIHRoZXJlIC0gdXNlIC5zdHlsZSBpZiBpdHNcclxuXHRcdFx0Ly8gYXZhaWxhYmxlIGFuZCB1c2UgcGxhaW4gcHJvcGVydGllcyB3aGVyZSBhdmFpbGFibGVcclxuXHRcdFx0aWYgKCBqUXVlcnkuZnguc3RlcFsgdHdlZW4ucHJvcCBdICkge1xyXG5cdFx0XHRcdGpRdWVyeS5meC5zdGVwWyB0d2Vlbi5wcm9wIF0oIHR3ZWVuICk7XHJcblx0XHRcdH0gZWxzZSBpZiAoIHR3ZWVuLmVsZW0uc3R5bGUgJiYgKCB0d2Vlbi5lbGVtLnN0eWxlWyBqUXVlcnkuY3NzUHJvcHNbIHR3ZWVuLnByb3AgXSBdICE9IG51bGwgfHwgalF1ZXJ5LmNzc0hvb2tzWyB0d2Vlbi5wcm9wIF0gKSApIHtcclxuXHRcdFx0XHRqUXVlcnkuc3R5bGUoIHR3ZWVuLmVsZW0sIHR3ZWVuLnByb3AsIHR3ZWVuLm5vdyArIHR3ZWVuLnVuaXQgKTtcclxuXHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHR0d2Vlbi5lbGVtWyB0d2Vlbi5wcm9wIF0gPSB0d2Vlbi5ub3c7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHR9XHJcbn07XHJcblxyXG4vLyBTdXBwb3J0OiBJRSA8PTlcclxuLy8gUGFuaWMgYmFzZWQgYXBwcm9hY2ggdG8gc2V0dGluZyB0aGluZ3Mgb24gZGlzY29ubmVjdGVkIG5vZGVzXHJcblxyXG5Ud2Vlbi5wcm9wSG9va3Muc2Nyb2xsVG9wID0gVHdlZW4ucHJvcEhvb2tzLnNjcm9sbExlZnQgPSB7XHJcblx0c2V0OiBmdW5jdGlvbiggdHdlZW4gKSB7XHJcblx0XHRpZiAoIHR3ZWVuLmVsZW0ubm9kZVR5cGUgJiYgdHdlZW4uZWxlbS5wYXJlbnROb2RlICkge1xyXG5cdFx0XHR0d2Vlbi5lbGVtWyB0d2Vlbi5wcm9wIF0gPSB0d2Vlbi5ub3c7XHJcblx0XHR9XHJcblx0fVxyXG59O1xyXG5cclxualF1ZXJ5LmVhc2luZyA9IHtcclxuXHRsaW5lYXI6IGZ1bmN0aW9uKCBwICkge1xyXG5cdFx0cmV0dXJuIHA7XHJcblx0fSxcclxuXHRzd2luZzogZnVuY3Rpb24oIHAgKSB7XHJcblx0XHRyZXR1cm4gMC41IC0gTWF0aC5jb3MoIHAgKiBNYXRoLlBJICkgLyAyO1xyXG5cdH1cclxufTtcclxuXHJcbmpRdWVyeS5meCA9IFR3ZWVuLnByb3RvdHlwZS5pbml0O1xyXG5cclxuLy8gQmFjayBDb21wYXQgPDEuOCBleHRlbnNpb24gcG9pbnRcclxualF1ZXJ5LmZ4LnN0ZXAgPSB7fTtcclxuXHJcblxyXG5cclxuXHJcbnZhclxyXG5cdGZ4Tm93LCB0aW1lcklkLFxyXG5cdHJmeHR5cGVzID0gL14oPzp0b2dnbGV8c2hvd3xoaWRlKSQvLFxyXG5cdHJmeG51bSA9IG5ldyBSZWdFeHAoIFwiXig/OihbKy1dKT18KShcIiArIHBudW0gKyBcIikoW2EteiVdKikkXCIsIFwiaVwiICksXHJcblx0cnJ1biA9IC9xdWV1ZUhvb2tzJC8sXHJcblx0YW5pbWF0aW9uUHJlZmlsdGVycyA9IFsgZGVmYXVsdFByZWZpbHRlciBdLFxyXG5cdHR3ZWVuZXJzID0ge1xyXG5cdFx0XCIqXCI6IFsgZnVuY3Rpb24oIHByb3AsIHZhbHVlICkge1xyXG5cdFx0XHR2YXIgdHdlZW4gPSB0aGlzLmNyZWF0ZVR3ZWVuKCBwcm9wLCB2YWx1ZSApLFxyXG5cdFx0XHRcdHRhcmdldCA9IHR3ZWVuLmN1cigpLFxyXG5cdFx0XHRcdHBhcnRzID0gcmZ4bnVtLmV4ZWMoIHZhbHVlICksXHJcblx0XHRcdFx0dW5pdCA9IHBhcnRzICYmIHBhcnRzWyAzIF0gfHwgKCBqUXVlcnkuY3NzTnVtYmVyWyBwcm9wIF0gPyBcIlwiIDogXCJweFwiICksXHJcblxyXG5cdFx0XHRcdC8vIFN0YXJ0aW5nIHZhbHVlIGNvbXB1dGF0aW9uIGlzIHJlcXVpcmVkIGZvciBwb3RlbnRpYWwgdW5pdCBtaXNtYXRjaGVzXHJcblx0XHRcdFx0c3RhcnQgPSAoIGpRdWVyeS5jc3NOdW1iZXJbIHByb3AgXSB8fCB1bml0ICE9PSBcInB4XCIgJiYgK3RhcmdldCApICYmXHJcblx0XHRcdFx0XHRyZnhudW0uZXhlYyggalF1ZXJ5LmNzcyggdHdlZW4uZWxlbSwgcHJvcCApICksXHJcblx0XHRcdFx0c2NhbGUgPSAxLFxyXG5cdFx0XHRcdG1heEl0ZXJhdGlvbnMgPSAyMDtcclxuXHJcblx0XHRcdGlmICggc3RhcnQgJiYgc3RhcnRbIDMgXSAhPT0gdW5pdCApIHtcclxuXHRcdFx0XHQvLyBUcnVzdCB1bml0cyByZXBvcnRlZCBieSBqUXVlcnkuY3NzXHJcblx0XHRcdFx0dW5pdCA9IHVuaXQgfHwgc3RhcnRbIDMgXTtcclxuXHJcblx0XHRcdFx0Ly8gTWFrZSBzdXJlIHdlIHVwZGF0ZSB0aGUgdHdlZW4gcHJvcGVydGllcyBsYXRlciBvblxyXG5cdFx0XHRcdHBhcnRzID0gcGFydHMgfHwgW107XHJcblxyXG5cdFx0XHRcdC8vIEl0ZXJhdGl2ZWx5IGFwcHJveGltYXRlIGZyb20gYSBub256ZXJvIHN0YXJ0aW5nIHBvaW50XHJcblx0XHRcdFx0c3RhcnQgPSArdGFyZ2V0IHx8IDE7XHJcblxyXG5cdFx0XHRcdGRvIHtcclxuXHRcdFx0XHRcdC8vIElmIHByZXZpb3VzIGl0ZXJhdGlvbiB6ZXJvZWQgb3V0LCBkb3VibGUgdW50aWwgd2UgZ2V0ICpzb21ldGhpbmcqXHJcblx0XHRcdFx0XHQvLyBVc2UgYSBzdHJpbmcgZm9yIGRvdWJsaW5nIGZhY3RvciBzbyB3ZSBkb24ndCBhY2NpZGVudGFsbHkgc2VlIHNjYWxlIGFzIHVuY2hhbmdlZCBiZWxvd1xyXG5cdFx0XHRcdFx0c2NhbGUgPSBzY2FsZSB8fCBcIi41XCI7XHJcblxyXG5cdFx0XHRcdFx0Ly8gQWRqdXN0IGFuZCBhcHBseVxyXG5cdFx0XHRcdFx0c3RhcnQgPSBzdGFydCAvIHNjYWxlO1xyXG5cdFx0XHRcdFx0alF1ZXJ5LnN0eWxlKCB0d2Vlbi5lbGVtLCBwcm9wLCBzdGFydCArIHVuaXQgKTtcclxuXHJcblx0XHRcdFx0Ly8gVXBkYXRlIHNjYWxlLCB0b2xlcmF0aW5nIHplcm8gb3IgTmFOIGZyb20gdHdlZW4uY3VyKClcclxuXHRcdFx0XHQvLyBBbmQgYnJlYWtpbmcgdGhlIGxvb3AgaWYgc2NhbGUgaXMgdW5jaGFuZ2VkIG9yIHBlcmZlY3QsIG9yIGlmIHdlJ3ZlIGp1c3QgaGFkIGVub3VnaFxyXG5cdFx0XHRcdH0gd2hpbGUgKCBzY2FsZSAhPT0gKHNjYWxlID0gdHdlZW4uY3VyKCkgLyB0YXJnZXQpICYmIHNjYWxlICE9PSAxICYmIC0tbWF4SXRlcmF0aW9ucyApO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHQvLyBVcGRhdGUgdHdlZW4gcHJvcGVydGllc1xyXG5cdFx0XHRpZiAoIHBhcnRzICkge1xyXG5cdFx0XHRcdHN0YXJ0ID0gdHdlZW4uc3RhcnQgPSArc3RhcnQgfHwgK3RhcmdldCB8fCAwO1xyXG5cdFx0XHRcdHR3ZWVuLnVuaXQgPSB1bml0O1xyXG5cdFx0XHRcdC8vIElmIGEgKz0vLT0gdG9rZW4gd2FzIHByb3ZpZGVkLCB3ZSdyZSBkb2luZyBhIHJlbGF0aXZlIGFuaW1hdGlvblxyXG5cdFx0XHRcdHR3ZWVuLmVuZCA9IHBhcnRzWyAxIF0gP1xyXG5cdFx0XHRcdFx0c3RhcnQgKyAoIHBhcnRzWyAxIF0gKyAxICkgKiBwYXJ0c1sgMiBdIDpcclxuXHRcdFx0XHRcdCtwYXJ0c1sgMiBdO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRyZXR1cm4gdHdlZW47XHJcblx0XHR9IF1cclxuXHR9O1xyXG5cclxuLy8gQW5pbWF0aW9ucyBjcmVhdGVkIHN5bmNocm9ub3VzbHkgd2lsbCBydW4gc3luY2hyb25vdXNseVxyXG5mdW5jdGlvbiBjcmVhdGVGeE5vdygpIHtcclxuXHRzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xyXG5cdFx0ZnhOb3cgPSB1bmRlZmluZWQ7XHJcblx0fSk7XHJcblx0cmV0dXJuICggZnhOb3cgPSBqUXVlcnkubm93KCkgKTtcclxufVxyXG5cclxuLy8gR2VuZXJhdGUgcGFyYW1ldGVycyB0byBjcmVhdGUgYSBzdGFuZGFyZCBhbmltYXRpb25cclxuZnVuY3Rpb24gZ2VuRngoIHR5cGUsIGluY2x1ZGVXaWR0aCApIHtcclxuXHR2YXIgd2hpY2gsXHJcblx0XHRhdHRycyA9IHsgaGVpZ2h0OiB0eXBlIH0sXHJcblx0XHRpID0gMDtcclxuXHJcblx0Ly8gaWYgd2UgaW5jbHVkZSB3aWR0aCwgc3RlcCB2YWx1ZSBpcyAxIHRvIGRvIGFsbCBjc3NFeHBhbmQgdmFsdWVzLFxyXG5cdC8vIGlmIHdlIGRvbid0IGluY2x1ZGUgd2lkdGgsIHN0ZXAgdmFsdWUgaXMgMiB0byBza2lwIG92ZXIgTGVmdCBhbmQgUmlnaHRcclxuXHRpbmNsdWRlV2lkdGggPSBpbmNsdWRlV2lkdGggPyAxIDogMDtcclxuXHRmb3IgKCA7IGkgPCA0IDsgaSArPSAyIC0gaW5jbHVkZVdpZHRoICkge1xyXG5cdFx0d2hpY2ggPSBjc3NFeHBhbmRbIGkgXTtcclxuXHRcdGF0dHJzWyBcIm1hcmdpblwiICsgd2hpY2ggXSA9IGF0dHJzWyBcInBhZGRpbmdcIiArIHdoaWNoIF0gPSB0eXBlO1xyXG5cdH1cclxuXHJcblx0aWYgKCBpbmNsdWRlV2lkdGggKSB7XHJcblx0XHRhdHRycy5vcGFjaXR5ID0gYXR0cnMud2lkdGggPSB0eXBlO1xyXG5cdH1cclxuXHJcblx0cmV0dXJuIGF0dHJzO1xyXG59XHJcblxyXG5mdW5jdGlvbiBjcmVhdGVUd2VlbiggdmFsdWUsIHByb3AsIGFuaW1hdGlvbiApIHtcclxuXHR2YXIgdHdlZW4sXHJcblx0XHRjb2xsZWN0aW9uID0gKCB0d2VlbmVyc1sgcHJvcCBdIHx8IFtdICkuY29uY2F0KCB0d2VlbmVyc1sgXCIqXCIgXSApLFxyXG5cdFx0aW5kZXggPSAwLFxyXG5cdFx0bGVuZ3RoID0gY29sbGVjdGlvbi5sZW5ndGg7XHJcblx0Zm9yICggOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKyApIHtcclxuXHRcdGlmICggKHR3ZWVuID0gY29sbGVjdGlvblsgaW5kZXggXS5jYWxsKCBhbmltYXRpb24sIHByb3AsIHZhbHVlICkpICkge1xyXG5cclxuXHRcdFx0Ly8gd2UncmUgZG9uZSB3aXRoIHRoaXMgcHJvcGVydHlcclxuXHRcdFx0cmV0dXJuIHR3ZWVuO1xyXG5cdFx0fVxyXG5cdH1cclxufVxyXG5cclxuZnVuY3Rpb24gZGVmYXVsdFByZWZpbHRlciggZWxlbSwgcHJvcHMsIG9wdHMgKSB7XHJcblx0LyoganNoaW50IHZhbGlkdGhpczogdHJ1ZSAqL1xyXG5cdHZhciBwcm9wLCB2YWx1ZSwgdG9nZ2xlLCB0d2VlbiwgaG9va3MsIG9sZGZpcmUsIGRpc3BsYXksIGNoZWNrRGlzcGxheSxcclxuXHRcdGFuaW0gPSB0aGlzLFxyXG5cdFx0b3JpZyA9IHt9LFxyXG5cdFx0c3R5bGUgPSBlbGVtLnN0eWxlLFxyXG5cdFx0aGlkZGVuID0gZWxlbS5ub2RlVHlwZSAmJiBpc0hpZGRlbiggZWxlbSApLFxyXG5cdFx0ZGF0YVNob3cgPSBqUXVlcnkuX2RhdGEoIGVsZW0sIFwiZnhzaG93XCIgKTtcclxuXHJcblx0Ly8gaGFuZGxlIHF1ZXVlOiBmYWxzZSBwcm9taXNlc1xyXG5cdGlmICggIW9wdHMucXVldWUgKSB7XHJcblx0XHRob29rcyA9IGpRdWVyeS5fcXVldWVIb29rcyggZWxlbSwgXCJmeFwiICk7XHJcblx0XHRpZiAoIGhvb2tzLnVucXVldWVkID09IG51bGwgKSB7XHJcblx0XHRcdGhvb2tzLnVucXVldWVkID0gMDtcclxuXHRcdFx0b2xkZmlyZSA9IGhvb2tzLmVtcHR5LmZpcmU7XHJcblx0XHRcdGhvb2tzLmVtcHR5LmZpcmUgPSBmdW5jdGlvbigpIHtcclxuXHRcdFx0XHRpZiAoICFob29rcy51bnF1ZXVlZCApIHtcclxuXHRcdFx0XHRcdG9sZGZpcmUoKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH07XHJcblx0XHR9XHJcblx0XHRob29rcy51bnF1ZXVlZCsrO1xyXG5cclxuXHRcdGFuaW0uYWx3YXlzKGZ1bmN0aW9uKCkge1xyXG5cdFx0XHQvLyBkb2luZyB0aGlzIG1ha2VzIHN1cmUgdGhhdCB0aGUgY29tcGxldGUgaGFuZGxlciB3aWxsIGJlIGNhbGxlZFxyXG5cdFx0XHQvLyBiZWZvcmUgdGhpcyBjb21wbGV0ZXNcclxuXHRcdFx0YW5pbS5hbHdheXMoZnVuY3Rpb24oKSB7XHJcblx0XHRcdFx0aG9va3MudW5xdWV1ZWQtLTtcclxuXHRcdFx0XHRpZiAoICFqUXVlcnkucXVldWUoIGVsZW0sIFwiZnhcIiApLmxlbmd0aCApIHtcclxuXHRcdFx0XHRcdGhvb2tzLmVtcHR5LmZpcmUoKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH0pO1xyXG5cdFx0fSk7XHJcblx0fVxyXG5cclxuXHQvLyBoZWlnaHQvd2lkdGggb3ZlcmZsb3cgcGFzc1xyXG5cdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSAmJiAoIFwiaGVpZ2h0XCIgaW4gcHJvcHMgfHwgXCJ3aWR0aFwiIGluIHByb3BzICkgKSB7XHJcblx0XHQvLyBNYWtlIHN1cmUgdGhhdCBub3RoaW5nIHNuZWFrcyBvdXRcclxuXHRcdC8vIFJlY29yZCBhbGwgMyBvdmVyZmxvdyBhdHRyaWJ1dGVzIGJlY2F1c2UgSUUgZG9lcyBub3RcclxuXHRcdC8vIGNoYW5nZSB0aGUgb3ZlcmZsb3cgYXR0cmlidXRlIHdoZW4gb3ZlcmZsb3dYIGFuZFxyXG5cdFx0Ly8gb3ZlcmZsb3dZIGFyZSBzZXQgdG8gdGhlIHNhbWUgdmFsdWVcclxuXHRcdG9wdHMub3ZlcmZsb3cgPSBbIHN0eWxlLm92ZXJmbG93LCBzdHlsZS5vdmVyZmxvd1gsIHN0eWxlLm92ZXJmbG93WSBdO1xyXG5cclxuXHRcdC8vIFNldCBkaXNwbGF5IHByb3BlcnR5IHRvIGlubGluZS1ibG9jayBmb3IgaGVpZ2h0L3dpZHRoXHJcblx0XHQvLyBhbmltYXRpb25zIG9uIGlubGluZSBlbGVtZW50cyB0aGF0IGFyZSBoYXZpbmcgd2lkdGgvaGVpZ2h0IGFuaW1hdGVkXHJcblx0XHRkaXNwbGF5ID0galF1ZXJ5LmNzcyggZWxlbSwgXCJkaXNwbGF5XCIgKTtcclxuXHJcblx0XHQvLyBUZXN0IGRlZmF1bHQgZGlzcGxheSBpZiBkaXNwbGF5IGlzIGN1cnJlbnRseSBcIm5vbmVcIlxyXG5cdFx0Y2hlY2tEaXNwbGF5ID0gZGlzcGxheSA9PT0gXCJub25lXCIgP1xyXG5cdFx0XHRqUXVlcnkuX2RhdGEoIGVsZW0sIFwib2xkZGlzcGxheVwiICkgfHwgZGVmYXVsdERpc3BsYXkoIGVsZW0ubm9kZU5hbWUgKSA6IGRpc3BsYXk7XHJcblxyXG5cdFx0aWYgKCBjaGVja0Rpc3BsYXkgPT09IFwiaW5saW5lXCIgJiYgalF1ZXJ5LmNzcyggZWxlbSwgXCJmbG9hdFwiICkgPT09IFwibm9uZVwiICkge1xyXG5cclxuXHRcdFx0Ly8gaW5saW5lLWxldmVsIGVsZW1lbnRzIGFjY2VwdCBpbmxpbmUtYmxvY2s7XHJcblx0XHRcdC8vIGJsb2NrLWxldmVsIGVsZW1lbnRzIG5lZWQgdG8gYmUgaW5saW5lIHdpdGggbGF5b3V0XHJcblx0XHRcdGlmICggIXN1cHBvcnQuaW5saW5lQmxvY2tOZWVkc0xheW91dCB8fCBkZWZhdWx0RGlzcGxheSggZWxlbS5ub2RlTmFtZSApID09PSBcImlubGluZVwiICkge1xyXG5cdFx0XHRcdHN0eWxlLmRpc3BsYXkgPSBcImlubGluZS1ibG9ja1wiO1xyXG5cdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdHN0eWxlLnpvb20gPSAxO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0fVxyXG5cclxuXHRpZiAoIG9wdHMub3ZlcmZsb3cgKSB7XHJcblx0XHRzdHlsZS5vdmVyZmxvdyA9IFwiaGlkZGVuXCI7XHJcblx0XHRpZiAoICFzdXBwb3J0LnNocmlua1dyYXBCbG9ja3MoKSApIHtcclxuXHRcdFx0YW5pbS5hbHdheXMoZnVuY3Rpb24oKSB7XHJcblx0XHRcdFx0c3R5bGUub3ZlcmZsb3cgPSBvcHRzLm92ZXJmbG93WyAwIF07XHJcblx0XHRcdFx0c3R5bGUub3ZlcmZsb3dYID0gb3B0cy5vdmVyZmxvd1sgMSBdO1xyXG5cdFx0XHRcdHN0eWxlLm92ZXJmbG93WSA9IG9wdHMub3ZlcmZsb3dbIDIgXTtcclxuXHRcdFx0fSk7XHJcblx0XHR9XHJcblx0fVxyXG5cclxuXHQvLyBzaG93L2hpZGUgcGFzc1xyXG5cdGZvciAoIHByb3AgaW4gcHJvcHMgKSB7XHJcblx0XHR2YWx1ZSA9IHByb3BzWyBwcm9wIF07XHJcblx0XHRpZiAoIHJmeHR5cGVzLmV4ZWMoIHZhbHVlICkgKSB7XHJcblx0XHRcdGRlbGV0ZSBwcm9wc1sgcHJvcCBdO1xyXG5cdFx0XHR0b2dnbGUgPSB0b2dnbGUgfHwgdmFsdWUgPT09IFwidG9nZ2xlXCI7XHJcblx0XHRcdGlmICggdmFsdWUgPT09ICggaGlkZGVuID8gXCJoaWRlXCIgOiBcInNob3dcIiApICkge1xyXG5cclxuXHRcdFx0XHQvLyBJZiB0aGVyZSBpcyBkYXRhU2hvdyBsZWZ0IG92ZXIgZnJvbSBhIHN0b3BwZWQgaGlkZSBvciBzaG93IGFuZCB3ZSBhcmUgZ29pbmcgdG8gcHJvY2VlZCB3aXRoIHNob3csIHdlIHNob3VsZCBwcmV0ZW5kIHRvIGJlIGhpZGRlblxyXG5cdFx0XHRcdGlmICggdmFsdWUgPT09IFwic2hvd1wiICYmIGRhdGFTaG93ICYmIGRhdGFTaG93WyBwcm9wIF0gIT09IHVuZGVmaW5lZCApIHtcclxuXHRcdFx0XHRcdGhpZGRlbiA9IHRydWU7XHJcblx0XHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRcdGNvbnRpbnVlO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0XHRvcmlnWyBwcm9wIF0gPSBkYXRhU2hvdyAmJiBkYXRhU2hvd1sgcHJvcCBdIHx8IGpRdWVyeS5zdHlsZSggZWxlbSwgcHJvcCApO1xyXG5cclxuXHRcdC8vIEFueSBub24tZnggdmFsdWUgc3RvcHMgdXMgZnJvbSByZXN0b3JpbmcgdGhlIG9yaWdpbmFsIGRpc3BsYXkgdmFsdWVcclxuXHRcdH0gZWxzZSB7XHJcblx0XHRcdGRpc3BsYXkgPSB1bmRlZmluZWQ7XHJcblx0XHR9XHJcblx0fVxyXG5cclxuXHRpZiAoICFqUXVlcnkuaXNFbXB0eU9iamVjdCggb3JpZyApICkge1xyXG5cdFx0aWYgKCBkYXRhU2hvdyApIHtcclxuXHRcdFx0aWYgKCBcImhpZGRlblwiIGluIGRhdGFTaG93ICkge1xyXG5cdFx0XHRcdGhpZGRlbiA9IGRhdGFTaG93LmhpZGRlbjtcclxuXHRcdFx0fVxyXG5cdFx0fSBlbHNlIHtcclxuXHRcdFx0ZGF0YVNob3cgPSBqUXVlcnkuX2RhdGEoIGVsZW0sIFwiZnhzaG93XCIsIHt9ICk7XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gc3RvcmUgc3RhdGUgaWYgaXRzIHRvZ2dsZSAtIGVuYWJsZXMgLnN0b3AoKS50b2dnbGUoKSB0byBcInJldmVyc2VcIlxyXG5cdFx0aWYgKCB0b2dnbGUgKSB7XHJcblx0XHRcdGRhdGFTaG93LmhpZGRlbiA9ICFoaWRkZW47XHJcblx0XHR9XHJcblx0XHRpZiAoIGhpZGRlbiApIHtcclxuXHRcdFx0alF1ZXJ5KCBlbGVtICkuc2hvdygpO1xyXG5cdFx0fSBlbHNlIHtcclxuXHRcdFx0YW5pbS5kb25lKGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRcdGpRdWVyeSggZWxlbSApLmhpZGUoKTtcclxuXHRcdFx0fSk7XHJcblx0XHR9XHJcblx0XHRhbmltLmRvbmUoZnVuY3Rpb24oKSB7XHJcblx0XHRcdHZhciBwcm9wO1xyXG5cdFx0XHRqUXVlcnkuX3JlbW92ZURhdGEoIGVsZW0sIFwiZnhzaG93XCIgKTtcclxuXHRcdFx0Zm9yICggcHJvcCBpbiBvcmlnICkge1xyXG5cdFx0XHRcdGpRdWVyeS5zdHlsZSggZWxlbSwgcHJvcCwgb3JpZ1sgcHJvcCBdICk7XHJcblx0XHRcdH1cclxuXHRcdH0pO1xyXG5cdFx0Zm9yICggcHJvcCBpbiBvcmlnICkge1xyXG5cdFx0XHR0d2VlbiA9IGNyZWF0ZVR3ZWVuKCBoaWRkZW4gPyBkYXRhU2hvd1sgcHJvcCBdIDogMCwgcHJvcCwgYW5pbSApO1xyXG5cclxuXHRcdFx0aWYgKCAhKCBwcm9wIGluIGRhdGFTaG93ICkgKSB7XHJcblx0XHRcdFx0ZGF0YVNob3dbIHByb3AgXSA9IHR3ZWVuLnN0YXJ0O1xyXG5cdFx0XHRcdGlmICggaGlkZGVuICkge1xyXG5cdFx0XHRcdFx0dHdlZW4uZW5kID0gdHdlZW4uc3RhcnQ7XHJcblx0XHRcdFx0XHR0d2Vlbi5zdGFydCA9IHByb3AgPT09IFwid2lkdGhcIiB8fCBwcm9wID09PSBcImhlaWdodFwiID8gMSA6IDA7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHR9XHJcblxyXG5cdC8vIElmIHRoaXMgaXMgYSBub29wIGxpa2UgLmhpZGUoKS5oaWRlKCksIHJlc3RvcmUgYW4gb3ZlcndyaXR0ZW4gZGlzcGxheSB2YWx1ZVxyXG5cdH0gZWxzZSBpZiAoIChkaXNwbGF5ID09PSBcIm5vbmVcIiA/IGRlZmF1bHREaXNwbGF5KCBlbGVtLm5vZGVOYW1lICkgOiBkaXNwbGF5KSA9PT0gXCJpbmxpbmVcIiApIHtcclxuXHRcdHN0eWxlLmRpc3BsYXkgPSBkaXNwbGF5O1xyXG5cdH1cclxufVxyXG5cclxuZnVuY3Rpb24gcHJvcEZpbHRlciggcHJvcHMsIHNwZWNpYWxFYXNpbmcgKSB7XHJcblx0dmFyIGluZGV4LCBuYW1lLCBlYXNpbmcsIHZhbHVlLCBob29rcztcclxuXHJcblx0Ly8gY2FtZWxDYXNlLCBzcGVjaWFsRWFzaW5nIGFuZCBleHBhbmQgY3NzSG9vayBwYXNzXHJcblx0Zm9yICggaW5kZXggaW4gcHJvcHMgKSB7XHJcblx0XHRuYW1lID0galF1ZXJ5LmNhbWVsQ2FzZSggaW5kZXggKTtcclxuXHRcdGVhc2luZyA9IHNwZWNpYWxFYXNpbmdbIG5hbWUgXTtcclxuXHRcdHZhbHVlID0gcHJvcHNbIGluZGV4IF07XHJcblx0XHRpZiAoIGpRdWVyeS5pc0FycmF5KCB2YWx1ZSApICkge1xyXG5cdFx0XHRlYXNpbmcgPSB2YWx1ZVsgMSBdO1xyXG5cdFx0XHR2YWx1ZSA9IHByb3BzWyBpbmRleCBdID0gdmFsdWVbIDAgXTtcclxuXHRcdH1cclxuXHJcblx0XHRpZiAoIGluZGV4ICE9PSBuYW1lICkge1xyXG5cdFx0XHRwcm9wc1sgbmFtZSBdID0gdmFsdWU7XHJcblx0XHRcdGRlbGV0ZSBwcm9wc1sgaW5kZXggXTtcclxuXHRcdH1cclxuXHJcblx0XHRob29rcyA9IGpRdWVyeS5jc3NIb29rc1sgbmFtZSBdO1xyXG5cdFx0aWYgKCBob29rcyAmJiBcImV4cGFuZFwiIGluIGhvb2tzICkge1xyXG5cdFx0XHR2YWx1ZSA9IGhvb2tzLmV4cGFuZCggdmFsdWUgKTtcclxuXHRcdFx0ZGVsZXRlIHByb3BzWyBuYW1lIF07XHJcblxyXG5cdFx0XHQvLyBub3QgcXVpdGUgJC5leHRlbmQsIHRoaXMgd29udCBvdmVyd3JpdGUga2V5cyBhbHJlYWR5IHByZXNlbnQuXHJcblx0XHRcdC8vIGFsc28gLSByZXVzaW5nICdpbmRleCcgZnJvbSBhYm92ZSBiZWNhdXNlIHdlIGhhdmUgdGhlIGNvcnJlY3QgXCJuYW1lXCJcclxuXHRcdFx0Zm9yICggaW5kZXggaW4gdmFsdWUgKSB7XHJcblx0XHRcdFx0aWYgKCAhKCBpbmRleCBpbiBwcm9wcyApICkge1xyXG5cdFx0XHRcdFx0cHJvcHNbIGluZGV4IF0gPSB2YWx1ZVsgaW5kZXggXTtcclxuXHRcdFx0XHRcdHNwZWNpYWxFYXNpbmdbIGluZGV4IF0gPSBlYXNpbmc7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHR9IGVsc2Uge1xyXG5cdFx0XHRzcGVjaWFsRWFzaW5nWyBuYW1lIF0gPSBlYXNpbmc7XHJcblx0XHR9XHJcblx0fVxyXG59XHJcblxyXG5mdW5jdGlvbiBBbmltYXRpb24oIGVsZW0sIHByb3BlcnRpZXMsIG9wdGlvbnMgKSB7XHJcblx0dmFyIHJlc3VsdCxcclxuXHRcdHN0b3BwZWQsXHJcblx0XHRpbmRleCA9IDAsXHJcblx0XHRsZW5ndGggPSBhbmltYXRpb25QcmVmaWx0ZXJzLmxlbmd0aCxcclxuXHRcdGRlZmVycmVkID0galF1ZXJ5LkRlZmVycmVkKCkuYWx3YXlzKCBmdW5jdGlvbigpIHtcclxuXHRcdFx0Ly8gZG9uJ3QgbWF0Y2ggZWxlbSBpbiB0aGUgOmFuaW1hdGVkIHNlbGVjdG9yXHJcblx0XHRcdGRlbGV0ZSB0aWNrLmVsZW07XHJcblx0XHR9KSxcclxuXHRcdHRpY2sgPSBmdW5jdGlvbigpIHtcclxuXHRcdFx0aWYgKCBzdG9wcGVkICkge1xyXG5cdFx0XHRcdHJldHVybiBmYWxzZTtcclxuXHRcdFx0fVxyXG5cdFx0XHR2YXIgY3VycmVudFRpbWUgPSBmeE5vdyB8fCBjcmVhdGVGeE5vdygpLFxyXG5cdFx0XHRcdHJlbWFpbmluZyA9IE1hdGgubWF4KCAwLCBhbmltYXRpb24uc3RhcnRUaW1lICsgYW5pbWF0aW9uLmR1cmF0aW9uIC0gY3VycmVudFRpbWUgKSxcclxuXHRcdFx0XHQvLyBhcmNoYWljIGNyYXNoIGJ1ZyB3b24ndCBhbGxvdyB1cyB0byB1c2UgMSAtICggMC41IHx8IDAgKSAoIzEyNDk3KVxyXG5cdFx0XHRcdHRlbXAgPSByZW1haW5pbmcgLyBhbmltYXRpb24uZHVyYXRpb24gfHwgMCxcclxuXHRcdFx0XHRwZXJjZW50ID0gMSAtIHRlbXAsXHJcblx0XHRcdFx0aW5kZXggPSAwLFxyXG5cdFx0XHRcdGxlbmd0aCA9IGFuaW1hdGlvbi50d2VlbnMubGVuZ3RoO1xyXG5cclxuXHRcdFx0Zm9yICggOyBpbmRleCA8IGxlbmd0aCA7IGluZGV4KysgKSB7XHJcblx0XHRcdFx0YW5pbWF0aW9uLnR3ZWVuc1sgaW5kZXggXS5ydW4oIHBlcmNlbnQgKTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0ZGVmZXJyZWQubm90aWZ5V2l0aCggZWxlbSwgWyBhbmltYXRpb24sIHBlcmNlbnQsIHJlbWFpbmluZyBdKTtcclxuXHJcblx0XHRcdGlmICggcGVyY2VudCA8IDEgJiYgbGVuZ3RoICkge1xyXG5cdFx0XHRcdHJldHVybiByZW1haW5pbmc7XHJcblx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0ZGVmZXJyZWQucmVzb2x2ZVdpdGgoIGVsZW0sIFsgYW5pbWF0aW9uIF0gKTtcclxuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XHJcblx0XHRcdH1cclxuXHRcdH0sXHJcblx0XHRhbmltYXRpb24gPSBkZWZlcnJlZC5wcm9taXNlKHtcclxuXHRcdFx0ZWxlbTogZWxlbSxcclxuXHRcdFx0cHJvcHM6IGpRdWVyeS5leHRlbmQoIHt9LCBwcm9wZXJ0aWVzICksXHJcblx0XHRcdG9wdHM6IGpRdWVyeS5leHRlbmQoIHRydWUsIHsgc3BlY2lhbEVhc2luZzoge30gfSwgb3B0aW9ucyApLFxyXG5cdFx0XHRvcmlnaW5hbFByb3BlcnRpZXM6IHByb3BlcnRpZXMsXHJcblx0XHRcdG9yaWdpbmFsT3B0aW9uczogb3B0aW9ucyxcclxuXHRcdFx0c3RhcnRUaW1lOiBmeE5vdyB8fCBjcmVhdGVGeE5vdygpLFxyXG5cdFx0XHRkdXJhdGlvbjogb3B0aW9ucy5kdXJhdGlvbixcclxuXHRcdFx0dHdlZW5zOiBbXSxcclxuXHRcdFx0Y3JlYXRlVHdlZW46IGZ1bmN0aW9uKCBwcm9wLCBlbmQgKSB7XHJcblx0XHRcdFx0dmFyIHR3ZWVuID0galF1ZXJ5LlR3ZWVuKCBlbGVtLCBhbmltYXRpb24ub3B0cywgcHJvcCwgZW5kLFxyXG5cdFx0XHRcdFx0XHRhbmltYXRpb24ub3B0cy5zcGVjaWFsRWFzaW5nWyBwcm9wIF0gfHwgYW5pbWF0aW9uLm9wdHMuZWFzaW5nICk7XHJcblx0XHRcdFx0YW5pbWF0aW9uLnR3ZWVucy5wdXNoKCB0d2VlbiApO1xyXG5cdFx0XHRcdHJldHVybiB0d2VlbjtcclxuXHRcdFx0fSxcclxuXHRcdFx0c3RvcDogZnVuY3Rpb24oIGdvdG9FbmQgKSB7XHJcblx0XHRcdFx0dmFyIGluZGV4ID0gMCxcclxuXHRcdFx0XHRcdC8vIGlmIHdlIGFyZSBnb2luZyB0byB0aGUgZW5kLCB3ZSB3YW50IHRvIHJ1biBhbGwgdGhlIHR3ZWVuc1xyXG5cdFx0XHRcdFx0Ly8gb3RoZXJ3aXNlIHdlIHNraXAgdGhpcyBwYXJ0XHJcblx0XHRcdFx0XHRsZW5ndGggPSBnb3RvRW5kID8gYW5pbWF0aW9uLnR3ZWVucy5sZW5ndGggOiAwO1xyXG5cdFx0XHRcdGlmICggc3RvcHBlZCApIHtcclxuXHRcdFx0XHRcdHJldHVybiB0aGlzO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHRzdG9wcGVkID0gdHJ1ZTtcclxuXHRcdFx0XHRmb3IgKCA7IGluZGV4IDwgbGVuZ3RoIDsgaW5kZXgrKyApIHtcclxuXHRcdFx0XHRcdGFuaW1hdGlvbi50d2VlbnNbIGluZGV4IF0ucnVuKCAxICk7XHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHQvLyByZXNvbHZlIHdoZW4gd2UgcGxheWVkIHRoZSBsYXN0IGZyYW1lXHJcblx0XHRcdFx0Ly8gb3RoZXJ3aXNlLCByZWplY3RcclxuXHRcdFx0XHRpZiAoIGdvdG9FbmQgKSB7XHJcblx0XHRcdFx0XHRkZWZlcnJlZC5yZXNvbHZlV2l0aCggZWxlbSwgWyBhbmltYXRpb24sIGdvdG9FbmQgXSApO1xyXG5cdFx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0XHRkZWZlcnJlZC5yZWplY3RXaXRoKCBlbGVtLCBbIGFuaW1hdGlvbiwgZ290b0VuZCBdICk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHRcdHJldHVybiB0aGlzO1xyXG5cdFx0XHR9XHJcblx0XHR9KSxcclxuXHRcdHByb3BzID0gYW5pbWF0aW9uLnByb3BzO1xyXG5cclxuXHRwcm9wRmlsdGVyKCBwcm9wcywgYW5pbWF0aW9uLm9wdHMuc3BlY2lhbEVhc2luZyApO1xyXG5cclxuXHRmb3IgKCA7IGluZGV4IDwgbGVuZ3RoIDsgaW5kZXgrKyApIHtcclxuXHRcdHJlc3VsdCA9IGFuaW1hdGlvblByZWZpbHRlcnNbIGluZGV4IF0uY2FsbCggYW5pbWF0aW9uLCBlbGVtLCBwcm9wcywgYW5pbWF0aW9uLm9wdHMgKTtcclxuXHRcdGlmICggcmVzdWx0ICkge1xyXG5cdFx0XHRyZXR1cm4gcmVzdWx0O1xyXG5cdFx0fVxyXG5cdH1cclxuXHJcblx0alF1ZXJ5Lm1hcCggcHJvcHMsIGNyZWF0ZVR3ZWVuLCBhbmltYXRpb24gKTtcclxuXHJcblx0aWYgKCBqUXVlcnkuaXNGdW5jdGlvbiggYW5pbWF0aW9uLm9wdHMuc3RhcnQgKSApIHtcclxuXHRcdGFuaW1hdGlvbi5vcHRzLnN0YXJ0LmNhbGwoIGVsZW0sIGFuaW1hdGlvbiApO1xyXG5cdH1cclxuXHJcblx0alF1ZXJ5LmZ4LnRpbWVyKFxyXG5cdFx0alF1ZXJ5LmV4dGVuZCggdGljaywge1xyXG5cdFx0XHRlbGVtOiBlbGVtLFxyXG5cdFx0XHRhbmltOiBhbmltYXRpb24sXHJcblx0XHRcdHF1ZXVlOiBhbmltYXRpb24ub3B0cy5xdWV1ZVxyXG5cdFx0fSlcclxuXHQpO1xyXG5cclxuXHQvLyBhdHRhY2ggY2FsbGJhY2tzIGZyb20gb3B0aW9uc1xyXG5cdHJldHVybiBhbmltYXRpb24ucHJvZ3Jlc3MoIGFuaW1hdGlvbi5vcHRzLnByb2dyZXNzIClcclxuXHRcdC5kb25lKCBhbmltYXRpb24ub3B0cy5kb25lLCBhbmltYXRpb24ub3B0cy5jb21wbGV0ZSApXHJcblx0XHQuZmFpbCggYW5pbWF0aW9uLm9wdHMuZmFpbCApXHJcblx0XHQuYWx3YXlzKCBhbmltYXRpb24ub3B0cy5hbHdheXMgKTtcclxufVxyXG5cclxualF1ZXJ5LkFuaW1hdGlvbiA9IGpRdWVyeS5leHRlbmQoIEFuaW1hdGlvbiwge1xyXG5cdHR3ZWVuZXI6IGZ1bmN0aW9uKCBwcm9wcywgY2FsbGJhY2sgKSB7XHJcblx0XHRpZiAoIGpRdWVyeS5pc0Z1bmN0aW9uKCBwcm9wcyApICkge1xyXG5cdFx0XHRjYWxsYmFjayA9IHByb3BzO1xyXG5cdFx0XHRwcm9wcyA9IFsgXCIqXCIgXTtcclxuXHRcdH0gZWxzZSB7XHJcblx0XHRcdHByb3BzID0gcHJvcHMuc3BsaXQoXCIgXCIpO1xyXG5cdFx0fVxyXG5cclxuXHRcdHZhciBwcm9wLFxyXG5cdFx0XHRpbmRleCA9IDAsXHJcblx0XHRcdGxlbmd0aCA9IHByb3BzLmxlbmd0aDtcclxuXHJcblx0XHRmb3IgKCA7IGluZGV4IDwgbGVuZ3RoIDsgaW5kZXgrKyApIHtcclxuXHRcdFx0cHJvcCA9IHByb3BzWyBpbmRleCBdO1xyXG5cdFx0XHR0d2VlbmVyc1sgcHJvcCBdID0gdHdlZW5lcnNbIHByb3AgXSB8fCBbXTtcclxuXHRcdFx0dHdlZW5lcnNbIHByb3AgXS51bnNoaWZ0KCBjYWxsYmFjayApO1xyXG5cdFx0fVxyXG5cdH0sXHJcblxyXG5cdHByZWZpbHRlcjogZnVuY3Rpb24oIGNhbGxiYWNrLCBwcmVwZW5kICkge1xyXG5cdFx0aWYgKCBwcmVwZW5kICkge1xyXG5cdFx0XHRhbmltYXRpb25QcmVmaWx0ZXJzLnVuc2hpZnQoIGNhbGxiYWNrICk7XHJcblx0XHR9IGVsc2Uge1xyXG5cdFx0XHRhbmltYXRpb25QcmVmaWx0ZXJzLnB1c2goIGNhbGxiYWNrICk7XHJcblx0XHR9XHJcblx0fVxyXG59KTtcclxuXHJcbmpRdWVyeS5zcGVlZCA9IGZ1bmN0aW9uKCBzcGVlZCwgZWFzaW5nLCBmbiApIHtcclxuXHR2YXIgb3B0ID0gc3BlZWQgJiYgdHlwZW9mIHNwZWVkID09PSBcIm9iamVjdFwiID8galF1ZXJ5LmV4dGVuZCgge30sIHNwZWVkICkgOiB7XHJcblx0XHRjb21wbGV0ZTogZm4gfHwgIWZuICYmIGVhc2luZyB8fFxyXG5cdFx0XHRqUXVlcnkuaXNGdW5jdGlvbiggc3BlZWQgKSAmJiBzcGVlZCxcclxuXHRcdGR1cmF0aW9uOiBzcGVlZCxcclxuXHRcdGVhc2luZzogZm4gJiYgZWFzaW5nIHx8IGVhc2luZyAmJiAhalF1ZXJ5LmlzRnVuY3Rpb24oIGVhc2luZyApICYmIGVhc2luZ1xyXG5cdH07XHJcblxyXG5cdG9wdC5kdXJhdGlvbiA9IGpRdWVyeS5meC5vZmYgPyAwIDogdHlwZW9mIG9wdC5kdXJhdGlvbiA9PT0gXCJudW1iZXJcIiA/IG9wdC5kdXJhdGlvbiA6XHJcblx0XHRvcHQuZHVyYXRpb24gaW4galF1ZXJ5LmZ4LnNwZWVkcyA/IGpRdWVyeS5meC5zcGVlZHNbIG9wdC5kdXJhdGlvbiBdIDogalF1ZXJ5LmZ4LnNwZWVkcy5fZGVmYXVsdDtcclxuXHJcblx0Ly8gbm9ybWFsaXplIG9wdC5xdWV1ZSAtIHRydWUvdW5kZWZpbmVkL251bGwgLT4gXCJmeFwiXHJcblx0aWYgKCBvcHQucXVldWUgPT0gbnVsbCB8fCBvcHQucXVldWUgPT09IHRydWUgKSB7XHJcblx0XHRvcHQucXVldWUgPSBcImZ4XCI7XHJcblx0fVxyXG5cclxuXHQvLyBRdWV1ZWluZ1xyXG5cdG9wdC5vbGQgPSBvcHQuY29tcGxldGU7XHJcblxyXG5cdG9wdC5jb21wbGV0ZSA9IGZ1bmN0aW9uKCkge1xyXG5cdFx0aWYgKCBqUXVlcnkuaXNGdW5jdGlvbiggb3B0Lm9sZCApICkge1xyXG5cdFx0XHRvcHQub2xkLmNhbGwoIHRoaXMgKTtcclxuXHRcdH1cclxuXHJcblx0XHRpZiAoIG9wdC5xdWV1ZSApIHtcclxuXHRcdFx0alF1ZXJ5LmRlcXVldWUoIHRoaXMsIG9wdC5xdWV1ZSApO1xyXG5cdFx0fVxyXG5cdH07XHJcblxyXG5cdHJldHVybiBvcHQ7XHJcbn07XHJcblxyXG5qUXVlcnkuZm4uZXh0ZW5kKHtcclxuXHRmYWRlVG86IGZ1bmN0aW9uKCBzcGVlZCwgdG8sIGVhc2luZywgY2FsbGJhY2sgKSB7XHJcblxyXG5cdFx0Ly8gc2hvdyBhbnkgaGlkZGVuIGVsZW1lbnRzIGFmdGVyIHNldHRpbmcgb3BhY2l0eSB0byAwXHJcblx0XHRyZXR1cm4gdGhpcy5maWx0ZXIoIGlzSGlkZGVuICkuY3NzKCBcIm9wYWNpdHlcIiwgMCApLnNob3coKVxyXG5cclxuXHRcdFx0Ly8gYW5pbWF0ZSB0byB0aGUgdmFsdWUgc3BlY2lmaWVkXHJcblx0XHRcdC5lbmQoKS5hbmltYXRlKHsgb3BhY2l0eTogdG8gfSwgc3BlZWQsIGVhc2luZywgY2FsbGJhY2sgKTtcclxuXHR9LFxyXG5cdGFuaW1hdGU6IGZ1bmN0aW9uKCBwcm9wLCBzcGVlZCwgZWFzaW5nLCBjYWxsYmFjayApIHtcclxuXHRcdHZhciBlbXB0eSA9IGpRdWVyeS5pc0VtcHR5T2JqZWN0KCBwcm9wICksXHJcblx0XHRcdG9wdGFsbCA9IGpRdWVyeS5zcGVlZCggc3BlZWQsIGVhc2luZywgY2FsbGJhY2sgKSxcclxuXHRcdFx0ZG9BbmltYXRpb24gPSBmdW5jdGlvbigpIHtcclxuXHRcdFx0XHQvLyBPcGVyYXRlIG9uIGEgY29weSBvZiBwcm9wIHNvIHBlci1wcm9wZXJ0eSBlYXNpbmcgd29uJ3QgYmUgbG9zdFxyXG5cdFx0XHRcdHZhciBhbmltID0gQW5pbWF0aW9uKCB0aGlzLCBqUXVlcnkuZXh0ZW5kKCB7fSwgcHJvcCApLCBvcHRhbGwgKTtcclxuXHJcblx0XHRcdFx0Ly8gRW1wdHkgYW5pbWF0aW9ucywgb3IgZmluaXNoaW5nIHJlc29sdmVzIGltbWVkaWF0ZWx5XHJcblx0XHRcdFx0aWYgKCBlbXB0eSB8fCBqUXVlcnkuX2RhdGEoIHRoaXMsIFwiZmluaXNoXCIgKSApIHtcclxuXHRcdFx0XHRcdGFuaW0uc3RvcCggdHJ1ZSApO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fTtcclxuXHRcdFx0ZG9BbmltYXRpb24uZmluaXNoID0gZG9BbmltYXRpb247XHJcblxyXG5cdFx0cmV0dXJuIGVtcHR5IHx8IG9wdGFsbC5xdWV1ZSA9PT0gZmFsc2UgP1xyXG5cdFx0XHR0aGlzLmVhY2goIGRvQW5pbWF0aW9uICkgOlxyXG5cdFx0XHR0aGlzLnF1ZXVlKCBvcHRhbGwucXVldWUsIGRvQW5pbWF0aW9uICk7XHJcblx0fSxcclxuXHRzdG9wOiBmdW5jdGlvbiggdHlwZSwgY2xlYXJRdWV1ZSwgZ290b0VuZCApIHtcclxuXHRcdHZhciBzdG9wUXVldWUgPSBmdW5jdGlvbiggaG9va3MgKSB7XHJcblx0XHRcdHZhciBzdG9wID0gaG9va3Muc3RvcDtcclxuXHRcdFx0ZGVsZXRlIGhvb2tzLnN0b3A7XHJcblx0XHRcdHN0b3AoIGdvdG9FbmQgKTtcclxuXHRcdH07XHJcblxyXG5cdFx0aWYgKCB0eXBlb2YgdHlwZSAhPT0gXCJzdHJpbmdcIiApIHtcclxuXHRcdFx0Z290b0VuZCA9IGNsZWFyUXVldWU7XHJcblx0XHRcdGNsZWFyUXVldWUgPSB0eXBlO1xyXG5cdFx0XHR0eXBlID0gdW5kZWZpbmVkO1xyXG5cdFx0fVxyXG5cdFx0aWYgKCBjbGVhclF1ZXVlICYmIHR5cGUgIT09IGZhbHNlICkge1xyXG5cdFx0XHR0aGlzLnF1ZXVlKCB0eXBlIHx8IFwiZnhcIiwgW10gKTtcclxuXHRcdH1cclxuXHJcblx0XHRyZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKCkge1xyXG5cdFx0XHR2YXIgZGVxdWV1ZSA9IHRydWUsXHJcblx0XHRcdFx0aW5kZXggPSB0eXBlICE9IG51bGwgJiYgdHlwZSArIFwicXVldWVIb29rc1wiLFxyXG5cdFx0XHRcdHRpbWVycyA9IGpRdWVyeS50aW1lcnMsXHJcblx0XHRcdFx0ZGF0YSA9IGpRdWVyeS5fZGF0YSggdGhpcyApO1xyXG5cclxuXHRcdFx0aWYgKCBpbmRleCApIHtcclxuXHRcdFx0XHRpZiAoIGRhdGFbIGluZGV4IF0gJiYgZGF0YVsgaW5kZXggXS5zdG9wICkge1xyXG5cdFx0XHRcdFx0c3RvcFF1ZXVlKCBkYXRhWyBpbmRleCBdICk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdGZvciAoIGluZGV4IGluIGRhdGEgKSB7XHJcblx0XHRcdFx0XHRpZiAoIGRhdGFbIGluZGV4IF0gJiYgZGF0YVsgaW5kZXggXS5zdG9wICYmIHJydW4udGVzdCggaW5kZXggKSApIHtcclxuXHRcdFx0XHRcdFx0c3RvcFF1ZXVlKCBkYXRhWyBpbmRleCBdICk7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRmb3IgKCBpbmRleCA9IHRpbWVycy5sZW5ndGg7IGluZGV4LS07ICkge1xyXG5cdFx0XHRcdGlmICggdGltZXJzWyBpbmRleCBdLmVsZW0gPT09IHRoaXMgJiYgKHR5cGUgPT0gbnVsbCB8fCB0aW1lcnNbIGluZGV4IF0ucXVldWUgPT09IHR5cGUpICkge1xyXG5cdFx0XHRcdFx0dGltZXJzWyBpbmRleCBdLmFuaW0uc3RvcCggZ290b0VuZCApO1xyXG5cdFx0XHRcdFx0ZGVxdWV1ZSA9IGZhbHNlO1xyXG5cdFx0XHRcdFx0dGltZXJzLnNwbGljZSggaW5kZXgsIDEgKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdC8vIHN0YXJ0IHRoZSBuZXh0IGluIHRoZSBxdWV1ZSBpZiB0aGUgbGFzdCBzdGVwIHdhc24ndCBmb3JjZWRcclxuXHRcdFx0Ly8gdGltZXJzIGN1cnJlbnRseSB3aWxsIGNhbGwgdGhlaXIgY29tcGxldGUgY2FsbGJhY2tzLCB3aGljaCB3aWxsIGRlcXVldWVcclxuXHRcdFx0Ly8gYnV0IG9ubHkgaWYgdGhleSB3ZXJlIGdvdG9FbmRcclxuXHRcdFx0aWYgKCBkZXF1ZXVlIHx8ICFnb3RvRW5kICkge1xyXG5cdFx0XHRcdGpRdWVyeS5kZXF1ZXVlKCB0aGlzLCB0eXBlICk7XHJcblx0XHRcdH1cclxuXHRcdH0pO1xyXG5cdH0sXHJcblx0ZmluaXNoOiBmdW5jdGlvbiggdHlwZSApIHtcclxuXHRcdGlmICggdHlwZSAhPT0gZmFsc2UgKSB7XHJcblx0XHRcdHR5cGUgPSB0eXBlIHx8IFwiZnhcIjtcclxuXHRcdH1cclxuXHRcdHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oKSB7XHJcblx0XHRcdHZhciBpbmRleCxcclxuXHRcdFx0XHRkYXRhID0galF1ZXJ5Ll9kYXRhKCB0aGlzICksXHJcblx0XHRcdFx0cXVldWUgPSBkYXRhWyB0eXBlICsgXCJxdWV1ZVwiIF0sXHJcblx0XHRcdFx0aG9va3MgPSBkYXRhWyB0eXBlICsgXCJxdWV1ZUhvb2tzXCIgXSxcclxuXHRcdFx0XHR0aW1lcnMgPSBqUXVlcnkudGltZXJzLFxyXG5cdFx0XHRcdGxlbmd0aCA9IHF1ZXVlID8gcXVldWUubGVuZ3RoIDogMDtcclxuXHJcblx0XHRcdC8vIGVuYWJsZSBmaW5pc2hpbmcgZmxhZyBvbiBwcml2YXRlIGRhdGFcclxuXHRcdFx0ZGF0YS5maW5pc2ggPSB0cnVlO1xyXG5cclxuXHRcdFx0Ly8gZW1wdHkgdGhlIHF1ZXVlIGZpcnN0XHJcblx0XHRcdGpRdWVyeS5xdWV1ZSggdGhpcywgdHlwZSwgW10gKTtcclxuXHJcblx0XHRcdGlmICggaG9va3MgJiYgaG9va3Muc3RvcCApIHtcclxuXHRcdFx0XHRob29rcy5zdG9wLmNhbGwoIHRoaXMsIHRydWUgKTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0Ly8gbG9vayBmb3IgYW55IGFjdGl2ZSBhbmltYXRpb25zLCBhbmQgZmluaXNoIHRoZW1cclxuXHRcdFx0Zm9yICggaW5kZXggPSB0aW1lcnMubGVuZ3RoOyBpbmRleC0tOyApIHtcclxuXHRcdFx0XHRpZiAoIHRpbWVyc1sgaW5kZXggXS5lbGVtID09PSB0aGlzICYmIHRpbWVyc1sgaW5kZXggXS5xdWV1ZSA9PT0gdHlwZSApIHtcclxuXHRcdFx0XHRcdHRpbWVyc1sgaW5kZXggXS5hbmltLnN0b3AoIHRydWUgKTtcclxuXHRcdFx0XHRcdHRpbWVycy5zcGxpY2UoIGluZGV4LCAxICk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHQvLyBsb29rIGZvciBhbnkgYW5pbWF0aW9ucyBpbiB0aGUgb2xkIHF1ZXVlIGFuZCBmaW5pc2ggdGhlbVxyXG5cdFx0XHRmb3IgKCBpbmRleCA9IDA7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrICkge1xyXG5cdFx0XHRcdGlmICggcXVldWVbIGluZGV4IF0gJiYgcXVldWVbIGluZGV4IF0uZmluaXNoICkge1xyXG5cdFx0XHRcdFx0cXVldWVbIGluZGV4IF0uZmluaXNoLmNhbGwoIHRoaXMgKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdC8vIHR1cm4gb2ZmIGZpbmlzaGluZyBmbGFnXHJcblx0XHRcdGRlbGV0ZSBkYXRhLmZpbmlzaDtcclxuXHRcdH0pO1xyXG5cdH1cclxufSk7XHJcblxyXG5qUXVlcnkuZWFjaChbIFwidG9nZ2xlXCIsIFwic2hvd1wiLCBcImhpZGVcIiBdLCBmdW5jdGlvbiggaSwgbmFtZSApIHtcclxuXHR2YXIgY3NzRm4gPSBqUXVlcnkuZm5bIG5hbWUgXTtcclxuXHRqUXVlcnkuZm5bIG5hbWUgXSA9IGZ1bmN0aW9uKCBzcGVlZCwgZWFzaW5nLCBjYWxsYmFjayApIHtcclxuXHRcdHJldHVybiBzcGVlZCA9PSBudWxsIHx8IHR5cGVvZiBzcGVlZCA9PT0gXCJib29sZWFuXCIgP1xyXG5cdFx0XHRjc3NGbi5hcHBseSggdGhpcywgYXJndW1lbnRzICkgOlxyXG5cdFx0XHR0aGlzLmFuaW1hdGUoIGdlbkZ4KCBuYW1lLCB0cnVlICksIHNwZWVkLCBlYXNpbmcsIGNhbGxiYWNrICk7XHJcblx0fTtcclxufSk7XHJcblxyXG4vLyBHZW5lcmF0ZSBzaG9ydGN1dHMgZm9yIGN1c3RvbSBhbmltYXRpb25zXHJcbmpRdWVyeS5lYWNoKHtcclxuXHRzbGlkZURvd246IGdlbkZ4KFwic2hvd1wiKSxcclxuXHRzbGlkZVVwOiBnZW5GeChcImhpZGVcIiksXHJcblx0c2xpZGVUb2dnbGU6IGdlbkZ4KFwidG9nZ2xlXCIpLFxyXG5cdGZhZGVJbjogeyBvcGFjaXR5OiBcInNob3dcIiB9LFxyXG5cdGZhZGVPdXQ6IHsgb3BhY2l0eTogXCJoaWRlXCIgfSxcclxuXHRmYWRlVG9nZ2xlOiB7IG9wYWNpdHk6IFwidG9nZ2xlXCIgfVxyXG59LCBmdW5jdGlvbiggbmFtZSwgcHJvcHMgKSB7XHJcblx0alF1ZXJ5LmZuWyBuYW1lIF0gPSBmdW5jdGlvbiggc3BlZWQsIGVhc2luZywgY2FsbGJhY2sgKSB7XHJcblx0XHRyZXR1cm4gdGhpcy5hbmltYXRlKCBwcm9wcywgc3BlZWQsIGVhc2luZywgY2FsbGJhY2sgKTtcclxuXHR9O1xyXG59KTtcclxuXHJcbmpRdWVyeS50aW1lcnMgPSBbXTtcclxualF1ZXJ5LmZ4LnRpY2sgPSBmdW5jdGlvbigpIHtcclxuXHR2YXIgdGltZXIsXHJcblx0XHR0aW1lcnMgPSBqUXVlcnkudGltZXJzLFxyXG5cdFx0aSA9IDA7XHJcblxyXG5cdGZ4Tm93ID0galF1ZXJ5Lm5vdygpO1xyXG5cclxuXHRmb3IgKCA7IGkgPCB0aW1lcnMubGVuZ3RoOyBpKysgKSB7XHJcblx0XHR0aW1lciA9IHRpbWVyc1sgaSBdO1xyXG5cdFx0Ly8gQ2hlY2tzIHRoZSB0aW1lciBoYXMgbm90IGFscmVhZHkgYmVlbiByZW1vdmVkXHJcblx0XHRpZiAoICF0aW1lcigpICYmIHRpbWVyc1sgaSBdID09PSB0aW1lciApIHtcclxuXHRcdFx0dGltZXJzLnNwbGljZSggaS0tLCAxICk7XHJcblx0XHR9XHJcblx0fVxyXG5cclxuXHRpZiAoICF0aW1lcnMubGVuZ3RoICkge1xyXG5cdFx0alF1ZXJ5LmZ4LnN0b3AoKTtcclxuXHR9XHJcblx0ZnhOb3cgPSB1bmRlZmluZWQ7XHJcbn07XHJcblxyXG5qUXVlcnkuZngudGltZXIgPSBmdW5jdGlvbiggdGltZXIgKSB7XHJcblx0alF1ZXJ5LnRpbWVycy5wdXNoKCB0aW1lciApO1xyXG5cdGlmICggdGltZXIoKSApIHtcclxuXHRcdGpRdWVyeS5meC5zdGFydCgpO1xyXG5cdH0gZWxzZSB7XHJcblx0XHRqUXVlcnkudGltZXJzLnBvcCgpO1xyXG5cdH1cclxufTtcclxuXHJcbmpRdWVyeS5meC5pbnRlcnZhbCA9IDEzO1xyXG5cclxualF1ZXJ5LmZ4LnN0YXJ0ID0gZnVuY3Rpb24oKSB7XHJcblx0aWYgKCAhdGltZXJJZCApIHtcclxuXHRcdHRpbWVySWQgPSBzZXRJbnRlcnZhbCggalF1ZXJ5LmZ4LnRpY2ssIGpRdWVyeS5meC5pbnRlcnZhbCApO1xyXG5cdH1cclxufTtcclxuXHJcbmpRdWVyeS5meC5zdG9wID0gZnVuY3Rpb24oKSB7XHJcblx0Y2xlYXJJbnRlcnZhbCggdGltZXJJZCApO1xyXG5cdHRpbWVySWQgPSBudWxsO1xyXG59O1xyXG5cclxualF1ZXJ5LmZ4LnNwZWVkcyA9IHtcclxuXHRzbG93OiA2MDAsXHJcblx0ZmFzdDogMjAwLFxyXG5cdC8vIERlZmF1bHQgc3BlZWRcclxuXHRfZGVmYXVsdDogNDAwXHJcbn07XHJcblxyXG5cclxuLy8gQmFzZWQgb2ZmIG9mIHRoZSBwbHVnaW4gYnkgQ2xpbnQgSGVsZmVycywgd2l0aCBwZXJtaXNzaW9uLlxyXG4vLyBodHRwOi8vYmxpbmRzaWduYWxzLmNvbS9pbmRleC5waHAvMjAwOS8wNy9qcXVlcnktZGVsYXkvXHJcbmpRdWVyeS5mbi5kZWxheSA9IGZ1bmN0aW9uKCB0aW1lLCB0eXBlICkge1xyXG5cdHRpbWUgPSBqUXVlcnkuZnggPyBqUXVlcnkuZnguc3BlZWRzWyB0aW1lIF0gfHwgdGltZSA6IHRpbWU7XHJcblx0dHlwZSA9IHR5cGUgfHwgXCJmeFwiO1xyXG5cclxuXHRyZXR1cm4gdGhpcy5xdWV1ZSggdHlwZSwgZnVuY3Rpb24oIG5leHQsIGhvb2tzICkge1xyXG5cdFx0dmFyIHRpbWVvdXQgPSBzZXRUaW1lb3V0KCBuZXh0LCB0aW1lICk7XHJcblx0XHRob29rcy5zdG9wID0gZnVuY3Rpb24oKSB7XHJcblx0XHRcdGNsZWFyVGltZW91dCggdGltZW91dCApO1xyXG5cdFx0fTtcclxuXHR9KTtcclxufTtcclxuXHJcblxyXG4oZnVuY3Rpb24oKSB7XHJcblx0Ly8gTWluaWZpZWQ6IHZhciBhLGIsYyxkLGVcclxuXHR2YXIgaW5wdXQsIGRpdiwgc2VsZWN0LCBhLCBvcHQ7XHJcblxyXG5cdC8vIFNldHVwXHJcblx0ZGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJkaXZcIiApO1xyXG5cdGRpdi5zZXRBdHRyaWJ1dGUoIFwiY2xhc3NOYW1lXCIsIFwidFwiICk7XHJcblx0ZGl2LmlubmVySFRNTCA9IFwiICA8bGluay8+PHRhYmxlPjwvdGFibGU+PGEgaHJlZj0nL2EnPmE8L2E+PGlucHV0IHR5cGU9J2NoZWNrYm94Jy8+XCI7XHJcblx0YSA9IGRpdi5nZXRFbGVtZW50c0J5VGFnTmFtZShcImFcIilbIDAgXTtcclxuXHJcblx0Ly8gRmlyc3QgYmF0Y2ggb2YgdGVzdHMuXHJcblx0c2VsZWN0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInNlbGVjdFwiKTtcclxuXHRvcHQgPSBzZWxlY3QuYXBwZW5kQ2hpbGQoIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJvcHRpb25cIikgKTtcclxuXHRpbnB1dCA9IGRpdi5nZXRFbGVtZW50c0J5VGFnTmFtZShcImlucHV0XCIpWyAwIF07XHJcblxyXG5cdGEuc3R5bGUuY3NzVGV4dCA9IFwidG9wOjFweFwiO1xyXG5cclxuXHQvLyBUZXN0IHNldEF0dHJpYnV0ZSBvbiBjYW1lbENhc2UgY2xhc3MuIElmIGl0IHdvcmtzLCB3ZSBuZWVkIGF0dHJGaXhlcyB3aGVuIGRvaW5nIGdldC9zZXRBdHRyaWJ1dGUgKGllNi83KVxyXG5cdHN1cHBvcnQuZ2V0U2V0QXR0cmlidXRlID0gZGl2LmNsYXNzTmFtZSAhPT0gXCJ0XCI7XHJcblxyXG5cdC8vIEdldCB0aGUgc3R5bGUgaW5mb3JtYXRpb24gZnJvbSBnZXRBdHRyaWJ1dGVcclxuXHQvLyAoSUUgdXNlcyAuY3NzVGV4dCBpbnN0ZWFkKVxyXG5cdHN1cHBvcnQuc3R5bGUgPSAvdG9wLy50ZXN0KCBhLmdldEF0dHJpYnV0ZShcInN0eWxlXCIpICk7XHJcblxyXG5cdC8vIE1ha2Ugc3VyZSB0aGF0IFVSTHMgYXJlbid0IG1hbmlwdWxhdGVkXHJcblx0Ly8gKElFIG5vcm1hbGl6ZXMgaXQgYnkgZGVmYXVsdClcclxuXHRzdXBwb3J0LmhyZWZOb3JtYWxpemVkID0gYS5nZXRBdHRyaWJ1dGUoXCJocmVmXCIpID09PSBcIi9hXCI7XHJcblxyXG5cdC8vIENoZWNrIHRoZSBkZWZhdWx0IGNoZWNrYm94L3JhZGlvIHZhbHVlIChcIlwiIG9uIFdlYktpdDsgXCJvblwiIGVsc2V3aGVyZSlcclxuXHRzdXBwb3J0LmNoZWNrT24gPSAhIWlucHV0LnZhbHVlO1xyXG5cclxuXHQvLyBNYWtlIHN1cmUgdGhhdCBhIHNlbGVjdGVkLWJ5LWRlZmF1bHQgb3B0aW9uIGhhcyBhIHdvcmtpbmcgc2VsZWN0ZWQgcHJvcGVydHkuXHJcblx0Ly8gKFdlYktpdCBkZWZhdWx0cyB0byBmYWxzZSBpbnN0ZWFkIG9mIHRydWUsIElFIHRvbywgaWYgaXQncyBpbiBhbiBvcHRncm91cClcclxuXHRzdXBwb3J0Lm9wdFNlbGVjdGVkID0gb3B0LnNlbGVjdGVkO1xyXG5cclxuXHQvLyBUZXN0cyBmb3IgZW5jdHlwZSBzdXBwb3J0IG9uIGEgZm9ybSAoIzY3NDMpXHJcblx0c3VwcG9ydC5lbmN0eXBlID0gISFkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZm9ybVwiKS5lbmN0eXBlO1xyXG5cclxuXHQvLyBNYWtlIHN1cmUgdGhhdCB0aGUgb3B0aW9ucyBpbnNpZGUgZGlzYWJsZWQgc2VsZWN0cyBhcmVuJ3QgbWFya2VkIGFzIGRpc2FibGVkXHJcblx0Ly8gKFdlYktpdCBtYXJrcyB0aGVtIGFzIGRpc2FibGVkKVxyXG5cdHNlbGVjdC5kaXNhYmxlZCA9IHRydWU7XHJcblx0c3VwcG9ydC5vcHREaXNhYmxlZCA9ICFvcHQuZGlzYWJsZWQ7XHJcblxyXG5cdC8vIFN1cHBvcnQ6IElFOCBvbmx5XHJcblx0Ly8gQ2hlY2sgaWYgd2UgY2FuIHRydXN0IGdldEF0dHJpYnV0ZShcInZhbHVlXCIpXHJcblx0aW5wdXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImlucHV0XCIgKTtcclxuXHRpbnB1dC5zZXRBdHRyaWJ1dGUoIFwidmFsdWVcIiwgXCJcIiApO1xyXG5cdHN1cHBvcnQuaW5wdXQgPSBpbnB1dC5nZXRBdHRyaWJ1dGUoIFwidmFsdWVcIiApID09PSBcIlwiO1xyXG5cclxuXHQvLyBDaGVjayBpZiBhbiBpbnB1dCBtYWludGFpbnMgaXRzIHZhbHVlIGFmdGVyIGJlY29taW5nIGEgcmFkaW9cclxuXHRpbnB1dC52YWx1ZSA9IFwidFwiO1xyXG5cdGlucHV0LnNldEF0dHJpYnV0ZSggXCJ0eXBlXCIsIFwicmFkaW9cIiApO1xyXG5cdHN1cHBvcnQucmFkaW9WYWx1ZSA9IGlucHV0LnZhbHVlID09PSBcInRcIjtcclxufSkoKTtcclxuXHJcblxyXG52YXIgcnJldHVybiA9IC9cXHIvZztcclxuXHJcbmpRdWVyeS5mbi5leHRlbmQoe1xyXG5cdHZhbDogZnVuY3Rpb24oIHZhbHVlICkge1xyXG5cdFx0dmFyIGhvb2tzLCByZXQsIGlzRnVuY3Rpb24sXHJcblx0XHRcdGVsZW0gPSB0aGlzWzBdO1xyXG5cclxuXHRcdGlmICggIWFyZ3VtZW50cy5sZW5ndGggKSB7XHJcblx0XHRcdGlmICggZWxlbSApIHtcclxuXHRcdFx0XHRob29rcyA9IGpRdWVyeS52YWxIb29rc1sgZWxlbS50eXBlIF0gfHwgalF1ZXJ5LnZhbEhvb2tzWyBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgXTtcclxuXHJcblx0XHRcdFx0aWYgKCBob29rcyAmJiBcImdldFwiIGluIGhvb2tzICYmIChyZXQgPSBob29rcy5nZXQoIGVsZW0sIFwidmFsdWVcIiApKSAhPT0gdW5kZWZpbmVkICkge1xyXG5cdFx0XHRcdFx0cmV0dXJuIHJldDtcclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdHJldCA9IGVsZW0udmFsdWU7XHJcblxyXG5cdFx0XHRcdHJldHVybiB0eXBlb2YgcmV0ID09PSBcInN0cmluZ1wiID9cclxuXHRcdFx0XHRcdC8vIGhhbmRsZSBtb3N0IGNvbW1vbiBzdHJpbmcgY2FzZXNcclxuXHRcdFx0XHRcdHJldC5yZXBsYWNlKHJyZXR1cm4sIFwiXCIpIDpcclxuXHRcdFx0XHRcdC8vIGhhbmRsZSBjYXNlcyB3aGVyZSB2YWx1ZSBpcyBudWxsL3VuZGVmIG9yIG51bWJlclxyXG5cdFx0XHRcdFx0cmV0ID09IG51bGwgPyBcIlwiIDogcmV0O1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRyZXR1cm47XHJcblx0XHR9XHJcblxyXG5cdFx0aXNGdW5jdGlvbiA9IGpRdWVyeS5pc0Z1bmN0aW9uKCB2YWx1ZSApO1xyXG5cclxuXHRcdHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oIGkgKSB7XHJcblx0XHRcdHZhciB2YWw7XHJcblxyXG5cdFx0XHRpZiAoIHRoaXMubm9kZVR5cGUgIT09IDEgKSB7XHJcblx0XHRcdFx0cmV0dXJuO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRpZiAoIGlzRnVuY3Rpb24gKSB7XHJcblx0XHRcdFx0dmFsID0gdmFsdWUuY2FsbCggdGhpcywgaSwgalF1ZXJ5KCB0aGlzICkudmFsKCkgKTtcclxuXHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHR2YWwgPSB2YWx1ZTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0Ly8gVHJlYXQgbnVsbC91bmRlZmluZWQgYXMgXCJcIjsgY29udmVydCBudW1iZXJzIHRvIHN0cmluZ1xyXG5cdFx0XHRpZiAoIHZhbCA9PSBudWxsICkge1xyXG5cdFx0XHRcdHZhbCA9IFwiXCI7XHJcblx0XHRcdH0gZWxzZSBpZiAoIHR5cGVvZiB2YWwgPT09IFwibnVtYmVyXCIgKSB7XHJcblx0XHRcdFx0dmFsICs9IFwiXCI7XHJcblx0XHRcdH0gZWxzZSBpZiAoIGpRdWVyeS5pc0FycmF5KCB2YWwgKSApIHtcclxuXHRcdFx0XHR2YWwgPSBqUXVlcnkubWFwKCB2YWwsIGZ1bmN0aW9uKCB2YWx1ZSApIHtcclxuXHRcdFx0XHRcdHJldHVybiB2YWx1ZSA9PSBudWxsID8gXCJcIiA6IHZhbHVlICsgXCJcIjtcclxuXHRcdFx0XHR9KTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0aG9va3MgPSBqUXVlcnkudmFsSG9va3NbIHRoaXMudHlwZSBdIHx8IGpRdWVyeS52YWxIb29rc1sgdGhpcy5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpIF07XHJcblxyXG5cdFx0XHQvLyBJZiBzZXQgcmV0dXJucyB1bmRlZmluZWQsIGZhbGwgYmFjayB0byBub3JtYWwgc2V0dGluZ1xyXG5cdFx0XHRpZiAoICFob29rcyB8fCAhKFwic2V0XCIgaW4gaG9va3MpIHx8IGhvb2tzLnNldCggdGhpcywgdmFsLCBcInZhbHVlXCIgKSA9PT0gdW5kZWZpbmVkICkge1xyXG5cdFx0XHRcdHRoaXMudmFsdWUgPSB2YWw7XHJcblx0XHRcdH1cclxuXHRcdH0pO1xyXG5cdH1cclxufSk7XHJcblxyXG5qUXVlcnkuZXh0ZW5kKHtcclxuXHR2YWxIb29rczoge1xyXG5cdFx0b3B0aW9uOiB7XHJcblx0XHRcdGdldDogZnVuY3Rpb24oIGVsZW0gKSB7XHJcblx0XHRcdFx0dmFyIHZhbCA9IGpRdWVyeS5maW5kLmF0dHIoIGVsZW0sIFwidmFsdWVcIiApO1xyXG5cdFx0XHRcdHJldHVybiB2YWwgIT0gbnVsbCA/XHJcblx0XHRcdFx0XHR2YWwgOlxyXG5cdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUxMC0xMStcclxuXHRcdFx0XHRcdC8vIG9wdGlvbi50ZXh0IHRocm93cyBleGNlcHRpb25zICgjMTQ2ODYsICMxNDg1OClcclxuXHRcdFx0XHRcdGpRdWVyeS50cmltKCBqUXVlcnkudGV4dCggZWxlbSApICk7XHJcblx0XHRcdH1cclxuXHRcdH0sXHJcblx0XHRzZWxlY3Q6IHtcclxuXHRcdFx0Z2V0OiBmdW5jdGlvbiggZWxlbSApIHtcclxuXHRcdFx0XHR2YXIgdmFsdWUsIG9wdGlvbixcclxuXHRcdFx0XHRcdG9wdGlvbnMgPSBlbGVtLm9wdGlvbnMsXHJcblx0XHRcdFx0XHRpbmRleCA9IGVsZW0uc2VsZWN0ZWRJbmRleCxcclxuXHRcdFx0XHRcdG9uZSA9IGVsZW0udHlwZSA9PT0gXCJzZWxlY3Qtb25lXCIgfHwgaW5kZXggPCAwLFxyXG5cdFx0XHRcdFx0dmFsdWVzID0gb25lID8gbnVsbCA6IFtdLFxyXG5cdFx0XHRcdFx0bWF4ID0gb25lID8gaW5kZXggKyAxIDogb3B0aW9ucy5sZW5ndGgsXHJcblx0XHRcdFx0XHRpID0gaW5kZXggPCAwID9cclxuXHRcdFx0XHRcdFx0bWF4IDpcclxuXHRcdFx0XHRcdFx0b25lID8gaW5kZXggOiAwO1xyXG5cclxuXHRcdFx0XHQvLyBMb29wIHRocm91Z2ggYWxsIHRoZSBzZWxlY3RlZCBvcHRpb25zXHJcblx0XHRcdFx0Zm9yICggOyBpIDwgbWF4OyBpKysgKSB7XHJcblx0XHRcdFx0XHRvcHRpb24gPSBvcHRpb25zWyBpIF07XHJcblxyXG5cdFx0XHRcdFx0Ly8gb2xkSUUgZG9lc24ndCB1cGRhdGUgc2VsZWN0ZWQgYWZ0ZXIgZm9ybSByZXNldCAoIzI1NTEpXHJcblx0XHRcdFx0XHRpZiAoICggb3B0aW9uLnNlbGVjdGVkIHx8IGkgPT09IGluZGV4ICkgJiZcclxuXHRcdFx0XHRcdFx0XHQvLyBEb24ndCByZXR1cm4gb3B0aW9ucyB0aGF0IGFyZSBkaXNhYmxlZCBvciBpbiBhIGRpc2FibGVkIG9wdGdyb3VwXHJcblx0XHRcdFx0XHRcdFx0KCBzdXBwb3J0Lm9wdERpc2FibGVkID8gIW9wdGlvbi5kaXNhYmxlZCA6IG9wdGlvbi5nZXRBdHRyaWJ1dGUoXCJkaXNhYmxlZFwiKSA9PT0gbnVsbCApICYmXHJcblx0XHRcdFx0XHRcdFx0KCAhb3B0aW9uLnBhcmVudE5vZGUuZGlzYWJsZWQgfHwgIWpRdWVyeS5ub2RlTmFtZSggb3B0aW9uLnBhcmVudE5vZGUsIFwib3B0Z3JvdXBcIiApICkgKSB7XHJcblxyXG5cdFx0XHRcdFx0XHQvLyBHZXQgdGhlIHNwZWNpZmljIHZhbHVlIGZvciB0aGUgb3B0aW9uXHJcblx0XHRcdFx0XHRcdHZhbHVlID0galF1ZXJ5KCBvcHRpb24gKS52YWwoKTtcclxuXHJcblx0XHRcdFx0XHRcdC8vIFdlIGRvbid0IG5lZWQgYW4gYXJyYXkgZm9yIG9uZSBzZWxlY3RzXHJcblx0XHRcdFx0XHRcdGlmICggb25lICkge1xyXG5cdFx0XHRcdFx0XHRcdHJldHVybiB2YWx1ZTtcclxuXHRcdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRcdFx0Ly8gTXVsdGktU2VsZWN0cyByZXR1cm4gYW4gYXJyYXlcclxuXHRcdFx0XHRcdFx0dmFsdWVzLnB1c2goIHZhbHVlICk7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRyZXR1cm4gdmFsdWVzO1xyXG5cdFx0XHR9LFxyXG5cclxuXHRcdFx0c2V0OiBmdW5jdGlvbiggZWxlbSwgdmFsdWUgKSB7XHJcblx0XHRcdFx0dmFyIG9wdGlvblNldCwgb3B0aW9uLFxyXG5cdFx0XHRcdFx0b3B0aW9ucyA9IGVsZW0ub3B0aW9ucyxcclxuXHRcdFx0XHRcdHZhbHVlcyA9IGpRdWVyeS5tYWtlQXJyYXkoIHZhbHVlICksXHJcblx0XHRcdFx0XHRpID0gb3B0aW9ucy5sZW5ndGg7XHJcblxyXG5cdFx0XHRcdHdoaWxlICggaS0tICkge1xyXG5cdFx0XHRcdFx0b3B0aW9uID0gb3B0aW9uc1sgaSBdO1xyXG5cclxuXHRcdFx0XHRcdGlmICggalF1ZXJ5LmluQXJyYXkoIGpRdWVyeS52YWxIb29rcy5vcHRpb24uZ2V0KCBvcHRpb24gKSwgdmFsdWVzICkgPj0gMCApIHtcclxuXHJcblx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFNlxyXG5cdFx0XHRcdFx0XHQvLyBXaGVuIG5ldyBvcHRpb24gZWxlbWVudCBpcyBhZGRlZCB0byBzZWxlY3QgYm94IHdlIG5lZWQgdG9cclxuXHRcdFx0XHRcdFx0Ly8gZm9yY2UgcmVmbG93IG9mIG5ld2x5IGFkZGVkIG5vZGUgaW4gb3JkZXIgdG8gd29ya2Fyb3VuZCBkZWxheVxyXG5cdFx0XHRcdFx0XHQvLyBvZiBpbml0aWFsaXphdGlvbiBwcm9wZXJ0aWVzXHJcblx0XHRcdFx0XHRcdHRyeSB7XHJcblx0XHRcdFx0XHRcdFx0b3B0aW9uLnNlbGVjdGVkID0gb3B0aW9uU2V0ID0gdHJ1ZTtcclxuXHJcblx0XHRcdFx0XHRcdH0gY2F0Y2ggKCBfICkge1xyXG5cclxuXHRcdFx0XHRcdFx0XHQvLyBXaWxsIGJlIGV4ZWN1dGVkIG9ubHkgaW4gSUU2XHJcblx0XHRcdFx0XHRcdFx0b3B0aW9uLnNjcm9sbEhlaWdodDtcclxuXHRcdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0XHRcdG9wdGlvbi5zZWxlY3RlZCA9IGZhbHNlO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0Ly8gRm9yY2UgYnJvd3NlcnMgdG8gYmVoYXZlIGNvbnNpc3RlbnRseSB3aGVuIG5vbi1tYXRjaGluZyB2YWx1ZSBpcyBzZXRcclxuXHRcdFx0XHRpZiAoICFvcHRpb25TZXQgKSB7XHJcblx0XHRcdFx0XHRlbGVtLnNlbGVjdGVkSW5kZXggPSAtMTtcclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdHJldHVybiBvcHRpb25zO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0fVxyXG59KTtcclxuXHJcbi8vIFJhZGlvcyBhbmQgY2hlY2tib3hlcyBnZXR0ZXIvc2V0dGVyXHJcbmpRdWVyeS5lYWNoKFsgXCJyYWRpb1wiLCBcImNoZWNrYm94XCIgXSwgZnVuY3Rpb24oKSB7XHJcblx0alF1ZXJ5LnZhbEhvb2tzWyB0aGlzIF0gPSB7XHJcblx0XHRzZXQ6IGZ1bmN0aW9uKCBlbGVtLCB2YWx1ZSApIHtcclxuXHRcdFx0aWYgKCBqUXVlcnkuaXNBcnJheSggdmFsdWUgKSApIHtcclxuXHRcdFx0XHRyZXR1cm4gKCBlbGVtLmNoZWNrZWQgPSBqUXVlcnkuaW5BcnJheSggalF1ZXJ5KGVsZW0pLnZhbCgpLCB2YWx1ZSApID49IDAgKTtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdH07XHJcblx0aWYgKCAhc3VwcG9ydC5jaGVja09uICkge1xyXG5cdFx0alF1ZXJ5LnZhbEhvb2tzWyB0aGlzIF0uZ2V0ID0gZnVuY3Rpb24oIGVsZW0gKSB7XHJcblx0XHRcdC8vIFN1cHBvcnQ6IFdlYmtpdFxyXG5cdFx0XHQvLyBcIlwiIGlzIHJldHVybmVkIGluc3RlYWQgb2YgXCJvblwiIGlmIGEgdmFsdWUgaXNuJ3Qgc3BlY2lmaWVkXHJcblx0XHRcdHJldHVybiBlbGVtLmdldEF0dHJpYnV0ZShcInZhbHVlXCIpID09PSBudWxsID8gXCJvblwiIDogZWxlbS52YWx1ZTtcclxuXHRcdH07XHJcblx0fVxyXG59KTtcclxuXHJcblxyXG5cclxuXHJcbnZhciBub2RlSG9vaywgYm9vbEhvb2ssXHJcblx0YXR0ckhhbmRsZSA9IGpRdWVyeS5leHByLmF0dHJIYW5kbGUsXHJcblx0cnVzZURlZmF1bHQgPSAvXig/OmNoZWNrZWR8c2VsZWN0ZWQpJC9pLFxyXG5cdGdldFNldEF0dHJpYnV0ZSA9IHN1cHBvcnQuZ2V0U2V0QXR0cmlidXRlLFxyXG5cdGdldFNldElucHV0ID0gc3VwcG9ydC5pbnB1dDtcclxuXHJcbmpRdWVyeS5mbi5leHRlbmQoe1xyXG5cdGF0dHI6IGZ1bmN0aW9uKCBuYW1lLCB2YWx1ZSApIHtcclxuXHRcdHJldHVybiBhY2Nlc3MoIHRoaXMsIGpRdWVyeS5hdHRyLCBuYW1lLCB2YWx1ZSwgYXJndW1lbnRzLmxlbmd0aCA+IDEgKTtcclxuXHR9LFxyXG5cclxuXHRyZW1vdmVBdHRyOiBmdW5jdGlvbiggbmFtZSApIHtcclxuXHRcdHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oKSB7XHJcblx0XHRcdGpRdWVyeS5yZW1vdmVBdHRyKCB0aGlzLCBuYW1lICk7XHJcblx0XHR9KTtcclxuXHR9XHJcbn0pO1xyXG5cclxualF1ZXJ5LmV4dGVuZCh7XHJcblx0YXR0cjogZnVuY3Rpb24oIGVsZW0sIG5hbWUsIHZhbHVlICkge1xyXG5cdFx0dmFyIGhvb2tzLCByZXQsXHJcblx0XHRcdG5UeXBlID0gZWxlbS5ub2RlVHlwZTtcclxuXHJcblx0XHQvLyBkb24ndCBnZXQvc2V0IGF0dHJpYnV0ZXMgb24gdGV4dCwgY29tbWVudCBhbmQgYXR0cmlidXRlIG5vZGVzXHJcblx0XHRpZiAoICFlbGVtIHx8IG5UeXBlID09PSAzIHx8IG5UeXBlID09PSA4IHx8IG5UeXBlID09PSAyICkge1xyXG5cdFx0XHRyZXR1cm47XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gRmFsbGJhY2sgdG8gcHJvcCB3aGVuIGF0dHJpYnV0ZXMgYXJlIG5vdCBzdXBwb3J0ZWRcclxuXHRcdGlmICggdHlwZW9mIGVsZW0uZ2V0QXR0cmlidXRlID09PSBzdHJ1bmRlZmluZWQgKSB7XHJcblx0XHRcdHJldHVybiBqUXVlcnkucHJvcCggZWxlbSwgbmFtZSwgdmFsdWUgKTtcclxuXHRcdH1cclxuXHJcblx0XHQvLyBBbGwgYXR0cmlidXRlcyBhcmUgbG93ZXJjYXNlXHJcblx0XHQvLyBHcmFiIG5lY2Vzc2FyeSBob29rIGlmIG9uZSBpcyBkZWZpbmVkXHJcblx0XHRpZiAoIG5UeXBlICE9PSAxIHx8ICFqUXVlcnkuaXNYTUxEb2MoIGVsZW0gKSApIHtcclxuXHRcdFx0bmFtZSA9IG5hbWUudG9Mb3dlckNhc2UoKTtcclxuXHRcdFx0aG9va3MgPSBqUXVlcnkuYXR0ckhvb2tzWyBuYW1lIF0gfHxcclxuXHRcdFx0XHQoIGpRdWVyeS5leHByLm1hdGNoLmJvb2wudGVzdCggbmFtZSApID8gYm9vbEhvb2sgOiBub2RlSG9vayApO1xyXG5cdFx0fVxyXG5cclxuXHRcdGlmICggdmFsdWUgIT09IHVuZGVmaW5lZCApIHtcclxuXHJcblx0XHRcdGlmICggdmFsdWUgPT09IG51bGwgKSB7XHJcblx0XHRcdFx0alF1ZXJ5LnJlbW92ZUF0dHIoIGVsZW0sIG5hbWUgKTtcclxuXHJcblx0XHRcdH0gZWxzZSBpZiAoIGhvb2tzICYmIFwic2V0XCIgaW4gaG9va3MgJiYgKHJldCA9IGhvb2tzLnNldCggZWxlbSwgdmFsdWUsIG5hbWUgKSkgIT09IHVuZGVmaW5lZCApIHtcclxuXHRcdFx0XHRyZXR1cm4gcmV0O1xyXG5cclxuXHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRlbGVtLnNldEF0dHJpYnV0ZSggbmFtZSwgdmFsdWUgKyBcIlwiICk7XHJcblx0XHRcdFx0cmV0dXJuIHZhbHVlO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0fSBlbHNlIGlmICggaG9va3MgJiYgXCJnZXRcIiBpbiBob29rcyAmJiAocmV0ID0gaG9va3MuZ2V0KCBlbGVtLCBuYW1lICkpICE9PSBudWxsICkge1xyXG5cdFx0XHRyZXR1cm4gcmV0O1xyXG5cclxuXHRcdH0gZWxzZSB7XHJcblx0XHRcdHJldCA9IGpRdWVyeS5maW5kLmF0dHIoIGVsZW0sIG5hbWUgKTtcclxuXHJcblx0XHRcdC8vIE5vbi1leGlzdGVudCBhdHRyaWJ1dGVzIHJldHVybiBudWxsLCB3ZSBub3JtYWxpemUgdG8gdW5kZWZpbmVkXHJcblx0XHRcdHJldHVybiByZXQgPT0gbnVsbCA/XHJcblx0XHRcdFx0dW5kZWZpbmVkIDpcclxuXHRcdFx0XHRyZXQ7XHJcblx0XHR9XHJcblx0fSxcclxuXHJcblx0cmVtb3ZlQXR0cjogZnVuY3Rpb24oIGVsZW0sIHZhbHVlICkge1xyXG5cdFx0dmFyIG5hbWUsIHByb3BOYW1lLFxyXG5cdFx0XHRpID0gMCxcclxuXHRcdFx0YXR0ck5hbWVzID0gdmFsdWUgJiYgdmFsdWUubWF0Y2goIHJub3R3aGl0ZSApO1xyXG5cclxuXHRcdGlmICggYXR0ck5hbWVzICYmIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7XHJcblx0XHRcdHdoaWxlICggKG5hbWUgPSBhdHRyTmFtZXNbaSsrXSkgKSB7XHJcblx0XHRcdFx0cHJvcE5hbWUgPSBqUXVlcnkucHJvcEZpeFsgbmFtZSBdIHx8IG5hbWU7XHJcblxyXG5cdFx0XHRcdC8vIEJvb2xlYW4gYXR0cmlidXRlcyBnZXQgc3BlY2lhbCB0cmVhdG1lbnQgKCMxMDg3MClcclxuXHRcdFx0XHRpZiAoIGpRdWVyeS5leHByLm1hdGNoLmJvb2wudGVzdCggbmFtZSApICkge1xyXG5cdFx0XHRcdFx0Ly8gU2V0IGNvcnJlc3BvbmRpbmcgcHJvcGVydHkgdG8gZmFsc2VcclxuXHRcdFx0XHRcdGlmICggZ2V0U2V0SW5wdXQgJiYgZ2V0U2V0QXR0cmlidXRlIHx8ICFydXNlRGVmYXVsdC50ZXN0KCBuYW1lICkgKSB7XHJcblx0XHRcdFx0XHRcdGVsZW1bIHByb3BOYW1lIF0gPSBmYWxzZTtcclxuXHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFPDlcclxuXHRcdFx0XHRcdC8vIEFsc28gY2xlYXIgZGVmYXVsdENoZWNrZWQvZGVmYXVsdFNlbGVjdGVkIChpZiBhcHByb3ByaWF0ZSlcclxuXHRcdFx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0XHRcdGVsZW1bIGpRdWVyeS5jYW1lbENhc2UoIFwiZGVmYXVsdC1cIiArIG5hbWUgKSBdID1cclxuXHRcdFx0XHRcdFx0XHRlbGVtWyBwcm9wTmFtZSBdID0gZmFsc2U7XHJcblx0XHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdC8vIFNlZSAjOTY5OSBmb3IgZXhwbGFuYXRpb24gb2YgdGhpcyBhcHByb2FjaCAoc2V0dGluZyBmaXJzdCwgdGhlbiByZW1vdmFsKVxyXG5cdFx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0XHRqUXVlcnkuYXR0ciggZWxlbSwgbmFtZSwgXCJcIiApO1xyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0ZWxlbS5yZW1vdmVBdHRyaWJ1dGUoIGdldFNldEF0dHJpYnV0ZSA/IG5hbWUgOiBwcm9wTmFtZSApO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0fSxcclxuXHJcblx0YXR0ckhvb2tzOiB7XHJcblx0XHR0eXBlOiB7XHJcblx0XHRcdHNldDogZnVuY3Rpb24oIGVsZW0sIHZhbHVlICkge1xyXG5cdFx0XHRcdGlmICggIXN1cHBvcnQucmFkaW9WYWx1ZSAmJiB2YWx1ZSA9PT0gXCJyYWRpb1wiICYmIGpRdWVyeS5ub2RlTmFtZShlbGVtLCBcImlucHV0XCIpICkge1xyXG5cdFx0XHRcdFx0Ly8gU2V0dGluZyB0aGUgdHlwZSBvbiBhIHJhZGlvIGJ1dHRvbiBhZnRlciB0aGUgdmFsdWUgcmVzZXRzIHRoZSB2YWx1ZSBpbiBJRTYtOVxyXG5cdFx0XHRcdFx0Ly8gUmVzZXQgdmFsdWUgdG8gZGVmYXVsdCBpbiBjYXNlIHR5cGUgaXMgc2V0IGFmdGVyIHZhbHVlIGR1cmluZyBjcmVhdGlvblxyXG5cdFx0XHRcdFx0dmFyIHZhbCA9IGVsZW0udmFsdWU7XHJcblx0XHRcdFx0XHRlbGVtLnNldEF0dHJpYnV0ZSggXCJ0eXBlXCIsIHZhbHVlICk7XHJcblx0XHRcdFx0XHRpZiAoIHZhbCApIHtcclxuXHRcdFx0XHRcdFx0ZWxlbS52YWx1ZSA9IHZhbDtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdHJldHVybiB2YWx1ZTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHR9XHJcbn0pO1xyXG5cclxuLy8gSG9vayBmb3IgYm9vbGVhbiBhdHRyaWJ1dGVzXHJcbmJvb2xIb29rID0ge1xyXG5cdHNldDogZnVuY3Rpb24oIGVsZW0sIHZhbHVlLCBuYW1lICkge1xyXG5cdFx0aWYgKCB2YWx1ZSA9PT0gZmFsc2UgKSB7XHJcblx0XHRcdC8vIFJlbW92ZSBib29sZWFuIGF0dHJpYnV0ZXMgd2hlbiBzZXQgdG8gZmFsc2VcclxuXHRcdFx0alF1ZXJ5LnJlbW92ZUF0dHIoIGVsZW0sIG5hbWUgKTtcclxuXHRcdH0gZWxzZSBpZiAoIGdldFNldElucHV0ICYmIGdldFNldEF0dHJpYnV0ZSB8fCAhcnVzZURlZmF1bHQudGVzdCggbmFtZSApICkge1xyXG5cdFx0XHQvLyBJRTw4IG5lZWRzIHRoZSAqcHJvcGVydHkqIG5hbWVcclxuXHRcdFx0ZWxlbS5zZXRBdHRyaWJ1dGUoICFnZXRTZXRBdHRyaWJ1dGUgJiYgalF1ZXJ5LnByb3BGaXhbIG5hbWUgXSB8fCBuYW1lLCBuYW1lICk7XHJcblxyXG5cdFx0Ly8gVXNlIGRlZmF1bHRDaGVja2VkIGFuZCBkZWZhdWx0U2VsZWN0ZWQgZm9yIG9sZElFXHJcblx0XHR9IGVsc2Uge1xyXG5cdFx0XHRlbGVtWyBqUXVlcnkuY2FtZWxDYXNlKCBcImRlZmF1bHQtXCIgKyBuYW1lICkgXSA9IGVsZW1bIG5hbWUgXSA9IHRydWU7XHJcblx0XHR9XHJcblxyXG5cdFx0cmV0dXJuIG5hbWU7XHJcblx0fVxyXG59O1xyXG5cclxuLy8gUmV0cmlldmUgYm9vbGVhbnMgc3BlY2lhbGx5XHJcbmpRdWVyeS5lYWNoKCBqUXVlcnkuZXhwci5tYXRjaC5ib29sLnNvdXJjZS5tYXRjaCggL1xcdysvZyApLCBmdW5jdGlvbiggaSwgbmFtZSApIHtcclxuXHJcblx0dmFyIGdldHRlciA9IGF0dHJIYW5kbGVbIG5hbWUgXSB8fCBqUXVlcnkuZmluZC5hdHRyO1xyXG5cclxuXHRhdHRySGFuZGxlWyBuYW1lIF0gPSBnZXRTZXRJbnB1dCAmJiBnZXRTZXRBdHRyaWJ1dGUgfHwgIXJ1c2VEZWZhdWx0LnRlc3QoIG5hbWUgKSA/XHJcblx0XHRmdW5jdGlvbiggZWxlbSwgbmFtZSwgaXNYTUwgKSB7XHJcblx0XHRcdHZhciByZXQsIGhhbmRsZTtcclxuXHRcdFx0aWYgKCAhaXNYTUwgKSB7XHJcblx0XHRcdFx0Ly8gQXZvaWQgYW4gaW5maW5pdGUgbG9vcCBieSB0ZW1wb3JhcmlseSByZW1vdmluZyB0aGlzIGZ1bmN0aW9uIGZyb20gdGhlIGdldHRlclxyXG5cdFx0XHRcdGhhbmRsZSA9IGF0dHJIYW5kbGVbIG5hbWUgXTtcclxuXHRcdFx0XHRhdHRySGFuZGxlWyBuYW1lIF0gPSByZXQ7XHJcblx0XHRcdFx0cmV0ID0gZ2V0dGVyKCBlbGVtLCBuYW1lLCBpc1hNTCApICE9IG51bGwgP1xyXG5cdFx0XHRcdFx0bmFtZS50b0xvd2VyQ2FzZSgpIDpcclxuXHRcdFx0XHRcdG51bGw7XHJcblx0XHRcdFx0YXR0ckhhbmRsZVsgbmFtZSBdID0gaGFuZGxlO1xyXG5cdFx0XHR9XHJcblx0XHRcdHJldHVybiByZXQ7XHJcblx0XHR9IDpcclxuXHRcdGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCBpc1hNTCApIHtcclxuXHRcdFx0aWYgKCAhaXNYTUwgKSB7XHJcblx0XHRcdFx0cmV0dXJuIGVsZW1bIGpRdWVyeS5jYW1lbENhc2UoIFwiZGVmYXVsdC1cIiArIG5hbWUgKSBdID9cclxuXHRcdFx0XHRcdG5hbWUudG9Mb3dlckNhc2UoKSA6XHJcblx0XHRcdFx0XHRudWxsO1xyXG5cdFx0XHR9XHJcblx0XHR9O1xyXG59KTtcclxuXHJcbi8vIGZpeCBvbGRJRSBhdHRyb3BlcnRpZXNcclxuaWYgKCAhZ2V0U2V0SW5wdXQgfHwgIWdldFNldEF0dHJpYnV0ZSApIHtcclxuXHRqUXVlcnkuYXR0ckhvb2tzLnZhbHVlID0ge1xyXG5cdFx0c2V0OiBmdW5jdGlvbiggZWxlbSwgdmFsdWUsIG5hbWUgKSB7XHJcblx0XHRcdGlmICggalF1ZXJ5Lm5vZGVOYW1lKCBlbGVtLCBcImlucHV0XCIgKSApIHtcclxuXHRcdFx0XHQvLyBEb2VzIG5vdCByZXR1cm4gc28gdGhhdCBzZXRBdHRyaWJ1dGUgaXMgYWxzbyB1c2VkXHJcblx0XHRcdFx0ZWxlbS5kZWZhdWx0VmFsdWUgPSB2YWx1ZTtcclxuXHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHQvLyBVc2Ugbm9kZUhvb2sgaWYgZGVmaW5lZCAoIzE5NTQpOyBvdGhlcndpc2Ugc2V0QXR0cmlidXRlIGlzIGZpbmVcclxuXHRcdFx0XHRyZXR1cm4gbm9kZUhvb2sgJiYgbm9kZUhvb2suc2V0KCBlbGVtLCB2YWx1ZSwgbmFtZSApO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0fTtcclxufVxyXG5cclxuLy8gSUU2LzcgZG8gbm90IHN1cHBvcnQgZ2V0dGluZy9zZXR0aW5nIHNvbWUgYXR0cmlidXRlcyB3aXRoIGdldC9zZXRBdHRyaWJ1dGVcclxuaWYgKCAhZ2V0U2V0QXR0cmlidXRlICkge1xyXG5cclxuXHQvLyBVc2UgdGhpcyBmb3IgYW55IGF0dHJpYnV0ZSBpbiBJRTYvN1xyXG5cdC8vIFRoaXMgZml4ZXMgYWxtb3N0IGV2ZXJ5IElFNi83IGlzc3VlXHJcblx0bm9kZUhvb2sgPSB7XHJcblx0XHRzZXQ6IGZ1bmN0aW9uKCBlbGVtLCB2YWx1ZSwgbmFtZSApIHtcclxuXHRcdFx0Ly8gU2V0IHRoZSBleGlzdGluZyBvciBjcmVhdGUgYSBuZXcgYXR0cmlidXRlIG5vZGVcclxuXHRcdFx0dmFyIHJldCA9IGVsZW0uZ2V0QXR0cmlidXRlTm9kZSggbmFtZSApO1xyXG5cdFx0XHRpZiAoICFyZXQgKSB7XHJcblx0XHRcdFx0ZWxlbS5zZXRBdHRyaWJ1dGVOb2RlKFxyXG5cdFx0XHRcdFx0KHJldCA9IGVsZW0ub3duZXJEb2N1bWVudC5jcmVhdGVBdHRyaWJ1dGUoIG5hbWUgKSlcclxuXHRcdFx0XHQpO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRyZXQudmFsdWUgPSB2YWx1ZSArPSBcIlwiO1xyXG5cclxuXHRcdFx0Ly8gQnJlYWsgYXNzb2NpYXRpb24gd2l0aCBjbG9uZWQgZWxlbWVudHMgYnkgYWxzbyB1c2luZyBzZXRBdHRyaWJ1dGUgKCM5NjQ2KVxyXG5cdFx0XHRpZiAoIG5hbWUgPT09IFwidmFsdWVcIiB8fCB2YWx1ZSA9PT0gZWxlbS5nZXRBdHRyaWJ1dGUoIG5hbWUgKSApIHtcclxuXHRcdFx0XHRyZXR1cm4gdmFsdWU7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHR9O1xyXG5cclxuXHQvLyBTb21lIGF0dHJpYnV0ZXMgYXJlIGNvbnN0cnVjdGVkIHdpdGggZW1wdHktc3RyaW5nIHZhbHVlcyB3aGVuIG5vdCBkZWZpbmVkXHJcblx0YXR0ckhhbmRsZS5pZCA9IGF0dHJIYW5kbGUubmFtZSA9IGF0dHJIYW5kbGUuY29vcmRzID1cclxuXHRcdGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCBpc1hNTCApIHtcclxuXHRcdFx0dmFyIHJldDtcclxuXHRcdFx0aWYgKCAhaXNYTUwgKSB7XHJcblx0XHRcdFx0cmV0dXJuIChyZXQgPSBlbGVtLmdldEF0dHJpYnV0ZU5vZGUoIG5hbWUgKSkgJiYgcmV0LnZhbHVlICE9PSBcIlwiID9cclxuXHRcdFx0XHRcdHJldC52YWx1ZSA6XHJcblx0XHRcdFx0XHRudWxsO1xyXG5cdFx0XHR9XHJcblx0XHR9O1xyXG5cclxuXHQvLyBGaXhpbmcgdmFsdWUgcmV0cmlldmFsIG9uIGEgYnV0dG9uIHJlcXVpcmVzIHRoaXMgbW9kdWxlXHJcblx0alF1ZXJ5LnZhbEhvb2tzLmJ1dHRvbiA9IHtcclxuXHRcdGdldDogZnVuY3Rpb24oIGVsZW0sIG5hbWUgKSB7XHJcblx0XHRcdHZhciByZXQgPSBlbGVtLmdldEF0dHJpYnV0ZU5vZGUoIG5hbWUgKTtcclxuXHRcdFx0aWYgKCByZXQgJiYgcmV0LnNwZWNpZmllZCApIHtcclxuXHRcdFx0XHRyZXR1cm4gcmV0LnZhbHVlO1xyXG5cdFx0XHR9XHJcblx0XHR9LFxyXG5cdFx0c2V0OiBub2RlSG9vay5zZXRcclxuXHR9O1xyXG5cclxuXHQvLyBTZXQgY29udGVudGVkaXRhYmxlIHRvIGZhbHNlIG9uIHJlbW92YWxzKCMxMDQyOSlcclxuXHQvLyBTZXR0aW5nIHRvIGVtcHR5IHN0cmluZyB0aHJvd3MgYW4gZXJyb3IgYXMgYW4gaW52YWxpZCB2YWx1ZVxyXG5cdGpRdWVyeS5hdHRySG9va3MuY29udGVudGVkaXRhYmxlID0ge1xyXG5cdFx0c2V0OiBmdW5jdGlvbiggZWxlbSwgdmFsdWUsIG5hbWUgKSB7XHJcblx0XHRcdG5vZGVIb29rLnNldCggZWxlbSwgdmFsdWUgPT09IFwiXCIgPyBmYWxzZSA6IHZhbHVlLCBuYW1lICk7XHJcblx0XHR9XHJcblx0fTtcclxuXHJcblx0Ly8gU2V0IHdpZHRoIGFuZCBoZWlnaHQgdG8gYXV0byBpbnN0ZWFkIG9mIDAgb24gZW1wdHkgc3RyaW5nKCBCdWcgIzgxNTAgKVxyXG5cdC8vIFRoaXMgaXMgZm9yIHJlbW92YWxzXHJcblx0alF1ZXJ5LmVhY2goWyBcIndpZHRoXCIsIFwiaGVpZ2h0XCIgXSwgZnVuY3Rpb24oIGksIG5hbWUgKSB7XHJcblx0XHRqUXVlcnkuYXR0ckhvb2tzWyBuYW1lIF0gPSB7XHJcblx0XHRcdHNldDogZnVuY3Rpb24oIGVsZW0sIHZhbHVlICkge1xyXG5cdFx0XHRcdGlmICggdmFsdWUgPT09IFwiXCIgKSB7XHJcblx0XHRcdFx0XHRlbGVtLnNldEF0dHJpYnV0ZSggbmFtZSwgXCJhdXRvXCIgKTtcclxuXHRcdFx0XHRcdHJldHVybiB2YWx1ZTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdH07XHJcblx0fSk7XHJcbn1cclxuXHJcbmlmICggIXN1cHBvcnQuc3R5bGUgKSB7XHJcblx0alF1ZXJ5LmF0dHJIb29rcy5zdHlsZSA9IHtcclxuXHRcdGdldDogZnVuY3Rpb24oIGVsZW0gKSB7XHJcblx0XHRcdC8vIFJldHVybiB1bmRlZmluZWQgaW4gdGhlIGNhc2Ugb2YgZW1wdHkgc3RyaW5nXHJcblx0XHRcdC8vIE5vdGU6IElFIHVwcGVyY2FzZXMgY3NzIHByb3BlcnR5IG5hbWVzLCBidXQgaWYgd2Ugd2VyZSB0byAudG9Mb3dlckNhc2UoKVxyXG5cdFx0XHQvLyAuY3NzVGV4dCwgdGhhdCB3b3VsZCBkZXN0cm95IGNhc2Ugc2Vuc3RpdGl2aXR5IGluIFVSTCdzLCBsaWtlIGluIFwiYmFja2dyb3VuZFwiXHJcblx0XHRcdHJldHVybiBlbGVtLnN0eWxlLmNzc1RleHQgfHwgdW5kZWZpbmVkO1xyXG5cdFx0fSxcclxuXHRcdHNldDogZnVuY3Rpb24oIGVsZW0sIHZhbHVlICkge1xyXG5cdFx0XHRyZXR1cm4gKCBlbGVtLnN0eWxlLmNzc1RleHQgPSB2YWx1ZSArIFwiXCIgKTtcclxuXHRcdH1cclxuXHR9O1xyXG59XHJcblxyXG5cclxuXHJcblxyXG52YXIgcmZvY3VzYWJsZSA9IC9eKD86aW5wdXR8c2VsZWN0fHRleHRhcmVhfGJ1dHRvbnxvYmplY3QpJC9pLFxyXG5cdHJjbGlja2FibGUgPSAvXig/OmF8YXJlYSkkL2k7XHJcblxyXG5qUXVlcnkuZm4uZXh0ZW5kKHtcclxuXHRwcm9wOiBmdW5jdGlvbiggbmFtZSwgdmFsdWUgKSB7XHJcblx0XHRyZXR1cm4gYWNjZXNzKCB0aGlzLCBqUXVlcnkucHJvcCwgbmFtZSwgdmFsdWUsIGFyZ3VtZW50cy5sZW5ndGggPiAxICk7XHJcblx0fSxcclxuXHJcblx0cmVtb3ZlUHJvcDogZnVuY3Rpb24oIG5hbWUgKSB7XHJcblx0XHRuYW1lID0galF1ZXJ5LnByb3BGaXhbIG5hbWUgXSB8fCBuYW1lO1xyXG5cdFx0cmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbigpIHtcclxuXHRcdFx0Ly8gdHJ5L2NhdGNoIGhhbmRsZXMgY2FzZXMgd2hlcmUgSUUgYmFsa3MgKHN1Y2ggYXMgcmVtb3ZpbmcgYSBwcm9wZXJ0eSBvbiB3aW5kb3cpXHJcblx0XHRcdHRyeSB7XHJcblx0XHRcdFx0dGhpc1sgbmFtZSBdID0gdW5kZWZpbmVkO1xyXG5cdFx0XHRcdGRlbGV0ZSB0aGlzWyBuYW1lIF07XHJcblx0XHRcdH0gY2F0Y2goIGUgKSB7fVxyXG5cdFx0fSk7XHJcblx0fVxyXG59KTtcclxuXHJcbmpRdWVyeS5leHRlbmQoe1xyXG5cdHByb3BGaXg6IHtcclxuXHRcdFwiZm9yXCI6IFwiaHRtbEZvclwiLFxyXG5cdFx0XCJjbGFzc1wiOiBcImNsYXNzTmFtZVwiXHJcblx0fSxcclxuXHJcblx0cHJvcDogZnVuY3Rpb24oIGVsZW0sIG5hbWUsIHZhbHVlICkge1xyXG5cdFx0dmFyIHJldCwgaG9va3MsIG5vdHhtbCxcclxuXHRcdFx0blR5cGUgPSBlbGVtLm5vZGVUeXBlO1xyXG5cclxuXHRcdC8vIGRvbid0IGdldC9zZXQgcHJvcGVydGllcyBvbiB0ZXh0LCBjb21tZW50IGFuZCBhdHRyaWJ1dGUgbm9kZXNcclxuXHRcdGlmICggIWVsZW0gfHwgblR5cGUgPT09IDMgfHwgblR5cGUgPT09IDggfHwgblR5cGUgPT09IDIgKSB7XHJcblx0XHRcdHJldHVybjtcclxuXHRcdH1cclxuXHJcblx0XHRub3R4bWwgPSBuVHlwZSAhPT0gMSB8fCAhalF1ZXJ5LmlzWE1MRG9jKCBlbGVtICk7XHJcblxyXG5cdFx0aWYgKCBub3R4bWwgKSB7XHJcblx0XHRcdC8vIEZpeCBuYW1lIGFuZCBhdHRhY2ggaG9va3NcclxuXHRcdFx0bmFtZSA9IGpRdWVyeS5wcm9wRml4WyBuYW1lIF0gfHwgbmFtZTtcclxuXHRcdFx0aG9va3MgPSBqUXVlcnkucHJvcEhvb2tzWyBuYW1lIF07XHJcblx0XHR9XHJcblxyXG5cdFx0aWYgKCB2YWx1ZSAhPT0gdW5kZWZpbmVkICkge1xyXG5cdFx0XHRyZXR1cm4gaG9va3MgJiYgXCJzZXRcIiBpbiBob29rcyAmJiAocmV0ID0gaG9va3Muc2V0KCBlbGVtLCB2YWx1ZSwgbmFtZSApKSAhPT0gdW5kZWZpbmVkID9cclxuXHRcdFx0XHRyZXQgOlxyXG5cdFx0XHRcdCggZWxlbVsgbmFtZSBdID0gdmFsdWUgKTtcclxuXHJcblx0XHR9IGVsc2Uge1xyXG5cdFx0XHRyZXR1cm4gaG9va3MgJiYgXCJnZXRcIiBpbiBob29rcyAmJiAocmV0ID0gaG9va3MuZ2V0KCBlbGVtLCBuYW1lICkpICE9PSBudWxsID9cclxuXHRcdFx0XHRyZXQgOlxyXG5cdFx0XHRcdGVsZW1bIG5hbWUgXTtcclxuXHRcdH1cclxuXHR9LFxyXG5cclxuXHRwcm9wSG9va3M6IHtcclxuXHRcdHRhYkluZGV4OiB7XHJcblx0XHRcdGdldDogZnVuY3Rpb24oIGVsZW0gKSB7XHJcblx0XHRcdFx0Ly8gZWxlbS50YWJJbmRleCBkb2Vzbid0IGFsd2F5cyByZXR1cm4gdGhlIGNvcnJlY3QgdmFsdWUgd2hlbiBpdCBoYXNuJ3QgYmVlbiBleHBsaWNpdGx5IHNldFxyXG5cdFx0XHRcdC8vIGh0dHA6Ly9mbHVpZHByb2plY3Qub3JnL2Jsb2cvMjAwOC8wMS8wOS9nZXR0aW5nLXNldHRpbmctYW5kLXJlbW92aW5nLXRhYmluZGV4LXZhbHVlcy13aXRoLWphdmFzY3JpcHQvXHJcblx0XHRcdFx0Ly8gVXNlIHByb3BlciBhdHRyaWJ1dGUgcmV0cmlldmFsKCMxMjA3MilcclxuXHRcdFx0XHR2YXIgdGFiaW5kZXggPSBqUXVlcnkuZmluZC5hdHRyKCBlbGVtLCBcInRhYmluZGV4XCIgKTtcclxuXHJcblx0XHRcdFx0cmV0dXJuIHRhYmluZGV4ID9cclxuXHRcdFx0XHRcdHBhcnNlSW50KCB0YWJpbmRleCwgMTAgKSA6XHJcblx0XHRcdFx0XHRyZm9jdXNhYmxlLnRlc3QoIGVsZW0ubm9kZU5hbWUgKSB8fCByY2xpY2thYmxlLnRlc3QoIGVsZW0ubm9kZU5hbWUgKSAmJiBlbGVtLmhyZWYgP1xyXG5cdFx0XHRcdFx0XHQwIDpcclxuXHRcdFx0XHRcdFx0LTE7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHR9XHJcbn0pO1xyXG5cclxuLy8gU29tZSBhdHRyaWJ1dGVzIHJlcXVpcmUgYSBzcGVjaWFsIGNhbGwgb24gSUVcclxuLy8gaHR0cDovL21zZG4ubWljcm9zb2Z0LmNvbS9lbi11cy9saWJyYXJ5L21zNTM2NDI5JTI4VlMuODUlMjkuYXNweFxyXG5pZiAoICFzdXBwb3J0LmhyZWZOb3JtYWxpemVkICkge1xyXG5cdC8vIGhyZWYvc3JjIHByb3BlcnR5IHNob3VsZCBnZXQgdGhlIGZ1bGwgbm9ybWFsaXplZCBVUkwgKCMxMDI5OS8jMTI5MTUpXHJcblx0alF1ZXJ5LmVhY2goWyBcImhyZWZcIiwgXCJzcmNcIiBdLCBmdW5jdGlvbiggaSwgbmFtZSApIHtcclxuXHRcdGpRdWVyeS5wcm9wSG9va3NbIG5hbWUgXSA9IHtcclxuXHRcdFx0Z2V0OiBmdW5jdGlvbiggZWxlbSApIHtcclxuXHRcdFx0XHRyZXR1cm4gZWxlbS5nZXRBdHRyaWJ1dGUoIG5hbWUsIDQgKTtcclxuXHRcdFx0fVxyXG5cdFx0fTtcclxuXHR9KTtcclxufVxyXG5cclxuLy8gU3VwcG9ydDogU2FmYXJpLCBJRTkrXHJcbi8vIG1pcy1yZXBvcnRzIHRoZSBkZWZhdWx0IHNlbGVjdGVkIHByb3BlcnR5IG9mIGFuIG9wdGlvblxyXG4vLyBBY2Nlc3NpbmcgdGhlIHBhcmVudCdzIHNlbGVjdGVkSW5kZXggcHJvcGVydHkgZml4ZXMgaXRcclxuaWYgKCAhc3VwcG9ydC5vcHRTZWxlY3RlZCApIHtcclxuXHRqUXVlcnkucHJvcEhvb2tzLnNlbGVjdGVkID0ge1xyXG5cdFx0Z2V0OiBmdW5jdGlvbiggZWxlbSApIHtcclxuXHRcdFx0dmFyIHBhcmVudCA9IGVsZW0ucGFyZW50Tm9kZTtcclxuXHJcblx0XHRcdGlmICggcGFyZW50ICkge1xyXG5cdFx0XHRcdHBhcmVudC5zZWxlY3RlZEluZGV4O1xyXG5cclxuXHRcdFx0XHQvLyBNYWtlIHN1cmUgdGhhdCBpdCBhbHNvIHdvcmtzIHdpdGggb3B0Z3JvdXBzLCBzZWUgIzU3MDFcclxuXHRcdFx0XHRpZiAoIHBhcmVudC5wYXJlbnROb2RlICkge1xyXG5cdFx0XHRcdFx0cGFyZW50LnBhcmVudE5vZGUuc2VsZWN0ZWRJbmRleDtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdFx0cmV0dXJuIG51bGw7XHJcblx0XHR9XHJcblx0fTtcclxufVxyXG5cclxualF1ZXJ5LmVhY2goW1xyXG5cdFwidGFiSW5kZXhcIixcclxuXHRcInJlYWRPbmx5XCIsXHJcblx0XCJtYXhMZW5ndGhcIixcclxuXHRcImNlbGxTcGFjaW5nXCIsXHJcblx0XCJjZWxsUGFkZGluZ1wiLFxyXG5cdFwicm93U3BhblwiLFxyXG5cdFwiY29sU3BhblwiLFxyXG5cdFwidXNlTWFwXCIsXHJcblx0XCJmcmFtZUJvcmRlclwiLFxyXG5cdFwiY29udGVudEVkaXRhYmxlXCJcclxuXSwgZnVuY3Rpb24oKSB7XHJcblx0alF1ZXJ5LnByb3BGaXhbIHRoaXMudG9Mb3dlckNhc2UoKSBdID0gdGhpcztcclxufSk7XHJcblxyXG4vLyBJRTYvNyBjYWxsIGVuY3R5cGUgZW5jb2RpbmdcclxuaWYgKCAhc3VwcG9ydC5lbmN0eXBlICkge1xyXG5cdGpRdWVyeS5wcm9wRml4LmVuY3R5cGUgPSBcImVuY29kaW5nXCI7XHJcbn1cclxuXHJcblxyXG5cclxuXHJcbnZhciByY2xhc3MgPSAvW1xcdFxcclxcblxcZl0vZztcclxuXHJcbmpRdWVyeS5mbi5leHRlbmQoe1xyXG5cdGFkZENsYXNzOiBmdW5jdGlvbiggdmFsdWUgKSB7XHJcblx0XHR2YXIgY2xhc3NlcywgZWxlbSwgY3VyLCBjbGF6eiwgaiwgZmluYWxWYWx1ZSxcclxuXHRcdFx0aSA9IDAsXHJcblx0XHRcdGxlbiA9IHRoaXMubGVuZ3RoLFxyXG5cdFx0XHRwcm9jZWVkID0gdHlwZW9mIHZhbHVlID09PSBcInN0cmluZ1wiICYmIHZhbHVlO1xyXG5cclxuXHRcdGlmICggalF1ZXJ5LmlzRnVuY3Rpb24oIHZhbHVlICkgKSB7XHJcblx0XHRcdHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oIGogKSB7XHJcblx0XHRcdFx0alF1ZXJ5KCB0aGlzICkuYWRkQ2xhc3MoIHZhbHVlLmNhbGwoIHRoaXMsIGosIHRoaXMuY2xhc3NOYW1lICkgKTtcclxuXHRcdFx0fSk7XHJcblx0XHR9XHJcblxyXG5cdFx0aWYgKCBwcm9jZWVkICkge1xyXG5cdFx0XHQvLyBUaGUgZGlzanVuY3Rpb24gaGVyZSBpcyBmb3IgYmV0dGVyIGNvbXByZXNzaWJpbGl0eSAoc2VlIHJlbW92ZUNsYXNzKVxyXG5cdFx0XHRjbGFzc2VzID0gKCB2YWx1ZSB8fCBcIlwiICkubWF0Y2goIHJub3R3aGl0ZSApIHx8IFtdO1xyXG5cclxuXHRcdFx0Zm9yICggOyBpIDwgbGVuOyBpKysgKSB7XHJcblx0XHRcdFx0ZWxlbSA9IHRoaXNbIGkgXTtcclxuXHRcdFx0XHRjdXIgPSBlbGVtLm5vZGVUeXBlID09PSAxICYmICggZWxlbS5jbGFzc05hbWUgP1xyXG5cdFx0XHRcdFx0KCBcIiBcIiArIGVsZW0uY2xhc3NOYW1lICsgXCIgXCIgKS5yZXBsYWNlKCByY2xhc3MsIFwiIFwiICkgOlxyXG5cdFx0XHRcdFx0XCIgXCJcclxuXHRcdFx0XHQpO1xyXG5cclxuXHRcdFx0XHRpZiAoIGN1ciApIHtcclxuXHRcdFx0XHRcdGogPSAwO1xyXG5cdFx0XHRcdFx0d2hpbGUgKCAoY2xhenogPSBjbGFzc2VzW2orK10pICkge1xyXG5cdFx0XHRcdFx0XHRpZiAoIGN1ci5pbmRleE9mKCBcIiBcIiArIGNsYXp6ICsgXCIgXCIgKSA8IDAgKSB7XHJcblx0XHRcdFx0XHRcdFx0Y3VyICs9IGNsYXp6ICsgXCIgXCI7XHJcblx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0XHQvLyBvbmx5IGFzc2lnbiBpZiBkaWZmZXJlbnQgdG8gYXZvaWQgdW5uZWVkZWQgcmVuZGVyaW5nLlxyXG5cdFx0XHRcdFx0ZmluYWxWYWx1ZSA9IGpRdWVyeS50cmltKCBjdXIgKTtcclxuXHRcdFx0XHRcdGlmICggZWxlbS5jbGFzc05hbWUgIT09IGZpbmFsVmFsdWUgKSB7XHJcblx0XHRcdFx0XHRcdGVsZW0uY2xhc3NOYW1lID0gZmluYWxWYWx1ZTtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHR9LFxyXG5cclxuXHRyZW1vdmVDbGFzczogZnVuY3Rpb24oIHZhbHVlICkge1xyXG5cdFx0dmFyIGNsYXNzZXMsIGVsZW0sIGN1ciwgY2xhenosIGosIGZpbmFsVmFsdWUsXHJcblx0XHRcdGkgPSAwLFxyXG5cdFx0XHRsZW4gPSB0aGlzLmxlbmd0aCxcclxuXHRcdFx0cHJvY2VlZCA9IGFyZ3VtZW50cy5sZW5ndGggPT09IDAgfHwgdHlwZW9mIHZhbHVlID09PSBcInN0cmluZ1wiICYmIHZhbHVlO1xyXG5cclxuXHRcdGlmICggalF1ZXJ5LmlzRnVuY3Rpb24oIHZhbHVlICkgKSB7XHJcblx0XHRcdHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oIGogKSB7XHJcblx0XHRcdFx0alF1ZXJ5KCB0aGlzICkucmVtb3ZlQ2xhc3MoIHZhbHVlLmNhbGwoIHRoaXMsIGosIHRoaXMuY2xhc3NOYW1lICkgKTtcclxuXHRcdFx0fSk7XHJcblx0XHR9XHJcblx0XHRpZiAoIHByb2NlZWQgKSB7XHJcblx0XHRcdGNsYXNzZXMgPSAoIHZhbHVlIHx8IFwiXCIgKS5tYXRjaCggcm5vdHdoaXRlICkgfHwgW107XHJcblxyXG5cdFx0XHRmb3IgKCA7IGkgPCBsZW47IGkrKyApIHtcclxuXHRcdFx0XHRlbGVtID0gdGhpc1sgaSBdO1xyXG5cdFx0XHRcdC8vIFRoaXMgZXhwcmVzc2lvbiBpcyBoZXJlIGZvciBiZXR0ZXIgY29tcHJlc3NpYmlsaXR5IChzZWUgYWRkQ2xhc3MpXHJcblx0XHRcdFx0Y3VyID0gZWxlbS5ub2RlVHlwZSA9PT0gMSAmJiAoIGVsZW0uY2xhc3NOYW1lID9cclxuXHRcdFx0XHRcdCggXCIgXCIgKyBlbGVtLmNsYXNzTmFtZSArIFwiIFwiICkucmVwbGFjZSggcmNsYXNzLCBcIiBcIiApIDpcclxuXHRcdFx0XHRcdFwiXCJcclxuXHRcdFx0XHQpO1xyXG5cclxuXHRcdFx0XHRpZiAoIGN1ciApIHtcclxuXHRcdFx0XHRcdGogPSAwO1xyXG5cdFx0XHRcdFx0d2hpbGUgKCAoY2xhenogPSBjbGFzc2VzW2orK10pICkge1xyXG5cdFx0XHRcdFx0XHQvLyBSZW1vdmUgKmFsbCogaW5zdGFuY2VzXHJcblx0XHRcdFx0XHRcdHdoaWxlICggY3VyLmluZGV4T2YoIFwiIFwiICsgY2xhenogKyBcIiBcIiApID49IDAgKSB7XHJcblx0XHRcdFx0XHRcdFx0Y3VyID0gY3VyLnJlcGxhY2UoIFwiIFwiICsgY2xhenogKyBcIiBcIiwgXCIgXCIgKTtcclxuXHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRcdC8vIG9ubHkgYXNzaWduIGlmIGRpZmZlcmVudCB0byBhdm9pZCB1bm5lZWRlZCByZW5kZXJpbmcuXHJcblx0XHRcdFx0XHRmaW5hbFZhbHVlID0gdmFsdWUgPyBqUXVlcnkudHJpbSggY3VyICkgOiBcIlwiO1xyXG5cdFx0XHRcdFx0aWYgKCBlbGVtLmNsYXNzTmFtZSAhPT0gZmluYWxWYWx1ZSApIHtcclxuXHRcdFx0XHRcdFx0ZWxlbS5jbGFzc05hbWUgPSBmaW5hbFZhbHVlO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cdH0sXHJcblxyXG5cdHRvZ2dsZUNsYXNzOiBmdW5jdGlvbiggdmFsdWUsIHN0YXRlVmFsICkge1xyXG5cdFx0dmFyIHR5cGUgPSB0eXBlb2YgdmFsdWU7XHJcblxyXG5cdFx0aWYgKCB0eXBlb2Ygc3RhdGVWYWwgPT09IFwiYm9vbGVhblwiICYmIHR5cGUgPT09IFwic3RyaW5nXCIgKSB7XHJcblx0XHRcdHJldHVybiBzdGF0ZVZhbCA/IHRoaXMuYWRkQ2xhc3MoIHZhbHVlICkgOiB0aGlzLnJlbW92ZUNsYXNzKCB2YWx1ZSApO1xyXG5cdFx0fVxyXG5cclxuXHRcdGlmICggalF1ZXJ5LmlzRnVuY3Rpb24oIHZhbHVlICkgKSB7XHJcblx0XHRcdHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oIGkgKSB7XHJcblx0XHRcdFx0alF1ZXJ5KCB0aGlzICkudG9nZ2xlQ2xhc3MoIHZhbHVlLmNhbGwodGhpcywgaSwgdGhpcy5jbGFzc05hbWUsIHN0YXRlVmFsKSwgc3RhdGVWYWwgKTtcclxuXHRcdFx0fSk7XHJcblx0XHR9XHJcblxyXG5cdFx0cmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbigpIHtcclxuXHRcdFx0aWYgKCB0eXBlID09PSBcInN0cmluZ1wiICkge1xyXG5cdFx0XHRcdC8vIHRvZ2dsZSBpbmRpdmlkdWFsIGNsYXNzIG5hbWVzXHJcblx0XHRcdFx0dmFyIGNsYXNzTmFtZSxcclxuXHRcdFx0XHRcdGkgPSAwLFxyXG5cdFx0XHRcdFx0c2VsZiA9IGpRdWVyeSggdGhpcyApLFxyXG5cdFx0XHRcdFx0Y2xhc3NOYW1lcyA9IHZhbHVlLm1hdGNoKCBybm90d2hpdGUgKSB8fCBbXTtcclxuXHJcblx0XHRcdFx0d2hpbGUgKCAoY2xhc3NOYW1lID0gY2xhc3NOYW1lc1sgaSsrIF0pICkge1xyXG5cdFx0XHRcdFx0Ly8gY2hlY2sgZWFjaCBjbGFzc05hbWUgZ2l2ZW4sIHNwYWNlIHNlcGFyYXRlZCBsaXN0XHJcblx0XHRcdFx0XHRpZiAoIHNlbGYuaGFzQ2xhc3MoIGNsYXNzTmFtZSApICkge1xyXG5cdFx0XHRcdFx0XHRzZWxmLnJlbW92ZUNsYXNzKCBjbGFzc05hbWUgKTtcclxuXHRcdFx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0XHRcdHNlbGYuYWRkQ2xhc3MoIGNsYXNzTmFtZSApO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdC8vIFRvZ2dsZSB3aG9sZSBjbGFzcyBuYW1lXHJcblx0XHRcdH0gZWxzZSBpZiAoIHR5cGUgPT09IHN0cnVuZGVmaW5lZCB8fCB0eXBlID09PSBcImJvb2xlYW5cIiApIHtcclxuXHRcdFx0XHRpZiAoIHRoaXMuY2xhc3NOYW1lICkge1xyXG5cdFx0XHRcdFx0Ly8gc3RvcmUgY2xhc3NOYW1lIGlmIHNldFxyXG5cdFx0XHRcdFx0alF1ZXJ5Ll9kYXRhKCB0aGlzLCBcIl9fY2xhc3NOYW1lX19cIiwgdGhpcy5jbGFzc05hbWUgKTtcclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdC8vIElmIHRoZSBlbGVtZW50IGhhcyBhIGNsYXNzIG5hbWUgb3IgaWYgd2UncmUgcGFzc2VkIFwiZmFsc2VcIixcclxuXHRcdFx0XHQvLyB0aGVuIHJlbW92ZSB0aGUgd2hvbGUgY2xhc3NuYW1lIChpZiB0aGVyZSB3YXMgb25lLCB0aGUgYWJvdmUgc2F2ZWQgaXQpLlxyXG5cdFx0XHRcdC8vIE90aGVyd2lzZSBicmluZyBiYWNrIHdoYXRldmVyIHdhcyBwcmV2aW91c2x5IHNhdmVkIChpZiBhbnl0aGluZyksXHJcblx0XHRcdFx0Ly8gZmFsbGluZyBiYWNrIHRvIHRoZSBlbXB0eSBzdHJpbmcgaWYgbm90aGluZyB3YXMgc3RvcmVkLlxyXG5cdFx0XHRcdHRoaXMuY2xhc3NOYW1lID0gdGhpcy5jbGFzc05hbWUgfHwgdmFsdWUgPT09IGZhbHNlID8gXCJcIiA6IGpRdWVyeS5fZGF0YSggdGhpcywgXCJfX2NsYXNzTmFtZV9fXCIgKSB8fCBcIlwiO1xyXG5cdFx0XHR9XHJcblx0XHR9KTtcclxuXHR9LFxyXG5cclxuXHRoYXNDbGFzczogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xyXG5cdFx0dmFyIGNsYXNzTmFtZSA9IFwiIFwiICsgc2VsZWN0b3IgKyBcIiBcIixcclxuXHRcdFx0aSA9IDAsXHJcblx0XHRcdGwgPSB0aGlzLmxlbmd0aDtcclxuXHRcdGZvciAoIDsgaSA8IGw7IGkrKyApIHtcclxuXHRcdFx0aWYgKCB0aGlzW2ldLm5vZGVUeXBlID09PSAxICYmIChcIiBcIiArIHRoaXNbaV0uY2xhc3NOYW1lICsgXCIgXCIpLnJlcGxhY2UocmNsYXNzLCBcIiBcIikuaW5kZXhPZiggY2xhc3NOYW1lICkgPj0gMCApIHtcclxuXHRcdFx0XHRyZXR1cm4gdHJ1ZTtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiBmYWxzZTtcclxuXHR9XHJcbn0pO1xyXG5cclxuXHJcblxyXG5cclxuLy8gUmV0dXJuIGpRdWVyeSBmb3IgYXR0cmlidXRlcy1vbmx5IGluY2x1c2lvblxyXG5cclxuXHJcbmpRdWVyeS5lYWNoKCAoXCJibHVyIGZvY3VzIGZvY3VzaW4gZm9jdXNvdXQgbG9hZCByZXNpemUgc2Nyb2xsIHVubG9hZCBjbGljayBkYmxjbGljayBcIiArXHJcblx0XCJtb3VzZWRvd24gbW91c2V1cCBtb3VzZW1vdmUgbW91c2VvdmVyIG1vdXNlb3V0IG1vdXNlZW50ZXIgbW91c2VsZWF2ZSBcIiArXHJcblx0XCJjaGFuZ2Ugc2VsZWN0IHN1Ym1pdCBrZXlkb3duIGtleXByZXNzIGtleXVwIGVycm9yIGNvbnRleHRtZW51XCIpLnNwbGl0KFwiIFwiKSwgZnVuY3Rpb24oIGksIG5hbWUgKSB7XHJcblxyXG5cdC8vIEhhbmRsZSBldmVudCBiaW5kaW5nXHJcblx0alF1ZXJ5LmZuWyBuYW1lIF0gPSBmdW5jdGlvbiggZGF0YSwgZm4gKSB7XHJcblx0XHRyZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA+IDAgP1xyXG5cdFx0XHR0aGlzLm9uKCBuYW1lLCBudWxsLCBkYXRhLCBmbiApIDpcclxuXHRcdFx0dGhpcy50cmlnZ2VyKCBuYW1lICk7XHJcblx0fTtcclxufSk7XHJcblxyXG5qUXVlcnkuZm4uZXh0ZW5kKHtcclxuXHRob3ZlcjogZnVuY3Rpb24oIGZuT3ZlciwgZm5PdXQgKSB7XHJcblx0XHRyZXR1cm4gdGhpcy5tb3VzZWVudGVyKCBmbk92ZXIgKS5tb3VzZWxlYXZlKCBmbk91dCB8fCBmbk92ZXIgKTtcclxuXHR9LFxyXG5cclxuXHRiaW5kOiBmdW5jdGlvbiggdHlwZXMsIGRhdGEsIGZuICkge1xyXG5cdFx0cmV0dXJuIHRoaXMub24oIHR5cGVzLCBudWxsLCBkYXRhLCBmbiApO1xyXG5cdH0sXHJcblx0dW5iaW5kOiBmdW5jdGlvbiggdHlwZXMsIGZuICkge1xyXG5cdFx0cmV0dXJuIHRoaXMub2ZmKCB0eXBlcywgbnVsbCwgZm4gKTtcclxuXHR9LFxyXG5cclxuXHRkZWxlZ2F0ZTogZnVuY3Rpb24oIHNlbGVjdG9yLCB0eXBlcywgZGF0YSwgZm4gKSB7XHJcblx0XHRyZXR1cm4gdGhpcy5vbiggdHlwZXMsIHNlbGVjdG9yLCBkYXRhLCBmbiApO1xyXG5cdH0sXHJcblx0dW5kZWxlZ2F0ZTogZnVuY3Rpb24oIHNlbGVjdG9yLCB0eXBlcywgZm4gKSB7XHJcblx0XHQvLyAoIG5hbWVzcGFjZSApIG9yICggc2VsZWN0b3IsIHR5cGVzIFssIGZuXSApXHJcblx0XHRyZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA9PT0gMSA/IHRoaXMub2ZmKCBzZWxlY3RvciwgXCIqKlwiICkgOiB0aGlzLm9mZiggdHlwZXMsIHNlbGVjdG9yIHx8IFwiKipcIiwgZm4gKTtcclxuXHR9XHJcbn0pO1xyXG5cclxuXHJcbnZhciBub25jZSA9IGpRdWVyeS5ub3coKTtcclxuXHJcbnZhciBycXVlcnkgPSAoL1xcPy8pO1xyXG5cclxuXHJcblxyXG52YXIgcnZhbGlkdG9rZW5zID0gLygsKXwoXFxbfHspfCh9fF0pfFwiKD86W15cIlxcXFxcXHJcXG5dfFxcXFxbXCJcXFxcXFwvYmZucnRdfFxcXFx1W1xcZGEtZkEtRl17NH0pKlwiXFxzKjo/fHRydWV8ZmFsc2V8bnVsbHwtPyg/ITBcXGQpXFxkKyg/OlxcLlxcZCt8KSg/OltlRV1bKy1dP1xcZCt8KS9nO1xyXG5cclxualF1ZXJ5LnBhcnNlSlNPTiA9IGZ1bmN0aW9uKCBkYXRhICkge1xyXG5cdC8vIEF0dGVtcHQgdG8gcGFyc2UgdXNpbmcgdGhlIG5hdGl2ZSBKU09OIHBhcnNlciBmaXJzdFxyXG5cdGlmICggd2luZG93LkpTT04gJiYgd2luZG93LkpTT04ucGFyc2UgKSB7XHJcblx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDIuM1xyXG5cdFx0Ly8gV29ya2Fyb3VuZCBmYWlsdXJlIHRvIHN0cmluZy1jYXN0IG51bGwgaW5wdXRcclxuXHRcdHJldHVybiB3aW5kb3cuSlNPTi5wYXJzZSggZGF0YSArIFwiXCIgKTtcclxuXHR9XHJcblxyXG5cdHZhciByZXF1aXJlTm9uQ29tbWEsXHJcblx0XHRkZXB0aCA9IG51bGwsXHJcblx0XHRzdHIgPSBqUXVlcnkudHJpbSggZGF0YSArIFwiXCIgKTtcclxuXHJcblx0Ly8gR3VhcmQgYWdhaW5zdCBpbnZhbGlkIChhbmQgcG9zc2libHkgZGFuZ2Vyb3VzKSBpbnB1dCBieSBlbnN1cmluZyB0aGF0IG5vdGhpbmcgcmVtYWluc1xyXG5cdC8vIGFmdGVyIHJlbW92aW5nIHZhbGlkIHRva2Vuc1xyXG5cdHJldHVybiBzdHIgJiYgIWpRdWVyeS50cmltKCBzdHIucmVwbGFjZSggcnZhbGlkdG9rZW5zLCBmdW5jdGlvbiggdG9rZW4sIGNvbW1hLCBvcGVuLCBjbG9zZSApIHtcclxuXHJcblx0XHQvLyBGb3JjZSB0ZXJtaW5hdGlvbiBpZiB3ZSBzZWUgYSBtaXNwbGFjZWQgY29tbWFcclxuXHRcdGlmICggcmVxdWlyZU5vbkNvbW1hICYmIGNvbW1hICkge1xyXG5cdFx0XHRkZXB0aCA9IDA7XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gUGVyZm9ybSBubyBtb3JlIHJlcGxhY2VtZW50cyBhZnRlciByZXR1cm5pbmcgdG8gb3V0ZXJtb3N0IGRlcHRoXHJcblx0XHRpZiAoIGRlcHRoID09PSAwICkge1xyXG5cdFx0XHRyZXR1cm4gdG9rZW47XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gQ29tbWFzIG11c3Qgbm90IGZvbGxvdyBcIltcIiwgXCJ7XCIsIG9yIFwiLFwiXHJcblx0XHRyZXF1aXJlTm9uQ29tbWEgPSBvcGVuIHx8IGNvbW1hO1xyXG5cclxuXHRcdC8vIERldGVybWluZSBuZXcgZGVwdGhcclxuXHRcdC8vIGFycmF5L29iamVjdCBvcGVuIChcIltcIiBvciBcIntcIik6IGRlcHRoICs9IHRydWUgLSBmYWxzZSAoaW5jcmVtZW50KVxyXG5cdFx0Ly8gYXJyYXkvb2JqZWN0IGNsb3NlIChcIl1cIiBvciBcIn1cIik6IGRlcHRoICs9IGZhbHNlIC0gdHJ1ZSAoZGVjcmVtZW50KVxyXG5cdFx0Ly8gb3RoZXIgY2FzZXMgKFwiLFwiIG9yIHByaW1pdGl2ZSk6IGRlcHRoICs9IHRydWUgLSB0cnVlIChudW1lcmljIGNhc3QpXHJcblx0XHRkZXB0aCArPSAhY2xvc2UgLSAhb3BlbjtcclxuXHJcblx0XHQvLyBSZW1vdmUgdGhpcyB0b2tlblxyXG5cdFx0cmV0dXJuIFwiXCI7XHJcblx0fSkgKSA/XHJcblx0XHQoIEZ1bmN0aW9uKCBcInJldHVybiBcIiArIHN0ciApICkoKSA6XHJcblx0XHRqUXVlcnkuZXJyb3IoIFwiSW52YWxpZCBKU09OOiBcIiArIGRhdGEgKTtcclxufTtcclxuXHJcblxyXG4vLyBDcm9zcy1icm93c2VyIHhtbCBwYXJzaW5nXHJcbmpRdWVyeS5wYXJzZVhNTCA9IGZ1bmN0aW9uKCBkYXRhICkge1xyXG5cdHZhciB4bWwsIHRtcDtcclxuXHRpZiAoICFkYXRhIHx8IHR5cGVvZiBkYXRhICE9PSBcInN0cmluZ1wiICkge1xyXG5cdFx0cmV0dXJuIG51bGw7XHJcblx0fVxyXG5cdHRyeSB7XHJcblx0XHRpZiAoIHdpbmRvdy5ET01QYXJzZXIgKSB7IC8vIFN0YW5kYXJkXHJcblx0XHRcdHRtcCA9IG5ldyBET01QYXJzZXIoKTtcclxuXHRcdFx0eG1sID0gdG1wLnBhcnNlRnJvbVN0cmluZyggZGF0YSwgXCJ0ZXh0L3htbFwiICk7XHJcblx0XHR9IGVsc2UgeyAvLyBJRVxyXG5cdFx0XHR4bWwgPSBuZXcgQWN0aXZlWE9iamVjdCggXCJNaWNyb3NvZnQuWE1MRE9NXCIgKTtcclxuXHRcdFx0eG1sLmFzeW5jID0gXCJmYWxzZVwiO1xyXG5cdFx0XHR4bWwubG9hZFhNTCggZGF0YSApO1xyXG5cdFx0fVxyXG5cdH0gY2F0Y2goIGUgKSB7XHJcblx0XHR4bWwgPSB1bmRlZmluZWQ7XHJcblx0fVxyXG5cdGlmICggIXhtbCB8fCAheG1sLmRvY3VtZW50RWxlbWVudCB8fCB4bWwuZ2V0RWxlbWVudHNCeVRhZ05hbWUoIFwicGFyc2VyZXJyb3JcIiApLmxlbmd0aCApIHtcclxuXHRcdGpRdWVyeS5lcnJvciggXCJJbnZhbGlkIFhNTDogXCIgKyBkYXRhICk7XHJcblx0fVxyXG5cdHJldHVybiB4bWw7XHJcbn07XHJcblxyXG5cclxudmFyXHJcblx0Ly8gRG9jdW1lbnQgbG9jYXRpb25cclxuXHRhamF4TG9jUGFydHMsXHJcblx0YWpheExvY2F0aW9uLFxyXG5cclxuXHRyaGFzaCA9IC8jLiokLyxcclxuXHRydHMgPSAvKFs/Jl0pXz1bXiZdKi8sXHJcblx0cmhlYWRlcnMgPSAvXiguKj8pOlsgXFx0XSooW15cXHJcXG5dKilcXHI/JC9tZywgLy8gSUUgbGVhdmVzIGFuIFxcciBjaGFyYWN0ZXIgYXQgRU9MXHJcblx0Ly8gIzc2NTMsICM4MTI1LCAjODE1MjogbG9jYWwgcHJvdG9jb2wgZGV0ZWN0aW9uXHJcblx0cmxvY2FsUHJvdG9jb2wgPSAvXig/OmFib3V0fGFwcHxhcHAtc3RvcmFnZXwuKy1leHRlbnNpb258ZmlsZXxyZXN8d2lkZ2V0KTokLyxcclxuXHRybm9Db250ZW50ID0gL14oPzpHRVR8SEVBRCkkLyxcclxuXHRycHJvdG9jb2wgPSAvXlxcL1xcLy8sXHJcblx0cnVybCA9IC9eKFtcXHcuKy1dKzopKD86XFwvXFwvKD86W15cXC8/I10qQHwpKFteXFwvPyM6XSopKD86OihcXGQrKXwpfCkvLFxyXG5cclxuXHQvKiBQcmVmaWx0ZXJzXHJcblx0ICogMSkgVGhleSBhcmUgdXNlZnVsIHRvIGludHJvZHVjZSBjdXN0b20gZGF0YVR5cGVzIChzZWUgYWpheC9qc29ucC5qcyBmb3IgYW4gZXhhbXBsZSlcclxuXHQgKiAyKSBUaGVzZSBhcmUgY2FsbGVkOlxyXG5cdCAqICAgIC0gQkVGT1JFIGFza2luZyBmb3IgYSB0cmFuc3BvcnRcclxuXHQgKiAgICAtIEFGVEVSIHBhcmFtIHNlcmlhbGl6YXRpb24gKHMuZGF0YSBpcyBhIHN0cmluZyBpZiBzLnByb2Nlc3NEYXRhIGlzIHRydWUpXHJcblx0ICogMykga2V5IGlzIHRoZSBkYXRhVHlwZVxyXG5cdCAqIDQpIHRoZSBjYXRjaGFsbCBzeW1ib2wgXCIqXCIgY2FuIGJlIHVzZWRcclxuXHQgKiA1KSBleGVjdXRpb24gd2lsbCBzdGFydCB3aXRoIHRyYW5zcG9ydCBkYXRhVHlwZSBhbmQgVEhFTiBjb250aW51ZSBkb3duIHRvIFwiKlwiIGlmIG5lZWRlZFxyXG5cdCAqL1xyXG5cdHByZWZpbHRlcnMgPSB7fSxcclxuXHJcblx0LyogVHJhbnNwb3J0cyBiaW5kaW5nc1xyXG5cdCAqIDEpIGtleSBpcyB0aGUgZGF0YVR5cGVcclxuXHQgKiAyKSB0aGUgY2F0Y2hhbGwgc3ltYm9sIFwiKlwiIGNhbiBiZSB1c2VkXHJcblx0ICogMykgc2VsZWN0aW9uIHdpbGwgc3RhcnQgd2l0aCB0cmFuc3BvcnQgZGF0YVR5cGUgYW5kIFRIRU4gZ28gdG8gXCIqXCIgaWYgbmVlZGVkXHJcblx0ICovXHJcblx0dHJhbnNwb3J0cyA9IHt9LFxyXG5cclxuXHQvLyBBdm9pZCBjb21tZW50LXByb2xvZyBjaGFyIHNlcXVlbmNlICgjMTAwOTgpOyBtdXN0IGFwcGVhc2UgbGludCBhbmQgZXZhZGUgY29tcHJlc3Npb25cclxuXHRhbGxUeXBlcyA9IFwiKi9cIi5jb25jYXQoXCIqXCIpO1xyXG5cclxuLy8gIzgxMzgsIElFIG1heSB0aHJvdyBhbiBleGNlcHRpb24gd2hlbiBhY2Nlc3NpbmdcclxuLy8gYSBmaWVsZCBmcm9tIHdpbmRvdy5sb2NhdGlvbiBpZiBkb2N1bWVudC5kb21haW4gaGFzIGJlZW4gc2V0XHJcbnRyeSB7XHJcblx0YWpheExvY2F0aW9uID0gbG9jYXRpb24uaHJlZjtcclxufSBjYXRjaCggZSApIHtcclxuXHQvLyBVc2UgdGhlIGhyZWYgYXR0cmlidXRlIG9mIGFuIEEgZWxlbWVudFxyXG5cdC8vIHNpbmNlIElFIHdpbGwgbW9kaWZ5IGl0IGdpdmVuIGRvY3VtZW50LmxvY2F0aW9uXHJcblx0YWpheExvY2F0aW9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJhXCIgKTtcclxuXHRhamF4TG9jYXRpb24uaHJlZiA9IFwiXCI7XHJcblx0YWpheExvY2F0aW9uID0gYWpheExvY2F0aW9uLmhyZWY7XHJcbn1cclxuXHJcbi8vIFNlZ21lbnQgbG9jYXRpb24gaW50byBwYXJ0c1xyXG5hamF4TG9jUGFydHMgPSBydXJsLmV4ZWMoIGFqYXhMb2NhdGlvbi50b0xvd2VyQ2FzZSgpICkgfHwgW107XHJcblxyXG4vLyBCYXNlIFwiY29uc3RydWN0b3JcIiBmb3IgalF1ZXJ5LmFqYXhQcmVmaWx0ZXIgYW5kIGpRdWVyeS5hamF4VHJhbnNwb3J0XHJcbmZ1bmN0aW9uIGFkZFRvUHJlZmlsdGVyc09yVHJhbnNwb3J0cyggc3RydWN0dXJlICkge1xyXG5cclxuXHQvLyBkYXRhVHlwZUV4cHJlc3Npb24gaXMgb3B0aW9uYWwgYW5kIGRlZmF1bHRzIHRvIFwiKlwiXHJcblx0cmV0dXJuIGZ1bmN0aW9uKCBkYXRhVHlwZUV4cHJlc3Npb24sIGZ1bmMgKSB7XHJcblxyXG5cdFx0aWYgKCB0eXBlb2YgZGF0YVR5cGVFeHByZXNzaW9uICE9PSBcInN0cmluZ1wiICkge1xyXG5cdFx0XHRmdW5jID0gZGF0YVR5cGVFeHByZXNzaW9uO1xyXG5cdFx0XHRkYXRhVHlwZUV4cHJlc3Npb24gPSBcIipcIjtcclxuXHRcdH1cclxuXHJcblx0XHR2YXIgZGF0YVR5cGUsXHJcblx0XHRcdGkgPSAwLFxyXG5cdFx0XHRkYXRhVHlwZXMgPSBkYXRhVHlwZUV4cHJlc3Npb24udG9Mb3dlckNhc2UoKS5tYXRjaCggcm5vdHdoaXRlICkgfHwgW107XHJcblxyXG5cdFx0aWYgKCBqUXVlcnkuaXNGdW5jdGlvbiggZnVuYyApICkge1xyXG5cdFx0XHQvLyBGb3IgZWFjaCBkYXRhVHlwZSBpbiB0aGUgZGF0YVR5cGVFeHByZXNzaW9uXHJcblx0XHRcdHdoaWxlICggKGRhdGFUeXBlID0gZGF0YVR5cGVzW2krK10pICkge1xyXG5cdFx0XHRcdC8vIFByZXBlbmQgaWYgcmVxdWVzdGVkXHJcblx0XHRcdFx0aWYgKCBkYXRhVHlwZS5jaGFyQXQoIDAgKSA9PT0gXCIrXCIgKSB7XHJcblx0XHRcdFx0XHRkYXRhVHlwZSA9IGRhdGFUeXBlLnNsaWNlKCAxICkgfHwgXCIqXCI7XHJcblx0XHRcdFx0XHQoc3RydWN0dXJlWyBkYXRhVHlwZSBdID0gc3RydWN0dXJlWyBkYXRhVHlwZSBdIHx8IFtdKS51bnNoaWZ0KCBmdW5jICk7XHJcblxyXG5cdFx0XHRcdC8vIE90aGVyd2lzZSBhcHBlbmRcclxuXHRcdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdFx0KHN0cnVjdHVyZVsgZGF0YVR5cGUgXSA9IHN0cnVjdHVyZVsgZGF0YVR5cGUgXSB8fCBbXSkucHVzaCggZnVuYyApO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdH07XHJcbn1cclxuXHJcbi8vIEJhc2UgaW5zcGVjdGlvbiBmdW5jdGlvbiBmb3IgcHJlZmlsdGVycyBhbmQgdHJhbnNwb3J0c1xyXG5mdW5jdGlvbiBpbnNwZWN0UHJlZmlsdGVyc09yVHJhbnNwb3J0cyggc3RydWN0dXJlLCBvcHRpb25zLCBvcmlnaW5hbE9wdGlvbnMsIGpxWEhSICkge1xyXG5cclxuXHR2YXIgaW5zcGVjdGVkID0ge30sXHJcblx0XHRzZWVraW5nVHJhbnNwb3J0ID0gKCBzdHJ1Y3R1cmUgPT09IHRyYW5zcG9ydHMgKTtcclxuXHJcblx0ZnVuY3Rpb24gaW5zcGVjdCggZGF0YVR5cGUgKSB7XHJcblx0XHR2YXIgc2VsZWN0ZWQ7XHJcblx0XHRpbnNwZWN0ZWRbIGRhdGFUeXBlIF0gPSB0cnVlO1xyXG5cdFx0alF1ZXJ5LmVhY2goIHN0cnVjdHVyZVsgZGF0YVR5cGUgXSB8fCBbXSwgZnVuY3Rpb24oIF8sIHByZWZpbHRlck9yRmFjdG9yeSApIHtcclxuXHRcdFx0dmFyIGRhdGFUeXBlT3JUcmFuc3BvcnQgPSBwcmVmaWx0ZXJPckZhY3RvcnkoIG9wdGlvbnMsIG9yaWdpbmFsT3B0aW9ucywganFYSFIgKTtcclxuXHRcdFx0aWYgKCB0eXBlb2YgZGF0YVR5cGVPclRyYW5zcG9ydCA9PT0gXCJzdHJpbmdcIiAmJiAhc2Vla2luZ1RyYW5zcG9ydCAmJiAhaW5zcGVjdGVkWyBkYXRhVHlwZU9yVHJhbnNwb3J0IF0gKSB7XHJcblx0XHRcdFx0b3B0aW9ucy5kYXRhVHlwZXMudW5zaGlmdCggZGF0YVR5cGVPclRyYW5zcG9ydCApO1xyXG5cdFx0XHRcdGluc3BlY3QoIGRhdGFUeXBlT3JUcmFuc3BvcnQgKTtcclxuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XHJcblx0XHRcdH0gZWxzZSBpZiAoIHNlZWtpbmdUcmFuc3BvcnQgKSB7XHJcblx0XHRcdFx0cmV0dXJuICEoIHNlbGVjdGVkID0gZGF0YVR5cGVPclRyYW5zcG9ydCApO1xyXG5cdFx0XHR9XHJcblx0XHR9KTtcclxuXHRcdHJldHVybiBzZWxlY3RlZDtcclxuXHR9XHJcblxyXG5cdHJldHVybiBpbnNwZWN0KCBvcHRpb25zLmRhdGFUeXBlc1sgMCBdICkgfHwgIWluc3BlY3RlZFsgXCIqXCIgXSAmJiBpbnNwZWN0KCBcIipcIiApO1xyXG59XHJcblxyXG4vLyBBIHNwZWNpYWwgZXh0ZW5kIGZvciBhamF4IG9wdGlvbnNcclxuLy8gdGhhdCB0YWtlcyBcImZsYXRcIiBvcHRpb25zIChub3QgdG8gYmUgZGVlcCBleHRlbmRlZClcclxuLy8gRml4ZXMgIzk4ODdcclxuZnVuY3Rpb24gYWpheEV4dGVuZCggdGFyZ2V0LCBzcmMgKSB7XHJcblx0dmFyIGRlZXAsIGtleSxcclxuXHRcdGZsYXRPcHRpb25zID0galF1ZXJ5LmFqYXhTZXR0aW5ncy5mbGF0T3B0aW9ucyB8fCB7fTtcclxuXHJcblx0Zm9yICgga2V5IGluIHNyYyApIHtcclxuXHRcdGlmICggc3JjWyBrZXkgXSAhPT0gdW5kZWZpbmVkICkge1xyXG5cdFx0XHQoIGZsYXRPcHRpb25zWyBrZXkgXSA/IHRhcmdldCA6ICggZGVlcCB8fCAoZGVlcCA9IHt9KSApIClbIGtleSBdID0gc3JjWyBrZXkgXTtcclxuXHRcdH1cclxuXHR9XHJcblx0aWYgKCBkZWVwICkge1xyXG5cdFx0alF1ZXJ5LmV4dGVuZCggdHJ1ZSwgdGFyZ2V0LCBkZWVwICk7XHJcblx0fVxyXG5cclxuXHRyZXR1cm4gdGFyZ2V0O1xyXG59XHJcblxyXG4vKiBIYW5kbGVzIHJlc3BvbnNlcyB0byBhbiBhamF4IHJlcXVlc3Q6XHJcbiAqIC0gZmluZHMgdGhlIHJpZ2h0IGRhdGFUeXBlIChtZWRpYXRlcyBiZXR3ZWVuIGNvbnRlbnQtdHlwZSBhbmQgZXhwZWN0ZWQgZGF0YVR5cGUpXHJcbiAqIC0gcmV0dXJucyB0aGUgY29ycmVzcG9uZGluZyByZXNwb25zZVxyXG4gKi9cclxuZnVuY3Rpb24gYWpheEhhbmRsZVJlc3BvbnNlcyggcywganFYSFIsIHJlc3BvbnNlcyApIHtcclxuXHR2YXIgZmlyc3REYXRhVHlwZSwgY3QsIGZpbmFsRGF0YVR5cGUsIHR5cGUsXHJcblx0XHRjb250ZW50cyA9IHMuY29udGVudHMsXHJcblx0XHRkYXRhVHlwZXMgPSBzLmRhdGFUeXBlcztcclxuXHJcblx0Ly8gUmVtb3ZlIGF1dG8gZGF0YVR5cGUgYW5kIGdldCBjb250ZW50LXR5cGUgaW4gdGhlIHByb2Nlc3NcclxuXHR3aGlsZSAoIGRhdGFUeXBlc1sgMCBdID09PSBcIipcIiApIHtcclxuXHRcdGRhdGFUeXBlcy5zaGlmdCgpO1xyXG5cdFx0aWYgKCBjdCA9PT0gdW5kZWZpbmVkICkge1xyXG5cdFx0XHRjdCA9IHMubWltZVR5cGUgfHwganFYSFIuZ2V0UmVzcG9uc2VIZWFkZXIoXCJDb250ZW50LVR5cGVcIik7XHJcblx0XHR9XHJcblx0fVxyXG5cclxuXHQvLyBDaGVjayBpZiB3ZSdyZSBkZWFsaW5nIHdpdGggYSBrbm93biBjb250ZW50LXR5cGVcclxuXHRpZiAoIGN0ICkge1xyXG5cdFx0Zm9yICggdHlwZSBpbiBjb250ZW50cyApIHtcclxuXHRcdFx0aWYgKCBjb250ZW50c1sgdHlwZSBdICYmIGNvbnRlbnRzWyB0eXBlIF0udGVzdCggY3QgKSApIHtcclxuXHRcdFx0XHRkYXRhVHlwZXMudW5zaGlmdCggdHlwZSApO1xyXG5cdFx0XHRcdGJyZWFrO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0fVxyXG5cclxuXHQvLyBDaGVjayB0byBzZWUgaWYgd2UgaGF2ZSBhIHJlc3BvbnNlIGZvciB0aGUgZXhwZWN0ZWQgZGF0YVR5cGVcclxuXHRpZiAoIGRhdGFUeXBlc1sgMCBdIGluIHJlc3BvbnNlcyApIHtcclxuXHRcdGZpbmFsRGF0YVR5cGUgPSBkYXRhVHlwZXNbIDAgXTtcclxuXHR9IGVsc2Uge1xyXG5cdFx0Ly8gVHJ5IGNvbnZlcnRpYmxlIGRhdGFUeXBlc1xyXG5cdFx0Zm9yICggdHlwZSBpbiByZXNwb25zZXMgKSB7XHJcblx0XHRcdGlmICggIWRhdGFUeXBlc1sgMCBdIHx8IHMuY29udmVydGVyc1sgdHlwZSArIFwiIFwiICsgZGF0YVR5cGVzWzBdIF0gKSB7XHJcblx0XHRcdFx0ZmluYWxEYXRhVHlwZSA9IHR5cGU7XHJcblx0XHRcdFx0YnJlYWs7XHJcblx0XHRcdH1cclxuXHRcdFx0aWYgKCAhZmlyc3REYXRhVHlwZSApIHtcclxuXHRcdFx0XHRmaXJzdERhdGFUeXBlID0gdHlwZTtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdFx0Ly8gT3IganVzdCB1c2UgZmlyc3Qgb25lXHJcblx0XHRmaW5hbERhdGFUeXBlID0gZmluYWxEYXRhVHlwZSB8fCBmaXJzdERhdGFUeXBlO1xyXG5cdH1cclxuXHJcblx0Ly8gSWYgd2UgZm91bmQgYSBkYXRhVHlwZVxyXG5cdC8vIFdlIGFkZCB0aGUgZGF0YVR5cGUgdG8gdGhlIGxpc3QgaWYgbmVlZGVkXHJcblx0Ly8gYW5kIHJldHVybiB0aGUgY29ycmVzcG9uZGluZyByZXNwb25zZVxyXG5cdGlmICggZmluYWxEYXRhVHlwZSApIHtcclxuXHRcdGlmICggZmluYWxEYXRhVHlwZSAhPT0gZGF0YVR5cGVzWyAwIF0gKSB7XHJcblx0XHRcdGRhdGFUeXBlcy51bnNoaWZ0KCBmaW5hbERhdGFUeXBlICk7XHJcblx0XHR9XHJcblx0XHRyZXR1cm4gcmVzcG9uc2VzWyBmaW5hbERhdGFUeXBlIF07XHJcblx0fVxyXG59XHJcblxyXG4vKiBDaGFpbiBjb252ZXJzaW9ucyBnaXZlbiB0aGUgcmVxdWVzdCBhbmQgdGhlIG9yaWdpbmFsIHJlc3BvbnNlXHJcbiAqIEFsc28gc2V0cyB0aGUgcmVzcG9uc2VYWFggZmllbGRzIG9uIHRoZSBqcVhIUiBpbnN0YW5jZVxyXG4gKi9cclxuZnVuY3Rpb24gYWpheENvbnZlcnQoIHMsIHJlc3BvbnNlLCBqcVhIUiwgaXNTdWNjZXNzICkge1xyXG5cdHZhciBjb252MiwgY3VycmVudCwgY29udiwgdG1wLCBwcmV2LFxyXG5cdFx0Y29udmVydGVycyA9IHt9LFxyXG5cdFx0Ly8gV29yayB3aXRoIGEgY29weSBvZiBkYXRhVHlwZXMgaW4gY2FzZSB3ZSBuZWVkIHRvIG1vZGlmeSBpdCBmb3IgY29udmVyc2lvblxyXG5cdFx0ZGF0YVR5cGVzID0gcy5kYXRhVHlwZXMuc2xpY2UoKTtcclxuXHJcblx0Ly8gQ3JlYXRlIGNvbnZlcnRlcnMgbWFwIHdpdGggbG93ZXJjYXNlZCBrZXlzXHJcblx0aWYgKCBkYXRhVHlwZXNbIDEgXSApIHtcclxuXHRcdGZvciAoIGNvbnYgaW4gcy5jb252ZXJ0ZXJzICkge1xyXG5cdFx0XHRjb252ZXJ0ZXJzWyBjb252LnRvTG93ZXJDYXNlKCkgXSA9IHMuY29udmVydGVyc1sgY29udiBdO1xyXG5cdFx0fVxyXG5cdH1cclxuXHJcblx0Y3VycmVudCA9IGRhdGFUeXBlcy5zaGlmdCgpO1xyXG5cclxuXHQvLyBDb252ZXJ0IHRvIGVhY2ggc2VxdWVudGlhbCBkYXRhVHlwZVxyXG5cdHdoaWxlICggY3VycmVudCApIHtcclxuXHJcblx0XHRpZiAoIHMucmVzcG9uc2VGaWVsZHNbIGN1cnJlbnQgXSApIHtcclxuXHRcdFx0anFYSFJbIHMucmVzcG9uc2VGaWVsZHNbIGN1cnJlbnQgXSBdID0gcmVzcG9uc2U7XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gQXBwbHkgdGhlIGRhdGFGaWx0ZXIgaWYgcHJvdmlkZWRcclxuXHRcdGlmICggIXByZXYgJiYgaXNTdWNjZXNzICYmIHMuZGF0YUZpbHRlciApIHtcclxuXHRcdFx0cmVzcG9uc2UgPSBzLmRhdGFGaWx0ZXIoIHJlc3BvbnNlLCBzLmRhdGFUeXBlICk7XHJcblx0XHR9XHJcblxyXG5cdFx0cHJldiA9IGN1cnJlbnQ7XHJcblx0XHRjdXJyZW50ID0gZGF0YVR5cGVzLnNoaWZ0KCk7XHJcblxyXG5cdFx0aWYgKCBjdXJyZW50ICkge1xyXG5cclxuXHRcdFx0Ly8gVGhlcmUncyBvbmx5IHdvcmsgdG8gZG8gaWYgY3VycmVudCBkYXRhVHlwZSBpcyBub24tYXV0b1xyXG5cdFx0XHRpZiAoIGN1cnJlbnQgPT09IFwiKlwiICkge1xyXG5cclxuXHRcdFx0XHRjdXJyZW50ID0gcHJldjtcclxuXHJcblx0XHRcdC8vIENvbnZlcnQgcmVzcG9uc2UgaWYgcHJldiBkYXRhVHlwZSBpcyBub24tYXV0byBhbmQgZGlmZmVycyBmcm9tIGN1cnJlbnRcclxuXHRcdFx0fSBlbHNlIGlmICggcHJldiAhPT0gXCIqXCIgJiYgcHJldiAhPT0gY3VycmVudCApIHtcclxuXHJcblx0XHRcdFx0Ly8gU2VlayBhIGRpcmVjdCBjb252ZXJ0ZXJcclxuXHRcdFx0XHRjb252ID0gY29udmVydGVyc1sgcHJldiArIFwiIFwiICsgY3VycmVudCBdIHx8IGNvbnZlcnRlcnNbIFwiKiBcIiArIGN1cnJlbnQgXTtcclxuXHJcblx0XHRcdFx0Ly8gSWYgbm9uZSBmb3VuZCwgc2VlayBhIHBhaXJcclxuXHRcdFx0XHRpZiAoICFjb252ICkge1xyXG5cdFx0XHRcdFx0Zm9yICggY29udjIgaW4gY29udmVydGVycyApIHtcclxuXHJcblx0XHRcdFx0XHRcdC8vIElmIGNvbnYyIG91dHB1dHMgY3VycmVudFxyXG5cdFx0XHRcdFx0XHR0bXAgPSBjb252Mi5zcGxpdCggXCIgXCIgKTtcclxuXHRcdFx0XHRcdFx0aWYgKCB0bXBbIDEgXSA9PT0gY3VycmVudCApIHtcclxuXHJcblx0XHRcdFx0XHRcdFx0Ly8gSWYgcHJldiBjYW4gYmUgY29udmVydGVkIHRvIGFjY2VwdGVkIGlucHV0XHJcblx0XHRcdFx0XHRcdFx0Y29udiA9IGNvbnZlcnRlcnNbIHByZXYgKyBcIiBcIiArIHRtcFsgMCBdIF0gfHxcclxuXHRcdFx0XHRcdFx0XHRcdGNvbnZlcnRlcnNbIFwiKiBcIiArIHRtcFsgMCBdIF07XHJcblx0XHRcdFx0XHRcdFx0aWYgKCBjb252ICkge1xyXG5cdFx0XHRcdFx0XHRcdFx0Ly8gQ29uZGVuc2UgZXF1aXZhbGVuY2UgY29udmVydGVyc1xyXG5cdFx0XHRcdFx0XHRcdFx0aWYgKCBjb252ID09PSB0cnVlICkge1xyXG5cdFx0XHRcdFx0XHRcdFx0XHRjb252ID0gY29udmVydGVyc1sgY29udjIgXTtcclxuXHJcblx0XHRcdFx0XHRcdFx0XHQvLyBPdGhlcndpc2UsIGluc2VydCB0aGUgaW50ZXJtZWRpYXRlIGRhdGFUeXBlXHJcblx0XHRcdFx0XHRcdFx0XHR9IGVsc2UgaWYgKCBjb252ZXJ0ZXJzWyBjb252MiBdICE9PSB0cnVlICkge1xyXG5cdFx0XHRcdFx0XHRcdFx0XHRjdXJyZW50ID0gdG1wWyAwIF07XHJcblx0XHRcdFx0XHRcdFx0XHRcdGRhdGFUeXBlcy51bnNoaWZ0KCB0bXBbIDEgXSApO1xyXG5cdFx0XHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHRcdFx0YnJlYWs7XHJcblx0XHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHQvLyBBcHBseSBjb252ZXJ0ZXIgKGlmIG5vdCBhbiBlcXVpdmFsZW5jZSlcclxuXHRcdFx0XHRpZiAoIGNvbnYgIT09IHRydWUgKSB7XHJcblxyXG5cdFx0XHRcdFx0Ly8gVW5sZXNzIGVycm9ycyBhcmUgYWxsb3dlZCB0byBidWJibGUsIGNhdGNoIGFuZCByZXR1cm4gdGhlbVxyXG5cdFx0XHRcdFx0aWYgKCBjb252ICYmIHNbIFwidGhyb3dzXCIgXSApIHtcclxuXHRcdFx0XHRcdFx0cmVzcG9uc2UgPSBjb252KCByZXNwb25zZSApO1xyXG5cdFx0XHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRcdFx0dHJ5IHtcclxuXHRcdFx0XHRcdFx0XHRyZXNwb25zZSA9IGNvbnYoIHJlc3BvbnNlICk7XHJcblx0XHRcdFx0XHRcdH0gY2F0Y2ggKCBlICkge1xyXG5cdFx0XHRcdFx0XHRcdHJldHVybiB7IHN0YXRlOiBcInBhcnNlcmVycm9yXCIsIGVycm9yOiBjb252ID8gZSA6IFwiTm8gY29udmVyc2lvbiBmcm9tIFwiICsgcHJldiArIFwiIHRvIFwiICsgY3VycmVudCB9O1xyXG5cdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0fVxyXG5cclxuXHRyZXR1cm4geyBzdGF0ZTogXCJzdWNjZXNzXCIsIGRhdGE6IHJlc3BvbnNlIH07XHJcbn1cclxuXHJcbmpRdWVyeS5leHRlbmQoe1xyXG5cclxuXHQvLyBDb3VudGVyIGZvciBob2xkaW5nIHRoZSBudW1iZXIgb2YgYWN0aXZlIHF1ZXJpZXNcclxuXHRhY3RpdmU6IDAsXHJcblxyXG5cdC8vIExhc3QtTW9kaWZpZWQgaGVhZGVyIGNhY2hlIGZvciBuZXh0IHJlcXVlc3RcclxuXHRsYXN0TW9kaWZpZWQ6IHt9LFxyXG5cdGV0YWc6IHt9LFxyXG5cclxuXHRhamF4U2V0dGluZ3M6IHtcclxuXHRcdHVybDogYWpheExvY2F0aW9uLFxyXG5cdFx0dHlwZTogXCJHRVRcIixcclxuXHRcdGlzTG9jYWw6IHJsb2NhbFByb3RvY29sLnRlc3QoIGFqYXhMb2NQYXJ0c1sgMSBdICksXHJcblx0XHRnbG9iYWw6IHRydWUsXHJcblx0XHRwcm9jZXNzRGF0YTogdHJ1ZSxcclxuXHRcdGFzeW5jOiB0cnVlLFxyXG5cdFx0Y29udGVudFR5cGU6IFwiYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkOyBjaGFyc2V0PVVURi04XCIsXHJcblx0XHQvKlxyXG5cdFx0dGltZW91dDogMCxcclxuXHRcdGRhdGE6IG51bGwsXHJcblx0XHRkYXRhVHlwZTogbnVsbCxcclxuXHRcdHVzZXJuYW1lOiBudWxsLFxyXG5cdFx0cGFzc3dvcmQ6IG51bGwsXHJcblx0XHRjYWNoZTogbnVsbCxcclxuXHRcdHRocm93czogZmFsc2UsXHJcblx0XHR0cmFkaXRpb25hbDogZmFsc2UsXHJcblx0XHRoZWFkZXJzOiB7fSxcclxuXHRcdCovXHJcblxyXG5cdFx0YWNjZXB0czoge1xyXG5cdFx0XHRcIipcIjogYWxsVHlwZXMsXHJcblx0XHRcdHRleHQ6IFwidGV4dC9wbGFpblwiLFxyXG5cdFx0XHRodG1sOiBcInRleHQvaHRtbFwiLFxyXG5cdFx0XHR4bWw6IFwiYXBwbGljYXRpb24veG1sLCB0ZXh0L3htbFwiLFxyXG5cdFx0XHRqc29uOiBcImFwcGxpY2F0aW9uL2pzb24sIHRleHQvamF2YXNjcmlwdFwiXHJcblx0XHR9LFxyXG5cclxuXHRcdGNvbnRlbnRzOiB7XHJcblx0XHRcdHhtbDogL3htbC8sXHJcblx0XHRcdGh0bWw6IC9odG1sLyxcclxuXHRcdFx0anNvbjogL2pzb24vXHJcblx0XHR9LFxyXG5cclxuXHRcdHJlc3BvbnNlRmllbGRzOiB7XHJcblx0XHRcdHhtbDogXCJyZXNwb25zZVhNTFwiLFxyXG5cdFx0XHR0ZXh0OiBcInJlc3BvbnNlVGV4dFwiLFxyXG5cdFx0XHRqc29uOiBcInJlc3BvbnNlSlNPTlwiXHJcblx0XHR9LFxyXG5cclxuXHRcdC8vIERhdGEgY29udmVydGVyc1xyXG5cdFx0Ly8gS2V5cyBzZXBhcmF0ZSBzb3VyY2UgKG9yIGNhdGNoYWxsIFwiKlwiKSBhbmQgZGVzdGluYXRpb24gdHlwZXMgd2l0aCBhIHNpbmdsZSBzcGFjZVxyXG5cdFx0Y29udmVydGVyczoge1xyXG5cclxuXHRcdFx0Ly8gQ29udmVydCBhbnl0aGluZyB0byB0ZXh0XHJcblx0XHRcdFwiKiB0ZXh0XCI6IFN0cmluZyxcclxuXHJcblx0XHRcdC8vIFRleHQgdG8gaHRtbCAodHJ1ZSA9IG5vIHRyYW5zZm9ybWF0aW9uKVxyXG5cdFx0XHRcInRleHQgaHRtbFwiOiB0cnVlLFxyXG5cclxuXHRcdFx0Ly8gRXZhbHVhdGUgdGV4dCBhcyBhIGpzb24gZXhwcmVzc2lvblxyXG5cdFx0XHRcInRleHQganNvblwiOiBqUXVlcnkucGFyc2VKU09OLFxyXG5cclxuXHRcdFx0Ly8gUGFyc2UgdGV4dCBhcyB4bWxcclxuXHRcdFx0XCJ0ZXh0IHhtbFwiOiBqUXVlcnkucGFyc2VYTUxcclxuXHRcdH0sXHJcblxyXG5cdFx0Ly8gRm9yIG9wdGlvbnMgdGhhdCBzaG91bGRuJ3QgYmUgZGVlcCBleHRlbmRlZDpcclxuXHRcdC8vIHlvdSBjYW4gYWRkIHlvdXIgb3duIGN1c3RvbSBvcHRpb25zIGhlcmUgaWZcclxuXHRcdC8vIGFuZCB3aGVuIHlvdSBjcmVhdGUgb25lIHRoYXQgc2hvdWxkbid0IGJlXHJcblx0XHQvLyBkZWVwIGV4dGVuZGVkIChzZWUgYWpheEV4dGVuZClcclxuXHRcdGZsYXRPcHRpb25zOiB7XHJcblx0XHRcdHVybDogdHJ1ZSxcclxuXHRcdFx0Y29udGV4dDogdHJ1ZVxyXG5cdFx0fVxyXG5cdH0sXHJcblxyXG5cdC8vIENyZWF0ZXMgYSBmdWxsIGZsZWRnZWQgc2V0dGluZ3Mgb2JqZWN0IGludG8gdGFyZ2V0XHJcblx0Ly8gd2l0aCBib3RoIGFqYXhTZXR0aW5ncyBhbmQgc2V0dGluZ3MgZmllbGRzLlxyXG5cdC8vIElmIHRhcmdldCBpcyBvbWl0dGVkLCB3cml0ZXMgaW50byBhamF4U2V0dGluZ3MuXHJcblx0YWpheFNldHVwOiBmdW5jdGlvbiggdGFyZ2V0LCBzZXR0aW5ncyApIHtcclxuXHRcdHJldHVybiBzZXR0aW5ncyA/XHJcblxyXG5cdFx0XHQvLyBCdWlsZGluZyBhIHNldHRpbmdzIG9iamVjdFxyXG5cdFx0XHRhamF4RXh0ZW5kKCBhamF4RXh0ZW5kKCB0YXJnZXQsIGpRdWVyeS5hamF4U2V0dGluZ3MgKSwgc2V0dGluZ3MgKSA6XHJcblxyXG5cdFx0XHQvLyBFeHRlbmRpbmcgYWpheFNldHRpbmdzXHJcblx0XHRcdGFqYXhFeHRlbmQoIGpRdWVyeS5hamF4U2V0dGluZ3MsIHRhcmdldCApO1xyXG5cdH0sXHJcblxyXG5cdGFqYXhQcmVmaWx0ZXI6IGFkZFRvUHJlZmlsdGVyc09yVHJhbnNwb3J0cyggcHJlZmlsdGVycyApLFxyXG5cdGFqYXhUcmFuc3BvcnQ6IGFkZFRvUHJlZmlsdGVyc09yVHJhbnNwb3J0cyggdHJhbnNwb3J0cyApLFxyXG5cclxuXHQvLyBNYWluIG1ldGhvZFxyXG5cdGFqYXg6IGZ1bmN0aW9uKCB1cmwsIG9wdGlvbnMgKSB7XHJcblxyXG5cdFx0Ly8gSWYgdXJsIGlzIGFuIG9iamVjdCwgc2ltdWxhdGUgcHJlLTEuNSBzaWduYXR1cmVcclxuXHRcdGlmICggdHlwZW9mIHVybCA9PT0gXCJvYmplY3RcIiApIHtcclxuXHRcdFx0b3B0aW9ucyA9IHVybDtcclxuXHRcdFx0dXJsID0gdW5kZWZpbmVkO1xyXG5cdFx0fVxyXG5cclxuXHRcdC8vIEZvcmNlIG9wdGlvbnMgdG8gYmUgYW4gb2JqZWN0XHJcblx0XHRvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcclxuXHJcblx0XHR2YXIgLy8gQ3Jvc3MtZG9tYWluIGRldGVjdGlvbiB2YXJzXHJcblx0XHRcdHBhcnRzLFxyXG5cdFx0XHQvLyBMb29wIHZhcmlhYmxlXHJcblx0XHRcdGksXHJcblx0XHRcdC8vIFVSTCB3aXRob3V0IGFudGktY2FjaGUgcGFyYW1cclxuXHRcdFx0Y2FjaGVVUkwsXHJcblx0XHRcdC8vIFJlc3BvbnNlIGhlYWRlcnMgYXMgc3RyaW5nXHJcblx0XHRcdHJlc3BvbnNlSGVhZGVyc1N0cmluZyxcclxuXHRcdFx0Ly8gdGltZW91dCBoYW5kbGVcclxuXHRcdFx0dGltZW91dFRpbWVyLFxyXG5cclxuXHRcdFx0Ly8gVG8ga25vdyBpZiBnbG9iYWwgZXZlbnRzIGFyZSB0byBiZSBkaXNwYXRjaGVkXHJcblx0XHRcdGZpcmVHbG9iYWxzLFxyXG5cclxuXHRcdFx0dHJhbnNwb3J0LFxyXG5cdFx0XHQvLyBSZXNwb25zZSBoZWFkZXJzXHJcblx0XHRcdHJlc3BvbnNlSGVhZGVycyxcclxuXHRcdFx0Ly8gQ3JlYXRlIHRoZSBmaW5hbCBvcHRpb25zIG9iamVjdFxyXG5cdFx0XHRzID0galF1ZXJ5LmFqYXhTZXR1cCgge30sIG9wdGlvbnMgKSxcclxuXHRcdFx0Ly8gQ2FsbGJhY2tzIGNvbnRleHRcclxuXHRcdFx0Y2FsbGJhY2tDb250ZXh0ID0gcy5jb250ZXh0IHx8IHMsXHJcblx0XHRcdC8vIENvbnRleHQgZm9yIGdsb2JhbCBldmVudHMgaXMgY2FsbGJhY2tDb250ZXh0IGlmIGl0IGlzIGEgRE9NIG5vZGUgb3IgalF1ZXJ5IGNvbGxlY3Rpb25cclxuXHRcdFx0Z2xvYmFsRXZlbnRDb250ZXh0ID0gcy5jb250ZXh0ICYmICggY2FsbGJhY2tDb250ZXh0Lm5vZGVUeXBlIHx8IGNhbGxiYWNrQ29udGV4dC5qcXVlcnkgKSA/XHJcblx0XHRcdFx0alF1ZXJ5KCBjYWxsYmFja0NvbnRleHQgKSA6XHJcblx0XHRcdFx0alF1ZXJ5LmV2ZW50LFxyXG5cdFx0XHQvLyBEZWZlcnJlZHNcclxuXHRcdFx0ZGVmZXJyZWQgPSBqUXVlcnkuRGVmZXJyZWQoKSxcclxuXHRcdFx0Y29tcGxldGVEZWZlcnJlZCA9IGpRdWVyeS5DYWxsYmFja3MoXCJvbmNlIG1lbW9yeVwiKSxcclxuXHRcdFx0Ly8gU3RhdHVzLWRlcGVuZGVudCBjYWxsYmFja3NcclxuXHRcdFx0c3RhdHVzQ29kZSA9IHMuc3RhdHVzQ29kZSB8fCB7fSxcclxuXHRcdFx0Ly8gSGVhZGVycyAodGhleSBhcmUgc2VudCBhbGwgYXQgb25jZSlcclxuXHRcdFx0cmVxdWVzdEhlYWRlcnMgPSB7fSxcclxuXHRcdFx0cmVxdWVzdEhlYWRlcnNOYW1lcyA9IHt9LFxyXG5cdFx0XHQvLyBUaGUganFYSFIgc3RhdGVcclxuXHRcdFx0c3RhdGUgPSAwLFxyXG5cdFx0XHQvLyBEZWZhdWx0IGFib3J0IG1lc3NhZ2VcclxuXHRcdFx0c3RyQWJvcnQgPSBcImNhbmNlbGVkXCIsXHJcblx0XHRcdC8vIEZha2UgeGhyXHJcblx0XHRcdGpxWEhSID0ge1xyXG5cdFx0XHRcdHJlYWR5U3RhdGU6IDAsXHJcblxyXG5cdFx0XHRcdC8vIEJ1aWxkcyBoZWFkZXJzIGhhc2h0YWJsZSBpZiBuZWVkZWRcclxuXHRcdFx0XHRnZXRSZXNwb25zZUhlYWRlcjogZnVuY3Rpb24oIGtleSApIHtcclxuXHRcdFx0XHRcdHZhciBtYXRjaDtcclxuXHRcdFx0XHRcdGlmICggc3RhdGUgPT09IDIgKSB7XHJcblx0XHRcdFx0XHRcdGlmICggIXJlc3BvbnNlSGVhZGVycyApIHtcclxuXHRcdFx0XHRcdFx0XHRyZXNwb25zZUhlYWRlcnMgPSB7fTtcclxuXHRcdFx0XHRcdFx0XHR3aGlsZSAoIChtYXRjaCA9IHJoZWFkZXJzLmV4ZWMoIHJlc3BvbnNlSGVhZGVyc1N0cmluZyApKSApIHtcclxuXHRcdFx0XHRcdFx0XHRcdHJlc3BvbnNlSGVhZGVyc1sgbWF0Y2hbMV0udG9Mb3dlckNhc2UoKSBdID0gbWF0Y2hbIDIgXTtcclxuXHRcdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0bWF0Y2ggPSByZXNwb25zZUhlYWRlcnNbIGtleS50b0xvd2VyQ2FzZSgpIF07XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRyZXR1cm4gbWF0Y2ggPT0gbnVsbCA/IG51bGwgOiBtYXRjaDtcclxuXHRcdFx0XHR9LFxyXG5cclxuXHRcdFx0XHQvLyBSYXcgc3RyaW5nXHJcblx0XHRcdFx0Z2V0QWxsUmVzcG9uc2VIZWFkZXJzOiBmdW5jdGlvbigpIHtcclxuXHRcdFx0XHRcdHJldHVybiBzdGF0ZSA9PT0gMiA/IHJlc3BvbnNlSGVhZGVyc1N0cmluZyA6IG51bGw7XHJcblx0XHRcdFx0fSxcclxuXHJcblx0XHRcdFx0Ly8gQ2FjaGVzIHRoZSBoZWFkZXJcclxuXHRcdFx0XHRzZXRSZXF1ZXN0SGVhZGVyOiBmdW5jdGlvbiggbmFtZSwgdmFsdWUgKSB7XHJcblx0XHRcdFx0XHR2YXIgbG5hbWUgPSBuYW1lLnRvTG93ZXJDYXNlKCk7XHJcblx0XHRcdFx0XHRpZiAoICFzdGF0ZSApIHtcclxuXHRcdFx0XHRcdFx0bmFtZSA9IHJlcXVlc3RIZWFkZXJzTmFtZXNbIGxuYW1lIF0gPSByZXF1ZXN0SGVhZGVyc05hbWVzWyBsbmFtZSBdIHx8IG5hbWU7XHJcblx0XHRcdFx0XHRcdHJlcXVlc3RIZWFkZXJzWyBuYW1lIF0gPSB2YWx1ZTtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdHJldHVybiB0aGlzO1xyXG5cdFx0XHRcdH0sXHJcblxyXG5cdFx0XHRcdC8vIE92ZXJyaWRlcyByZXNwb25zZSBjb250ZW50LXR5cGUgaGVhZGVyXHJcblx0XHRcdFx0b3ZlcnJpZGVNaW1lVHlwZTogZnVuY3Rpb24oIHR5cGUgKSB7XHJcblx0XHRcdFx0XHRpZiAoICFzdGF0ZSApIHtcclxuXHRcdFx0XHRcdFx0cy5taW1lVHlwZSA9IHR5cGU7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRyZXR1cm4gdGhpcztcclxuXHRcdFx0XHR9LFxyXG5cclxuXHRcdFx0XHQvLyBTdGF0dXMtZGVwZW5kZW50IGNhbGxiYWNrc1xyXG5cdFx0XHRcdHN0YXR1c0NvZGU6IGZ1bmN0aW9uKCBtYXAgKSB7XHJcblx0XHRcdFx0XHR2YXIgY29kZTtcclxuXHRcdFx0XHRcdGlmICggbWFwICkge1xyXG5cdFx0XHRcdFx0XHRpZiAoIHN0YXRlIDwgMiApIHtcclxuXHRcdFx0XHRcdFx0XHRmb3IgKCBjb2RlIGluIG1hcCApIHtcclxuXHRcdFx0XHRcdFx0XHRcdC8vIExhenktYWRkIHRoZSBuZXcgY2FsbGJhY2sgaW4gYSB3YXkgdGhhdCBwcmVzZXJ2ZXMgb2xkIG9uZXNcclxuXHRcdFx0XHRcdFx0XHRcdHN0YXR1c0NvZGVbIGNvZGUgXSA9IFsgc3RhdHVzQ29kZVsgY29kZSBdLCBtYXBbIGNvZGUgXSBdO1xyXG5cdFx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRcdFx0XHQvLyBFeGVjdXRlIHRoZSBhcHByb3ByaWF0ZSBjYWxsYmFja3NcclxuXHRcdFx0XHRcdFx0XHRqcVhIUi5hbHdheXMoIG1hcFsganFYSFIuc3RhdHVzIF0gKTtcclxuXHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0cmV0dXJuIHRoaXM7XHJcblx0XHRcdFx0fSxcclxuXHJcblx0XHRcdFx0Ly8gQ2FuY2VsIHRoZSByZXF1ZXN0XHJcblx0XHRcdFx0YWJvcnQ6IGZ1bmN0aW9uKCBzdGF0dXNUZXh0ICkge1xyXG5cdFx0XHRcdFx0dmFyIGZpbmFsVGV4dCA9IHN0YXR1c1RleHQgfHwgc3RyQWJvcnQ7XHJcblx0XHRcdFx0XHRpZiAoIHRyYW5zcG9ydCApIHtcclxuXHRcdFx0XHRcdFx0dHJhbnNwb3J0LmFib3J0KCBmaW5hbFRleHQgKTtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdGRvbmUoIDAsIGZpbmFsVGV4dCApO1xyXG5cdFx0XHRcdFx0cmV0dXJuIHRoaXM7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9O1xyXG5cclxuXHRcdC8vIEF0dGFjaCBkZWZlcnJlZHNcclxuXHRcdGRlZmVycmVkLnByb21pc2UoIGpxWEhSICkuY29tcGxldGUgPSBjb21wbGV0ZURlZmVycmVkLmFkZDtcclxuXHRcdGpxWEhSLnN1Y2Nlc3MgPSBqcVhIUi5kb25lO1xyXG5cdFx0anFYSFIuZXJyb3IgPSBqcVhIUi5mYWlsO1xyXG5cclxuXHRcdC8vIFJlbW92ZSBoYXNoIGNoYXJhY3RlciAoIzc1MzE6IGFuZCBzdHJpbmcgcHJvbW90aW9uKVxyXG5cdFx0Ly8gQWRkIHByb3RvY29sIGlmIG5vdCBwcm92aWRlZCAoIzU4NjY6IElFNyBpc3N1ZSB3aXRoIHByb3RvY29sLWxlc3MgdXJscylcclxuXHRcdC8vIEhhbmRsZSBmYWxzeSB1cmwgaW4gdGhlIHNldHRpbmdzIG9iamVjdCAoIzEwMDkzOiBjb25zaXN0ZW5jeSB3aXRoIG9sZCBzaWduYXR1cmUpXHJcblx0XHQvLyBXZSBhbHNvIHVzZSB0aGUgdXJsIHBhcmFtZXRlciBpZiBhdmFpbGFibGVcclxuXHRcdHMudXJsID0gKCAoIHVybCB8fCBzLnVybCB8fCBhamF4TG9jYXRpb24gKSArIFwiXCIgKS5yZXBsYWNlKCByaGFzaCwgXCJcIiApLnJlcGxhY2UoIHJwcm90b2NvbCwgYWpheExvY1BhcnRzWyAxIF0gKyBcIi8vXCIgKTtcclxuXHJcblx0XHQvLyBBbGlhcyBtZXRob2Qgb3B0aW9uIHRvIHR5cGUgYXMgcGVyIHRpY2tldCAjMTIwMDRcclxuXHRcdHMudHlwZSA9IG9wdGlvbnMubWV0aG9kIHx8IG9wdGlvbnMudHlwZSB8fCBzLm1ldGhvZCB8fCBzLnR5cGU7XHJcblxyXG5cdFx0Ly8gRXh0cmFjdCBkYXRhVHlwZXMgbGlzdFxyXG5cdFx0cy5kYXRhVHlwZXMgPSBqUXVlcnkudHJpbSggcy5kYXRhVHlwZSB8fCBcIipcIiApLnRvTG93ZXJDYXNlKCkubWF0Y2goIHJub3R3aGl0ZSApIHx8IFsgXCJcIiBdO1xyXG5cclxuXHRcdC8vIEEgY3Jvc3MtZG9tYWluIHJlcXVlc3QgaXMgaW4gb3JkZXIgd2hlbiB3ZSBoYXZlIGEgcHJvdG9jb2w6aG9zdDpwb3J0IG1pc21hdGNoXHJcblx0XHRpZiAoIHMuY3Jvc3NEb21haW4gPT0gbnVsbCApIHtcclxuXHRcdFx0cGFydHMgPSBydXJsLmV4ZWMoIHMudXJsLnRvTG93ZXJDYXNlKCkgKTtcclxuXHRcdFx0cy5jcm9zc0RvbWFpbiA9ICEhKCBwYXJ0cyAmJlxyXG5cdFx0XHRcdCggcGFydHNbIDEgXSAhPT0gYWpheExvY1BhcnRzWyAxIF0gfHwgcGFydHNbIDIgXSAhPT0gYWpheExvY1BhcnRzWyAyIF0gfHxcclxuXHRcdFx0XHRcdCggcGFydHNbIDMgXSB8fCAoIHBhcnRzWyAxIF0gPT09IFwiaHR0cDpcIiA/IFwiODBcIiA6IFwiNDQzXCIgKSApICE9PVxyXG5cdFx0XHRcdFx0XHQoIGFqYXhMb2NQYXJ0c1sgMyBdIHx8ICggYWpheExvY1BhcnRzWyAxIF0gPT09IFwiaHR0cDpcIiA/IFwiODBcIiA6IFwiNDQzXCIgKSApIClcclxuXHRcdFx0KTtcclxuXHRcdH1cclxuXHJcblx0XHQvLyBDb252ZXJ0IGRhdGEgaWYgbm90IGFscmVhZHkgYSBzdHJpbmdcclxuXHRcdGlmICggcy5kYXRhICYmIHMucHJvY2Vzc0RhdGEgJiYgdHlwZW9mIHMuZGF0YSAhPT0gXCJzdHJpbmdcIiApIHtcclxuXHRcdFx0cy5kYXRhID0galF1ZXJ5LnBhcmFtKCBzLmRhdGEsIHMudHJhZGl0aW9uYWwgKTtcclxuXHRcdH1cclxuXHJcblx0XHQvLyBBcHBseSBwcmVmaWx0ZXJzXHJcblx0XHRpbnNwZWN0UHJlZmlsdGVyc09yVHJhbnNwb3J0cyggcHJlZmlsdGVycywgcywgb3B0aW9ucywganFYSFIgKTtcclxuXHJcblx0XHQvLyBJZiByZXF1ZXN0IHdhcyBhYm9ydGVkIGluc2lkZSBhIHByZWZpbHRlciwgc3RvcCB0aGVyZVxyXG5cdFx0aWYgKCBzdGF0ZSA9PT0gMiApIHtcclxuXHRcdFx0cmV0dXJuIGpxWEhSO1xyXG5cdFx0fVxyXG5cclxuXHRcdC8vIFdlIGNhbiBmaXJlIGdsb2JhbCBldmVudHMgYXMgb2Ygbm93IGlmIGFza2VkIHRvXHJcblx0XHQvLyBEb24ndCBmaXJlIGV2ZW50cyBpZiBqUXVlcnkuZXZlbnQgaXMgdW5kZWZpbmVkIGluIGFuIEFNRC11c2FnZSBzY2VuYXJpbyAoIzE1MTE4KVxyXG5cdFx0ZmlyZUdsb2JhbHMgPSBqUXVlcnkuZXZlbnQgJiYgcy5nbG9iYWw7XHJcblxyXG5cdFx0Ly8gV2F0Y2ggZm9yIGEgbmV3IHNldCBvZiByZXF1ZXN0c1xyXG5cdFx0aWYgKCBmaXJlR2xvYmFscyAmJiBqUXVlcnkuYWN0aXZlKysgPT09IDAgKSB7XHJcblx0XHRcdGpRdWVyeS5ldmVudC50cmlnZ2VyKFwiYWpheFN0YXJ0XCIpO1xyXG5cdFx0fVxyXG5cclxuXHRcdC8vIFVwcGVyY2FzZSB0aGUgdHlwZVxyXG5cdFx0cy50eXBlID0gcy50eXBlLnRvVXBwZXJDYXNlKCk7XHJcblxyXG5cdFx0Ly8gRGV0ZXJtaW5lIGlmIHJlcXVlc3QgaGFzIGNvbnRlbnRcclxuXHRcdHMuaGFzQ29udGVudCA9ICFybm9Db250ZW50LnRlc3QoIHMudHlwZSApO1xyXG5cclxuXHRcdC8vIFNhdmUgdGhlIFVSTCBpbiBjYXNlIHdlJ3JlIHRveWluZyB3aXRoIHRoZSBJZi1Nb2RpZmllZC1TaW5jZVxyXG5cdFx0Ly8gYW5kL29yIElmLU5vbmUtTWF0Y2ggaGVhZGVyIGxhdGVyIG9uXHJcblx0XHRjYWNoZVVSTCA9IHMudXJsO1xyXG5cclxuXHRcdC8vIE1vcmUgb3B0aW9ucyBoYW5kbGluZyBmb3IgcmVxdWVzdHMgd2l0aCBubyBjb250ZW50XHJcblx0XHRpZiAoICFzLmhhc0NvbnRlbnQgKSB7XHJcblxyXG5cdFx0XHQvLyBJZiBkYXRhIGlzIGF2YWlsYWJsZSwgYXBwZW5kIGRhdGEgdG8gdXJsXHJcblx0XHRcdGlmICggcy5kYXRhICkge1xyXG5cdFx0XHRcdGNhY2hlVVJMID0gKCBzLnVybCArPSAoIHJxdWVyeS50ZXN0KCBjYWNoZVVSTCApID8gXCImXCIgOiBcIj9cIiApICsgcy5kYXRhICk7XHJcblx0XHRcdFx0Ly8gIzk2ODI6IHJlbW92ZSBkYXRhIHNvIHRoYXQgaXQncyBub3QgdXNlZCBpbiBhbiBldmVudHVhbCByZXRyeVxyXG5cdFx0XHRcdGRlbGV0ZSBzLmRhdGE7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdC8vIEFkZCBhbnRpLWNhY2hlIGluIHVybCBpZiBuZWVkZWRcclxuXHRcdFx0aWYgKCBzLmNhY2hlID09PSBmYWxzZSApIHtcclxuXHRcdFx0XHRzLnVybCA9IHJ0cy50ZXN0KCBjYWNoZVVSTCApID9cclxuXHJcblx0XHRcdFx0XHQvLyBJZiB0aGVyZSBpcyBhbHJlYWR5IGEgJ18nIHBhcmFtZXRlciwgc2V0IGl0cyB2YWx1ZVxyXG5cdFx0XHRcdFx0Y2FjaGVVUkwucmVwbGFjZSggcnRzLCBcIiQxXz1cIiArIG5vbmNlKysgKSA6XHJcblxyXG5cdFx0XHRcdFx0Ly8gT3RoZXJ3aXNlIGFkZCBvbmUgdG8gdGhlIGVuZFxyXG5cdFx0XHRcdFx0Y2FjaGVVUkwgKyAoIHJxdWVyeS50ZXN0KCBjYWNoZVVSTCApID8gXCImXCIgOiBcIj9cIiApICsgXCJfPVwiICsgbm9uY2UrKztcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cclxuXHRcdC8vIFNldCB0aGUgSWYtTW9kaWZpZWQtU2luY2UgYW5kL29yIElmLU5vbmUtTWF0Y2ggaGVhZGVyLCBpZiBpbiBpZk1vZGlmaWVkIG1vZGUuXHJcblx0XHRpZiAoIHMuaWZNb2RpZmllZCApIHtcclxuXHRcdFx0aWYgKCBqUXVlcnkubGFzdE1vZGlmaWVkWyBjYWNoZVVSTCBdICkge1xyXG5cdFx0XHRcdGpxWEhSLnNldFJlcXVlc3RIZWFkZXIoIFwiSWYtTW9kaWZpZWQtU2luY2VcIiwgalF1ZXJ5Lmxhc3RNb2RpZmllZFsgY2FjaGVVUkwgXSApO1xyXG5cdFx0XHR9XHJcblx0XHRcdGlmICggalF1ZXJ5LmV0YWdbIGNhY2hlVVJMIF0gKSB7XHJcblx0XHRcdFx0anFYSFIuc2V0UmVxdWVzdEhlYWRlciggXCJJZi1Ob25lLU1hdGNoXCIsIGpRdWVyeS5ldGFnWyBjYWNoZVVSTCBdICk7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHJcblx0XHQvLyBTZXQgdGhlIGNvcnJlY3QgaGVhZGVyLCBpZiBkYXRhIGlzIGJlaW5nIHNlbnRcclxuXHRcdGlmICggcy5kYXRhICYmIHMuaGFzQ29udGVudCAmJiBzLmNvbnRlbnRUeXBlICE9PSBmYWxzZSB8fCBvcHRpb25zLmNvbnRlbnRUeXBlICkge1xyXG5cdFx0XHRqcVhIUi5zZXRSZXF1ZXN0SGVhZGVyKCBcIkNvbnRlbnQtVHlwZVwiLCBzLmNvbnRlbnRUeXBlICk7XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gU2V0IHRoZSBBY2NlcHRzIGhlYWRlciBmb3IgdGhlIHNlcnZlciwgZGVwZW5kaW5nIG9uIHRoZSBkYXRhVHlwZVxyXG5cdFx0anFYSFIuc2V0UmVxdWVzdEhlYWRlcihcclxuXHRcdFx0XCJBY2NlcHRcIixcclxuXHRcdFx0cy5kYXRhVHlwZXNbIDAgXSAmJiBzLmFjY2VwdHNbIHMuZGF0YVR5cGVzWzBdIF0gP1xyXG5cdFx0XHRcdHMuYWNjZXB0c1sgcy5kYXRhVHlwZXNbMF0gXSArICggcy5kYXRhVHlwZXNbIDAgXSAhPT0gXCIqXCIgPyBcIiwgXCIgKyBhbGxUeXBlcyArIFwiOyBxPTAuMDFcIiA6IFwiXCIgKSA6XHJcblx0XHRcdFx0cy5hY2NlcHRzWyBcIipcIiBdXHJcblx0XHQpO1xyXG5cclxuXHRcdC8vIENoZWNrIGZvciBoZWFkZXJzIG9wdGlvblxyXG5cdFx0Zm9yICggaSBpbiBzLmhlYWRlcnMgKSB7XHJcblx0XHRcdGpxWEhSLnNldFJlcXVlc3RIZWFkZXIoIGksIHMuaGVhZGVyc1sgaSBdICk7XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gQWxsb3cgY3VzdG9tIGhlYWRlcnMvbWltZXR5cGVzIGFuZCBlYXJseSBhYm9ydFxyXG5cdFx0aWYgKCBzLmJlZm9yZVNlbmQgJiYgKCBzLmJlZm9yZVNlbmQuY2FsbCggY2FsbGJhY2tDb250ZXh0LCBqcVhIUiwgcyApID09PSBmYWxzZSB8fCBzdGF0ZSA9PT0gMiApICkge1xyXG5cdFx0XHQvLyBBYm9ydCBpZiBub3QgZG9uZSBhbHJlYWR5IGFuZCByZXR1cm5cclxuXHRcdFx0cmV0dXJuIGpxWEhSLmFib3J0KCk7XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gYWJvcnRpbmcgaXMgbm8gbG9uZ2VyIGEgY2FuY2VsbGF0aW9uXHJcblx0XHRzdHJBYm9ydCA9IFwiYWJvcnRcIjtcclxuXHJcblx0XHQvLyBJbnN0YWxsIGNhbGxiYWNrcyBvbiBkZWZlcnJlZHNcclxuXHRcdGZvciAoIGkgaW4geyBzdWNjZXNzOiAxLCBlcnJvcjogMSwgY29tcGxldGU6IDEgfSApIHtcclxuXHRcdFx0anFYSFJbIGkgXSggc1sgaSBdICk7XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gR2V0IHRyYW5zcG9ydFxyXG5cdFx0dHJhbnNwb3J0ID0gaW5zcGVjdFByZWZpbHRlcnNPclRyYW5zcG9ydHMoIHRyYW5zcG9ydHMsIHMsIG9wdGlvbnMsIGpxWEhSICk7XHJcblxyXG5cdFx0Ly8gSWYgbm8gdHJhbnNwb3J0LCB3ZSBhdXRvLWFib3J0XHJcblx0XHRpZiAoICF0cmFuc3BvcnQgKSB7XHJcblx0XHRcdGRvbmUoIC0xLCBcIk5vIFRyYW5zcG9ydFwiICk7XHJcblx0XHR9IGVsc2Uge1xyXG5cdFx0XHRqcVhIUi5yZWFkeVN0YXRlID0gMTtcclxuXHJcblx0XHRcdC8vIFNlbmQgZ2xvYmFsIGV2ZW50XHJcblx0XHRcdGlmICggZmlyZUdsb2JhbHMgKSB7XHJcblx0XHRcdFx0Z2xvYmFsRXZlbnRDb250ZXh0LnRyaWdnZXIoIFwiYWpheFNlbmRcIiwgWyBqcVhIUiwgcyBdICk7XHJcblx0XHRcdH1cclxuXHRcdFx0Ly8gVGltZW91dFxyXG5cdFx0XHRpZiAoIHMuYXN5bmMgJiYgcy50aW1lb3V0ID4gMCApIHtcclxuXHRcdFx0XHR0aW1lb3V0VGltZXIgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRcdFx0anFYSFIuYWJvcnQoXCJ0aW1lb3V0XCIpO1xyXG5cdFx0XHRcdH0sIHMudGltZW91dCApO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHR0cnkge1xyXG5cdFx0XHRcdHN0YXRlID0gMTtcclxuXHRcdFx0XHR0cmFuc3BvcnQuc2VuZCggcmVxdWVzdEhlYWRlcnMsIGRvbmUgKTtcclxuXHRcdFx0fSBjYXRjaCAoIGUgKSB7XHJcblx0XHRcdFx0Ly8gUHJvcGFnYXRlIGV4Y2VwdGlvbiBhcyBlcnJvciBpZiBub3QgZG9uZVxyXG5cdFx0XHRcdGlmICggc3RhdGUgPCAyICkge1xyXG5cdFx0XHRcdFx0ZG9uZSggLTEsIGUgKTtcclxuXHRcdFx0XHQvLyBTaW1wbHkgcmV0aHJvdyBvdGhlcndpc2VcclxuXHRcdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdFx0dGhyb3cgZTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHJcblx0XHQvLyBDYWxsYmFjayBmb3Igd2hlbiBldmVyeXRoaW5nIGlzIGRvbmVcclxuXHRcdGZ1bmN0aW9uIGRvbmUoIHN0YXR1cywgbmF0aXZlU3RhdHVzVGV4dCwgcmVzcG9uc2VzLCBoZWFkZXJzICkge1xyXG5cdFx0XHR2YXIgaXNTdWNjZXNzLCBzdWNjZXNzLCBlcnJvciwgcmVzcG9uc2UsIG1vZGlmaWVkLFxyXG5cdFx0XHRcdHN0YXR1c1RleHQgPSBuYXRpdmVTdGF0dXNUZXh0O1xyXG5cclxuXHRcdFx0Ly8gQ2FsbGVkIG9uY2VcclxuXHRcdFx0aWYgKCBzdGF0ZSA9PT0gMiApIHtcclxuXHRcdFx0XHRyZXR1cm47XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdC8vIFN0YXRlIGlzIFwiZG9uZVwiIG5vd1xyXG5cdFx0XHRzdGF0ZSA9IDI7XHJcblxyXG5cdFx0XHQvLyBDbGVhciB0aW1lb3V0IGlmIGl0IGV4aXN0c1xyXG5cdFx0XHRpZiAoIHRpbWVvdXRUaW1lciApIHtcclxuXHRcdFx0XHRjbGVhclRpbWVvdXQoIHRpbWVvdXRUaW1lciApO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHQvLyBEZXJlZmVyZW5jZSB0cmFuc3BvcnQgZm9yIGVhcmx5IGdhcmJhZ2UgY29sbGVjdGlvblxyXG5cdFx0XHQvLyAobm8gbWF0dGVyIGhvdyBsb25nIHRoZSBqcVhIUiBvYmplY3Qgd2lsbCBiZSB1c2VkKVxyXG5cdFx0XHR0cmFuc3BvcnQgPSB1bmRlZmluZWQ7XHJcblxyXG5cdFx0XHQvLyBDYWNoZSByZXNwb25zZSBoZWFkZXJzXHJcblx0XHRcdHJlc3BvbnNlSGVhZGVyc1N0cmluZyA9IGhlYWRlcnMgfHwgXCJcIjtcclxuXHJcblx0XHRcdC8vIFNldCByZWFkeVN0YXRlXHJcblx0XHRcdGpxWEhSLnJlYWR5U3RhdGUgPSBzdGF0dXMgPiAwID8gNCA6IDA7XHJcblxyXG5cdFx0XHQvLyBEZXRlcm1pbmUgaWYgc3VjY2Vzc2Z1bFxyXG5cdFx0XHRpc1N1Y2Nlc3MgPSBzdGF0dXMgPj0gMjAwICYmIHN0YXR1cyA8IDMwMCB8fCBzdGF0dXMgPT09IDMwNDtcclxuXHJcblx0XHRcdC8vIEdldCByZXNwb25zZSBkYXRhXHJcblx0XHRcdGlmICggcmVzcG9uc2VzICkge1xyXG5cdFx0XHRcdHJlc3BvbnNlID0gYWpheEhhbmRsZVJlc3BvbnNlcyggcywganFYSFIsIHJlc3BvbnNlcyApO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHQvLyBDb252ZXJ0IG5vIG1hdHRlciB3aGF0ICh0aGF0IHdheSByZXNwb25zZVhYWCBmaWVsZHMgYXJlIGFsd2F5cyBzZXQpXHJcblx0XHRcdHJlc3BvbnNlID0gYWpheENvbnZlcnQoIHMsIHJlc3BvbnNlLCBqcVhIUiwgaXNTdWNjZXNzICk7XHJcblxyXG5cdFx0XHQvLyBJZiBzdWNjZXNzZnVsLCBoYW5kbGUgdHlwZSBjaGFpbmluZ1xyXG5cdFx0XHRpZiAoIGlzU3VjY2VzcyApIHtcclxuXHJcblx0XHRcdFx0Ly8gU2V0IHRoZSBJZi1Nb2RpZmllZC1TaW5jZSBhbmQvb3IgSWYtTm9uZS1NYXRjaCBoZWFkZXIsIGlmIGluIGlmTW9kaWZpZWQgbW9kZS5cclxuXHRcdFx0XHRpZiAoIHMuaWZNb2RpZmllZCApIHtcclxuXHRcdFx0XHRcdG1vZGlmaWVkID0ganFYSFIuZ2V0UmVzcG9uc2VIZWFkZXIoXCJMYXN0LU1vZGlmaWVkXCIpO1xyXG5cdFx0XHRcdFx0aWYgKCBtb2RpZmllZCApIHtcclxuXHRcdFx0XHRcdFx0alF1ZXJ5Lmxhc3RNb2RpZmllZFsgY2FjaGVVUkwgXSA9IG1vZGlmaWVkO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0bW9kaWZpZWQgPSBqcVhIUi5nZXRSZXNwb25zZUhlYWRlcihcImV0YWdcIik7XHJcblx0XHRcdFx0XHRpZiAoIG1vZGlmaWVkICkge1xyXG5cdFx0XHRcdFx0XHRqUXVlcnkuZXRhZ1sgY2FjaGVVUkwgXSA9IG1vZGlmaWVkO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0Ly8gaWYgbm8gY29udGVudFxyXG5cdFx0XHRcdGlmICggc3RhdHVzID09PSAyMDQgfHwgcy50eXBlID09PSBcIkhFQURcIiApIHtcclxuXHRcdFx0XHRcdHN0YXR1c1RleHQgPSBcIm5vY29udGVudFwiO1xyXG5cclxuXHRcdFx0XHQvLyBpZiBub3QgbW9kaWZpZWRcclxuXHRcdFx0XHR9IGVsc2UgaWYgKCBzdGF0dXMgPT09IDMwNCApIHtcclxuXHRcdFx0XHRcdHN0YXR1c1RleHQgPSBcIm5vdG1vZGlmaWVkXCI7XHJcblxyXG5cdFx0XHRcdC8vIElmIHdlIGhhdmUgZGF0YSwgbGV0J3MgY29udmVydCBpdFxyXG5cdFx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0XHRzdGF0dXNUZXh0ID0gcmVzcG9uc2Uuc3RhdGU7XHJcblx0XHRcdFx0XHRzdWNjZXNzID0gcmVzcG9uc2UuZGF0YTtcclxuXHRcdFx0XHRcdGVycm9yID0gcmVzcG9uc2UuZXJyb3I7XHJcblx0XHRcdFx0XHRpc1N1Y2Nlc3MgPSAhZXJyb3I7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdC8vIFdlIGV4dHJhY3QgZXJyb3IgZnJvbSBzdGF0dXNUZXh0XHJcblx0XHRcdFx0Ly8gdGhlbiBub3JtYWxpemUgc3RhdHVzVGV4dCBhbmQgc3RhdHVzIGZvciBub24tYWJvcnRzXHJcblx0XHRcdFx0ZXJyb3IgPSBzdGF0dXNUZXh0O1xyXG5cdFx0XHRcdGlmICggc3RhdHVzIHx8ICFzdGF0dXNUZXh0ICkge1xyXG5cdFx0XHRcdFx0c3RhdHVzVGV4dCA9IFwiZXJyb3JcIjtcclxuXHRcdFx0XHRcdGlmICggc3RhdHVzIDwgMCApIHtcclxuXHRcdFx0XHRcdFx0c3RhdHVzID0gMDtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdC8vIFNldCBkYXRhIGZvciB0aGUgZmFrZSB4aHIgb2JqZWN0XHJcblx0XHRcdGpxWEhSLnN0YXR1cyA9IHN0YXR1cztcclxuXHRcdFx0anFYSFIuc3RhdHVzVGV4dCA9ICggbmF0aXZlU3RhdHVzVGV4dCB8fCBzdGF0dXNUZXh0ICkgKyBcIlwiO1xyXG5cclxuXHRcdFx0Ly8gU3VjY2Vzcy9FcnJvclxyXG5cdFx0XHRpZiAoIGlzU3VjY2VzcyApIHtcclxuXHRcdFx0XHRkZWZlcnJlZC5yZXNvbHZlV2l0aCggY2FsbGJhY2tDb250ZXh0LCBbIHN1Y2Nlc3MsIHN0YXR1c1RleHQsIGpxWEhSIF0gKTtcclxuXHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRkZWZlcnJlZC5yZWplY3RXaXRoKCBjYWxsYmFja0NvbnRleHQsIFsganFYSFIsIHN0YXR1c1RleHQsIGVycm9yIF0gKTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0Ly8gU3RhdHVzLWRlcGVuZGVudCBjYWxsYmFja3NcclxuXHRcdFx0anFYSFIuc3RhdHVzQ29kZSggc3RhdHVzQ29kZSApO1xyXG5cdFx0XHRzdGF0dXNDb2RlID0gdW5kZWZpbmVkO1xyXG5cclxuXHRcdFx0aWYgKCBmaXJlR2xvYmFscyApIHtcclxuXHRcdFx0XHRnbG9iYWxFdmVudENvbnRleHQudHJpZ2dlciggaXNTdWNjZXNzID8gXCJhamF4U3VjY2Vzc1wiIDogXCJhamF4RXJyb3JcIixcclxuXHRcdFx0XHRcdFsganFYSFIsIHMsIGlzU3VjY2VzcyA/IHN1Y2Nlc3MgOiBlcnJvciBdICk7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdC8vIENvbXBsZXRlXHJcblx0XHRcdGNvbXBsZXRlRGVmZXJyZWQuZmlyZVdpdGgoIGNhbGxiYWNrQ29udGV4dCwgWyBqcVhIUiwgc3RhdHVzVGV4dCBdICk7XHJcblxyXG5cdFx0XHRpZiAoIGZpcmVHbG9iYWxzICkge1xyXG5cdFx0XHRcdGdsb2JhbEV2ZW50Q29udGV4dC50cmlnZ2VyKCBcImFqYXhDb21wbGV0ZVwiLCBbIGpxWEhSLCBzIF0gKTtcclxuXHRcdFx0XHQvLyBIYW5kbGUgdGhlIGdsb2JhbCBBSkFYIGNvdW50ZXJcclxuXHRcdFx0XHRpZiAoICEoIC0talF1ZXJ5LmFjdGl2ZSApICkge1xyXG5cdFx0XHRcdFx0alF1ZXJ5LmV2ZW50LnRyaWdnZXIoXCJhamF4U3RvcFwiKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHJcblx0XHRyZXR1cm4ganFYSFI7XHJcblx0fSxcclxuXHJcblx0Z2V0SlNPTjogZnVuY3Rpb24oIHVybCwgZGF0YSwgY2FsbGJhY2sgKSB7XHJcblx0XHRyZXR1cm4galF1ZXJ5LmdldCggdXJsLCBkYXRhLCBjYWxsYmFjaywgXCJqc29uXCIgKTtcclxuXHR9LFxyXG5cclxuXHRnZXRTY3JpcHQ6IGZ1bmN0aW9uKCB1cmwsIGNhbGxiYWNrICkge1xyXG5cdFx0cmV0dXJuIGpRdWVyeS5nZXQoIHVybCwgdW5kZWZpbmVkLCBjYWxsYmFjaywgXCJzY3JpcHRcIiApO1xyXG5cdH1cclxufSk7XHJcblxyXG5qUXVlcnkuZWFjaCggWyBcImdldFwiLCBcInBvc3RcIiBdLCBmdW5jdGlvbiggaSwgbWV0aG9kICkge1xyXG5cdGpRdWVyeVsgbWV0aG9kIF0gPSBmdW5jdGlvbiggdXJsLCBkYXRhLCBjYWxsYmFjaywgdHlwZSApIHtcclxuXHRcdC8vIHNoaWZ0IGFyZ3VtZW50cyBpZiBkYXRhIGFyZ3VtZW50IHdhcyBvbWl0dGVkXHJcblx0XHRpZiAoIGpRdWVyeS5pc0Z1bmN0aW9uKCBkYXRhICkgKSB7XHJcblx0XHRcdHR5cGUgPSB0eXBlIHx8IGNhbGxiYWNrO1xyXG5cdFx0XHRjYWxsYmFjayA9IGRhdGE7XHJcblx0XHRcdGRhdGEgPSB1bmRlZmluZWQ7XHJcblx0XHR9XHJcblxyXG5cdFx0cmV0dXJuIGpRdWVyeS5hamF4KHtcclxuXHRcdFx0dXJsOiB1cmwsXHJcblx0XHRcdHR5cGU6IG1ldGhvZCxcclxuXHRcdFx0ZGF0YVR5cGU6IHR5cGUsXHJcblx0XHRcdGRhdGE6IGRhdGEsXHJcblx0XHRcdHN1Y2Nlc3M6IGNhbGxiYWNrXHJcblx0XHR9KTtcclxuXHR9O1xyXG59KTtcclxuXHJcblxyXG5qUXVlcnkuX2V2YWxVcmwgPSBmdW5jdGlvbiggdXJsICkge1xyXG5cdHJldHVybiBqUXVlcnkuYWpheCh7XHJcblx0XHR1cmw6IHVybCxcclxuXHRcdHR5cGU6IFwiR0VUXCIsXHJcblx0XHRkYXRhVHlwZTogXCJzY3JpcHRcIixcclxuXHRcdGFzeW5jOiBmYWxzZSxcclxuXHRcdGdsb2JhbDogZmFsc2UsXHJcblx0XHRcInRocm93c1wiOiB0cnVlXHJcblx0fSk7XHJcbn07XHJcblxyXG5cclxualF1ZXJ5LmZuLmV4dGVuZCh7XHJcblx0d3JhcEFsbDogZnVuY3Rpb24oIGh0bWwgKSB7XHJcblx0XHRpZiAoIGpRdWVyeS5pc0Z1bmN0aW9uKCBodG1sICkgKSB7XHJcblx0XHRcdHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oaSkge1xyXG5cdFx0XHRcdGpRdWVyeSh0aGlzKS53cmFwQWxsKCBodG1sLmNhbGwodGhpcywgaSkgKTtcclxuXHRcdFx0fSk7XHJcblx0XHR9XHJcblxyXG5cdFx0aWYgKCB0aGlzWzBdICkge1xyXG5cdFx0XHQvLyBUaGUgZWxlbWVudHMgdG8gd3JhcCB0aGUgdGFyZ2V0IGFyb3VuZFxyXG5cdFx0XHR2YXIgd3JhcCA9IGpRdWVyeSggaHRtbCwgdGhpc1swXS5vd25lckRvY3VtZW50ICkuZXEoMCkuY2xvbmUodHJ1ZSk7XHJcblxyXG5cdFx0XHRpZiAoIHRoaXNbMF0ucGFyZW50Tm9kZSApIHtcclxuXHRcdFx0XHR3cmFwLmluc2VydEJlZm9yZSggdGhpc1swXSApO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHR3cmFwLm1hcChmdW5jdGlvbigpIHtcclxuXHRcdFx0XHR2YXIgZWxlbSA9IHRoaXM7XHJcblxyXG5cdFx0XHRcdHdoaWxlICggZWxlbS5maXJzdENoaWxkICYmIGVsZW0uZmlyc3RDaGlsZC5ub2RlVHlwZSA9PT0gMSApIHtcclxuXHRcdFx0XHRcdGVsZW0gPSBlbGVtLmZpcnN0Q2hpbGQ7XHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRyZXR1cm4gZWxlbTtcclxuXHRcdFx0fSkuYXBwZW5kKCB0aGlzICk7XHJcblx0XHR9XHJcblxyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblx0fSxcclxuXHJcblx0d3JhcElubmVyOiBmdW5jdGlvbiggaHRtbCApIHtcclxuXHRcdGlmICggalF1ZXJ5LmlzRnVuY3Rpb24oIGh0bWwgKSApIHtcclxuXHRcdFx0cmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbihpKSB7XHJcblx0XHRcdFx0alF1ZXJ5KHRoaXMpLndyYXBJbm5lciggaHRtbC5jYWxsKHRoaXMsIGkpICk7XHJcblx0XHRcdH0pO1xyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oKSB7XHJcblx0XHRcdHZhciBzZWxmID0galF1ZXJ5KCB0aGlzICksXHJcblx0XHRcdFx0Y29udGVudHMgPSBzZWxmLmNvbnRlbnRzKCk7XHJcblxyXG5cdFx0XHRpZiAoIGNvbnRlbnRzLmxlbmd0aCApIHtcclxuXHRcdFx0XHRjb250ZW50cy53cmFwQWxsKCBodG1sICk7XHJcblxyXG5cdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdHNlbGYuYXBwZW5kKCBodG1sICk7XHJcblx0XHRcdH1cclxuXHRcdH0pO1xyXG5cdH0sXHJcblxyXG5cdHdyYXA6IGZ1bmN0aW9uKCBodG1sICkge1xyXG5cdFx0dmFyIGlzRnVuY3Rpb24gPSBqUXVlcnkuaXNGdW5jdGlvbiggaHRtbCApO1xyXG5cclxuXHRcdHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oaSkge1xyXG5cdFx0XHRqUXVlcnkoIHRoaXMgKS53cmFwQWxsKCBpc0Z1bmN0aW9uID8gaHRtbC5jYWxsKHRoaXMsIGkpIDogaHRtbCApO1xyXG5cdFx0fSk7XHJcblx0fSxcclxuXHJcblx0dW53cmFwOiBmdW5jdGlvbigpIHtcclxuXHRcdHJldHVybiB0aGlzLnBhcmVudCgpLmVhY2goZnVuY3Rpb24oKSB7XHJcblx0XHRcdGlmICggIWpRdWVyeS5ub2RlTmFtZSggdGhpcywgXCJib2R5XCIgKSApIHtcclxuXHRcdFx0XHRqUXVlcnkoIHRoaXMgKS5yZXBsYWNlV2l0aCggdGhpcy5jaGlsZE5vZGVzICk7XHJcblx0XHRcdH1cclxuXHRcdH0pLmVuZCgpO1xyXG5cdH1cclxufSk7XHJcblxyXG5cclxualF1ZXJ5LmV4cHIuZmlsdGVycy5oaWRkZW4gPSBmdW5jdGlvbiggZWxlbSApIHtcclxuXHQvLyBTdXBwb3J0OiBPcGVyYSA8PSAxMi4xMlxyXG5cdC8vIE9wZXJhIHJlcG9ydHMgb2Zmc2V0V2lkdGhzIGFuZCBvZmZzZXRIZWlnaHRzIGxlc3MgdGhhbiB6ZXJvIG9uIHNvbWUgZWxlbWVudHNcclxuXHRyZXR1cm4gZWxlbS5vZmZzZXRXaWR0aCA8PSAwICYmIGVsZW0ub2Zmc2V0SGVpZ2h0IDw9IDAgfHxcclxuXHRcdCghc3VwcG9ydC5yZWxpYWJsZUhpZGRlbk9mZnNldHMoKSAmJlxyXG5cdFx0XHQoKGVsZW0uc3R5bGUgJiYgZWxlbS5zdHlsZS5kaXNwbGF5KSB8fCBqUXVlcnkuY3NzKCBlbGVtLCBcImRpc3BsYXlcIiApKSA9PT0gXCJub25lXCIpO1xyXG59O1xyXG5cclxualF1ZXJ5LmV4cHIuZmlsdGVycy52aXNpYmxlID0gZnVuY3Rpb24oIGVsZW0gKSB7XHJcblx0cmV0dXJuICFqUXVlcnkuZXhwci5maWx0ZXJzLmhpZGRlbiggZWxlbSApO1xyXG59O1xyXG5cclxuXHJcblxyXG5cclxudmFyIHIyMCA9IC8lMjAvZyxcclxuXHRyYnJhY2tldCA9IC9cXFtcXF0kLyxcclxuXHRyQ1JMRiA9IC9cXHI/XFxuL2csXHJcblx0cnN1Ym1pdHRlclR5cGVzID0gL14oPzpzdWJtaXR8YnV0dG9ufGltYWdlfHJlc2V0fGZpbGUpJC9pLFxyXG5cdHJzdWJtaXR0YWJsZSA9IC9eKD86aW5wdXR8c2VsZWN0fHRleHRhcmVhfGtleWdlbikvaTtcclxuXHJcbmZ1bmN0aW9uIGJ1aWxkUGFyYW1zKCBwcmVmaXgsIG9iaiwgdHJhZGl0aW9uYWwsIGFkZCApIHtcclxuXHR2YXIgbmFtZTtcclxuXHJcblx0aWYgKCBqUXVlcnkuaXNBcnJheSggb2JqICkgKSB7XHJcblx0XHQvLyBTZXJpYWxpemUgYXJyYXkgaXRlbS5cclxuXHRcdGpRdWVyeS5lYWNoKCBvYmosIGZ1bmN0aW9uKCBpLCB2ICkge1xyXG5cdFx0XHRpZiAoIHRyYWRpdGlvbmFsIHx8IHJicmFja2V0LnRlc3QoIHByZWZpeCApICkge1xyXG5cdFx0XHRcdC8vIFRyZWF0IGVhY2ggYXJyYXkgaXRlbSBhcyBhIHNjYWxhci5cclxuXHRcdFx0XHRhZGQoIHByZWZpeCwgdiApO1xyXG5cclxuXHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHQvLyBJdGVtIGlzIG5vbi1zY2FsYXIgKGFycmF5IG9yIG9iamVjdCksIGVuY29kZSBpdHMgbnVtZXJpYyBpbmRleC5cclxuXHRcdFx0XHRidWlsZFBhcmFtcyggcHJlZml4ICsgXCJbXCIgKyAoIHR5cGVvZiB2ID09PSBcIm9iamVjdFwiID8gaSA6IFwiXCIgKSArIFwiXVwiLCB2LCB0cmFkaXRpb25hbCwgYWRkICk7XHJcblx0XHRcdH1cclxuXHRcdH0pO1xyXG5cclxuXHR9IGVsc2UgaWYgKCAhdHJhZGl0aW9uYWwgJiYgalF1ZXJ5LnR5cGUoIG9iaiApID09PSBcIm9iamVjdFwiICkge1xyXG5cdFx0Ly8gU2VyaWFsaXplIG9iamVjdCBpdGVtLlxyXG5cdFx0Zm9yICggbmFtZSBpbiBvYmogKSB7XHJcblx0XHRcdGJ1aWxkUGFyYW1zKCBwcmVmaXggKyBcIltcIiArIG5hbWUgKyBcIl1cIiwgb2JqWyBuYW1lIF0sIHRyYWRpdGlvbmFsLCBhZGQgKTtcclxuXHRcdH1cclxuXHJcblx0fSBlbHNlIHtcclxuXHRcdC8vIFNlcmlhbGl6ZSBzY2FsYXIgaXRlbS5cclxuXHRcdGFkZCggcHJlZml4LCBvYmogKTtcclxuXHR9XHJcbn1cclxuXHJcbi8vIFNlcmlhbGl6ZSBhbiBhcnJheSBvZiBmb3JtIGVsZW1lbnRzIG9yIGEgc2V0IG9mXHJcbi8vIGtleS92YWx1ZXMgaW50byBhIHF1ZXJ5IHN0cmluZ1xyXG5qUXVlcnkucGFyYW0gPSBmdW5jdGlvbiggYSwgdHJhZGl0aW9uYWwgKSB7XHJcblx0dmFyIHByZWZpeCxcclxuXHRcdHMgPSBbXSxcclxuXHRcdGFkZCA9IGZ1bmN0aW9uKCBrZXksIHZhbHVlICkge1xyXG5cdFx0XHQvLyBJZiB2YWx1ZSBpcyBhIGZ1bmN0aW9uLCBpbnZva2UgaXQgYW5kIHJldHVybiBpdHMgdmFsdWVcclxuXHRcdFx0dmFsdWUgPSBqUXVlcnkuaXNGdW5jdGlvbiggdmFsdWUgKSA/IHZhbHVlKCkgOiAoIHZhbHVlID09IG51bGwgPyBcIlwiIDogdmFsdWUgKTtcclxuXHRcdFx0c1sgcy5sZW5ndGggXSA9IGVuY29kZVVSSUNvbXBvbmVudCgga2V5ICkgKyBcIj1cIiArIGVuY29kZVVSSUNvbXBvbmVudCggdmFsdWUgKTtcclxuXHRcdH07XHJcblxyXG5cdC8vIFNldCB0cmFkaXRpb25hbCB0byB0cnVlIGZvciBqUXVlcnkgPD0gMS4zLjIgYmVoYXZpb3IuXHJcblx0aWYgKCB0cmFkaXRpb25hbCA9PT0gdW5kZWZpbmVkICkge1xyXG5cdFx0dHJhZGl0aW9uYWwgPSBqUXVlcnkuYWpheFNldHRpbmdzICYmIGpRdWVyeS5hamF4U2V0dGluZ3MudHJhZGl0aW9uYWw7XHJcblx0fVxyXG5cclxuXHQvLyBJZiBhbiBhcnJheSB3YXMgcGFzc2VkIGluLCBhc3N1bWUgdGhhdCBpdCBpcyBhbiBhcnJheSBvZiBmb3JtIGVsZW1lbnRzLlxyXG5cdGlmICggalF1ZXJ5LmlzQXJyYXkoIGEgKSB8fCAoIGEuanF1ZXJ5ICYmICFqUXVlcnkuaXNQbGFpbk9iamVjdCggYSApICkgKSB7XHJcblx0XHQvLyBTZXJpYWxpemUgdGhlIGZvcm0gZWxlbWVudHNcclxuXHRcdGpRdWVyeS5lYWNoKCBhLCBmdW5jdGlvbigpIHtcclxuXHRcdFx0YWRkKCB0aGlzLm5hbWUsIHRoaXMudmFsdWUgKTtcclxuXHRcdH0pO1xyXG5cclxuXHR9IGVsc2Uge1xyXG5cdFx0Ly8gSWYgdHJhZGl0aW9uYWwsIGVuY29kZSB0aGUgXCJvbGRcIiB3YXkgKHRoZSB3YXkgMS4zLjIgb3Igb2xkZXJcclxuXHRcdC8vIGRpZCBpdCksIG90aGVyd2lzZSBlbmNvZGUgcGFyYW1zIHJlY3Vyc2l2ZWx5LlxyXG5cdFx0Zm9yICggcHJlZml4IGluIGEgKSB7XHJcblx0XHRcdGJ1aWxkUGFyYW1zKCBwcmVmaXgsIGFbIHByZWZpeCBdLCB0cmFkaXRpb25hbCwgYWRkICk7XHJcblx0XHR9XHJcblx0fVxyXG5cclxuXHQvLyBSZXR1cm4gdGhlIHJlc3VsdGluZyBzZXJpYWxpemF0aW9uXHJcblx0cmV0dXJuIHMuam9pbiggXCImXCIgKS5yZXBsYWNlKCByMjAsIFwiK1wiICk7XHJcbn07XHJcblxyXG5qUXVlcnkuZm4uZXh0ZW5kKHtcclxuXHRzZXJpYWxpemU6IGZ1bmN0aW9uKCkge1xyXG5cdFx0cmV0dXJuIGpRdWVyeS5wYXJhbSggdGhpcy5zZXJpYWxpemVBcnJheSgpICk7XHJcblx0fSxcclxuXHRzZXJpYWxpemVBcnJheTogZnVuY3Rpb24oKSB7XHJcblx0XHRyZXR1cm4gdGhpcy5tYXAoZnVuY3Rpb24oKSB7XHJcblx0XHRcdC8vIENhbiBhZGQgcHJvcEhvb2sgZm9yIFwiZWxlbWVudHNcIiB0byBmaWx0ZXIgb3IgYWRkIGZvcm0gZWxlbWVudHNcclxuXHRcdFx0dmFyIGVsZW1lbnRzID0galF1ZXJ5LnByb3AoIHRoaXMsIFwiZWxlbWVudHNcIiApO1xyXG5cdFx0XHRyZXR1cm4gZWxlbWVudHMgPyBqUXVlcnkubWFrZUFycmF5KCBlbGVtZW50cyApIDogdGhpcztcclxuXHRcdH0pXHJcblx0XHQuZmlsdGVyKGZ1bmN0aW9uKCkge1xyXG5cdFx0XHR2YXIgdHlwZSA9IHRoaXMudHlwZTtcclxuXHRcdFx0Ly8gVXNlIC5pcyhcIjpkaXNhYmxlZFwiKSBzbyB0aGF0IGZpZWxkc2V0W2Rpc2FibGVkXSB3b3Jrc1xyXG5cdFx0XHRyZXR1cm4gdGhpcy5uYW1lICYmICFqUXVlcnkoIHRoaXMgKS5pcyggXCI6ZGlzYWJsZWRcIiApICYmXHJcblx0XHRcdFx0cnN1Ym1pdHRhYmxlLnRlc3QoIHRoaXMubm9kZU5hbWUgKSAmJiAhcnN1Ym1pdHRlclR5cGVzLnRlc3QoIHR5cGUgKSAmJlxyXG5cdFx0XHRcdCggdGhpcy5jaGVja2VkIHx8ICFyY2hlY2thYmxlVHlwZS50ZXN0KCB0eXBlICkgKTtcclxuXHRcdH0pXHJcblx0XHQubWFwKGZ1bmN0aW9uKCBpLCBlbGVtICkge1xyXG5cdFx0XHR2YXIgdmFsID0galF1ZXJ5KCB0aGlzICkudmFsKCk7XHJcblxyXG5cdFx0XHRyZXR1cm4gdmFsID09IG51bGwgP1xyXG5cdFx0XHRcdG51bGwgOlxyXG5cdFx0XHRcdGpRdWVyeS5pc0FycmF5KCB2YWwgKSA/XHJcblx0XHRcdFx0XHRqUXVlcnkubWFwKCB2YWwsIGZ1bmN0aW9uKCB2YWwgKSB7XHJcblx0XHRcdFx0XHRcdHJldHVybiB7IG5hbWU6IGVsZW0ubmFtZSwgdmFsdWU6IHZhbC5yZXBsYWNlKCByQ1JMRiwgXCJcXHJcXG5cIiApIH07XHJcblx0XHRcdFx0XHR9KSA6XHJcblx0XHRcdFx0XHR7IG5hbWU6IGVsZW0ubmFtZSwgdmFsdWU6IHZhbC5yZXBsYWNlKCByQ1JMRiwgXCJcXHJcXG5cIiApIH07XHJcblx0XHR9KS5nZXQoKTtcclxuXHR9XHJcbn0pO1xyXG5cclxuXHJcbi8vIENyZWF0ZSB0aGUgcmVxdWVzdCBvYmplY3RcclxuLy8gKFRoaXMgaXMgc3RpbGwgYXR0YWNoZWQgdG8gYWpheFNldHRpbmdzIGZvciBiYWNrd2FyZCBjb21wYXRpYmlsaXR5KVxyXG5qUXVlcnkuYWpheFNldHRpbmdzLnhociA9IHdpbmRvdy5BY3RpdmVYT2JqZWN0ICE9PSB1bmRlZmluZWQgP1xyXG5cdC8vIFN1cHBvcnQ6IElFNitcclxuXHRmdW5jdGlvbigpIHtcclxuXHJcblx0XHQvLyBYSFIgY2Fubm90IGFjY2VzcyBsb2NhbCBmaWxlcywgYWx3YXlzIHVzZSBBY3RpdmVYIGZvciB0aGF0IGNhc2VcclxuXHRcdHJldHVybiAhdGhpcy5pc0xvY2FsICYmXHJcblxyXG5cdFx0XHQvLyBTdXBwb3J0OiBJRTctOFxyXG5cdFx0XHQvLyBvbGRJRSBYSFIgZG9lcyBub3Qgc3VwcG9ydCBub24tUkZDMjYxNiBtZXRob2RzICgjMTMyNDApXHJcblx0XHRcdC8vIFNlZSBodHRwOi8vbXNkbi5taWNyb3NvZnQuY29tL2VuLXVzL2xpYnJhcnkvaWUvbXM1MzY2NDgodj12cy44NSkuYXNweFxyXG5cdFx0XHQvLyBhbmQgaHR0cDovL3d3dy53My5vcmcvUHJvdG9jb2xzL3JmYzI2MTYvcmZjMjYxNi1zZWM5Lmh0bWwjc2VjOVxyXG5cdFx0XHQvLyBBbHRob3VnaCB0aGlzIGNoZWNrIGZvciBzaXggbWV0aG9kcyBpbnN0ZWFkIG9mIGVpZ2h0XHJcblx0XHRcdC8vIHNpbmNlIElFIGFsc28gZG9lcyBub3Qgc3VwcG9ydCBcInRyYWNlXCIgYW5kIFwiY29ubmVjdFwiXHJcblx0XHRcdC9eKGdldHxwb3N0fGhlYWR8cHV0fGRlbGV0ZXxvcHRpb25zKSQvaS50ZXN0KCB0aGlzLnR5cGUgKSAmJlxyXG5cclxuXHRcdFx0Y3JlYXRlU3RhbmRhcmRYSFIoKSB8fCBjcmVhdGVBY3RpdmVYSFIoKTtcclxuXHR9IDpcclxuXHQvLyBGb3IgYWxsIG90aGVyIGJyb3dzZXJzLCB1c2UgdGhlIHN0YW5kYXJkIFhNTEh0dHBSZXF1ZXN0IG9iamVjdFxyXG5cdGNyZWF0ZVN0YW5kYXJkWEhSO1xyXG5cclxudmFyIHhocklkID0gMCxcclxuXHR4aHJDYWxsYmFja3MgPSB7fSxcclxuXHR4aHJTdXBwb3J0ZWQgPSBqUXVlcnkuYWpheFNldHRpbmdzLnhocigpO1xyXG5cclxuLy8gU3VwcG9ydDogSUU8MTBcclxuLy8gT3BlbiByZXF1ZXN0cyBtdXN0IGJlIG1hbnVhbGx5IGFib3J0ZWQgb24gdW5sb2FkICgjNTI4MClcclxuLy8gU2VlIGh0dHBzOi8vc3VwcG9ydC5taWNyb3NvZnQuY29tL2tiLzI4NTY3NDYgZm9yIG1vcmUgaW5mb1xyXG5pZiAoIHdpbmRvdy5hdHRhY2hFdmVudCApIHtcclxuXHR3aW5kb3cuYXR0YWNoRXZlbnQoIFwib251bmxvYWRcIiwgZnVuY3Rpb24oKSB7XHJcblx0XHRmb3IgKCB2YXIga2V5IGluIHhockNhbGxiYWNrcyApIHtcclxuXHRcdFx0eGhyQ2FsbGJhY2tzWyBrZXkgXSggdW5kZWZpbmVkLCB0cnVlICk7XHJcblx0XHR9XHJcblx0fSk7XHJcbn1cclxuXHJcbi8vIERldGVybWluZSBzdXBwb3J0IHByb3BlcnRpZXNcclxuc3VwcG9ydC5jb3JzID0gISF4aHJTdXBwb3J0ZWQgJiYgKCBcIndpdGhDcmVkZW50aWFsc1wiIGluIHhoclN1cHBvcnRlZCApO1xyXG54aHJTdXBwb3J0ZWQgPSBzdXBwb3J0LmFqYXggPSAhIXhoclN1cHBvcnRlZDtcclxuXHJcbi8vIENyZWF0ZSB0cmFuc3BvcnQgaWYgdGhlIGJyb3dzZXIgY2FuIHByb3ZpZGUgYW4geGhyXHJcbmlmICggeGhyU3VwcG9ydGVkICkge1xyXG5cclxuXHRqUXVlcnkuYWpheFRyYW5zcG9ydChmdW5jdGlvbiggb3B0aW9ucyApIHtcclxuXHRcdC8vIENyb3NzIGRvbWFpbiBvbmx5IGFsbG93ZWQgaWYgc3VwcG9ydGVkIHRocm91Z2ggWE1MSHR0cFJlcXVlc3RcclxuXHRcdGlmICggIW9wdGlvbnMuY3Jvc3NEb21haW4gfHwgc3VwcG9ydC5jb3JzICkge1xyXG5cclxuXHRcdFx0dmFyIGNhbGxiYWNrO1xyXG5cclxuXHRcdFx0cmV0dXJuIHtcclxuXHRcdFx0XHRzZW5kOiBmdW5jdGlvbiggaGVhZGVycywgY29tcGxldGUgKSB7XHJcblx0XHRcdFx0XHR2YXIgaSxcclxuXHRcdFx0XHRcdFx0eGhyID0gb3B0aW9ucy54aHIoKSxcclxuXHRcdFx0XHRcdFx0aWQgPSArK3hocklkO1xyXG5cclxuXHRcdFx0XHRcdC8vIE9wZW4gdGhlIHNvY2tldFxyXG5cdFx0XHRcdFx0eGhyLm9wZW4oIG9wdGlvbnMudHlwZSwgb3B0aW9ucy51cmwsIG9wdGlvbnMuYXN5bmMsIG9wdGlvbnMudXNlcm5hbWUsIG9wdGlvbnMucGFzc3dvcmQgKTtcclxuXHJcblx0XHRcdFx0XHQvLyBBcHBseSBjdXN0b20gZmllbGRzIGlmIHByb3ZpZGVkXHJcblx0XHRcdFx0XHRpZiAoIG9wdGlvbnMueGhyRmllbGRzICkge1xyXG5cdFx0XHRcdFx0XHRmb3IgKCBpIGluIG9wdGlvbnMueGhyRmllbGRzICkge1xyXG5cdFx0XHRcdFx0XHRcdHhoclsgaSBdID0gb3B0aW9ucy54aHJGaWVsZHNbIGkgXTtcclxuXHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRcdC8vIE92ZXJyaWRlIG1pbWUgdHlwZSBpZiBuZWVkZWRcclxuXHRcdFx0XHRcdGlmICggb3B0aW9ucy5taW1lVHlwZSAmJiB4aHIub3ZlcnJpZGVNaW1lVHlwZSApIHtcclxuXHRcdFx0XHRcdFx0eGhyLm92ZXJyaWRlTWltZVR5cGUoIG9wdGlvbnMubWltZVR5cGUgKTtcclxuXHRcdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0XHQvLyBYLVJlcXVlc3RlZC1XaXRoIGhlYWRlclxyXG5cdFx0XHRcdFx0Ly8gRm9yIGNyb3NzLWRvbWFpbiByZXF1ZXN0cywgc2VlaW5nIGFzIGNvbmRpdGlvbnMgZm9yIGEgcHJlZmxpZ2h0IGFyZVxyXG5cdFx0XHRcdFx0Ly8gYWtpbiB0byBhIGppZ3NhdyBwdXp6bGUsIHdlIHNpbXBseSBuZXZlciBzZXQgaXQgdG8gYmUgc3VyZS5cclxuXHRcdFx0XHRcdC8vIChpdCBjYW4gYWx3YXlzIGJlIHNldCBvbiBhIHBlci1yZXF1ZXN0IGJhc2lzIG9yIGV2ZW4gdXNpbmcgYWpheFNldHVwKVxyXG5cdFx0XHRcdFx0Ly8gRm9yIHNhbWUtZG9tYWluIHJlcXVlc3RzLCB3b24ndCBjaGFuZ2UgaGVhZGVyIGlmIGFscmVhZHkgcHJvdmlkZWQuXHJcblx0XHRcdFx0XHRpZiAoICFvcHRpb25zLmNyb3NzRG9tYWluICYmICFoZWFkZXJzW1wiWC1SZXF1ZXN0ZWQtV2l0aFwiXSApIHtcclxuXHRcdFx0XHRcdFx0aGVhZGVyc1tcIlgtUmVxdWVzdGVkLVdpdGhcIl0gPSBcIlhNTEh0dHBSZXF1ZXN0XCI7XHJcblx0XHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdFx0Ly8gU2V0IGhlYWRlcnNcclxuXHRcdFx0XHRcdGZvciAoIGkgaW4gaGVhZGVycyApIHtcclxuXHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUU8OVxyXG5cdFx0XHRcdFx0XHQvLyBJRSdzIEFjdGl2ZVhPYmplY3QgdGhyb3dzIGEgJ1R5cGUgTWlzbWF0Y2gnIGV4Y2VwdGlvbiB3aGVuIHNldHRpbmdcclxuXHRcdFx0XHRcdFx0Ly8gcmVxdWVzdCBoZWFkZXIgdG8gYSBudWxsLXZhbHVlLlxyXG5cdFx0XHRcdFx0XHQvL1xyXG5cdFx0XHRcdFx0XHQvLyBUbyBrZWVwIGNvbnNpc3RlbnQgd2l0aCBvdGhlciBYSFIgaW1wbGVtZW50YXRpb25zLCBjYXN0IHRoZSB2YWx1ZVxyXG5cdFx0XHRcdFx0XHQvLyB0byBzdHJpbmcgYW5kIGlnbm9yZSBgdW5kZWZpbmVkYC5cclxuXHRcdFx0XHRcdFx0aWYgKCBoZWFkZXJzWyBpIF0gIT09IHVuZGVmaW5lZCApIHtcclxuXHRcdFx0XHRcdFx0XHR4aHIuc2V0UmVxdWVzdEhlYWRlciggaSwgaGVhZGVyc1sgaSBdICsgXCJcIiApO1xyXG5cdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdFx0Ly8gRG8gc2VuZCB0aGUgcmVxdWVzdFxyXG5cdFx0XHRcdFx0Ly8gVGhpcyBtYXkgcmFpc2UgYW4gZXhjZXB0aW9uIHdoaWNoIGlzIGFjdHVhbGx5XHJcblx0XHRcdFx0XHQvLyBoYW5kbGVkIGluIGpRdWVyeS5hamF4IChzbyBubyB0cnkvY2F0Y2ggaGVyZSlcclxuXHRcdFx0XHRcdHhoci5zZW5kKCAoIG9wdGlvbnMuaGFzQ29udGVudCAmJiBvcHRpb25zLmRhdGEgKSB8fCBudWxsICk7XHJcblxyXG5cdFx0XHRcdFx0Ly8gTGlzdGVuZXJcclxuXHRcdFx0XHRcdGNhbGxiYWNrID0gZnVuY3Rpb24oIF8sIGlzQWJvcnQgKSB7XHJcblx0XHRcdFx0XHRcdHZhciBzdGF0dXMsIHN0YXR1c1RleHQsIHJlc3BvbnNlcztcclxuXHJcblx0XHRcdFx0XHRcdC8vIFdhcyBuZXZlciBjYWxsZWQgYW5kIGlzIGFib3J0ZWQgb3IgY29tcGxldGVcclxuXHRcdFx0XHRcdFx0aWYgKCBjYWxsYmFjayAmJiAoIGlzQWJvcnQgfHwgeGhyLnJlYWR5U3RhdGUgPT09IDQgKSApIHtcclxuXHRcdFx0XHRcdFx0XHQvLyBDbGVhbiB1cFxyXG5cdFx0XHRcdFx0XHRcdGRlbGV0ZSB4aHJDYWxsYmFja3NbIGlkIF07XHJcblx0XHRcdFx0XHRcdFx0Y2FsbGJhY2sgPSB1bmRlZmluZWQ7XHJcblx0XHRcdFx0XHRcdFx0eGhyLm9ucmVhZHlzdGF0ZWNoYW5nZSA9IGpRdWVyeS5ub29wO1xyXG5cclxuXHRcdFx0XHRcdFx0XHQvLyBBYm9ydCBtYW51YWxseSBpZiBuZWVkZWRcclxuXHRcdFx0XHRcdFx0XHRpZiAoIGlzQWJvcnQgKSB7XHJcblx0XHRcdFx0XHRcdFx0XHRpZiAoIHhoci5yZWFkeVN0YXRlICE9PSA0ICkge1xyXG5cdFx0XHRcdFx0XHRcdFx0XHR4aHIuYWJvcnQoKTtcclxuXHRcdFx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdFx0XHRcdFx0cmVzcG9uc2VzID0ge307XHJcblx0XHRcdFx0XHRcdFx0XHRzdGF0dXMgPSB4aHIuc3RhdHVzO1xyXG5cclxuXHRcdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFPDEwXHJcblx0XHRcdFx0XHRcdFx0XHQvLyBBY2Nlc3NpbmcgYmluYXJ5LWRhdGEgcmVzcG9uc2VUZXh0IHRocm93cyBhbiBleGNlcHRpb25cclxuXHRcdFx0XHRcdFx0XHRcdC8vICgjMTE0MjYpXHJcblx0XHRcdFx0XHRcdFx0XHRpZiAoIHR5cGVvZiB4aHIucmVzcG9uc2VUZXh0ID09PSBcInN0cmluZ1wiICkge1xyXG5cdFx0XHRcdFx0XHRcdFx0XHRyZXNwb25zZXMudGV4dCA9IHhoci5yZXNwb25zZVRleHQ7XHJcblx0XHRcdFx0XHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdFx0XHRcdFx0Ly8gRmlyZWZveCB0aHJvd3MgYW4gZXhjZXB0aW9uIHdoZW4gYWNjZXNzaW5nXHJcblx0XHRcdFx0XHRcdFx0XHQvLyBzdGF0dXNUZXh0IGZvciBmYXVsdHkgY3Jvc3MtZG9tYWluIHJlcXVlc3RzXHJcblx0XHRcdFx0XHRcdFx0XHR0cnkge1xyXG5cdFx0XHRcdFx0XHRcdFx0XHRzdGF0dXNUZXh0ID0geGhyLnN0YXR1c1RleHQ7XHJcblx0XHRcdFx0XHRcdFx0XHR9IGNhdGNoKCBlICkge1xyXG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBXZSBub3JtYWxpemUgd2l0aCBXZWJraXQgZ2l2aW5nIGFuIGVtcHR5IHN0YXR1c1RleHRcclxuXHRcdFx0XHRcdFx0XHRcdFx0c3RhdHVzVGV4dCA9IFwiXCI7XHJcblx0XHRcdFx0XHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdFx0XHRcdFx0Ly8gRmlsdGVyIHN0YXR1cyBmb3Igbm9uIHN0YW5kYXJkIGJlaGF2aW9yc1xyXG5cclxuXHRcdFx0XHRcdFx0XHRcdC8vIElmIHRoZSByZXF1ZXN0IGlzIGxvY2FsIGFuZCB3ZSBoYXZlIGRhdGE6IGFzc3VtZSBhIHN1Y2Nlc3NcclxuXHRcdFx0XHRcdFx0XHRcdC8vIChzdWNjZXNzIHdpdGggbm8gZGF0YSB3b24ndCBnZXQgbm90aWZpZWQsIHRoYXQncyB0aGUgYmVzdCB3ZVxyXG5cdFx0XHRcdFx0XHRcdFx0Ly8gY2FuIGRvIGdpdmVuIGN1cnJlbnQgaW1wbGVtZW50YXRpb25zKVxyXG5cdFx0XHRcdFx0XHRcdFx0aWYgKCAhc3RhdHVzICYmIG9wdGlvbnMuaXNMb2NhbCAmJiAhb3B0aW9ucy5jcm9zc0RvbWFpbiApIHtcclxuXHRcdFx0XHRcdFx0XHRcdFx0c3RhdHVzID0gcmVzcG9uc2VzLnRleHQgPyAyMDAgOiA0MDQ7XHJcblx0XHRcdFx0XHRcdFx0XHQvLyBJRSAtICMxNDUwOiBzb21ldGltZXMgcmV0dXJucyAxMjIzIHdoZW4gaXQgc2hvdWxkIGJlIDIwNFxyXG5cdFx0XHRcdFx0XHRcdFx0fSBlbHNlIGlmICggc3RhdHVzID09PSAxMjIzICkge1xyXG5cdFx0XHRcdFx0XHRcdFx0XHRzdGF0dXMgPSAyMDQ7XHJcblx0XHRcdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdFx0XHQvLyBDYWxsIGNvbXBsZXRlIGlmIG5lZWRlZFxyXG5cdFx0XHRcdFx0XHRpZiAoIHJlc3BvbnNlcyApIHtcclxuXHRcdFx0XHRcdFx0XHRjb21wbGV0ZSggc3RhdHVzLCBzdGF0dXNUZXh0LCByZXNwb25zZXMsIHhoci5nZXRBbGxSZXNwb25zZUhlYWRlcnMoKSApO1xyXG5cdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHR9O1xyXG5cclxuXHRcdFx0XHRcdGlmICggIW9wdGlvbnMuYXN5bmMgKSB7XHJcblx0XHRcdFx0XHRcdC8vIGlmIHdlJ3JlIGluIHN5bmMgbW9kZSB3ZSBmaXJlIHRoZSBjYWxsYmFja1xyXG5cdFx0XHRcdFx0XHRjYWxsYmFjaygpO1xyXG5cdFx0XHRcdFx0fSBlbHNlIGlmICggeGhyLnJlYWR5U3RhdGUgPT09IDQgKSB7XHJcblx0XHRcdFx0XHRcdC8vIChJRTYgJiBJRTcpIGlmIGl0J3MgaW4gY2FjaGUgYW5kIGhhcyBiZWVuXHJcblx0XHRcdFx0XHRcdC8vIHJldHJpZXZlZCBkaXJlY3RseSB3ZSBuZWVkIHRvIGZpcmUgdGhlIGNhbGxiYWNrXHJcblx0XHRcdFx0XHRcdHNldFRpbWVvdXQoIGNhbGxiYWNrICk7XHJcblx0XHRcdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdFx0XHQvLyBBZGQgdG8gdGhlIGxpc3Qgb2YgYWN0aXZlIHhociBjYWxsYmFja3NcclxuXHRcdFx0XHRcdFx0eGhyLm9ucmVhZHlzdGF0ZWNoYW5nZSA9IHhockNhbGxiYWNrc1sgaWQgXSA9IGNhbGxiYWNrO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH0sXHJcblxyXG5cdFx0XHRcdGFib3J0OiBmdW5jdGlvbigpIHtcclxuXHRcdFx0XHRcdGlmICggY2FsbGJhY2sgKSB7XHJcblx0XHRcdFx0XHRcdGNhbGxiYWNrKCB1bmRlZmluZWQsIHRydWUgKTtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9XHJcblx0XHRcdH07XHJcblx0XHR9XHJcblx0fSk7XHJcbn1cclxuXHJcbi8vIEZ1bmN0aW9ucyB0byBjcmVhdGUgeGhyc1xyXG5mdW5jdGlvbiBjcmVhdGVTdGFuZGFyZFhIUigpIHtcclxuXHR0cnkge1xyXG5cdFx0cmV0dXJuIG5ldyB3aW5kb3cuWE1MSHR0cFJlcXVlc3QoKTtcclxuXHR9IGNhdGNoKCBlICkge31cclxufVxyXG5cclxuZnVuY3Rpb24gY3JlYXRlQWN0aXZlWEhSKCkge1xyXG5cdHRyeSB7XHJcblx0XHRyZXR1cm4gbmV3IHdpbmRvdy5BY3RpdmVYT2JqZWN0KCBcIk1pY3Jvc29mdC5YTUxIVFRQXCIgKTtcclxuXHR9IGNhdGNoKCBlICkge31cclxufVxyXG5cclxuXHJcblxyXG5cclxuLy8gSW5zdGFsbCBzY3JpcHQgZGF0YVR5cGVcclxualF1ZXJ5LmFqYXhTZXR1cCh7XHJcblx0YWNjZXB0czoge1xyXG5cdFx0c2NyaXB0OiBcInRleHQvamF2YXNjcmlwdCwgYXBwbGljYXRpb24vamF2YXNjcmlwdCwgYXBwbGljYXRpb24vZWNtYXNjcmlwdCwgYXBwbGljYXRpb24veC1lY21hc2NyaXB0XCJcclxuXHR9LFxyXG5cdGNvbnRlbnRzOiB7XHJcblx0XHRzY3JpcHQ6IC8oPzpqYXZhfGVjbWEpc2NyaXB0L1xyXG5cdH0sXHJcblx0Y29udmVydGVyczoge1xyXG5cdFx0XCJ0ZXh0IHNjcmlwdFwiOiBmdW5jdGlvbiggdGV4dCApIHtcclxuXHRcdFx0alF1ZXJ5Lmdsb2JhbEV2YWwoIHRleHQgKTtcclxuXHRcdFx0cmV0dXJuIHRleHQ7XHJcblx0XHR9XHJcblx0fVxyXG59KTtcclxuXHJcbi8vIEhhbmRsZSBjYWNoZSdzIHNwZWNpYWwgY2FzZSBhbmQgZ2xvYmFsXHJcbmpRdWVyeS5hamF4UHJlZmlsdGVyKCBcInNjcmlwdFwiLCBmdW5jdGlvbiggcyApIHtcclxuXHRpZiAoIHMuY2FjaGUgPT09IHVuZGVmaW5lZCApIHtcclxuXHRcdHMuY2FjaGUgPSBmYWxzZTtcclxuXHR9XHJcblx0aWYgKCBzLmNyb3NzRG9tYWluICkge1xyXG5cdFx0cy50eXBlID0gXCJHRVRcIjtcclxuXHRcdHMuZ2xvYmFsID0gZmFsc2U7XHJcblx0fVxyXG59KTtcclxuXHJcbi8vIEJpbmQgc2NyaXB0IHRhZyBoYWNrIHRyYW5zcG9ydFxyXG5qUXVlcnkuYWpheFRyYW5zcG9ydCggXCJzY3JpcHRcIiwgZnVuY3Rpb24ocykge1xyXG5cclxuXHQvLyBUaGlzIHRyYW5zcG9ydCBvbmx5IGRlYWxzIHdpdGggY3Jvc3MgZG9tYWluIHJlcXVlc3RzXHJcblx0aWYgKCBzLmNyb3NzRG9tYWluICkge1xyXG5cclxuXHRcdHZhciBzY3JpcHQsXHJcblx0XHRcdGhlYWQgPSBkb2N1bWVudC5oZWFkIHx8IGpRdWVyeShcImhlYWRcIilbMF0gfHwgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xyXG5cclxuXHRcdHJldHVybiB7XHJcblxyXG5cdFx0XHRzZW5kOiBmdW5jdGlvbiggXywgY2FsbGJhY2sgKSB7XHJcblxyXG5cdFx0XHRcdHNjcmlwdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzY3JpcHRcIik7XHJcblxyXG5cdFx0XHRcdHNjcmlwdC5hc3luYyA9IHRydWU7XHJcblxyXG5cdFx0XHRcdGlmICggcy5zY3JpcHRDaGFyc2V0ICkge1xyXG5cdFx0XHRcdFx0c2NyaXB0LmNoYXJzZXQgPSBzLnNjcmlwdENoYXJzZXQ7XHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRzY3JpcHQuc3JjID0gcy51cmw7XHJcblxyXG5cdFx0XHRcdC8vIEF0dGFjaCBoYW5kbGVycyBmb3IgYWxsIGJyb3dzZXJzXHJcblx0XHRcdFx0c2NyaXB0Lm9ubG9hZCA9IHNjcmlwdC5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBmdW5jdGlvbiggXywgaXNBYm9ydCApIHtcclxuXHJcblx0XHRcdFx0XHRpZiAoIGlzQWJvcnQgfHwgIXNjcmlwdC5yZWFkeVN0YXRlIHx8IC9sb2FkZWR8Y29tcGxldGUvLnRlc3QoIHNjcmlwdC5yZWFkeVN0YXRlICkgKSB7XHJcblxyXG5cdFx0XHRcdFx0XHQvLyBIYW5kbGUgbWVtb3J5IGxlYWsgaW4gSUVcclxuXHRcdFx0XHRcdFx0c2NyaXB0Lm9ubG9hZCA9IHNjcmlwdC5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBudWxsO1xyXG5cclxuXHRcdFx0XHRcdFx0Ly8gUmVtb3ZlIHRoZSBzY3JpcHRcclxuXHRcdFx0XHRcdFx0aWYgKCBzY3JpcHQucGFyZW50Tm9kZSApIHtcclxuXHRcdFx0XHRcdFx0XHRzY3JpcHQucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCggc2NyaXB0ICk7XHJcblx0XHRcdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0XHRcdC8vIERlcmVmZXJlbmNlIHRoZSBzY3JpcHRcclxuXHRcdFx0XHRcdFx0c2NyaXB0ID0gbnVsbDtcclxuXHJcblx0XHRcdFx0XHRcdC8vIENhbGxiYWNrIGlmIG5vdCBhYm9ydFxyXG5cdFx0XHRcdFx0XHRpZiAoICFpc0Fib3J0ICkge1xyXG5cdFx0XHRcdFx0XHRcdGNhbGxiYWNrKCAyMDAsIFwic3VjY2Vzc1wiICk7XHJcblx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9O1xyXG5cclxuXHRcdFx0XHQvLyBDaXJjdW12ZW50IElFNiBidWdzIHdpdGggYmFzZSBlbGVtZW50cyAoIzI3MDkgYW5kICM0Mzc4KSBieSBwcmVwZW5kaW5nXHJcblx0XHRcdFx0Ly8gVXNlIG5hdGl2ZSBET00gbWFuaXB1bGF0aW9uIHRvIGF2b2lkIG91ciBkb21NYW5pcCBBSkFYIHRyaWNrZXJ5XHJcblx0XHRcdFx0aGVhZC5pbnNlcnRCZWZvcmUoIHNjcmlwdCwgaGVhZC5maXJzdENoaWxkICk7XHJcblx0XHRcdH0sXHJcblxyXG5cdFx0XHRhYm9ydDogZnVuY3Rpb24oKSB7XHJcblx0XHRcdFx0aWYgKCBzY3JpcHQgKSB7XHJcblx0XHRcdFx0XHRzY3JpcHQub25sb2FkKCB1bmRlZmluZWQsIHRydWUgKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdH07XHJcblx0fVxyXG59KTtcclxuXHJcblxyXG5cclxuXHJcbnZhciBvbGRDYWxsYmFja3MgPSBbXSxcclxuXHRyanNvbnAgPSAvKD0pXFw/KD89JnwkKXxcXD9cXD8vO1xyXG5cclxuLy8gRGVmYXVsdCBqc29ucCBzZXR0aW5nc1xyXG5qUXVlcnkuYWpheFNldHVwKHtcclxuXHRqc29ucDogXCJjYWxsYmFja1wiLFxyXG5cdGpzb25wQ2FsbGJhY2s6IGZ1bmN0aW9uKCkge1xyXG5cdFx0dmFyIGNhbGxiYWNrID0gb2xkQ2FsbGJhY2tzLnBvcCgpIHx8ICggalF1ZXJ5LmV4cGFuZG8gKyBcIl9cIiArICggbm9uY2UrKyApICk7XHJcblx0XHR0aGlzWyBjYWxsYmFjayBdID0gdHJ1ZTtcclxuXHRcdHJldHVybiBjYWxsYmFjaztcclxuXHR9XHJcbn0pO1xyXG5cclxuLy8gRGV0ZWN0LCBub3JtYWxpemUgb3B0aW9ucyBhbmQgaW5zdGFsbCBjYWxsYmFja3MgZm9yIGpzb25wIHJlcXVlc3RzXHJcbmpRdWVyeS5hamF4UHJlZmlsdGVyKCBcImpzb24ganNvbnBcIiwgZnVuY3Rpb24oIHMsIG9yaWdpbmFsU2V0dGluZ3MsIGpxWEhSICkge1xyXG5cclxuXHR2YXIgY2FsbGJhY2tOYW1lLCBvdmVyd3JpdHRlbiwgcmVzcG9uc2VDb250YWluZXIsXHJcblx0XHRqc29uUHJvcCA9IHMuanNvbnAgIT09IGZhbHNlICYmICggcmpzb25wLnRlc3QoIHMudXJsICkgP1xyXG5cdFx0XHRcInVybFwiIDpcclxuXHRcdFx0dHlwZW9mIHMuZGF0YSA9PT0gXCJzdHJpbmdcIiAmJiAhKCBzLmNvbnRlbnRUeXBlIHx8IFwiXCIgKS5pbmRleE9mKFwiYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkXCIpICYmIHJqc29ucC50ZXN0KCBzLmRhdGEgKSAmJiBcImRhdGFcIlxyXG5cdFx0KTtcclxuXHJcblx0Ly8gSGFuZGxlIGlmZiB0aGUgZXhwZWN0ZWQgZGF0YSB0eXBlIGlzIFwianNvbnBcIiBvciB3ZSBoYXZlIGEgcGFyYW1ldGVyIHRvIHNldFxyXG5cdGlmICgganNvblByb3AgfHwgcy5kYXRhVHlwZXNbIDAgXSA9PT0gXCJqc29ucFwiICkge1xyXG5cclxuXHRcdC8vIEdldCBjYWxsYmFjayBuYW1lLCByZW1lbWJlcmluZyBwcmVleGlzdGluZyB2YWx1ZSBhc3NvY2lhdGVkIHdpdGggaXRcclxuXHRcdGNhbGxiYWNrTmFtZSA9IHMuanNvbnBDYWxsYmFjayA9IGpRdWVyeS5pc0Z1bmN0aW9uKCBzLmpzb25wQ2FsbGJhY2sgKSA/XHJcblx0XHRcdHMuanNvbnBDYWxsYmFjaygpIDpcclxuXHRcdFx0cy5qc29ucENhbGxiYWNrO1xyXG5cclxuXHRcdC8vIEluc2VydCBjYWxsYmFjayBpbnRvIHVybCBvciBmb3JtIGRhdGFcclxuXHRcdGlmICgganNvblByb3AgKSB7XHJcblx0XHRcdHNbIGpzb25Qcm9wIF0gPSBzWyBqc29uUHJvcCBdLnJlcGxhY2UoIHJqc29ucCwgXCIkMVwiICsgY2FsbGJhY2tOYW1lICk7XHJcblx0XHR9IGVsc2UgaWYgKCBzLmpzb25wICE9PSBmYWxzZSApIHtcclxuXHRcdFx0cy51cmwgKz0gKCBycXVlcnkudGVzdCggcy51cmwgKSA/IFwiJlwiIDogXCI/XCIgKSArIHMuanNvbnAgKyBcIj1cIiArIGNhbGxiYWNrTmFtZTtcclxuXHRcdH1cclxuXHJcblx0XHQvLyBVc2UgZGF0YSBjb252ZXJ0ZXIgdG8gcmV0cmlldmUganNvbiBhZnRlciBzY3JpcHQgZXhlY3V0aW9uXHJcblx0XHRzLmNvbnZlcnRlcnNbXCJzY3JpcHQganNvblwiXSA9IGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRpZiAoICFyZXNwb25zZUNvbnRhaW5lciApIHtcclxuXHRcdFx0XHRqUXVlcnkuZXJyb3IoIGNhbGxiYWNrTmFtZSArIFwiIHdhcyBub3QgY2FsbGVkXCIgKTtcclxuXHRcdFx0fVxyXG5cdFx0XHRyZXR1cm4gcmVzcG9uc2VDb250YWluZXJbIDAgXTtcclxuXHRcdH07XHJcblxyXG5cdFx0Ly8gZm9yY2UganNvbiBkYXRhVHlwZVxyXG5cdFx0cy5kYXRhVHlwZXNbIDAgXSA9IFwianNvblwiO1xyXG5cclxuXHRcdC8vIEluc3RhbGwgY2FsbGJhY2tcclxuXHRcdG92ZXJ3cml0dGVuID0gd2luZG93WyBjYWxsYmFja05hbWUgXTtcclxuXHRcdHdpbmRvd1sgY2FsbGJhY2tOYW1lIF0gPSBmdW5jdGlvbigpIHtcclxuXHRcdFx0cmVzcG9uc2VDb250YWluZXIgPSBhcmd1bWVudHM7XHJcblx0XHR9O1xyXG5cclxuXHRcdC8vIENsZWFuLXVwIGZ1bmN0aW9uIChmaXJlcyBhZnRlciBjb252ZXJ0ZXJzKVxyXG5cdFx0anFYSFIuYWx3YXlzKGZ1bmN0aW9uKCkge1xyXG5cdFx0XHQvLyBSZXN0b3JlIHByZWV4aXN0aW5nIHZhbHVlXHJcblx0XHRcdHdpbmRvd1sgY2FsbGJhY2tOYW1lIF0gPSBvdmVyd3JpdHRlbjtcclxuXHJcblx0XHRcdC8vIFNhdmUgYmFjayBhcyBmcmVlXHJcblx0XHRcdGlmICggc1sgY2FsbGJhY2tOYW1lIF0gKSB7XHJcblx0XHRcdFx0Ly8gbWFrZSBzdXJlIHRoYXQgcmUtdXNpbmcgdGhlIG9wdGlvbnMgZG9lc24ndCBzY3JldyB0aGluZ3MgYXJvdW5kXHJcblx0XHRcdFx0cy5qc29ucENhbGxiYWNrID0gb3JpZ2luYWxTZXR0aW5ncy5qc29ucENhbGxiYWNrO1xyXG5cclxuXHRcdFx0XHQvLyBzYXZlIHRoZSBjYWxsYmFjayBuYW1lIGZvciBmdXR1cmUgdXNlXHJcblx0XHRcdFx0b2xkQ2FsbGJhY2tzLnB1c2goIGNhbGxiYWNrTmFtZSApO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHQvLyBDYWxsIGlmIGl0IHdhcyBhIGZ1bmN0aW9uIGFuZCB3ZSBoYXZlIGEgcmVzcG9uc2VcclxuXHRcdFx0aWYgKCByZXNwb25zZUNvbnRhaW5lciAmJiBqUXVlcnkuaXNGdW5jdGlvbiggb3ZlcndyaXR0ZW4gKSApIHtcclxuXHRcdFx0XHRvdmVyd3JpdHRlbiggcmVzcG9uc2VDb250YWluZXJbIDAgXSApO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRyZXNwb25zZUNvbnRhaW5lciA9IG92ZXJ3cml0dGVuID0gdW5kZWZpbmVkO1xyXG5cdFx0fSk7XHJcblxyXG5cdFx0Ly8gRGVsZWdhdGUgdG8gc2NyaXB0XHJcblx0XHRyZXR1cm4gXCJzY3JpcHRcIjtcclxuXHR9XHJcbn0pO1xyXG5cclxuXHJcblxyXG5cclxuLy8gZGF0YTogc3RyaW5nIG9mIGh0bWxcclxuLy8gY29udGV4dCAob3B0aW9uYWwpOiBJZiBzcGVjaWZpZWQsIHRoZSBmcmFnbWVudCB3aWxsIGJlIGNyZWF0ZWQgaW4gdGhpcyBjb250ZXh0LCBkZWZhdWx0cyB0byBkb2N1bWVudFxyXG4vLyBrZWVwU2NyaXB0cyAob3B0aW9uYWwpOiBJZiB0cnVlLCB3aWxsIGluY2x1ZGUgc2NyaXB0cyBwYXNzZWQgaW4gdGhlIGh0bWwgc3RyaW5nXHJcbmpRdWVyeS5wYXJzZUhUTUwgPSBmdW5jdGlvbiggZGF0YSwgY29udGV4dCwga2VlcFNjcmlwdHMgKSB7XHJcblx0aWYgKCAhZGF0YSB8fCB0eXBlb2YgZGF0YSAhPT0gXCJzdHJpbmdcIiApIHtcclxuXHRcdHJldHVybiBudWxsO1xyXG5cdH1cclxuXHRpZiAoIHR5cGVvZiBjb250ZXh0ID09PSBcImJvb2xlYW5cIiApIHtcclxuXHRcdGtlZXBTY3JpcHRzID0gY29udGV4dDtcclxuXHRcdGNvbnRleHQgPSBmYWxzZTtcclxuXHR9XHJcblx0Y29udGV4dCA9IGNvbnRleHQgfHwgZG9jdW1lbnQ7XHJcblxyXG5cdHZhciBwYXJzZWQgPSByc2luZ2xlVGFnLmV4ZWMoIGRhdGEgKSxcclxuXHRcdHNjcmlwdHMgPSAha2VlcFNjcmlwdHMgJiYgW107XHJcblxyXG5cdC8vIFNpbmdsZSB0YWdcclxuXHRpZiAoIHBhcnNlZCApIHtcclxuXHRcdHJldHVybiBbIGNvbnRleHQuY3JlYXRlRWxlbWVudCggcGFyc2VkWzFdICkgXTtcclxuXHR9XHJcblxyXG5cdHBhcnNlZCA9IGpRdWVyeS5idWlsZEZyYWdtZW50KCBbIGRhdGEgXSwgY29udGV4dCwgc2NyaXB0cyApO1xyXG5cclxuXHRpZiAoIHNjcmlwdHMgJiYgc2NyaXB0cy5sZW5ndGggKSB7XHJcblx0XHRqUXVlcnkoIHNjcmlwdHMgKS5yZW1vdmUoKTtcclxuXHR9XHJcblxyXG5cdHJldHVybiBqUXVlcnkubWVyZ2UoIFtdLCBwYXJzZWQuY2hpbGROb2RlcyApO1xyXG59O1xyXG5cclxuXHJcbi8vIEtlZXAgYSBjb3B5IG9mIHRoZSBvbGQgbG9hZCBtZXRob2RcclxudmFyIF9sb2FkID0galF1ZXJ5LmZuLmxvYWQ7XHJcblxyXG4vKipcclxuICogTG9hZCBhIHVybCBpbnRvIGEgcGFnZVxyXG4gKi9cclxualF1ZXJ5LmZuLmxvYWQgPSBmdW5jdGlvbiggdXJsLCBwYXJhbXMsIGNhbGxiYWNrICkge1xyXG5cdGlmICggdHlwZW9mIHVybCAhPT0gXCJzdHJpbmdcIiAmJiBfbG9hZCApIHtcclxuXHRcdHJldHVybiBfbG9hZC5hcHBseSggdGhpcywgYXJndW1lbnRzICk7XHJcblx0fVxyXG5cclxuXHR2YXIgc2VsZWN0b3IsIHJlc3BvbnNlLCB0eXBlLFxyXG5cdFx0c2VsZiA9IHRoaXMsXHJcblx0XHRvZmYgPSB1cmwuaW5kZXhPZihcIiBcIik7XHJcblxyXG5cdGlmICggb2ZmID49IDAgKSB7XHJcblx0XHRzZWxlY3RvciA9IGpRdWVyeS50cmltKCB1cmwuc2xpY2UoIG9mZiwgdXJsLmxlbmd0aCApICk7XHJcblx0XHR1cmwgPSB1cmwuc2xpY2UoIDAsIG9mZiApO1xyXG5cdH1cclxuXHJcblx0Ly8gSWYgaXQncyBhIGZ1bmN0aW9uXHJcblx0aWYgKCBqUXVlcnkuaXNGdW5jdGlvbiggcGFyYW1zICkgKSB7XHJcblxyXG5cdFx0Ly8gV2UgYXNzdW1lIHRoYXQgaXQncyB0aGUgY2FsbGJhY2tcclxuXHRcdGNhbGxiYWNrID0gcGFyYW1zO1xyXG5cdFx0cGFyYW1zID0gdW5kZWZpbmVkO1xyXG5cclxuXHQvLyBPdGhlcndpc2UsIGJ1aWxkIGEgcGFyYW0gc3RyaW5nXHJcblx0fSBlbHNlIGlmICggcGFyYW1zICYmIHR5cGVvZiBwYXJhbXMgPT09IFwib2JqZWN0XCIgKSB7XHJcblx0XHR0eXBlID0gXCJQT1NUXCI7XHJcblx0fVxyXG5cclxuXHQvLyBJZiB3ZSBoYXZlIGVsZW1lbnRzIHRvIG1vZGlmeSwgbWFrZSB0aGUgcmVxdWVzdFxyXG5cdGlmICggc2VsZi5sZW5ndGggPiAwICkge1xyXG5cdFx0alF1ZXJ5LmFqYXgoe1xyXG5cdFx0XHR1cmw6IHVybCxcclxuXHJcblx0XHRcdC8vIGlmIFwidHlwZVwiIHZhcmlhYmxlIGlzIHVuZGVmaW5lZCwgdGhlbiBcIkdFVFwiIG1ldGhvZCB3aWxsIGJlIHVzZWRcclxuXHRcdFx0dHlwZTogdHlwZSxcclxuXHRcdFx0ZGF0YVR5cGU6IFwiaHRtbFwiLFxyXG5cdFx0XHRkYXRhOiBwYXJhbXNcclxuXHRcdH0pLmRvbmUoZnVuY3Rpb24oIHJlc3BvbnNlVGV4dCApIHtcclxuXHJcblx0XHRcdC8vIFNhdmUgcmVzcG9uc2UgZm9yIHVzZSBpbiBjb21wbGV0ZSBjYWxsYmFja1xyXG5cdFx0XHRyZXNwb25zZSA9IGFyZ3VtZW50cztcclxuXHJcblx0XHRcdHNlbGYuaHRtbCggc2VsZWN0b3IgP1xyXG5cclxuXHRcdFx0XHQvLyBJZiBhIHNlbGVjdG9yIHdhcyBzcGVjaWZpZWQsIGxvY2F0ZSB0aGUgcmlnaHQgZWxlbWVudHMgaW4gYSBkdW1teSBkaXZcclxuXHRcdFx0XHQvLyBFeGNsdWRlIHNjcmlwdHMgdG8gYXZvaWQgSUUgJ1Blcm1pc3Npb24gRGVuaWVkJyBlcnJvcnNcclxuXHRcdFx0XHRqUXVlcnkoXCI8ZGl2PlwiKS5hcHBlbmQoIGpRdWVyeS5wYXJzZUhUTUwoIHJlc3BvbnNlVGV4dCApICkuZmluZCggc2VsZWN0b3IgKSA6XHJcblxyXG5cdFx0XHRcdC8vIE90aGVyd2lzZSB1c2UgdGhlIGZ1bGwgcmVzdWx0XHJcblx0XHRcdFx0cmVzcG9uc2VUZXh0ICk7XHJcblxyXG5cdFx0fSkuY29tcGxldGUoIGNhbGxiYWNrICYmIGZ1bmN0aW9uKCBqcVhIUiwgc3RhdHVzICkge1xyXG5cdFx0XHRzZWxmLmVhY2goIGNhbGxiYWNrLCByZXNwb25zZSB8fCBbIGpxWEhSLnJlc3BvbnNlVGV4dCwgc3RhdHVzLCBqcVhIUiBdICk7XHJcblx0XHR9KTtcclxuXHR9XHJcblxyXG5cdHJldHVybiB0aGlzO1xyXG59O1xyXG5cclxuXHJcblxyXG5cclxuLy8gQXR0YWNoIGEgYnVuY2ggb2YgZnVuY3Rpb25zIGZvciBoYW5kbGluZyBjb21tb24gQUpBWCBldmVudHNcclxualF1ZXJ5LmVhY2goIFsgXCJhamF4U3RhcnRcIiwgXCJhamF4U3RvcFwiLCBcImFqYXhDb21wbGV0ZVwiLCBcImFqYXhFcnJvclwiLCBcImFqYXhTdWNjZXNzXCIsIFwiYWpheFNlbmRcIiBdLCBmdW5jdGlvbiggaSwgdHlwZSApIHtcclxuXHRqUXVlcnkuZm5bIHR5cGUgXSA9IGZ1bmN0aW9uKCBmbiApIHtcclxuXHRcdHJldHVybiB0aGlzLm9uKCB0eXBlLCBmbiApO1xyXG5cdH07XHJcbn0pO1xyXG5cclxuXHJcblxyXG5cclxualF1ZXJ5LmV4cHIuZmlsdGVycy5hbmltYXRlZCA9IGZ1bmN0aW9uKCBlbGVtICkge1xyXG5cdHJldHVybiBqUXVlcnkuZ3JlcChqUXVlcnkudGltZXJzLCBmdW5jdGlvbiggZm4gKSB7XHJcblx0XHRyZXR1cm4gZWxlbSA9PT0gZm4uZWxlbTtcclxuXHR9KS5sZW5ndGg7XHJcbn07XHJcblxyXG5cclxuXHJcblxyXG5cclxudmFyIGRvY0VsZW0gPSB3aW5kb3cuZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xyXG5cclxuLyoqXHJcbiAqIEdldHMgYSB3aW5kb3cgZnJvbSBhbiBlbGVtZW50XHJcbiAqL1xyXG5mdW5jdGlvbiBnZXRXaW5kb3coIGVsZW0gKSB7XHJcblx0cmV0dXJuIGpRdWVyeS5pc1dpbmRvdyggZWxlbSApID9cclxuXHRcdGVsZW0gOlxyXG5cdFx0ZWxlbS5ub2RlVHlwZSA9PT0gOSA/XHJcblx0XHRcdGVsZW0uZGVmYXVsdFZpZXcgfHwgZWxlbS5wYXJlbnRXaW5kb3cgOlxyXG5cdFx0XHRmYWxzZTtcclxufVxyXG5cclxualF1ZXJ5Lm9mZnNldCA9IHtcclxuXHRzZXRPZmZzZXQ6IGZ1bmN0aW9uKCBlbGVtLCBvcHRpb25zLCBpICkge1xyXG5cdFx0dmFyIGN1clBvc2l0aW9uLCBjdXJMZWZ0LCBjdXJDU1NUb3AsIGN1clRvcCwgY3VyT2Zmc2V0LCBjdXJDU1NMZWZ0LCBjYWxjdWxhdGVQb3NpdGlvbixcclxuXHRcdFx0cG9zaXRpb24gPSBqUXVlcnkuY3NzKCBlbGVtLCBcInBvc2l0aW9uXCIgKSxcclxuXHRcdFx0Y3VyRWxlbSA9IGpRdWVyeSggZWxlbSApLFxyXG5cdFx0XHRwcm9wcyA9IHt9O1xyXG5cclxuXHRcdC8vIHNldCBwb3NpdGlvbiBmaXJzdCwgaW4tY2FzZSB0b3AvbGVmdCBhcmUgc2V0IGV2ZW4gb24gc3RhdGljIGVsZW1cclxuXHRcdGlmICggcG9zaXRpb24gPT09IFwic3RhdGljXCIgKSB7XHJcblx0XHRcdGVsZW0uc3R5bGUucG9zaXRpb24gPSBcInJlbGF0aXZlXCI7XHJcblx0XHR9XHJcblxyXG5cdFx0Y3VyT2Zmc2V0ID0gY3VyRWxlbS5vZmZzZXQoKTtcclxuXHRcdGN1ckNTU1RvcCA9IGpRdWVyeS5jc3MoIGVsZW0sIFwidG9wXCIgKTtcclxuXHRcdGN1ckNTU0xlZnQgPSBqUXVlcnkuY3NzKCBlbGVtLCBcImxlZnRcIiApO1xyXG5cdFx0Y2FsY3VsYXRlUG9zaXRpb24gPSAoIHBvc2l0aW9uID09PSBcImFic29sdXRlXCIgfHwgcG9zaXRpb24gPT09IFwiZml4ZWRcIiApICYmXHJcblx0XHRcdGpRdWVyeS5pbkFycmF5KFwiYXV0b1wiLCBbIGN1ckNTU1RvcCwgY3VyQ1NTTGVmdCBdICkgPiAtMTtcclxuXHJcblx0XHQvLyBuZWVkIHRvIGJlIGFibGUgdG8gY2FsY3VsYXRlIHBvc2l0aW9uIGlmIGVpdGhlciB0b3Agb3IgbGVmdCBpcyBhdXRvIGFuZCBwb3NpdGlvbiBpcyBlaXRoZXIgYWJzb2x1dGUgb3IgZml4ZWRcclxuXHRcdGlmICggY2FsY3VsYXRlUG9zaXRpb24gKSB7XHJcblx0XHRcdGN1clBvc2l0aW9uID0gY3VyRWxlbS5wb3NpdGlvbigpO1xyXG5cdFx0XHRjdXJUb3AgPSBjdXJQb3NpdGlvbi50b3A7XHJcblx0XHRcdGN1ckxlZnQgPSBjdXJQb3NpdGlvbi5sZWZ0O1xyXG5cdFx0fSBlbHNlIHtcclxuXHRcdFx0Y3VyVG9wID0gcGFyc2VGbG9hdCggY3VyQ1NTVG9wICkgfHwgMDtcclxuXHRcdFx0Y3VyTGVmdCA9IHBhcnNlRmxvYXQoIGN1ckNTU0xlZnQgKSB8fCAwO1xyXG5cdFx0fVxyXG5cclxuXHRcdGlmICggalF1ZXJ5LmlzRnVuY3Rpb24oIG9wdGlvbnMgKSApIHtcclxuXHRcdFx0b3B0aW9ucyA9IG9wdGlvbnMuY2FsbCggZWxlbSwgaSwgY3VyT2Zmc2V0ICk7XHJcblx0XHR9XHJcblxyXG5cdFx0aWYgKCBvcHRpb25zLnRvcCAhPSBudWxsICkge1xyXG5cdFx0XHRwcm9wcy50b3AgPSAoIG9wdGlvbnMudG9wIC0gY3VyT2Zmc2V0LnRvcCApICsgY3VyVG9wO1xyXG5cdFx0fVxyXG5cdFx0aWYgKCBvcHRpb25zLmxlZnQgIT0gbnVsbCApIHtcclxuXHRcdFx0cHJvcHMubGVmdCA9ICggb3B0aW9ucy5sZWZ0IC0gY3VyT2Zmc2V0LmxlZnQgKSArIGN1ckxlZnQ7XHJcblx0XHR9XHJcblxyXG5cdFx0aWYgKCBcInVzaW5nXCIgaW4gb3B0aW9ucyApIHtcclxuXHRcdFx0b3B0aW9ucy51c2luZy5jYWxsKCBlbGVtLCBwcm9wcyApO1xyXG5cdFx0fSBlbHNlIHtcclxuXHRcdFx0Y3VyRWxlbS5jc3MoIHByb3BzICk7XHJcblx0XHR9XHJcblx0fVxyXG59O1xyXG5cclxualF1ZXJ5LmZuLmV4dGVuZCh7XHJcblx0b2Zmc2V0OiBmdW5jdGlvbiggb3B0aW9ucyApIHtcclxuXHRcdGlmICggYXJndW1lbnRzLmxlbmd0aCApIHtcclxuXHRcdFx0cmV0dXJuIG9wdGlvbnMgPT09IHVuZGVmaW5lZCA/XHJcblx0XHRcdFx0dGhpcyA6XHJcblx0XHRcdFx0dGhpcy5lYWNoKGZ1bmN0aW9uKCBpICkge1xyXG5cdFx0XHRcdFx0alF1ZXJ5Lm9mZnNldC5zZXRPZmZzZXQoIHRoaXMsIG9wdGlvbnMsIGkgKTtcclxuXHRcdFx0XHR9KTtcclxuXHRcdH1cclxuXHJcblx0XHR2YXIgZG9jRWxlbSwgd2luLFxyXG5cdFx0XHRib3ggPSB7IHRvcDogMCwgbGVmdDogMCB9LFxyXG5cdFx0XHRlbGVtID0gdGhpc1sgMCBdLFxyXG5cdFx0XHRkb2MgPSBlbGVtICYmIGVsZW0ub3duZXJEb2N1bWVudDtcclxuXHJcblx0XHRpZiAoICFkb2MgKSB7XHJcblx0XHRcdHJldHVybjtcclxuXHRcdH1cclxuXHJcblx0XHRkb2NFbGVtID0gZG9jLmRvY3VtZW50RWxlbWVudDtcclxuXHJcblx0XHQvLyBNYWtlIHN1cmUgaXQncyBub3QgYSBkaXNjb25uZWN0ZWQgRE9NIG5vZGVcclxuXHRcdGlmICggIWpRdWVyeS5jb250YWlucyggZG9jRWxlbSwgZWxlbSApICkge1xyXG5cdFx0XHRyZXR1cm4gYm94O1xyXG5cdFx0fVxyXG5cclxuXHRcdC8vIElmIHdlIGRvbid0IGhhdmUgZ0JDUiwganVzdCB1c2UgMCwwIHJhdGhlciB0aGFuIGVycm9yXHJcblx0XHQvLyBCbGFja0JlcnJ5IDUsIGlPUyAzIChvcmlnaW5hbCBpUGhvbmUpXHJcblx0XHRpZiAoIHR5cGVvZiBlbGVtLmdldEJvdW5kaW5nQ2xpZW50UmVjdCAhPT0gc3RydW5kZWZpbmVkICkge1xyXG5cdFx0XHRib3ggPSBlbGVtLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xyXG5cdFx0fVxyXG5cdFx0d2luID0gZ2V0V2luZG93KCBkb2MgKTtcclxuXHRcdHJldHVybiB7XHJcblx0XHRcdHRvcDogYm94LnRvcCAgKyAoIHdpbi5wYWdlWU9mZnNldCB8fCBkb2NFbGVtLnNjcm9sbFRvcCApICAtICggZG9jRWxlbS5jbGllbnRUb3AgIHx8IDAgKSxcclxuXHRcdFx0bGVmdDogYm94LmxlZnQgKyAoIHdpbi5wYWdlWE9mZnNldCB8fCBkb2NFbGVtLnNjcm9sbExlZnQgKSAtICggZG9jRWxlbS5jbGllbnRMZWZ0IHx8IDAgKVxyXG5cdFx0fTtcclxuXHR9LFxyXG5cclxuXHRwb3NpdGlvbjogZnVuY3Rpb24oKSB7XHJcblx0XHRpZiAoICF0aGlzWyAwIF0gKSB7XHJcblx0XHRcdHJldHVybjtcclxuXHRcdH1cclxuXHJcblx0XHR2YXIgb2Zmc2V0UGFyZW50LCBvZmZzZXQsXHJcblx0XHRcdHBhcmVudE9mZnNldCA9IHsgdG9wOiAwLCBsZWZ0OiAwIH0sXHJcblx0XHRcdGVsZW0gPSB0aGlzWyAwIF07XHJcblxyXG5cdFx0Ly8gZml4ZWQgZWxlbWVudHMgYXJlIG9mZnNldCBmcm9tIHdpbmRvdyAocGFyZW50T2Zmc2V0ID0ge3RvcDowLCBsZWZ0OiAwfSwgYmVjYXVzZSBpdCBpcyBpdHMgb25seSBvZmZzZXQgcGFyZW50XHJcblx0XHRpZiAoIGpRdWVyeS5jc3MoIGVsZW0sIFwicG9zaXRpb25cIiApID09PSBcImZpeGVkXCIgKSB7XHJcblx0XHRcdC8vIHdlIGFzc3VtZSB0aGF0IGdldEJvdW5kaW5nQ2xpZW50UmVjdCBpcyBhdmFpbGFibGUgd2hlbiBjb21wdXRlZCBwb3NpdGlvbiBpcyBmaXhlZFxyXG5cdFx0XHRvZmZzZXQgPSBlbGVtLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xyXG5cdFx0fSBlbHNlIHtcclxuXHRcdFx0Ly8gR2V0ICpyZWFsKiBvZmZzZXRQYXJlbnRcclxuXHRcdFx0b2Zmc2V0UGFyZW50ID0gdGhpcy5vZmZzZXRQYXJlbnQoKTtcclxuXHJcblx0XHRcdC8vIEdldCBjb3JyZWN0IG9mZnNldHNcclxuXHRcdFx0b2Zmc2V0ID0gdGhpcy5vZmZzZXQoKTtcclxuXHRcdFx0aWYgKCAhalF1ZXJ5Lm5vZGVOYW1lKCBvZmZzZXRQYXJlbnRbIDAgXSwgXCJodG1sXCIgKSApIHtcclxuXHRcdFx0XHRwYXJlbnRPZmZzZXQgPSBvZmZzZXRQYXJlbnQub2Zmc2V0KCk7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdC8vIEFkZCBvZmZzZXRQYXJlbnQgYm9yZGVyc1xyXG5cdFx0XHRwYXJlbnRPZmZzZXQudG9wICArPSBqUXVlcnkuY3NzKCBvZmZzZXRQYXJlbnRbIDAgXSwgXCJib3JkZXJUb3BXaWR0aFwiLCB0cnVlICk7XHJcblx0XHRcdHBhcmVudE9mZnNldC5sZWZ0ICs9IGpRdWVyeS5jc3MoIG9mZnNldFBhcmVudFsgMCBdLCBcImJvcmRlckxlZnRXaWR0aFwiLCB0cnVlICk7XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gU3VidHJhY3QgcGFyZW50IG9mZnNldHMgYW5kIGVsZW1lbnQgbWFyZ2luc1xyXG5cdFx0Ly8gbm90ZTogd2hlbiBhbiBlbGVtZW50IGhhcyBtYXJnaW46IGF1dG8gdGhlIG9mZnNldExlZnQgYW5kIG1hcmdpbkxlZnRcclxuXHRcdC8vIGFyZSB0aGUgc2FtZSBpbiBTYWZhcmkgY2F1c2luZyBvZmZzZXQubGVmdCB0byBpbmNvcnJlY3RseSBiZSAwXHJcblx0XHRyZXR1cm4ge1xyXG5cdFx0XHR0b3A6ICBvZmZzZXQudG9wICAtIHBhcmVudE9mZnNldC50b3AgLSBqUXVlcnkuY3NzKCBlbGVtLCBcIm1hcmdpblRvcFwiLCB0cnVlICksXHJcblx0XHRcdGxlZnQ6IG9mZnNldC5sZWZ0IC0gcGFyZW50T2Zmc2V0LmxlZnQgLSBqUXVlcnkuY3NzKCBlbGVtLCBcIm1hcmdpbkxlZnRcIiwgdHJ1ZSlcclxuXHRcdH07XHJcblx0fSxcclxuXHJcblx0b2Zmc2V0UGFyZW50OiBmdW5jdGlvbigpIHtcclxuXHRcdHJldHVybiB0aGlzLm1hcChmdW5jdGlvbigpIHtcclxuXHRcdFx0dmFyIG9mZnNldFBhcmVudCA9IHRoaXMub2Zmc2V0UGFyZW50IHx8IGRvY0VsZW07XHJcblxyXG5cdFx0XHR3aGlsZSAoIG9mZnNldFBhcmVudCAmJiAoICFqUXVlcnkubm9kZU5hbWUoIG9mZnNldFBhcmVudCwgXCJodG1sXCIgKSAmJiBqUXVlcnkuY3NzKCBvZmZzZXRQYXJlbnQsIFwicG9zaXRpb25cIiApID09PSBcInN0YXRpY1wiICkgKSB7XHJcblx0XHRcdFx0b2Zmc2V0UGFyZW50ID0gb2Zmc2V0UGFyZW50Lm9mZnNldFBhcmVudDtcclxuXHRcdFx0fVxyXG5cdFx0XHRyZXR1cm4gb2Zmc2V0UGFyZW50IHx8IGRvY0VsZW07XHJcblx0XHR9KTtcclxuXHR9XHJcbn0pO1xyXG5cclxuLy8gQ3JlYXRlIHNjcm9sbExlZnQgYW5kIHNjcm9sbFRvcCBtZXRob2RzXHJcbmpRdWVyeS5lYWNoKCB7IHNjcm9sbExlZnQ6IFwicGFnZVhPZmZzZXRcIiwgc2Nyb2xsVG9wOiBcInBhZ2VZT2Zmc2V0XCIgfSwgZnVuY3Rpb24oIG1ldGhvZCwgcHJvcCApIHtcclxuXHR2YXIgdG9wID0gL1kvLnRlc3QoIHByb3AgKTtcclxuXHJcblx0alF1ZXJ5LmZuWyBtZXRob2QgXSA9IGZ1bmN0aW9uKCB2YWwgKSB7XHJcblx0XHRyZXR1cm4gYWNjZXNzKCB0aGlzLCBmdW5jdGlvbiggZWxlbSwgbWV0aG9kLCB2YWwgKSB7XHJcblx0XHRcdHZhciB3aW4gPSBnZXRXaW5kb3coIGVsZW0gKTtcclxuXHJcblx0XHRcdGlmICggdmFsID09PSB1bmRlZmluZWQgKSB7XHJcblx0XHRcdFx0cmV0dXJuIHdpbiA/IChwcm9wIGluIHdpbikgPyB3aW5bIHByb3AgXSA6XHJcblx0XHRcdFx0XHR3aW4uZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50WyBtZXRob2QgXSA6XHJcblx0XHRcdFx0XHRlbGVtWyBtZXRob2QgXTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0aWYgKCB3aW4gKSB7XHJcblx0XHRcdFx0d2luLnNjcm9sbFRvKFxyXG5cdFx0XHRcdFx0IXRvcCA/IHZhbCA6IGpRdWVyeSggd2luICkuc2Nyb2xsTGVmdCgpLFxyXG5cdFx0XHRcdFx0dG9wID8gdmFsIDogalF1ZXJ5KCB3aW4gKS5zY3JvbGxUb3AoKVxyXG5cdFx0XHRcdCk7XHJcblxyXG5cdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdGVsZW1bIG1ldGhvZCBdID0gdmFsO1xyXG5cdFx0XHR9XHJcblx0XHR9LCBtZXRob2QsIHZhbCwgYXJndW1lbnRzLmxlbmd0aCwgbnVsbCApO1xyXG5cdH07XHJcbn0pO1xyXG5cclxuLy8gQWRkIHRoZSB0b3AvbGVmdCBjc3NIb29rcyB1c2luZyBqUXVlcnkuZm4ucG9zaXRpb25cclxuLy8gV2Via2l0IGJ1ZzogaHR0cHM6Ly9idWdzLndlYmtpdC5vcmcvc2hvd19idWcuY2dpP2lkPTI5MDg0XHJcbi8vIGdldENvbXB1dGVkU3R5bGUgcmV0dXJucyBwZXJjZW50IHdoZW4gc3BlY2lmaWVkIGZvciB0b3AvbGVmdC9ib3R0b20vcmlnaHRcclxuLy8gcmF0aGVyIHRoYW4gbWFrZSB0aGUgY3NzIG1vZHVsZSBkZXBlbmQgb24gdGhlIG9mZnNldCBtb2R1bGUsIHdlIGp1c3QgY2hlY2sgZm9yIGl0IGhlcmVcclxualF1ZXJ5LmVhY2goIFsgXCJ0b3BcIiwgXCJsZWZ0XCIgXSwgZnVuY3Rpb24oIGksIHByb3AgKSB7XHJcblx0alF1ZXJ5LmNzc0hvb2tzWyBwcm9wIF0gPSBhZGRHZXRIb29rSWYoIHN1cHBvcnQucGl4ZWxQb3NpdGlvbixcclxuXHRcdGZ1bmN0aW9uKCBlbGVtLCBjb21wdXRlZCApIHtcclxuXHRcdFx0aWYgKCBjb21wdXRlZCApIHtcclxuXHRcdFx0XHRjb21wdXRlZCA9IGN1ckNTUyggZWxlbSwgcHJvcCApO1xyXG5cdFx0XHRcdC8vIGlmIGN1ckNTUyByZXR1cm5zIHBlcmNlbnRhZ2UsIGZhbGxiYWNrIHRvIG9mZnNldFxyXG5cdFx0XHRcdHJldHVybiBybnVtbm9ucHgudGVzdCggY29tcHV0ZWQgKSA/XHJcblx0XHRcdFx0XHRqUXVlcnkoIGVsZW0gKS5wb3NpdGlvbigpWyBwcm9wIF0gKyBcInB4XCIgOlxyXG5cdFx0XHRcdFx0Y29tcHV0ZWQ7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHQpO1xyXG59KTtcclxuXHJcblxyXG4vLyBDcmVhdGUgaW5uZXJIZWlnaHQsIGlubmVyV2lkdGgsIGhlaWdodCwgd2lkdGgsIG91dGVySGVpZ2h0IGFuZCBvdXRlcldpZHRoIG1ldGhvZHNcclxualF1ZXJ5LmVhY2goIHsgSGVpZ2h0OiBcImhlaWdodFwiLCBXaWR0aDogXCJ3aWR0aFwiIH0sIGZ1bmN0aW9uKCBuYW1lLCB0eXBlICkge1xyXG5cdGpRdWVyeS5lYWNoKCB7IHBhZGRpbmc6IFwiaW5uZXJcIiArIG5hbWUsIGNvbnRlbnQ6IHR5cGUsIFwiXCI6IFwib3V0ZXJcIiArIG5hbWUgfSwgZnVuY3Rpb24oIGRlZmF1bHRFeHRyYSwgZnVuY05hbWUgKSB7XHJcblx0XHQvLyBtYXJnaW4gaXMgb25seSBmb3Igb3V0ZXJIZWlnaHQsIG91dGVyV2lkdGhcclxuXHRcdGpRdWVyeS5mblsgZnVuY05hbWUgXSA9IGZ1bmN0aW9uKCBtYXJnaW4sIHZhbHVlICkge1xyXG5cdFx0XHR2YXIgY2hhaW5hYmxlID0gYXJndW1lbnRzLmxlbmd0aCAmJiAoIGRlZmF1bHRFeHRyYSB8fCB0eXBlb2YgbWFyZ2luICE9PSBcImJvb2xlYW5cIiApLFxyXG5cdFx0XHRcdGV4dHJhID0gZGVmYXVsdEV4dHJhIHx8ICggbWFyZ2luID09PSB0cnVlIHx8IHZhbHVlID09PSB0cnVlID8gXCJtYXJnaW5cIiA6IFwiYm9yZGVyXCIgKTtcclxuXHJcblx0XHRcdHJldHVybiBhY2Nlc3MoIHRoaXMsIGZ1bmN0aW9uKCBlbGVtLCB0eXBlLCB2YWx1ZSApIHtcclxuXHRcdFx0XHR2YXIgZG9jO1xyXG5cclxuXHRcdFx0XHRpZiAoIGpRdWVyeS5pc1dpbmRvdyggZWxlbSApICkge1xyXG5cdFx0XHRcdFx0Ly8gQXMgb2YgNS84LzIwMTIgdGhpcyB3aWxsIHlpZWxkIGluY29ycmVjdCByZXN1bHRzIGZvciBNb2JpbGUgU2FmYXJpLCBidXQgdGhlcmVcclxuXHRcdFx0XHRcdC8vIGlzbid0IGEgd2hvbGUgbG90IHdlIGNhbiBkby4gU2VlIHB1bGwgcmVxdWVzdCBhdCB0aGlzIFVSTCBmb3IgZGlzY3Vzc2lvbjpcclxuXHRcdFx0XHRcdC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9qcXVlcnkvanF1ZXJ5L3B1bGwvNzY0XHJcblx0XHRcdFx0XHRyZXR1cm4gZWxlbS5kb2N1bWVudC5kb2N1bWVudEVsZW1lbnRbIFwiY2xpZW50XCIgKyBuYW1lIF07XHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHQvLyBHZXQgZG9jdW1lbnQgd2lkdGggb3IgaGVpZ2h0XHJcblx0XHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSA5ICkge1xyXG5cdFx0XHRcdFx0ZG9jID0gZWxlbS5kb2N1bWVudEVsZW1lbnQ7XHJcblxyXG5cdFx0XHRcdFx0Ly8gRWl0aGVyIHNjcm9sbFtXaWR0aC9IZWlnaHRdIG9yIG9mZnNldFtXaWR0aC9IZWlnaHRdIG9yIGNsaWVudFtXaWR0aC9IZWlnaHRdLCB3aGljaGV2ZXIgaXMgZ3JlYXRlc3RcclxuXHRcdFx0XHRcdC8vIHVuZm9ydHVuYXRlbHksIHRoaXMgY2F1c2VzIGJ1ZyAjMzgzOCBpbiBJRTYvOCBvbmx5LCBidXQgdGhlcmUgaXMgY3VycmVudGx5IG5vIGdvb2QsIHNtYWxsIHdheSB0byBmaXggaXQuXHJcblx0XHRcdFx0XHRyZXR1cm4gTWF0aC5tYXgoXHJcblx0XHRcdFx0XHRcdGVsZW0uYm9keVsgXCJzY3JvbGxcIiArIG5hbWUgXSwgZG9jWyBcInNjcm9sbFwiICsgbmFtZSBdLFxyXG5cdFx0XHRcdFx0XHRlbGVtLmJvZHlbIFwib2Zmc2V0XCIgKyBuYW1lIF0sIGRvY1sgXCJvZmZzZXRcIiArIG5hbWUgXSxcclxuXHRcdFx0XHRcdFx0ZG9jWyBcImNsaWVudFwiICsgbmFtZSBdXHJcblx0XHRcdFx0XHQpO1xyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0cmV0dXJuIHZhbHVlID09PSB1bmRlZmluZWQgP1xyXG5cdFx0XHRcdFx0Ly8gR2V0IHdpZHRoIG9yIGhlaWdodCBvbiB0aGUgZWxlbWVudCwgcmVxdWVzdGluZyBidXQgbm90IGZvcmNpbmcgcGFyc2VGbG9hdFxyXG5cdFx0XHRcdFx0alF1ZXJ5LmNzcyggZWxlbSwgdHlwZSwgZXh0cmEgKSA6XHJcblxyXG5cdFx0XHRcdFx0Ly8gU2V0IHdpZHRoIG9yIGhlaWdodCBvbiB0aGUgZWxlbWVudFxyXG5cdFx0XHRcdFx0alF1ZXJ5LnN0eWxlKCBlbGVtLCB0eXBlLCB2YWx1ZSwgZXh0cmEgKTtcclxuXHRcdFx0fSwgdHlwZSwgY2hhaW5hYmxlID8gbWFyZ2luIDogdW5kZWZpbmVkLCBjaGFpbmFibGUsIG51bGwgKTtcclxuXHRcdH07XHJcblx0fSk7XHJcbn0pO1xyXG5cclxuXHJcbi8vIFRoZSBudW1iZXIgb2YgZWxlbWVudHMgY29udGFpbmVkIGluIHRoZSBtYXRjaGVkIGVsZW1lbnQgc2V0XHJcbmpRdWVyeS5mbi5zaXplID0gZnVuY3Rpb24oKSB7XHJcblx0cmV0dXJuIHRoaXMubGVuZ3RoO1xyXG59O1xyXG5cclxualF1ZXJ5LmZuLmFuZFNlbGYgPSBqUXVlcnkuZm4uYWRkQmFjaztcclxuXHJcblxyXG5cclxuXHJcbi8vIFJlZ2lzdGVyIGFzIGEgbmFtZWQgQU1EIG1vZHVsZSwgc2luY2UgalF1ZXJ5IGNhbiBiZSBjb25jYXRlbmF0ZWQgd2l0aCBvdGhlclxyXG4vLyBmaWxlcyB0aGF0IG1heSB1c2UgZGVmaW5lLCBidXQgbm90IHZpYSBhIHByb3BlciBjb25jYXRlbmF0aW9uIHNjcmlwdCB0aGF0XHJcbi8vIHVuZGVyc3RhbmRzIGFub255bW91cyBBTUQgbW9kdWxlcy4gQSBuYW1lZCBBTUQgaXMgc2FmZXN0IGFuZCBtb3N0IHJvYnVzdFxyXG4vLyB3YXkgdG8gcmVnaXN0ZXIuIExvd2VyY2FzZSBqcXVlcnkgaXMgdXNlZCBiZWNhdXNlIEFNRCBtb2R1bGUgbmFtZXMgYXJlXHJcbi8vIGRlcml2ZWQgZnJvbSBmaWxlIG5hbWVzLCBhbmQgalF1ZXJ5IGlzIG5vcm1hbGx5IGRlbGl2ZXJlZCBpbiBhIGxvd2VyY2FzZVxyXG4vLyBmaWxlIG5hbWUuIERvIHRoaXMgYWZ0ZXIgY3JlYXRpbmcgdGhlIGdsb2JhbCBzbyB0aGF0IGlmIGFuIEFNRCBtb2R1bGUgd2FudHNcclxuLy8gdG8gY2FsbCBub0NvbmZsaWN0IHRvIGhpZGUgdGhpcyB2ZXJzaW9uIG9mIGpRdWVyeSwgaXQgd2lsbCB3b3JrLlxyXG5cclxuLy8gTm90ZSB0aGF0IGZvciBtYXhpbXVtIHBvcnRhYmlsaXR5LCBsaWJyYXJpZXMgdGhhdCBhcmUgbm90IGpRdWVyeSBzaG91bGRcclxuLy8gZGVjbGFyZSB0aGVtc2VsdmVzIGFzIGFub255bW91cyBtb2R1bGVzLCBhbmQgYXZvaWQgc2V0dGluZyBhIGdsb2JhbCBpZiBhblxyXG4vLyBBTUQgbG9hZGVyIGlzIHByZXNlbnQuIGpRdWVyeSBpcyBhIHNwZWNpYWwgY2FzZS4gRm9yIG1vcmUgaW5mb3JtYXRpb24sIHNlZVxyXG4vLyBodHRwczovL2dpdGh1Yi5jb20vanJidXJrZS9yZXF1aXJlanMvd2lraS9VcGRhdGluZy1leGlzdGluZy1saWJyYXJpZXMjd2lraS1hbm9uXHJcblxyXG5pZiAoIHR5cGVvZiBkZWZpbmUgPT09IFwiZnVuY3Rpb25cIiAmJiBkZWZpbmUuYW1kICkge1xyXG5cdGRlZmluZSggXCJqcXVlcnlcIiwgW10sIGZ1bmN0aW9uKCkge1xyXG5cdFx0cmV0dXJuIGpRdWVyeTtcclxuXHR9KTtcclxufVxyXG5cclxuXHJcblxyXG5cclxudmFyXHJcblx0Ly8gTWFwIG92ZXIgalF1ZXJ5IGluIGNhc2Ugb2Ygb3ZlcndyaXRlXHJcblx0X2pRdWVyeSA9IHdpbmRvdy5qUXVlcnksXHJcblxyXG5cdC8vIE1hcCBvdmVyIHRoZSAkIGluIGNhc2Ugb2Ygb3ZlcndyaXRlXHJcblx0XyQgPSB3aW5kb3cuJDtcclxuXHJcbmpRdWVyeS5ub0NvbmZsaWN0ID0gZnVuY3Rpb24oIGRlZXAgKSB7XHJcblx0aWYgKCB3aW5kb3cuJCA9PT0galF1ZXJ5ICkge1xyXG5cdFx0d2luZG93LiQgPSBfJDtcclxuXHR9XHJcblxyXG5cdGlmICggZGVlcCAmJiB3aW5kb3cualF1ZXJ5ID09PSBqUXVlcnkgKSB7XHJcblx0XHR3aW5kb3cualF1ZXJ5ID0gX2pRdWVyeTtcclxuXHR9XHJcblxyXG5cdHJldHVybiBqUXVlcnk7XHJcbn07XHJcblxyXG4vLyBFeHBvc2UgalF1ZXJ5IGFuZCAkIGlkZW50aWZpZXJzLCBldmVuIGluXHJcbi8vIEFNRCAoIzcxMDIjY29tbWVudDoxMCwgaHR0cHM6Ly9naXRodWIuY29tL2pxdWVyeS9qcXVlcnkvcHVsbC81NTcpXHJcbi8vIGFuZCBDb21tb25KUyBmb3IgYnJvd3NlciBlbXVsYXRvcnMgKCMxMzU2NilcclxuaWYgKCB0eXBlb2Ygbm9HbG9iYWwgPT09IHN0cnVuZGVmaW5lZCApIHtcclxuXHR3aW5kb3cualF1ZXJ5ID0gd2luZG93LiQgPSBqUXVlcnk7XHJcbn1cclxuXHJcblxyXG5cclxuXHJcbnJldHVybiBqUXVlcnk7XHJcblxyXG59KSk7XHJcbi8qISBqQ2Fyb3VzZWwgLSB2MC4zLjQgLSAyMDE1LTA5LTIzXHJcbiogaHR0cDovL3NvcmdhbGxhLmNvbS9qY2Fyb3VzZWwvXHJcbiogQ29weXJpZ2h0IChjKSAyMDA2LTIwMTUgSmFuIFNvcmdhbGxhOyBMaWNlbnNlZCBNSVQgKi9cclxuKGZ1bmN0aW9uKCQpIHtcclxuICAgICd1c2Ugc3RyaWN0JztcclxuXHJcbiAgICB2YXIgakNhcm91c2VsID0gJC5qQ2Fyb3VzZWwgPSB7fTtcclxuXHJcbiAgICBqQ2Fyb3VzZWwudmVyc2lvbiA9ICcwLjMuNCc7XHJcblxyXG4gICAgdmFyIHJSZWxhdGl2ZVRhcmdldCA9IC9eKFsrXFwtXT0pPyguKykkLztcclxuXHJcbiAgICBqQ2Fyb3VzZWwucGFyc2VUYXJnZXQgPSBmdW5jdGlvbih0YXJnZXQpIHtcclxuICAgICAgICB2YXIgcmVsYXRpdmUgPSBmYWxzZSxcclxuICAgICAgICAgICAgcGFydHMgICAgPSB0eXBlb2YgdGFyZ2V0ICE9PSAnb2JqZWN0JyA/XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIHJSZWxhdGl2ZVRhcmdldC5leGVjKHRhcmdldCkgOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICBudWxsO1xyXG5cclxuICAgICAgICBpZiAocGFydHMpIHtcclxuICAgICAgICAgICAgdGFyZ2V0ID0gcGFyc2VJbnQocGFydHNbMl0sIDEwKSB8fCAwO1xyXG5cclxuICAgICAgICAgICAgaWYgKHBhcnRzWzFdKSB7XHJcbiAgICAgICAgICAgICAgICByZWxhdGl2ZSA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICBpZiAocGFydHNbMV0gPT09ICctPScpIHtcclxuICAgICAgICAgICAgICAgICAgICB0YXJnZXQgKj0gLTE7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiB0YXJnZXQgIT09ICdvYmplY3QnKSB7XHJcbiAgICAgICAgICAgIHRhcmdldCA9IHBhcnNlSW50KHRhcmdldCwgMTApIHx8IDA7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICB0YXJnZXQ6IHRhcmdldCxcclxuICAgICAgICAgICAgcmVsYXRpdmU6IHJlbGF0aXZlXHJcbiAgICAgICAgfTtcclxuICAgIH07XHJcblxyXG4gICAgakNhcm91c2VsLmRldGVjdENhcm91c2VsID0gZnVuY3Rpb24oZWxlbWVudCkge1xyXG4gICAgICAgIHZhciBjYXJvdXNlbDtcclxuXHJcbiAgICAgICAgd2hpbGUgKGVsZW1lbnQubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICBjYXJvdXNlbCA9IGVsZW1lbnQuZmlsdGVyKCdbZGF0YS1qY2Fyb3VzZWxdJyk7XHJcblxyXG4gICAgICAgICAgICBpZiAoY2Fyb3VzZWwubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGNhcm91c2VsO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBjYXJvdXNlbCA9IGVsZW1lbnQuZmluZCgnW2RhdGEtamNhcm91c2VsXScpO1xyXG5cclxuICAgICAgICAgICAgaWYgKGNhcm91c2VsLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBjYXJvdXNlbDtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgZWxlbWVudCA9IGVsZW1lbnQucGFyZW50KCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgIH07XHJcblxyXG4gICAgakNhcm91c2VsLmJhc2UgPSBmdW5jdGlvbihwbHVnaW5OYW1lKSB7XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgdmVyc2lvbjogIGpDYXJvdXNlbC52ZXJzaW9uLFxyXG4gICAgICAgICAgICBfb3B0aW9uczogIHt9LFxyXG4gICAgICAgICAgICBfZWxlbWVudDogIG51bGwsXHJcbiAgICAgICAgICAgIF9jYXJvdXNlbDogbnVsbCxcclxuICAgICAgICAgICAgX2luaXQ6ICAgICAkLm5vb3AsXHJcbiAgICAgICAgICAgIF9jcmVhdGU6ICAgJC5ub29wLFxyXG4gICAgICAgICAgICBfZGVzdHJveTogICQubm9vcCxcclxuICAgICAgICAgICAgX3JlbG9hZDogICAkLm5vb3AsXHJcbiAgICAgICAgICAgIGNyZWF0ZTogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9lbGVtZW50XHJcbiAgICAgICAgICAgICAgICAgICAgLmF0dHIoJ2RhdGEtJyArIHBsdWdpbk5hbWUudG9Mb3dlckNhc2UoKSwgdHJ1ZSlcclxuICAgICAgICAgICAgICAgICAgICAuZGF0YShwbHVnaW5OYW1lLCB0aGlzKTtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoZmFsc2UgPT09IHRoaXMuX3RyaWdnZXIoJ2NyZWF0ZScpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgdGhpcy5fY3JlYXRlKCk7XHJcblxyXG4gICAgICAgICAgICAgICAgdGhpcy5fdHJpZ2dlcignY3JlYXRlZW5kJyk7XHJcblxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGRlc3Ryb3k6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKGZhbHNlID09PSB0aGlzLl90cmlnZ2VyKCdkZXN0cm95JykpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcztcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICB0aGlzLl9kZXN0cm95KCk7XHJcblxyXG4gICAgICAgICAgICAgICAgdGhpcy5fdHJpZ2dlcignZGVzdHJveWVuZCcpO1xyXG5cclxuICAgICAgICAgICAgICAgIHRoaXMuX2VsZW1lbnRcclxuICAgICAgICAgICAgICAgICAgICAucmVtb3ZlRGF0YShwbHVnaW5OYW1lKVxyXG4gICAgICAgICAgICAgICAgICAgIC5yZW1vdmVBdHRyKCdkYXRhLScgKyBwbHVnaW5OYW1lLnRvTG93ZXJDYXNlKCkpO1xyXG5cclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICByZWxvYWQ6IGZ1bmN0aW9uKG9wdGlvbnMpIHtcclxuICAgICAgICAgICAgICAgIGlmIChmYWxzZSA9PT0gdGhpcy5fdHJpZ2dlcigncmVsb2FkJykpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcztcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBpZiAob3B0aW9ucykge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMub3B0aW9ucyhvcHRpb25zKTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICB0aGlzLl9yZWxvYWQoKTtcclxuXHJcbiAgICAgICAgICAgICAgICB0aGlzLl90cmlnZ2VyKCdyZWxvYWRlbmQnKTtcclxuXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcztcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgZWxlbWVudDogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fZWxlbWVudDtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgb3B0aW9uczogZnVuY3Rpb24oa2V5LCB2YWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDApIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gJC5leHRlbmQoe30sIHRoaXMuX29wdGlvbnMpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2Yga2V5ID09PSAnc3RyaW5nJykge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICd1bmRlZmluZWQnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0eXBlb2YgdGhpcy5fb3B0aW9uc1trZXldID09PSAndW5kZWZpbmVkJyA/XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbnVsbCA6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fb3B0aW9uc1trZXldO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fb3B0aW9uc1trZXldID0gdmFsdWU7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX29wdGlvbnMgPSAkLmV4dGVuZCh7fSwgdGhpcy5fb3B0aW9ucywga2V5KTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcztcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgY2Fyb3VzZWw6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKCF0aGlzLl9jYXJvdXNlbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2Nhcm91c2VsID0gakNhcm91c2VsLmRldGVjdENhcm91c2VsKHRoaXMub3B0aW9ucygnY2Fyb3VzZWwnKSB8fCB0aGlzLl9lbGVtZW50KTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCF0aGlzLl9jYXJvdXNlbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkLmVycm9yKCdDb3VsZCBub3QgZGV0ZWN0IGNhcm91c2VsIGZvciBwbHVnaW4gXCInICsgcGx1Z2luTmFtZSArICdcIicpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fY2Fyb3VzZWw7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIF90cmlnZ2VyOiBmdW5jdGlvbih0eXBlLCBlbGVtZW50LCBkYXRhKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgZXZlbnQsXHJcbiAgICAgICAgICAgICAgICAgICAgZGVmYXVsdFByZXZlbnRlZCA9IGZhbHNlO1xyXG5cclxuICAgICAgICAgICAgICAgIGRhdGEgPSBbdGhpc10uY29uY2F0KGRhdGEgfHwgW10pO1xyXG5cclxuICAgICAgICAgICAgICAgIChlbGVtZW50IHx8IHRoaXMuX2VsZW1lbnQpLmVhY2goZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZXZlbnQgPSAkLkV2ZW50KChwbHVnaW5OYW1lICsgJzonICsgdHlwZSkudG9Mb3dlckNhc2UoKSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICQodGhpcykudHJpZ2dlcihldmVudCwgZGF0YSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChldmVudC5pc0RlZmF1bHRQcmV2ZW50ZWQoKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0UHJldmVudGVkID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gIWRlZmF1bHRQcmV2ZW50ZWQ7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG4gICAgfTtcclxuXHJcbiAgICBqQ2Fyb3VzZWwucGx1Z2luID0gZnVuY3Rpb24ocGx1Z2luTmFtZSwgcGx1Z2luUHJvdG90eXBlKSB7XHJcbiAgICAgICAgdmFyIFBsdWdpbiA9ICRbcGx1Z2luTmFtZV0gPSBmdW5jdGlvbihlbGVtZW50LCBvcHRpb25zKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX2VsZW1lbnQgPSAkKGVsZW1lbnQpO1xyXG4gICAgICAgICAgICB0aGlzLm9wdGlvbnMob3B0aW9ucyk7XHJcblxyXG4gICAgICAgICAgICB0aGlzLl9pbml0KCk7XHJcbiAgICAgICAgICAgIHRoaXMuY3JlYXRlKCk7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgUGx1Z2luLmZuID0gUGx1Z2luLnByb3RvdHlwZSA9ICQuZXh0ZW5kKFxyXG4gICAgICAgICAgICB7fSxcclxuICAgICAgICAgICAgakNhcm91c2VsLmJhc2UocGx1Z2luTmFtZSksXHJcbiAgICAgICAgICAgIHBsdWdpblByb3RvdHlwZVxyXG4gICAgICAgICk7XHJcblxyXG4gICAgICAgICQuZm5bcGx1Z2luTmFtZV0gPSBmdW5jdGlvbihvcHRpb25zKSB7XHJcbiAgICAgICAgICAgIHZhciBhcmdzICAgICAgICA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywgMSksXHJcbiAgICAgICAgICAgICAgICByZXR1cm5WYWx1ZSA9IHRoaXM7XHJcblxyXG4gICAgICAgICAgICBpZiAodHlwZW9mIG9wdGlvbnMgPT09ICdzdHJpbmcnKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmVhY2goZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGluc3RhbmNlID0gJCh0aGlzKS5kYXRhKHBsdWdpbk5hbWUpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAoIWluc3RhbmNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAkLmVycm9yKFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ0Nhbm5vdCBjYWxsIG1ldGhvZHMgb24gJyArIHBsdWdpbk5hbWUgKyAnIHByaW9yIHRvIGluaXRpYWxpemF0aW9uOyAnICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdhdHRlbXB0ZWQgdG8gY2FsbCBtZXRob2QgXCInICsgb3B0aW9ucyArICdcIidcclxuICAgICAgICAgICAgICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmICghJC5pc0Z1bmN0aW9uKGluc3RhbmNlW29wdGlvbnNdKSB8fCBvcHRpb25zLmNoYXJBdCgwKSA9PT0gJ18nKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAkLmVycm9yKFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ05vIHN1Y2ggbWV0aG9kIFwiJyArIG9wdGlvbnMgKyAnXCIgZm9yICcgKyBwbHVnaW5OYW1lICsgJyBpbnN0YW5jZSdcclxuICAgICAgICAgICAgICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHZhciBtZXRob2RWYWx1ZSA9IGluc3RhbmNlW29wdGlvbnNdLmFwcGx5KGluc3RhbmNlLCBhcmdzKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG1ldGhvZFZhbHVlICE9PSBpbnN0YW5jZSAmJiB0eXBlb2YgbWV0aG9kVmFsdWUgIT09ICd1bmRlZmluZWQnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVyblZhbHVlID0gbWV0aG9kVmFsdWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuZWFjaChmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgaW5zdGFuY2UgPSAkKHRoaXMpLmRhdGEocGx1Z2luTmFtZSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChpbnN0YW5jZSBpbnN0YW5jZW9mIFBsdWdpbikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpbnN0YW5jZS5yZWxvYWQob3B0aW9ucyk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbmV3IFBsdWdpbih0aGlzLCBvcHRpb25zKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgcmV0dXJuIHJldHVyblZhbHVlO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHJldHVybiBQbHVnaW47XHJcbiAgICB9O1xyXG59KGpRdWVyeSkpO1xyXG5cclxuKGZ1bmN0aW9uKCQsIHdpbmRvdykge1xyXG4gICAgJ3VzZSBzdHJpY3QnO1xyXG5cclxuICAgIHZhciB0b0Zsb2F0ID0gZnVuY3Rpb24odmFsKSB7XHJcbiAgICAgICAgcmV0dXJuIHBhcnNlRmxvYXQodmFsKSB8fCAwO1xyXG4gICAgfTtcclxuXHJcbiAgICAkLmpDYXJvdXNlbC5wbHVnaW4oJ2pjYXJvdXNlbCcsIHtcclxuICAgICAgICBhbmltYXRpbmc6ICAgZmFsc2UsXHJcbiAgICAgICAgdGFpbDogICAgICAgIDAsXHJcbiAgICAgICAgaW5UYWlsOiAgICAgIGZhbHNlLFxyXG4gICAgICAgIHJlc2l6ZVRpbWVyOiBudWxsLFxyXG4gICAgICAgIGx0OiAgICAgICAgICBudWxsLFxyXG4gICAgICAgIHZlcnRpY2FsOiAgICBmYWxzZSxcclxuICAgICAgICBydGw6ICAgICAgICAgZmFsc2UsXHJcbiAgICAgICAgY2lyY3VsYXI6ICAgIGZhbHNlLFxyXG4gICAgICAgIHVuZGVyZmxvdzogICBmYWxzZSxcclxuICAgICAgICByZWxhdGl2ZTogICAgZmFsc2UsXHJcblxyXG4gICAgICAgIF9vcHRpb25zOiB7XHJcbiAgICAgICAgICAgIGxpc3Q6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZWxlbWVudCgpLmNoaWxkcmVuKCkuZXEoMCk7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGl0ZW1zOiBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmxpc3QoKS5jaGlsZHJlbigpO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBhbmltYXRpb246ICAgNDAwLFxyXG4gICAgICAgICAgICB0cmFuc2l0aW9uczogZmFsc2UsXHJcbiAgICAgICAgICAgIHdyYXA6ICAgICAgICBudWxsLFxyXG4gICAgICAgICAgICB2ZXJ0aWNhbDogICAgbnVsbCxcclxuICAgICAgICAgICAgcnRsOiAgICAgICAgIG51bGwsXHJcbiAgICAgICAgICAgIGNlbnRlcjogICAgICBmYWxzZVxyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIC8vIFByb3RlY3RlZCwgZG9uJ3QgYWNjZXNzIGRpcmVjdGx5XHJcbiAgICAgICAgX2xpc3Q6ICAgICAgICAgbnVsbCxcclxuICAgICAgICBfaXRlbXM6ICAgICAgICBudWxsLFxyXG4gICAgICAgIF90YXJnZXQ6ICAgICAgICQoKSxcclxuICAgICAgICBfZmlyc3Q6ICAgICAgICAkKCksXHJcbiAgICAgICAgX2xhc3Q6ICAgICAgICAgJCgpLFxyXG4gICAgICAgIF92aXNpYmxlOiAgICAgICQoKSxcclxuICAgICAgICBfZnVsbHl2aXNpYmxlOiAkKCksXHJcbiAgICAgICAgX2luaXQ6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICB2YXIgc2VsZiA9IHRoaXM7XHJcblxyXG4gICAgICAgICAgICB0aGlzLm9uV2luZG93UmVzaXplID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoc2VsZi5yZXNpemVUaW1lcikge1xyXG4gICAgICAgICAgICAgICAgICAgIGNsZWFyVGltZW91dChzZWxmLnJlc2l6ZVRpbWVyKTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBzZWxmLnJlc2l6ZVRpbWVyID0gc2V0VGltZW91dChmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgICAgICBzZWxmLnJlbG9hZCgpO1xyXG4gICAgICAgICAgICAgICAgfSwgMTAwKTtcclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgX2NyZWF0ZTogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX3JlbG9hZCgpO1xyXG5cclxuICAgICAgICAgICAgJCh3aW5kb3cpLm9uKCdyZXNpemUuamNhcm91c2VsJywgdGhpcy5vbldpbmRvd1Jlc2l6ZSk7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBfZGVzdHJveTogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICQod2luZG93KS5vZmYoJ3Jlc2l6ZS5qY2Fyb3VzZWwnLCB0aGlzLm9uV2luZG93UmVzaXplKTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIF9yZWxvYWQ6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICB0aGlzLnZlcnRpY2FsID0gdGhpcy5vcHRpb25zKCd2ZXJ0aWNhbCcpO1xyXG5cclxuICAgICAgICAgICAgaWYgKHRoaXMudmVydGljYWwgPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy52ZXJ0aWNhbCA9IHRoaXMubGlzdCgpLmhlaWdodCgpID4gdGhpcy5saXN0KCkud2lkdGgoKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgdGhpcy5ydGwgPSB0aGlzLm9wdGlvbnMoJ3J0bCcpO1xyXG5cclxuICAgICAgICAgICAgaWYgKHRoaXMucnRsID09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMucnRsID0gKGZ1bmN0aW9uKGVsZW1lbnQpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoKCcnICsgZWxlbWVudC5hdHRyKCdkaXInKSkudG9Mb3dlckNhc2UoKSA9PT0gJ3J0bCcpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICB2YXIgZm91bmQgPSBmYWxzZTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgZWxlbWVudC5wYXJlbnRzKCdbZGlyXScpLmVhY2goZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICgoL3J0bC9pKS50ZXN0KCQodGhpcykuYXR0cignZGlyJykpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3VuZCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZvdW5kO1xyXG4gICAgICAgICAgICAgICAgfSh0aGlzLl9lbGVtZW50KSk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHRoaXMubHQgPSB0aGlzLnZlcnRpY2FsID8gJ3RvcCcgOiAnbGVmdCc7XHJcblxyXG4gICAgICAgICAgICAvLyBFbnN1cmUgYmVmb3JlIGNsb3Nlc3QoKSBjYWxsXHJcbiAgICAgICAgICAgIHRoaXMucmVsYXRpdmUgPSB0aGlzLmxpc3QoKS5jc3MoJ3Bvc2l0aW9uJykgPT09ICdyZWxhdGl2ZSc7XHJcblxyXG4gICAgICAgICAgICAvLyBGb3JjZSBsaXN0IGFuZCBpdGVtcyByZWxvYWRcclxuICAgICAgICAgICAgdGhpcy5fbGlzdCAgPSBudWxsO1xyXG4gICAgICAgICAgICB0aGlzLl9pdGVtcyA9IG51bGw7XHJcblxyXG4gICAgICAgICAgICB2YXIgaXRlbSA9IHRoaXMuaW5kZXgodGhpcy5fdGFyZ2V0KSA+PSAwID9cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fdGFyZ2V0IDpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jbG9zZXN0KCk7XHJcblxyXG4gICAgICAgICAgICAvLyBfcHJlcGFyZSgpIG5lZWRzIHRoaXMgaGVyZVxyXG4gICAgICAgICAgICB0aGlzLmNpcmN1bGFyICA9IHRoaXMub3B0aW9ucygnd3JhcCcpID09PSAnY2lyY3VsYXInO1xyXG4gICAgICAgICAgICB0aGlzLnVuZGVyZmxvdyA9IGZhbHNlO1xyXG5cclxuICAgICAgICAgICAgdmFyIHByb3BzID0geydsZWZ0JzogMCwgJ3RvcCc6IDB9O1xyXG5cclxuICAgICAgICAgICAgaWYgKGl0ZW0ubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fcHJlcGFyZShpdGVtKTtcclxuICAgICAgICAgICAgICAgIHRoaXMubGlzdCgpLmZpbmQoJ1tkYXRhLWpjYXJvdXNlbC1jbG9uZV0nKS5yZW1vdmUoKTtcclxuXHJcbiAgICAgICAgICAgICAgICAvLyBGb3JjZSBpdGVtcyByZWxvYWRcclxuICAgICAgICAgICAgICAgIHRoaXMuX2l0ZW1zID0gbnVsbDtcclxuXHJcbiAgICAgICAgICAgICAgICB0aGlzLnVuZGVyZmxvdyA9IHRoaXMuX2Z1bGx5dmlzaWJsZS5sZW5ndGggPj0gdGhpcy5pdGVtcygpLmxlbmd0aDtcclxuICAgICAgICAgICAgICAgIHRoaXMuY2lyY3VsYXIgID0gdGhpcy5jaXJjdWxhciAmJiAhdGhpcy51bmRlcmZsb3c7XHJcblxyXG4gICAgICAgICAgICAgICAgcHJvcHNbdGhpcy5sdF0gPSB0aGlzLl9wb3NpdGlvbihpdGVtKSArICdweCc7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHRoaXMubW92ZShwcm9wcyk7XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gdGhpcztcclxuICAgICAgICB9LFxyXG4gICAgICAgIGxpc3Q6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5fbGlzdCA9PT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgdmFyIG9wdGlvbiA9IHRoaXMub3B0aW9ucygnbGlzdCcpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fbGlzdCA9ICQuaXNGdW5jdGlvbihvcHRpb24pID8gb3B0aW9uLmNhbGwodGhpcykgOiB0aGlzLl9lbGVtZW50LmZpbmQob3B0aW9uKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2xpc3Q7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBpdGVtczogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLl9pdGVtcyA9PT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgdmFyIG9wdGlvbiA9IHRoaXMub3B0aW9ucygnaXRlbXMnKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2l0ZW1zID0gKCQuaXNGdW5jdGlvbihvcHRpb24pID8gb3B0aW9uLmNhbGwodGhpcykgOiB0aGlzLmxpc3QoKS5maW5kKG9wdGlvbikpLm5vdCgnW2RhdGEtamNhcm91c2VsLWNsb25lXScpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5faXRlbXM7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBpbmRleDogZnVuY3Rpb24oaXRlbSkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5pdGVtcygpLmluZGV4KGl0ZW0pO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgY2xvc2VzdDogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIHZhciBzZWxmICAgID0gdGhpcyxcclxuICAgICAgICAgICAgICAgIHBvcyAgICAgPSB0aGlzLmxpc3QoKS5wb3NpdGlvbigpW3RoaXMubHRdLFxyXG4gICAgICAgICAgICAgICAgY2xvc2VzdCA9ICQoKSwgLy8gRW5zdXJlIHdlJ3JlIHJldHVybmluZyBhIGpRdWVyeSBpbnN0YW5jZVxyXG4gICAgICAgICAgICAgICAgc3RvcCAgICA9IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgbHJiICAgICA9IHRoaXMudmVydGljYWwgPyAnYm90dG9tJyA6ICh0aGlzLnJ0bCAmJiAhdGhpcy5yZWxhdGl2ZSA/ICdsZWZ0JyA6ICdyaWdodCcpLFxyXG4gICAgICAgICAgICAgICAgd2lkdGg7XHJcblxyXG4gICAgICAgICAgICBpZiAodGhpcy5ydGwgJiYgdGhpcy5yZWxhdGl2ZSAmJiAhdGhpcy52ZXJ0aWNhbCkge1xyXG4gICAgICAgICAgICAgICAgcG9zICs9IHRoaXMubGlzdCgpLndpZHRoKCkgLSB0aGlzLmNsaXBwaW5nKCk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHRoaXMuaXRlbXMoKS5lYWNoKGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgY2xvc2VzdCA9ICQodGhpcyk7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKHN0b3ApIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgdmFyIGRpbSA9IHNlbGYuZGltZW5zaW9uKGNsb3Nlc3QpO1xyXG5cclxuICAgICAgICAgICAgICAgIHBvcyArPSBkaW07XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKHBvcyA+PSAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgd2lkdGggPSBkaW0gLSB0b0Zsb2F0KGNsb3Nlc3QuY3NzKCdtYXJnaW4tJyArIGxyYikpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAoKE1hdGguYWJzKHBvcykgLSBkaW0gKyAod2lkdGggLyAyKSkgPD0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzdG9wID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuXHJcblxyXG4gICAgICAgICAgICByZXR1cm4gY2xvc2VzdDtcclxuICAgICAgICB9LFxyXG4gICAgICAgIHRhcmdldDogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl90YXJnZXQ7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBmaXJzdDogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9maXJzdDtcclxuICAgICAgICB9LFxyXG4gICAgICAgIGxhc3Q6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fbGFzdDtcclxuICAgICAgICB9LFxyXG4gICAgICAgIHZpc2libGU6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fdmlzaWJsZTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIGZ1bGx5dmlzaWJsZTogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9mdWxseXZpc2libGU7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBoYXNOZXh0OiBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgaWYgKGZhbHNlID09PSB0aGlzLl90cmlnZ2VyKCdoYXNuZXh0JykpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB2YXIgd3JhcCA9IHRoaXMub3B0aW9ucygnd3JhcCcpLFxyXG4gICAgICAgICAgICAgICAgZW5kID0gdGhpcy5pdGVtcygpLmxlbmd0aCAtIDEsXHJcbiAgICAgICAgICAgICAgICBjaGVjayA9IHRoaXMub3B0aW9ucygnY2VudGVyJykgPyB0aGlzLl90YXJnZXQgOiB0aGlzLl9sYXN0O1xyXG5cclxuICAgICAgICAgICAgcmV0dXJuIGVuZCA+PSAwICYmICF0aGlzLnVuZGVyZmxvdyAmJlxyXG4gICAgICAgICAgICAgICAgKCh3cmFwICYmIHdyYXAgIT09ICdmaXJzdCcpIHx8XHJcbiAgICAgICAgICAgICAgICAgICAgKHRoaXMuaW5kZXgoY2hlY2spIDwgZW5kKSB8fFxyXG4gICAgICAgICAgICAgICAgICAgICh0aGlzLnRhaWwgJiYgIXRoaXMuaW5UYWlsKSkgPyB0cnVlIDogZmFsc2U7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBoYXNQcmV2OiBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgaWYgKGZhbHNlID09PSB0aGlzLl90cmlnZ2VyKCdoYXNwcmV2JykpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB2YXIgd3JhcCA9IHRoaXMub3B0aW9ucygnd3JhcCcpO1xyXG5cclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuaXRlbXMoKS5sZW5ndGggPiAwICYmICF0aGlzLnVuZGVyZmxvdyAmJlxyXG4gICAgICAgICAgICAgICAgKCh3cmFwICYmIHdyYXAgIT09ICdsYXN0JykgfHxcclxuICAgICAgICAgICAgICAgICAgICAodGhpcy5pbmRleCh0aGlzLl9maXJzdCkgPiAwKSB8fFxyXG4gICAgICAgICAgICAgICAgICAgICh0aGlzLnRhaWwgJiYgdGhpcy5pblRhaWwpKSA/IHRydWUgOiBmYWxzZTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIGNsaXBwaW5nOiBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2VsZW1lbnRbJ2lubmVyJyArICh0aGlzLnZlcnRpY2FsID8gJ0hlaWdodCcgOiAnV2lkdGgnKV0oKTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIGRpbWVuc2lvbjogZnVuY3Rpb24oZWxlbWVudCkge1xyXG4gICAgICAgICAgICByZXR1cm4gZWxlbWVudFsnb3V0ZXInICsgKHRoaXMudmVydGljYWwgPyAnSGVpZ2h0JyA6ICdXaWR0aCcpXSh0cnVlKTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIHNjcm9sbDogZnVuY3Rpb24odGFyZ2V0LCBhbmltYXRlLCBjYWxsYmFjaykge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5hbmltYXRpbmcpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAoZmFsc2UgPT09IHRoaXMuX3RyaWdnZXIoJ3Njcm9sbCcsIG51bGwsIFt0YXJnZXQsIGFuaW1hdGVdKSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmICgkLmlzRnVuY3Rpb24oYW5pbWF0ZSkpIHtcclxuICAgICAgICAgICAgICAgIGNhbGxiYWNrID0gYW5pbWF0ZTtcclxuICAgICAgICAgICAgICAgIGFuaW1hdGUgID0gdHJ1ZTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgdmFyIHBhcnNlZCA9ICQuakNhcm91c2VsLnBhcnNlVGFyZ2V0KHRhcmdldCk7XHJcblxyXG4gICAgICAgICAgICBpZiAocGFyc2VkLnJlbGF0aXZlKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgZW5kICAgID0gdGhpcy5pdGVtcygpLmxlbmd0aCAtIDEsXHJcbiAgICAgICAgICAgICAgICAgICAgc2Nyb2xsID0gTWF0aC5hYnMocGFyc2VkLnRhcmdldCksXHJcbiAgICAgICAgICAgICAgICAgICAgd3JhcCAgID0gdGhpcy5vcHRpb25zKCd3cmFwJyksXHJcbiAgICAgICAgICAgICAgICAgICAgY3VycmVudCxcclxuICAgICAgICAgICAgICAgICAgICBmaXJzdCxcclxuICAgICAgICAgICAgICAgICAgICBpbmRleCxcclxuICAgICAgICAgICAgICAgICAgICBzdGFydCxcclxuICAgICAgICAgICAgICAgICAgICBjdXJyLFxyXG4gICAgICAgICAgICAgICAgICAgIGlzVmlzaWJsZSxcclxuICAgICAgICAgICAgICAgICAgICBwcm9wcyxcclxuICAgICAgICAgICAgICAgICAgICBpO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmIChwYXJzZWQudGFyZ2V0ID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBsYXN0ID0gdGhpcy5pbmRleCh0aGlzLl9sYXN0KTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGxhc3QgPj0gZW5kICYmIHRoaXMudGFpbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXRoaXMuaW5UYWlsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9zY3JvbGxUYWlsKGFuaW1hdGUsIGNhbGxiYWNrKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh3cmFwID09PSAnYm90aCcgfHwgd3JhcCA9PT0gJ2xhc3QnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fc2Nyb2xsKDAsIGFuaW1hdGUsIGNhbGxiYWNrKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCQuaXNGdW5jdGlvbihjYWxsYmFjaykpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2suY2FsbCh0aGlzLCBmYWxzZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudCA9IHRoaXMuaW5kZXgodGhpcy5fdGFyZ2V0KTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICgodGhpcy51bmRlcmZsb3cgJiYgY3VycmVudCA9PT0gZW5kICYmICh3cmFwID09PSAnY2lyY3VsYXInIHx8IHdyYXAgPT09ICdib3RoJyB8fCB3cmFwID09PSAnbGFzdCcpKSB8fFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKCF0aGlzLnVuZGVyZmxvdyAmJiBsYXN0ID09PSBlbmQgJiYgKHdyYXAgPT09ICdib3RoJyB8fCB3cmFwID09PSAnbGFzdCcpKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fc2Nyb2xsKDAsIGFuaW1hdGUsIGNhbGxiYWNrKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluZGV4ID0gY3VycmVudCArIHNjcm9sbDtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5jaXJjdWxhciAmJiBpbmRleCA+IGVuZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGkgPSBlbmQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY3VyciA9IHRoaXMuaXRlbXMoKS5nZXQoLTEpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aGlsZSAoaSsrIDwgaW5kZXgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY3VyciA9IHRoaXMuaXRlbXMoKS5lcSgwKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaXNWaXNpYmxlID0gdGhpcy5fdmlzaWJsZS5pbmRleChjdXJyKSA+PSAwO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGlzVmlzaWJsZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY3Vyci5hZnRlcihjdXJyLmNsb25lKHRydWUpLmF0dHIoJ2RhdGEtamNhcm91c2VsLWNsb25lJywgdHJ1ZSkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmxpc3QoKS5hcHBlbmQoY3Vycik7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWlzVmlzaWJsZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJvcHMgPSB7fTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByb3BzW3RoaXMubHRdID0gdGhpcy5kaW1lbnNpb24oY3Vycik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm1vdmVCeShwcm9wcyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEZvcmNlIGl0ZW1zIHJlbG9hZFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9pdGVtcyA9IG51bGw7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9zY3JvbGwoY3VyciwgYW5pbWF0ZSwgY2FsbGJhY2spO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9zY3JvbGwoTWF0aC5taW4oaW5kZXgsIGVuZCksIGFuaW1hdGUsIGNhbGxiYWNrKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuaW5UYWlsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3Njcm9sbChNYXRoLm1heCgodGhpcy5pbmRleCh0aGlzLl9maXJzdCkgLSBzY3JvbGwpICsgMSwgMCksIGFuaW1hdGUsIGNhbGxiYWNrKTtcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBmaXJzdCAgPSB0aGlzLmluZGV4KHRoaXMuX2ZpcnN0KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudCA9IHRoaXMuaW5kZXgodGhpcy5fdGFyZ2V0KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc3RhcnQgID0gdGhpcy51bmRlcmZsb3cgPyBjdXJyZW50IDogZmlyc3Q7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGluZGV4ICA9IHN0YXJ0IC0gc2Nyb2xsO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHN0YXJ0IDw9IDAgJiYgKCh0aGlzLnVuZGVyZmxvdyAmJiB3cmFwID09PSAnY2lyY3VsYXInKSB8fCB3cmFwID09PSAnYm90aCcgfHwgd3JhcCA9PT0gJ2ZpcnN0JykpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3Njcm9sbChlbmQsIGFuaW1hdGUsIGNhbGxiYWNrKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmNpcmN1bGFyICYmIGluZGV4IDwgMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGkgICAgPSBpbmRleDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdXJyID0gdGhpcy5pdGVtcygpLmdldCgwKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2hpbGUgKGkrKyA8IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY3VyciA9IHRoaXMuaXRlbXMoKS5lcSgtMSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlzVmlzaWJsZSA9IHRoaXMuX3Zpc2libGUuaW5kZXgoY3VycikgPj0gMDtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpc1Zpc2libGUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN1cnIuYWZ0ZXIoY3Vyci5jbG9uZSh0cnVlKS5hdHRyKCdkYXRhLWpjYXJvdXNlbC1jbG9uZScsIHRydWUpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5saXN0KCkucHJlcGVuZChjdXJyKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEZvcmNlIGl0ZW1zIHJlbG9hZFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9pdGVtcyA9IG51bGw7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgZGltID0gdGhpcy5kaW1lbnNpb24oY3Vycik7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcm9wcyA9IHt9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcm9wc1t0aGlzLmx0XSA9IC1kaW07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubW92ZUJ5KHByb3BzKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9zY3JvbGwoY3VyciwgYW5pbWF0ZSwgY2FsbGJhY2spO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9zY3JvbGwoTWF0aC5tYXgoaW5kZXgsIDApLCBhbmltYXRlLCBjYWxsYmFjayk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9zY3JvbGwocGFyc2VkLnRhcmdldCwgYW5pbWF0ZSwgY2FsbGJhY2spO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB0aGlzLl90cmlnZ2VyKCdzY3JvbGxlbmQnKTtcclxuXHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgbW92ZUJ5OiBmdW5jdGlvbihwcm9wZXJ0aWVzLCBvcHRzKSB7XHJcbiAgICAgICAgICAgIHZhciBwb3NpdGlvbiA9IHRoaXMubGlzdCgpLnBvc2l0aW9uKCksXHJcbiAgICAgICAgICAgICAgICBtdWx0aXBsaWVyID0gMSxcclxuICAgICAgICAgICAgICAgIGNvcnJlY3Rpb24gPSAwO1xyXG5cclxuICAgICAgICAgICAgaWYgKHRoaXMucnRsICYmICF0aGlzLnZlcnRpY2FsKSB7XHJcbiAgICAgICAgICAgICAgICBtdWx0aXBsaWVyID0gLTE7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMucmVsYXRpdmUpIHtcclxuICAgICAgICAgICAgICAgICAgICBjb3JyZWN0aW9uID0gdGhpcy5saXN0KCkud2lkdGgoKSAtIHRoaXMuY2xpcHBpbmcoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKHByb3BlcnRpZXMubGVmdCkge1xyXG4gICAgICAgICAgICAgICAgcHJvcGVydGllcy5sZWZ0ID0gKHBvc2l0aW9uLmxlZnQgKyBjb3JyZWN0aW9uICsgdG9GbG9hdChwcm9wZXJ0aWVzLmxlZnQpICogbXVsdGlwbGllcikgKyAncHgnO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAocHJvcGVydGllcy50b3ApIHtcclxuICAgICAgICAgICAgICAgIHByb3BlcnRpZXMudG9wID0gKHBvc2l0aW9uLnRvcCArIGNvcnJlY3Rpb24gKyB0b0Zsb2F0KHByb3BlcnRpZXMudG9wKSAqIG11bHRpcGxpZXIpICsgJ3B4JztcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMubW92ZShwcm9wZXJ0aWVzLCBvcHRzKTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIG1vdmU6IGZ1bmN0aW9uKHByb3BlcnRpZXMsIG9wdHMpIHtcclxuICAgICAgICAgICAgb3B0cyA9IG9wdHMgfHwge307XHJcblxyXG4gICAgICAgICAgICB2YXIgb3B0aW9uICAgICAgID0gdGhpcy5vcHRpb25zKCd0cmFuc2l0aW9ucycpLFxyXG4gICAgICAgICAgICAgICAgdHJhbnNpdGlvbnMgID0gISFvcHRpb24sXHJcbiAgICAgICAgICAgICAgICB0cmFuc2Zvcm1zICAgPSAhIW9wdGlvbi50cmFuc2Zvcm1zLFxyXG4gICAgICAgICAgICAgICAgdHJhbnNmb3JtczNkID0gISFvcHRpb24udHJhbnNmb3JtczNkLFxyXG4gICAgICAgICAgICAgICAgZHVyYXRpb24gICAgID0gb3B0cy5kdXJhdGlvbiB8fCAwLFxyXG4gICAgICAgICAgICAgICAgbGlzdCAgICAgICAgID0gdGhpcy5saXN0KCk7XHJcblxyXG4gICAgICAgICAgICBpZiAoIXRyYW5zaXRpb25zICYmIGR1cmF0aW9uID4gMCkge1xyXG4gICAgICAgICAgICAgICAgbGlzdC5hbmltYXRlKHByb3BlcnRpZXMsIG9wdHMpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB2YXIgY29tcGxldGUgPSBvcHRzLmNvbXBsZXRlIHx8ICQubm9vcCxcclxuICAgICAgICAgICAgICAgIGNzcyA9IHt9O1xyXG5cclxuICAgICAgICAgICAgaWYgKHRyYW5zaXRpb25zKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgYmFja3VwID0ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0cmFuc2l0aW9uRHVyYXRpb246IGxpc3QuY3NzKCd0cmFuc2l0aW9uRHVyYXRpb24nKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgdHJhbnNpdGlvblRpbWluZ0Z1bmN0aW9uOiBsaXN0LmNzcygndHJhbnNpdGlvblRpbWluZ0Z1bmN0aW9uJyksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRyYW5zaXRpb25Qcm9wZXJ0eTogbGlzdC5jc3MoJ3RyYW5zaXRpb25Qcm9wZXJ0eScpXHJcbiAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICBvbGRDb21wbGV0ZSA9IGNvbXBsZXRlO1xyXG5cclxuICAgICAgICAgICAgICAgIGNvbXBsZXRlID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgJCh0aGlzKS5jc3MoYmFja3VwKTtcclxuICAgICAgICAgICAgICAgICAgICBvbGRDb21wbGV0ZS5jYWxsKHRoaXMpO1xyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgIGNzcyA9IHtcclxuICAgICAgICAgICAgICAgICAgICB0cmFuc2l0aW9uRHVyYXRpb246IChkdXJhdGlvbiA+IDAgPyBkdXJhdGlvbiAvIDEwMDAgOiAwKSArICdzJyxcclxuICAgICAgICAgICAgICAgICAgICB0cmFuc2l0aW9uVGltaW5nRnVuY3Rpb246IG9wdGlvbi5lYXNpbmcgfHwgb3B0cy5lYXNpbmcsXHJcbiAgICAgICAgICAgICAgICAgICAgdHJhbnNpdGlvblByb3BlcnR5OiBkdXJhdGlvbiA+IDAgPyAoZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0cmFuc2Zvcm1zIHx8IHRyYW5zZm9ybXMzZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gV2UgaGF2ZSB0byB1c2UgJ2FsbCcgYmVjYXVzZSBqUXVlcnkgZG9lc24ndCBwcmVmaXhcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGNzcyB2YWx1ZXMsIGxpa2UgdHJhbnNpdGlvbi1wcm9wZXJ0eTogdHJhbnNmb3JtO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdhbGwnO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcHJvcGVydGllcy5sZWZ0ID8gJ2xlZnQnIDogJ3RvcCc7XHJcbiAgICAgICAgICAgICAgICAgICAgfSkoKSA6ICdub25lJyxcclxuICAgICAgICAgICAgICAgICAgICB0cmFuc2Zvcm06ICdub25lJ1xyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKHRyYW5zZm9ybXMzZCkge1xyXG4gICAgICAgICAgICAgICAgY3NzLnRyYW5zZm9ybSA9ICd0cmFuc2xhdGUzZCgnICsgKHByb3BlcnRpZXMubGVmdCB8fCAwKSArICcsJyArIChwcm9wZXJ0aWVzLnRvcCB8fCAwKSArICcsMCknO1xyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKHRyYW5zZm9ybXMpIHtcclxuICAgICAgICAgICAgICAgIGNzcy50cmFuc2Zvcm0gPSAndHJhbnNsYXRlKCcgKyAocHJvcGVydGllcy5sZWZ0IHx8IDApICsgJywnICsgKHByb3BlcnRpZXMudG9wIHx8IDApICsgJyknO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgJC5leHRlbmQoY3NzLCBwcm9wZXJ0aWVzKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKHRyYW5zaXRpb25zICYmIGR1cmF0aW9uID4gMCkge1xyXG4gICAgICAgICAgICAgICAgbGlzdC5vbmUoJ3RyYW5zaXRpb25lbmQgd2Via2l0VHJhbnNpdGlvbkVuZCBvVHJhbnNpdGlvbkVuZCBvdHJhbnNpdGlvbmVuZCBNU1RyYW5zaXRpb25FbmQnLCBjb21wbGV0ZSk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGxpc3QuY3NzKGNzcyk7XHJcblxyXG4gICAgICAgICAgICBpZiAoZHVyYXRpb24gPD0gMCkge1xyXG4gICAgICAgICAgICAgICAgbGlzdC5lYWNoKGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbXBsZXRlLmNhbGwodGhpcyk7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgX3Njcm9sbDogZnVuY3Rpb24oaXRlbSwgYW5pbWF0ZSwgY2FsbGJhY2spIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMuYW5pbWF0aW5nKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoJC5pc0Z1bmN0aW9uKGNhbGxiYWNrKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrLmNhbGwodGhpcywgZmFsc2UpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAodHlwZW9mIGl0ZW0gIT09ICdvYmplY3QnKSB7XHJcbiAgICAgICAgICAgICAgICBpdGVtID0gdGhpcy5pdGVtcygpLmVxKGl0ZW0pO1xyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiBpdGVtLmpxdWVyeSA9PT0gJ3VuZGVmaW5lZCcpIHtcclxuICAgICAgICAgICAgICAgIGl0ZW0gPSAkKGl0ZW0pO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAoaXRlbS5sZW5ndGggPT09IDApIHtcclxuICAgICAgICAgICAgICAgIGlmICgkLmlzRnVuY3Rpb24oY2FsbGJhY2spKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2suY2FsbCh0aGlzLCBmYWxzZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHRoaXMuaW5UYWlsID0gZmFsc2U7XHJcblxyXG4gICAgICAgICAgICB0aGlzLl9wcmVwYXJlKGl0ZW0pO1xyXG5cclxuICAgICAgICAgICAgdmFyIHBvcyAgICAgPSB0aGlzLl9wb3NpdGlvbihpdGVtKSxcclxuICAgICAgICAgICAgICAgIGN1cnJQb3MgPSB0aGlzLmxpc3QoKS5wb3NpdGlvbigpW3RoaXMubHRdO1xyXG5cclxuICAgICAgICAgICAgaWYgKHBvcyA9PT0gY3VyclBvcykge1xyXG4gICAgICAgICAgICAgICAgaWYgKCQuaXNGdW5jdGlvbihjYWxsYmFjaykpIHtcclxuICAgICAgICAgICAgICAgICAgICBjYWxsYmFjay5jYWxsKHRoaXMsIGZhbHNlKTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcztcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgdmFyIHByb3BlcnRpZXMgPSB7fTtcclxuICAgICAgICAgICAgcHJvcGVydGllc1t0aGlzLmx0XSA9IHBvcyArICdweCc7XHJcblxyXG4gICAgICAgICAgICB0aGlzLl9hbmltYXRlKHByb3BlcnRpZXMsIGFuaW1hdGUsIGNhbGxiYWNrKTtcclxuXHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgX3Njcm9sbFRhaWw6IGZ1bmN0aW9uKGFuaW1hdGUsIGNhbGxiYWNrKSB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLmFuaW1hdGluZyB8fCAhdGhpcy50YWlsKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoJC5pc0Z1bmN0aW9uKGNhbGxiYWNrKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrLmNhbGwodGhpcywgZmFsc2UpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB2YXIgcG9zID0gdGhpcy5saXN0KCkucG9zaXRpb24oKVt0aGlzLmx0XTtcclxuXHJcbiAgICAgICAgICAgIGlmICh0aGlzLnJ0bCAmJiB0aGlzLnJlbGF0aXZlICYmICF0aGlzLnZlcnRpY2FsKSB7XHJcbiAgICAgICAgICAgICAgICBwb3MgKz0gdGhpcy5saXN0KCkud2lkdGgoKSAtIHRoaXMuY2xpcHBpbmcoKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKHRoaXMucnRsICYmICF0aGlzLnZlcnRpY2FsKSB7XHJcbiAgICAgICAgICAgICAgICBwb3MgKz0gdGhpcy50YWlsO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgcG9zIC09IHRoaXMudGFpbDtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgdGhpcy5pblRhaWwgPSB0cnVlO1xyXG5cclxuICAgICAgICAgICAgdmFyIHByb3BlcnRpZXMgPSB7fTtcclxuICAgICAgICAgICAgcHJvcGVydGllc1t0aGlzLmx0XSA9IHBvcyArICdweCc7XHJcblxyXG4gICAgICAgICAgICB0aGlzLl91cGRhdGUoe1xyXG4gICAgICAgICAgICAgICAgdGFyZ2V0OiAgICAgICB0aGlzLl90YXJnZXQubmV4dCgpLFxyXG4gICAgICAgICAgICAgICAgZnVsbHl2aXNpYmxlOiB0aGlzLl9mdWxseXZpc2libGUuc2xpY2UoMSkuYWRkKHRoaXMuX3Zpc2libGUubGFzdCgpKVxyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMuX2FuaW1hdGUocHJvcGVydGllcywgYW5pbWF0ZSwgY2FsbGJhY2spO1xyXG5cclxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBfYW5pbWF0ZTogZnVuY3Rpb24ocHJvcGVydGllcywgYW5pbWF0ZSwgY2FsbGJhY2spIHtcclxuICAgICAgICAgICAgY2FsbGJhY2sgPSBjYWxsYmFjayB8fCAkLm5vb3A7XHJcblxyXG4gICAgICAgICAgICBpZiAoZmFsc2UgPT09IHRoaXMuX3RyaWdnZXIoJ2FuaW1hdGUnKSkge1xyXG4gICAgICAgICAgICAgICAgY2FsbGJhY2suY2FsbCh0aGlzLCBmYWxzZSk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcztcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgdGhpcy5hbmltYXRpbmcgPSB0cnVlO1xyXG5cclxuICAgICAgICAgICAgdmFyIGFuaW1hdGlvbiA9IHRoaXMub3B0aW9ucygnYW5pbWF0aW9uJyksXHJcbiAgICAgICAgICAgICAgICBjb21wbGV0ZSAgPSAkLnByb3h5KGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYW5pbWF0aW5nID0gZmFsc2U7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHZhciBjID0gdGhpcy5saXN0KCkuZmluZCgnW2RhdGEtamNhcm91c2VsLWNsb25lXScpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAoYy5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGMucmVtb3ZlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3JlbG9hZCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fdHJpZ2dlcignYW5pbWF0ZWVuZCcpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBjYWxsYmFjay5jYWxsKHRoaXMsIHRydWUpO1xyXG4gICAgICAgICAgICAgICAgfSwgdGhpcyk7XHJcblxyXG4gICAgICAgICAgICB2YXIgb3B0cyA9IHR5cGVvZiBhbmltYXRpb24gPT09ICdvYmplY3QnID9cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgJC5leHRlbmQoe30sIGFuaW1hdGlvbikgOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICB7ZHVyYXRpb246IGFuaW1hdGlvbn0sXHJcbiAgICAgICAgICAgICAgICBvbGRDb21wbGV0ZSA9IG9wdHMuY29tcGxldGUgfHwgJC5ub29wO1xyXG5cclxuICAgICAgICAgICAgaWYgKGFuaW1hdGUgPT09IGZhbHNlKSB7XHJcbiAgICAgICAgICAgICAgICBvcHRzLmR1cmF0aW9uID0gMDtcclxuICAgICAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgJC5meC5zcGVlZHNbb3B0cy5kdXJhdGlvbl0gIT09ICd1bmRlZmluZWQnKSB7XHJcbiAgICAgICAgICAgICAgICBvcHRzLmR1cmF0aW9uID0gJC5meC5zcGVlZHNbb3B0cy5kdXJhdGlvbl07XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIG9wdHMuY29tcGxldGUgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgIGNvbXBsZXRlKCk7XHJcbiAgICAgICAgICAgICAgICBvbGRDb21wbGV0ZS5jYWxsKHRoaXMpO1xyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgdGhpcy5tb3ZlKHByb3BlcnRpZXMsIG9wdHMpO1xyXG5cclxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBfcHJlcGFyZTogZnVuY3Rpb24oaXRlbSkge1xyXG4gICAgICAgICAgICB2YXIgaW5kZXggID0gdGhpcy5pbmRleChpdGVtKSxcclxuICAgICAgICAgICAgICAgIGlkeCAgICA9IGluZGV4LFxyXG4gICAgICAgICAgICAgICAgd2ggICAgID0gdGhpcy5kaW1lbnNpb24oaXRlbSksXHJcbiAgICAgICAgICAgICAgICBjbGlwICAgPSB0aGlzLmNsaXBwaW5nKCksXHJcbiAgICAgICAgICAgICAgICBscmIgICAgPSB0aGlzLnZlcnRpY2FsID8gJ2JvdHRvbScgOiAodGhpcy5ydGwgPyAnbGVmdCcgIDogJ3JpZ2h0JyksXHJcbiAgICAgICAgICAgICAgICBjZW50ZXIgPSB0aGlzLm9wdGlvbnMoJ2NlbnRlcicpLFxyXG4gICAgICAgICAgICAgICAgdXBkYXRlID0ge1xyXG4gICAgICAgICAgICAgICAgICAgIHRhcmdldDogICAgICAgaXRlbSxcclxuICAgICAgICAgICAgICAgICAgICBmaXJzdDogICAgICAgIGl0ZW0sXHJcbiAgICAgICAgICAgICAgICAgICAgbGFzdDogICAgICAgICBpdGVtLFxyXG4gICAgICAgICAgICAgICAgICAgIHZpc2libGU6ICAgICAgaXRlbSxcclxuICAgICAgICAgICAgICAgICAgICBmdWxseXZpc2libGU6IHdoIDw9IGNsaXAgPyBpdGVtIDogJCgpXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgY3VycixcclxuICAgICAgICAgICAgICAgIGlzVmlzaWJsZSxcclxuICAgICAgICAgICAgICAgIG1hcmdpbixcclxuICAgICAgICAgICAgICAgIGRpbTtcclxuXHJcbiAgICAgICAgICAgIGlmIChjZW50ZXIpIHtcclxuICAgICAgICAgICAgICAgIHdoIC89IDI7XHJcbiAgICAgICAgICAgICAgICBjbGlwIC89IDI7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmICh3aCA8IGNsaXApIHtcclxuICAgICAgICAgICAgICAgIHdoaWxlICh0cnVlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY3VyciA9IHRoaXMuaXRlbXMoKS5lcSgrK2lkeCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChjdXJyLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXRoaXMuY2lyY3VsYXIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjdXJyID0gdGhpcy5pdGVtcygpLmVxKDApO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGl0ZW0uZ2V0KDApID09PSBjdXJyLmdldCgwKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlzVmlzaWJsZSA9IHRoaXMuX3Zpc2libGUuaW5kZXgoY3VycikgPj0gMDtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpc1Zpc2libGUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN1cnIuYWZ0ZXIoY3Vyci5jbG9uZSh0cnVlKS5hdHRyKCdkYXRhLWpjYXJvdXNlbC1jbG9uZScsIHRydWUpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5saXN0KCkuYXBwZW5kKGN1cnIpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFpc1Zpc2libGUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBwcm9wcyA9IHt9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJvcHNbdGhpcy5sdF0gPSB0aGlzLmRpbWVuc2lvbihjdXJyKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubW92ZUJ5KHByb3BzKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gRm9yY2UgaXRlbXMgcmVsb2FkXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2l0ZW1zID0gbnVsbDtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGRpbSA9IHRoaXMuZGltZW5zaW9uKGN1cnIpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAoZGltID09PSAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgd2ggKz0gZGltO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICB1cGRhdGUubGFzdCAgICA9IGN1cnI7XHJcbiAgICAgICAgICAgICAgICAgICAgdXBkYXRlLnZpc2libGUgPSB1cGRhdGUudmlzaWJsZS5hZGQoY3Vycik7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIC8vIFJlbW92ZSByaWdodC9ib3R0b20gbWFyZ2luIGZyb20gdG90YWwgd2lkdGhcclxuICAgICAgICAgICAgICAgICAgICBtYXJnaW4gPSB0b0Zsb2F0KGN1cnIuY3NzKCdtYXJnaW4tJyArIGxyYikpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAoKHdoIC0gbWFyZ2luKSA8PSBjbGlwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHVwZGF0ZS5mdWxseXZpc2libGUgPSB1cGRhdGUuZnVsbHl2aXNpYmxlLmFkZChjdXJyKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmICh3aCA+PSBjbGlwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKCF0aGlzLmNpcmN1bGFyICYmICFjZW50ZXIgJiYgd2ggPCBjbGlwKSB7XHJcbiAgICAgICAgICAgICAgICBpZHggPSBpbmRleDtcclxuXHJcbiAgICAgICAgICAgICAgICB3aGlsZSAodHJ1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICgtLWlkeCA8IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICBjdXJyID0gdGhpcy5pdGVtcygpLmVxKGlkeCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChjdXJyLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGRpbSA9IHRoaXMuZGltZW5zaW9uKGN1cnIpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAoZGltID09PSAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgd2ggKz0gZGltO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICB1cGRhdGUuZmlyc3QgICA9IGN1cnI7XHJcbiAgICAgICAgICAgICAgICAgICAgdXBkYXRlLnZpc2libGUgPSB1cGRhdGUudmlzaWJsZS5hZGQoY3Vycik7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIC8vIFJlbW92ZSByaWdodC9ib3R0b20gbWFyZ2luIGZyb20gdG90YWwgd2lkdGhcclxuICAgICAgICAgICAgICAgICAgICBtYXJnaW4gPSB0b0Zsb2F0KGN1cnIuY3NzKCdtYXJnaW4tJyArIGxyYikpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAoKHdoIC0gbWFyZ2luKSA8PSBjbGlwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHVwZGF0ZS5mdWxseXZpc2libGUgPSB1cGRhdGUuZnVsbHl2aXNpYmxlLmFkZChjdXJyKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmICh3aCA+PSBjbGlwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgdGhpcy5fdXBkYXRlKHVwZGF0ZSk7XHJcblxyXG4gICAgICAgICAgICB0aGlzLnRhaWwgPSAwO1xyXG5cclxuICAgICAgICAgICAgaWYgKCFjZW50ZXIgJiZcclxuICAgICAgICAgICAgICAgIHRoaXMub3B0aW9ucygnd3JhcCcpICE9PSAnY2lyY3VsYXInICYmXHJcbiAgICAgICAgICAgICAgICB0aGlzLm9wdGlvbnMoJ3dyYXAnKSAhPT0gJ2N1c3RvbScgJiZcclxuICAgICAgICAgICAgICAgIHRoaXMuaW5kZXgodXBkYXRlLmxhc3QpID09PSAodGhpcy5pdGVtcygpLmxlbmd0aCAtIDEpKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gUmVtb3ZlIHJpZ2h0L2JvdHRvbSBtYXJnaW4gZnJvbSB0b3RhbCB3aWR0aFxyXG4gICAgICAgICAgICAgICAgd2ggLT0gdG9GbG9hdCh1cGRhdGUubGFzdC5jc3MoJ21hcmdpbi0nICsgbHJiKSk7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKHdoID4gY2xpcCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMudGFpbCA9IHdoIC0gY2xpcDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBfcG9zaXRpb246IGZ1bmN0aW9uKGl0ZW0pIHtcclxuICAgICAgICAgICAgdmFyIGZpcnN0ICA9IHRoaXMuX2ZpcnN0LFxyXG4gICAgICAgICAgICAgICAgcG9zICAgID0gZmlyc3QucG9zaXRpb24oKVt0aGlzLmx0XSxcclxuICAgICAgICAgICAgICAgIGNlbnRlciA9IHRoaXMub3B0aW9ucygnY2VudGVyJyksXHJcbiAgICAgICAgICAgICAgICBjZW50ZXJPZmZzZXQgPSBjZW50ZXIgPyAodGhpcy5jbGlwcGluZygpIC8gMikgLSAodGhpcy5kaW1lbnNpb24oZmlyc3QpIC8gMikgOiAwO1xyXG5cclxuICAgICAgICAgICAgaWYgKHRoaXMucnRsICYmICF0aGlzLnZlcnRpY2FsKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5yZWxhdGl2ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHBvcyAtPSB0aGlzLmxpc3QoKS53aWR0aCgpIC0gdGhpcy5kaW1lbnNpb24oZmlyc3QpO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBwb3MgLT0gdGhpcy5jbGlwcGluZygpIC0gdGhpcy5kaW1lbnNpb24oZmlyc3QpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIHBvcyArPSBjZW50ZXJPZmZzZXQ7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBwb3MgLT0gY2VudGVyT2Zmc2V0O1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAoIWNlbnRlciAmJlxyXG4gICAgICAgICAgICAgICAgKHRoaXMuaW5kZXgoaXRlbSkgPiB0aGlzLmluZGV4KGZpcnN0KSB8fCB0aGlzLmluVGFpbCkgJiZcclxuICAgICAgICAgICAgICAgIHRoaXMudGFpbCkge1xyXG4gICAgICAgICAgICAgICAgcG9zID0gdGhpcy5ydGwgJiYgIXRoaXMudmVydGljYWwgPyBwb3MgLSB0aGlzLnRhaWwgOiBwb3MgKyB0aGlzLnRhaWw7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmluVGFpbCA9IHRydWU7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmluVGFpbCA9IGZhbHNlO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gLXBvcztcclxuICAgICAgICB9LFxyXG4gICAgICAgIF91cGRhdGU6IGZ1bmN0aW9uKHVwZGF0ZSkge1xyXG4gICAgICAgICAgICB2YXIgc2VsZiA9IHRoaXMsXHJcbiAgICAgICAgICAgICAgICBjdXJyZW50ID0ge1xyXG4gICAgICAgICAgICAgICAgICAgIHRhcmdldDogICAgICAgdGhpcy5fdGFyZ2V0LFxyXG4gICAgICAgICAgICAgICAgICAgIGZpcnN0OiAgICAgICAgdGhpcy5fZmlyc3QsXHJcbiAgICAgICAgICAgICAgICAgICAgbGFzdDogICAgICAgICB0aGlzLl9sYXN0LFxyXG4gICAgICAgICAgICAgICAgICAgIHZpc2libGU6ICAgICAgdGhpcy5fdmlzaWJsZSxcclxuICAgICAgICAgICAgICAgICAgICBmdWxseXZpc2libGU6IHRoaXMuX2Z1bGx5dmlzaWJsZVxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIGJhY2sgPSB0aGlzLmluZGV4KHVwZGF0ZS5maXJzdCB8fCBjdXJyZW50LmZpcnN0KSA8IHRoaXMuaW5kZXgoY3VycmVudC5maXJzdCksXHJcbiAgICAgICAgICAgICAgICBrZXksXHJcbiAgICAgICAgICAgICAgICBkb1VwZGF0ZSA9IGZ1bmN0aW9uKGtleSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBlbEluICA9IFtdLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBlbE91dCA9IFtdO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICB1cGRhdGVba2V5XS5lYWNoKGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoY3VycmVudFtrZXldLmluZGV4KHRoaXMpIDwgMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxJbi5wdXNoKHRoaXMpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGN1cnJlbnRba2V5XS5lYWNoKGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodXBkYXRlW2tleV0uaW5kZXgodGhpcykgPCAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbE91dC5wdXNoKHRoaXMpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChiYWNrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsSW4gPSBlbEluLnJldmVyc2UoKTtcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBlbE91dCA9IGVsT3V0LnJldmVyc2UoKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHNlbGYuX3RyaWdnZXIoa2V5ICsgJ2luJywgJChlbEluKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgc2VsZi5fdHJpZ2dlcihrZXkgKyAnb3V0JywgJChlbE91dCkpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBzZWxmWydfJyArIGtleV0gPSB1cGRhdGVba2V5XTtcclxuICAgICAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICBmb3IgKGtleSBpbiB1cGRhdGUpIHtcclxuICAgICAgICAgICAgICAgIGRvVXBkYXRlKGtleSk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgICAgIH1cclxuICAgIH0pO1xyXG59KGpRdWVyeSwgd2luZG93KSk7XHJcblxyXG4oZnVuY3Rpb24oJCkge1xyXG4gICAgJ3VzZSBzdHJpY3QnO1xyXG5cclxuICAgICQuamNhcm91c2VsLmZuLnNjcm9sbEludG9WaWV3ID0gZnVuY3Rpb24odGFyZ2V0LCBhbmltYXRlLCBjYWxsYmFjaykge1xyXG4gICAgICAgIHZhciBwYXJzZWQgPSAkLmpDYXJvdXNlbC5wYXJzZVRhcmdldCh0YXJnZXQpLFxyXG4gICAgICAgICAgICBmaXJzdCAgPSB0aGlzLmluZGV4KHRoaXMuX2Z1bGx5dmlzaWJsZS5maXJzdCgpKSxcclxuICAgICAgICAgICAgbGFzdCAgID0gdGhpcy5pbmRleCh0aGlzLl9mdWxseXZpc2libGUubGFzdCgpKSxcclxuICAgICAgICAgICAgaW5kZXg7XHJcblxyXG4gICAgICAgIGlmIChwYXJzZWQucmVsYXRpdmUpIHtcclxuICAgICAgICAgICAgaW5kZXggPSBwYXJzZWQudGFyZ2V0IDwgMCA/IE1hdGgubWF4KDAsIGZpcnN0ICsgcGFyc2VkLnRhcmdldCkgOiBsYXN0ICsgcGFyc2VkLnRhcmdldDtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBpbmRleCA9IHR5cGVvZiBwYXJzZWQudGFyZ2V0ICE9PSAnb2JqZWN0JyA/IHBhcnNlZC50YXJnZXQgOiB0aGlzLmluZGV4KHBhcnNlZC50YXJnZXQpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKGluZGV4IDwgZmlyc3QpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuc2Nyb2xsKGluZGV4LCBhbmltYXRlLCBjYWxsYmFjayk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoaW5kZXggPj0gZmlyc3QgJiYgaW5kZXggPD0gbGFzdCkge1xyXG4gICAgICAgICAgICBpZiAoJC5pc0Z1bmN0aW9uKGNhbGxiYWNrKSkge1xyXG4gICAgICAgICAgICAgICAgY2FsbGJhY2suY2FsbCh0aGlzLCBmYWxzZSk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdmFyIGl0ZW1zID0gdGhpcy5pdGVtcygpLFxyXG4gICAgICAgICAgICBjbGlwID0gdGhpcy5jbGlwcGluZygpLFxyXG4gICAgICAgICAgICBscmIgID0gdGhpcy52ZXJ0aWNhbCA/ICdib3R0b20nIDogKHRoaXMucnRsID8gJ2xlZnQnICA6ICdyaWdodCcpLFxyXG4gICAgICAgICAgICB3aCAgID0gMCxcclxuICAgICAgICAgICAgY3VycjtcclxuXHJcbiAgICAgICAgd2hpbGUgKHRydWUpIHtcclxuICAgICAgICAgICAgY3VyciA9IGl0ZW1zLmVxKGluZGV4KTtcclxuXHJcbiAgICAgICAgICAgIGlmIChjdXJyLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHdoICs9IHRoaXMuZGltZW5zaW9uKGN1cnIpO1xyXG5cclxuICAgICAgICAgICAgaWYgKHdoID49IGNsaXApIHtcclxuICAgICAgICAgICAgICAgIHZhciBtYXJnaW4gPSBwYXJzZUZsb2F0KGN1cnIuY3NzKCdtYXJnaW4tJyArIGxyYikpIHx8IDA7XHJcbiAgICAgICAgICAgICAgICBpZiAoKHdoIC0gbWFyZ2luKSAhPT0gY2xpcCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGluZGV4Kys7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKGluZGV4IDw9IDApIHtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpbmRleC0tO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIHRoaXMuc2Nyb2xsKGluZGV4LCBhbmltYXRlLCBjYWxsYmFjayk7XHJcbiAgICB9O1xyXG59KGpRdWVyeSkpO1xyXG5cclxuKGZ1bmN0aW9uKCQpIHtcclxuICAgICd1c2Ugc3RyaWN0JztcclxuXHJcbiAgICAkLmpDYXJvdXNlbC5wbHVnaW4oJ2pjYXJvdXNlbENvbnRyb2wnLCB7XHJcbiAgICAgICAgX29wdGlvbnM6IHtcclxuICAgICAgICAgICAgdGFyZ2V0OiAnKz0xJyxcclxuICAgICAgICAgICAgZXZlbnQ6ICAnY2xpY2snLFxyXG4gICAgICAgICAgICBtZXRob2Q6ICdzY3JvbGwnXHJcbiAgICAgICAgfSxcclxuICAgICAgICBfYWN0aXZlOiBudWxsLFxyXG4gICAgICAgIF9pbml0OiBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgdGhpcy5vbkRlc3Ryb3kgPSAkLnByb3h5KGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fZGVzdHJveSgpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jYXJvdXNlbCgpXHJcbiAgICAgICAgICAgICAgICAgICAgLm9uZSgnamNhcm91c2VsOmNyZWF0ZWVuZCcsICQucHJveHkodGhpcy5fY3JlYXRlLCB0aGlzKSk7XHJcbiAgICAgICAgICAgIH0sIHRoaXMpO1xyXG4gICAgICAgICAgICB0aGlzLm9uUmVsb2FkID0gJC5wcm94eSh0aGlzLl9yZWxvYWQsIHRoaXMpO1xyXG4gICAgICAgICAgICB0aGlzLm9uRXZlbnQgPSAkLnByb3h5KGZ1bmN0aW9uKGUpIHtcclxuICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuXHJcbiAgICAgICAgICAgICAgICB2YXIgbWV0aG9kID0gdGhpcy5vcHRpb25zKCdtZXRob2QnKTtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoJC5pc0Z1bmN0aW9uKG1ldGhvZCkpIHtcclxuICAgICAgICAgICAgICAgICAgICBtZXRob2QuY2FsbCh0aGlzKTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jYXJvdXNlbCgpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC5qY2Fyb3VzZWwodGhpcy5vcHRpb25zKCdtZXRob2QnKSwgdGhpcy5vcHRpb25zKCd0YXJnZXQnKSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0sIHRoaXMpO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgX2NyZWF0ZTogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIHRoaXMuY2Fyb3VzZWwoKVxyXG4gICAgICAgICAgICAgICAgLm9uZSgnamNhcm91c2VsOmRlc3Ryb3knLCB0aGlzLm9uRGVzdHJveSlcclxuICAgICAgICAgICAgICAgIC5vbignamNhcm91c2VsOnJlbG9hZGVuZCBqY2Fyb3VzZWw6c2Nyb2xsZW5kJywgdGhpcy5vblJlbG9hZCk7XHJcblxyXG4gICAgICAgICAgICB0aGlzLl9lbGVtZW50XHJcbiAgICAgICAgICAgICAgICAub24odGhpcy5vcHRpb25zKCdldmVudCcpICsgJy5qY2Fyb3VzZWxjb250cm9sJywgdGhpcy5vbkV2ZW50KTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMuX3JlbG9hZCgpO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgX2Rlc3Ryb3k6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICB0aGlzLl9lbGVtZW50XHJcbiAgICAgICAgICAgICAgICAub2ZmKCcuamNhcm91c2VsY29udHJvbCcsIHRoaXMub25FdmVudCk7XHJcblxyXG4gICAgICAgICAgICB0aGlzLmNhcm91c2VsKClcclxuICAgICAgICAgICAgICAgIC5vZmYoJ2pjYXJvdXNlbDpkZXN0cm95JywgdGhpcy5vbkRlc3Ryb3kpXHJcbiAgICAgICAgICAgICAgICAub2ZmKCdqY2Fyb3VzZWw6cmVsb2FkZW5kIGpjYXJvdXNlbDpzY3JvbGxlbmQnLCB0aGlzLm9uUmVsb2FkKTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIF9yZWxvYWQ6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICB2YXIgcGFyc2VkICAgPSAkLmpDYXJvdXNlbC5wYXJzZVRhcmdldCh0aGlzLm9wdGlvbnMoJ3RhcmdldCcpKSxcclxuICAgICAgICAgICAgICAgIGNhcm91c2VsID0gdGhpcy5jYXJvdXNlbCgpLFxyXG4gICAgICAgICAgICAgICAgYWN0aXZlO1xyXG5cclxuICAgICAgICAgICAgaWYgKHBhcnNlZC5yZWxhdGl2ZSkge1xyXG4gICAgICAgICAgICAgICAgYWN0aXZlID0gY2Fyb3VzZWxcclxuICAgICAgICAgICAgICAgICAgICAuamNhcm91c2VsKHBhcnNlZC50YXJnZXQgPiAwID8gJ2hhc05leHQnIDogJ2hhc1ByZXYnKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHZhciB0YXJnZXQgPSB0eXBlb2YgcGFyc2VkLnRhcmdldCAhPT0gJ29iamVjdCcgP1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhcm91c2VsLmpjYXJvdXNlbCgnaXRlbXMnKS5lcShwYXJzZWQudGFyZ2V0KSA6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFyc2VkLnRhcmdldDtcclxuXHJcbiAgICAgICAgICAgICAgICBhY3RpdmUgPSBjYXJvdXNlbC5qY2Fyb3VzZWwoJ3RhcmdldCcpLmluZGV4KHRhcmdldCkgPj0gMDtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKHRoaXMuX2FjdGl2ZSAhPT0gYWN0aXZlKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl90cmlnZ2VyKGFjdGl2ZSA/ICdhY3RpdmUnIDogJ2luYWN0aXZlJyk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9hY3RpdmUgPSBhY3RpdmU7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgICAgIH1cclxuICAgIH0pO1xyXG59KGpRdWVyeSkpO1xyXG5cclxuKGZ1bmN0aW9uKCQpIHtcclxuICAgICd1c2Ugc3RyaWN0JztcclxuXHJcbiAgICAkLmpDYXJvdXNlbC5wbHVnaW4oJ2pjYXJvdXNlbFBhZ2luYXRpb24nLCB7XHJcbiAgICAgICAgX29wdGlvbnM6IHtcclxuICAgICAgICAgICAgcGVyUGFnZTogbnVsbCxcclxuICAgICAgICAgICAgaXRlbTogZnVuY3Rpb24ocGFnZSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuICc8YSBocmVmPVwiIycgKyBwYWdlICsgJ1wiPicgKyBwYWdlICsgJzwvYT4nO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBldmVudDogICdjbGljaycsXHJcbiAgICAgICAgICAgIG1ldGhvZDogJ3Njcm9sbCdcclxuICAgICAgICB9LFxyXG4gICAgICAgIF9jYXJvdXNlbEl0ZW1zOiBudWxsLFxyXG4gICAgICAgIF9wYWdlczoge30sXHJcbiAgICAgICAgX2l0ZW1zOiB7fSxcclxuICAgICAgICBfY3VycmVudFBhZ2U6IG51bGwsXHJcbiAgICAgICAgX2luaXQ6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICB0aGlzLm9uRGVzdHJveSA9ICQucHJveHkoZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9kZXN0cm95KCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNhcm91c2VsKClcclxuICAgICAgICAgICAgICAgICAgICAub25lKCdqY2Fyb3VzZWw6Y3JlYXRlZW5kJywgJC5wcm94eSh0aGlzLl9jcmVhdGUsIHRoaXMpKTtcclxuICAgICAgICAgICAgfSwgdGhpcyk7XHJcbiAgICAgICAgICAgIHRoaXMub25SZWxvYWQgPSAkLnByb3h5KHRoaXMuX3JlbG9hZCwgdGhpcyk7XHJcbiAgICAgICAgICAgIHRoaXMub25TY3JvbGwgPSAkLnByb3h5KHRoaXMuX3VwZGF0ZSwgdGhpcyk7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBfY3JlYXRlOiBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgdGhpcy5jYXJvdXNlbCgpXHJcbiAgICAgICAgICAgICAgICAub25lKCdqY2Fyb3VzZWw6ZGVzdHJveScsIHRoaXMub25EZXN0cm95KVxyXG4gICAgICAgICAgICAgICAgLm9uKCdqY2Fyb3VzZWw6cmVsb2FkZW5kJywgdGhpcy5vblJlbG9hZClcclxuICAgICAgICAgICAgICAgIC5vbignamNhcm91c2VsOnNjcm9sbGVuZCcsIHRoaXMub25TY3JvbGwpO1xyXG5cclxuICAgICAgICAgICAgdGhpcy5fcmVsb2FkKCk7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBfZGVzdHJveTogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX2NsZWFyKCk7XHJcblxyXG4gICAgICAgICAgICB0aGlzLmNhcm91c2VsKClcclxuICAgICAgICAgICAgICAgIC5vZmYoJ2pjYXJvdXNlbDpkZXN0cm95JywgdGhpcy5vbkRlc3Ryb3kpXHJcbiAgICAgICAgICAgICAgICAub2ZmKCdqY2Fyb3VzZWw6cmVsb2FkZW5kJywgdGhpcy5vblJlbG9hZClcclxuICAgICAgICAgICAgICAgIC5vZmYoJ2pjYXJvdXNlbDpzY3JvbGxlbmQnLCB0aGlzLm9uU2Nyb2xsKTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMuX2Nhcm91c2VsSXRlbXMgPSBudWxsO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgX3JlbG9hZDogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIHZhciBwZXJQYWdlID0gdGhpcy5vcHRpb25zKCdwZXJQYWdlJyk7XHJcblxyXG4gICAgICAgICAgICB0aGlzLl9wYWdlcyA9IHt9O1xyXG4gICAgICAgICAgICB0aGlzLl9pdGVtcyA9IHt9O1xyXG5cclxuICAgICAgICAgICAgLy8gQ2FsY3VsYXRlIHBhZ2VzXHJcbiAgICAgICAgICAgIGlmICgkLmlzRnVuY3Rpb24ocGVyUGFnZSkpIHtcclxuICAgICAgICAgICAgICAgIHBlclBhZ2UgPSBwZXJQYWdlLmNhbGwodGhpcyk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmIChwZXJQYWdlID09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX3BhZ2VzID0gdGhpcy5fY2FsY3VsYXRlUGFnZXMoKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHZhciBwcCAgICA9IHBhcnNlSW50KHBlclBhZ2UsIDEwKSB8fCAwLFxyXG4gICAgICAgICAgICAgICAgICAgIGl0ZW1zID0gdGhpcy5fZ2V0Q2Fyb3VzZWxJdGVtcygpLFxyXG4gICAgICAgICAgICAgICAgICAgIHBhZ2UgID0gMSxcclxuICAgICAgICAgICAgICAgICAgICBpICAgICA9IDAsXHJcbiAgICAgICAgICAgICAgICAgICAgY3VycjtcclxuXHJcbiAgICAgICAgICAgICAgICB3aGlsZSAodHJ1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGN1cnIgPSBpdGVtcy5lcShpKyspO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAoY3Vyci5sZW5ndGggPT09IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAoIXRoaXMuX3BhZ2VzW3BhZ2VdKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3BhZ2VzW3BhZ2VdID0gY3VycjtcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9wYWdlc1twYWdlXSA9IHRoaXMuX3BhZ2VzW3BhZ2VdLmFkZChjdXJyKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChpICUgcHAgPT09IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcGFnZSsrO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgdGhpcy5fY2xlYXIoKTtcclxuXHJcbiAgICAgICAgICAgIHZhciBzZWxmICAgICA9IHRoaXMsXHJcbiAgICAgICAgICAgICAgICBjYXJvdXNlbCA9IHRoaXMuY2Fyb3VzZWwoKS5kYXRhKCdqY2Fyb3VzZWwnKSxcclxuICAgICAgICAgICAgICAgIGVsZW1lbnQgID0gdGhpcy5fZWxlbWVudCxcclxuICAgICAgICAgICAgICAgIGl0ZW0gICAgID0gdGhpcy5vcHRpb25zKCdpdGVtJyksXHJcbiAgICAgICAgICAgICAgICBudW1DYXJvdXNlbEl0ZW1zID0gdGhpcy5fZ2V0Q2Fyb3VzZWxJdGVtcygpLmxlbmd0aDtcclxuXHJcbiAgICAgICAgICAgICQuZWFjaCh0aGlzLl9wYWdlcywgZnVuY3Rpb24ocGFnZSwgY2Fyb3VzZWxJdGVtcykge1xyXG4gICAgICAgICAgICAgICAgdmFyIGN1cnJJdGVtID0gc2VsZi5faXRlbXNbcGFnZV0gPSAkKGl0ZW0uY2FsbChzZWxmLCBwYWdlLCBjYXJvdXNlbEl0ZW1zKSk7XHJcblxyXG4gICAgICAgICAgICAgICAgY3Vyckl0ZW0ub24oc2VsZi5vcHRpb25zKCdldmVudCcpICsgJy5qY2Fyb3VzZWxwYWdpbmF0aW9uJywgJC5wcm94eShmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgdGFyZ2V0ID0gY2Fyb3VzZWxJdGVtcy5lcSgwKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gSWYgY2lyY3VsYXIgd3JhcHBpbmcgZW5hYmxlZCwgZW5zdXJlIGNvcnJlY3Qgc2Nyb2xsaW5nIGRpcmVjdGlvblxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChjYXJvdXNlbC5jaXJjdWxhcikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgY3VycmVudEluZGV4ID0gY2Fyb3VzZWwuaW5kZXgoY2Fyb3VzZWwudGFyZ2V0KCkpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3SW5kZXggICAgID0gY2Fyb3VzZWwuaW5kZXgodGFyZ2V0KTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwYXJzZUZsb2F0KHBhZ2UpID4gcGFyc2VGbG9hdChzZWxmLl9jdXJyZW50UGFnZSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChuZXdJbmRleCA8IGN1cnJlbnRJbmRleCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhcmdldCA9ICcrPScgKyAobnVtQ2Fyb3VzZWxJdGVtcyAtIGN1cnJlbnRJbmRleCArIG5ld0luZGV4KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChuZXdJbmRleCA+IGN1cnJlbnRJbmRleCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhcmdldCA9ICctPScgKyAoY3VycmVudEluZGV4ICsgKG51bUNhcm91c2VsSXRlbXMgLSBuZXdJbmRleCkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICBjYXJvdXNlbFt0aGlzLm9wdGlvbnMoJ21ldGhvZCcpXSh0YXJnZXQpO1xyXG4gICAgICAgICAgICAgICAgfSwgc2VsZikpO1xyXG5cclxuICAgICAgICAgICAgICAgIGVsZW1lbnQuYXBwZW5kKGN1cnJJdGVtKTtcclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICB0aGlzLl91cGRhdGUoKTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIF91cGRhdGU6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICB2YXIgdGFyZ2V0ID0gdGhpcy5jYXJvdXNlbCgpLmpjYXJvdXNlbCgndGFyZ2V0JyksXHJcbiAgICAgICAgICAgICAgICBjdXJyZW50UGFnZTtcclxuXHJcbiAgICAgICAgICAgICQuZWFjaCh0aGlzLl9wYWdlcywgZnVuY3Rpb24ocGFnZSwgY2Fyb3VzZWxJdGVtcykge1xyXG4gICAgICAgICAgICAgICAgY2Fyb3VzZWxJdGVtcy5lYWNoKGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0YXJnZXQuaXModGhpcykpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudFBhZ2UgPSBwYWdlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKGN1cnJlbnRQYWdlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgIGlmICh0aGlzLl9jdXJyZW50UGFnZSAhPT0gY3VycmVudFBhZ2UpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX3RyaWdnZXIoJ2luYWN0aXZlJywgdGhpcy5faXRlbXNbdGhpcy5fY3VycmVudFBhZ2VdKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuX3RyaWdnZXIoJ2FjdGl2ZScsIHRoaXMuX2l0ZW1zW2N1cnJlbnRQYWdlXSk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHRoaXMuX2N1cnJlbnRQYWdlID0gY3VycmVudFBhZ2U7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBpdGVtczogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9pdGVtcztcclxuICAgICAgICB9LFxyXG4gICAgICAgIHJlbG9hZENhcm91c2VsSXRlbXM6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICB0aGlzLl9jYXJvdXNlbEl0ZW1zID0gbnVsbDtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBfY2xlYXI6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICB0aGlzLl9lbGVtZW50LmVtcHR5KCk7XHJcbiAgICAgICAgICAgIHRoaXMuX2N1cnJlbnRQYWdlID0gbnVsbDtcclxuICAgICAgICB9LFxyXG4gICAgICAgIF9jYWxjdWxhdGVQYWdlczogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIHZhciBjYXJvdXNlbCA9IHRoaXMuY2Fyb3VzZWwoKS5kYXRhKCdqY2Fyb3VzZWwnKSxcclxuICAgICAgICAgICAgICAgIGl0ZW1zICAgID0gdGhpcy5fZ2V0Q2Fyb3VzZWxJdGVtcygpLFxyXG4gICAgICAgICAgICAgICAgY2xpcCAgICAgPSBjYXJvdXNlbC5jbGlwcGluZygpLFxyXG4gICAgICAgICAgICAgICAgd2ggICAgICAgPSAwLFxyXG4gICAgICAgICAgICAgICAgaWR4ICAgICAgPSAwLFxyXG4gICAgICAgICAgICAgICAgcGFnZSAgICAgPSAxLFxyXG4gICAgICAgICAgICAgICAgcGFnZXMgICAgPSB7fSxcclxuICAgICAgICAgICAgICAgIGN1cnIsXHJcbiAgICAgICAgICAgICAgICBkaW07XHJcblxyXG4gICAgICAgICAgICB3aGlsZSAodHJ1ZSkge1xyXG4gICAgICAgICAgICAgICAgY3VyciA9IGl0ZW1zLmVxKGlkeCsrKTtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoY3Vyci5sZW5ndGggPT09IDApIHtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBkaW0gPSBjYXJvdXNlbC5kaW1lbnNpb24oY3Vycik7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKCh3aCArIGRpbSkgPiBjbGlwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcGFnZSsrO1xyXG4gICAgICAgICAgICAgICAgICAgIHdoID0gMDtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICB3aCArPSBkaW07XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKCFwYWdlc1twYWdlXSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHBhZ2VzW3BhZ2VdID0gY3VycjtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcGFnZXNbcGFnZV0gPSBwYWdlc1twYWdlXS5hZGQoY3Vycik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHJldHVybiBwYWdlcztcclxuICAgICAgICB9LFxyXG4gICAgICAgIF9nZXRDYXJvdXNlbEl0ZW1zOiBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgaWYgKCF0aGlzLl9jYXJvdXNlbEl0ZW1zKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9jYXJvdXNlbEl0ZW1zID0gdGhpcy5jYXJvdXNlbCgpLmpjYXJvdXNlbCgnaXRlbXMnKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2Nhcm91c2VsSXRlbXM7XHJcbiAgICAgICAgfVxyXG4gICAgfSk7XHJcbn0oalF1ZXJ5KSk7XHJcblxyXG4oZnVuY3Rpb24oJCwgZG9jdW1lbnQpIHtcclxuICAgICd1c2Ugc3RyaWN0JztcclxuXHJcbiAgICB2YXIgaGlkZGVuUHJvcCxcclxuICAgICAgICB2aXNpYmlsaXR5Q2hhbmdlRXZlbnQsXHJcbiAgICAgICAgdmlzaWJpbGl0eUNoYW5nZUV2ZW50TmFtZXMgPSB7XHJcbiAgICAgICAgICAgIGhpZGRlbjogJ3Zpc2liaWxpdHljaGFuZ2UnLFxyXG4gICAgICAgICAgICBtb3pIaWRkZW46ICdtb3p2aXNpYmlsaXR5Y2hhbmdlJyxcclxuICAgICAgICAgICAgbXNIaWRkZW46ICdtc3Zpc2liaWxpdHljaGFuZ2UnLFxyXG4gICAgICAgICAgICB3ZWJraXRIaWRkZW46ICd3ZWJraXR2aXNpYmlsaXR5Y2hhbmdlJ1xyXG4gICAgICAgIH1cclxuICAgIDtcclxuXHJcbiAgICAkLmVhY2godmlzaWJpbGl0eUNoYW5nZUV2ZW50TmFtZXMsIGZ1bmN0aW9uKGtleSwgdmFsKSB7XHJcbiAgICAgICAgaWYgKHR5cGVvZiBkb2N1bWVudFtrZXldICE9PSAndW5kZWZpbmVkJykge1xyXG4gICAgICAgICAgICBoaWRkZW5Qcm9wID0ga2V5O1xyXG4gICAgICAgICAgICB2aXNpYmlsaXR5Q2hhbmdlRXZlbnQgPSB2YWw7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICB9KTtcclxuXHJcbiAgICAkLmpDYXJvdXNlbC5wbHVnaW4oJ2pjYXJvdXNlbEF1dG9zY3JvbGwnLCB7XHJcbiAgICAgICAgX29wdGlvbnM6IHtcclxuICAgICAgICAgICAgdGFyZ2V0OiAgICAnKz0xJyxcclxuICAgICAgICAgICAgaW50ZXJ2YWw6ICAzMDAwLFxyXG4gICAgICAgICAgICBhdXRvc3RhcnQ6IHRydWVcclxuICAgICAgICB9LFxyXG4gICAgICAgIF90aW1lcjogbnVsbCxcclxuICAgICAgICBfc3RhcnRlZDogZmFsc2UsXHJcbiAgICAgICAgX2luaXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdGhpcy5vbkRlc3Ryb3kgPSAkLnByb3h5KGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fZGVzdHJveSgpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jYXJvdXNlbCgpXHJcbiAgICAgICAgICAgICAgICAgICAgLm9uZSgnamNhcm91c2VsOmNyZWF0ZWVuZCcsICQucHJveHkodGhpcy5fY3JlYXRlLCB0aGlzKSk7XHJcbiAgICAgICAgICAgIH0sIHRoaXMpO1xyXG5cclxuICAgICAgICAgICAgdGhpcy5vbkFuaW1hdGVFbmQgPSAkLnByb3h5KHRoaXMuX3N0YXJ0LCB0aGlzKTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMub25WaXNpYmlsaXR5Q2hhbmdlID0gJC5wcm94eShmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgIGlmIChkb2N1bWVudFtoaWRkZW5Qcm9wXSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3N0b3AoKTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fc3RhcnQoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSwgdGhpcyk7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBfY3JlYXRlOiBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgdGhpcy5jYXJvdXNlbCgpXHJcbiAgICAgICAgICAgICAgICAub25lKCdqY2Fyb3VzZWw6ZGVzdHJveScsIHRoaXMub25EZXN0cm95KTtcclxuXHJcbiAgICAgICAgICAgICQoZG9jdW1lbnQpXHJcbiAgICAgICAgICAgICAgICAub24odmlzaWJpbGl0eUNoYW5nZUV2ZW50LCB0aGlzLm9uVmlzaWJpbGl0eUNoYW5nZSk7XHJcblxyXG4gICAgICAgICAgICBpZiAodGhpcy5vcHRpb25zKCdhdXRvc3RhcnQnKSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zdGFydCgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuICAgICAgICBfZGVzdHJveTogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX3N0b3AoKTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMuY2Fyb3VzZWwoKVxyXG4gICAgICAgICAgICAgICAgLm9mZignamNhcm91c2VsOmRlc3Ryb3knLCB0aGlzLm9uRGVzdHJveSk7XHJcblxyXG4gICAgICAgICAgICAkKGRvY3VtZW50KVxyXG4gICAgICAgICAgICAgICAgLm9mZih2aXNpYmlsaXR5Q2hhbmdlRXZlbnQsIHRoaXMub25WaXNpYmlsaXR5Q2hhbmdlKTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIF9zdGFydDogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX3N0b3AoKTtcclxuXHJcbiAgICAgICAgICAgIGlmICghdGhpcy5fc3RhcnRlZCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB0aGlzLmNhcm91c2VsKClcclxuICAgICAgICAgICAgICAgIC5vbmUoJ2pjYXJvdXNlbDphbmltYXRlZW5kJywgdGhpcy5vbkFuaW1hdGVFbmQpO1xyXG5cclxuICAgICAgICAgICAgdGhpcy5fdGltZXIgPSBzZXRUaW1lb3V0KCQucHJveHkoZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNhcm91c2VsKCkuamNhcm91c2VsKCdzY3JvbGwnLCB0aGlzLm9wdGlvbnMoJ3RhcmdldCcpKTtcclxuICAgICAgICAgICAgfSwgdGhpcyksIHRoaXMub3B0aW9ucygnaW50ZXJ2YWwnKSk7XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gdGhpcztcclxuICAgICAgICB9LFxyXG4gICAgICAgIF9zdG9wOiBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMuX3RpbWVyKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl90aW1lciA9IGNsZWFyVGltZW91dCh0aGlzLl90aW1lcik7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHRoaXMuY2Fyb3VzZWwoKVxyXG4gICAgICAgICAgICAgICAgLm9mZignamNhcm91c2VsOmFuaW1hdGVlbmQnLCB0aGlzLm9uQW5pbWF0ZUVuZCk7XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gdGhpcztcclxuICAgICAgICB9LFxyXG4gICAgICAgIHN0YXJ0OiBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgdGhpcy5fc3RhcnRlZCA9IHRydWU7XHJcbiAgICAgICAgICAgIHRoaXMuX3N0YXJ0KCk7XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gdGhpcztcclxuICAgICAgICB9LFxyXG4gICAgICAgIHN0b3A6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICB0aGlzLl9zdGFydGVkID0gZmFsc2U7XHJcbiAgICAgICAgICAgIHRoaXMuX3N0b3AoKTtcclxuXHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgICAgIH1cclxuICAgIH0pO1xyXG59KGpRdWVyeSwgZG9jdW1lbnQpKTtcclxuLyohXHJcbiAqIElzb3RvcGUgUEFDS0FHRUQgdjIuMi4yXHJcbiAqXHJcbiAqIExpY2Vuc2VkIEdQTHYzIGZvciBvcGVuIHNvdXJjZSB1c2VcclxuICogb3IgSXNvdG9wZSBDb21tZXJjaWFsIExpY2Vuc2UgZm9yIGNvbW1lcmNpYWwgdXNlXHJcbiAqXHJcbiAqIGh0dHA6Ly9pc290b3BlLm1ldGFmaXp6eS5jb1xyXG4gKiBDb3B5cmlnaHQgMjAxNSBNZXRhZml6enlcclxuICovXHJcblxyXG4vKipcclxuICogQnJpZGdldCBtYWtlcyBqUXVlcnkgd2lkZ2V0c1xyXG4gKiB2MS4xLjBcclxuICogTUlUIGxpY2Vuc2VcclxuICovXHJcblxyXG4oIGZ1bmN0aW9uKCB3aW5kb3cgKSB7XHJcblxyXG5cclxuXHJcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIHV0aWxzIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIC8vXHJcblxyXG52YXIgc2xpY2UgPSBBcnJheS5wcm90b3R5cGUuc2xpY2U7XHJcblxyXG5mdW5jdGlvbiBub29wKCkge31cclxuXHJcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIGRlZmluaXRpb24gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gLy9cclxuXHJcbmZ1bmN0aW9uIGRlZmluZUJyaWRnZXQoICQgKSB7XHJcblxyXG4vLyBiYWlsIGlmIG5vIGpRdWVyeVxyXG5pZiAoICEkICkge1xyXG4gIHJldHVybjtcclxufVxyXG5cclxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gYWRkT3B0aW9uTWV0aG9kIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIC8vXHJcblxyXG4vKipcclxuICogYWRkcyBvcHRpb24gbWV0aG9kIC0+ICQoKS5wbHVnaW4oJ29wdGlvbicsIHsuLi59KVxyXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBQbHVnaW5DbGFzcyAtIGNvbnN0cnVjdG9yIGNsYXNzXHJcbiAqL1xyXG5mdW5jdGlvbiBhZGRPcHRpb25NZXRob2QoIFBsdWdpbkNsYXNzICkge1xyXG4gIC8vIGRvbid0IG92ZXJ3cml0ZSBvcmlnaW5hbCBvcHRpb24gbWV0aG9kXHJcbiAgaWYgKCBQbHVnaW5DbGFzcy5wcm90b3R5cGUub3B0aW9uICkge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgLy8gb3B0aW9uIHNldHRlclxyXG4gIFBsdWdpbkNsYXNzLnByb3RvdHlwZS5vcHRpb24gPSBmdW5jdGlvbiggb3B0cyApIHtcclxuICAgIC8vIGJhaWwgb3V0IGlmIG5vdCBhbiBvYmplY3RcclxuICAgIGlmICggISQuaXNQbGFpbk9iamVjdCggb3B0cyApICl7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIHRoaXMub3B0aW9ucyA9ICQuZXh0ZW5kKCB0cnVlLCB0aGlzLm9wdGlvbnMsIG9wdHMgKTtcclxuICB9O1xyXG59XHJcblxyXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBwbHVnaW4gYnJpZGdlIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIC8vXHJcblxyXG4vLyBoZWxwZXIgZnVuY3Rpb24gZm9yIGxvZ2dpbmcgZXJyb3JzXHJcbi8vICQuZXJyb3IgYnJlYWtzIGpRdWVyeSBjaGFpbmluZ1xyXG52YXIgbG9nRXJyb3IgPSB0eXBlb2YgY29uc29sZSA9PT0gJ3VuZGVmaW5lZCcgPyBub29wIDpcclxuICBmdW5jdGlvbiggbWVzc2FnZSApIHtcclxuICAgIGNvbnNvbGUuZXJyb3IoIG1lc3NhZ2UgKTtcclxuICB9O1xyXG5cclxuLyoqXHJcbiAqIGpRdWVyeSBwbHVnaW4gYnJpZGdlLCBhY2Nlc3MgbWV0aG9kcyBsaWtlICRlbGVtLnBsdWdpbignbWV0aG9kJylcclxuICogQHBhcmFtIHtTdHJpbmd9IG5hbWVzcGFjZSAtIHBsdWdpbiBuYW1lXHJcbiAqIEBwYXJhbSB7RnVuY3Rpb259IFBsdWdpbkNsYXNzIC0gY29uc3RydWN0b3IgY2xhc3NcclxuICovXHJcbmZ1bmN0aW9uIGJyaWRnZSggbmFtZXNwYWNlLCBQbHVnaW5DbGFzcyApIHtcclxuICAvLyBhZGQgdG8galF1ZXJ5IGZuIG5hbWVzcGFjZVxyXG4gICQuZm5bIG5hbWVzcGFjZSBdID0gZnVuY3Rpb24oIG9wdGlvbnMgKSB7XHJcbiAgICBpZiAoIHR5cGVvZiBvcHRpb25zID09PSAnc3RyaW5nJyApIHtcclxuICAgICAgLy8gY2FsbCBwbHVnaW4gbWV0aG9kIHdoZW4gZmlyc3QgYXJndW1lbnQgaXMgYSBzdHJpbmdcclxuICAgICAgLy8gZ2V0IGFyZ3VtZW50cyBmb3IgbWV0aG9kXHJcbiAgICAgIHZhciBhcmdzID0gc2xpY2UuY2FsbCggYXJndW1lbnRzLCAxICk7XHJcblxyXG4gICAgICBmb3IgKCB2YXIgaT0wLCBsZW4gPSB0aGlzLmxlbmd0aDsgaSA8IGxlbjsgaSsrICkge1xyXG4gICAgICAgIHZhciBlbGVtID0gdGhpc1tpXTtcclxuICAgICAgICB2YXIgaW5zdGFuY2UgPSAkLmRhdGEoIGVsZW0sIG5hbWVzcGFjZSApO1xyXG4gICAgICAgIGlmICggIWluc3RhbmNlICkge1xyXG4gICAgICAgICAgbG9nRXJyb3IoIFwiY2Fubm90IGNhbGwgbWV0aG9kcyBvbiBcIiArIG5hbWVzcGFjZSArIFwiIHByaW9yIHRvIGluaXRpYWxpemF0aW9uOyBcIiArXHJcbiAgICAgICAgICAgIFwiYXR0ZW1wdGVkIHRvIGNhbGwgJ1wiICsgb3B0aW9ucyArIFwiJ1wiICk7XHJcbiAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKCAhJC5pc0Z1bmN0aW9uKCBpbnN0YW5jZVtvcHRpb25zXSApIHx8IG9wdGlvbnMuY2hhckF0KDApID09PSAnXycgKSB7XHJcbiAgICAgICAgICBsb2dFcnJvciggXCJubyBzdWNoIG1ldGhvZCAnXCIgKyBvcHRpb25zICsgXCInIGZvciBcIiArIG5hbWVzcGFjZSArIFwiIGluc3RhbmNlXCIgKTtcclxuICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gdHJpZ2dlciBtZXRob2Qgd2l0aCBhcmd1bWVudHNcclxuICAgICAgICB2YXIgcmV0dXJuVmFsdWUgPSBpbnN0YW5jZVsgb3B0aW9ucyBdLmFwcGx5KCBpbnN0YW5jZSwgYXJncyApO1xyXG5cclxuICAgICAgICAvLyBicmVhayBsb29rIGFuZCByZXR1cm4gZmlyc3QgdmFsdWUgaWYgcHJvdmlkZWRcclxuICAgICAgICBpZiAoIHJldHVyblZhbHVlICE9PSB1bmRlZmluZWQgKSB7XHJcbiAgICAgICAgICByZXR1cm4gcmV0dXJuVmFsdWU7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICAgIC8vIHJldHVybiB0aGlzIGlmIG5vIHJldHVybiB2YWx1ZVxyXG4gICAgICByZXR1cm4gdGhpcztcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHZhciBpbnN0YW5jZSA9ICQuZGF0YSggdGhpcywgbmFtZXNwYWNlICk7XHJcbiAgICAgICAgaWYgKCBpbnN0YW5jZSApIHtcclxuICAgICAgICAgIC8vIGFwcGx5IG9wdGlvbnMgJiBpbml0XHJcbiAgICAgICAgICBpbnN0YW5jZS5vcHRpb24oIG9wdGlvbnMgKTtcclxuICAgICAgICAgIGluc3RhbmNlLl9pbml0KCk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIC8vIGluaXRpYWxpemUgbmV3IGluc3RhbmNlXHJcbiAgICAgICAgICBpbnN0YW5jZSA9IG5ldyBQbHVnaW5DbGFzcyggdGhpcywgb3B0aW9ucyApO1xyXG4gICAgICAgICAgJC5kYXRhKCB0aGlzLCBuYW1lc3BhY2UsIGluc3RhbmNlICk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9KTtcclxuICAgIH1cclxuICB9O1xyXG5cclxufVxyXG5cclxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gYnJpZGdldCAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAvL1xyXG5cclxuLyoqXHJcbiAqIGNvbnZlcnRzIGEgUHJvdG90eXBpY2FsIGNsYXNzIGludG8gYSBwcm9wZXIgalF1ZXJ5IHBsdWdpblxyXG4gKiAgIHRoZSBjbGFzcyBtdXN0IGhhdmUgYSAuX2luaXQgbWV0aG9kXHJcbiAqIEBwYXJhbSB7U3RyaW5nfSBuYW1lc3BhY2UgLSBwbHVnaW4gbmFtZSwgdXNlZCBpbiAkKCkucGx1Z2luTmFtZVxyXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBQbHVnaW5DbGFzcyAtIGNvbnN0cnVjdG9yIGNsYXNzXHJcbiAqL1xyXG4kLmJyaWRnZXQgPSBmdW5jdGlvbiggbmFtZXNwYWNlLCBQbHVnaW5DbGFzcyApIHtcclxuICBhZGRPcHRpb25NZXRob2QoIFBsdWdpbkNsYXNzICk7XHJcbiAgYnJpZGdlKCBuYW1lc3BhY2UsIFBsdWdpbkNsYXNzICk7XHJcbn07XHJcblxyXG5yZXR1cm4gJC5icmlkZ2V0O1xyXG5cclxufVxyXG5cclxuLy8gdHJhbnNwb3J0XHJcbmlmICggdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kICkge1xyXG4gIC8vIEFNRFxyXG4gIGRlZmluZSggJ2pxdWVyeS1icmlkZ2V0L2pxdWVyeS5icmlkZ2V0JyxbICdqcXVlcnknIF0sIGRlZmluZUJyaWRnZXQgKTtcclxufSBlbHNlIGlmICggdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICkge1xyXG4gIGRlZmluZUJyaWRnZXQoIHJlcXVpcmUoJ2pxdWVyeScpICk7XHJcbn0gZWxzZSB7XHJcbiAgLy8gZ2V0IGpxdWVyeSBmcm9tIGJyb3dzZXIgZ2xvYmFsXHJcbiAgZGVmaW5lQnJpZGdldCggd2luZG93LmpRdWVyeSApO1xyXG59XHJcblxyXG59KSggd2luZG93ICk7XHJcblxyXG4vKiFcclxuICogZXZlbnRpZSB2MS4wLjZcclxuICogZXZlbnQgYmluZGluZyBoZWxwZXJcclxuICogICBldmVudGllLmJpbmQoIGVsZW0sICdjbGljaycsIG15Rm4gKVxyXG4gKiAgIGV2ZW50aWUudW5iaW5kKCBlbGVtLCAnY2xpY2snLCBteUZuIClcclxuICogTUlUIGxpY2Vuc2VcclxuICovXHJcblxyXG4vKmpzaGludCBicm93c2VyOiB0cnVlLCB1bmRlZjogdHJ1ZSwgdW51c2VkOiB0cnVlICovXHJcbi8qZ2xvYmFsIGRlZmluZTogZmFsc2UsIG1vZHVsZTogZmFsc2UgKi9cclxuXHJcbiggZnVuY3Rpb24oIHdpbmRvdyApIHtcclxuXHJcblxyXG5cclxudmFyIGRvY0VsZW0gPSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XHJcblxyXG52YXIgYmluZCA9IGZ1bmN0aW9uKCkge307XHJcblxyXG5mdW5jdGlvbiBnZXRJRUV2ZW50KCBvYmogKSB7XHJcbiAgdmFyIGV2ZW50ID0gd2luZG93LmV2ZW50O1xyXG4gIC8vIGFkZCBldmVudC50YXJnZXRcclxuICBldmVudC50YXJnZXQgPSBldmVudC50YXJnZXQgfHwgZXZlbnQuc3JjRWxlbWVudCB8fCBvYmo7XHJcbiAgcmV0dXJuIGV2ZW50O1xyXG59XHJcblxyXG5pZiAoIGRvY0VsZW0uYWRkRXZlbnRMaXN0ZW5lciApIHtcclxuICBiaW5kID0gZnVuY3Rpb24oIG9iaiwgdHlwZSwgZm4gKSB7XHJcbiAgICBvYmouYWRkRXZlbnRMaXN0ZW5lciggdHlwZSwgZm4sIGZhbHNlICk7XHJcbiAgfTtcclxufSBlbHNlIGlmICggZG9jRWxlbS5hdHRhY2hFdmVudCApIHtcclxuICBiaW5kID0gZnVuY3Rpb24oIG9iaiwgdHlwZSwgZm4gKSB7XHJcbiAgICBvYmpbIHR5cGUgKyBmbiBdID0gZm4uaGFuZGxlRXZlbnQgP1xyXG4gICAgICBmdW5jdGlvbigpIHtcclxuICAgICAgICB2YXIgZXZlbnQgPSBnZXRJRUV2ZW50KCBvYmogKTtcclxuICAgICAgICBmbi5oYW5kbGVFdmVudC5jYWxsKCBmbiwgZXZlbnQgKTtcclxuICAgICAgfSA6XHJcbiAgICAgIGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHZhciBldmVudCA9IGdldElFRXZlbnQoIG9iaiApO1xyXG4gICAgICAgIGZuLmNhbGwoIG9iaiwgZXZlbnQgKTtcclxuICAgICAgfTtcclxuICAgIG9iai5hdHRhY2hFdmVudCggXCJvblwiICsgdHlwZSwgb2JqWyB0eXBlICsgZm4gXSApO1xyXG4gIH07XHJcbn1cclxuXHJcbnZhciB1bmJpbmQgPSBmdW5jdGlvbigpIHt9O1xyXG5cclxuaWYgKCBkb2NFbGVtLnJlbW92ZUV2ZW50TGlzdGVuZXIgKSB7XHJcbiAgdW5iaW5kID0gZnVuY3Rpb24oIG9iaiwgdHlwZSwgZm4gKSB7XHJcbiAgICBvYmoucmVtb3ZlRXZlbnRMaXN0ZW5lciggdHlwZSwgZm4sIGZhbHNlICk7XHJcbiAgfTtcclxufSBlbHNlIGlmICggZG9jRWxlbS5kZXRhY2hFdmVudCApIHtcclxuICB1bmJpbmQgPSBmdW5jdGlvbiggb2JqLCB0eXBlLCBmbiApIHtcclxuICAgIG9iai5kZXRhY2hFdmVudCggXCJvblwiICsgdHlwZSwgb2JqWyB0eXBlICsgZm4gXSApO1xyXG4gICAgdHJ5IHtcclxuICAgICAgZGVsZXRlIG9ialsgdHlwZSArIGZuIF07XHJcbiAgICB9IGNhdGNoICggZXJyICkge1xyXG4gICAgICAvLyBjYW4ndCBkZWxldGUgd2luZG93IG9iamVjdCBwcm9wZXJ0aWVzXHJcbiAgICAgIG9ialsgdHlwZSArIGZuIF0gPSB1bmRlZmluZWQ7XHJcbiAgICB9XHJcbiAgfTtcclxufVxyXG5cclxudmFyIGV2ZW50aWUgPSB7XHJcbiAgYmluZDogYmluZCxcclxuICB1bmJpbmQ6IHVuYmluZFxyXG59O1xyXG5cclxuLy8gLS0tLS0gbW9kdWxlIGRlZmluaXRpb24gLS0tLS0gLy9cclxuXHJcbmlmICggdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kICkge1xyXG4gIC8vIEFNRFxyXG4gIGRlZmluZSggJ2V2ZW50aWUvZXZlbnRpZScsZXZlbnRpZSApO1xyXG59IGVsc2UgaWYgKCB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgKSB7XHJcbiAgLy8gQ29tbW9uSlNcclxuICBtb2R1bGUuZXhwb3J0cyA9IGV2ZW50aWU7XHJcbn0gZWxzZSB7XHJcbiAgLy8gYnJvd3NlciBnbG9iYWxcclxuICB3aW5kb3cuZXZlbnRpZSA9IGV2ZW50aWU7XHJcbn1cclxuXHJcbn0pKCB3aW5kb3cgKTtcclxuXHJcbi8qIVxyXG4gKiBFdmVudEVtaXR0ZXIgdjQuMi4xMSAtIGdpdC5pby9lZVxyXG4gKiBVbmxpY2Vuc2UgLSBodHRwOi8vdW5saWNlbnNlLm9yZy9cclxuICogT2xpdmVyIENhbGR3ZWxsIC0gaHR0cDovL29saS5tZS51ay9cclxuICogQHByZXNlcnZlXHJcbiAqL1xyXG5cclxuOyhmdW5jdGlvbiAoKSB7XHJcbiAgICAndXNlIHN0cmljdCc7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBDbGFzcyBmb3IgbWFuYWdpbmcgZXZlbnRzLlxyXG4gICAgICogQ2FuIGJlIGV4dGVuZGVkIHRvIHByb3ZpZGUgZXZlbnQgZnVuY3Rpb25hbGl0eSBpbiBvdGhlciBjbGFzc2VzLlxyXG4gICAgICpcclxuICAgICAqIEBjbGFzcyBFdmVudEVtaXR0ZXIgTWFuYWdlcyBldmVudCByZWdpc3RlcmluZyBhbmQgZW1pdHRpbmcuXHJcbiAgICAgKi9cclxuICAgIGZ1bmN0aW9uIEV2ZW50RW1pdHRlcigpIHt9XHJcblxyXG4gICAgLy8gU2hvcnRjdXRzIHRvIGltcHJvdmUgc3BlZWQgYW5kIHNpemVcclxuICAgIHZhciBwcm90byA9IEV2ZW50RW1pdHRlci5wcm90b3R5cGU7XHJcbiAgICB2YXIgZXhwb3J0cyA9IHRoaXM7XHJcbiAgICB2YXIgb3JpZ2luYWxHbG9iYWxWYWx1ZSA9IGV4cG9ydHMuRXZlbnRFbWl0dGVyO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogRmluZHMgdGhlIGluZGV4IG9mIHRoZSBsaXN0ZW5lciBmb3IgdGhlIGV2ZW50IGluIGl0cyBzdG9yYWdlIGFycmF5LlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb25bXX0gbGlzdGVuZXJzIEFycmF5IG9mIGxpc3RlbmVycyB0byBzZWFyY2ggdGhyb3VnaC5cclxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGxpc3RlbmVyIE1ldGhvZCB0byBsb29rIGZvci5cclxuICAgICAqIEByZXR1cm4ge051bWJlcn0gSW5kZXggb2YgdGhlIHNwZWNpZmllZCBsaXN0ZW5lciwgLTEgaWYgbm90IGZvdW5kXHJcbiAgICAgKiBAYXBpIHByaXZhdGVcclxuICAgICAqL1xyXG4gICAgZnVuY3Rpb24gaW5kZXhPZkxpc3RlbmVyKGxpc3RlbmVycywgbGlzdGVuZXIpIHtcclxuICAgICAgICB2YXIgaSA9IGxpc3RlbmVycy5sZW5ndGg7XHJcbiAgICAgICAgd2hpbGUgKGktLSkge1xyXG4gICAgICAgICAgICBpZiAobGlzdGVuZXJzW2ldLmxpc3RlbmVyID09PSBsaXN0ZW5lcikge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiAtMTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEFsaWFzIGEgbWV0aG9kIHdoaWxlIGtlZXBpbmcgdGhlIGNvbnRleHQgY29ycmVjdCwgdG8gYWxsb3cgZm9yIG92ZXJ3cml0aW5nIG9mIHRhcmdldCBtZXRob2QuXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IG5hbWUgVGhlIG5hbWUgb2YgdGhlIHRhcmdldCBtZXRob2QuXHJcbiAgICAgKiBAcmV0dXJuIHtGdW5jdGlvbn0gVGhlIGFsaWFzZWQgbWV0aG9kXHJcbiAgICAgKiBAYXBpIHByaXZhdGVcclxuICAgICAqL1xyXG4gICAgZnVuY3Rpb24gYWxpYXMobmFtZSkge1xyXG4gICAgICAgIHJldHVybiBmdW5jdGlvbiBhbGlhc0Nsb3N1cmUoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzW25hbWVdLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XHJcbiAgICAgICAgfTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFJldHVybnMgdGhlIGxpc3RlbmVyIGFycmF5IGZvciB0aGUgc3BlY2lmaWVkIGV2ZW50LlxyXG4gICAgICogV2lsbCBpbml0aWFsaXNlIHRoZSBldmVudCBvYmplY3QgYW5kIGxpc3RlbmVyIGFycmF5cyBpZiByZXF1aXJlZC5cclxuICAgICAqIFdpbGwgcmV0dXJuIGFuIG9iamVjdCBpZiB5b3UgdXNlIGEgcmVnZXggc2VhcmNoLiBUaGUgb2JqZWN0IGNvbnRhaW5zIGtleXMgZm9yIGVhY2ggbWF0Y2hlZCBldmVudC4gU28gL2JhW3J6XS8gbWlnaHQgcmV0dXJuIGFuIG9iamVjdCBjb250YWluaW5nIGJhciBhbmQgYmF6LiBCdXQgb25seSBpZiB5b3UgaGF2ZSBlaXRoZXIgZGVmaW5lZCB0aGVtIHdpdGggZGVmaW5lRXZlbnQgb3IgYWRkZWQgc29tZSBsaXN0ZW5lcnMgdG8gdGhlbS5cclxuICAgICAqIEVhY2ggcHJvcGVydHkgaW4gdGhlIG9iamVjdCByZXNwb25zZSBpcyBhbiBhcnJheSBvZiBsaXN0ZW5lciBmdW5jdGlvbnMuXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHtTdHJpbmd8UmVnRXhwfSBldnQgTmFtZSBvZiB0aGUgZXZlbnQgdG8gcmV0dXJuIHRoZSBsaXN0ZW5lcnMgZnJvbS5cclxuICAgICAqIEByZXR1cm4ge0Z1bmN0aW9uW118T2JqZWN0fSBBbGwgbGlzdGVuZXIgZnVuY3Rpb25zIGZvciB0aGUgZXZlbnQuXHJcbiAgICAgKi9cclxuICAgIHByb3RvLmdldExpc3RlbmVycyA9IGZ1bmN0aW9uIGdldExpc3RlbmVycyhldnQpIHtcclxuICAgICAgICB2YXIgZXZlbnRzID0gdGhpcy5fZ2V0RXZlbnRzKCk7XHJcbiAgICAgICAgdmFyIHJlc3BvbnNlO1xyXG4gICAgICAgIHZhciBrZXk7XHJcblxyXG4gICAgICAgIC8vIFJldHVybiBhIGNvbmNhdGVuYXRlZCBhcnJheSBvZiBhbGwgbWF0Y2hpbmcgZXZlbnRzIGlmXHJcbiAgICAgICAgLy8gdGhlIHNlbGVjdG9yIGlzIGEgcmVndWxhciBleHByZXNzaW9uLlxyXG4gICAgICAgIGlmIChldnQgaW5zdGFuY2VvZiBSZWdFeHApIHtcclxuICAgICAgICAgICAgcmVzcG9uc2UgPSB7fTtcclxuICAgICAgICAgICAgZm9yIChrZXkgaW4gZXZlbnRzKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoZXZlbnRzLmhhc093blByb3BlcnR5KGtleSkgJiYgZXZ0LnRlc3Qoa2V5KSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJlc3BvbnNlW2tleV0gPSBldmVudHNba2V5XTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgcmVzcG9uc2UgPSBldmVudHNbZXZ0XSB8fCAoZXZlbnRzW2V2dF0gPSBbXSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gcmVzcG9uc2U7XHJcbiAgICB9O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogVGFrZXMgYSBsaXN0IG9mIGxpc3RlbmVyIG9iamVjdHMgYW5kIGZsYXR0ZW5zIGl0IGludG8gYSBsaXN0IG9mIGxpc3RlbmVyIGZ1bmN0aW9ucy5cclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0ge09iamVjdFtdfSBsaXN0ZW5lcnMgUmF3IGxpc3RlbmVyIG9iamVjdHMuXHJcbiAgICAgKiBAcmV0dXJuIHtGdW5jdGlvbltdfSBKdXN0IHRoZSBsaXN0ZW5lciBmdW5jdGlvbnMuXHJcbiAgICAgKi9cclxuICAgIHByb3RvLmZsYXR0ZW5MaXN0ZW5lcnMgPSBmdW5jdGlvbiBmbGF0dGVuTGlzdGVuZXJzKGxpc3RlbmVycykge1xyXG4gICAgICAgIHZhciBmbGF0TGlzdGVuZXJzID0gW107XHJcbiAgICAgICAgdmFyIGk7XHJcblxyXG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBsaXN0ZW5lcnMubGVuZ3RoOyBpICs9IDEpIHtcclxuICAgICAgICAgICAgZmxhdExpc3RlbmVycy5wdXNoKGxpc3RlbmVyc1tpXS5saXN0ZW5lcik7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gZmxhdExpc3RlbmVycztcclxuICAgIH07XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBGZXRjaGVzIHRoZSByZXF1ZXN0ZWQgbGlzdGVuZXJzIHZpYSBnZXRMaXN0ZW5lcnMgYnV0IHdpbGwgYWx3YXlzIHJldHVybiB0aGUgcmVzdWx0cyBpbnNpZGUgYW4gb2JqZWN0LiBUaGlzIGlzIG1haW5seSBmb3IgaW50ZXJuYWwgdXNlIGJ1dCBvdGhlcnMgbWF5IGZpbmQgaXQgdXNlZnVsLlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7U3RyaW5nfFJlZ0V4cH0gZXZ0IE5hbWUgb2YgdGhlIGV2ZW50IHRvIHJldHVybiB0aGUgbGlzdGVuZXJzIGZyb20uXHJcbiAgICAgKiBAcmV0dXJuIHtPYmplY3R9IEFsbCBsaXN0ZW5lciBmdW5jdGlvbnMgZm9yIGFuIGV2ZW50IGluIGFuIG9iamVjdC5cclxuICAgICAqL1xyXG4gICAgcHJvdG8uZ2V0TGlzdGVuZXJzQXNPYmplY3QgPSBmdW5jdGlvbiBnZXRMaXN0ZW5lcnNBc09iamVjdChldnQpIHtcclxuICAgICAgICB2YXIgbGlzdGVuZXJzID0gdGhpcy5nZXRMaXN0ZW5lcnMoZXZ0KTtcclxuICAgICAgICB2YXIgcmVzcG9uc2U7XHJcblxyXG4gICAgICAgIGlmIChsaXN0ZW5lcnMgaW5zdGFuY2VvZiBBcnJheSkge1xyXG4gICAgICAgICAgICByZXNwb25zZSA9IHt9O1xyXG4gICAgICAgICAgICByZXNwb25zZVtldnRdID0gbGlzdGVuZXJzO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIHJlc3BvbnNlIHx8IGxpc3RlbmVycztcclxuICAgIH07XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBBZGRzIGEgbGlzdGVuZXIgZnVuY3Rpb24gdG8gdGhlIHNwZWNpZmllZCBldmVudC5cclxuICAgICAqIFRoZSBsaXN0ZW5lciB3aWxsIG5vdCBiZSBhZGRlZCBpZiBpdCBpcyBhIGR1cGxpY2F0ZS5cclxuICAgICAqIElmIHRoZSBsaXN0ZW5lciByZXR1cm5zIHRydWUgdGhlbiBpdCB3aWxsIGJlIHJlbW92ZWQgYWZ0ZXIgaXQgaXMgY2FsbGVkLlxyXG4gICAgICogSWYgeW91IHBhc3MgYSByZWd1bGFyIGV4cHJlc3Npb24gYXMgdGhlIGV2ZW50IG5hbWUgdGhlbiB0aGUgbGlzdGVuZXIgd2lsbCBiZSBhZGRlZCB0byBhbGwgZXZlbnRzIHRoYXQgbWF0Y2ggaXQuXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHtTdHJpbmd8UmVnRXhwfSBldnQgTmFtZSBvZiB0aGUgZXZlbnQgdG8gYXR0YWNoIHRoZSBsaXN0ZW5lciB0by5cclxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGxpc3RlbmVyIE1ldGhvZCB0byBiZSBjYWxsZWQgd2hlbiB0aGUgZXZlbnQgaXMgZW1pdHRlZC4gSWYgdGhlIGZ1bmN0aW9uIHJldHVybnMgdHJ1ZSB0aGVuIGl0IHdpbGwgYmUgcmVtb3ZlZCBhZnRlciBjYWxsaW5nLlxyXG4gICAgICogQHJldHVybiB7T2JqZWN0fSBDdXJyZW50IGluc3RhbmNlIG9mIEV2ZW50RW1pdHRlciBmb3IgY2hhaW5pbmcuXHJcbiAgICAgKi9cclxuICAgIHByb3RvLmFkZExpc3RlbmVyID0gZnVuY3Rpb24gYWRkTGlzdGVuZXIoZXZ0LCBsaXN0ZW5lcikge1xyXG4gICAgICAgIHZhciBsaXN0ZW5lcnMgPSB0aGlzLmdldExpc3RlbmVyc0FzT2JqZWN0KGV2dCk7XHJcbiAgICAgICAgdmFyIGxpc3RlbmVySXNXcmFwcGVkID0gdHlwZW9mIGxpc3RlbmVyID09PSAnb2JqZWN0JztcclxuICAgICAgICB2YXIga2V5O1xyXG5cclxuICAgICAgICBmb3IgKGtleSBpbiBsaXN0ZW5lcnMpIHtcclxuICAgICAgICAgICAgaWYgKGxpc3RlbmVycy5oYXNPd25Qcm9wZXJ0eShrZXkpICYmIGluZGV4T2ZMaXN0ZW5lcihsaXN0ZW5lcnNba2V5XSwgbGlzdGVuZXIpID09PSAtMSkge1xyXG4gICAgICAgICAgICAgICAgbGlzdGVuZXJzW2tleV0ucHVzaChsaXN0ZW5lcklzV3JhcHBlZCA/IGxpc3RlbmVyIDoge1xyXG4gICAgICAgICAgICAgICAgICAgIGxpc3RlbmVyOiBsaXN0ZW5lcixcclxuICAgICAgICAgICAgICAgICAgICBvbmNlOiBmYWxzZVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIEFsaWFzIG9mIGFkZExpc3RlbmVyXHJcbiAgICAgKi9cclxuICAgIHByb3RvLm9uID0gYWxpYXMoJ2FkZExpc3RlbmVyJyk7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBTZW1pLWFsaWFzIG9mIGFkZExpc3RlbmVyLiBJdCB3aWxsIGFkZCBhIGxpc3RlbmVyIHRoYXQgd2lsbCBiZVxyXG4gICAgICogYXV0b21hdGljYWxseSByZW1vdmVkIGFmdGVyIGl0cyBmaXJzdCBleGVjdXRpb24uXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHtTdHJpbmd8UmVnRXhwfSBldnQgTmFtZSBvZiB0aGUgZXZlbnQgdG8gYXR0YWNoIHRoZSBsaXN0ZW5lciB0by5cclxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGxpc3RlbmVyIE1ldGhvZCB0byBiZSBjYWxsZWQgd2hlbiB0aGUgZXZlbnQgaXMgZW1pdHRlZC4gSWYgdGhlIGZ1bmN0aW9uIHJldHVybnMgdHJ1ZSB0aGVuIGl0IHdpbGwgYmUgcmVtb3ZlZCBhZnRlciBjYWxsaW5nLlxyXG4gICAgICogQHJldHVybiB7T2JqZWN0fSBDdXJyZW50IGluc3RhbmNlIG9mIEV2ZW50RW1pdHRlciBmb3IgY2hhaW5pbmcuXHJcbiAgICAgKi9cclxuICAgIHByb3RvLmFkZE9uY2VMaXN0ZW5lciA9IGZ1bmN0aW9uIGFkZE9uY2VMaXN0ZW5lcihldnQsIGxpc3RlbmVyKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuYWRkTGlzdGVuZXIoZXZ0LCB7XHJcbiAgICAgICAgICAgIGxpc3RlbmVyOiBsaXN0ZW5lcixcclxuICAgICAgICAgICAgb25jZTogdHJ1ZVxyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIEFsaWFzIG9mIGFkZE9uY2VMaXN0ZW5lci5cclxuICAgICAqL1xyXG4gICAgcHJvdG8ub25jZSA9IGFsaWFzKCdhZGRPbmNlTGlzdGVuZXInKTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIERlZmluZXMgYW4gZXZlbnQgbmFtZS4gVGhpcyBpcyByZXF1aXJlZCBpZiB5b3Ugd2FudCB0byB1c2UgYSByZWdleCB0byBhZGQgYSBsaXN0ZW5lciB0byBtdWx0aXBsZSBldmVudHMgYXQgb25jZS4gSWYgeW91IGRvbid0IGRvIHRoaXMgdGhlbiBob3cgZG8geW91IGV4cGVjdCBpdCB0byBrbm93IHdoYXQgZXZlbnQgdG8gYWRkIHRvPyBTaG91bGQgaXQganVzdCBhZGQgdG8gZXZlcnkgcG9zc2libGUgbWF0Y2ggZm9yIGEgcmVnZXg/IE5vLiBUaGF0IGlzIHNjYXJ5IGFuZCBiYWQuXHJcbiAgICAgKiBZb3UgbmVlZCB0byB0ZWxsIGl0IHdoYXQgZXZlbnQgbmFtZXMgc2hvdWxkIGJlIG1hdGNoZWQgYnkgYSByZWdleC5cclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gZXZ0IE5hbWUgb2YgdGhlIGV2ZW50IHRvIGNyZWF0ZS5cclxuICAgICAqIEByZXR1cm4ge09iamVjdH0gQ3VycmVudCBpbnN0YW5jZSBvZiBFdmVudEVtaXR0ZXIgZm9yIGNoYWluaW5nLlxyXG4gICAgICovXHJcbiAgICBwcm90by5kZWZpbmVFdmVudCA9IGZ1bmN0aW9uIGRlZmluZUV2ZW50KGV2dCkge1xyXG4gICAgICAgIHRoaXMuZ2V0TGlzdGVuZXJzKGV2dCk7XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogVXNlcyBkZWZpbmVFdmVudCB0byBkZWZpbmUgbXVsdGlwbGUgZXZlbnRzLlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7U3RyaW5nW119IGV2dHMgQW4gYXJyYXkgb2YgZXZlbnQgbmFtZXMgdG8gZGVmaW5lLlxyXG4gICAgICogQHJldHVybiB7T2JqZWN0fSBDdXJyZW50IGluc3RhbmNlIG9mIEV2ZW50RW1pdHRlciBmb3IgY2hhaW5pbmcuXHJcbiAgICAgKi9cclxuICAgIHByb3RvLmRlZmluZUV2ZW50cyA9IGZ1bmN0aW9uIGRlZmluZUV2ZW50cyhldnRzKSB7XHJcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBldnRzLmxlbmd0aDsgaSArPSAxKSB7XHJcbiAgICAgICAgICAgIHRoaXMuZGVmaW5lRXZlbnQoZXZ0c1tpXSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFJlbW92ZXMgYSBsaXN0ZW5lciBmdW5jdGlvbiBmcm9tIHRoZSBzcGVjaWZpZWQgZXZlbnQuXHJcbiAgICAgKiBXaGVuIHBhc3NlZCBhIHJlZ3VsYXIgZXhwcmVzc2lvbiBhcyB0aGUgZXZlbnQgbmFtZSwgaXQgd2lsbCByZW1vdmUgdGhlIGxpc3RlbmVyIGZyb20gYWxsIGV2ZW50cyB0aGF0IG1hdGNoIGl0LlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7U3RyaW5nfFJlZ0V4cH0gZXZ0IE5hbWUgb2YgdGhlIGV2ZW50IHRvIHJlbW92ZSB0aGUgbGlzdGVuZXIgZnJvbS5cclxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGxpc3RlbmVyIE1ldGhvZCB0byByZW1vdmUgZnJvbSB0aGUgZXZlbnQuXHJcbiAgICAgKiBAcmV0dXJuIHtPYmplY3R9IEN1cnJlbnQgaW5zdGFuY2Ugb2YgRXZlbnRFbWl0dGVyIGZvciBjaGFpbmluZy5cclxuICAgICAqL1xyXG4gICAgcHJvdG8ucmVtb3ZlTGlzdGVuZXIgPSBmdW5jdGlvbiByZW1vdmVMaXN0ZW5lcihldnQsIGxpc3RlbmVyKSB7XHJcbiAgICAgICAgdmFyIGxpc3RlbmVycyA9IHRoaXMuZ2V0TGlzdGVuZXJzQXNPYmplY3QoZXZ0KTtcclxuICAgICAgICB2YXIgaW5kZXg7XHJcbiAgICAgICAgdmFyIGtleTtcclxuXHJcbiAgICAgICAgZm9yIChrZXkgaW4gbGlzdGVuZXJzKSB7XHJcbiAgICAgICAgICAgIGlmIChsaXN0ZW5lcnMuaGFzT3duUHJvcGVydHkoa2V5KSkge1xyXG4gICAgICAgICAgICAgICAgaW5kZXggPSBpbmRleE9mTGlzdGVuZXIobGlzdGVuZXJzW2tleV0sIGxpc3RlbmVyKTtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoaW5kZXggIT09IC0xKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGlzdGVuZXJzW2tleV0uc3BsaWNlKGluZGV4LCAxKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogQWxpYXMgb2YgcmVtb3ZlTGlzdGVuZXJcclxuICAgICAqL1xyXG4gICAgcHJvdG8ub2ZmID0gYWxpYXMoJ3JlbW92ZUxpc3RlbmVyJyk7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBBZGRzIGxpc3RlbmVycyBpbiBidWxrIHVzaW5nIHRoZSBtYW5pcHVsYXRlTGlzdGVuZXJzIG1ldGhvZC5cclxuICAgICAqIElmIHlvdSBwYXNzIGFuIG9iamVjdCBhcyB0aGUgc2Vjb25kIGFyZ3VtZW50IHlvdSBjYW4gYWRkIHRvIG11bHRpcGxlIGV2ZW50cyBhdCBvbmNlLiBUaGUgb2JqZWN0IHNob3VsZCBjb250YWluIGtleSB2YWx1ZSBwYWlycyBvZiBldmVudHMgYW5kIGxpc3RlbmVycyBvciBsaXN0ZW5lciBhcnJheXMuIFlvdSBjYW4gYWxzbyBwYXNzIGl0IGFuIGV2ZW50IG5hbWUgYW5kIGFuIGFycmF5IG9mIGxpc3RlbmVycyB0byBiZSBhZGRlZC5cclxuICAgICAqIFlvdSBjYW4gYWxzbyBwYXNzIGl0IGEgcmVndWxhciBleHByZXNzaW9uIHRvIGFkZCB0aGUgYXJyYXkgb2YgbGlzdGVuZXJzIHRvIGFsbCBldmVudHMgdGhhdCBtYXRjaCBpdC5cclxuICAgICAqIFllYWgsIHRoaXMgZnVuY3Rpb24gZG9lcyBxdWl0ZSBhIGJpdC4gVGhhdCdzIHByb2JhYmx5IGEgYmFkIHRoaW5nLlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7U3RyaW5nfE9iamVjdHxSZWdFeHB9IGV2dCBBbiBldmVudCBuYW1lIGlmIHlvdSB3aWxsIHBhc3MgYW4gYXJyYXkgb2YgbGlzdGVuZXJzIG5leHQuIEFuIG9iamVjdCBpZiB5b3Ugd2lzaCB0byBhZGQgdG8gbXVsdGlwbGUgZXZlbnRzIGF0IG9uY2UuXHJcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9uW119IFtsaXN0ZW5lcnNdIEFuIG9wdGlvbmFsIGFycmF5IG9mIGxpc3RlbmVyIGZ1bmN0aW9ucyB0byBhZGQuXHJcbiAgICAgKiBAcmV0dXJuIHtPYmplY3R9IEN1cnJlbnQgaW5zdGFuY2Ugb2YgRXZlbnRFbWl0dGVyIGZvciBjaGFpbmluZy5cclxuICAgICAqL1xyXG4gICAgcHJvdG8uYWRkTGlzdGVuZXJzID0gZnVuY3Rpb24gYWRkTGlzdGVuZXJzKGV2dCwgbGlzdGVuZXJzKSB7XHJcbiAgICAgICAgLy8gUGFzcyB0aHJvdWdoIHRvIG1hbmlwdWxhdGVMaXN0ZW5lcnNcclxuICAgICAgICByZXR1cm4gdGhpcy5tYW5pcHVsYXRlTGlzdGVuZXJzKGZhbHNlLCBldnQsIGxpc3RlbmVycyk7XHJcbiAgICB9O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogUmVtb3ZlcyBsaXN0ZW5lcnMgaW4gYnVsayB1c2luZyB0aGUgbWFuaXB1bGF0ZUxpc3RlbmVycyBtZXRob2QuXHJcbiAgICAgKiBJZiB5b3UgcGFzcyBhbiBvYmplY3QgYXMgdGhlIHNlY29uZCBhcmd1bWVudCB5b3UgY2FuIHJlbW92ZSBmcm9tIG11bHRpcGxlIGV2ZW50cyBhdCBvbmNlLiBUaGUgb2JqZWN0IHNob3VsZCBjb250YWluIGtleSB2YWx1ZSBwYWlycyBvZiBldmVudHMgYW5kIGxpc3RlbmVycyBvciBsaXN0ZW5lciBhcnJheXMuXHJcbiAgICAgKiBZb3UgY2FuIGFsc28gcGFzcyBpdCBhbiBldmVudCBuYW1lIGFuZCBhbiBhcnJheSBvZiBsaXN0ZW5lcnMgdG8gYmUgcmVtb3ZlZC5cclxuICAgICAqIFlvdSBjYW4gYWxzbyBwYXNzIGl0IGEgcmVndWxhciBleHByZXNzaW9uIHRvIHJlbW92ZSB0aGUgbGlzdGVuZXJzIGZyb20gYWxsIGV2ZW50cyB0aGF0IG1hdGNoIGl0LlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7U3RyaW5nfE9iamVjdHxSZWdFeHB9IGV2dCBBbiBldmVudCBuYW1lIGlmIHlvdSB3aWxsIHBhc3MgYW4gYXJyYXkgb2YgbGlzdGVuZXJzIG5leHQuIEFuIG9iamVjdCBpZiB5b3Ugd2lzaCB0byByZW1vdmUgZnJvbSBtdWx0aXBsZSBldmVudHMgYXQgb25jZS5cclxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb25bXX0gW2xpc3RlbmVyc10gQW4gb3B0aW9uYWwgYXJyYXkgb2YgbGlzdGVuZXIgZnVuY3Rpb25zIHRvIHJlbW92ZS5cclxuICAgICAqIEByZXR1cm4ge09iamVjdH0gQ3VycmVudCBpbnN0YW5jZSBvZiBFdmVudEVtaXR0ZXIgZm9yIGNoYWluaW5nLlxyXG4gICAgICovXHJcbiAgICBwcm90by5yZW1vdmVMaXN0ZW5lcnMgPSBmdW5jdGlvbiByZW1vdmVMaXN0ZW5lcnMoZXZ0LCBsaXN0ZW5lcnMpIHtcclxuICAgICAgICAvLyBQYXNzIHRocm91Z2ggdG8gbWFuaXB1bGF0ZUxpc3RlbmVyc1xyXG4gICAgICAgIHJldHVybiB0aGlzLm1hbmlwdWxhdGVMaXN0ZW5lcnModHJ1ZSwgZXZ0LCBsaXN0ZW5lcnMpO1xyXG4gICAgfTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIEVkaXRzIGxpc3RlbmVycyBpbiBidWxrLiBUaGUgYWRkTGlzdGVuZXJzIGFuZCByZW1vdmVMaXN0ZW5lcnMgbWV0aG9kcyBib3RoIHVzZSB0aGlzIHRvIGRvIHRoZWlyIGpvYi4gWW91IHNob3VsZCByZWFsbHkgdXNlIHRob3NlIGluc3RlYWQsIHRoaXMgaXMgYSBsaXR0bGUgbG93ZXIgbGV2ZWwuXHJcbiAgICAgKiBUaGUgZmlyc3QgYXJndW1lbnQgd2lsbCBkZXRlcm1pbmUgaWYgdGhlIGxpc3RlbmVycyBhcmUgcmVtb3ZlZCAodHJ1ZSkgb3IgYWRkZWQgKGZhbHNlKS5cclxuICAgICAqIElmIHlvdSBwYXNzIGFuIG9iamVjdCBhcyB0aGUgc2Vjb25kIGFyZ3VtZW50IHlvdSBjYW4gYWRkL3JlbW92ZSBmcm9tIG11bHRpcGxlIGV2ZW50cyBhdCBvbmNlLiBUaGUgb2JqZWN0IHNob3VsZCBjb250YWluIGtleSB2YWx1ZSBwYWlycyBvZiBldmVudHMgYW5kIGxpc3RlbmVycyBvciBsaXN0ZW5lciBhcnJheXMuXHJcbiAgICAgKiBZb3UgY2FuIGFsc28gcGFzcyBpdCBhbiBldmVudCBuYW1lIGFuZCBhbiBhcnJheSBvZiBsaXN0ZW5lcnMgdG8gYmUgYWRkZWQvcmVtb3ZlZC5cclxuICAgICAqIFlvdSBjYW4gYWxzbyBwYXNzIGl0IGEgcmVndWxhciBleHByZXNzaW9uIHRvIG1hbmlwdWxhdGUgdGhlIGxpc3RlbmVycyBvZiBhbGwgZXZlbnRzIHRoYXQgbWF0Y2ggaXQuXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHtCb29sZWFufSByZW1vdmUgVHJ1ZSBpZiB5b3Ugd2FudCB0byByZW1vdmUgbGlzdGVuZXJzLCBmYWxzZSBpZiB5b3Ugd2FudCB0byBhZGQuXHJcbiAgICAgKiBAcGFyYW0ge1N0cmluZ3xPYmplY3R8UmVnRXhwfSBldnQgQW4gZXZlbnQgbmFtZSBpZiB5b3Ugd2lsbCBwYXNzIGFuIGFycmF5IG9mIGxpc3RlbmVycyBuZXh0LiBBbiBvYmplY3QgaWYgeW91IHdpc2ggdG8gYWRkL3JlbW92ZSBmcm9tIG11bHRpcGxlIGV2ZW50cyBhdCBvbmNlLlxyXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbltdfSBbbGlzdGVuZXJzXSBBbiBvcHRpb25hbCBhcnJheSBvZiBsaXN0ZW5lciBmdW5jdGlvbnMgdG8gYWRkL3JlbW92ZS5cclxuICAgICAqIEByZXR1cm4ge09iamVjdH0gQ3VycmVudCBpbnN0YW5jZSBvZiBFdmVudEVtaXR0ZXIgZm9yIGNoYWluaW5nLlxyXG4gICAgICovXHJcbiAgICBwcm90by5tYW5pcHVsYXRlTGlzdGVuZXJzID0gZnVuY3Rpb24gbWFuaXB1bGF0ZUxpc3RlbmVycyhyZW1vdmUsIGV2dCwgbGlzdGVuZXJzKSB7XHJcbiAgICAgICAgdmFyIGk7XHJcbiAgICAgICAgdmFyIHZhbHVlO1xyXG4gICAgICAgIHZhciBzaW5nbGUgPSByZW1vdmUgPyB0aGlzLnJlbW92ZUxpc3RlbmVyIDogdGhpcy5hZGRMaXN0ZW5lcjtcclxuICAgICAgICB2YXIgbXVsdGlwbGUgPSByZW1vdmUgPyB0aGlzLnJlbW92ZUxpc3RlbmVycyA6IHRoaXMuYWRkTGlzdGVuZXJzO1xyXG5cclxuICAgICAgICAvLyBJZiBldnQgaXMgYW4gb2JqZWN0IHRoZW4gcGFzcyBlYWNoIG9mIGl0cyBwcm9wZXJ0aWVzIHRvIHRoaXMgbWV0aG9kXHJcbiAgICAgICAgaWYgKHR5cGVvZiBldnQgPT09ICdvYmplY3QnICYmICEoZXZ0IGluc3RhbmNlb2YgUmVnRXhwKSkge1xyXG4gICAgICAgICAgICBmb3IgKGkgaW4gZXZ0KSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoZXZ0Lmhhc093blByb3BlcnR5KGkpICYmICh2YWx1ZSA9IGV2dFtpXSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAvLyBQYXNzIHRoZSBzaW5nbGUgbGlzdGVuZXIgc3RyYWlnaHQgdGhyb3VnaCB0byB0aGUgc2luZ3VsYXIgbWV0aG9kXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ2Z1bmN0aW9uJykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzaW5nbGUuY2FsbCh0aGlzLCBpLCB2YWx1ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBPdGhlcndpc2UgcGFzcyBiYWNrIHRvIHRoZSBtdWx0aXBsZSBmdW5jdGlvblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBtdWx0aXBsZS5jYWxsKHRoaXMsIGksIHZhbHVlKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIC8vIFNvIGV2dCBtdXN0IGJlIGEgc3RyaW5nXHJcbiAgICAgICAgICAgIC8vIEFuZCBsaXN0ZW5lcnMgbXVzdCBiZSBhbiBhcnJheSBvZiBsaXN0ZW5lcnNcclxuICAgICAgICAgICAgLy8gTG9vcCBvdmVyIGl0IGFuZCBwYXNzIGVhY2ggb25lIHRvIHRoZSBtdWx0aXBsZSBtZXRob2RcclxuICAgICAgICAgICAgaSA9IGxpc3RlbmVycy5sZW5ndGg7XHJcbiAgICAgICAgICAgIHdoaWxlIChpLS0pIHtcclxuICAgICAgICAgICAgICAgIHNpbmdsZS5jYWxsKHRoaXMsIGV2dCwgbGlzdGVuZXJzW2ldKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogUmVtb3ZlcyBhbGwgbGlzdGVuZXJzIGZyb20gYSBzcGVjaWZpZWQgZXZlbnQuXHJcbiAgICAgKiBJZiB5b3UgZG8gbm90IHNwZWNpZnkgYW4gZXZlbnQgdGhlbiBhbGwgbGlzdGVuZXJzIHdpbGwgYmUgcmVtb3ZlZC5cclxuICAgICAqIFRoYXQgbWVhbnMgZXZlcnkgZXZlbnQgd2lsbCBiZSBlbXB0aWVkLlxyXG4gICAgICogWW91IGNhbiBhbHNvIHBhc3MgYSByZWdleCB0byByZW1vdmUgYWxsIGV2ZW50cyB0aGF0IG1hdGNoIGl0LlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7U3RyaW5nfFJlZ0V4cH0gW2V2dF0gT3B0aW9uYWwgbmFtZSBvZiB0aGUgZXZlbnQgdG8gcmVtb3ZlIGFsbCBsaXN0ZW5lcnMgZm9yLiBXaWxsIHJlbW92ZSBmcm9tIGV2ZXJ5IGV2ZW50IGlmIG5vdCBwYXNzZWQuXHJcbiAgICAgKiBAcmV0dXJuIHtPYmplY3R9IEN1cnJlbnQgaW5zdGFuY2Ugb2YgRXZlbnRFbWl0dGVyIGZvciBjaGFpbmluZy5cclxuICAgICAqL1xyXG4gICAgcHJvdG8ucmVtb3ZlRXZlbnQgPSBmdW5jdGlvbiByZW1vdmVFdmVudChldnQpIHtcclxuICAgICAgICB2YXIgdHlwZSA9IHR5cGVvZiBldnQ7XHJcbiAgICAgICAgdmFyIGV2ZW50cyA9IHRoaXMuX2dldEV2ZW50cygpO1xyXG4gICAgICAgIHZhciBrZXk7XHJcblxyXG4gICAgICAgIC8vIFJlbW92ZSBkaWZmZXJlbnQgdGhpbmdzIGRlcGVuZGluZyBvbiB0aGUgc3RhdGUgb2YgZXZ0XHJcbiAgICAgICAgaWYgKHR5cGUgPT09ICdzdHJpbmcnKSB7XHJcbiAgICAgICAgICAgIC8vIFJlbW92ZSBhbGwgbGlzdGVuZXJzIGZvciB0aGUgc3BlY2lmaWVkIGV2ZW50XHJcbiAgICAgICAgICAgIGRlbGV0ZSBldmVudHNbZXZ0XTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAoZXZ0IGluc3RhbmNlb2YgUmVnRXhwKSB7XHJcbiAgICAgICAgICAgIC8vIFJlbW92ZSBhbGwgZXZlbnRzIG1hdGNoaW5nIHRoZSByZWdleC5cclxuICAgICAgICAgICAgZm9yIChrZXkgaW4gZXZlbnRzKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoZXZlbnRzLmhhc093blByb3BlcnR5KGtleSkgJiYgZXZ0LnRlc3Qoa2V5KSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGRlbGV0ZSBldmVudHNba2V5XTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgLy8gUmVtb3ZlIGFsbCBsaXN0ZW5lcnMgaW4gYWxsIGV2ZW50c1xyXG4gICAgICAgICAgICBkZWxldGUgdGhpcy5fZXZlbnRzO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogQWxpYXMgb2YgcmVtb3ZlRXZlbnQuXHJcbiAgICAgKlxyXG4gICAgICogQWRkZWQgdG8gbWlycm9yIHRoZSBub2RlIEFQSS5cclxuICAgICAqL1xyXG4gICAgcHJvdG8ucmVtb3ZlQWxsTGlzdGVuZXJzID0gYWxpYXMoJ3JlbW92ZUV2ZW50Jyk7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBFbWl0cyBhbiBldmVudCBvZiB5b3VyIGNob2ljZS5cclxuICAgICAqIFdoZW4gZW1pdHRlZCwgZXZlcnkgbGlzdGVuZXIgYXR0YWNoZWQgdG8gdGhhdCBldmVudCB3aWxsIGJlIGV4ZWN1dGVkLlxyXG4gICAgICogSWYgeW91IHBhc3MgdGhlIG9wdGlvbmFsIGFyZ3VtZW50IGFycmF5IHRoZW4gdGhvc2UgYXJndW1lbnRzIHdpbGwgYmUgcGFzc2VkIHRvIGV2ZXJ5IGxpc3RlbmVyIHVwb24gZXhlY3V0aW9uLlxyXG4gICAgICogQmVjYXVzZSBpdCB1c2VzIGBhcHBseWAsIHlvdXIgYXJyYXkgb2YgYXJndW1lbnRzIHdpbGwgYmUgcGFzc2VkIGFzIGlmIHlvdSB3cm90ZSB0aGVtIG91dCBzZXBhcmF0ZWx5LlxyXG4gICAgICogU28gdGhleSB3aWxsIG5vdCBhcnJpdmUgd2l0aGluIHRoZSBhcnJheSBvbiB0aGUgb3RoZXIgc2lkZSwgdGhleSB3aWxsIGJlIHNlcGFyYXRlLlxyXG4gICAgICogWW91IGNhbiBhbHNvIHBhc3MgYSByZWd1bGFyIGV4cHJlc3Npb24gdG8gZW1pdCB0byBhbGwgZXZlbnRzIHRoYXQgbWF0Y2ggaXQuXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHtTdHJpbmd8UmVnRXhwfSBldnQgTmFtZSBvZiB0aGUgZXZlbnQgdG8gZW1pdCBhbmQgZXhlY3V0ZSBsaXN0ZW5lcnMgZm9yLlxyXG4gICAgICogQHBhcmFtIHtBcnJheX0gW2FyZ3NdIE9wdGlvbmFsIGFycmF5IG9mIGFyZ3VtZW50cyB0byBiZSBwYXNzZWQgdG8gZWFjaCBsaXN0ZW5lci5cclxuICAgICAqIEByZXR1cm4ge09iamVjdH0gQ3VycmVudCBpbnN0YW5jZSBvZiBFdmVudEVtaXR0ZXIgZm9yIGNoYWluaW5nLlxyXG4gICAgICovXHJcbiAgICBwcm90by5lbWl0RXZlbnQgPSBmdW5jdGlvbiBlbWl0RXZlbnQoZXZ0LCBhcmdzKSB7XHJcbiAgICAgICAgdmFyIGxpc3RlbmVycyA9IHRoaXMuZ2V0TGlzdGVuZXJzQXNPYmplY3QoZXZ0KTtcclxuICAgICAgICB2YXIgbGlzdGVuZXI7XHJcbiAgICAgICAgdmFyIGk7XHJcbiAgICAgICAgdmFyIGtleTtcclxuICAgICAgICB2YXIgcmVzcG9uc2U7XHJcblxyXG4gICAgICAgIGZvciAoa2V5IGluIGxpc3RlbmVycykge1xyXG4gICAgICAgICAgICBpZiAobGlzdGVuZXJzLmhhc093blByb3BlcnR5KGtleSkpIHtcclxuICAgICAgICAgICAgICAgIGkgPSBsaXN0ZW5lcnNba2V5XS5sZW5ndGg7XHJcblxyXG4gICAgICAgICAgICAgICAgd2hpbGUgKGktLSkge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIElmIHRoZSBsaXN0ZW5lciByZXR1cm5zIHRydWUgdGhlbiBpdCBzaGFsbCBiZSByZW1vdmVkIGZyb20gdGhlIGV2ZW50XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gVGhlIGZ1bmN0aW9uIGlzIGV4ZWN1dGVkIGVpdGhlciB3aXRoIGEgYmFzaWMgY2FsbCBvciBhbiBhcHBseSBpZiB0aGVyZSBpcyBhbiBhcmdzIGFycmF5XHJcbiAgICAgICAgICAgICAgICAgICAgbGlzdGVuZXIgPSBsaXN0ZW5lcnNba2V5XVtpXTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGxpc3RlbmVyLm9uY2UgPT09IHRydWUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5yZW1vdmVMaXN0ZW5lcihldnQsIGxpc3RlbmVyLmxpc3RlbmVyKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHJlc3BvbnNlID0gbGlzdGVuZXIubGlzdGVuZXIuYXBwbHkodGhpcywgYXJncyB8fCBbXSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChyZXNwb25zZSA9PT0gdGhpcy5fZ2V0T25jZVJldHVyblZhbHVlKCkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5yZW1vdmVMaXN0ZW5lcihldnQsIGxpc3RlbmVyLmxpc3RlbmVyKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIEFsaWFzIG9mIGVtaXRFdmVudFxyXG4gICAgICovXHJcbiAgICBwcm90by50cmlnZ2VyID0gYWxpYXMoJ2VtaXRFdmVudCcpO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogU3VidGx5IGRpZmZlcmVudCBmcm9tIGVtaXRFdmVudCBpbiB0aGF0IGl0IHdpbGwgcGFzcyBpdHMgYXJndW1lbnRzIG9uIHRvIHRoZSBsaXN0ZW5lcnMsIGFzIG9wcG9zZWQgdG8gdGFraW5nIGEgc2luZ2xlIGFycmF5IG9mIGFyZ3VtZW50cyB0byBwYXNzIG9uLlxyXG4gICAgICogQXMgd2l0aCBlbWl0RXZlbnQsIHlvdSBjYW4gcGFzcyBhIHJlZ2V4IGluIHBsYWNlIG9mIHRoZSBldmVudCBuYW1lIHRvIGVtaXQgdG8gYWxsIGV2ZW50cyB0aGF0IG1hdGNoIGl0LlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7U3RyaW5nfFJlZ0V4cH0gZXZ0IE5hbWUgb2YgdGhlIGV2ZW50IHRvIGVtaXQgYW5kIGV4ZWN1dGUgbGlzdGVuZXJzIGZvci5cclxuICAgICAqIEBwYXJhbSB7Li4uKn0gT3B0aW9uYWwgYWRkaXRpb25hbCBhcmd1bWVudHMgdG8gYmUgcGFzc2VkIHRvIGVhY2ggbGlzdGVuZXIuXHJcbiAgICAgKiBAcmV0dXJuIHtPYmplY3R9IEN1cnJlbnQgaW5zdGFuY2Ugb2YgRXZlbnRFbWl0dGVyIGZvciBjaGFpbmluZy5cclxuICAgICAqL1xyXG4gICAgcHJvdG8uZW1pdCA9IGZ1bmN0aW9uIGVtaXQoZXZ0KSB7XHJcbiAgICAgICAgdmFyIGFyZ3MgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMsIDEpO1xyXG4gICAgICAgIHJldHVybiB0aGlzLmVtaXRFdmVudChldnQsIGFyZ3MpO1xyXG4gICAgfTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFNldHMgdGhlIGN1cnJlbnQgdmFsdWUgdG8gY2hlY2sgYWdhaW5zdCB3aGVuIGV4ZWN1dGluZyBsaXN0ZW5lcnMuIElmIGFcclxuICAgICAqIGxpc3RlbmVycyByZXR1cm4gdmFsdWUgbWF0Y2hlcyB0aGUgb25lIHNldCBoZXJlIHRoZW4gaXQgd2lsbCBiZSByZW1vdmVkXHJcbiAgICAgKiBhZnRlciBleGVjdXRpb24uIFRoaXMgdmFsdWUgZGVmYXVsdHMgdG8gdHJ1ZS5cclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSBuZXcgdmFsdWUgdG8gY2hlY2sgZm9yIHdoZW4gZXhlY3V0aW5nIGxpc3RlbmVycy5cclxuICAgICAqIEByZXR1cm4ge09iamVjdH0gQ3VycmVudCBpbnN0YW5jZSBvZiBFdmVudEVtaXR0ZXIgZm9yIGNoYWluaW5nLlxyXG4gICAgICovXHJcbiAgICBwcm90by5zZXRPbmNlUmV0dXJuVmFsdWUgPSBmdW5jdGlvbiBzZXRPbmNlUmV0dXJuVmFsdWUodmFsdWUpIHtcclxuICAgICAgICB0aGlzLl9vbmNlUmV0dXJuVmFsdWUgPSB2YWx1ZTtcclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH07XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBGZXRjaGVzIHRoZSBjdXJyZW50IHZhbHVlIHRvIGNoZWNrIGFnYWluc3Qgd2hlbiBleGVjdXRpbmcgbGlzdGVuZXJzLiBJZlxyXG4gICAgICogdGhlIGxpc3RlbmVycyByZXR1cm4gdmFsdWUgbWF0Y2hlcyB0aGlzIG9uZSB0aGVuIGl0IHNob3VsZCBiZSByZW1vdmVkXHJcbiAgICAgKiBhdXRvbWF0aWNhbGx5LiBJdCB3aWxsIHJldHVybiB0cnVlIGJ5IGRlZmF1bHQuXHJcbiAgICAgKlxyXG4gICAgICogQHJldHVybiB7KnxCb29sZWFufSBUaGUgY3VycmVudCB2YWx1ZSB0byBjaGVjayBmb3Igb3IgdGhlIGRlZmF1bHQsIHRydWUuXHJcbiAgICAgKiBAYXBpIHByaXZhdGVcclxuICAgICAqL1xyXG4gICAgcHJvdG8uX2dldE9uY2VSZXR1cm5WYWx1ZSA9IGZ1bmN0aW9uIF9nZXRPbmNlUmV0dXJuVmFsdWUoKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuaGFzT3duUHJvcGVydHkoJ19vbmNlUmV0dXJuVmFsdWUnKSkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fb25jZVJldHVyblZhbHVlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIEZldGNoZXMgdGhlIGV2ZW50cyBvYmplY3QgYW5kIGNyZWF0ZXMgb25lIGlmIHJlcXVpcmVkLlxyXG4gICAgICpcclxuICAgICAqIEByZXR1cm4ge09iamVjdH0gVGhlIGV2ZW50cyBzdG9yYWdlIG9iamVjdC5cclxuICAgICAqIEBhcGkgcHJpdmF0ZVxyXG4gICAgICovXHJcbiAgICBwcm90by5fZ2V0RXZlbnRzID0gZnVuY3Rpb24gX2dldEV2ZW50cygpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fZXZlbnRzIHx8ICh0aGlzLl9ldmVudHMgPSB7fSk7XHJcbiAgICB9O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogUmV2ZXJ0cyB0aGUgZ2xvYmFsIHtAbGluayBFdmVudEVtaXR0ZXJ9IHRvIGl0cyBwcmV2aW91cyB2YWx1ZSBhbmQgcmV0dXJucyBhIHJlZmVyZW5jZSB0byB0aGlzIHZlcnNpb24uXHJcbiAgICAgKlxyXG4gICAgICogQHJldHVybiB7RnVuY3Rpb259IE5vbiBjb25mbGljdGluZyBFdmVudEVtaXR0ZXIgY2xhc3MuXHJcbiAgICAgKi9cclxuICAgIEV2ZW50RW1pdHRlci5ub0NvbmZsaWN0ID0gZnVuY3Rpb24gbm9Db25mbGljdCgpIHtcclxuICAgICAgICBleHBvcnRzLkV2ZW50RW1pdHRlciA9IG9yaWdpbmFsR2xvYmFsVmFsdWU7XHJcbiAgICAgICAgcmV0dXJuIEV2ZW50RW1pdHRlcjtcclxuICAgIH07XHJcblxyXG4gICAgLy8gRXhwb3NlIHRoZSBjbGFzcyBlaXRoZXIgdmlhIEFNRCwgQ29tbW9uSlMgb3IgdGhlIGdsb2JhbCBvYmplY3RcclxuICAgIGlmICh0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQpIHtcclxuICAgICAgICBkZWZpbmUoJ2V2ZW50RW1pdHRlci9FdmVudEVtaXR0ZXInLFtdLGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIEV2ZW50RW1pdHRlcjtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICAgIGVsc2UgaWYgKHR5cGVvZiBtb2R1bGUgPT09ICdvYmplY3QnICYmIG1vZHVsZS5leHBvcnRzKXtcclxuICAgICAgICBtb2R1bGUuZXhwb3J0cyA9IEV2ZW50RW1pdHRlcjtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICAgIGV4cG9ydHMuRXZlbnRFbWl0dGVyID0gRXZlbnRFbWl0dGVyO1xyXG4gICAgfVxyXG59LmNhbGwodGhpcykpO1xyXG5cclxuLyohXHJcbiAqIGdldFN0eWxlUHJvcGVydHkgdjEuMC40XHJcbiAqIG9yaWdpbmFsIGJ5IGthbmdheFxyXG4gKiBodHRwOi8vcGVyZmVjdGlvbmtpbGxzLmNvbS9mZWF0dXJlLXRlc3RpbmctY3NzLXByb3BlcnRpZXMvXHJcbiAqIE1JVCBsaWNlbnNlXHJcbiAqL1xyXG5cclxuLypqc2hpbnQgYnJvd3NlcjogdHJ1ZSwgc3RyaWN0OiB0cnVlLCB1bmRlZjogdHJ1ZSAqL1xyXG4vKmdsb2JhbCBkZWZpbmU6IGZhbHNlLCBleHBvcnRzOiBmYWxzZSwgbW9kdWxlOiBmYWxzZSAqL1xyXG5cclxuKCBmdW5jdGlvbiggd2luZG93ICkge1xyXG5cclxuXHJcblxyXG52YXIgcHJlZml4ZXMgPSAnV2Via2l0IE1veiBtcyBNcyBPJy5zcGxpdCgnICcpO1xyXG52YXIgZG9jRWxlbVN0eWxlID0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnN0eWxlO1xyXG5cclxuZnVuY3Rpb24gZ2V0U3R5bGVQcm9wZXJ0eSggcHJvcE5hbWUgKSB7XHJcbiAgaWYgKCAhcHJvcE5hbWUgKSB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICAvLyB0ZXN0IHN0YW5kYXJkIHByb3BlcnR5IGZpcnN0XHJcbiAgaWYgKCB0eXBlb2YgZG9jRWxlbVN0eWxlWyBwcm9wTmFtZSBdID09PSAnc3RyaW5nJyApIHtcclxuICAgIHJldHVybiBwcm9wTmFtZTtcclxuICB9XHJcblxyXG4gIC8vIGNhcGl0YWxpemVcclxuICBwcm9wTmFtZSA9IHByb3BOYW1lLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsgcHJvcE5hbWUuc2xpY2UoMSk7XHJcblxyXG4gIC8vIHRlc3QgdmVuZG9yIHNwZWNpZmljIHByb3BlcnRpZXNcclxuICB2YXIgcHJlZml4ZWQ7XHJcbiAgZm9yICggdmFyIGk9MCwgbGVuID0gcHJlZml4ZXMubGVuZ3RoOyBpIDwgbGVuOyBpKysgKSB7XHJcbiAgICBwcmVmaXhlZCA9IHByZWZpeGVzW2ldICsgcHJvcE5hbWU7XHJcbiAgICBpZiAoIHR5cGVvZiBkb2NFbGVtU3R5bGVbIHByZWZpeGVkIF0gPT09ICdzdHJpbmcnICkge1xyXG4gICAgICByZXR1cm4gcHJlZml4ZWQ7XHJcbiAgICB9XHJcbiAgfVxyXG59XHJcblxyXG4vLyB0cmFuc3BvcnRcclxuaWYgKCB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgKSB7XHJcbiAgLy8gQU1EXHJcbiAgZGVmaW5lKCAnZ2V0LXN0eWxlLXByb3BlcnR5L2dldC1zdHlsZS1wcm9wZXJ0eScsW10sZnVuY3Rpb24oKSB7XHJcbiAgICByZXR1cm4gZ2V0U3R5bGVQcm9wZXJ0eTtcclxuICB9KTtcclxufSBlbHNlIGlmICggdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICkge1xyXG4gIC8vIENvbW1vbkpTIGZvciBDb21wb25lbnRcclxuICBtb2R1bGUuZXhwb3J0cyA9IGdldFN0eWxlUHJvcGVydHk7XHJcbn0gZWxzZSB7XHJcbiAgLy8gYnJvd3NlciBnbG9iYWxcclxuICB3aW5kb3cuZ2V0U3R5bGVQcm9wZXJ0eSA9IGdldFN0eWxlUHJvcGVydHk7XHJcbn1cclxuXHJcbn0pKCB3aW5kb3cgKTtcclxuXHJcbi8qIVxyXG4gKiBnZXRTaXplIHYxLjIuMlxyXG4gKiBtZWFzdXJlIHNpemUgb2YgZWxlbWVudHNcclxuICogTUlUIGxpY2Vuc2VcclxuICovXHJcblxyXG4vKmpzaGludCBicm93c2VyOiB0cnVlLCBzdHJpY3Q6IHRydWUsIHVuZGVmOiB0cnVlLCB1bnVzZWQ6IHRydWUgKi9cclxuLypnbG9iYWwgZGVmaW5lOiBmYWxzZSwgZXhwb3J0czogZmFsc2UsIHJlcXVpcmU6IGZhbHNlLCBtb2R1bGU6IGZhbHNlLCBjb25zb2xlOiBmYWxzZSAqL1xyXG5cclxuKCBmdW5jdGlvbiggd2luZG93LCB1bmRlZmluZWQgKSB7XHJcblxyXG5cclxuXHJcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIGhlbHBlcnMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gLy9cclxuXHJcbi8vIGdldCBhIG51bWJlciBmcm9tIGEgc3RyaW5nLCBub3QgYSBwZXJjZW50YWdlXHJcbmZ1bmN0aW9uIGdldFN0eWxlU2l6ZSggdmFsdWUgKSB7XHJcbiAgdmFyIG51bSA9IHBhcnNlRmxvYXQoIHZhbHVlICk7XHJcbiAgLy8gbm90IGEgcGVyY2VudCBsaWtlICcxMDAlJywgYW5kIGEgbnVtYmVyXHJcbiAgdmFyIGlzVmFsaWQgPSB2YWx1ZS5pbmRleE9mKCclJykgPT09IC0xICYmICFpc05hTiggbnVtICk7XHJcbiAgcmV0dXJuIGlzVmFsaWQgJiYgbnVtO1xyXG59XHJcblxyXG5mdW5jdGlvbiBub29wKCkge31cclxuXHJcbnZhciBsb2dFcnJvciA9IHR5cGVvZiBjb25zb2xlID09PSAndW5kZWZpbmVkJyA/IG5vb3AgOlxyXG4gIGZ1bmN0aW9uKCBtZXNzYWdlICkge1xyXG4gICAgY29uc29sZS5lcnJvciggbWVzc2FnZSApO1xyXG4gIH07XHJcblxyXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBtZWFzdXJlbWVudHMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gLy9cclxuXHJcbnZhciBtZWFzdXJlbWVudHMgPSBbXHJcbiAgJ3BhZGRpbmdMZWZ0JyxcclxuICAncGFkZGluZ1JpZ2h0JyxcclxuICAncGFkZGluZ1RvcCcsXHJcbiAgJ3BhZGRpbmdCb3R0b20nLFxyXG4gICdtYXJnaW5MZWZ0JyxcclxuICAnbWFyZ2luUmlnaHQnLFxyXG4gICdtYXJnaW5Ub3AnLFxyXG4gICdtYXJnaW5Cb3R0b20nLFxyXG4gICdib3JkZXJMZWZ0V2lkdGgnLFxyXG4gICdib3JkZXJSaWdodFdpZHRoJyxcclxuICAnYm9yZGVyVG9wV2lkdGgnLFxyXG4gICdib3JkZXJCb3R0b21XaWR0aCdcclxuXTtcclxuXHJcbmZ1bmN0aW9uIGdldFplcm9TaXplKCkge1xyXG4gIHZhciBzaXplID0ge1xyXG4gICAgd2lkdGg6IDAsXHJcbiAgICBoZWlnaHQ6IDAsXHJcbiAgICBpbm5lcldpZHRoOiAwLFxyXG4gICAgaW5uZXJIZWlnaHQ6IDAsXHJcbiAgICBvdXRlcldpZHRoOiAwLFxyXG4gICAgb3V0ZXJIZWlnaHQ6IDBcclxuICB9O1xyXG4gIGZvciAoIHZhciBpPTAsIGxlbiA9IG1lYXN1cmVtZW50cy5sZW5ndGg7IGkgPCBsZW47IGkrKyApIHtcclxuICAgIHZhciBtZWFzdXJlbWVudCA9IG1lYXN1cmVtZW50c1tpXTtcclxuICAgIHNpemVbIG1lYXN1cmVtZW50IF0gPSAwO1xyXG4gIH1cclxuICByZXR1cm4gc2l6ZTtcclxufVxyXG5cclxuXHJcblxyXG5mdW5jdGlvbiBkZWZpbmVHZXRTaXplKCBnZXRTdHlsZVByb3BlcnR5ICkge1xyXG5cclxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gc2V0dXAgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gLy9cclxuXHJcbnZhciBpc1NldHVwID0gZmFsc2U7XHJcblxyXG52YXIgZ2V0U3R5bGUsIGJveFNpemluZ1Byb3AsIGlzQm94U2l6ZU91dGVyO1xyXG5cclxuLyoqXHJcbiAqIHNldHVwIHZhcnMgYW5kIGZ1bmN0aW9uc1xyXG4gKiBkbyBpdCBvbiBpbml0aWFsIGdldFNpemUoKSwgcmF0aGVyIHRoYW4gb24gc2NyaXB0IGxvYWRcclxuICogRm9yIEZpcmVmb3ggYnVnIGh0dHBzOi8vYnVnemlsbGEubW96aWxsYS5vcmcvc2hvd19idWcuY2dpP2lkPTU0ODM5N1xyXG4gKi9cclxuZnVuY3Rpb24gc2V0dXAoKSB7XHJcbiAgLy8gc2V0dXAgb25jZVxyXG4gIGlmICggaXNTZXR1cCApIHtcclxuICAgIHJldHVybjtcclxuICB9XHJcbiAgaXNTZXR1cCA9IHRydWU7XHJcblxyXG4gIHZhciBnZXRDb21wdXRlZFN0eWxlID0gd2luZG93LmdldENvbXB1dGVkU3R5bGU7XHJcbiAgZ2V0U3R5bGUgPSAoIGZ1bmN0aW9uKCkge1xyXG4gICAgdmFyIGdldFN0eWxlRm4gPSBnZXRDb21wdXRlZFN0eWxlID9cclxuICAgICAgZnVuY3Rpb24oIGVsZW0gKSB7XHJcbiAgICAgICAgcmV0dXJuIGdldENvbXB1dGVkU3R5bGUoIGVsZW0sIG51bGwgKTtcclxuICAgICAgfSA6XHJcbiAgICAgIGZ1bmN0aW9uKCBlbGVtICkge1xyXG4gICAgICAgIHJldHVybiBlbGVtLmN1cnJlbnRTdHlsZTtcclxuICAgICAgfTtcclxuXHJcbiAgICAgIHJldHVybiBmdW5jdGlvbiBnZXRTdHlsZSggZWxlbSApIHtcclxuICAgICAgICB2YXIgc3R5bGUgPSBnZXRTdHlsZUZuKCBlbGVtICk7XHJcbiAgICAgICAgaWYgKCAhc3R5bGUgKSB7XHJcbiAgICAgICAgICBsb2dFcnJvciggJ1N0eWxlIHJldHVybmVkICcgKyBzdHlsZSArXHJcbiAgICAgICAgICAgICcuIEFyZSB5b3UgcnVubmluZyB0aGlzIGNvZGUgaW4gYSBoaWRkZW4gaWZyYW1lIG9uIEZpcmVmb3g/ICcgK1xyXG4gICAgICAgICAgICAnU2VlIGh0dHA6Ly9iaXQubHkvZ2V0c2l6ZWJ1ZzEnICk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBzdHlsZTtcclxuICAgICAgfTtcclxuICB9KSgpO1xyXG5cclxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBib3ggc2l6aW5nIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIC8vXHJcblxyXG4gIGJveFNpemluZ1Byb3AgPSBnZXRTdHlsZVByb3BlcnR5KCdib3hTaXppbmcnKTtcclxuXHJcbiAgLyoqXHJcbiAgICogV2ViS2l0IG1lYXN1cmVzIHRoZSBvdXRlci13aWR0aCBvbiBzdHlsZS53aWR0aCBvbiBib3JkZXItYm94IGVsZW1zXHJcbiAgICogSUUgJiBGaXJlZm94IG1lYXN1cmVzIHRoZSBpbm5lci13aWR0aFxyXG4gICAqL1xyXG4gIGlmICggYm94U2l6aW5nUHJvcCApIHtcclxuICAgIHZhciBkaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgIGRpdi5zdHlsZS53aWR0aCA9ICcyMDBweCc7XHJcbiAgICBkaXYuc3R5bGUucGFkZGluZyA9ICcxcHggMnB4IDNweCA0cHgnO1xyXG4gICAgZGl2LnN0eWxlLmJvcmRlclN0eWxlID0gJ3NvbGlkJztcclxuICAgIGRpdi5zdHlsZS5ib3JkZXJXaWR0aCA9ICcxcHggMnB4IDNweCA0cHgnO1xyXG4gICAgZGl2LnN0eWxlWyBib3hTaXppbmdQcm9wIF0gPSAnYm9yZGVyLWJveCc7XHJcblxyXG4gICAgdmFyIGJvZHkgPSBkb2N1bWVudC5ib2R5IHx8IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcclxuICAgIGJvZHkuYXBwZW5kQ2hpbGQoIGRpdiApO1xyXG4gICAgdmFyIHN0eWxlID0gZ2V0U3R5bGUoIGRpdiApO1xyXG5cclxuICAgIGlzQm94U2l6ZU91dGVyID0gZ2V0U3R5bGVTaXplKCBzdHlsZS53aWR0aCApID09PSAyMDA7XHJcbiAgICBib2R5LnJlbW92ZUNoaWxkKCBkaXYgKTtcclxuICB9XHJcblxyXG59XHJcblxyXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBnZXRTaXplIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIC8vXHJcblxyXG5mdW5jdGlvbiBnZXRTaXplKCBlbGVtICkge1xyXG4gIHNldHVwKCk7XHJcblxyXG4gIC8vIHVzZSBxdWVyeVNlbGV0b3IgaWYgZWxlbSBpcyBzdHJpbmdcclxuICBpZiAoIHR5cGVvZiBlbGVtID09PSAnc3RyaW5nJyApIHtcclxuICAgIGVsZW0gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCBlbGVtICk7XHJcbiAgfVxyXG5cclxuICAvLyBkbyBub3QgcHJvY2VlZCBvbiBub24tb2JqZWN0c1xyXG4gIGlmICggIWVsZW0gfHwgdHlwZW9mIGVsZW0gIT09ICdvYmplY3QnIHx8ICFlbGVtLm5vZGVUeXBlICkge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgdmFyIHN0eWxlID0gZ2V0U3R5bGUoIGVsZW0gKTtcclxuXHJcbiAgLy8gaWYgaGlkZGVuLCBldmVyeXRoaW5nIGlzIDBcclxuICBpZiAoIHN0eWxlLmRpc3BsYXkgPT09ICdub25lJyApIHtcclxuICAgIHJldHVybiBnZXRaZXJvU2l6ZSgpO1xyXG4gIH1cclxuXHJcbiAgdmFyIHNpemUgPSB7fTtcclxuICBzaXplLndpZHRoID0gZWxlbS5vZmZzZXRXaWR0aDtcclxuICBzaXplLmhlaWdodCA9IGVsZW0ub2Zmc2V0SGVpZ2h0O1xyXG5cclxuICB2YXIgaXNCb3JkZXJCb3ggPSBzaXplLmlzQm9yZGVyQm94ID0gISEoIGJveFNpemluZ1Byb3AgJiZcclxuICAgIHN0eWxlWyBib3hTaXppbmdQcm9wIF0gJiYgc3R5bGVbIGJveFNpemluZ1Byb3AgXSA9PT0gJ2JvcmRlci1ib3gnICk7XHJcblxyXG4gIC8vIGdldCBhbGwgbWVhc3VyZW1lbnRzXHJcbiAgZm9yICggdmFyIGk9MCwgbGVuID0gbWVhc3VyZW1lbnRzLmxlbmd0aDsgaSA8IGxlbjsgaSsrICkge1xyXG4gICAgdmFyIG1lYXN1cmVtZW50ID0gbWVhc3VyZW1lbnRzW2ldO1xyXG4gICAgdmFyIHZhbHVlID0gc3R5bGVbIG1lYXN1cmVtZW50IF07XHJcbiAgICB2YWx1ZSA9IG11bmdlTm9uUGl4ZWwoIGVsZW0sIHZhbHVlICk7XHJcbiAgICB2YXIgbnVtID0gcGFyc2VGbG9hdCggdmFsdWUgKTtcclxuICAgIC8vIGFueSAnYXV0bycsICdtZWRpdW0nIHZhbHVlIHdpbGwgYmUgMFxyXG4gICAgc2l6ZVsgbWVhc3VyZW1lbnQgXSA9ICFpc05hTiggbnVtICkgPyBudW0gOiAwO1xyXG4gIH1cclxuXHJcbiAgdmFyIHBhZGRpbmdXaWR0aCA9IHNpemUucGFkZGluZ0xlZnQgKyBzaXplLnBhZGRpbmdSaWdodDtcclxuICB2YXIgcGFkZGluZ0hlaWdodCA9IHNpemUucGFkZGluZ1RvcCArIHNpemUucGFkZGluZ0JvdHRvbTtcclxuICB2YXIgbWFyZ2luV2lkdGggPSBzaXplLm1hcmdpbkxlZnQgKyBzaXplLm1hcmdpblJpZ2h0O1xyXG4gIHZhciBtYXJnaW5IZWlnaHQgPSBzaXplLm1hcmdpblRvcCArIHNpemUubWFyZ2luQm90dG9tO1xyXG4gIHZhciBib3JkZXJXaWR0aCA9IHNpemUuYm9yZGVyTGVmdFdpZHRoICsgc2l6ZS5ib3JkZXJSaWdodFdpZHRoO1xyXG4gIHZhciBib3JkZXJIZWlnaHQgPSBzaXplLmJvcmRlclRvcFdpZHRoICsgc2l6ZS5ib3JkZXJCb3R0b21XaWR0aDtcclxuXHJcbiAgdmFyIGlzQm9yZGVyQm94U2l6ZU91dGVyID0gaXNCb3JkZXJCb3ggJiYgaXNCb3hTaXplT3V0ZXI7XHJcblxyXG4gIC8vIG92ZXJ3cml0ZSB3aWR0aCBhbmQgaGVpZ2h0IGlmIHdlIGNhbiBnZXQgaXQgZnJvbSBzdHlsZVxyXG4gIHZhciBzdHlsZVdpZHRoID0gZ2V0U3R5bGVTaXplKCBzdHlsZS53aWR0aCApO1xyXG4gIGlmICggc3R5bGVXaWR0aCAhPT0gZmFsc2UgKSB7XHJcbiAgICBzaXplLndpZHRoID0gc3R5bGVXaWR0aCArXHJcbiAgICAgIC8vIGFkZCBwYWRkaW5nIGFuZCBib3JkZXIgdW5sZXNzIGl0J3MgYWxyZWFkeSBpbmNsdWRpbmcgaXRcclxuICAgICAgKCBpc0JvcmRlckJveFNpemVPdXRlciA/IDAgOiBwYWRkaW5nV2lkdGggKyBib3JkZXJXaWR0aCApO1xyXG4gIH1cclxuXHJcbiAgdmFyIHN0eWxlSGVpZ2h0ID0gZ2V0U3R5bGVTaXplKCBzdHlsZS5oZWlnaHQgKTtcclxuICBpZiAoIHN0eWxlSGVpZ2h0ICE9PSBmYWxzZSApIHtcclxuICAgIHNpemUuaGVpZ2h0ID0gc3R5bGVIZWlnaHQgK1xyXG4gICAgICAvLyBhZGQgcGFkZGluZyBhbmQgYm9yZGVyIHVubGVzcyBpdCdzIGFscmVhZHkgaW5jbHVkaW5nIGl0XHJcbiAgICAgICggaXNCb3JkZXJCb3hTaXplT3V0ZXIgPyAwIDogcGFkZGluZ0hlaWdodCArIGJvcmRlckhlaWdodCApO1xyXG4gIH1cclxuXHJcbiAgc2l6ZS5pbm5lcldpZHRoID0gc2l6ZS53aWR0aCAtICggcGFkZGluZ1dpZHRoICsgYm9yZGVyV2lkdGggKTtcclxuICBzaXplLmlubmVySGVpZ2h0ID0gc2l6ZS5oZWlnaHQgLSAoIHBhZGRpbmdIZWlnaHQgKyBib3JkZXJIZWlnaHQgKTtcclxuXHJcbiAgc2l6ZS5vdXRlcldpZHRoID0gc2l6ZS53aWR0aCArIG1hcmdpbldpZHRoO1xyXG4gIHNpemUub3V0ZXJIZWlnaHQgPSBzaXplLmhlaWdodCArIG1hcmdpbkhlaWdodDtcclxuXHJcbiAgcmV0dXJuIHNpemU7XHJcbn1cclxuXHJcbi8vIElFOCByZXR1cm5zIHBlcmNlbnQgdmFsdWVzLCBub3QgcGl4ZWxzXHJcbi8vIHRha2VuIGZyb20galF1ZXJ5J3MgY3VyQ1NTXHJcbmZ1bmN0aW9uIG11bmdlTm9uUGl4ZWwoIGVsZW0sIHZhbHVlICkge1xyXG4gIC8vIElFOCBhbmQgaGFzIHBlcmNlbnQgdmFsdWVcclxuICBpZiAoIHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlIHx8IHZhbHVlLmluZGV4T2YoJyUnKSA9PT0gLTEgKSB7XHJcbiAgICByZXR1cm4gdmFsdWU7XHJcbiAgfVxyXG4gIHZhciBzdHlsZSA9IGVsZW0uc3R5bGU7XHJcbiAgLy8gUmVtZW1iZXIgdGhlIG9yaWdpbmFsIHZhbHVlc1xyXG4gIHZhciBsZWZ0ID0gc3R5bGUubGVmdDtcclxuICB2YXIgcnMgPSBlbGVtLnJ1bnRpbWVTdHlsZTtcclxuICB2YXIgcnNMZWZ0ID0gcnMgJiYgcnMubGVmdDtcclxuXHJcbiAgLy8gUHV0IGluIHRoZSBuZXcgdmFsdWVzIHRvIGdldCBhIGNvbXB1dGVkIHZhbHVlIG91dFxyXG4gIGlmICggcnNMZWZ0ICkge1xyXG4gICAgcnMubGVmdCA9IGVsZW0uY3VycmVudFN0eWxlLmxlZnQ7XHJcbiAgfVxyXG4gIHN0eWxlLmxlZnQgPSB2YWx1ZTtcclxuICB2YWx1ZSA9IHN0eWxlLnBpeGVsTGVmdDtcclxuXHJcbiAgLy8gUmV2ZXJ0IHRoZSBjaGFuZ2VkIHZhbHVlc1xyXG4gIHN0eWxlLmxlZnQgPSBsZWZ0O1xyXG4gIGlmICggcnNMZWZ0ICkge1xyXG4gICAgcnMubGVmdCA9IHJzTGVmdDtcclxuICB9XHJcblxyXG4gIHJldHVybiB2YWx1ZTtcclxufVxyXG5cclxucmV0dXJuIGdldFNpemU7XHJcblxyXG59XHJcblxyXG4vLyB0cmFuc3BvcnRcclxuaWYgKCB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgKSB7XHJcbiAgLy8gQU1EIGZvciBSZXF1aXJlSlNcclxuICBkZWZpbmUoICdnZXQtc2l6ZS9nZXQtc2l6ZScsWyAnZ2V0LXN0eWxlLXByb3BlcnR5L2dldC1zdHlsZS1wcm9wZXJ0eScgXSwgZGVmaW5lR2V0U2l6ZSApO1xyXG59IGVsc2UgaWYgKCB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgKSB7XHJcbiAgLy8gQ29tbW9uSlMgZm9yIENvbXBvbmVudFxyXG4gIG1vZHVsZS5leHBvcnRzID0gZGVmaW5lR2V0U2l6ZSggcmVxdWlyZSgnZGVzYW5kcm8tZ2V0LXN0eWxlLXByb3BlcnR5JykgKTtcclxufSBlbHNlIHtcclxuICAvLyBicm93c2VyIGdsb2JhbFxyXG4gIHdpbmRvdy5nZXRTaXplID0gZGVmaW5lR2V0U2l6ZSggd2luZG93LmdldFN0eWxlUHJvcGVydHkgKTtcclxufVxyXG5cclxufSkoIHdpbmRvdyApO1xyXG5cclxuLyohXHJcbiAqIGRvY1JlYWR5IHYxLjAuNFxyXG4gKiBDcm9zcyBicm93c2VyIERPTUNvbnRlbnRMb2FkZWQgZXZlbnQgZW1pdHRlclxyXG4gKiBNSVQgbGljZW5zZVxyXG4gKi9cclxuXHJcbi8qanNoaW50IGJyb3dzZXI6IHRydWUsIHN0cmljdDogdHJ1ZSwgdW5kZWY6IHRydWUsIHVudXNlZDogdHJ1ZSovXHJcbi8qZ2xvYmFsIGRlZmluZTogZmFsc2UsIHJlcXVpcmU6IGZhbHNlLCBtb2R1bGU6IGZhbHNlICovXHJcblxyXG4oIGZ1bmN0aW9uKCB3aW5kb3cgKSB7XHJcblxyXG5cclxuXHJcbnZhciBkb2N1bWVudCA9IHdpbmRvdy5kb2N1bWVudDtcclxuLy8gY29sbGVjdGlvbiBvZiBmdW5jdGlvbnMgdG8gYmUgdHJpZ2dlcmVkIG9uIHJlYWR5XHJcbnZhciBxdWV1ZSA9IFtdO1xyXG5cclxuZnVuY3Rpb24gZG9jUmVhZHkoIGZuICkge1xyXG4gIC8vIHRocm93IG91dCBub24tZnVuY3Rpb25zXHJcbiAgaWYgKCB0eXBlb2YgZm4gIT09ICdmdW5jdGlvbicgKSB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICBpZiAoIGRvY1JlYWR5LmlzUmVhZHkgKSB7XHJcbiAgICAvLyByZWFkeSBub3csIGhpdCBpdFxyXG4gICAgZm4oKTtcclxuICB9IGVsc2Uge1xyXG4gICAgLy8gcXVldWUgZnVuY3Rpb24gd2hlbiByZWFkeVxyXG4gICAgcXVldWUucHVzaCggZm4gKTtcclxuICB9XHJcbn1cclxuXHJcbmRvY1JlYWR5LmlzUmVhZHkgPSBmYWxzZTtcclxuXHJcbi8vIHRyaWdnZXJlZCBvbiB2YXJpb3VzIGRvYyByZWFkeSBldmVudHNcclxuZnVuY3Rpb24gb25SZWFkeSggZXZlbnQgKSB7XHJcbiAgLy8gYmFpbCBpZiBhbHJlYWR5IHRyaWdnZXJlZCBvciBJRTggZG9jdW1lbnQgaXMgbm90IHJlYWR5IGp1c3QgeWV0XHJcbiAgdmFyIGlzSUU4Tm90UmVhZHkgPSBldmVudC50eXBlID09PSAncmVhZHlzdGF0ZWNoYW5nZScgJiYgZG9jdW1lbnQucmVhZHlTdGF0ZSAhPT0gJ2NvbXBsZXRlJztcclxuICBpZiAoIGRvY1JlYWR5LmlzUmVhZHkgfHwgaXNJRThOb3RSZWFkeSApIHtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIHRyaWdnZXIoKTtcclxufVxyXG5cclxuZnVuY3Rpb24gdHJpZ2dlcigpIHtcclxuICBkb2NSZWFkeS5pc1JlYWR5ID0gdHJ1ZTtcclxuICAvLyBwcm9jZXNzIHF1ZXVlXHJcbiAgZm9yICggdmFyIGk9MCwgbGVuID0gcXVldWUubGVuZ3RoOyBpIDwgbGVuOyBpKysgKSB7XHJcbiAgICB2YXIgZm4gPSBxdWV1ZVtpXTtcclxuICAgIGZuKCk7XHJcbiAgfVxyXG59XHJcblxyXG5mdW5jdGlvbiBkZWZpbmVEb2NSZWFkeSggZXZlbnRpZSApIHtcclxuICAvLyB0cmlnZ2VyIHJlYWR5IGlmIHBhZ2UgaXMgcmVhZHlcclxuICBpZiAoIGRvY3VtZW50LnJlYWR5U3RhdGUgPT09ICdjb21wbGV0ZScgKSB7XHJcbiAgICB0cmlnZ2VyKCk7XHJcbiAgfSBlbHNlIHtcclxuICAgIC8vIGxpc3RlbiBmb3IgZXZlbnRzXHJcbiAgICBldmVudGllLmJpbmQoIGRvY3VtZW50LCAnRE9NQ29udGVudExvYWRlZCcsIG9uUmVhZHkgKTtcclxuICAgIGV2ZW50aWUuYmluZCggZG9jdW1lbnQsICdyZWFkeXN0YXRlY2hhbmdlJywgb25SZWFkeSApO1xyXG4gICAgZXZlbnRpZS5iaW5kKCB3aW5kb3csICdsb2FkJywgb25SZWFkeSApO1xyXG4gIH1cclxuXHJcbiAgcmV0dXJuIGRvY1JlYWR5O1xyXG59XHJcblxyXG4vLyB0cmFuc3BvcnRcclxuaWYgKCB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgKSB7XHJcbiAgLy8gQU1EXHJcbiAgZGVmaW5lKCAnZG9jLXJlYWR5L2RvYy1yZWFkeScsWyAnZXZlbnRpZS9ldmVudGllJyBdLCBkZWZpbmVEb2NSZWFkeSApO1xyXG59IGVsc2UgaWYgKCB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgKSB7XHJcbiAgbW9kdWxlLmV4cG9ydHMgPSBkZWZpbmVEb2NSZWFkeSggcmVxdWlyZSgnZXZlbnRpZScpICk7XHJcbn0gZWxzZSB7XHJcbiAgLy8gYnJvd3NlciBnbG9iYWxcclxuICB3aW5kb3cuZG9jUmVhZHkgPSBkZWZpbmVEb2NSZWFkeSggd2luZG93LmV2ZW50aWUgKTtcclxufVxyXG5cclxufSkoIHdpbmRvdyApO1xyXG5cclxuLyoqXHJcbiAqIG1hdGNoZXNTZWxlY3RvciB2MS4wLjNcclxuICogbWF0Y2hlc1NlbGVjdG9yKCBlbGVtZW50LCAnLnNlbGVjdG9yJyApXHJcbiAqIE1JVCBsaWNlbnNlXHJcbiAqL1xyXG5cclxuLypqc2hpbnQgYnJvd3NlcjogdHJ1ZSwgc3RyaWN0OiB0cnVlLCB1bmRlZjogdHJ1ZSwgdW51c2VkOiB0cnVlICovXHJcbi8qZ2xvYmFsIGRlZmluZTogZmFsc2UsIG1vZHVsZTogZmFsc2UgKi9cclxuXHJcbiggZnVuY3Rpb24oIEVsZW1Qcm90byApIHtcclxuXHJcbiAgJ3VzZSBzdHJpY3QnO1xyXG5cclxuICB2YXIgbWF0Y2hlc01ldGhvZCA9ICggZnVuY3Rpb24oKSB7XHJcbiAgICAvLyBjaGVjayBmb3IgdGhlIHN0YW5kYXJkIG1ldGhvZCBuYW1lIGZpcnN0XHJcbiAgICBpZiAoIEVsZW1Qcm90by5tYXRjaGVzICkge1xyXG4gICAgICByZXR1cm4gJ21hdGNoZXMnO1xyXG4gICAgfVxyXG4gICAgLy8gY2hlY2sgdW4tcHJlZml4ZWRcclxuICAgIGlmICggRWxlbVByb3RvLm1hdGNoZXNTZWxlY3RvciApIHtcclxuICAgICAgcmV0dXJuICdtYXRjaGVzU2VsZWN0b3InO1xyXG4gICAgfVxyXG4gICAgLy8gY2hlY2sgdmVuZG9yIHByZWZpeGVzXHJcbiAgICB2YXIgcHJlZml4ZXMgPSBbICd3ZWJraXQnLCAnbW96JywgJ21zJywgJ28nIF07XHJcblxyXG4gICAgZm9yICggdmFyIGk9MCwgbGVuID0gcHJlZml4ZXMubGVuZ3RoOyBpIDwgbGVuOyBpKysgKSB7XHJcbiAgICAgIHZhciBwcmVmaXggPSBwcmVmaXhlc1tpXTtcclxuICAgICAgdmFyIG1ldGhvZCA9IHByZWZpeCArICdNYXRjaGVzU2VsZWN0b3InO1xyXG4gICAgICBpZiAoIEVsZW1Qcm90b1sgbWV0aG9kIF0gKSB7XHJcbiAgICAgICAgcmV0dXJuIG1ldGhvZDtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH0pKCk7XHJcblxyXG4gIC8vIC0tLS0tIG1hdGNoIC0tLS0tIC8vXHJcblxyXG4gIGZ1bmN0aW9uIG1hdGNoKCBlbGVtLCBzZWxlY3RvciApIHtcclxuICAgIHJldHVybiBlbGVtWyBtYXRjaGVzTWV0aG9kIF0oIHNlbGVjdG9yICk7XHJcbiAgfVxyXG5cclxuICAvLyAtLS0tLSBhcHBlbmRUb0ZyYWdtZW50IC0tLS0tIC8vXHJcblxyXG4gIGZ1bmN0aW9uIGNoZWNrUGFyZW50KCBlbGVtICkge1xyXG4gICAgLy8gbm90IG5lZWRlZCBpZiBhbHJlYWR5IGhhcyBwYXJlbnRcclxuICAgIGlmICggZWxlbS5wYXJlbnROb2RlICkge1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgICB2YXIgZnJhZ21lbnQgPSBkb2N1bWVudC5jcmVhdGVEb2N1bWVudEZyYWdtZW50KCk7XHJcbiAgICBmcmFnbWVudC5hcHBlbmRDaGlsZCggZWxlbSApO1xyXG4gIH1cclxuXHJcbiAgLy8gLS0tLS0gcXVlcnkgLS0tLS0gLy9cclxuXHJcbiAgLy8gZmFsbCBiYWNrIHRvIHVzaW5nIFFTQVxyXG4gIC8vIHRoeCBAam9uYXRoYW50bmVhbCBodHRwczovL2dpc3QuZ2l0aHViLmNvbS8zMDYyOTU1XHJcbiAgZnVuY3Rpb24gcXVlcnkoIGVsZW0sIHNlbGVjdG9yICkge1xyXG4gICAgLy8gYXBwZW5kIHRvIGZyYWdtZW50IGlmIG5vIHBhcmVudFxyXG4gICAgY2hlY2tQYXJlbnQoIGVsZW0gKTtcclxuXHJcbiAgICAvLyBtYXRjaCBlbGVtIHdpdGggYWxsIHNlbGVjdGVkIGVsZW1zIG9mIHBhcmVudFxyXG4gICAgdmFyIGVsZW1zID0gZWxlbS5wYXJlbnROb2RlLnF1ZXJ5U2VsZWN0b3JBbGwoIHNlbGVjdG9yICk7XHJcbiAgICBmb3IgKCB2YXIgaT0wLCBsZW4gPSBlbGVtcy5sZW5ndGg7IGkgPCBsZW47IGkrKyApIHtcclxuICAgICAgLy8gcmV0dXJuIHRydWUgaWYgbWF0Y2hcclxuICAgICAgaWYgKCBlbGVtc1tpXSA9PT0gZWxlbSApIHtcclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgLy8gb3RoZXJ3aXNlIHJldHVybiBmYWxzZVxyXG4gICAgcmV0dXJuIGZhbHNlO1xyXG4gIH1cclxuXHJcbiAgLy8gLS0tLS0gbWF0Y2hDaGlsZCAtLS0tLSAvL1xyXG5cclxuICBmdW5jdGlvbiBtYXRjaENoaWxkKCBlbGVtLCBzZWxlY3RvciApIHtcclxuICAgIGNoZWNrUGFyZW50KCBlbGVtICk7XHJcbiAgICByZXR1cm4gbWF0Y2goIGVsZW0sIHNlbGVjdG9yICk7XHJcbiAgfVxyXG5cclxuICAvLyAtLS0tLSBtYXRjaGVzU2VsZWN0b3IgLS0tLS0gLy9cclxuXHJcbiAgdmFyIG1hdGNoZXNTZWxlY3RvcjtcclxuXHJcbiAgaWYgKCBtYXRjaGVzTWV0aG9kICkge1xyXG4gICAgLy8gSUU5IHN1cHBvcnRzIG1hdGNoZXNTZWxlY3RvciwgYnV0IGRvZXNuJ3Qgd29yayBvbiBvcnBoYW5lZCBlbGVtc1xyXG4gICAgLy8gY2hlY2sgZm9yIHRoYXRcclxuICAgIHZhciBkaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgIHZhciBzdXBwb3J0c09ycGhhbnMgPSBtYXRjaCggZGl2LCAnZGl2JyApO1xyXG4gICAgbWF0Y2hlc1NlbGVjdG9yID0gc3VwcG9ydHNPcnBoYW5zID8gbWF0Y2ggOiBtYXRjaENoaWxkO1xyXG4gIH0gZWxzZSB7XHJcbiAgICBtYXRjaGVzU2VsZWN0b3IgPSBxdWVyeTtcclxuICB9XHJcblxyXG4gIC8vIHRyYW5zcG9ydFxyXG4gIGlmICggdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kICkge1xyXG4gICAgLy8gQU1EXHJcbiAgICBkZWZpbmUoICdtYXRjaGVzLXNlbGVjdG9yL21hdGNoZXMtc2VsZWN0b3InLFtdLGZ1bmN0aW9uKCkge1xyXG4gICAgICByZXR1cm4gbWF0Y2hlc1NlbGVjdG9yO1xyXG4gICAgfSk7XHJcbiAgfSBlbHNlIGlmICggdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICkge1xyXG4gICAgbW9kdWxlLmV4cG9ydHMgPSBtYXRjaGVzU2VsZWN0b3I7XHJcbiAgfVxyXG4gIGVsc2Uge1xyXG4gICAgLy8gYnJvd3NlciBnbG9iYWxcclxuICAgIHdpbmRvdy5tYXRjaGVzU2VsZWN0b3IgPSBtYXRjaGVzU2VsZWN0b3I7XHJcbiAgfVxyXG5cclxufSkoIEVsZW1lbnQucHJvdG90eXBlICk7XHJcblxyXG4vKipcclxuICogRml6enkgVUkgdXRpbHMgdjEuMC4xXHJcbiAqIE1JVCBsaWNlbnNlXHJcbiAqL1xyXG5cclxuLypqc2hpbnQgYnJvd3NlcjogdHJ1ZSwgdW5kZWY6IHRydWUsIHVudXNlZDogdHJ1ZSwgc3RyaWN0OiB0cnVlICovXHJcblxyXG4oIGZ1bmN0aW9uKCB3aW5kb3csIGZhY3RvcnkgKSB7XHJcbiAgLypnbG9iYWwgZGVmaW5lOiBmYWxzZSwgbW9kdWxlOiBmYWxzZSwgcmVxdWlyZTogZmFsc2UgKi9cclxuICAndXNlIHN0cmljdCc7XHJcbiAgLy8gdW5pdmVyc2FsIG1vZHVsZSBkZWZpbml0aW9uXHJcblxyXG4gIGlmICggdHlwZW9mIGRlZmluZSA9PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgKSB7XHJcbiAgICAvLyBBTURcclxuICAgIGRlZmluZSggJ2Zpenp5LXVpLXV0aWxzL3V0aWxzJyxbXHJcbiAgICAgICdkb2MtcmVhZHkvZG9jLXJlYWR5JyxcclxuICAgICAgJ21hdGNoZXMtc2VsZWN0b3IvbWF0Y2hlcy1zZWxlY3RvcidcclxuICAgIF0sIGZ1bmN0aW9uKCBkb2NSZWFkeSwgbWF0Y2hlc1NlbGVjdG9yICkge1xyXG4gICAgICByZXR1cm4gZmFjdG9yeSggd2luZG93LCBkb2NSZWFkeSwgbWF0Y2hlc1NlbGVjdG9yICk7XHJcbiAgICB9KTtcclxuICB9IGVsc2UgaWYgKCB0eXBlb2YgZXhwb3J0cyA9PSAnb2JqZWN0JyApIHtcclxuICAgIC8vIENvbW1vbkpTXHJcbiAgICBtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkoXHJcbiAgICAgIHdpbmRvdyxcclxuICAgICAgcmVxdWlyZSgnZG9jLXJlYWR5JyksXHJcbiAgICAgIHJlcXVpcmUoJ2Rlc2FuZHJvLW1hdGNoZXMtc2VsZWN0b3InKVxyXG4gICAgKTtcclxuICB9IGVsc2Uge1xyXG4gICAgLy8gYnJvd3NlciBnbG9iYWxcclxuICAgIHdpbmRvdy5maXp6eVVJVXRpbHMgPSBmYWN0b3J5KFxyXG4gICAgICB3aW5kb3csXHJcbiAgICAgIHdpbmRvdy5kb2NSZWFkeSxcclxuICAgICAgd2luZG93Lm1hdGNoZXNTZWxlY3RvclxyXG4gICAgKTtcclxuICB9XHJcblxyXG59KCB3aW5kb3csIGZ1bmN0aW9uIGZhY3RvcnkoIHdpbmRvdywgZG9jUmVhZHksIG1hdGNoZXNTZWxlY3RvciApIHtcclxuXHJcblxyXG5cclxudmFyIHV0aWxzID0ge307XHJcblxyXG4vLyAtLS0tLSBleHRlbmQgLS0tLS0gLy9cclxuXHJcbi8vIGV4dGVuZHMgb2JqZWN0c1xyXG51dGlscy5leHRlbmQgPSBmdW5jdGlvbiggYSwgYiApIHtcclxuICBmb3IgKCB2YXIgcHJvcCBpbiBiICkge1xyXG4gICAgYVsgcHJvcCBdID0gYlsgcHJvcCBdO1xyXG4gIH1cclxuICByZXR1cm4gYTtcclxufTtcclxuXHJcbi8vIC0tLS0tIG1vZHVsbyAtLS0tLSAvL1xyXG5cclxudXRpbHMubW9kdWxvID0gZnVuY3Rpb24oIG51bSwgZGl2ICkge1xyXG4gIHJldHVybiAoICggbnVtICUgZGl2ICkgKyBkaXYgKSAlIGRpdjtcclxufTtcclxuXHJcbi8vIC0tLS0tIGlzQXJyYXkgLS0tLS0gLy9cclxuICBcclxudmFyIG9ialRvU3RyaW5nID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZztcclxudXRpbHMuaXNBcnJheSA9IGZ1bmN0aW9uKCBvYmogKSB7XHJcbiAgcmV0dXJuIG9ialRvU3RyaW5nLmNhbGwoIG9iaiApID09ICdbb2JqZWN0IEFycmF5XSc7XHJcbn07XHJcblxyXG4vLyAtLS0tLSBtYWtlQXJyYXkgLS0tLS0gLy9cclxuXHJcbi8vIHR1cm4gZWxlbWVudCBvciBub2RlTGlzdCBpbnRvIGFuIGFycmF5XHJcbnV0aWxzLm1ha2VBcnJheSA9IGZ1bmN0aW9uKCBvYmogKSB7XHJcbiAgdmFyIGFyeSA9IFtdO1xyXG4gIGlmICggdXRpbHMuaXNBcnJheSggb2JqICkgKSB7XHJcbiAgICAvLyB1c2Ugb2JqZWN0IGlmIGFscmVhZHkgYW4gYXJyYXlcclxuICAgIGFyeSA9IG9iajtcclxuICB9IGVsc2UgaWYgKCBvYmogJiYgdHlwZW9mIG9iai5sZW5ndGggPT0gJ251bWJlcicgKSB7XHJcbiAgICAvLyBjb252ZXJ0IG5vZGVMaXN0IHRvIGFycmF5XHJcbiAgICBmb3IgKCB2YXIgaT0wLCBsZW4gPSBvYmoubGVuZ3RoOyBpIDwgbGVuOyBpKysgKSB7XHJcbiAgICAgIGFyeS5wdXNoKCBvYmpbaV0gKTtcclxuICAgIH1cclxuICB9IGVsc2Uge1xyXG4gICAgLy8gYXJyYXkgb2Ygc2luZ2xlIGluZGV4XHJcbiAgICBhcnkucHVzaCggb2JqICk7XHJcbiAgfVxyXG4gIHJldHVybiBhcnk7XHJcbn07XHJcblxyXG4vLyAtLS0tLSBpbmRleE9mIC0tLS0tIC8vXHJcblxyXG4vLyBpbmRleCBvZiBoZWxwZXIgY2F1c2UgSUU4XHJcbnV0aWxzLmluZGV4T2YgPSBBcnJheS5wcm90b3R5cGUuaW5kZXhPZiA/IGZ1bmN0aW9uKCBhcnksIG9iaiApIHtcclxuICAgIHJldHVybiBhcnkuaW5kZXhPZiggb2JqICk7XHJcbiAgfSA6IGZ1bmN0aW9uKCBhcnksIG9iaiApIHtcclxuICAgIGZvciAoIHZhciBpPTAsIGxlbiA9IGFyeS5sZW5ndGg7IGkgPCBsZW47IGkrKyApIHtcclxuICAgICAgaWYgKCBhcnlbaV0gPT09IG9iaiApIHtcclxuICAgICAgICByZXR1cm4gaTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIC0xO1xyXG4gIH07XHJcblxyXG4vLyAtLS0tLSByZW1vdmVGcm9tIC0tLS0tIC8vXHJcblxyXG51dGlscy5yZW1vdmVGcm9tID0gZnVuY3Rpb24oIGFyeSwgb2JqICkge1xyXG4gIHZhciBpbmRleCA9IHV0aWxzLmluZGV4T2YoIGFyeSwgb2JqICk7XHJcbiAgaWYgKCBpbmRleCAhPSAtMSApIHtcclxuICAgIGFyeS5zcGxpY2UoIGluZGV4LCAxICk7XHJcbiAgfVxyXG59O1xyXG5cclxuLy8gLS0tLS0gaXNFbGVtZW50IC0tLS0tIC8vXHJcblxyXG4vLyBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vYS8zODQzODAvMTgyMTgzXHJcbnV0aWxzLmlzRWxlbWVudCA9ICggdHlwZW9mIEhUTUxFbGVtZW50ID09ICdmdW5jdGlvbicgfHwgdHlwZW9mIEhUTUxFbGVtZW50ID09ICdvYmplY3QnICkgP1xyXG4gIGZ1bmN0aW9uIGlzRWxlbWVudERPTTIoIG9iaiApIHtcclxuICAgIHJldHVybiBvYmogaW5zdGFuY2VvZiBIVE1MRWxlbWVudDtcclxuICB9IDpcclxuICBmdW5jdGlvbiBpc0VsZW1lbnRRdWlya3koIG9iaiApIHtcclxuICAgIHJldHVybiBvYmogJiYgdHlwZW9mIG9iaiA9PSAnb2JqZWN0JyAmJlxyXG4gICAgICBvYmoubm9kZVR5cGUgPT0gMSAmJiB0eXBlb2Ygb2JqLm5vZGVOYW1lID09ICdzdHJpbmcnO1xyXG4gIH07XHJcblxyXG4vLyAtLS0tLSBzZXRUZXh0IC0tLS0tIC8vXHJcblxyXG51dGlscy5zZXRUZXh0ID0gKCBmdW5jdGlvbigpIHtcclxuICB2YXIgc2V0VGV4dFByb3BlcnR5O1xyXG4gIGZ1bmN0aW9uIHNldFRleHQoIGVsZW0sIHRleHQgKSB7XHJcbiAgICAvLyBvbmx5IGNoZWNrIHNldFRleHRQcm9wZXJ0eSBvbmNlXHJcbiAgICBzZXRUZXh0UHJvcGVydHkgPSBzZXRUZXh0UHJvcGVydHkgfHwgKCBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQudGV4dENvbnRlbnQgIT09IHVuZGVmaW5lZCA/ICd0ZXh0Q29udGVudCcgOiAnaW5uZXJUZXh0JyApO1xyXG4gICAgZWxlbVsgc2V0VGV4dFByb3BlcnR5IF0gPSB0ZXh0O1xyXG4gIH1cclxuICByZXR1cm4gc2V0VGV4dDtcclxufSkoKTtcclxuXHJcbi8vIC0tLS0tIGdldFBhcmVudCAtLS0tLSAvL1xyXG5cclxudXRpbHMuZ2V0UGFyZW50ID0gZnVuY3Rpb24oIGVsZW0sIHNlbGVjdG9yICkge1xyXG4gIHdoaWxlICggZWxlbSAhPSBkb2N1bWVudC5ib2R5ICkge1xyXG4gICAgZWxlbSA9IGVsZW0ucGFyZW50Tm9kZTtcclxuICAgIGlmICggbWF0Y2hlc1NlbGVjdG9yKCBlbGVtLCBzZWxlY3RvciApICkge1xyXG4gICAgICByZXR1cm4gZWxlbTtcclxuICAgIH1cclxuICB9XHJcbn07XHJcblxyXG4vLyAtLS0tLSBnZXRRdWVyeUVsZW1lbnQgLS0tLS0gLy9cclxuXHJcbi8vIHVzZSBlbGVtZW50IGFzIHNlbGVjdG9yIHN0cmluZ1xyXG51dGlscy5nZXRRdWVyeUVsZW1lbnQgPSBmdW5jdGlvbiggZWxlbSApIHtcclxuICBpZiAoIHR5cGVvZiBlbGVtID09ICdzdHJpbmcnICkge1xyXG4gICAgcmV0dXJuIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoIGVsZW0gKTtcclxuICB9XHJcbiAgcmV0dXJuIGVsZW07XHJcbn07XHJcblxyXG4vLyAtLS0tLSBoYW5kbGVFdmVudCAtLS0tLSAvL1xyXG5cclxuLy8gZW5hYmxlIC5vbnR5cGUgdG8gdHJpZ2dlciBmcm9tIC5hZGRFdmVudExpc3RlbmVyKCBlbGVtLCAndHlwZScgKVxyXG51dGlscy5oYW5kbGVFdmVudCA9IGZ1bmN0aW9uKCBldmVudCApIHtcclxuICB2YXIgbWV0aG9kID0gJ29uJyArIGV2ZW50LnR5cGU7XHJcbiAgaWYgKCB0aGlzWyBtZXRob2QgXSApIHtcclxuICAgIHRoaXNbIG1ldGhvZCBdKCBldmVudCApO1xyXG4gIH1cclxufTtcclxuXHJcbi8vIC0tLS0tIGZpbHRlckZpbmRFbGVtZW50cyAtLS0tLSAvL1xyXG5cclxudXRpbHMuZmlsdGVyRmluZEVsZW1lbnRzID0gZnVuY3Rpb24oIGVsZW1zLCBzZWxlY3RvciApIHtcclxuICAvLyBtYWtlIGFycmF5IG9mIGVsZW1zXHJcbiAgZWxlbXMgPSB1dGlscy5tYWtlQXJyYXkoIGVsZW1zICk7XHJcbiAgdmFyIGZmRWxlbXMgPSBbXTtcclxuXHJcbiAgZm9yICggdmFyIGk9MCwgbGVuID0gZWxlbXMubGVuZ3RoOyBpIDwgbGVuOyBpKysgKSB7XHJcbiAgICB2YXIgZWxlbSA9IGVsZW1zW2ldO1xyXG4gICAgLy8gY2hlY2sgdGhhdCBlbGVtIGlzIGFuIGFjdHVhbCBlbGVtZW50XHJcbiAgICBpZiAoICF1dGlscy5pc0VsZW1lbnQoIGVsZW0gKSApIHtcclxuICAgICAgY29udGludWU7XHJcbiAgICB9XHJcbiAgICAvLyBmaWx0ZXIgJiBmaW5kIGl0ZW1zIGlmIHdlIGhhdmUgYSBzZWxlY3RvclxyXG4gICAgaWYgKCBzZWxlY3RvciApIHtcclxuICAgICAgLy8gZmlsdGVyIHNpYmxpbmdzXHJcbiAgICAgIGlmICggbWF0Y2hlc1NlbGVjdG9yKCBlbGVtLCBzZWxlY3RvciApICkge1xyXG4gICAgICAgIGZmRWxlbXMucHVzaCggZWxlbSApO1xyXG4gICAgICB9XHJcbiAgICAgIC8vIGZpbmQgY2hpbGRyZW5cclxuICAgICAgdmFyIGNoaWxkRWxlbXMgPSBlbGVtLnF1ZXJ5U2VsZWN0b3JBbGwoIHNlbGVjdG9yICk7XHJcbiAgICAgIC8vIGNvbmNhdCBjaGlsZEVsZW1zIHRvIGZpbHRlckZvdW5kIGFycmF5XHJcbiAgICAgIGZvciAoIHZhciBqPTAsIGpMZW4gPSBjaGlsZEVsZW1zLmxlbmd0aDsgaiA8IGpMZW47IGorKyApIHtcclxuICAgICAgICBmZkVsZW1zLnB1c2goIGNoaWxkRWxlbXNbal0gKTtcclxuICAgICAgfVxyXG4gICAgfSBlbHNlIHtcclxuICAgICAgZmZFbGVtcy5wdXNoKCBlbGVtICk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICByZXR1cm4gZmZFbGVtcztcclxufTtcclxuXHJcbi8vIC0tLS0tIGRlYm91bmNlTWV0aG9kIC0tLS0tIC8vXHJcblxyXG51dGlscy5kZWJvdW5jZU1ldGhvZCA9IGZ1bmN0aW9uKCBfY2xhc3MsIG1ldGhvZE5hbWUsIHRocmVzaG9sZCApIHtcclxuICAvLyBvcmlnaW5hbCBtZXRob2RcclxuICB2YXIgbWV0aG9kID0gX2NsYXNzLnByb3RvdHlwZVsgbWV0aG9kTmFtZSBdO1xyXG4gIHZhciB0aW1lb3V0TmFtZSA9IG1ldGhvZE5hbWUgKyAnVGltZW91dCc7XHJcblxyXG4gIF9jbGFzcy5wcm90b3R5cGVbIG1ldGhvZE5hbWUgXSA9IGZ1bmN0aW9uKCkge1xyXG4gICAgdmFyIHRpbWVvdXQgPSB0aGlzWyB0aW1lb3V0TmFtZSBdO1xyXG4gICAgaWYgKCB0aW1lb3V0ICkge1xyXG4gICAgICBjbGVhclRpbWVvdXQoIHRpbWVvdXQgKTtcclxuICAgIH1cclxuICAgIHZhciBhcmdzID0gYXJndW1lbnRzO1xyXG5cclxuICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICB0aGlzWyB0aW1lb3V0TmFtZSBdID0gc2V0VGltZW91dCggZnVuY3Rpb24oKSB7XHJcbiAgICAgIG1ldGhvZC5hcHBseSggX3RoaXMsIGFyZ3MgKTtcclxuICAgICAgZGVsZXRlIF90aGlzWyB0aW1lb3V0TmFtZSBdO1xyXG4gICAgfSwgdGhyZXNob2xkIHx8IDEwMCApO1xyXG4gIH07XHJcbn07XHJcblxyXG4vLyAtLS0tLSBodG1sSW5pdCAtLS0tLSAvL1xyXG5cclxuLy8gaHR0cDovL2phbWVzcm9iZXJ0cy5uYW1lL2Jsb2cvMjAxMC8wMi8yMi9zdHJpbmctZnVuY3Rpb25zLWZvci1qYXZhc2NyaXB0LXRyaW0tdG8tY2FtZWwtY2FzZS10by1kYXNoZWQtYW5kLXRvLXVuZGVyc2NvcmUvXHJcbnV0aWxzLnRvRGFzaGVkID0gZnVuY3Rpb24oIHN0ciApIHtcclxuICByZXR1cm4gc3RyLnJlcGxhY2UoIC8oLikoW0EtWl0pL2csIGZ1bmN0aW9uKCBtYXRjaCwgJDEsICQyICkge1xyXG4gICAgcmV0dXJuICQxICsgJy0nICsgJDI7XHJcbiAgfSkudG9Mb3dlckNhc2UoKTtcclxufTtcclxuXHJcbnZhciBjb25zb2xlID0gd2luZG93LmNvbnNvbGU7XHJcbi8qKlxyXG4gKiBhbGxvdyB1c2VyIHRvIGluaXRpYWxpemUgY2xhc3NlcyB2aWEgLmpzLW5hbWVzcGFjZSBjbGFzc1xyXG4gKiBodG1sSW5pdCggV2lkZ2V0LCAnd2lkZ2V0TmFtZScgKVxyXG4gKiBvcHRpb25zIGFyZSBwYXJzZWQgZnJvbSBkYXRhLW5hbWVzcGFjZS1vcHRpb24gYXR0cmlidXRlXHJcbiAqL1xyXG51dGlscy5odG1sSW5pdCA9IGZ1bmN0aW9uKCBXaWRnZXRDbGFzcywgbmFtZXNwYWNlICkge1xyXG4gIGRvY1JlYWR5KCBmdW5jdGlvbigpIHtcclxuICAgIHZhciBkYXNoZWROYW1lc3BhY2UgPSB1dGlscy50b0Rhc2hlZCggbmFtZXNwYWNlICk7XHJcbiAgICB2YXIgZWxlbXMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCAnLmpzLScgKyBkYXNoZWROYW1lc3BhY2UgKTtcclxuICAgIHZhciBkYXRhQXR0ciA9ICdkYXRhLScgKyBkYXNoZWROYW1lc3BhY2UgKyAnLW9wdGlvbnMnO1xyXG5cclxuICAgIGZvciAoIHZhciBpPTAsIGxlbiA9IGVsZW1zLmxlbmd0aDsgaSA8IGxlbjsgaSsrICkge1xyXG4gICAgICB2YXIgZWxlbSA9IGVsZW1zW2ldO1xyXG4gICAgICB2YXIgYXR0ciA9IGVsZW0uZ2V0QXR0cmlidXRlKCBkYXRhQXR0ciApO1xyXG4gICAgICB2YXIgb3B0aW9ucztcclxuICAgICAgdHJ5IHtcclxuICAgICAgICBvcHRpb25zID0gYXR0ciAmJiBKU09OLnBhcnNlKCBhdHRyICk7XHJcbiAgICAgIH0gY2F0Y2ggKCBlcnJvciApIHtcclxuICAgICAgICAvLyBsb2cgZXJyb3IsIGRvIG5vdCBpbml0aWFsaXplXHJcbiAgICAgICAgaWYgKCBjb25zb2xlICkge1xyXG4gICAgICAgICAgY29uc29sZS5lcnJvciggJ0Vycm9yIHBhcnNpbmcgJyArIGRhdGFBdHRyICsgJyBvbiAnICtcclxuICAgICAgICAgICAgZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpICsgKCBlbGVtLmlkID8gJyMnICsgZWxlbS5pZCA6ICcnICkgKyAnOiAnICtcclxuICAgICAgICAgICAgZXJyb3IgKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29udGludWU7XHJcbiAgICAgIH1cclxuICAgICAgLy8gaW5pdGlhbGl6ZVxyXG4gICAgICB2YXIgaW5zdGFuY2UgPSBuZXcgV2lkZ2V0Q2xhc3MoIGVsZW0sIG9wdGlvbnMgKTtcclxuICAgICAgLy8gbWFrZSBhdmFpbGFibGUgdmlhICQoKS5kYXRhKCdsYXlvdXRuYW1lJylcclxuICAgICAgdmFyIGpRdWVyeSA9IHdpbmRvdy5qUXVlcnk7XHJcbiAgICAgIGlmICggalF1ZXJ5ICkge1xyXG4gICAgICAgIGpRdWVyeS5kYXRhKCBlbGVtLCBuYW1lc3BhY2UsIGluc3RhbmNlICk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9KTtcclxufTtcclxuXHJcbi8vIC0tLS0tICAtLS0tLSAvL1xyXG5cclxucmV0dXJuIHV0aWxzO1xyXG5cclxufSkpO1xyXG5cclxuLyoqXHJcbiAqIE91dGxheWVyIEl0ZW1cclxuICovXHJcblxyXG4oIGZ1bmN0aW9uKCB3aW5kb3csIGZhY3RvcnkgKSB7XHJcbiAgJ3VzZSBzdHJpY3QnO1xyXG4gIC8vIHVuaXZlcnNhbCBtb2R1bGUgZGVmaW5pdGlvblxyXG4gIGlmICggdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kICkge1xyXG4gICAgLy8gQU1EXHJcbiAgICBkZWZpbmUoICdvdXRsYXllci9pdGVtJyxbXHJcbiAgICAgICAgJ2V2ZW50RW1pdHRlci9FdmVudEVtaXR0ZXInLFxyXG4gICAgICAgICdnZXQtc2l6ZS9nZXQtc2l6ZScsXHJcbiAgICAgICAgJ2dldC1zdHlsZS1wcm9wZXJ0eS9nZXQtc3R5bGUtcHJvcGVydHknLFxyXG4gICAgICAgICdmaXp6eS11aS11dGlscy91dGlscydcclxuICAgICAgXSxcclxuICAgICAgZnVuY3Rpb24oIEV2ZW50RW1pdHRlciwgZ2V0U2l6ZSwgZ2V0U3R5bGVQcm9wZXJ0eSwgdXRpbHMgKSB7XHJcbiAgICAgICAgcmV0dXJuIGZhY3RvcnkoIHdpbmRvdywgRXZlbnRFbWl0dGVyLCBnZXRTaXplLCBnZXRTdHlsZVByb3BlcnR5LCB1dGlscyApO1xyXG4gICAgICB9XHJcbiAgICApO1xyXG4gIH0gZWxzZSBpZiAodHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnKSB7XHJcbiAgICAvLyBDb21tb25KU1xyXG4gICAgbW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KFxyXG4gICAgICB3aW5kb3csXHJcbiAgICAgIHJlcXVpcmUoJ3dvbGZ5ODctZXZlbnRlbWl0dGVyJyksXHJcbiAgICAgIHJlcXVpcmUoJ2dldC1zaXplJyksXHJcbiAgICAgIHJlcXVpcmUoJ2Rlc2FuZHJvLWdldC1zdHlsZS1wcm9wZXJ0eScpLFxyXG4gICAgICByZXF1aXJlKCdmaXp6eS11aS11dGlscycpXHJcbiAgICApO1xyXG4gIH0gZWxzZSB7XHJcbiAgICAvLyBicm93c2VyIGdsb2JhbFxyXG4gICAgd2luZG93Lk91dGxheWVyID0ge307XHJcbiAgICB3aW5kb3cuT3V0bGF5ZXIuSXRlbSA9IGZhY3RvcnkoXHJcbiAgICAgIHdpbmRvdyxcclxuICAgICAgd2luZG93LkV2ZW50RW1pdHRlcixcclxuICAgICAgd2luZG93LmdldFNpemUsXHJcbiAgICAgIHdpbmRvdy5nZXRTdHlsZVByb3BlcnR5LFxyXG4gICAgICB3aW5kb3cuZml6enlVSVV0aWxzXHJcbiAgICApO1xyXG4gIH1cclxuXHJcbn0oIHdpbmRvdywgZnVuY3Rpb24gZmFjdG9yeSggd2luZG93LCBFdmVudEVtaXR0ZXIsIGdldFNpemUsIGdldFN0eWxlUHJvcGVydHksIHV0aWxzICkge1xyXG4ndXNlIHN0cmljdCc7XHJcblxyXG4vLyAtLS0tLSBoZWxwZXJzIC0tLS0tIC8vXHJcblxyXG52YXIgZ2V0Q29tcHV0ZWRTdHlsZSA9IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlO1xyXG52YXIgZ2V0U3R5bGUgPSBnZXRDb21wdXRlZFN0eWxlID9cclxuICBmdW5jdGlvbiggZWxlbSApIHtcclxuICAgIHJldHVybiBnZXRDb21wdXRlZFN0eWxlKCBlbGVtLCBudWxsICk7XHJcbiAgfSA6XHJcbiAgZnVuY3Rpb24oIGVsZW0gKSB7XHJcbiAgICByZXR1cm4gZWxlbS5jdXJyZW50U3R5bGU7XHJcbiAgfTtcclxuXHJcblxyXG5mdW5jdGlvbiBpc0VtcHR5T2JqKCBvYmogKSB7XHJcbiAgZm9yICggdmFyIHByb3AgaW4gb2JqICkge1xyXG4gICAgcmV0dXJuIGZhbHNlO1xyXG4gIH1cclxuICBwcm9wID0gbnVsbDtcclxuICByZXR1cm4gdHJ1ZTtcclxufVxyXG5cclxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gQ1NTMyBzdXBwb3J0IC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIC8vXHJcblxyXG52YXIgdHJhbnNpdGlvblByb3BlcnR5ID0gZ2V0U3R5bGVQcm9wZXJ0eSgndHJhbnNpdGlvbicpO1xyXG52YXIgdHJhbnNmb3JtUHJvcGVydHkgPSBnZXRTdHlsZVByb3BlcnR5KCd0cmFuc2Zvcm0nKTtcclxudmFyIHN1cHBvcnRzQ1NTMyA9IHRyYW5zaXRpb25Qcm9wZXJ0eSAmJiB0cmFuc2Zvcm1Qcm9wZXJ0eTtcclxudmFyIGlzM2QgPSAhIWdldFN0eWxlUHJvcGVydHkoJ3BlcnNwZWN0aXZlJyk7XHJcblxyXG52YXIgdHJhbnNpdGlvbkVuZEV2ZW50ID0ge1xyXG4gIFdlYmtpdFRyYW5zaXRpb246ICd3ZWJraXRUcmFuc2l0aW9uRW5kJyxcclxuICBNb3pUcmFuc2l0aW9uOiAndHJhbnNpdGlvbmVuZCcsXHJcbiAgT1RyYW5zaXRpb246ICdvdHJhbnNpdGlvbmVuZCcsXHJcbiAgdHJhbnNpdGlvbjogJ3RyYW5zaXRpb25lbmQnXHJcbn1bIHRyYW5zaXRpb25Qcm9wZXJ0eSBdO1xyXG5cclxuLy8gcHJvcGVydGllcyB0aGF0IGNvdWxkIGhhdmUgdmVuZG9yIHByZWZpeFxyXG52YXIgcHJlZml4YWJsZVByb3BlcnRpZXMgPSBbXHJcbiAgJ3RyYW5zZm9ybScsXHJcbiAgJ3RyYW5zaXRpb24nLFxyXG4gICd0cmFuc2l0aW9uRHVyYXRpb24nLFxyXG4gICd0cmFuc2l0aW9uUHJvcGVydHknXHJcbl07XHJcblxyXG4vLyBjYWNoZSBhbGwgdmVuZG9yIHByb3BlcnRpZXNcclxudmFyIHZlbmRvclByb3BlcnRpZXMgPSAoIGZ1bmN0aW9uKCkge1xyXG4gIHZhciBjYWNoZSA9IHt9O1xyXG4gIGZvciAoIHZhciBpPTAsIGxlbiA9IHByZWZpeGFibGVQcm9wZXJ0aWVzLmxlbmd0aDsgaSA8IGxlbjsgaSsrICkge1xyXG4gICAgdmFyIHByb3AgPSBwcmVmaXhhYmxlUHJvcGVydGllc1tpXTtcclxuICAgIHZhciBzdXBwb3J0ZWRQcm9wID0gZ2V0U3R5bGVQcm9wZXJ0eSggcHJvcCApO1xyXG4gICAgaWYgKCBzdXBwb3J0ZWRQcm9wICYmIHN1cHBvcnRlZFByb3AgIT09IHByb3AgKSB7XHJcbiAgICAgIGNhY2hlWyBwcm9wIF0gPSBzdXBwb3J0ZWRQcm9wO1xyXG4gICAgfVxyXG4gIH1cclxuICByZXR1cm4gY2FjaGU7XHJcbn0pKCk7XHJcblxyXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBJdGVtIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIC8vXHJcblxyXG5mdW5jdGlvbiBJdGVtKCBlbGVtZW50LCBsYXlvdXQgKSB7XHJcbiAgaWYgKCAhZWxlbWVudCApIHtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIHRoaXMuZWxlbWVudCA9IGVsZW1lbnQ7XHJcbiAgLy8gcGFyZW50IGxheW91dCBjbGFzcywgaS5lLiBNYXNvbnJ5LCBJc290b3BlLCBvciBQYWNrZXJ5XHJcbiAgdGhpcy5sYXlvdXQgPSBsYXlvdXQ7XHJcbiAgdGhpcy5wb3NpdGlvbiA9IHtcclxuICAgIHg6IDAsXHJcbiAgICB5OiAwXHJcbiAgfTtcclxuXHJcbiAgdGhpcy5fY3JlYXRlKCk7XHJcbn1cclxuXHJcbi8vIGluaGVyaXQgRXZlbnRFbWl0dGVyXHJcbnV0aWxzLmV4dGVuZCggSXRlbS5wcm90b3R5cGUsIEV2ZW50RW1pdHRlci5wcm90b3R5cGUgKTtcclxuXHJcbkl0ZW0ucHJvdG90eXBlLl9jcmVhdGUgPSBmdW5jdGlvbigpIHtcclxuICAvLyB0cmFuc2l0aW9uIG9iamVjdHNcclxuICB0aGlzLl90cmFuc24gPSB7XHJcbiAgICBpbmdQcm9wZXJ0aWVzOiB7fSxcclxuICAgIGNsZWFuOiB7fSxcclxuICAgIG9uRW5kOiB7fVxyXG4gIH07XHJcblxyXG4gIHRoaXMuY3NzKHtcclxuICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnXHJcbiAgfSk7XHJcbn07XHJcblxyXG4vLyB0cmlnZ2VyIHNwZWNpZmllZCBoYW5kbGVyIGZvciBldmVudCB0eXBlXHJcbkl0ZW0ucHJvdG90eXBlLmhhbmRsZUV2ZW50ID0gZnVuY3Rpb24oIGV2ZW50ICkge1xyXG4gIHZhciBtZXRob2QgPSAnb24nICsgZXZlbnQudHlwZTtcclxuICBpZiAoIHRoaXNbIG1ldGhvZCBdICkge1xyXG4gICAgdGhpc1sgbWV0aG9kIF0oIGV2ZW50ICk7XHJcbiAgfVxyXG59O1xyXG5cclxuSXRlbS5wcm90b3R5cGUuZ2V0U2l6ZSA9IGZ1bmN0aW9uKCkge1xyXG4gIHRoaXMuc2l6ZSA9IGdldFNpemUoIHRoaXMuZWxlbWVudCApO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIGFwcGx5IENTUyBzdHlsZXMgdG8gZWxlbWVudFxyXG4gKiBAcGFyYW0ge09iamVjdH0gc3R5bGVcclxuICovXHJcbkl0ZW0ucHJvdG90eXBlLmNzcyA9IGZ1bmN0aW9uKCBzdHlsZSApIHtcclxuICB2YXIgZWxlbVN0eWxlID0gdGhpcy5lbGVtZW50LnN0eWxlO1xyXG5cclxuICBmb3IgKCB2YXIgcHJvcCBpbiBzdHlsZSApIHtcclxuICAgIC8vIHVzZSB2ZW5kb3IgcHJvcGVydHkgaWYgYXZhaWxhYmxlXHJcbiAgICB2YXIgc3VwcG9ydGVkUHJvcCA9IHZlbmRvclByb3BlcnRpZXNbIHByb3AgXSB8fCBwcm9wO1xyXG4gICAgZWxlbVN0eWxlWyBzdXBwb3J0ZWRQcm9wIF0gPSBzdHlsZVsgcHJvcCBdO1xyXG4gIH1cclxufTtcclxuXHJcbiAvLyBtZWFzdXJlIHBvc2l0aW9uLCBhbmQgc2V0cyBpdFxyXG5JdGVtLnByb3RvdHlwZS5nZXRQb3NpdGlvbiA9IGZ1bmN0aW9uKCkge1xyXG4gIHZhciBzdHlsZSA9IGdldFN0eWxlKCB0aGlzLmVsZW1lbnQgKTtcclxuICB2YXIgbGF5b3V0T3B0aW9ucyA9IHRoaXMubGF5b3V0Lm9wdGlvbnM7XHJcbiAgdmFyIGlzT3JpZ2luTGVmdCA9IGxheW91dE9wdGlvbnMuaXNPcmlnaW5MZWZ0O1xyXG4gIHZhciBpc09yaWdpblRvcCA9IGxheW91dE9wdGlvbnMuaXNPcmlnaW5Ub3A7XHJcbiAgdmFyIHhWYWx1ZSA9IHN0eWxlWyBpc09yaWdpbkxlZnQgPyAnbGVmdCcgOiAncmlnaHQnIF07XHJcbiAgdmFyIHlWYWx1ZSA9IHN0eWxlWyBpc09yaWdpblRvcCA/ICd0b3AnIDogJ2JvdHRvbScgXTtcclxuICAvLyBjb252ZXJ0IHBlcmNlbnQgdG8gcGl4ZWxzXHJcbiAgdmFyIGxheW91dFNpemUgPSB0aGlzLmxheW91dC5zaXplO1xyXG4gIHZhciB4ID0geFZhbHVlLmluZGV4T2YoJyUnKSAhPSAtMSA/XHJcbiAgICAoIHBhcnNlRmxvYXQoIHhWYWx1ZSApIC8gMTAwICkgKiBsYXlvdXRTaXplLndpZHRoIDogcGFyc2VJbnQoIHhWYWx1ZSwgMTAgKTtcclxuICB2YXIgeSA9IHlWYWx1ZS5pbmRleE9mKCclJykgIT0gLTEgP1xyXG4gICAgKCBwYXJzZUZsb2F0KCB5VmFsdWUgKSAvIDEwMCApICogbGF5b3V0U2l6ZS5oZWlnaHQgOiBwYXJzZUludCggeVZhbHVlLCAxMCApO1xyXG5cclxuICAvLyBjbGVhbiB1cCAnYXV0bycgb3Igb3RoZXIgbm9uLWludGVnZXIgdmFsdWVzXHJcbiAgeCA9IGlzTmFOKCB4ICkgPyAwIDogeDtcclxuICB5ID0gaXNOYU4oIHkgKSA/IDAgOiB5O1xyXG4gIC8vIHJlbW92ZSBwYWRkaW5nIGZyb20gbWVhc3VyZW1lbnRcclxuICB4IC09IGlzT3JpZ2luTGVmdCA/IGxheW91dFNpemUucGFkZGluZ0xlZnQgOiBsYXlvdXRTaXplLnBhZGRpbmdSaWdodDtcclxuICB5IC09IGlzT3JpZ2luVG9wID8gbGF5b3V0U2l6ZS5wYWRkaW5nVG9wIDogbGF5b3V0U2l6ZS5wYWRkaW5nQm90dG9tO1xyXG5cclxuICB0aGlzLnBvc2l0aW9uLnggPSB4O1xyXG4gIHRoaXMucG9zaXRpb24ueSA9IHk7XHJcbn07XHJcblxyXG4vLyBzZXQgc2V0dGxlZCBwb3NpdGlvbiwgYXBwbHkgcGFkZGluZ1xyXG5JdGVtLnByb3RvdHlwZS5sYXlvdXRQb3NpdGlvbiA9IGZ1bmN0aW9uKCkge1xyXG4gIHZhciBsYXlvdXRTaXplID0gdGhpcy5sYXlvdXQuc2l6ZTtcclxuICB2YXIgbGF5b3V0T3B0aW9ucyA9IHRoaXMubGF5b3V0Lm9wdGlvbnM7XHJcbiAgdmFyIHN0eWxlID0ge307XHJcblxyXG4gIC8vIHhcclxuICB2YXIgeFBhZGRpbmcgPSBsYXlvdXRPcHRpb25zLmlzT3JpZ2luTGVmdCA/ICdwYWRkaW5nTGVmdCcgOiAncGFkZGluZ1JpZ2h0JztcclxuICB2YXIgeFByb3BlcnR5ID0gbGF5b3V0T3B0aW9ucy5pc09yaWdpbkxlZnQgPyAnbGVmdCcgOiAncmlnaHQnO1xyXG4gIHZhciB4UmVzZXRQcm9wZXJ0eSA9IGxheW91dE9wdGlvbnMuaXNPcmlnaW5MZWZ0ID8gJ3JpZ2h0JyA6ICdsZWZ0JztcclxuXHJcbiAgdmFyIHggPSB0aGlzLnBvc2l0aW9uLnggKyBsYXlvdXRTaXplWyB4UGFkZGluZyBdO1xyXG4gIC8vIHNldCBpbiBwZXJjZW50YWdlIG9yIHBpeGVsc1xyXG4gIHN0eWxlWyB4UHJvcGVydHkgXSA9IHRoaXMuZ2V0WFZhbHVlKCB4ICk7XHJcbiAgLy8gcmVzZXQgb3RoZXIgcHJvcGVydHlcclxuICBzdHlsZVsgeFJlc2V0UHJvcGVydHkgXSA9ICcnO1xyXG5cclxuICAvLyB5XHJcbiAgdmFyIHlQYWRkaW5nID0gbGF5b3V0T3B0aW9ucy5pc09yaWdpblRvcCA/ICdwYWRkaW5nVG9wJyA6ICdwYWRkaW5nQm90dG9tJztcclxuICB2YXIgeVByb3BlcnR5ID0gbGF5b3V0T3B0aW9ucy5pc09yaWdpblRvcCA/ICd0b3AnIDogJ2JvdHRvbSc7XHJcbiAgdmFyIHlSZXNldFByb3BlcnR5ID0gbGF5b3V0T3B0aW9ucy5pc09yaWdpblRvcCA/ICdib3R0b20nIDogJ3RvcCc7XHJcblxyXG4gIHZhciB5ID0gdGhpcy5wb3NpdGlvbi55ICsgbGF5b3V0U2l6ZVsgeVBhZGRpbmcgXTtcclxuICAvLyBzZXQgaW4gcGVyY2VudGFnZSBvciBwaXhlbHNcclxuICBzdHlsZVsgeVByb3BlcnR5IF0gPSB0aGlzLmdldFlWYWx1ZSggeSApO1xyXG4gIC8vIHJlc2V0IG90aGVyIHByb3BlcnR5XHJcbiAgc3R5bGVbIHlSZXNldFByb3BlcnR5IF0gPSAnJztcclxuXHJcbiAgdGhpcy5jc3MoIHN0eWxlICk7XHJcbiAgdGhpcy5lbWl0RXZlbnQoICdsYXlvdXQnLCBbIHRoaXMgXSApO1xyXG59O1xyXG5cclxuSXRlbS5wcm90b3R5cGUuZ2V0WFZhbHVlID0gZnVuY3Rpb24oIHggKSB7XHJcbiAgdmFyIGxheW91dE9wdGlvbnMgPSB0aGlzLmxheW91dC5vcHRpb25zO1xyXG4gIHJldHVybiBsYXlvdXRPcHRpb25zLnBlcmNlbnRQb3NpdGlvbiAmJiAhbGF5b3V0T3B0aW9ucy5pc0hvcml6b250YWwgP1xyXG4gICAgKCAoIHggLyB0aGlzLmxheW91dC5zaXplLndpZHRoICkgKiAxMDAgKSArICclJyA6IHggKyAncHgnO1xyXG59O1xyXG5cclxuSXRlbS5wcm90b3R5cGUuZ2V0WVZhbHVlID0gZnVuY3Rpb24oIHkgKSB7XHJcbiAgdmFyIGxheW91dE9wdGlvbnMgPSB0aGlzLmxheW91dC5vcHRpb25zO1xyXG4gIHJldHVybiBsYXlvdXRPcHRpb25zLnBlcmNlbnRQb3NpdGlvbiAmJiBsYXlvdXRPcHRpb25zLmlzSG9yaXpvbnRhbCA/XHJcbiAgICAoICggeSAvIHRoaXMubGF5b3V0LnNpemUuaGVpZ2h0ICkgKiAxMDAgKSArICclJyA6IHkgKyAncHgnO1xyXG59O1xyXG5cclxuXHJcbkl0ZW0ucHJvdG90eXBlLl90cmFuc2l0aW9uVG8gPSBmdW5jdGlvbiggeCwgeSApIHtcclxuICB0aGlzLmdldFBvc2l0aW9uKCk7XHJcbiAgLy8gZ2V0IGN1cnJlbnQgeCAmIHkgZnJvbSB0b3AvbGVmdFxyXG4gIHZhciBjdXJYID0gdGhpcy5wb3NpdGlvbi54O1xyXG4gIHZhciBjdXJZID0gdGhpcy5wb3NpdGlvbi55O1xyXG5cclxuICB2YXIgY29tcGFyZVggPSBwYXJzZUludCggeCwgMTAgKTtcclxuICB2YXIgY29tcGFyZVkgPSBwYXJzZUludCggeSwgMTAgKTtcclxuICB2YXIgZGlkTm90TW92ZSA9IGNvbXBhcmVYID09PSB0aGlzLnBvc2l0aW9uLnggJiYgY29tcGFyZVkgPT09IHRoaXMucG9zaXRpb24ueTtcclxuXHJcbiAgLy8gc2F2ZSBlbmQgcG9zaXRpb25cclxuICB0aGlzLnNldFBvc2l0aW9uKCB4LCB5ICk7XHJcblxyXG4gIC8vIGlmIGRpZCBub3QgbW92ZSBhbmQgbm90IHRyYW5zaXRpb25pbmcsIGp1c3QgZ28gdG8gbGF5b3V0XHJcbiAgaWYgKCBkaWROb3RNb3ZlICYmICF0aGlzLmlzVHJhbnNpdGlvbmluZyApIHtcclxuICAgIHRoaXMubGF5b3V0UG9zaXRpb24oKTtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIHZhciB0cmFuc1ggPSB4IC0gY3VyWDtcclxuICB2YXIgdHJhbnNZID0geSAtIGN1clk7XHJcbiAgdmFyIHRyYW5zaXRpb25TdHlsZSA9IHt9O1xyXG4gIHRyYW5zaXRpb25TdHlsZS50cmFuc2Zvcm0gPSB0aGlzLmdldFRyYW5zbGF0ZSggdHJhbnNYLCB0cmFuc1kgKTtcclxuXHJcbiAgdGhpcy50cmFuc2l0aW9uKHtcclxuICAgIHRvOiB0cmFuc2l0aW9uU3R5bGUsXHJcbiAgICBvblRyYW5zaXRpb25FbmQ6IHtcclxuICAgICAgdHJhbnNmb3JtOiB0aGlzLmxheW91dFBvc2l0aW9uXHJcbiAgICB9LFxyXG4gICAgaXNDbGVhbmluZzogdHJ1ZVxyXG4gIH0pO1xyXG59O1xyXG5cclxuSXRlbS5wcm90b3R5cGUuZ2V0VHJhbnNsYXRlID0gZnVuY3Rpb24oIHgsIHkgKSB7XHJcbiAgLy8gZmxpcCBjb29yaWRpbmF0ZXMgaWYgb3JpZ2luIG9uIHJpZ2h0IG9yIGJvdHRvbVxyXG4gIHZhciBsYXlvdXRPcHRpb25zID0gdGhpcy5sYXlvdXQub3B0aW9ucztcclxuICB4ID0gbGF5b3V0T3B0aW9ucy5pc09yaWdpbkxlZnQgPyB4IDogLXg7XHJcbiAgeSA9IGxheW91dE9wdGlvbnMuaXNPcmlnaW5Ub3AgPyB5IDogLXk7XHJcblxyXG4gIGlmICggaXMzZCApIHtcclxuICAgIHJldHVybiAndHJhbnNsYXRlM2QoJyArIHggKyAncHgsICcgKyB5ICsgJ3B4LCAwKSc7XHJcbiAgfVxyXG5cclxuICByZXR1cm4gJ3RyYW5zbGF0ZSgnICsgeCArICdweCwgJyArIHkgKyAncHgpJztcclxufTtcclxuXHJcbi8vIG5vbiB0cmFuc2l0aW9uICsgdHJhbnNmb3JtIHN1cHBvcnRcclxuSXRlbS5wcm90b3R5cGUuZ29UbyA9IGZ1bmN0aW9uKCB4LCB5ICkge1xyXG4gIHRoaXMuc2V0UG9zaXRpb24oIHgsIHkgKTtcclxuICB0aGlzLmxheW91dFBvc2l0aW9uKCk7XHJcbn07XHJcblxyXG4vLyB1c2UgdHJhbnNpdGlvbiBhbmQgdHJhbnNmb3JtcyBpZiBzdXBwb3J0ZWRcclxuSXRlbS5wcm90b3R5cGUubW92ZVRvID0gc3VwcG9ydHNDU1MzID9cclxuICBJdGVtLnByb3RvdHlwZS5fdHJhbnNpdGlvblRvIDogSXRlbS5wcm90b3R5cGUuZ29UbztcclxuXHJcbkl0ZW0ucHJvdG90eXBlLnNldFBvc2l0aW9uID0gZnVuY3Rpb24oIHgsIHkgKSB7XHJcbiAgdGhpcy5wb3NpdGlvbi54ID0gcGFyc2VJbnQoIHgsIDEwICk7XHJcbiAgdGhpcy5wb3NpdGlvbi55ID0gcGFyc2VJbnQoIHksIDEwICk7XHJcbn07XHJcblxyXG4vLyAtLS0tLSB0cmFuc2l0aW9uIC0tLS0tIC8vXHJcblxyXG4vKipcclxuICogQHBhcmFtIHtPYmplY3R9IHN0eWxlIC0gQ1NTXHJcbiAqIEBwYXJhbSB7RnVuY3Rpb259IG9uVHJhbnNpdGlvbkVuZFxyXG4gKi9cclxuXHJcbi8vIG5vbiB0cmFuc2l0aW9uLCBqdXN0IHRyaWdnZXIgY2FsbGJhY2tcclxuSXRlbS5wcm90b3R5cGUuX25vblRyYW5zaXRpb24gPSBmdW5jdGlvbiggYXJncyApIHtcclxuICB0aGlzLmNzcyggYXJncy50byApO1xyXG4gIGlmICggYXJncy5pc0NsZWFuaW5nICkge1xyXG4gICAgdGhpcy5fcmVtb3ZlU3R5bGVzKCBhcmdzLnRvICk7XHJcbiAgfVxyXG4gIGZvciAoIHZhciBwcm9wIGluIGFyZ3Mub25UcmFuc2l0aW9uRW5kICkge1xyXG4gICAgYXJncy5vblRyYW5zaXRpb25FbmRbIHByb3AgXS5jYWxsKCB0aGlzICk7XHJcbiAgfVxyXG59O1xyXG5cclxuLyoqXHJcbiAqIHByb3BlciB0cmFuc2l0aW9uXHJcbiAqIEBwYXJhbSB7T2JqZWN0fSBhcmdzIC0gYXJndW1lbnRzXHJcbiAqICAgQHBhcmFtIHtPYmplY3R9IHRvIC0gc3R5bGUgdG8gdHJhbnNpdGlvbiB0b1xyXG4gKiAgIEBwYXJhbSB7T2JqZWN0fSBmcm9tIC0gc3R5bGUgdG8gc3RhcnQgdHJhbnNpdGlvbiBmcm9tXHJcbiAqICAgQHBhcmFtIHtCb29sZWFufSBpc0NsZWFuaW5nIC0gcmVtb3ZlcyB0cmFuc2l0aW9uIHN0eWxlcyBhZnRlciB0cmFuc2l0aW9uXHJcbiAqICAgQHBhcmFtIHtGdW5jdGlvbn0gb25UcmFuc2l0aW9uRW5kIC0gY2FsbGJhY2tcclxuICovXHJcbkl0ZW0ucHJvdG90eXBlLl90cmFuc2l0aW9uID0gZnVuY3Rpb24oIGFyZ3MgKSB7XHJcbiAgLy8gcmVkaXJlY3QgdG8gbm9uVHJhbnNpdGlvbiBpZiBubyB0cmFuc2l0aW9uIGR1cmF0aW9uXHJcbiAgaWYgKCAhcGFyc2VGbG9hdCggdGhpcy5sYXlvdXQub3B0aW9ucy50cmFuc2l0aW9uRHVyYXRpb24gKSApIHtcclxuICAgIHRoaXMuX25vblRyYW5zaXRpb24oIGFyZ3MgKTtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIHZhciBfdHJhbnNpdGlvbiA9IHRoaXMuX3RyYW5zbjtcclxuICAvLyBrZWVwIHRyYWNrIG9mIG9uVHJhbnNpdGlvbkVuZCBjYWxsYmFjayBieSBjc3MgcHJvcGVydHlcclxuICBmb3IgKCB2YXIgcHJvcCBpbiBhcmdzLm9uVHJhbnNpdGlvbkVuZCApIHtcclxuICAgIF90cmFuc2l0aW9uLm9uRW5kWyBwcm9wIF0gPSBhcmdzLm9uVHJhbnNpdGlvbkVuZFsgcHJvcCBdO1xyXG4gIH1cclxuICAvLyBrZWVwIHRyYWNrIG9mIHByb3BlcnRpZXMgdGhhdCBhcmUgdHJhbnNpdGlvbmluZ1xyXG4gIGZvciAoIHByb3AgaW4gYXJncy50byApIHtcclxuICAgIF90cmFuc2l0aW9uLmluZ1Byb3BlcnRpZXNbIHByb3AgXSA9IHRydWU7XHJcbiAgICAvLyBrZWVwIHRyYWNrIG9mIHByb3BlcnRpZXMgdG8gY2xlYW4gdXAgd2hlbiB0cmFuc2l0aW9uIGlzIGRvbmVcclxuICAgIGlmICggYXJncy5pc0NsZWFuaW5nICkge1xyXG4gICAgICBfdHJhbnNpdGlvbi5jbGVhblsgcHJvcCBdID0gdHJ1ZTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8vIHNldCBmcm9tIHN0eWxlc1xyXG4gIGlmICggYXJncy5mcm9tICkge1xyXG4gICAgdGhpcy5jc3MoIGFyZ3MuZnJvbSApO1xyXG4gICAgLy8gZm9yY2UgcmVkcmF3LiBodHRwOi8vYmxvZy5hbGV4bWFjY2F3LmNvbS9jc3MtdHJhbnNpdGlvbnNcclxuICAgIHZhciBoID0gdGhpcy5lbGVtZW50Lm9mZnNldEhlaWdodDtcclxuICAgIC8vIGhhY2sgZm9yIEpTSGludCB0byBodXNoIGFib3V0IHVudXNlZCB2YXJcclxuICAgIGggPSBudWxsO1xyXG4gIH1cclxuICAvLyBlbmFibGUgdHJhbnNpdGlvblxyXG4gIHRoaXMuZW5hYmxlVHJhbnNpdGlvbiggYXJncy50byApO1xyXG4gIC8vIHNldCBzdHlsZXMgdGhhdCBhcmUgdHJhbnNpdGlvbmluZ1xyXG4gIHRoaXMuY3NzKCBhcmdzLnRvICk7XHJcblxyXG4gIHRoaXMuaXNUcmFuc2l0aW9uaW5nID0gdHJ1ZTtcclxuXHJcbn07XHJcblxyXG4vLyBkYXNoIGJlZm9yZSBhbGwgY2FwIGxldHRlcnMsIGluY2x1ZGluZyBmaXJzdCBmb3JcclxuLy8gV2Via2l0VHJhbnNmb3JtID0+IC13ZWJraXQtdHJhbnNmb3JtXHJcbmZ1bmN0aW9uIHRvRGFzaGVkQWxsKCBzdHIgKSB7XHJcbiAgcmV0dXJuIHN0ci5yZXBsYWNlKCAvKFtBLVpdKS9nLCBmdW5jdGlvbiggJDEgKSB7XHJcbiAgICByZXR1cm4gJy0nICsgJDEudG9Mb3dlckNhc2UoKTtcclxuICB9KTtcclxufVxyXG5cclxudmFyIHRyYW5zaXRpb25Qcm9wcyA9ICdvcGFjaXR5LCcgK1xyXG4gIHRvRGFzaGVkQWxsKCB2ZW5kb3JQcm9wZXJ0aWVzLnRyYW5zZm9ybSB8fCAndHJhbnNmb3JtJyApO1xyXG5cclxuSXRlbS5wcm90b3R5cGUuZW5hYmxlVHJhbnNpdGlvbiA9IGZ1bmN0aW9uKC8qIHN0eWxlICovKSB7XHJcbiAgLy8gSEFDSyBjaGFuZ2luZyB0cmFuc2l0aW9uUHJvcGVydHkgZHVyaW5nIGEgdHJhbnNpdGlvblxyXG4gIC8vIHdpbGwgY2F1c2UgdHJhbnNpdGlvbiB0byBqdW1wXHJcbiAgaWYgKCB0aGlzLmlzVHJhbnNpdGlvbmluZyApIHtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIC8vIG1ha2UgYHRyYW5zaXRpb246IGZvbywgYmFyLCBiYXpgIGZyb20gc3R5bGUgb2JqZWN0XHJcbiAgLy8gSEFDSyB1bi1jb21tZW50IHRoaXMgd2hlbiBlbmFibGVUcmFuc2l0aW9uIGNhbiB3b3JrXHJcbiAgLy8gd2hpbGUgYSB0cmFuc2l0aW9uIGlzIGhhcHBlbmluZ1xyXG4gIC8vIHZhciB0cmFuc2l0aW9uVmFsdWVzID0gW107XHJcbiAgLy8gZm9yICggdmFyIHByb3AgaW4gc3R5bGUgKSB7XHJcbiAgLy8gICAvLyBkYXNoLWlmeSBjYW1lbENhc2VkIHByb3BlcnRpZXMgbGlrZSBXZWJraXRUcmFuc2l0aW9uXHJcbiAgLy8gICBwcm9wID0gdmVuZG9yUHJvcGVydGllc1sgcHJvcCBdIHx8IHByb3A7XHJcbiAgLy8gICB0cmFuc2l0aW9uVmFsdWVzLnB1c2goIHRvRGFzaGVkQWxsKCBwcm9wICkgKTtcclxuICAvLyB9XHJcbiAgLy8gZW5hYmxlIHRyYW5zaXRpb24gc3R5bGVzXHJcbiAgdGhpcy5jc3Moe1xyXG4gICAgdHJhbnNpdGlvblByb3BlcnR5OiB0cmFuc2l0aW9uUHJvcHMsXHJcbiAgICB0cmFuc2l0aW9uRHVyYXRpb246IHRoaXMubGF5b3V0Lm9wdGlvbnMudHJhbnNpdGlvbkR1cmF0aW9uXHJcbiAgfSk7XHJcbiAgLy8gbGlzdGVuIGZvciB0cmFuc2l0aW9uIGVuZCBldmVudFxyXG4gIHRoaXMuZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCB0cmFuc2l0aW9uRW5kRXZlbnQsIHRoaXMsIGZhbHNlICk7XHJcbn07XHJcblxyXG5JdGVtLnByb3RvdHlwZS50cmFuc2l0aW9uID0gSXRlbS5wcm90b3R5cGVbIHRyYW5zaXRpb25Qcm9wZXJ0eSA/ICdfdHJhbnNpdGlvbicgOiAnX25vblRyYW5zaXRpb24nIF07XHJcblxyXG4vLyAtLS0tLSBldmVudHMgLS0tLS0gLy9cclxuXHJcbkl0ZW0ucHJvdG90eXBlLm9ud2Via2l0VHJhbnNpdGlvbkVuZCA9IGZ1bmN0aW9uKCBldmVudCApIHtcclxuICB0aGlzLm9udHJhbnNpdGlvbmVuZCggZXZlbnQgKTtcclxufTtcclxuXHJcbkl0ZW0ucHJvdG90eXBlLm9ub3RyYW5zaXRpb25lbmQgPSBmdW5jdGlvbiggZXZlbnQgKSB7XHJcbiAgdGhpcy5vbnRyYW5zaXRpb25lbmQoIGV2ZW50ICk7XHJcbn07XHJcblxyXG4vLyBwcm9wZXJ0aWVzIHRoYXQgSSBtdW5nZSB0byBtYWtlIG15IGxpZmUgZWFzaWVyXHJcbnZhciBkYXNoZWRWZW5kb3JQcm9wZXJ0aWVzID0ge1xyXG4gICctd2Via2l0LXRyYW5zZm9ybSc6ICd0cmFuc2Zvcm0nLFxyXG4gICctbW96LXRyYW5zZm9ybSc6ICd0cmFuc2Zvcm0nLFxyXG4gICctby10cmFuc2Zvcm0nOiAndHJhbnNmb3JtJ1xyXG59O1xyXG5cclxuSXRlbS5wcm90b3R5cGUub250cmFuc2l0aW9uZW5kID0gZnVuY3Rpb24oIGV2ZW50ICkge1xyXG4gIC8vIGRpc3JlZ2FyZCBidWJibGVkIGV2ZW50cyBmcm9tIGNoaWxkcmVuXHJcbiAgaWYgKCBldmVudC50YXJnZXQgIT09IHRoaXMuZWxlbWVudCApIHtcclxuICAgIHJldHVybjtcclxuICB9XHJcbiAgdmFyIF90cmFuc2l0aW9uID0gdGhpcy5fdHJhbnNuO1xyXG4gIC8vIGdldCBwcm9wZXJ0eSBuYW1lIG9mIHRyYW5zaXRpb25lZCBwcm9wZXJ0eSwgY29udmVydCB0byBwcmVmaXgtZnJlZVxyXG4gIHZhciBwcm9wZXJ0eU5hbWUgPSBkYXNoZWRWZW5kb3JQcm9wZXJ0aWVzWyBldmVudC5wcm9wZXJ0eU5hbWUgXSB8fCBldmVudC5wcm9wZXJ0eU5hbWU7XHJcblxyXG4gIC8vIHJlbW92ZSBwcm9wZXJ0eSB0aGF0IGhhcyBjb21wbGV0ZWQgdHJhbnNpdGlvbmluZ1xyXG4gIGRlbGV0ZSBfdHJhbnNpdGlvbi5pbmdQcm9wZXJ0aWVzWyBwcm9wZXJ0eU5hbWUgXTtcclxuICAvLyBjaGVjayBpZiBhbnkgcHJvcGVydGllcyBhcmUgc3RpbGwgdHJhbnNpdGlvbmluZ1xyXG4gIGlmICggaXNFbXB0eU9iaiggX3RyYW5zaXRpb24uaW5nUHJvcGVydGllcyApICkge1xyXG4gICAgLy8gYWxsIHByb3BlcnRpZXMgaGF2ZSBjb21wbGV0ZWQgdHJhbnNpdGlvbmluZ1xyXG4gICAgdGhpcy5kaXNhYmxlVHJhbnNpdGlvbigpO1xyXG4gIH1cclxuICAvLyBjbGVhbiBzdHlsZVxyXG4gIGlmICggcHJvcGVydHlOYW1lIGluIF90cmFuc2l0aW9uLmNsZWFuICkge1xyXG4gICAgLy8gY2xlYW4gdXAgc3R5bGVcclxuICAgIHRoaXMuZWxlbWVudC5zdHlsZVsgZXZlbnQucHJvcGVydHlOYW1lIF0gPSAnJztcclxuICAgIGRlbGV0ZSBfdHJhbnNpdGlvbi5jbGVhblsgcHJvcGVydHlOYW1lIF07XHJcbiAgfVxyXG4gIC8vIHRyaWdnZXIgb25UcmFuc2l0aW9uRW5kIGNhbGxiYWNrXHJcbiAgaWYgKCBwcm9wZXJ0eU5hbWUgaW4gX3RyYW5zaXRpb24ub25FbmQgKSB7XHJcbiAgICB2YXIgb25UcmFuc2l0aW9uRW5kID0gX3RyYW5zaXRpb24ub25FbmRbIHByb3BlcnR5TmFtZSBdO1xyXG4gICAgb25UcmFuc2l0aW9uRW5kLmNhbGwoIHRoaXMgKTtcclxuICAgIGRlbGV0ZSBfdHJhbnNpdGlvbi5vbkVuZFsgcHJvcGVydHlOYW1lIF07XHJcbiAgfVxyXG5cclxuICB0aGlzLmVtaXRFdmVudCggJ3RyYW5zaXRpb25FbmQnLCBbIHRoaXMgXSApO1xyXG59O1xyXG5cclxuSXRlbS5wcm90b3R5cGUuZGlzYWJsZVRyYW5zaXRpb24gPSBmdW5jdGlvbigpIHtcclxuICB0aGlzLnJlbW92ZVRyYW5zaXRpb25TdHlsZXMoKTtcclxuICB0aGlzLmVsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lciggdHJhbnNpdGlvbkVuZEV2ZW50LCB0aGlzLCBmYWxzZSApO1xyXG4gIHRoaXMuaXNUcmFuc2l0aW9uaW5nID0gZmFsc2U7XHJcbn07XHJcblxyXG4vKipcclxuICogcmVtb3ZlcyBzdHlsZSBwcm9wZXJ0eSBmcm9tIGVsZW1lbnRcclxuICogQHBhcmFtIHtPYmplY3R9IHN0eWxlXHJcbioqL1xyXG5JdGVtLnByb3RvdHlwZS5fcmVtb3ZlU3R5bGVzID0gZnVuY3Rpb24oIHN0eWxlICkge1xyXG4gIC8vIGNsZWFuIHVwIHRyYW5zaXRpb24gc3R5bGVzXHJcbiAgdmFyIGNsZWFuU3R5bGUgPSB7fTtcclxuICBmb3IgKCB2YXIgcHJvcCBpbiBzdHlsZSApIHtcclxuICAgIGNsZWFuU3R5bGVbIHByb3AgXSA9ICcnO1xyXG4gIH1cclxuICB0aGlzLmNzcyggY2xlYW5TdHlsZSApO1xyXG59O1xyXG5cclxudmFyIGNsZWFuVHJhbnNpdGlvblN0eWxlID0ge1xyXG4gIHRyYW5zaXRpb25Qcm9wZXJ0eTogJycsXHJcbiAgdHJhbnNpdGlvbkR1cmF0aW9uOiAnJ1xyXG59O1xyXG5cclxuSXRlbS5wcm90b3R5cGUucmVtb3ZlVHJhbnNpdGlvblN0eWxlcyA9IGZ1bmN0aW9uKCkge1xyXG4gIC8vIHJlbW92ZSB0cmFuc2l0aW9uXHJcbiAgdGhpcy5jc3MoIGNsZWFuVHJhbnNpdGlvblN0eWxlICk7XHJcbn07XHJcblxyXG4vLyAtLS0tLSBzaG93L2hpZGUvcmVtb3ZlIC0tLS0tIC8vXHJcblxyXG4vLyByZW1vdmUgZWxlbWVudCBmcm9tIERPTVxyXG5JdGVtLnByb3RvdHlwZS5yZW1vdmVFbGVtID0gZnVuY3Rpb24oKSB7XHJcbiAgdGhpcy5lbGVtZW50LnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoIHRoaXMuZWxlbWVudCApO1xyXG4gIC8vIHJlbW92ZSBkaXNwbGF5OiBub25lXHJcbiAgdGhpcy5jc3MoeyBkaXNwbGF5OiAnJyB9KTtcclxuICB0aGlzLmVtaXRFdmVudCggJ3JlbW92ZScsIFsgdGhpcyBdICk7XHJcbn07XHJcblxyXG5JdGVtLnByb3RvdHlwZS5yZW1vdmUgPSBmdW5jdGlvbigpIHtcclxuICAvLyBqdXN0IHJlbW92ZSBlbGVtZW50IGlmIG5vIHRyYW5zaXRpb24gc3VwcG9ydCBvciBubyB0cmFuc2l0aW9uXHJcbiAgaWYgKCAhdHJhbnNpdGlvblByb3BlcnR5IHx8ICFwYXJzZUZsb2F0KCB0aGlzLmxheW91dC5vcHRpb25zLnRyYW5zaXRpb25EdXJhdGlvbiApICkge1xyXG4gICAgdGhpcy5yZW1vdmVFbGVtKCk7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICAvLyBzdGFydCB0cmFuc2l0aW9uXHJcbiAgdmFyIF90aGlzID0gdGhpcztcclxuICB0aGlzLm9uY2UoICd0cmFuc2l0aW9uRW5kJywgZnVuY3Rpb24oKSB7XHJcbiAgICBfdGhpcy5yZW1vdmVFbGVtKCk7XHJcbiAgfSk7XHJcbiAgdGhpcy5oaWRlKCk7XHJcbn07XHJcblxyXG5JdGVtLnByb3RvdHlwZS5yZXZlYWwgPSBmdW5jdGlvbigpIHtcclxuICBkZWxldGUgdGhpcy5pc0hpZGRlbjtcclxuICAvLyByZW1vdmUgZGlzcGxheTogbm9uZVxyXG4gIHRoaXMuY3NzKHsgZGlzcGxheTogJycgfSk7XHJcblxyXG4gIHZhciBvcHRpb25zID0gdGhpcy5sYXlvdXQub3B0aW9ucztcclxuXHJcbiAgdmFyIG9uVHJhbnNpdGlvbkVuZCA9IHt9O1xyXG4gIHZhciB0cmFuc2l0aW9uRW5kUHJvcGVydHkgPSB0aGlzLmdldEhpZGVSZXZlYWxUcmFuc2l0aW9uRW5kUHJvcGVydHkoJ3Zpc2libGVTdHlsZScpO1xyXG4gIG9uVHJhbnNpdGlvbkVuZFsgdHJhbnNpdGlvbkVuZFByb3BlcnR5IF0gPSB0aGlzLm9uUmV2ZWFsVHJhbnNpdGlvbkVuZDtcclxuXHJcbiAgdGhpcy50cmFuc2l0aW9uKHtcclxuICAgIGZyb206IG9wdGlvbnMuaGlkZGVuU3R5bGUsXHJcbiAgICB0bzogb3B0aW9ucy52aXNpYmxlU3R5bGUsXHJcbiAgICBpc0NsZWFuaW5nOiB0cnVlLFxyXG4gICAgb25UcmFuc2l0aW9uRW5kOiBvblRyYW5zaXRpb25FbmRcclxuICB9KTtcclxufTtcclxuXHJcbkl0ZW0ucHJvdG90eXBlLm9uUmV2ZWFsVHJhbnNpdGlvbkVuZCA9IGZ1bmN0aW9uKCkge1xyXG4gIC8vIGNoZWNrIGlmIHN0aWxsIHZpc2libGVcclxuICAvLyBkdXJpbmcgdHJhbnNpdGlvbiwgaXRlbSBtYXkgaGF2ZSBiZWVuIGhpZGRlblxyXG4gIGlmICggIXRoaXMuaXNIaWRkZW4gKSB7XHJcbiAgICB0aGlzLmVtaXRFdmVudCgncmV2ZWFsJyk7XHJcbiAgfVxyXG59O1xyXG5cclxuLyoqXHJcbiAqIGdldCBzdHlsZSBwcm9wZXJ0eSB1c2UgZm9yIGhpZGUvcmV2ZWFsIHRyYW5zaXRpb24gZW5kXHJcbiAqIEBwYXJhbSB7U3RyaW5nfSBzdHlsZVByb3BlcnR5IC0gaGlkZGVuU3R5bGUvdmlzaWJsZVN0eWxlXHJcbiAqIEByZXR1cm5zIHtTdHJpbmd9XHJcbiAqL1xyXG5JdGVtLnByb3RvdHlwZS5nZXRIaWRlUmV2ZWFsVHJhbnNpdGlvbkVuZFByb3BlcnR5ID0gZnVuY3Rpb24oIHN0eWxlUHJvcGVydHkgKSB7XHJcbiAgdmFyIG9wdGlvblN0eWxlID0gdGhpcy5sYXlvdXQub3B0aW9uc1sgc3R5bGVQcm9wZXJ0eSBdO1xyXG4gIC8vIHVzZSBvcGFjaXR5XHJcbiAgaWYgKCBvcHRpb25TdHlsZS5vcGFjaXR5ICkge1xyXG4gICAgcmV0dXJuICdvcGFjaXR5JztcclxuICB9XHJcbiAgLy8gZ2V0IGZpcnN0IHByb3BlcnR5XHJcbiAgZm9yICggdmFyIHByb3AgaW4gb3B0aW9uU3R5bGUgKSB7XHJcbiAgICByZXR1cm4gcHJvcDtcclxuICB9XHJcbn07XHJcblxyXG5JdGVtLnByb3RvdHlwZS5oaWRlID0gZnVuY3Rpb24oKSB7XHJcbiAgLy8gc2V0IGZsYWdcclxuICB0aGlzLmlzSGlkZGVuID0gdHJ1ZTtcclxuICAvLyByZW1vdmUgZGlzcGxheTogbm9uZVxyXG4gIHRoaXMuY3NzKHsgZGlzcGxheTogJycgfSk7XHJcblxyXG4gIHZhciBvcHRpb25zID0gdGhpcy5sYXlvdXQub3B0aW9ucztcclxuXHJcbiAgdmFyIG9uVHJhbnNpdGlvbkVuZCA9IHt9O1xyXG4gIHZhciB0cmFuc2l0aW9uRW5kUHJvcGVydHkgPSB0aGlzLmdldEhpZGVSZXZlYWxUcmFuc2l0aW9uRW5kUHJvcGVydHkoJ2hpZGRlblN0eWxlJyk7XHJcbiAgb25UcmFuc2l0aW9uRW5kWyB0cmFuc2l0aW9uRW5kUHJvcGVydHkgXSA9IHRoaXMub25IaWRlVHJhbnNpdGlvbkVuZDtcclxuXHJcbiAgdGhpcy50cmFuc2l0aW9uKHtcclxuICAgIGZyb206IG9wdGlvbnMudmlzaWJsZVN0eWxlLFxyXG4gICAgdG86IG9wdGlvbnMuaGlkZGVuU3R5bGUsXHJcbiAgICAvLyBrZWVwIGhpZGRlbiBzdHVmZiBoaWRkZW5cclxuICAgIGlzQ2xlYW5pbmc6IHRydWUsXHJcbiAgICBvblRyYW5zaXRpb25FbmQ6IG9uVHJhbnNpdGlvbkVuZFxyXG4gIH0pO1xyXG59O1xyXG5cclxuSXRlbS5wcm90b3R5cGUub25IaWRlVHJhbnNpdGlvbkVuZCA9IGZ1bmN0aW9uKCkge1xyXG4gIC8vIGNoZWNrIGlmIHN0aWxsIGhpZGRlblxyXG4gIC8vIGR1cmluZyB0cmFuc2l0aW9uLCBpdGVtIG1heSBoYXZlIGJlZW4gdW4taGlkZGVuXHJcbiAgaWYgKCB0aGlzLmlzSGlkZGVuICkge1xyXG4gICAgdGhpcy5jc3MoeyBkaXNwbGF5OiAnbm9uZScgfSk7XHJcbiAgICB0aGlzLmVtaXRFdmVudCgnaGlkZScpO1xyXG4gIH1cclxufTtcclxuXHJcbkl0ZW0ucHJvdG90eXBlLmRlc3Ryb3kgPSBmdW5jdGlvbigpIHtcclxuICB0aGlzLmNzcyh7XHJcbiAgICBwb3NpdGlvbjogJycsXHJcbiAgICBsZWZ0OiAnJyxcclxuICAgIHJpZ2h0OiAnJyxcclxuICAgIHRvcDogJycsXHJcbiAgICBib3R0b206ICcnLFxyXG4gICAgdHJhbnNpdGlvbjogJycsXHJcbiAgICB0cmFuc2Zvcm06ICcnXHJcbiAgfSk7XHJcbn07XHJcblxyXG5yZXR1cm4gSXRlbTtcclxuXHJcbn0pKTtcclxuXHJcbi8qIVxyXG4gKiBPdXRsYXllciB2MS40LjJcclxuICogdGhlIGJyYWlucyBhbmQgZ3V0cyBvZiBhIGxheW91dCBsaWJyYXJ5XHJcbiAqIE1JVCBsaWNlbnNlXHJcbiAqL1xyXG5cclxuKCBmdW5jdGlvbiggd2luZG93LCBmYWN0b3J5ICkge1xyXG4gICd1c2Ugc3RyaWN0JztcclxuICAvLyB1bml2ZXJzYWwgbW9kdWxlIGRlZmluaXRpb25cclxuXHJcbiAgaWYgKCB0eXBlb2YgZGVmaW5lID09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCApIHtcclxuICAgIC8vIEFNRFxyXG4gICAgZGVmaW5lKCAnb3V0bGF5ZXIvb3V0bGF5ZXInLFtcclxuICAgICAgICAnZXZlbnRpZS9ldmVudGllJyxcclxuICAgICAgICAnZXZlbnRFbWl0dGVyL0V2ZW50RW1pdHRlcicsXHJcbiAgICAgICAgJ2dldC1zaXplL2dldC1zaXplJyxcclxuICAgICAgICAnZml6enktdWktdXRpbHMvdXRpbHMnLFxyXG4gICAgICAgICcuL2l0ZW0nXHJcbiAgICAgIF0sXHJcbiAgICAgIGZ1bmN0aW9uKCBldmVudGllLCBFdmVudEVtaXR0ZXIsIGdldFNpemUsIHV0aWxzLCBJdGVtICkge1xyXG4gICAgICAgIHJldHVybiBmYWN0b3J5KCB3aW5kb3csIGV2ZW50aWUsIEV2ZW50RW1pdHRlciwgZ2V0U2l6ZSwgdXRpbHMsIEl0ZW0pO1xyXG4gICAgICB9XHJcbiAgICApO1xyXG4gIH0gZWxzZSBpZiAoIHR5cGVvZiBleHBvcnRzID09ICdvYmplY3QnICkge1xyXG4gICAgLy8gQ29tbW9uSlNcclxuICAgIG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeShcclxuICAgICAgd2luZG93LFxyXG4gICAgICByZXF1aXJlKCdldmVudGllJyksXHJcbiAgICAgIHJlcXVpcmUoJ3dvbGZ5ODctZXZlbnRlbWl0dGVyJyksXHJcbiAgICAgIHJlcXVpcmUoJ2dldC1zaXplJyksXHJcbiAgICAgIHJlcXVpcmUoJ2Zpenp5LXVpLXV0aWxzJyksXHJcbiAgICAgIHJlcXVpcmUoJy4vaXRlbScpXHJcbiAgICApO1xyXG4gIH0gZWxzZSB7XHJcbiAgICAvLyBicm93c2VyIGdsb2JhbFxyXG4gICAgd2luZG93Lk91dGxheWVyID0gZmFjdG9yeShcclxuICAgICAgd2luZG93LFxyXG4gICAgICB3aW5kb3cuZXZlbnRpZSxcclxuICAgICAgd2luZG93LkV2ZW50RW1pdHRlcixcclxuICAgICAgd2luZG93LmdldFNpemUsXHJcbiAgICAgIHdpbmRvdy5maXp6eVVJVXRpbHMsXHJcbiAgICAgIHdpbmRvdy5PdXRsYXllci5JdGVtXHJcbiAgICApO1xyXG4gIH1cclxuXHJcbn0oIHdpbmRvdywgZnVuY3Rpb24gZmFjdG9yeSggd2luZG93LCBldmVudGllLCBFdmVudEVtaXR0ZXIsIGdldFNpemUsIHV0aWxzLCBJdGVtICkge1xyXG4ndXNlIHN0cmljdCc7XHJcblxyXG4vLyAtLS0tLSB2YXJzIC0tLS0tIC8vXHJcblxyXG52YXIgY29uc29sZSA9IHdpbmRvdy5jb25zb2xlO1xyXG52YXIgalF1ZXJ5ID0gd2luZG93LmpRdWVyeTtcclxudmFyIG5vb3AgPSBmdW5jdGlvbigpIHt9O1xyXG5cclxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gT3V0bGF5ZXIgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gLy9cclxuXHJcbi8vIGdsb2JhbGx5IHVuaXF1ZSBpZGVudGlmaWVyc1xyXG52YXIgR1VJRCA9IDA7XHJcbi8vIGludGVybmFsIHN0b3JlIG9mIGFsbCBPdXRsYXllciBpbnRhbmNlc1xyXG52YXIgaW5zdGFuY2VzID0ge307XHJcblxyXG5cclxuLyoqXHJcbiAqIEBwYXJhbSB7RWxlbWVudCwgU3RyaW5nfSBlbGVtZW50XHJcbiAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zXHJcbiAqIEBjb25zdHJ1Y3RvclxyXG4gKi9cclxuZnVuY3Rpb24gT3V0bGF5ZXIoIGVsZW1lbnQsIG9wdGlvbnMgKSB7XHJcbiAgdmFyIHF1ZXJ5RWxlbWVudCA9IHV0aWxzLmdldFF1ZXJ5RWxlbWVudCggZWxlbWVudCApO1xyXG4gIGlmICggIXF1ZXJ5RWxlbWVudCApIHtcclxuICAgIGlmICggY29uc29sZSApIHtcclxuICAgICAgY29uc29sZS5lcnJvciggJ0JhZCBlbGVtZW50IGZvciAnICsgdGhpcy5jb25zdHJ1Y3Rvci5uYW1lc3BhY2UgK1xyXG4gICAgICAgICc6ICcgKyAoIHF1ZXJ5RWxlbWVudCB8fCBlbGVtZW50ICkgKTtcclxuICAgIH1cclxuICAgIHJldHVybjtcclxuICB9XHJcbiAgdGhpcy5lbGVtZW50ID0gcXVlcnlFbGVtZW50O1xyXG4gIC8vIGFkZCBqUXVlcnlcclxuICBpZiAoIGpRdWVyeSApIHtcclxuICAgIHRoaXMuJGVsZW1lbnQgPSBqUXVlcnkoIHRoaXMuZWxlbWVudCApO1xyXG4gIH1cclxuXHJcbiAgLy8gb3B0aW9uc1xyXG4gIHRoaXMub3B0aW9ucyA9IHV0aWxzLmV4dGVuZCgge30sIHRoaXMuY29uc3RydWN0b3IuZGVmYXVsdHMgKTtcclxuICB0aGlzLm9wdGlvbiggb3B0aW9ucyApO1xyXG5cclxuICAvLyBhZGQgaWQgZm9yIE91dGxheWVyLmdldEZyb21FbGVtZW50XHJcbiAgdmFyIGlkID0gKytHVUlEO1xyXG4gIHRoaXMuZWxlbWVudC5vdXRsYXllckdVSUQgPSBpZDsgLy8gZXhwYW5kb1xyXG4gIGluc3RhbmNlc1sgaWQgXSA9IHRoaXM7IC8vIGFzc29jaWF0ZSB2aWEgaWRcclxuXHJcbiAgLy8ga2ljayBpdCBvZmZcclxuICB0aGlzLl9jcmVhdGUoKTtcclxuXHJcbiAgaWYgKCB0aGlzLm9wdGlvbnMuaXNJbml0TGF5b3V0ICkge1xyXG4gICAgdGhpcy5sYXlvdXQoKTtcclxuICB9XHJcbn1cclxuXHJcbi8vIHNldHRpbmdzIGFyZSBmb3IgaW50ZXJuYWwgdXNlIG9ubHlcclxuT3V0bGF5ZXIubmFtZXNwYWNlID0gJ291dGxheWVyJztcclxuT3V0bGF5ZXIuSXRlbSA9IEl0ZW07XHJcblxyXG4vLyBkZWZhdWx0IG9wdGlvbnNcclxuT3V0bGF5ZXIuZGVmYXVsdHMgPSB7XHJcbiAgY29udGFpbmVyU3R5bGU6IHtcclxuICAgIHBvc2l0aW9uOiAncmVsYXRpdmUnXHJcbiAgfSxcclxuICBpc0luaXRMYXlvdXQ6IHRydWUsXHJcbiAgaXNPcmlnaW5MZWZ0OiB0cnVlLFxyXG4gIGlzT3JpZ2luVG9wOiB0cnVlLFxyXG4gIGlzUmVzaXplQm91bmQ6IHRydWUsXHJcbiAgaXNSZXNpemluZ0NvbnRhaW5lcjogdHJ1ZSxcclxuICAvLyBpdGVtIG9wdGlvbnNcclxuICB0cmFuc2l0aW9uRHVyYXRpb246ICcwLjRzJyxcclxuICBoaWRkZW5TdHlsZToge1xyXG4gICAgb3BhY2l0eTogMCxcclxuICAgIHRyYW5zZm9ybTogJ3NjYWxlKDAuMDAxKSdcclxuICB9LFxyXG4gIHZpc2libGVTdHlsZToge1xyXG4gICAgb3BhY2l0eTogMSxcclxuICAgIHRyYW5zZm9ybTogJ3NjYWxlKDEpJ1xyXG4gIH1cclxufTtcclxuXHJcbi8vIGluaGVyaXQgRXZlbnRFbWl0dGVyXHJcbnV0aWxzLmV4dGVuZCggT3V0bGF5ZXIucHJvdG90eXBlLCBFdmVudEVtaXR0ZXIucHJvdG90eXBlICk7XHJcblxyXG4vKipcclxuICogc2V0IG9wdGlvbnNcclxuICogQHBhcmFtIHtPYmplY3R9IG9wdHNcclxuICovXHJcbk91dGxheWVyLnByb3RvdHlwZS5vcHRpb24gPSBmdW5jdGlvbiggb3B0cyApIHtcclxuICB1dGlscy5leHRlbmQoIHRoaXMub3B0aW9ucywgb3B0cyApO1xyXG59O1xyXG5cclxuT3V0bGF5ZXIucHJvdG90eXBlLl9jcmVhdGUgPSBmdW5jdGlvbigpIHtcclxuICAvLyBnZXQgaXRlbXMgZnJvbSBjaGlsZHJlblxyXG4gIHRoaXMucmVsb2FkSXRlbXMoKTtcclxuICAvLyBlbGVtZW50cyB0aGF0IGFmZmVjdCBsYXlvdXQsIGJ1dCBhcmUgbm90IGxhaWQgb3V0XHJcbiAgdGhpcy5zdGFtcHMgPSBbXTtcclxuICB0aGlzLnN0YW1wKCB0aGlzLm9wdGlvbnMuc3RhbXAgKTtcclxuICAvLyBzZXQgY29udGFpbmVyIHN0eWxlXHJcbiAgdXRpbHMuZXh0ZW5kKCB0aGlzLmVsZW1lbnQuc3R5bGUsIHRoaXMub3B0aW9ucy5jb250YWluZXJTdHlsZSApO1xyXG5cclxuICAvLyBiaW5kIHJlc2l6ZSBtZXRob2RcclxuICBpZiAoIHRoaXMub3B0aW9ucy5pc1Jlc2l6ZUJvdW5kICkge1xyXG4gICAgdGhpcy5iaW5kUmVzaXplKCk7XHJcbiAgfVxyXG59O1xyXG5cclxuLy8gZ29lcyB0aHJvdWdoIGFsbCBjaGlsZHJlbiBhZ2FpbiBhbmQgZ2V0cyBicmlja3MgaW4gcHJvcGVyIG9yZGVyXHJcbk91dGxheWVyLnByb3RvdHlwZS5yZWxvYWRJdGVtcyA9IGZ1bmN0aW9uKCkge1xyXG4gIC8vIGNvbGxlY3Rpb24gb2YgaXRlbSBlbGVtZW50c1xyXG4gIHRoaXMuaXRlbXMgPSB0aGlzLl9pdGVtaXplKCB0aGlzLmVsZW1lbnQuY2hpbGRyZW4gKTtcclxufTtcclxuXHJcblxyXG4vKipcclxuICogdHVybiBlbGVtZW50cyBpbnRvIE91dGxheWVyLkl0ZW1zIHRvIGJlIHVzZWQgaW4gbGF5b3V0XHJcbiAqIEBwYXJhbSB7QXJyYXkgb3IgTm9kZUxpc3Qgb3IgSFRNTEVsZW1lbnR9IGVsZW1zXHJcbiAqIEByZXR1cm5zIHtBcnJheX0gaXRlbXMgLSBjb2xsZWN0aW9uIG9mIG5ldyBPdXRsYXllciBJdGVtc1xyXG4gKi9cclxuT3V0bGF5ZXIucHJvdG90eXBlLl9pdGVtaXplID0gZnVuY3Rpb24oIGVsZW1zICkge1xyXG5cclxuICB2YXIgaXRlbUVsZW1zID0gdGhpcy5fZmlsdGVyRmluZEl0ZW1FbGVtZW50cyggZWxlbXMgKTtcclxuICB2YXIgSXRlbSA9IHRoaXMuY29uc3RydWN0b3IuSXRlbTtcclxuXHJcbiAgLy8gY3JlYXRlIG5ldyBPdXRsYXllciBJdGVtcyBmb3IgY29sbGVjdGlvblxyXG4gIHZhciBpdGVtcyA9IFtdO1xyXG4gIGZvciAoIHZhciBpPTAsIGxlbiA9IGl0ZW1FbGVtcy5sZW5ndGg7IGkgPCBsZW47IGkrKyApIHtcclxuICAgIHZhciBlbGVtID0gaXRlbUVsZW1zW2ldO1xyXG4gICAgdmFyIGl0ZW0gPSBuZXcgSXRlbSggZWxlbSwgdGhpcyApO1xyXG4gICAgaXRlbXMucHVzaCggaXRlbSApO1xyXG4gIH1cclxuXHJcbiAgcmV0dXJuIGl0ZW1zO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIGdldCBpdGVtIGVsZW1lbnRzIHRvIGJlIHVzZWQgaW4gbGF5b3V0XHJcbiAqIEBwYXJhbSB7QXJyYXkgb3IgTm9kZUxpc3Qgb3IgSFRNTEVsZW1lbnR9IGVsZW1zXHJcbiAqIEByZXR1cm5zIHtBcnJheX0gaXRlbXMgLSBpdGVtIGVsZW1lbnRzXHJcbiAqL1xyXG5PdXRsYXllci5wcm90b3R5cGUuX2ZpbHRlckZpbmRJdGVtRWxlbWVudHMgPSBmdW5jdGlvbiggZWxlbXMgKSB7XHJcbiAgcmV0dXJuIHV0aWxzLmZpbHRlckZpbmRFbGVtZW50cyggZWxlbXMsIHRoaXMub3B0aW9ucy5pdGVtU2VsZWN0b3IgKTtcclxufTtcclxuXHJcbi8qKlxyXG4gKiBnZXR0ZXIgbWV0aG9kIGZvciBnZXR0aW5nIGl0ZW0gZWxlbWVudHNcclxuICogQHJldHVybnMge0FycmF5fSBlbGVtcyAtIGNvbGxlY3Rpb24gb2YgaXRlbSBlbGVtZW50c1xyXG4gKi9cclxuT3V0bGF5ZXIucHJvdG90eXBlLmdldEl0ZW1FbGVtZW50cyA9IGZ1bmN0aW9uKCkge1xyXG4gIHZhciBlbGVtcyA9IFtdO1xyXG4gIGZvciAoIHZhciBpPTAsIGxlbiA9IHRoaXMuaXRlbXMubGVuZ3RoOyBpIDwgbGVuOyBpKysgKSB7XHJcbiAgICBlbGVtcy5wdXNoKCB0aGlzLml0ZW1zW2ldLmVsZW1lbnQgKTtcclxuICB9XHJcbiAgcmV0dXJuIGVsZW1zO1xyXG59O1xyXG5cclxuLy8gLS0tLS0gaW5pdCAmIGxheW91dCAtLS0tLSAvL1xyXG5cclxuLyoqXHJcbiAqIGxheXMgb3V0IGFsbCBpdGVtc1xyXG4gKi9cclxuT3V0bGF5ZXIucHJvdG90eXBlLmxheW91dCA9IGZ1bmN0aW9uKCkge1xyXG4gIHRoaXMuX3Jlc2V0TGF5b3V0KCk7XHJcbiAgdGhpcy5fbWFuYWdlU3RhbXBzKCk7XHJcblxyXG4gIC8vIGRvbid0IGFuaW1hdGUgZmlyc3QgbGF5b3V0XHJcbiAgdmFyIGlzSW5zdGFudCA9IHRoaXMub3B0aW9ucy5pc0xheW91dEluc3RhbnQgIT09IHVuZGVmaW5lZCA/XHJcbiAgICB0aGlzLm9wdGlvbnMuaXNMYXlvdXRJbnN0YW50IDogIXRoaXMuX2lzTGF5b3V0SW5pdGVkO1xyXG4gIHRoaXMubGF5b3V0SXRlbXMoIHRoaXMuaXRlbXMsIGlzSW5zdGFudCApO1xyXG5cclxuICAvLyBmbGFnIGZvciBpbml0YWxpemVkXHJcbiAgdGhpcy5faXNMYXlvdXRJbml0ZWQgPSB0cnVlO1xyXG59O1xyXG5cclxuLy8gX2luaXQgaXMgYWxpYXMgZm9yIGxheW91dFxyXG5PdXRsYXllci5wcm90b3R5cGUuX2luaXQgPSBPdXRsYXllci5wcm90b3R5cGUubGF5b3V0O1xyXG5cclxuLyoqXHJcbiAqIGxvZ2ljIGJlZm9yZSBhbnkgbmV3IGxheW91dFxyXG4gKi9cclxuT3V0bGF5ZXIucHJvdG90eXBlLl9yZXNldExheW91dCA9IGZ1bmN0aW9uKCkge1xyXG4gIHRoaXMuZ2V0U2l6ZSgpO1xyXG59O1xyXG5cclxuXHJcbk91dGxheWVyLnByb3RvdHlwZS5nZXRTaXplID0gZnVuY3Rpb24oKSB7XHJcbiAgdGhpcy5zaXplID0gZ2V0U2l6ZSggdGhpcy5lbGVtZW50ICk7XHJcbn07XHJcblxyXG4vKipcclxuICogZ2V0IG1lYXN1cmVtZW50IGZyb20gb3B0aW9uLCBmb3IgY29sdW1uV2lkdGgsIHJvd0hlaWdodCwgZ3V0dGVyXHJcbiAqIGlmIG9wdGlvbiBpcyBTdHJpbmcgLT4gZ2V0IGVsZW1lbnQgZnJvbSBzZWxlY3RvciBzdHJpbmcsICYgZ2V0IHNpemUgb2YgZWxlbWVudFxyXG4gKiBpZiBvcHRpb24gaXMgRWxlbWVudCAtPiBnZXQgc2l6ZSBvZiBlbGVtZW50XHJcbiAqIGVsc2UgdXNlIG9wdGlvbiBhcyBhIG51bWJlclxyXG4gKlxyXG4gKiBAcGFyYW0ge1N0cmluZ30gbWVhc3VyZW1lbnRcclxuICogQHBhcmFtIHtTdHJpbmd9IHNpemUgLSB3aWR0aCBvciBoZWlnaHRcclxuICogQHByaXZhdGVcclxuICovXHJcbk91dGxheWVyLnByb3RvdHlwZS5fZ2V0TWVhc3VyZW1lbnQgPSBmdW5jdGlvbiggbWVhc3VyZW1lbnQsIHNpemUgKSB7XHJcbiAgdmFyIG9wdGlvbiA9IHRoaXMub3B0aW9uc1sgbWVhc3VyZW1lbnQgXTtcclxuICB2YXIgZWxlbTtcclxuICBpZiAoICFvcHRpb24gKSB7XHJcbiAgICAvLyBkZWZhdWx0IHRvIDBcclxuICAgIHRoaXNbIG1lYXN1cmVtZW50IF0gPSAwO1xyXG4gIH0gZWxzZSB7XHJcbiAgICAvLyB1c2Ugb3B0aW9uIGFzIGFuIGVsZW1lbnRcclxuICAgIGlmICggdHlwZW9mIG9wdGlvbiA9PT0gJ3N0cmluZycgKSB7XHJcbiAgICAgIGVsZW0gPSB0aGlzLmVsZW1lbnQucXVlcnlTZWxlY3Rvciggb3B0aW9uICk7XHJcbiAgICB9IGVsc2UgaWYgKCB1dGlscy5pc0VsZW1lbnQoIG9wdGlvbiApICkge1xyXG4gICAgICBlbGVtID0gb3B0aW9uO1xyXG4gICAgfVxyXG4gICAgLy8gdXNlIHNpemUgb2YgZWxlbWVudCwgaWYgZWxlbWVudFxyXG4gICAgdGhpc1sgbWVhc3VyZW1lbnQgXSA9IGVsZW0gPyBnZXRTaXplKCBlbGVtIClbIHNpemUgXSA6IG9wdGlvbjtcclxuICB9XHJcbn07XHJcblxyXG4vKipcclxuICogbGF5b3V0IGEgY29sbGVjdGlvbiBvZiBpdGVtIGVsZW1lbnRzXHJcbiAqIEBhcGkgcHVibGljXHJcbiAqL1xyXG5PdXRsYXllci5wcm90b3R5cGUubGF5b3V0SXRlbXMgPSBmdW5jdGlvbiggaXRlbXMsIGlzSW5zdGFudCApIHtcclxuICBpdGVtcyA9IHRoaXMuX2dldEl0ZW1zRm9yTGF5b3V0KCBpdGVtcyApO1xyXG5cclxuICB0aGlzLl9sYXlvdXRJdGVtcyggaXRlbXMsIGlzSW5zdGFudCApO1xyXG5cclxuICB0aGlzLl9wb3N0TGF5b3V0KCk7XHJcbn07XHJcblxyXG4vKipcclxuICogZ2V0IHRoZSBpdGVtcyB0byBiZSBsYWlkIG91dFxyXG4gKiB5b3UgbWF5IHdhbnQgdG8gc2tpcCBvdmVyIHNvbWUgaXRlbXNcclxuICogQHBhcmFtIHtBcnJheX0gaXRlbXNcclxuICogQHJldHVybnMge0FycmF5fSBpdGVtc1xyXG4gKi9cclxuT3V0bGF5ZXIucHJvdG90eXBlLl9nZXRJdGVtc0ZvckxheW91dCA9IGZ1bmN0aW9uKCBpdGVtcyApIHtcclxuICB2YXIgbGF5b3V0SXRlbXMgPSBbXTtcclxuICBmb3IgKCB2YXIgaT0wLCBsZW4gPSBpdGVtcy5sZW5ndGg7IGkgPCBsZW47IGkrKyApIHtcclxuICAgIHZhciBpdGVtID0gaXRlbXNbaV07XHJcbiAgICBpZiAoICFpdGVtLmlzSWdub3JlZCApIHtcclxuICAgICAgbGF5b3V0SXRlbXMucHVzaCggaXRlbSApO1xyXG4gICAgfVxyXG4gIH1cclxuICByZXR1cm4gbGF5b3V0SXRlbXM7XHJcbn07XHJcblxyXG4vKipcclxuICogbGF5b3V0IGl0ZW1zXHJcbiAqIEBwYXJhbSB7QXJyYXl9IGl0ZW1zXHJcbiAqIEBwYXJhbSB7Qm9vbGVhbn0gaXNJbnN0YW50XHJcbiAqL1xyXG5PdXRsYXllci5wcm90b3R5cGUuX2xheW91dEl0ZW1zID0gZnVuY3Rpb24oIGl0ZW1zLCBpc0luc3RhbnQgKSB7XHJcbiAgdGhpcy5fZW1pdENvbXBsZXRlT25JdGVtcyggJ2xheW91dCcsIGl0ZW1zICk7XHJcblxyXG4gIGlmICggIWl0ZW1zIHx8ICFpdGVtcy5sZW5ndGggKSB7XHJcbiAgICAvLyBubyBpdGVtcywgZW1pdCBldmVudCB3aXRoIGVtcHR5IGFycmF5XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICB2YXIgcXVldWUgPSBbXTtcclxuXHJcbiAgZm9yICggdmFyIGk9MCwgbGVuID0gaXRlbXMubGVuZ3RoOyBpIDwgbGVuOyBpKysgKSB7XHJcbiAgICB2YXIgaXRlbSA9IGl0ZW1zW2ldO1xyXG4gICAgLy8gZ2V0IHgveSBvYmplY3QgZnJvbSBtZXRob2RcclxuICAgIHZhciBwb3NpdGlvbiA9IHRoaXMuX2dldEl0ZW1MYXlvdXRQb3NpdGlvbiggaXRlbSApO1xyXG4gICAgLy8gZW5xdWV1ZVxyXG4gICAgcG9zaXRpb24uaXRlbSA9IGl0ZW07XHJcbiAgICBwb3NpdGlvbi5pc0luc3RhbnQgPSBpc0luc3RhbnQgfHwgaXRlbS5pc0xheW91dEluc3RhbnQ7XHJcbiAgICBxdWV1ZS5wdXNoKCBwb3NpdGlvbiApO1xyXG4gIH1cclxuXHJcbiAgdGhpcy5fcHJvY2Vzc0xheW91dFF1ZXVlKCBxdWV1ZSApO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIGdldCBpdGVtIGxheW91dCBwb3NpdGlvblxyXG4gKiBAcGFyYW0ge091dGxheWVyLkl0ZW19IGl0ZW1cclxuICogQHJldHVybnMge09iamVjdH0geCBhbmQgeSBwb3NpdGlvblxyXG4gKi9cclxuT3V0bGF5ZXIucHJvdG90eXBlLl9nZXRJdGVtTGF5b3V0UG9zaXRpb24gPSBmdW5jdGlvbiggLyogaXRlbSAqLyApIHtcclxuICByZXR1cm4ge1xyXG4gICAgeDogMCxcclxuICAgIHk6IDBcclxuICB9O1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIGl0ZXJhdGUgb3ZlciBhcnJheSBhbmQgcG9zaXRpb24gZWFjaCBpdGVtXHJcbiAqIFJlYXNvbiBiZWluZyAtIHNlcGFyYXRpbmcgdGhpcyBsb2dpYyBwcmV2ZW50cyAnbGF5b3V0IGludmFsaWRhdGlvbidcclxuICogdGh4IEBwYXVsX2lyaXNoXHJcbiAqIEBwYXJhbSB7QXJyYXl9IHF1ZXVlXHJcbiAqL1xyXG5PdXRsYXllci5wcm90b3R5cGUuX3Byb2Nlc3NMYXlvdXRRdWV1ZSA9IGZ1bmN0aW9uKCBxdWV1ZSApIHtcclxuICBmb3IgKCB2YXIgaT0wLCBsZW4gPSBxdWV1ZS5sZW5ndGg7IGkgPCBsZW47IGkrKyApIHtcclxuICAgIHZhciBvYmogPSBxdWV1ZVtpXTtcclxuICAgIHRoaXMuX3Bvc2l0aW9uSXRlbSggb2JqLml0ZW0sIG9iai54LCBvYmoueSwgb2JqLmlzSW5zdGFudCApO1xyXG4gIH1cclxufTtcclxuXHJcbi8qKlxyXG4gKiBTZXRzIHBvc2l0aW9uIG9mIGl0ZW0gaW4gRE9NXHJcbiAqIEBwYXJhbSB7T3V0bGF5ZXIuSXRlbX0gaXRlbVxyXG4gKiBAcGFyYW0ge051bWJlcn0geCAtIGhvcml6b250YWwgcG9zaXRpb25cclxuICogQHBhcmFtIHtOdW1iZXJ9IHkgLSB2ZXJ0aWNhbCBwb3NpdGlvblxyXG4gKiBAcGFyYW0ge0Jvb2xlYW59IGlzSW5zdGFudCAtIGRpc2FibGVzIHRyYW5zaXRpb25zXHJcbiAqL1xyXG5PdXRsYXllci5wcm90b3R5cGUuX3Bvc2l0aW9uSXRlbSA9IGZ1bmN0aW9uKCBpdGVtLCB4LCB5LCBpc0luc3RhbnQgKSB7XHJcbiAgaWYgKCBpc0luc3RhbnQgKSB7XHJcbiAgICAvLyBpZiBub3QgdHJhbnNpdGlvbiwganVzdCBzZXQgQ1NTXHJcbiAgICBpdGVtLmdvVG8oIHgsIHkgKTtcclxuICB9IGVsc2Uge1xyXG4gICAgaXRlbS5tb3ZlVG8oIHgsIHkgKTtcclxuICB9XHJcbn07XHJcblxyXG4vKipcclxuICogQW55IGxvZ2ljIHlvdSB3YW50IHRvIGRvIGFmdGVyIGVhY2ggbGF5b3V0LFxyXG4gKiBpLmUuIHNpemUgdGhlIGNvbnRhaW5lclxyXG4gKi9cclxuT3V0bGF5ZXIucHJvdG90eXBlLl9wb3N0TGF5b3V0ID0gZnVuY3Rpb24oKSB7XHJcbiAgdGhpcy5yZXNpemVDb250YWluZXIoKTtcclxufTtcclxuXHJcbk91dGxheWVyLnByb3RvdHlwZS5yZXNpemVDb250YWluZXIgPSBmdW5jdGlvbigpIHtcclxuICBpZiAoICF0aGlzLm9wdGlvbnMuaXNSZXNpemluZ0NvbnRhaW5lciApIHtcclxuICAgIHJldHVybjtcclxuICB9XHJcbiAgdmFyIHNpemUgPSB0aGlzLl9nZXRDb250YWluZXJTaXplKCk7XHJcbiAgaWYgKCBzaXplICkge1xyXG4gICAgdGhpcy5fc2V0Q29udGFpbmVyTWVhc3VyZSggc2l6ZS53aWR0aCwgdHJ1ZSApO1xyXG4gICAgdGhpcy5fc2V0Q29udGFpbmVyTWVhc3VyZSggc2l6ZS5oZWlnaHQsIGZhbHNlICk7XHJcbiAgfVxyXG59O1xyXG5cclxuLyoqXHJcbiAqIFNldHMgd2lkdGggb3IgaGVpZ2h0IG9mIGNvbnRhaW5lciBpZiByZXR1cm5lZFxyXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBzaXplXHJcbiAqICAgQHBhcmFtIHtOdW1iZXJ9IHdpZHRoXHJcbiAqICAgQHBhcmFtIHtOdW1iZXJ9IGhlaWdodFxyXG4gKi9cclxuT3V0bGF5ZXIucHJvdG90eXBlLl9nZXRDb250YWluZXJTaXplID0gbm9vcDtcclxuXHJcbi8qKlxyXG4gKiBAcGFyYW0ge051bWJlcn0gbWVhc3VyZSAtIHNpemUgb2Ygd2lkdGggb3IgaGVpZ2h0XHJcbiAqIEBwYXJhbSB7Qm9vbGVhbn0gaXNXaWR0aFxyXG4gKi9cclxuT3V0bGF5ZXIucHJvdG90eXBlLl9zZXRDb250YWluZXJNZWFzdXJlID0gZnVuY3Rpb24oIG1lYXN1cmUsIGlzV2lkdGggKSB7XHJcbiAgaWYgKCBtZWFzdXJlID09PSB1bmRlZmluZWQgKSB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICB2YXIgZWxlbVNpemUgPSB0aGlzLnNpemU7XHJcbiAgLy8gYWRkIHBhZGRpbmcgYW5kIGJvcmRlciB3aWR0aCBpZiBib3JkZXIgYm94XHJcbiAgaWYgKCBlbGVtU2l6ZS5pc0JvcmRlckJveCApIHtcclxuICAgIG1lYXN1cmUgKz0gaXNXaWR0aCA/IGVsZW1TaXplLnBhZGRpbmdMZWZ0ICsgZWxlbVNpemUucGFkZGluZ1JpZ2h0ICtcclxuICAgICAgZWxlbVNpemUuYm9yZGVyTGVmdFdpZHRoICsgZWxlbVNpemUuYm9yZGVyUmlnaHRXaWR0aCA6XHJcbiAgICAgIGVsZW1TaXplLnBhZGRpbmdCb3R0b20gKyBlbGVtU2l6ZS5wYWRkaW5nVG9wICtcclxuICAgICAgZWxlbVNpemUuYm9yZGVyVG9wV2lkdGggKyBlbGVtU2l6ZS5ib3JkZXJCb3R0b21XaWR0aDtcclxuICB9XHJcblxyXG4gIG1lYXN1cmUgPSBNYXRoLm1heCggbWVhc3VyZSwgMCApO1xyXG4gIHRoaXMuZWxlbWVudC5zdHlsZVsgaXNXaWR0aCA/ICd3aWR0aCcgOiAnaGVpZ2h0JyBdID0gbWVhc3VyZSArICdweCc7XHJcbn07XHJcblxyXG4vKipcclxuICogZW1pdCBldmVudENvbXBsZXRlIG9uIGEgY29sbGVjdGlvbiBvZiBpdGVtcyBldmVudHNcclxuICogQHBhcmFtIHtTdHJpbmd9IGV2ZW50TmFtZVxyXG4gKiBAcGFyYW0ge0FycmF5fSBpdGVtcyAtIE91dGxheWVyLkl0ZW1zXHJcbiAqL1xyXG5PdXRsYXllci5wcm90b3R5cGUuX2VtaXRDb21wbGV0ZU9uSXRlbXMgPSBmdW5jdGlvbiggZXZlbnROYW1lLCBpdGVtcyApIHtcclxuICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gIGZ1bmN0aW9uIG9uQ29tcGxldGUoKSB7XHJcbiAgICBfdGhpcy5kaXNwYXRjaEV2ZW50KCBldmVudE5hbWUgKyAnQ29tcGxldGUnLCBudWxsLCBbIGl0ZW1zIF0gKTtcclxuICB9XHJcblxyXG4gIHZhciBjb3VudCA9IGl0ZW1zLmxlbmd0aDtcclxuICBpZiAoICFpdGVtcyB8fCAhY291bnQgKSB7XHJcbiAgICBvbkNvbXBsZXRlKCk7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICB2YXIgZG9uZUNvdW50ID0gMDtcclxuICBmdW5jdGlvbiB0aWNrKCkge1xyXG4gICAgZG9uZUNvdW50Kys7XHJcbiAgICBpZiAoIGRvbmVDb3VudCA9PT0gY291bnQgKSB7XHJcbiAgICAgIG9uQ29tcGxldGUoKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8vIGJpbmQgY2FsbGJhY2tcclxuICBmb3IgKCB2YXIgaT0wLCBsZW4gPSBpdGVtcy5sZW5ndGg7IGkgPCBsZW47IGkrKyApIHtcclxuICAgIHZhciBpdGVtID0gaXRlbXNbaV07XHJcbiAgICBpdGVtLm9uY2UoIGV2ZW50TmFtZSwgdGljayApO1xyXG4gIH1cclxufTtcclxuXHJcbi8qKlxyXG4gKiBlbWl0cyBldmVudHMgdmlhIGV2ZW50RW1pdHRlciBhbmQgalF1ZXJ5IGV2ZW50c1xyXG4gKiBAcGFyYW0ge1N0cmluZ30gdHlwZSAtIG5hbWUgb2YgZXZlbnRcclxuICogQHBhcmFtIHtFdmVudH0gZXZlbnQgLSBvcmlnaW5hbCBldmVudFxyXG4gKiBAcGFyYW0ge0FycmF5fSBhcmdzIC0gZXh0cmEgYXJndW1lbnRzXHJcbiAqL1xyXG5PdXRsYXllci5wcm90b3R5cGUuZGlzcGF0Y2hFdmVudCA9IGZ1bmN0aW9uKCB0eXBlLCBldmVudCwgYXJncyApIHtcclxuICAvLyBhZGQgb3JpZ2luYWwgZXZlbnQgdG8gYXJndW1lbnRzXHJcbiAgdmFyIGVtaXRBcmdzID0gZXZlbnQgPyBbIGV2ZW50IF0uY29uY2F0KCBhcmdzICkgOiBhcmdzO1xyXG4gIHRoaXMuZW1pdEV2ZW50KCB0eXBlLCBlbWl0QXJncyApO1xyXG5cclxuICBpZiAoIGpRdWVyeSApIHtcclxuICAgIC8vIHNldCB0aGlzLiRlbGVtZW50XHJcbiAgICB0aGlzLiRlbGVtZW50ID0gdGhpcy4kZWxlbWVudCB8fCBqUXVlcnkoIHRoaXMuZWxlbWVudCApO1xyXG4gICAgaWYgKCBldmVudCApIHtcclxuICAgICAgLy8gY3JlYXRlIGpRdWVyeSBldmVudFxyXG4gICAgICB2YXIgJGV2ZW50ID0galF1ZXJ5LkV2ZW50KCBldmVudCApO1xyXG4gICAgICAkZXZlbnQudHlwZSA9IHR5cGU7XHJcbiAgICAgIHRoaXMuJGVsZW1lbnQudHJpZ2dlciggJGV2ZW50LCBhcmdzICk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICAvLyBqdXN0IHRyaWdnZXIgd2l0aCB0eXBlIGlmIG5vIGV2ZW50IGF2YWlsYWJsZVxyXG4gICAgICB0aGlzLiRlbGVtZW50LnRyaWdnZXIoIHR5cGUsIGFyZ3MgKTtcclxuICAgIH1cclxuICB9XHJcbn07XHJcblxyXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBpZ25vcmUgJiBzdGFtcHMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gLy9cclxuXHJcblxyXG4vKipcclxuICoga2VlcCBpdGVtIGluIGNvbGxlY3Rpb24sIGJ1dCBkbyBub3QgbGF5IGl0IG91dFxyXG4gKiBpZ25vcmVkIGl0ZW1zIGRvIG5vdCBnZXQgc2tpcHBlZCBpbiBsYXlvdXRcclxuICogQHBhcmFtIHtFbGVtZW50fSBlbGVtXHJcbiAqL1xyXG5PdXRsYXllci5wcm90b3R5cGUuaWdub3JlID0gZnVuY3Rpb24oIGVsZW0gKSB7XHJcbiAgdmFyIGl0ZW0gPSB0aGlzLmdldEl0ZW0oIGVsZW0gKTtcclxuICBpZiAoIGl0ZW0gKSB7XHJcbiAgICBpdGVtLmlzSWdub3JlZCA9IHRydWU7XHJcbiAgfVxyXG59O1xyXG5cclxuLyoqXHJcbiAqIHJldHVybiBpdGVtIHRvIGxheW91dCBjb2xsZWN0aW9uXHJcbiAqIEBwYXJhbSB7RWxlbWVudH0gZWxlbVxyXG4gKi9cclxuT3V0bGF5ZXIucHJvdG90eXBlLnVuaWdub3JlID0gZnVuY3Rpb24oIGVsZW0gKSB7XHJcbiAgdmFyIGl0ZW0gPSB0aGlzLmdldEl0ZW0oIGVsZW0gKTtcclxuICBpZiAoIGl0ZW0gKSB7XHJcbiAgICBkZWxldGUgaXRlbS5pc0lnbm9yZWQ7XHJcbiAgfVxyXG59O1xyXG5cclxuLyoqXHJcbiAqIGFkZHMgZWxlbWVudHMgdG8gc3RhbXBzXHJcbiAqIEBwYXJhbSB7Tm9kZUxpc3QsIEFycmF5LCBFbGVtZW50LCBvciBTdHJpbmd9IGVsZW1zXHJcbiAqL1xyXG5PdXRsYXllci5wcm90b3R5cGUuc3RhbXAgPSBmdW5jdGlvbiggZWxlbXMgKSB7XHJcbiAgZWxlbXMgPSB0aGlzLl9maW5kKCBlbGVtcyApO1xyXG4gIGlmICggIWVsZW1zICkge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgdGhpcy5zdGFtcHMgPSB0aGlzLnN0YW1wcy5jb25jYXQoIGVsZW1zICk7XHJcbiAgLy8gaWdub3JlXHJcbiAgZm9yICggdmFyIGk9MCwgbGVuID0gZWxlbXMubGVuZ3RoOyBpIDwgbGVuOyBpKysgKSB7XHJcbiAgICB2YXIgZWxlbSA9IGVsZW1zW2ldO1xyXG4gICAgdGhpcy5pZ25vcmUoIGVsZW0gKTtcclxuICB9XHJcbn07XHJcblxyXG4vKipcclxuICogcmVtb3ZlcyBlbGVtZW50cyB0byBzdGFtcHNcclxuICogQHBhcmFtIHtOb2RlTGlzdCwgQXJyYXksIG9yIEVsZW1lbnR9IGVsZW1zXHJcbiAqL1xyXG5PdXRsYXllci5wcm90b3R5cGUudW5zdGFtcCA9IGZ1bmN0aW9uKCBlbGVtcyApIHtcclxuICBlbGVtcyA9IHRoaXMuX2ZpbmQoIGVsZW1zICk7XHJcbiAgaWYgKCAhZWxlbXMgKXtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIGZvciAoIHZhciBpPTAsIGxlbiA9IGVsZW1zLmxlbmd0aDsgaSA8IGxlbjsgaSsrICkge1xyXG4gICAgdmFyIGVsZW0gPSBlbGVtc1tpXTtcclxuICAgIC8vIGZpbHRlciBvdXQgcmVtb3ZlZCBzdGFtcCBlbGVtZW50c1xyXG4gICAgdXRpbHMucmVtb3ZlRnJvbSggdGhpcy5zdGFtcHMsIGVsZW0gKTtcclxuICAgIHRoaXMudW5pZ25vcmUoIGVsZW0gKTtcclxuICB9XHJcblxyXG59O1xyXG5cclxuLyoqXHJcbiAqIGZpbmRzIGNoaWxkIGVsZW1lbnRzXHJcbiAqIEBwYXJhbSB7Tm9kZUxpc3QsIEFycmF5LCBFbGVtZW50LCBvciBTdHJpbmd9IGVsZW1zXHJcbiAqIEByZXR1cm5zIHtBcnJheX0gZWxlbXNcclxuICovXHJcbk91dGxheWVyLnByb3RvdHlwZS5fZmluZCA9IGZ1bmN0aW9uKCBlbGVtcyApIHtcclxuICBpZiAoICFlbGVtcyApIHtcclxuICAgIHJldHVybjtcclxuICB9XHJcbiAgLy8gaWYgc3RyaW5nLCB1c2UgYXJndW1lbnQgYXMgc2VsZWN0b3Igc3RyaW5nXHJcbiAgaWYgKCB0eXBlb2YgZWxlbXMgPT09ICdzdHJpbmcnICkge1xyXG4gICAgZWxlbXMgPSB0aGlzLmVsZW1lbnQucXVlcnlTZWxlY3RvckFsbCggZWxlbXMgKTtcclxuICB9XHJcbiAgZWxlbXMgPSB1dGlscy5tYWtlQXJyYXkoIGVsZW1zICk7XHJcbiAgcmV0dXJuIGVsZW1zO1xyXG59O1xyXG5cclxuT3V0bGF5ZXIucHJvdG90eXBlLl9tYW5hZ2VTdGFtcHMgPSBmdW5jdGlvbigpIHtcclxuICBpZiAoICF0aGlzLnN0YW1wcyB8fCAhdGhpcy5zdGFtcHMubGVuZ3RoICkge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgdGhpcy5fZ2V0Qm91bmRpbmdSZWN0KCk7XHJcblxyXG4gIGZvciAoIHZhciBpPTAsIGxlbiA9IHRoaXMuc3RhbXBzLmxlbmd0aDsgaSA8IGxlbjsgaSsrICkge1xyXG4gICAgdmFyIHN0YW1wID0gdGhpcy5zdGFtcHNbaV07XHJcbiAgICB0aGlzLl9tYW5hZ2VTdGFtcCggc3RhbXAgKTtcclxuICB9XHJcbn07XHJcblxyXG4vLyB1cGRhdGUgYm91bmRpbmdMZWZ0IC8gVG9wXHJcbk91dGxheWVyLnByb3RvdHlwZS5fZ2V0Qm91bmRpbmdSZWN0ID0gZnVuY3Rpb24oKSB7XHJcbiAgLy8gZ2V0IGJvdW5kaW5nIHJlY3QgZm9yIGNvbnRhaW5lciBlbGVtZW50XHJcbiAgdmFyIGJvdW5kaW5nUmVjdCA9IHRoaXMuZWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcclxuICB2YXIgc2l6ZSA9IHRoaXMuc2l6ZTtcclxuICB0aGlzLl9ib3VuZGluZ1JlY3QgPSB7XHJcbiAgICBsZWZ0OiBib3VuZGluZ1JlY3QubGVmdCArIHNpemUucGFkZGluZ0xlZnQgKyBzaXplLmJvcmRlckxlZnRXaWR0aCxcclxuICAgIHRvcDogYm91bmRpbmdSZWN0LnRvcCArIHNpemUucGFkZGluZ1RvcCArIHNpemUuYm9yZGVyVG9wV2lkdGgsXHJcbiAgICByaWdodDogYm91bmRpbmdSZWN0LnJpZ2h0IC0gKCBzaXplLnBhZGRpbmdSaWdodCArIHNpemUuYm9yZGVyUmlnaHRXaWR0aCApLFxyXG4gICAgYm90dG9tOiBib3VuZGluZ1JlY3QuYm90dG9tIC0gKCBzaXplLnBhZGRpbmdCb3R0b20gKyBzaXplLmJvcmRlckJvdHRvbVdpZHRoIClcclxuICB9O1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIEBwYXJhbSB7RWxlbWVudH0gc3RhbXBcclxuKiovXHJcbk91dGxheWVyLnByb3RvdHlwZS5fbWFuYWdlU3RhbXAgPSBub29wO1xyXG5cclxuLyoqXHJcbiAqIGdldCB4L3kgcG9zaXRpb24gb2YgZWxlbWVudCByZWxhdGl2ZSB0byBjb250YWluZXIgZWxlbWVudFxyXG4gKiBAcGFyYW0ge0VsZW1lbnR9IGVsZW1cclxuICogQHJldHVybnMge09iamVjdH0gb2Zmc2V0IC0gaGFzIGxlZnQsIHRvcCwgcmlnaHQsIGJvdHRvbVxyXG4gKi9cclxuT3V0bGF5ZXIucHJvdG90eXBlLl9nZXRFbGVtZW50T2Zmc2V0ID0gZnVuY3Rpb24oIGVsZW0gKSB7XHJcbiAgdmFyIGJvdW5kaW5nUmVjdCA9IGVsZW0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XHJcbiAgdmFyIHRoaXNSZWN0ID0gdGhpcy5fYm91bmRpbmdSZWN0O1xyXG4gIHZhciBzaXplID0gZ2V0U2l6ZSggZWxlbSApO1xyXG4gIHZhciBvZmZzZXQgPSB7XHJcbiAgICBsZWZ0OiBib3VuZGluZ1JlY3QubGVmdCAtIHRoaXNSZWN0LmxlZnQgLSBzaXplLm1hcmdpbkxlZnQsXHJcbiAgICB0b3A6IGJvdW5kaW5nUmVjdC50b3AgLSB0aGlzUmVjdC50b3AgLSBzaXplLm1hcmdpblRvcCxcclxuICAgIHJpZ2h0OiB0aGlzUmVjdC5yaWdodCAtIGJvdW5kaW5nUmVjdC5yaWdodCAtIHNpemUubWFyZ2luUmlnaHQsXHJcbiAgICBib3R0b206IHRoaXNSZWN0LmJvdHRvbSAtIGJvdW5kaW5nUmVjdC5ib3R0b20gLSBzaXplLm1hcmdpbkJvdHRvbVxyXG4gIH07XHJcbiAgcmV0dXJuIG9mZnNldDtcclxufTtcclxuXHJcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIHJlc2l6ZSAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAvL1xyXG5cclxuLy8gZW5hYmxlIGV2ZW50IGhhbmRsZXJzIGZvciBsaXN0ZW5lcnNcclxuLy8gaS5lLiByZXNpemUgLT4gb25yZXNpemVcclxuT3V0bGF5ZXIucHJvdG90eXBlLmhhbmRsZUV2ZW50ID0gZnVuY3Rpb24oIGV2ZW50ICkge1xyXG4gIHZhciBtZXRob2QgPSAnb24nICsgZXZlbnQudHlwZTtcclxuICBpZiAoIHRoaXNbIG1ldGhvZCBdICkge1xyXG4gICAgdGhpc1sgbWV0aG9kIF0oIGV2ZW50ICk7XHJcbiAgfVxyXG59O1xyXG5cclxuLyoqXHJcbiAqIEJpbmQgbGF5b3V0IHRvIHdpbmRvdyByZXNpemluZ1xyXG4gKi9cclxuT3V0bGF5ZXIucHJvdG90eXBlLmJpbmRSZXNpemUgPSBmdW5jdGlvbigpIHtcclxuICAvLyBiaW5kIGp1c3Qgb25lIGxpc3RlbmVyXHJcbiAgaWYgKCB0aGlzLmlzUmVzaXplQm91bmQgKSB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG4gIGV2ZW50aWUuYmluZCggd2luZG93LCAncmVzaXplJywgdGhpcyApO1xyXG4gIHRoaXMuaXNSZXNpemVCb3VuZCA9IHRydWU7XHJcbn07XHJcblxyXG4vKipcclxuICogVW5iaW5kIGxheW91dCB0byB3aW5kb3cgcmVzaXppbmdcclxuICovXHJcbk91dGxheWVyLnByb3RvdHlwZS51bmJpbmRSZXNpemUgPSBmdW5jdGlvbigpIHtcclxuICBpZiAoIHRoaXMuaXNSZXNpemVCb3VuZCApIHtcclxuICAgIGV2ZW50aWUudW5iaW5kKCB3aW5kb3csICdyZXNpemUnLCB0aGlzICk7XHJcbiAgfVxyXG4gIHRoaXMuaXNSZXNpemVCb3VuZCA9IGZhbHNlO1xyXG59O1xyXG5cclxuLy8gb3JpZ2luYWwgZGVib3VuY2UgYnkgSm9obiBIYW5uXHJcbi8vIGh0dHA6Ly91bnNjcmlwdGFibGUuY29tL2luZGV4LnBocC8yMDA5LzAzLzIwL2RlYm91bmNpbmctamF2YXNjcmlwdC1tZXRob2RzL1xyXG5cclxuLy8gdGhpcyBmaXJlcyBldmVyeSByZXNpemVcclxuT3V0bGF5ZXIucHJvdG90eXBlLm9ucmVzaXplID0gZnVuY3Rpb24oKSB7XHJcbiAgaWYgKCB0aGlzLnJlc2l6ZVRpbWVvdXQgKSB7XHJcbiAgICBjbGVhclRpbWVvdXQoIHRoaXMucmVzaXplVGltZW91dCApO1xyXG4gIH1cclxuXHJcbiAgdmFyIF90aGlzID0gdGhpcztcclxuICBmdW5jdGlvbiBkZWxheWVkKCkge1xyXG4gICAgX3RoaXMucmVzaXplKCk7XHJcbiAgICBkZWxldGUgX3RoaXMucmVzaXplVGltZW91dDtcclxuICB9XHJcblxyXG4gIHRoaXMucmVzaXplVGltZW91dCA9IHNldFRpbWVvdXQoIGRlbGF5ZWQsIDEwMCApO1xyXG59O1xyXG5cclxuLy8gZGVib3VuY2VkLCBsYXlvdXQgb24gcmVzaXplXHJcbk91dGxheWVyLnByb3RvdHlwZS5yZXNpemUgPSBmdW5jdGlvbigpIHtcclxuICAvLyBkb24ndCB0cmlnZ2VyIGlmIHNpemUgZGlkIG5vdCBjaGFuZ2VcclxuICAvLyBvciBpZiByZXNpemUgd2FzIHVuYm91bmQuIFNlZSAjOVxyXG4gIGlmICggIXRoaXMuaXNSZXNpemVCb3VuZCB8fCAhdGhpcy5uZWVkc1Jlc2l6ZUxheW91dCgpICkge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgdGhpcy5sYXlvdXQoKTtcclxufTtcclxuXHJcbi8qKlxyXG4gKiBjaGVjayBpZiBsYXlvdXQgaXMgbmVlZGVkIHBvc3QgbGF5b3V0XHJcbiAqIEByZXR1cm5zIEJvb2xlYW5cclxuICovXHJcbk91dGxheWVyLnByb3RvdHlwZS5uZWVkc1Jlc2l6ZUxheW91dCA9IGZ1bmN0aW9uKCkge1xyXG4gIHZhciBzaXplID0gZ2V0U2l6ZSggdGhpcy5lbGVtZW50ICk7XHJcbiAgLy8gY2hlY2sgdGhhdCB0aGlzLnNpemUgYW5kIHNpemUgYXJlIHRoZXJlXHJcbiAgLy8gSUU4IHRyaWdnZXJzIHJlc2l6ZSBvbiBib2R5IHNpemUgY2hhbmdlLCBzbyB0aGV5IG1pZ2h0IG5vdCBiZVxyXG4gIHZhciBoYXNTaXplcyA9IHRoaXMuc2l6ZSAmJiBzaXplO1xyXG4gIHJldHVybiBoYXNTaXplcyAmJiBzaXplLmlubmVyV2lkdGggIT09IHRoaXMuc2l6ZS5pbm5lcldpZHRoO1xyXG59O1xyXG5cclxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gbWV0aG9kcyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAvL1xyXG5cclxuLyoqXHJcbiAqIGFkZCBpdGVtcyB0byBPdXRsYXllciBpbnN0YW5jZVxyXG4gKiBAcGFyYW0ge0FycmF5IG9yIE5vZGVMaXN0IG9yIEVsZW1lbnR9IGVsZW1zXHJcbiAqIEByZXR1cm5zIHtBcnJheX0gaXRlbXMgLSBPdXRsYXllci5JdGVtc1xyXG4qKi9cclxuT3V0bGF5ZXIucHJvdG90eXBlLmFkZEl0ZW1zID0gZnVuY3Rpb24oIGVsZW1zICkge1xyXG4gIHZhciBpdGVtcyA9IHRoaXMuX2l0ZW1pemUoIGVsZW1zICk7XHJcbiAgLy8gYWRkIGl0ZW1zIHRvIGNvbGxlY3Rpb25cclxuICBpZiAoIGl0ZW1zLmxlbmd0aCApIHtcclxuICAgIHRoaXMuaXRlbXMgPSB0aGlzLml0ZW1zLmNvbmNhdCggaXRlbXMgKTtcclxuICB9XHJcbiAgcmV0dXJuIGl0ZW1zO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIExheW91dCBuZXdseS1hcHBlbmRlZCBpdGVtIGVsZW1lbnRzXHJcbiAqIEBwYXJhbSB7QXJyYXkgb3IgTm9kZUxpc3Qgb3IgRWxlbWVudH0gZWxlbXNcclxuICovXHJcbk91dGxheWVyLnByb3RvdHlwZS5hcHBlbmRlZCA9IGZ1bmN0aW9uKCBlbGVtcyApIHtcclxuICB2YXIgaXRlbXMgPSB0aGlzLmFkZEl0ZW1zKCBlbGVtcyApO1xyXG4gIGlmICggIWl0ZW1zLmxlbmd0aCApIHtcclxuICAgIHJldHVybjtcclxuICB9XHJcbiAgLy8gbGF5b3V0IGFuZCByZXZlYWwganVzdCB0aGUgbmV3IGl0ZW1zXHJcbiAgdGhpcy5sYXlvdXRJdGVtcyggaXRlbXMsIHRydWUgKTtcclxuICB0aGlzLnJldmVhbCggaXRlbXMgKTtcclxufTtcclxuXHJcbi8qKlxyXG4gKiBMYXlvdXQgcHJlcGVuZGVkIGVsZW1lbnRzXHJcbiAqIEBwYXJhbSB7QXJyYXkgb3IgTm9kZUxpc3Qgb3IgRWxlbWVudH0gZWxlbXNcclxuICovXHJcbk91dGxheWVyLnByb3RvdHlwZS5wcmVwZW5kZWQgPSBmdW5jdGlvbiggZWxlbXMgKSB7XHJcbiAgdmFyIGl0ZW1zID0gdGhpcy5faXRlbWl6ZSggZWxlbXMgKTtcclxuICBpZiAoICFpdGVtcy5sZW5ndGggKSB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG4gIC8vIGFkZCBpdGVtcyB0byBiZWdpbm5pbmcgb2YgY29sbGVjdGlvblxyXG4gIHZhciBwcmV2aW91c0l0ZW1zID0gdGhpcy5pdGVtcy5zbGljZSgwKTtcclxuICB0aGlzLml0ZW1zID0gaXRlbXMuY29uY2F0KCBwcmV2aW91c0l0ZW1zICk7XHJcbiAgLy8gc3RhcnQgbmV3IGxheW91dFxyXG4gIHRoaXMuX3Jlc2V0TGF5b3V0KCk7XHJcbiAgdGhpcy5fbWFuYWdlU3RhbXBzKCk7XHJcbiAgLy8gbGF5b3V0IG5ldyBzdHVmZiB3aXRob3V0IHRyYW5zaXRpb25cclxuICB0aGlzLmxheW91dEl0ZW1zKCBpdGVtcywgdHJ1ZSApO1xyXG4gIHRoaXMucmV2ZWFsKCBpdGVtcyApO1xyXG4gIC8vIGxheW91dCBwcmV2aW91cyBpdGVtc1xyXG4gIHRoaXMubGF5b3V0SXRlbXMoIHByZXZpb3VzSXRlbXMgKTtcclxufTtcclxuXHJcbi8qKlxyXG4gKiByZXZlYWwgYSBjb2xsZWN0aW9uIG9mIGl0ZW1zXHJcbiAqIEBwYXJhbSB7QXJyYXkgb2YgT3V0bGF5ZXIuSXRlbXN9IGl0ZW1zXHJcbiAqL1xyXG5PdXRsYXllci5wcm90b3R5cGUucmV2ZWFsID0gZnVuY3Rpb24oIGl0ZW1zICkge1xyXG4gIHRoaXMuX2VtaXRDb21wbGV0ZU9uSXRlbXMoICdyZXZlYWwnLCBpdGVtcyApO1xyXG5cclxuICB2YXIgbGVuID0gaXRlbXMgJiYgaXRlbXMubGVuZ3RoO1xyXG4gIGZvciAoIHZhciBpPTA7IGxlbiAmJiBpIDwgbGVuOyBpKysgKSB7XHJcbiAgICB2YXIgaXRlbSA9IGl0ZW1zW2ldO1xyXG4gICAgaXRlbS5yZXZlYWwoKTtcclxuICB9XHJcbn07XHJcblxyXG4vKipcclxuICogaGlkZSBhIGNvbGxlY3Rpb24gb2YgaXRlbXNcclxuICogQHBhcmFtIHtBcnJheSBvZiBPdXRsYXllci5JdGVtc30gaXRlbXNcclxuICovXHJcbk91dGxheWVyLnByb3RvdHlwZS5oaWRlID0gZnVuY3Rpb24oIGl0ZW1zICkge1xyXG4gIHRoaXMuX2VtaXRDb21wbGV0ZU9uSXRlbXMoICdoaWRlJywgaXRlbXMgKTtcclxuXHJcbiAgdmFyIGxlbiA9IGl0ZW1zICYmIGl0ZW1zLmxlbmd0aDtcclxuICBmb3IgKCB2YXIgaT0wOyBsZW4gJiYgaSA8IGxlbjsgaSsrICkge1xyXG4gICAgdmFyIGl0ZW0gPSBpdGVtc1tpXTtcclxuICAgIGl0ZW0uaGlkZSgpO1xyXG4gIH1cclxufTtcclxuXHJcbi8qKlxyXG4gKiByZXZlYWwgaXRlbSBlbGVtZW50c1xyXG4gKiBAcGFyYW0ge0FycmF5fSwge0VsZW1lbnR9LCB7Tm9kZUxpc3R9IGl0ZW1zXHJcbiAqL1xyXG5PdXRsYXllci5wcm90b3R5cGUucmV2ZWFsSXRlbUVsZW1lbnRzID0gZnVuY3Rpb24oIGVsZW1zICkge1xyXG4gIHZhciBpdGVtcyA9IHRoaXMuZ2V0SXRlbXMoIGVsZW1zICk7XHJcbiAgdGhpcy5yZXZlYWwoIGl0ZW1zICk7XHJcbn07XHJcblxyXG4vKipcclxuICogaGlkZSBpdGVtIGVsZW1lbnRzXHJcbiAqIEBwYXJhbSB7QXJyYXl9LCB7RWxlbWVudH0sIHtOb2RlTGlzdH0gaXRlbXNcclxuICovXHJcbk91dGxheWVyLnByb3RvdHlwZS5oaWRlSXRlbUVsZW1lbnRzID0gZnVuY3Rpb24oIGVsZW1zICkge1xyXG4gIHZhciBpdGVtcyA9IHRoaXMuZ2V0SXRlbXMoIGVsZW1zICk7XHJcbiAgdGhpcy5oaWRlKCBpdGVtcyApO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIGdldCBPdXRsYXllci5JdGVtLCBnaXZlbiBhbiBFbGVtZW50XHJcbiAqIEBwYXJhbSB7RWxlbWVudH0gZWxlbVxyXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFja1xyXG4gKiBAcmV0dXJucyB7T3V0bGF5ZXIuSXRlbX0gaXRlbVxyXG4gKi9cclxuT3V0bGF5ZXIucHJvdG90eXBlLmdldEl0ZW0gPSBmdW5jdGlvbiggZWxlbSApIHtcclxuICAvLyBsb29wIHRocm91Z2ggaXRlbXMgdG8gZ2V0IHRoZSBvbmUgdGhhdCBtYXRjaGVzXHJcbiAgZm9yICggdmFyIGk9MCwgbGVuID0gdGhpcy5pdGVtcy5sZW5ndGg7IGkgPCBsZW47IGkrKyApIHtcclxuICAgIHZhciBpdGVtID0gdGhpcy5pdGVtc1tpXTtcclxuICAgIGlmICggaXRlbS5lbGVtZW50ID09PSBlbGVtICkge1xyXG4gICAgICAvLyByZXR1cm4gaXRlbVxyXG4gICAgICByZXR1cm4gaXRlbTtcclxuICAgIH1cclxuICB9XHJcbn07XHJcblxyXG4vKipcclxuICogZ2V0IGNvbGxlY3Rpb24gb2YgT3V0bGF5ZXIuSXRlbXMsIGdpdmVuIEVsZW1lbnRzXHJcbiAqIEBwYXJhbSB7QXJyYXl9IGVsZW1zXHJcbiAqIEByZXR1cm5zIHtBcnJheX0gaXRlbXMgLSBPdXRsYXllci5JdGVtc1xyXG4gKi9cclxuT3V0bGF5ZXIucHJvdG90eXBlLmdldEl0ZW1zID0gZnVuY3Rpb24oIGVsZW1zICkge1xyXG4gIGVsZW1zID0gdXRpbHMubWFrZUFycmF5KCBlbGVtcyApO1xyXG4gIHZhciBpdGVtcyA9IFtdO1xyXG4gIGZvciAoIHZhciBpPTAsIGxlbiA9IGVsZW1zLmxlbmd0aDsgaSA8IGxlbjsgaSsrICkge1xyXG4gICAgdmFyIGVsZW0gPSBlbGVtc1tpXTtcclxuICAgIHZhciBpdGVtID0gdGhpcy5nZXRJdGVtKCBlbGVtICk7XHJcbiAgICBpZiAoIGl0ZW0gKSB7XHJcbiAgICAgIGl0ZW1zLnB1c2goIGl0ZW0gKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHJldHVybiBpdGVtcztcclxufTtcclxuXHJcbi8qKlxyXG4gKiByZW1vdmUgZWxlbWVudChzKSBmcm9tIGluc3RhbmNlIGFuZCBET01cclxuICogQHBhcmFtIHtBcnJheSBvciBOb2RlTGlzdCBvciBFbGVtZW50fSBlbGVtc1xyXG4gKi9cclxuT3V0bGF5ZXIucHJvdG90eXBlLnJlbW92ZSA9IGZ1bmN0aW9uKCBlbGVtcyApIHtcclxuICB2YXIgcmVtb3ZlSXRlbXMgPSB0aGlzLmdldEl0ZW1zKCBlbGVtcyApO1xyXG5cclxuICB0aGlzLl9lbWl0Q29tcGxldGVPbkl0ZW1zKCAncmVtb3ZlJywgcmVtb3ZlSXRlbXMgKTtcclxuXHJcbiAgLy8gYmFpbCBpZiBubyBpdGVtcyB0byByZW1vdmVcclxuICBpZiAoICFyZW1vdmVJdGVtcyB8fCAhcmVtb3ZlSXRlbXMubGVuZ3RoICkge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgZm9yICggdmFyIGk9MCwgbGVuID0gcmVtb3ZlSXRlbXMubGVuZ3RoOyBpIDwgbGVuOyBpKysgKSB7XHJcbiAgICB2YXIgaXRlbSA9IHJlbW92ZUl0ZW1zW2ldO1xyXG4gICAgaXRlbS5yZW1vdmUoKTtcclxuICAgIC8vIHJlbW92ZSBpdGVtIGZyb20gY29sbGVjdGlvblxyXG4gICAgdXRpbHMucmVtb3ZlRnJvbSggdGhpcy5pdGVtcywgaXRlbSApO1xyXG4gIH1cclxufTtcclxuXHJcbi8vIC0tLS0tIGRlc3Ryb3kgLS0tLS0gLy9cclxuXHJcbi8vIHJlbW92ZSBhbmQgZGlzYWJsZSBPdXRsYXllciBpbnN0YW5jZVxyXG5PdXRsYXllci5wcm90b3R5cGUuZGVzdHJveSA9IGZ1bmN0aW9uKCkge1xyXG4gIC8vIGNsZWFuIHVwIGR5bmFtaWMgc3R5bGVzXHJcbiAgdmFyIHN0eWxlID0gdGhpcy5lbGVtZW50LnN0eWxlO1xyXG4gIHN0eWxlLmhlaWdodCA9ICcnO1xyXG4gIHN0eWxlLnBvc2l0aW9uID0gJyc7XHJcbiAgc3R5bGUud2lkdGggPSAnJztcclxuICAvLyBkZXN0cm95IGl0ZW1zXHJcbiAgZm9yICggdmFyIGk9MCwgbGVuID0gdGhpcy5pdGVtcy5sZW5ndGg7IGkgPCBsZW47IGkrKyApIHtcclxuICAgIHZhciBpdGVtID0gdGhpcy5pdGVtc1tpXTtcclxuICAgIGl0ZW0uZGVzdHJveSgpO1xyXG4gIH1cclxuXHJcbiAgdGhpcy51bmJpbmRSZXNpemUoKTtcclxuXHJcbiAgdmFyIGlkID0gdGhpcy5lbGVtZW50Lm91dGxheWVyR1VJRDtcclxuICBkZWxldGUgaW5zdGFuY2VzWyBpZCBdOyAvLyByZW1vdmUgcmVmZXJlbmNlIHRvIGluc3RhbmNlIGJ5IGlkXHJcbiAgZGVsZXRlIHRoaXMuZWxlbWVudC5vdXRsYXllckdVSUQ7XHJcbiAgLy8gcmVtb3ZlIGRhdGEgZm9yIGpRdWVyeVxyXG4gIGlmICggalF1ZXJ5ICkge1xyXG4gICAgalF1ZXJ5LnJlbW92ZURhdGEoIHRoaXMuZWxlbWVudCwgdGhpcy5jb25zdHJ1Y3Rvci5uYW1lc3BhY2UgKTtcclxuICB9XHJcblxyXG59O1xyXG5cclxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gZGF0YSAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAvL1xyXG5cclxuLyoqXHJcbiAqIGdldCBPdXRsYXllciBpbnN0YW5jZSBmcm9tIGVsZW1lbnRcclxuICogQHBhcmFtIHtFbGVtZW50fSBlbGVtXHJcbiAqIEByZXR1cm5zIHtPdXRsYXllcn1cclxuICovXHJcbk91dGxheWVyLmRhdGEgPSBmdW5jdGlvbiggZWxlbSApIHtcclxuICBlbGVtID0gdXRpbHMuZ2V0UXVlcnlFbGVtZW50KCBlbGVtICk7XHJcbiAgdmFyIGlkID0gZWxlbSAmJiBlbGVtLm91dGxheWVyR1VJRDtcclxuICByZXR1cm4gaWQgJiYgaW5zdGFuY2VzWyBpZCBdO1xyXG59O1xyXG5cclxuXHJcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIGNyZWF0ZSBPdXRsYXllciBjbGFzcyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAvL1xyXG5cclxuLyoqXHJcbiAqIGNyZWF0ZSBhIGxheW91dCBjbGFzc1xyXG4gKiBAcGFyYW0ge1N0cmluZ30gbmFtZXNwYWNlXHJcbiAqL1xyXG5PdXRsYXllci5jcmVhdGUgPSBmdW5jdGlvbiggbmFtZXNwYWNlLCBvcHRpb25zICkge1xyXG4gIC8vIHN1Yi1jbGFzcyBPdXRsYXllclxyXG4gIGZ1bmN0aW9uIExheW91dCgpIHtcclxuICAgIE91dGxheWVyLmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKTtcclxuICB9XHJcbiAgLy8gaW5oZXJpdCBPdXRsYXllciBwcm90b3R5cGUsIHVzZSBPYmplY3QuY3JlYXRlIGlmIHRoZXJlXHJcbiAgaWYgKCBPYmplY3QuY3JlYXRlICkge1xyXG4gICAgTGF5b3V0LnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoIE91dGxheWVyLnByb3RvdHlwZSApO1xyXG4gIH0gZWxzZSB7XHJcbiAgICB1dGlscy5leHRlbmQoIExheW91dC5wcm90b3R5cGUsIE91dGxheWVyLnByb3RvdHlwZSApO1xyXG4gIH1cclxuICAvLyBzZXQgY29udHJ1Y3RvciwgdXNlZCBmb3IgbmFtZXNwYWNlIGFuZCBJdGVtXHJcbiAgTGF5b3V0LnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IExheW91dDtcclxuXHJcbiAgTGF5b3V0LmRlZmF1bHRzID0gdXRpbHMuZXh0ZW5kKCB7fSwgT3V0bGF5ZXIuZGVmYXVsdHMgKTtcclxuICAvLyBhcHBseSBuZXcgb3B0aW9uc1xyXG4gIHV0aWxzLmV4dGVuZCggTGF5b3V0LmRlZmF1bHRzLCBvcHRpb25zICk7XHJcbiAgLy8ga2VlcCBwcm90b3R5cGUuc2V0dGluZ3MgZm9yIGJhY2t3YXJkcyBjb21wYXRpYmlsaXR5IChQYWNrZXJ5IHYxLjIuMClcclxuICBMYXlvdXQucHJvdG90eXBlLnNldHRpbmdzID0ge307XHJcblxyXG4gIExheW91dC5uYW1lc3BhY2UgPSBuYW1lc3BhY2U7XHJcblxyXG4gIExheW91dC5kYXRhID0gT3V0bGF5ZXIuZGF0YTtcclxuXHJcbiAgLy8gc3ViLWNsYXNzIEl0ZW1cclxuICBMYXlvdXQuSXRlbSA9IGZ1bmN0aW9uIExheW91dEl0ZW0oKSB7XHJcbiAgICBJdGVtLmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKTtcclxuICB9O1xyXG5cclxuICBMYXlvdXQuSXRlbS5wcm90b3R5cGUgPSBuZXcgSXRlbSgpO1xyXG5cclxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBkZWNsYXJhdGl2ZSAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAvL1xyXG5cclxuICB1dGlscy5odG1sSW5pdCggTGF5b3V0LCBuYW1lc3BhY2UgKTtcclxuXHJcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0galF1ZXJ5IGJyaWRnZSAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAvL1xyXG5cclxuICAvLyBtYWtlIGludG8galF1ZXJ5IHBsdWdpblxyXG4gIGlmICggalF1ZXJ5ICYmIGpRdWVyeS5icmlkZ2V0ICkge1xyXG4gICAgalF1ZXJ5LmJyaWRnZXQoIG5hbWVzcGFjZSwgTGF5b3V0ICk7XHJcbiAgfVxyXG5cclxuICByZXR1cm4gTGF5b3V0O1xyXG59O1xyXG5cclxuLy8gLS0tLS0gZmluIC0tLS0tIC8vXHJcblxyXG4vLyBiYWNrIGluIGdsb2JhbFxyXG5PdXRsYXllci5JdGVtID0gSXRlbTtcclxuXHJcbnJldHVybiBPdXRsYXllcjtcclxuXHJcbn0pKTtcclxuXHJcblxyXG4vKipcclxuICogSXNvdG9wZSBJdGVtXHJcbioqL1xyXG5cclxuKCBmdW5jdGlvbiggd2luZG93LCBmYWN0b3J5ICkge1xyXG4ndXNlIHN0cmljdCc7XHJcbiAgLy8gdW5pdmVyc2FsIG1vZHVsZSBkZWZpbml0aW9uXHJcbiAgaWYgKCB0eXBlb2YgZGVmaW5lID09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCApIHtcclxuICAgIC8vIEFNRFxyXG4gICAgZGVmaW5lKCAnaXNvdG9wZS9qcy9pdGVtJyxbXHJcbiAgICAgICAgJ291dGxheWVyL291dGxheWVyJ1xyXG4gICAgICBdLFxyXG4gICAgICBmYWN0b3J5ICk7XHJcbiAgfSBlbHNlIGlmICggdHlwZW9mIGV4cG9ydHMgPT0gJ29iamVjdCcgKSB7XHJcbiAgICAvLyBDb21tb25KU1xyXG4gICAgbW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KFxyXG4gICAgICByZXF1aXJlKCdvdXRsYXllcicpXHJcbiAgICApO1xyXG4gIH0gZWxzZSB7XHJcbiAgICAvLyBicm93c2VyIGdsb2JhbFxyXG4gICAgd2luZG93Lklzb3RvcGUgPSB3aW5kb3cuSXNvdG9wZSB8fCB7fTtcclxuICAgIHdpbmRvdy5Jc290b3BlLkl0ZW0gPSBmYWN0b3J5KFxyXG4gICAgICB3aW5kb3cuT3V0bGF5ZXJcclxuICAgICk7XHJcbiAgfVxyXG5cclxufSggd2luZG93LCBmdW5jdGlvbiBmYWN0b3J5KCBPdXRsYXllciApIHtcclxuJ3VzZSBzdHJpY3QnO1xyXG5cclxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gSXRlbSAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAvL1xyXG5cclxuLy8gc3ViLWNsYXNzIE91dGxheWVyIEl0ZW1cclxuZnVuY3Rpb24gSXRlbSgpIHtcclxuICBPdXRsYXllci5JdGVtLmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKTtcclxufVxyXG5cclxuSXRlbS5wcm90b3R5cGUgPSBuZXcgT3V0bGF5ZXIuSXRlbSgpO1xyXG5cclxuSXRlbS5wcm90b3R5cGUuX2NyZWF0ZSA9IGZ1bmN0aW9uKCkge1xyXG4gIC8vIGFzc2lnbiBpZCwgdXNlZCBmb3Igb3JpZ2luYWwtb3JkZXIgc29ydGluZ1xyXG4gIHRoaXMuaWQgPSB0aGlzLmxheW91dC5pdGVtR1VJRCsrO1xyXG4gIE91dGxheWVyLkl0ZW0ucHJvdG90eXBlLl9jcmVhdGUuY2FsbCggdGhpcyApO1xyXG4gIHRoaXMuc29ydERhdGEgPSB7fTtcclxufTtcclxuXHJcbkl0ZW0ucHJvdG90eXBlLnVwZGF0ZVNvcnREYXRhID0gZnVuY3Rpb24oKSB7XHJcbiAgaWYgKCB0aGlzLmlzSWdub3JlZCApIHtcclxuICAgIHJldHVybjtcclxuICB9XHJcbiAgLy8gZGVmYXVsdCBzb3J0ZXJzXHJcbiAgdGhpcy5zb3J0RGF0YS5pZCA9IHRoaXMuaWQ7XHJcbiAgLy8gZm9yIGJhY2t3YXJkIGNvbXBhdGliaWxpdHlcclxuICB0aGlzLnNvcnREYXRhWydvcmlnaW5hbC1vcmRlciddID0gdGhpcy5pZDtcclxuICB0aGlzLnNvcnREYXRhLnJhbmRvbSA9IE1hdGgucmFuZG9tKCk7XHJcbiAgLy8gZ28gdGhydSBnZXRTb3J0RGF0YSBvYmogYW5kIGFwcGx5IHRoZSBzb3J0ZXJzXHJcbiAgdmFyIGdldFNvcnREYXRhID0gdGhpcy5sYXlvdXQub3B0aW9ucy5nZXRTb3J0RGF0YTtcclxuICB2YXIgc29ydGVycyA9IHRoaXMubGF5b3V0Ll9zb3J0ZXJzO1xyXG4gIGZvciAoIHZhciBrZXkgaW4gZ2V0U29ydERhdGEgKSB7XHJcbiAgICB2YXIgc29ydGVyID0gc29ydGVyc1sga2V5IF07XHJcbiAgICB0aGlzLnNvcnREYXRhWyBrZXkgXSA9IHNvcnRlciggdGhpcy5lbGVtZW50LCB0aGlzICk7XHJcbiAgfVxyXG59O1xyXG5cclxudmFyIF9kZXN0cm95ID0gSXRlbS5wcm90b3R5cGUuZGVzdHJveTtcclxuSXRlbS5wcm90b3R5cGUuZGVzdHJveSA9IGZ1bmN0aW9uKCkge1xyXG4gIC8vIGNhbGwgc3VwZXJcclxuICBfZGVzdHJveS5hcHBseSggdGhpcywgYXJndW1lbnRzICk7XHJcbiAgLy8gcmVzZXQgZGlzcGxheSwgIzc0MVxyXG4gIHRoaXMuY3NzKHtcclxuICAgIGRpc3BsYXk6ICcnXHJcbiAgfSk7XHJcbn07XHJcblxyXG5yZXR1cm4gSXRlbTtcclxuXHJcbn0pKTtcclxuXHJcbi8qKlxyXG4gKiBJc290b3BlIExheW91dE1vZGVcclxuICovXHJcblxyXG4oIGZ1bmN0aW9uKCB3aW5kb3csIGZhY3RvcnkgKSB7XHJcbiAgJ3VzZSBzdHJpY3QnO1xyXG4gIC8vIHVuaXZlcnNhbCBtb2R1bGUgZGVmaW5pdGlvblxyXG5cclxuICBpZiAoIHR5cGVvZiBkZWZpbmUgPT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kICkge1xyXG4gICAgLy8gQU1EXHJcbiAgICBkZWZpbmUoICdpc290b3BlL2pzL2xheW91dC1tb2RlJyxbXHJcbiAgICAgICAgJ2dldC1zaXplL2dldC1zaXplJyxcclxuICAgICAgICAnb3V0bGF5ZXIvb3V0bGF5ZXInXHJcbiAgICAgIF0sXHJcbiAgICAgIGZhY3RvcnkgKTtcclxuICB9IGVsc2UgaWYgKCB0eXBlb2YgZXhwb3J0cyA9PSAnb2JqZWN0JyApIHtcclxuICAgIC8vIENvbW1vbkpTXHJcbiAgICBtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkoXHJcbiAgICAgIHJlcXVpcmUoJ2dldC1zaXplJyksXHJcbiAgICAgIHJlcXVpcmUoJ291dGxheWVyJylcclxuICAgICk7XHJcbiAgfSBlbHNlIHtcclxuICAgIC8vIGJyb3dzZXIgZ2xvYmFsXHJcbiAgICB3aW5kb3cuSXNvdG9wZSA9IHdpbmRvdy5Jc290b3BlIHx8IHt9O1xyXG4gICAgd2luZG93Lklzb3RvcGUuTGF5b3V0TW9kZSA9IGZhY3RvcnkoXHJcbiAgICAgIHdpbmRvdy5nZXRTaXplLFxyXG4gICAgICB3aW5kb3cuT3V0bGF5ZXJcclxuICAgICk7XHJcbiAgfVxyXG5cclxufSggd2luZG93LCBmdW5jdGlvbiBmYWN0b3J5KCBnZXRTaXplLCBPdXRsYXllciApIHtcclxuICAndXNlIHN0cmljdCc7XHJcblxyXG4gIC8vIGxheW91dCBtb2RlIGNsYXNzXHJcbiAgZnVuY3Rpb24gTGF5b3V0TW9kZSggaXNvdG9wZSApIHtcclxuICAgIHRoaXMuaXNvdG9wZSA9IGlzb3RvcGU7XHJcbiAgICAvLyBsaW5rIHByb3BlcnRpZXNcclxuICAgIGlmICggaXNvdG9wZSApIHtcclxuICAgICAgdGhpcy5vcHRpb25zID0gaXNvdG9wZS5vcHRpb25zWyB0aGlzLm5hbWVzcGFjZSBdO1xyXG4gICAgICB0aGlzLmVsZW1lbnQgPSBpc290b3BlLmVsZW1lbnQ7XHJcbiAgICAgIHRoaXMuaXRlbXMgPSBpc290b3BlLmZpbHRlcmVkSXRlbXM7XHJcbiAgICAgIHRoaXMuc2l6ZSA9IGlzb3RvcGUuc2l6ZTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIHNvbWUgbWV0aG9kcyBzaG91bGQganVzdCBkZWZlciB0byBkZWZhdWx0IE91dGxheWVyIG1ldGhvZFxyXG4gICAqIGFuZCByZWZlcmVuY2UgdGhlIElzb3RvcGUgaW5zdGFuY2UgYXMgYHRoaXNgXHJcbiAgKiovXHJcbiAgKCBmdW5jdGlvbigpIHtcclxuICAgIHZhciBmYWNhZGVNZXRob2RzID0gW1xyXG4gICAgICAnX3Jlc2V0TGF5b3V0JyxcclxuICAgICAgJ19nZXRJdGVtTGF5b3V0UG9zaXRpb24nLFxyXG4gICAgICAnX21hbmFnZVN0YW1wJyxcclxuICAgICAgJ19nZXRDb250YWluZXJTaXplJyxcclxuICAgICAgJ19nZXRFbGVtZW50T2Zmc2V0JyxcclxuICAgICAgJ25lZWRzUmVzaXplTGF5b3V0J1xyXG4gICAgXTtcclxuXHJcbiAgICBmb3IgKCB2YXIgaT0wLCBsZW4gPSBmYWNhZGVNZXRob2RzLmxlbmd0aDsgaSA8IGxlbjsgaSsrICkge1xyXG4gICAgICB2YXIgbWV0aG9kTmFtZSA9IGZhY2FkZU1ldGhvZHNbaV07XHJcbiAgICAgIExheW91dE1vZGUucHJvdG90eXBlWyBtZXRob2ROYW1lIF0gPSBnZXRPdXRsYXllck1ldGhvZCggbWV0aG9kTmFtZSApO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIGdldE91dGxheWVyTWV0aG9kKCBtZXRob2ROYW1lICkge1xyXG4gICAgICByZXR1cm4gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgcmV0dXJuIE91dGxheWVyLnByb3RvdHlwZVsgbWV0aG9kTmFtZSBdLmFwcGx5KCB0aGlzLmlzb3RvcGUsIGFyZ3VtZW50cyApO1xyXG4gICAgICB9O1xyXG4gICAgfVxyXG4gIH0pKCk7XHJcblxyXG4gIC8vIC0tLS0tICAtLS0tLSAvL1xyXG5cclxuICAvLyBmb3IgaG9yaXpvbnRhbCBsYXlvdXQgbW9kZXMsIGNoZWNrIHZlcnRpY2FsIHNpemVcclxuICBMYXlvdXRNb2RlLnByb3RvdHlwZS5uZWVkc1ZlcnRpY2FsUmVzaXplTGF5b3V0ID0gZnVuY3Rpb24oKSB7XHJcbiAgICAvLyBkb24ndCB0cmlnZ2VyIGlmIHNpemUgZGlkIG5vdCBjaGFuZ2VcclxuICAgIHZhciBzaXplID0gZ2V0U2l6ZSggdGhpcy5pc290b3BlLmVsZW1lbnQgKTtcclxuICAgIC8vIGNoZWNrIHRoYXQgdGhpcy5zaXplIGFuZCBzaXplIGFyZSB0aGVyZVxyXG4gICAgLy8gSUU4IHRyaWdnZXJzIHJlc2l6ZSBvbiBib2R5IHNpemUgY2hhbmdlLCBzbyB0aGV5IG1pZ2h0IG5vdCBiZVxyXG4gICAgdmFyIGhhc1NpemVzID0gdGhpcy5pc290b3BlLnNpemUgJiYgc2l6ZTtcclxuICAgIHJldHVybiBoYXNTaXplcyAmJiBzaXplLmlubmVySGVpZ2h0ICE9IHRoaXMuaXNvdG9wZS5zaXplLmlubmVySGVpZ2h0O1xyXG4gIH07XHJcblxyXG4gIC8vIC0tLS0tIG1lYXN1cmVtZW50cyAtLS0tLSAvL1xyXG5cclxuICBMYXlvdXRNb2RlLnByb3RvdHlwZS5fZ2V0TWVhc3VyZW1lbnQgPSBmdW5jdGlvbigpIHtcclxuICAgIHRoaXMuaXNvdG9wZS5fZ2V0TWVhc3VyZW1lbnQuYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApO1xyXG4gIH07XHJcblxyXG4gIExheW91dE1vZGUucHJvdG90eXBlLmdldENvbHVtbldpZHRoID0gZnVuY3Rpb24oKSB7XHJcbiAgICB0aGlzLmdldFNlZ21lbnRTaXplKCAnY29sdW1uJywgJ1dpZHRoJyApO1xyXG4gIH07XHJcblxyXG4gIExheW91dE1vZGUucHJvdG90eXBlLmdldFJvd0hlaWdodCA9IGZ1bmN0aW9uKCkge1xyXG4gICAgdGhpcy5nZXRTZWdtZW50U2l6ZSggJ3JvdycsICdIZWlnaHQnICk7XHJcbiAgfTtcclxuXHJcbiAgLyoqXHJcbiAgICogZ2V0IGNvbHVtbldpZHRoIG9yIHJvd0hlaWdodFxyXG4gICAqIHNlZ21lbnQ6ICdjb2x1bW4nIG9yICdyb3cnXHJcbiAgICogc2l6ZSAnV2lkdGgnIG9yICdIZWlnaHQnXHJcbiAgKiovXHJcbiAgTGF5b3V0TW9kZS5wcm90b3R5cGUuZ2V0U2VnbWVudFNpemUgPSBmdW5jdGlvbiggc2VnbWVudCwgc2l6ZSApIHtcclxuICAgIHZhciBzZWdtZW50TmFtZSA9IHNlZ21lbnQgKyBzaXplO1xyXG4gICAgdmFyIG91dGVyU2l6ZSA9ICdvdXRlcicgKyBzaXplO1xyXG4gICAgLy8gY29sdW1uV2lkdGggLyBvdXRlcldpZHRoIC8vIHJvd0hlaWdodCAvIG91dGVySGVpZ2h0XHJcbiAgICB0aGlzLl9nZXRNZWFzdXJlbWVudCggc2VnbWVudE5hbWUsIG91dGVyU2l6ZSApO1xyXG4gICAgLy8gZ290IHJvd0hlaWdodCBvciBjb2x1bW5XaWR0aCwgd2UgY2FuIGNoaWxsXHJcbiAgICBpZiAoIHRoaXNbIHNlZ21lbnROYW1lIF0gKSB7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIC8vIGZhbGwgYmFjayB0byBpdGVtIG9mIGZpcnN0IGVsZW1lbnRcclxuICAgIHZhciBmaXJzdEl0ZW1TaXplID0gdGhpcy5nZXRGaXJzdEl0ZW1TaXplKCk7XHJcbiAgICB0aGlzWyBzZWdtZW50TmFtZSBdID0gZmlyc3RJdGVtU2l6ZSAmJiBmaXJzdEl0ZW1TaXplWyBvdXRlclNpemUgXSB8fFxyXG4gICAgICAvLyBvciBzaXplIG9mIGNvbnRhaW5lclxyXG4gICAgICB0aGlzLmlzb3RvcGUuc2l6ZVsgJ2lubmVyJyArIHNpemUgXTtcclxuICB9O1xyXG5cclxuICBMYXlvdXRNb2RlLnByb3RvdHlwZS5nZXRGaXJzdEl0ZW1TaXplID0gZnVuY3Rpb24oKSB7XHJcbiAgICB2YXIgZmlyc3RJdGVtID0gdGhpcy5pc290b3BlLmZpbHRlcmVkSXRlbXNbMF07XHJcbiAgICByZXR1cm4gZmlyc3RJdGVtICYmIGZpcnN0SXRlbS5lbGVtZW50ICYmIGdldFNpemUoIGZpcnN0SXRlbS5lbGVtZW50ICk7XHJcbiAgfTtcclxuXHJcbiAgLy8gLS0tLS0gbWV0aG9kcyB0aGF0IHNob3VsZCByZWZlcmVuY2UgaXNvdG9wZSAtLS0tLSAvL1xyXG5cclxuICBMYXlvdXRNb2RlLnByb3RvdHlwZS5sYXlvdXQgPSBmdW5jdGlvbigpIHtcclxuICAgIHRoaXMuaXNvdG9wZS5sYXlvdXQuYXBwbHkoIHRoaXMuaXNvdG9wZSwgYXJndW1lbnRzICk7XHJcbiAgfTtcclxuXHJcbiAgTGF5b3V0TW9kZS5wcm90b3R5cGUuZ2V0U2l6ZSA9IGZ1bmN0aW9uKCkge1xyXG4gICAgdGhpcy5pc290b3BlLmdldFNpemUoKTtcclxuICAgIHRoaXMuc2l6ZSA9IHRoaXMuaXNvdG9wZS5zaXplO1xyXG4gIH07XHJcblxyXG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIGNyZWF0ZSAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAvL1xyXG5cclxuICBMYXlvdXRNb2RlLm1vZGVzID0ge307XHJcblxyXG4gIExheW91dE1vZGUuY3JlYXRlID0gZnVuY3Rpb24oIG5hbWVzcGFjZSwgb3B0aW9ucyApIHtcclxuXHJcbiAgICBmdW5jdGlvbiBNb2RlKCkge1xyXG4gICAgICBMYXlvdXRNb2RlLmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKTtcclxuICAgIH1cclxuXHJcbiAgICBNb2RlLnByb3RvdHlwZSA9IG5ldyBMYXlvdXRNb2RlKCk7XHJcblxyXG4gICAgLy8gZGVmYXVsdCBvcHRpb25zXHJcbiAgICBpZiAoIG9wdGlvbnMgKSB7XHJcbiAgICAgIE1vZGUub3B0aW9ucyA9IG9wdGlvbnM7XHJcbiAgICB9XHJcblxyXG4gICAgTW9kZS5wcm90b3R5cGUubmFtZXNwYWNlID0gbmFtZXNwYWNlO1xyXG4gICAgLy8gcmVnaXN0ZXIgaW4gSXNvdG9wZVxyXG4gICAgTGF5b3V0TW9kZS5tb2Rlc1sgbmFtZXNwYWNlIF0gPSBNb2RlO1xyXG5cclxuICAgIHJldHVybiBNb2RlO1xyXG4gIH07XHJcblxyXG4gIHJldHVybiBMYXlvdXRNb2RlO1xyXG5cclxufSkpO1xyXG5cclxuLyohXHJcbiAqIE1hc29ucnkgdjMuMy4xXHJcbiAqIENhc2NhZGluZyBncmlkIGxheW91dCBsaWJyYXJ5XHJcbiAqIGh0dHA6Ly9tYXNvbnJ5LmRlc2FuZHJvLmNvbVxyXG4gKiBNSVQgTGljZW5zZVxyXG4gKiBieSBEYXZpZCBEZVNhbmRyb1xyXG4gKi9cclxuXHJcbiggZnVuY3Rpb24oIHdpbmRvdywgZmFjdG9yeSApIHtcclxuICAndXNlIHN0cmljdCc7XHJcbiAgLy8gdW5pdmVyc2FsIG1vZHVsZSBkZWZpbml0aW9uXHJcbiAgaWYgKCB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgKSB7XHJcbiAgICAvLyBBTURcclxuICAgIGRlZmluZSggJ21hc29ucnkvbWFzb25yeScsW1xyXG4gICAgICAgICdvdXRsYXllci9vdXRsYXllcicsXHJcbiAgICAgICAgJ2dldC1zaXplL2dldC1zaXplJyxcclxuICAgICAgICAnZml6enktdWktdXRpbHMvdXRpbHMnXHJcbiAgICAgIF0sXHJcbiAgICAgIGZhY3RvcnkgKTtcclxuICB9IGVsc2UgaWYgKCB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgKSB7XHJcbiAgICAvLyBDb21tb25KU1xyXG4gICAgbW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KFxyXG4gICAgICByZXF1aXJlKCdvdXRsYXllcicpLFxyXG4gICAgICByZXF1aXJlKCdnZXQtc2l6ZScpLFxyXG4gICAgICByZXF1aXJlKCdmaXp6eS11aS11dGlscycpXHJcbiAgICApO1xyXG4gIH0gZWxzZSB7XHJcbiAgICAvLyBicm93c2VyIGdsb2JhbFxyXG4gICAgd2luZG93Lk1hc29ucnkgPSBmYWN0b3J5KFxyXG4gICAgICB3aW5kb3cuT3V0bGF5ZXIsXHJcbiAgICAgIHdpbmRvdy5nZXRTaXplLFxyXG4gICAgICB3aW5kb3cuZml6enlVSVV0aWxzXHJcbiAgICApO1xyXG4gIH1cclxuXHJcbn0oIHdpbmRvdywgZnVuY3Rpb24gZmFjdG9yeSggT3V0bGF5ZXIsIGdldFNpemUsIHV0aWxzICkge1xyXG5cclxuXHJcblxyXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBtYXNvbnJ5RGVmaW5pdGlvbiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAvL1xyXG5cclxuICAvLyBjcmVhdGUgYW4gT3V0bGF5ZXIgbGF5b3V0IGNsYXNzXHJcbiAgdmFyIE1hc29ucnkgPSBPdXRsYXllci5jcmVhdGUoJ21hc29ucnknKTtcclxuXHJcbiAgTWFzb25yeS5wcm90b3R5cGUuX3Jlc2V0TGF5b3V0ID0gZnVuY3Rpb24oKSB7XHJcbiAgICB0aGlzLmdldFNpemUoKTtcclxuICAgIHRoaXMuX2dldE1lYXN1cmVtZW50KCAnY29sdW1uV2lkdGgnLCAnb3V0ZXJXaWR0aCcgKTtcclxuICAgIHRoaXMuX2dldE1lYXN1cmVtZW50KCAnZ3V0dGVyJywgJ291dGVyV2lkdGgnICk7XHJcbiAgICB0aGlzLm1lYXN1cmVDb2x1bW5zKCk7XHJcblxyXG4gICAgLy8gcmVzZXQgY29sdW1uIFlcclxuICAgIHZhciBpID0gdGhpcy5jb2xzO1xyXG4gICAgdGhpcy5jb2xZcyA9IFtdO1xyXG4gICAgd2hpbGUgKGktLSkge1xyXG4gICAgICB0aGlzLmNvbFlzLnB1c2goIDAgKTtcclxuICAgIH1cclxuXHJcbiAgICB0aGlzLm1heFkgPSAwO1xyXG4gIH07XHJcblxyXG4gIE1hc29ucnkucHJvdG90eXBlLm1lYXN1cmVDb2x1bW5zID0gZnVuY3Rpb24oKSB7XHJcbiAgICB0aGlzLmdldENvbnRhaW5lcldpZHRoKCk7XHJcbiAgICAvLyBpZiBjb2x1bW5XaWR0aCBpcyAwLCBkZWZhdWx0IHRvIG91dGVyV2lkdGggb2YgZmlyc3QgaXRlbVxyXG4gICAgaWYgKCAhdGhpcy5jb2x1bW5XaWR0aCApIHtcclxuICAgICAgdmFyIGZpcnN0SXRlbSA9IHRoaXMuaXRlbXNbMF07XHJcbiAgICAgIHZhciBmaXJzdEl0ZW1FbGVtID0gZmlyc3RJdGVtICYmIGZpcnN0SXRlbS5lbGVtZW50O1xyXG4gICAgICAvLyBjb2x1bW5XaWR0aCBmYWxsIGJhY2sgdG8gaXRlbSBvZiBmaXJzdCBlbGVtZW50XHJcbiAgICAgIHRoaXMuY29sdW1uV2lkdGggPSBmaXJzdEl0ZW1FbGVtICYmIGdldFNpemUoIGZpcnN0SXRlbUVsZW0gKS5vdXRlcldpZHRoIHx8XHJcbiAgICAgICAgLy8gaWYgZmlyc3QgZWxlbSBoYXMgbm8gd2lkdGgsIGRlZmF1bHQgdG8gc2l6ZSBvZiBjb250YWluZXJcclxuICAgICAgICB0aGlzLmNvbnRhaW5lcldpZHRoO1xyXG4gICAgfVxyXG5cclxuICAgIHZhciBjb2x1bW5XaWR0aCA9IHRoaXMuY29sdW1uV2lkdGggKz0gdGhpcy5ndXR0ZXI7XHJcblxyXG4gICAgLy8gY2FsY3VsYXRlIGNvbHVtbnNcclxuICAgIHZhciBjb250YWluZXJXaWR0aCA9IHRoaXMuY29udGFpbmVyV2lkdGggKyB0aGlzLmd1dHRlcjtcclxuICAgIHZhciBjb2xzID0gY29udGFpbmVyV2lkdGggLyBjb2x1bW5XaWR0aDtcclxuICAgIC8vIGZpeCByb3VuZGluZyBlcnJvcnMsIHR5cGljYWxseSB3aXRoIGd1dHRlcnNcclxuICAgIHZhciBleGNlc3MgPSBjb2x1bW5XaWR0aCAtIGNvbnRhaW5lcldpZHRoICUgY29sdW1uV2lkdGg7XHJcbiAgICAvLyBpZiBvdmVyc2hvb3QgaXMgbGVzcyB0aGFuIGEgcGl4ZWwsIHJvdW5kIHVwLCBvdGhlcndpc2UgZmxvb3IgaXRcclxuICAgIHZhciBtYXRoTWV0aG9kID0gZXhjZXNzICYmIGV4Y2VzcyA8IDEgPyAncm91bmQnIDogJ2Zsb29yJztcclxuICAgIGNvbHMgPSBNYXRoWyBtYXRoTWV0aG9kIF0oIGNvbHMgKTtcclxuICAgIHRoaXMuY29scyA9IE1hdGgubWF4KCBjb2xzLCAxICk7XHJcbiAgfTtcclxuXHJcbiAgTWFzb25yeS5wcm90b3R5cGUuZ2V0Q29udGFpbmVyV2lkdGggPSBmdW5jdGlvbigpIHtcclxuICAgIC8vIGNvbnRhaW5lciBpcyBwYXJlbnQgaWYgZml0IHdpZHRoXHJcbiAgICB2YXIgY29udGFpbmVyID0gdGhpcy5vcHRpb25zLmlzRml0V2lkdGggPyB0aGlzLmVsZW1lbnQucGFyZW50Tm9kZSA6IHRoaXMuZWxlbWVudDtcclxuICAgIC8vIGNoZWNrIHRoYXQgdGhpcy5zaXplIGFuZCBzaXplIGFyZSB0aGVyZVxyXG4gICAgLy8gSUU4IHRyaWdnZXJzIHJlc2l6ZSBvbiBib2R5IHNpemUgY2hhbmdlLCBzbyB0aGV5IG1pZ2h0IG5vdCBiZVxyXG4gICAgdmFyIHNpemUgPSBnZXRTaXplKCBjb250YWluZXIgKTtcclxuICAgIHRoaXMuY29udGFpbmVyV2lkdGggPSBzaXplICYmIHNpemUuaW5uZXJXaWR0aDtcclxuICB9O1xyXG5cclxuICBNYXNvbnJ5LnByb3RvdHlwZS5fZ2V0SXRlbUxheW91dFBvc2l0aW9uID0gZnVuY3Rpb24oIGl0ZW0gKSB7XHJcbiAgICBpdGVtLmdldFNpemUoKTtcclxuICAgIC8vIGhvdyBtYW55IGNvbHVtbnMgZG9lcyB0aGlzIGJyaWNrIHNwYW5cclxuICAgIHZhciByZW1haW5kZXIgPSBpdGVtLnNpemUub3V0ZXJXaWR0aCAlIHRoaXMuY29sdW1uV2lkdGg7XHJcbiAgICB2YXIgbWF0aE1ldGhvZCA9IHJlbWFpbmRlciAmJiByZW1haW5kZXIgPCAxID8gJ3JvdW5kJyA6ICdjZWlsJztcclxuICAgIC8vIHJvdW5kIGlmIG9mZiBieSAxIHBpeGVsLCBvdGhlcndpc2UgdXNlIGNlaWxcclxuICAgIHZhciBjb2xTcGFuID0gTWF0aFsgbWF0aE1ldGhvZCBdKCBpdGVtLnNpemUub3V0ZXJXaWR0aCAvIHRoaXMuY29sdW1uV2lkdGggKTtcclxuICAgIGNvbFNwYW4gPSBNYXRoLm1pbiggY29sU3BhbiwgdGhpcy5jb2xzICk7XHJcblxyXG4gICAgdmFyIGNvbEdyb3VwID0gdGhpcy5fZ2V0Q29sR3JvdXAoIGNvbFNwYW4gKTtcclxuICAgIC8vIGdldCB0aGUgbWluaW11bSBZIHZhbHVlIGZyb20gdGhlIGNvbHVtbnNcclxuICAgIHZhciBtaW5pbXVtWSA9IE1hdGgubWluLmFwcGx5KCBNYXRoLCBjb2xHcm91cCApO1xyXG4gICAgdmFyIHNob3J0Q29sSW5kZXggPSB1dGlscy5pbmRleE9mKCBjb2xHcm91cCwgbWluaW11bVkgKTtcclxuXHJcbiAgICAvLyBwb3NpdGlvbiB0aGUgYnJpY2tcclxuICAgIHZhciBwb3NpdGlvbiA9IHtcclxuICAgICAgeDogdGhpcy5jb2x1bW5XaWR0aCAqIHNob3J0Q29sSW5kZXgsXHJcbiAgICAgIHk6IG1pbmltdW1ZXHJcbiAgICB9O1xyXG5cclxuICAgIC8vIGFwcGx5IHNldEhlaWdodCB0byBuZWNlc3NhcnkgY29sdW1uc1xyXG4gICAgdmFyIHNldEhlaWdodCA9IG1pbmltdW1ZICsgaXRlbS5zaXplLm91dGVySGVpZ2h0O1xyXG4gICAgdmFyIHNldFNwYW4gPSB0aGlzLmNvbHMgKyAxIC0gY29sR3JvdXAubGVuZ3RoO1xyXG4gICAgZm9yICggdmFyIGkgPSAwOyBpIDwgc2V0U3BhbjsgaSsrICkge1xyXG4gICAgICB0aGlzLmNvbFlzWyBzaG9ydENvbEluZGV4ICsgaSBdID0gc2V0SGVpZ2h0O1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBwb3NpdGlvbjtcclxuICB9O1xyXG5cclxuICAvKipcclxuICAgKiBAcGFyYW0ge051bWJlcn0gY29sU3BhbiAtIG51bWJlciBvZiBjb2x1bW5zIHRoZSBlbGVtZW50IHNwYW5zXHJcbiAgICogQHJldHVybnMge0FycmF5fSBjb2xHcm91cFxyXG4gICAqL1xyXG4gIE1hc29ucnkucHJvdG90eXBlLl9nZXRDb2xHcm91cCA9IGZ1bmN0aW9uKCBjb2xTcGFuICkge1xyXG4gICAgaWYgKCBjb2xTcGFuIDwgMiApIHtcclxuICAgICAgLy8gaWYgYnJpY2sgc3BhbnMgb25seSBvbmUgY29sdW1uLCB1c2UgYWxsIHRoZSBjb2x1bW4gWXNcclxuICAgICAgcmV0dXJuIHRoaXMuY29sWXM7XHJcbiAgICB9XHJcblxyXG4gICAgdmFyIGNvbEdyb3VwID0gW107XHJcbiAgICAvLyBob3cgbWFueSBkaWZmZXJlbnQgcGxhY2VzIGNvdWxkIHRoaXMgYnJpY2sgZml0IGhvcml6b250YWxseVxyXG4gICAgdmFyIGdyb3VwQ291bnQgPSB0aGlzLmNvbHMgKyAxIC0gY29sU3BhbjtcclxuICAgIC8vIGZvciBlYWNoIGdyb3VwIHBvdGVudGlhbCBob3Jpem9udGFsIHBvc2l0aW9uXHJcbiAgICBmb3IgKCB2YXIgaSA9IDA7IGkgPCBncm91cENvdW50OyBpKysgKSB7XHJcbiAgICAgIC8vIG1ha2UgYW4gYXJyYXkgb2YgY29sWSB2YWx1ZXMgZm9yIHRoYXQgb25lIGdyb3VwXHJcbiAgICAgIHZhciBncm91cENvbFlzID0gdGhpcy5jb2xZcy5zbGljZSggaSwgaSArIGNvbFNwYW4gKTtcclxuICAgICAgLy8gYW5kIGdldCB0aGUgbWF4IHZhbHVlIG9mIHRoZSBhcnJheVxyXG4gICAgICBjb2xHcm91cFtpXSA9IE1hdGgubWF4LmFwcGx5KCBNYXRoLCBncm91cENvbFlzICk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gY29sR3JvdXA7XHJcbiAgfTtcclxuXHJcbiAgTWFzb25yeS5wcm90b3R5cGUuX21hbmFnZVN0YW1wID0gZnVuY3Rpb24oIHN0YW1wICkge1xyXG4gICAgdmFyIHN0YW1wU2l6ZSA9IGdldFNpemUoIHN0YW1wICk7XHJcbiAgICB2YXIgb2Zmc2V0ID0gdGhpcy5fZ2V0RWxlbWVudE9mZnNldCggc3RhbXAgKTtcclxuICAgIC8vIGdldCB0aGUgY29sdW1ucyB0aGF0IHRoaXMgc3RhbXAgYWZmZWN0c1xyXG4gICAgdmFyIGZpcnN0WCA9IHRoaXMub3B0aW9ucy5pc09yaWdpbkxlZnQgPyBvZmZzZXQubGVmdCA6IG9mZnNldC5yaWdodDtcclxuICAgIHZhciBsYXN0WCA9IGZpcnN0WCArIHN0YW1wU2l6ZS5vdXRlcldpZHRoO1xyXG4gICAgdmFyIGZpcnN0Q29sID0gTWF0aC5mbG9vciggZmlyc3RYIC8gdGhpcy5jb2x1bW5XaWR0aCApO1xyXG4gICAgZmlyc3RDb2wgPSBNYXRoLm1heCggMCwgZmlyc3RDb2wgKTtcclxuICAgIHZhciBsYXN0Q29sID0gTWF0aC5mbG9vciggbGFzdFggLyB0aGlzLmNvbHVtbldpZHRoICk7XHJcbiAgICAvLyBsYXN0Q29sIHNob3VsZCBub3QgZ28gb3ZlciBpZiBtdWx0aXBsZSBvZiBjb2x1bW5XaWR0aCAjNDI1XHJcbiAgICBsYXN0Q29sIC09IGxhc3RYICUgdGhpcy5jb2x1bW5XaWR0aCA/IDAgOiAxO1xyXG4gICAgbGFzdENvbCA9IE1hdGgubWluKCB0aGlzLmNvbHMgLSAxLCBsYXN0Q29sICk7XHJcbiAgICAvLyBzZXQgY29sWXMgdG8gYm90dG9tIG9mIHRoZSBzdGFtcFxyXG4gICAgdmFyIHN0YW1wTWF4WSA9ICggdGhpcy5vcHRpb25zLmlzT3JpZ2luVG9wID8gb2Zmc2V0LnRvcCA6IG9mZnNldC5ib3R0b20gKSArXHJcbiAgICAgIHN0YW1wU2l6ZS5vdXRlckhlaWdodDtcclxuICAgIGZvciAoIHZhciBpID0gZmlyc3RDb2w7IGkgPD0gbGFzdENvbDsgaSsrICkge1xyXG4gICAgICB0aGlzLmNvbFlzW2ldID0gTWF0aC5tYXgoIHN0YW1wTWF4WSwgdGhpcy5jb2xZc1tpXSApO1xyXG4gICAgfVxyXG4gIH07XHJcblxyXG4gIE1hc29ucnkucHJvdG90eXBlLl9nZXRDb250YWluZXJTaXplID0gZnVuY3Rpb24oKSB7XHJcbiAgICB0aGlzLm1heFkgPSBNYXRoLm1heC5hcHBseSggTWF0aCwgdGhpcy5jb2xZcyApO1xyXG4gICAgdmFyIHNpemUgPSB7XHJcbiAgICAgIGhlaWdodDogdGhpcy5tYXhZXHJcbiAgICB9O1xyXG5cclxuICAgIGlmICggdGhpcy5vcHRpb25zLmlzRml0V2lkdGggKSB7XHJcbiAgICAgIHNpemUud2lkdGggPSB0aGlzLl9nZXRDb250YWluZXJGaXRXaWR0aCgpO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBzaXplO1xyXG4gIH07XHJcblxyXG4gIE1hc29ucnkucHJvdG90eXBlLl9nZXRDb250YWluZXJGaXRXaWR0aCA9IGZ1bmN0aW9uKCkge1xyXG4gICAgdmFyIHVudXNlZENvbHMgPSAwO1xyXG4gICAgLy8gY291bnQgdW51c2VkIGNvbHVtbnNcclxuICAgIHZhciBpID0gdGhpcy5jb2xzO1xyXG4gICAgd2hpbGUgKCAtLWkgKSB7XHJcbiAgICAgIGlmICggdGhpcy5jb2xZc1tpXSAhPT0gMCApIHtcclxuICAgICAgICBicmVhaztcclxuICAgICAgfVxyXG4gICAgICB1bnVzZWRDb2xzKys7XHJcbiAgICB9XHJcbiAgICAvLyBmaXQgY29udGFpbmVyIHRvIGNvbHVtbnMgdGhhdCBoYXZlIGJlZW4gdXNlZFxyXG4gICAgcmV0dXJuICggdGhpcy5jb2xzIC0gdW51c2VkQ29scyApICogdGhpcy5jb2x1bW5XaWR0aCAtIHRoaXMuZ3V0dGVyO1xyXG4gIH07XHJcblxyXG4gIE1hc29ucnkucHJvdG90eXBlLm5lZWRzUmVzaXplTGF5b3V0ID0gZnVuY3Rpb24oKSB7XHJcbiAgICB2YXIgcHJldmlvdXNXaWR0aCA9IHRoaXMuY29udGFpbmVyV2lkdGg7XHJcbiAgICB0aGlzLmdldENvbnRhaW5lcldpZHRoKCk7XHJcbiAgICByZXR1cm4gcHJldmlvdXNXaWR0aCAhPT0gdGhpcy5jb250YWluZXJXaWR0aDtcclxuICB9O1xyXG5cclxuICByZXR1cm4gTWFzb25yeTtcclxuXHJcbn0pKTtcclxuXHJcbi8qIVxyXG4gKiBNYXNvbnJ5IGxheW91dCBtb2RlXHJcbiAqIHN1Yi1jbGFzc2VzIE1hc29ucnlcclxuICogaHR0cDovL21hc29ucnkuZGVzYW5kcm8uY29tXHJcbiAqL1xyXG5cclxuKCBmdW5jdGlvbiggd2luZG93LCBmYWN0b3J5ICkge1xyXG4gICd1c2Ugc3RyaWN0JztcclxuICAvLyB1bml2ZXJzYWwgbW9kdWxlIGRlZmluaXRpb25cclxuICBpZiAoIHR5cGVvZiBkZWZpbmUgPT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kICkge1xyXG4gICAgLy8gQU1EXHJcbiAgICBkZWZpbmUoICdpc290b3BlL2pzL2xheW91dC1tb2Rlcy9tYXNvbnJ5JyxbXHJcbiAgICAgICAgJy4uL2xheW91dC1tb2RlJyxcclxuICAgICAgICAnbWFzb25yeS9tYXNvbnJ5J1xyXG4gICAgICBdLFxyXG4gICAgICBmYWN0b3J5ICk7XHJcbiAgfSBlbHNlIGlmICggdHlwZW9mIGV4cG9ydHMgPT0gJ29iamVjdCcgKSB7XHJcbiAgICAvLyBDb21tb25KU1xyXG4gICAgbW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KFxyXG4gICAgICByZXF1aXJlKCcuLi9sYXlvdXQtbW9kZScpLFxyXG4gICAgICByZXF1aXJlKCdtYXNvbnJ5LWxheW91dCcpXHJcbiAgICApO1xyXG4gIH0gZWxzZSB7XHJcbiAgICAvLyBicm93c2VyIGdsb2JhbFxyXG4gICAgZmFjdG9yeShcclxuICAgICAgd2luZG93Lklzb3RvcGUuTGF5b3V0TW9kZSxcclxuICAgICAgd2luZG93Lk1hc29ucnlcclxuICAgICk7XHJcbiAgfVxyXG5cclxufSggd2luZG93LCBmdW5jdGlvbiBmYWN0b3J5KCBMYXlvdXRNb2RlLCBNYXNvbnJ5ICkge1xyXG4ndXNlIHN0cmljdCc7XHJcblxyXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBoZWxwZXJzIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIC8vXHJcblxyXG4vLyBleHRlbmQgb2JqZWN0c1xyXG5mdW5jdGlvbiBleHRlbmQoIGEsIGIgKSB7XHJcbiAgZm9yICggdmFyIHByb3AgaW4gYiApIHtcclxuICAgIGFbIHByb3AgXSA9IGJbIHByb3AgXTtcclxuICB9XHJcbiAgcmV0dXJuIGE7XHJcbn1cclxuXHJcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIG1hc29ucnlEZWZpbml0aW9uIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIC8vXHJcblxyXG4gIC8vIGNyZWF0ZSBhbiBPdXRsYXllciBsYXlvdXQgY2xhc3NcclxuICB2YXIgTWFzb25yeU1vZGUgPSBMYXlvdXRNb2RlLmNyZWF0ZSgnbWFzb25yeScpO1xyXG5cclxuICAvLyBzYXZlIG9uIHRvIHRoZXNlIG1ldGhvZHNcclxuICB2YXIgX2dldEVsZW1lbnRPZmZzZXQgPSBNYXNvbnJ5TW9kZS5wcm90b3R5cGUuX2dldEVsZW1lbnRPZmZzZXQ7XHJcbiAgdmFyIGxheW91dCA9IE1hc29ucnlNb2RlLnByb3RvdHlwZS5sYXlvdXQ7XHJcbiAgdmFyIF9nZXRNZWFzdXJlbWVudCA9IE1hc29ucnlNb2RlLnByb3RvdHlwZS5fZ2V0TWVhc3VyZW1lbnQ7XHJcblxyXG4gIC8vIHN1Yi1jbGFzcyBNYXNvbnJ5XHJcbiAgZXh0ZW5kKCBNYXNvbnJ5TW9kZS5wcm90b3R5cGUsIE1hc29ucnkucHJvdG90eXBlICk7XHJcblxyXG4gIC8vIHNldCBiYWNrLCBhcyBpdCB3YXMgb3ZlcndyaXR0ZW4gYnkgTWFzb25yeVxyXG4gIE1hc29ucnlNb2RlLnByb3RvdHlwZS5fZ2V0RWxlbWVudE9mZnNldCA9IF9nZXRFbGVtZW50T2Zmc2V0O1xyXG4gIE1hc29ucnlNb2RlLnByb3RvdHlwZS5sYXlvdXQgPSBsYXlvdXQ7XHJcbiAgTWFzb25yeU1vZGUucHJvdG90eXBlLl9nZXRNZWFzdXJlbWVudCA9IF9nZXRNZWFzdXJlbWVudDtcclxuXHJcbiAgdmFyIG1lYXN1cmVDb2x1bW5zID0gTWFzb25yeU1vZGUucHJvdG90eXBlLm1lYXN1cmVDb2x1bW5zO1xyXG4gIE1hc29ucnlNb2RlLnByb3RvdHlwZS5tZWFzdXJlQ29sdW1ucyA9IGZ1bmN0aW9uKCkge1xyXG4gICAgLy8gc2V0IGl0ZW1zLCB1c2VkIGlmIG1lYXN1cmluZyBmaXJzdCBpdGVtXHJcbiAgICB0aGlzLml0ZW1zID0gdGhpcy5pc290b3BlLmZpbHRlcmVkSXRlbXM7XHJcbiAgICBtZWFzdXJlQ29sdW1ucy5jYWxsKCB0aGlzICk7XHJcbiAgfTtcclxuXHJcbiAgLy8gSEFDSyBjb3B5IG92ZXIgaXNPcmlnaW5MZWZ0L1RvcCBvcHRpb25zXHJcbiAgdmFyIF9tYW5hZ2VTdGFtcCA9IE1hc29ucnlNb2RlLnByb3RvdHlwZS5fbWFuYWdlU3RhbXA7XHJcbiAgTWFzb25yeU1vZGUucHJvdG90eXBlLl9tYW5hZ2VTdGFtcCA9IGZ1bmN0aW9uKCkge1xyXG4gICAgdGhpcy5vcHRpb25zLmlzT3JpZ2luTGVmdCA9IHRoaXMuaXNvdG9wZS5vcHRpb25zLmlzT3JpZ2luTGVmdDtcclxuICAgIHRoaXMub3B0aW9ucy5pc09yaWdpblRvcCA9IHRoaXMuaXNvdG9wZS5vcHRpb25zLmlzT3JpZ2luVG9wO1xyXG4gICAgX21hbmFnZVN0YW1wLmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKTtcclxuICB9O1xyXG5cclxuICByZXR1cm4gTWFzb25yeU1vZGU7XHJcblxyXG59KSk7XHJcblxyXG4vKipcclxuICogZml0Um93cyBsYXlvdXQgbW9kZVxyXG4gKi9cclxuXHJcbiggZnVuY3Rpb24oIHdpbmRvdywgZmFjdG9yeSApIHtcclxuICAndXNlIHN0cmljdCc7XHJcbiAgLy8gdW5pdmVyc2FsIG1vZHVsZSBkZWZpbml0aW9uXHJcbiAgaWYgKCB0eXBlb2YgZGVmaW5lID09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCApIHtcclxuICAgIC8vIEFNRFxyXG4gICAgZGVmaW5lKCAnaXNvdG9wZS9qcy9sYXlvdXQtbW9kZXMvZml0LXJvd3MnLFtcclxuICAgICAgICAnLi4vbGF5b3V0LW1vZGUnXHJcbiAgICAgIF0sXHJcbiAgICAgIGZhY3RvcnkgKTtcclxuICB9IGVsc2UgaWYgKCB0eXBlb2YgZXhwb3J0cyA9PSAnb2JqZWN0JyApIHtcclxuICAgIC8vIENvbW1vbkpTXHJcbiAgICBtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkoXHJcbiAgICAgIHJlcXVpcmUoJy4uL2xheW91dC1tb2RlJylcclxuICAgICk7XHJcbiAgfSBlbHNlIHtcclxuICAgIC8vIGJyb3dzZXIgZ2xvYmFsXHJcbiAgICBmYWN0b3J5KFxyXG4gICAgICB3aW5kb3cuSXNvdG9wZS5MYXlvdXRNb2RlXHJcbiAgICApO1xyXG4gIH1cclxuXHJcbn0oIHdpbmRvdywgZnVuY3Rpb24gZmFjdG9yeSggTGF5b3V0TW9kZSApIHtcclxuJ3VzZSBzdHJpY3QnO1xyXG5cclxudmFyIEZpdFJvd3MgPSBMYXlvdXRNb2RlLmNyZWF0ZSgnZml0Um93cycpO1xyXG5cclxuRml0Um93cy5wcm90b3R5cGUuX3Jlc2V0TGF5b3V0ID0gZnVuY3Rpb24oKSB7XHJcbiAgdGhpcy54ID0gMDtcclxuICB0aGlzLnkgPSAwO1xyXG4gIHRoaXMubWF4WSA9IDA7XHJcbiAgdGhpcy5fZ2V0TWVhc3VyZW1lbnQoICdndXR0ZXInLCAnb3V0ZXJXaWR0aCcgKTtcclxufTtcclxuXHJcbkZpdFJvd3MucHJvdG90eXBlLl9nZXRJdGVtTGF5b3V0UG9zaXRpb24gPSBmdW5jdGlvbiggaXRlbSApIHtcclxuICBpdGVtLmdldFNpemUoKTtcclxuXHJcbiAgdmFyIGl0ZW1XaWR0aCA9IGl0ZW0uc2l6ZS5vdXRlcldpZHRoICsgdGhpcy5ndXR0ZXI7XHJcbiAgLy8gaWYgdGhpcyBlbGVtZW50IGNhbm5vdCBmaXQgaW4gdGhlIGN1cnJlbnQgcm93XHJcbiAgdmFyIGNvbnRhaW5lcldpZHRoID0gdGhpcy5pc290b3BlLnNpemUuaW5uZXJXaWR0aCArIHRoaXMuZ3V0dGVyO1xyXG4gIGlmICggdGhpcy54ICE9PSAwICYmIGl0ZW1XaWR0aCArIHRoaXMueCA+IGNvbnRhaW5lcldpZHRoICkge1xyXG4gICAgdGhpcy54ID0gMDtcclxuICAgIHRoaXMueSA9IHRoaXMubWF4WTtcclxuICB9XHJcblxyXG4gIHZhciBwb3NpdGlvbiA9IHtcclxuICAgIHg6IHRoaXMueCxcclxuICAgIHk6IHRoaXMueVxyXG4gIH07XHJcblxyXG4gIHRoaXMubWF4WSA9IE1hdGgubWF4KCB0aGlzLm1heFksIHRoaXMueSArIGl0ZW0uc2l6ZS5vdXRlckhlaWdodCApO1xyXG4gIHRoaXMueCArPSBpdGVtV2lkdGg7XHJcblxyXG4gIHJldHVybiBwb3NpdGlvbjtcclxufTtcclxuXHJcbkZpdFJvd3MucHJvdG90eXBlLl9nZXRDb250YWluZXJTaXplID0gZnVuY3Rpb24oKSB7XHJcbiAgcmV0dXJuIHsgaGVpZ2h0OiB0aGlzLm1heFkgfTtcclxufTtcclxuXHJcbnJldHVybiBGaXRSb3dzO1xyXG5cclxufSkpO1xyXG5cclxuLyoqXHJcbiAqIHZlcnRpY2FsIGxheW91dCBtb2RlXHJcbiAqL1xyXG5cclxuKCBmdW5jdGlvbiggd2luZG93LCBmYWN0b3J5ICkge1xyXG4gICd1c2Ugc3RyaWN0JztcclxuICAvLyB1bml2ZXJzYWwgbW9kdWxlIGRlZmluaXRpb25cclxuICBpZiAoIHR5cGVvZiBkZWZpbmUgPT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kICkge1xyXG4gICAgLy8gQU1EXHJcbiAgICBkZWZpbmUoICdpc290b3BlL2pzL2xheW91dC1tb2Rlcy92ZXJ0aWNhbCcsW1xyXG4gICAgICAgICcuLi9sYXlvdXQtbW9kZSdcclxuICAgICAgXSxcclxuICAgICAgZmFjdG9yeSApO1xyXG4gIH0gZWxzZSBpZiAoIHR5cGVvZiBleHBvcnRzID09ICdvYmplY3QnICkge1xyXG4gICAgLy8gQ29tbW9uSlNcclxuICAgIG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeShcclxuICAgICAgcmVxdWlyZSgnLi4vbGF5b3V0LW1vZGUnKVxyXG4gICAgKTtcclxuICB9IGVsc2Uge1xyXG4gICAgLy8gYnJvd3NlciBnbG9iYWxcclxuICAgIGZhY3RvcnkoXHJcbiAgICAgIHdpbmRvdy5Jc290b3BlLkxheW91dE1vZGVcclxuICAgICk7XHJcbiAgfVxyXG5cclxufSggd2luZG93LCBmdW5jdGlvbiBmYWN0b3J5KCBMYXlvdXRNb2RlICkge1xyXG4ndXNlIHN0cmljdCc7XHJcblxyXG52YXIgVmVydGljYWwgPSBMYXlvdXRNb2RlLmNyZWF0ZSggJ3ZlcnRpY2FsJywge1xyXG4gIGhvcml6b250YWxBbGlnbm1lbnQ6IDBcclxufSk7XHJcblxyXG5WZXJ0aWNhbC5wcm90b3R5cGUuX3Jlc2V0TGF5b3V0ID0gZnVuY3Rpb24oKSB7XHJcbiAgdGhpcy55ID0gMDtcclxufTtcclxuXHJcblZlcnRpY2FsLnByb3RvdHlwZS5fZ2V0SXRlbUxheW91dFBvc2l0aW9uID0gZnVuY3Rpb24oIGl0ZW0gKSB7XHJcbiAgaXRlbS5nZXRTaXplKCk7XHJcbiAgdmFyIHggPSAoIHRoaXMuaXNvdG9wZS5zaXplLmlubmVyV2lkdGggLSBpdGVtLnNpemUub3V0ZXJXaWR0aCApICpcclxuICAgIHRoaXMub3B0aW9ucy5ob3Jpem9udGFsQWxpZ25tZW50O1xyXG4gIHZhciB5ID0gdGhpcy55O1xyXG4gIHRoaXMueSArPSBpdGVtLnNpemUub3V0ZXJIZWlnaHQ7XHJcbiAgcmV0dXJuIHsgeDogeCwgeTogeSB9O1xyXG59O1xyXG5cclxuVmVydGljYWwucHJvdG90eXBlLl9nZXRDb250YWluZXJTaXplID0gZnVuY3Rpb24oKSB7XHJcbiAgcmV0dXJuIHsgaGVpZ2h0OiB0aGlzLnkgfTtcclxufTtcclxuXHJcbnJldHVybiBWZXJ0aWNhbDtcclxuXHJcbn0pKTtcclxuXHJcbi8qIVxyXG4gKiBJc290b3BlIHYyLjIuMlxyXG4gKlxyXG4gKiBMaWNlbnNlZCBHUEx2MyBmb3Igb3BlbiBzb3VyY2UgdXNlXHJcbiAqIG9yIElzb3RvcGUgQ29tbWVyY2lhbCBMaWNlbnNlIGZvciBjb21tZXJjaWFsIHVzZVxyXG4gKlxyXG4gKiBodHRwOi8vaXNvdG9wZS5tZXRhZml6enkuY29cclxuICogQ29weXJpZ2h0IDIwMTUgTWV0YWZpenp5XHJcbiAqL1xyXG5cclxuKCBmdW5jdGlvbiggd2luZG93LCBmYWN0b3J5ICkge1xyXG4gICd1c2Ugc3RyaWN0JztcclxuICAvLyB1bml2ZXJzYWwgbW9kdWxlIGRlZmluaXRpb25cclxuXHJcbiAgaWYgKCB0eXBlb2YgZGVmaW5lID09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCApIHtcclxuICAgIC8vIEFNRFxyXG4gICAgZGVmaW5lKCBbXHJcbiAgICAgICAgJ291dGxheWVyL291dGxheWVyJyxcclxuICAgICAgICAnZ2V0LXNpemUvZ2V0LXNpemUnLFxyXG4gICAgICAgICdtYXRjaGVzLXNlbGVjdG9yL21hdGNoZXMtc2VsZWN0b3InLFxyXG4gICAgICAgICdmaXp6eS11aS11dGlscy91dGlscycsXHJcbiAgICAgICAgJ2lzb3RvcGUvanMvaXRlbScsXHJcbiAgICAgICAgJ2lzb3RvcGUvanMvbGF5b3V0LW1vZGUnLFxyXG4gICAgICAgIC8vIGluY2x1ZGUgZGVmYXVsdCBsYXlvdXQgbW9kZXNcclxuICAgICAgICAnaXNvdG9wZS9qcy9sYXlvdXQtbW9kZXMvbWFzb25yeScsXHJcbiAgICAgICAgJ2lzb3RvcGUvanMvbGF5b3V0LW1vZGVzL2ZpdC1yb3dzJyxcclxuICAgICAgICAnaXNvdG9wZS9qcy9sYXlvdXQtbW9kZXMvdmVydGljYWwnXHJcbiAgICAgIF0sXHJcbiAgICAgIGZ1bmN0aW9uKCBPdXRsYXllciwgZ2V0U2l6ZSwgbWF0Y2hlc1NlbGVjdG9yLCB1dGlscywgSXRlbSwgTGF5b3V0TW9kZSApIHtcclxuICAgICAgICByZXR1cm4gZmFjdG9yeSggd2luZG93LCBPdXRsYXllciwgZ2V0U2l6ZSwgbWF0Y2hlc1NlbGVjdG9yLCB1dGlscywgSXRlbSwgTGF5b3V0TW9kZSApO1xyXG4gICAgICB9KTtcclxuICB9IGVsc2UgaWYgKCB0eXBlb2YgZXhwb3J0cyA9PSAnb2JqZWN0JyApIHtcclxuICAgIC8vIENvbW1vbkpTXHJcbiAgICBtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkoXHJcbiAgICAgIHdpbmRvdyxcclxuICAgICAgcmVxdWlyZSgnb3V0bGF5ZXInKSxcclxuICAgICAgcmVxdWlyZSgnZ2V0LXNpemUnKSxcclxuICAgICAgcmVxdWlyZSgnZGVzYW5kcm8tbWF0Y2hlcy1zZWxlY3RvcicpLFxyXG4gICAgICByZXF1aXJlKCdmaXp6eS11aS11dGlscycpLFxyXG4gICAgICByZXF1aXJlKCcuL2l0ZW0nKSxcclxuICAgICAgcmVxdWlyZSgnLi9sYXlvdXQtbW9kZScpLFxyXG4gICAgICAvLyBpbmNsdWRlIGRlZmF1bHQgbGF5b3V0IG1vZGVzXHJcbiAgICAgIHJlcXVpcmUoJy4vbGF5b3V0LW1vZGVzL21hc29ucnknKSxcclxuICAgICAgcmVxdWlyZSgnLi9sYXlvdXQtbW9kZXMvZml0LXJvd3MnKSxcclxuICAgICAgcmVxdWlyZSgnLi9sYXlvdXQtbW9kZXMvdmVydGljYWwnKVxyXG4gICAgKTtcclxuICB9IGVsc2Uge1xyXG4gICAgLy8gYnJvd3NlciBnbG9iYWxcclxuICAgIHdpbmRvdy5Jc290b3BlID0gZmFjdG9yeShcclxuICAgICAgd2luZG93LFxyXG4gICAgICB3aW5kb3cuT3V0bGF5ZXIsXHJcbiAgICAgIHdpbmRvdy5nZXRTaXplLFxyXG4gICAgICB3aW5kb3cubWF0Y2hlc1NlbGVjdG9yLFxyXG4gICAgICB3aW5kb3cuZml6enlVSVV0aWxzLFxyXG4gICAgICB3aW5kb3cuSXNvdG9wZS5JdGVtLFxyXG4gICAgICB3aW5kb3cuSXNvdG9wZS5MYXlvdXRNb2RlXHJcbiAgICApO1xyXG4gIH1cclxuXHJcbn0oIHdpbmRvdywgZnVuY3Rpb24gZmFjdG9yeSggd2luZG93LCBPdXRsYXllciwgZ2V0U2l6ZSwgbWF0Y2hlc1NlbGVjdG9yLCB1dGlscyxcclxuICBJdGVtLCBMYXlvdXRNb2RlICkge1xyXG5cclxuXHJcblxyXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSB2YXJzIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIC8vXHJcblxyXG52YXIgalF1ZXJ5ID0gd2luZG93LmpRdWVyeTtcclxuXHJcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIGhlbHBlcnMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gLy9cclxuXHJcbnZhciB0cmltID0gU3RyaW5nLnByb3RvdHlwZS50cmltID9cclxuICBmdW5jdGlvbiggc3RyICkge1xyXG4gICAgcmV0dXJuIHN0ci50cmltKCk7XHJcbiAgfSA6XHJcbiAgZnVuY3Rpb24oIHN0ciApIHtcclxuICAgIHJldHVybiBzdHIucmVwbGFjZSggL15cXHMrfFxccyskL2csICcnICk7XHJcbiAgfTtcclxuXHJcbnZhciBkb2NFbGVtID0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xyXG5cclxudmFyIGdldFRleHQgPSBkb2NFbGVtLnRleHRDb250ZW50ID9cclxuICBmdW5jdGlvbiggZWxlbSApIHtcclxuICAgIHJldHVybiBlbGVtLnRleHRDb250ZW50O1xyXG4gIH0gOlxyXG4gIGZ1bmN0aW9uKCBlbGVtICkge1xyXG4gICAgcmV0dXJuIGVsZW0uaW5uZXJUZXh0O1xyXG4gIH07XHJcblxyXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBpc290b3BlRGVmaW5pdGlvbiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAvL1xyXG5cclxuICAvLyBjcmVhdGUgYW4gT3V0bGF5ZXIgbGF5b3V0IGNsYXNzXHJcbiAgdmFyIElzb3RvcGUgPSBPdXRsYXllci5jcmVhdGUoICdpc290b3BlJywge1xyXG4gICAgbGF5b3V0TW9kZTogXCJtYXNvbnJ5XCIsXHJcbiAgICBpc0pRdWVyeUZpbHRlcmluZzogdHJ1ZSxcclxuICAgIHNvcnRBc2NlbmRpbmc6IHRydWVcclxuICB9KTtcclxuXHJcbiAgSXNvdG9wZS5JdGVtID0gSXRlbTtcclxuICBJc290b3BlLkxheW91dE1vZGUgPSBMYXlvdXRNb2RlO1xyXG5cclxuICBJc290b3BlLnByb3RvdHlwZS5fY3JlYXRlID0gZnVuY3Rpb24oKSB7XHJcbiAgICB0aGlzLml0ZW1HVUlEID0gMDtcclxuICAgIC8vIGZ1bmN0aW9ucyB0aGF0IHNvcnQgaXRlbXNcclxuICAgIHRoaXMuX3NvcnRlcnMgPSB7fTtcclxuICAgIHRoaXMuX2dldFNvcnRlcnMoKTtcclxuICAgIC8vIGNhbGwgc3VwZXJcclxuICAgIE91dGxheWVyLnByb3RvdHlwZS5fY3JlYXRlLmNhbGwoIHRoaXMgKTtcclxuXHJcbiAgICAvLyBjcmVhdGUgbGF5b3V0IG1vZGVzXHJcbiAgICB0aGlzLm1vZGVzID0ge307XHJcbiAgICAvLyBzdGFydCBmaWx0ZXJlZEl0ZW1zIHdpdGggYWxsIGl0ZW1zXHJcbiAgICB0aGlzLmZpbHRlcmVkSXRlbXMgPSB0aGlzLml0ZW1zO1xyXG4gICAgLy8ga2VlcCBvZiB0cmFjayBvZiBzb3J0QnlzXHJcbiAgICB0aGlzLnNvcnRIaXN0b3J5ID0gWyAnb3JpZ2luYWwtb3JkZXInIF07XHJcbiAgICAvLyBjcmVhdGUgZnJvbSByZWdpc3RlcmVkIGxheW91dCBtb2Rlc1xyXG4gICAgZm9yICggdmFyIG5hbWUgaW4gTGF5b3V0TW9kZS5tb2RlcyApIHtcclxuICAgICAgdGhpcy5faW5pdExheW91dE1vZGUoIG5hbWUgKTtcclxuICAgIH1cclxuICB9O1xyXG5cclxuICBJc290b3BlLnByb3RvdHlwZS5yZWxvYWRJdGVtcyA9IGZ1bmN0aW9uKCkge1xyXG4gICAgLy8gcmVzZXQgaXRlbSBJRCBjb3VudGVyXHJcbiAgICB0aGlzLml0ZW1HVUlEID0gMDtcclxuICAgIC8vIGNhbGwgc3VwZXJcclxuICAgIE91dGxheWVyLnByb3RvdHlwZS5yZWxvYWRJdGVtcy5jYWxsKCB0aGlzICk7XHJcbiAgfTtcclxuXHJcbiAgSXNvdG9wZS5wcm90b3R5cGUuX2l0ZW1pemUgPSBmdW5jdGlvbigpIHtcclxuICAgIHZhciBpdGVtcyA9IE91dGxheWVyLnByb3RvdHlwZS5faXRlbWl6ZS5hcHBseSggdGhpcywgYXJndW1lbnRzICk7XHJcbiAgICAvLyBhc3NpZ24gSUQgZm9yIG9yaWdpbmFsLW9yZGVyXHJcbiAgICBmb3IgKCB2YXIgaT0wLCBsZW4gPSBpdGVtcy5sZW5ndGg7IGkgPCBsZW47IGkrKyApIHtcclxuICAgICAgdmFyIGl0ZW0gPSBpdGVtc1tpXTtcclxuICAgICAgaXRlbS5pZCA9IHRoaXMuaXRlbUdVSUQrKztcclxuICAgIH1cclxuICAgIHRoaXMuX3VwZGF0ZUl0ZW1zU29ydERhdGEoIGl0ZW1zICk7XHJcbiAgICByZXR1cm4gaXRlbXM7XHJcbiAgfTtcclxuXHJcblxyXG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIGxheW91dCAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAvL1xyXG5cclxuICBJc290b3BlLnByb3RvdHlwZS5faW5pdExheW91dE1vZGUgPSBmdW5jdGlvbiggbmFtZSApIHtcclxuICAgIHZhciBNb2RlID0gTGF5b3V0TW9kZS5tb2Rlc1sgbmFtZSBdO1xyXG4gICAgLy8gc2V0IG1vZGUgb3B0aW9uc1xyXG4gICAgLy8gSEFDSyBleHRlbmQgaW5pdGlhbCBvcHRpb25zLCBiYWNrLWZpbGwgaW4gZGVmYXVsdCBvcHRpb25zXHJcbiAgICB2YXIgaW5pdGlhbE9wdHMgPSB0aGlzLm9wdGlvbnNbIG5hbWUgXSB8fCB7fTtcclxuICAgIHRoaXMub3B0aW9uc1sgbmFtZSBdID0gTW9kZS5vcHRpb25zID9cclxuICAgICAgdXRpbHMuZXh0ZW5kKCBNb2RlLm9wdGlvbnMsIGluaXRpYWxPcHRzICkgOiBpbml0aWFsT3B0cztcclxuICAgIC8vIGluaXQgbGF5b3V0IG1vZGUgaW5zdGFuY2VcclxuICAgIHRoaXMubW9kZXNbIG5hbWUgXSA9IG5ldyBNb2RlKCB0aGlzICk7XHJcbiAgfTtcclxuXHJcblxyXG4gIElzb3RvcGUucHJvdG90eXBlLmxheW91dCA9IGZ1bmN0aW9uKCkge1xyXG4gICAgLy8gaWYgZmlyc3QgdGltZSBkb2luZyBsYXlvdXQsIGRvIGFsbCBtYWdpY1xyXG4gICAgaWYgKCAhdGhpcy5faXNMYXlvdXRJbml0ZWQgJiYgdGhpcy5vcHRpb25zLmlzSW5pdExheW91dCApIHtcclxuICAgICAgdGhpcy5hcnJhbmdlKCk7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIHRoaXMuX2xheW91dCgpO1xyXG4gIH07XHJcblxyXG4gIC8vIHByaXZhdGUgbWV0aG9kIHRvIGJlIHVzZWQgaW4gbGF5b3V0KCkgJiBtYWdpYygpXHJcbiAgSXNvdG9wZS5wcm90b3R5cGUuX2xheW91dCA9IGZ1bmN0aW9uKCkge1xyXG4gICAgLy8gZG9uJ3QgYW5pbWF0ZSBmaXJzdCBsYXlvdXRcclxuICAgIHZhciBpc0luc3RhbnQgPSB0aGlzLl9nZXRJc0luc3RhbnQoKTtcclxuICAgIC8vIGxheW91dCBmbG93XHJcbiAgICB0aGlzLl9yZXNldExheW91dCgpO1xyXG4gICAgdGhpcy5fbWFuYWdlU3RhbXBzKCk7XHJcbiAgICB0aGlzLmxheW91dEl0ZW1zKCB0aGlzLmZpbHRlcmVkSXRlbXMsIGlzSW5zdGFudCApO1xyXG5cclxuICAgIC8vIGZsYWcgZm9yIGluaXRhbGl6ZWRcclxuICAgIHRoaXMuX2lzTGF5b3V0SW5pdGVkID0gdHJ1ZTtcclxuICB9O1xyXG5cclxuICAvLyBmaWx0ZXIgKyBzb3J0ICsgbGF5b3V0XHJcbiAgSXNvdG9wZS5wcm90b3R5cGUuYXJyYW5nZSA9IGZ1bmN0aW9uKCBvcHRzICkge1xyXG4gICAgLy8gc2V0IGFueSBvcHRpb25zIHBhc3NcclxuICAgIHRoaXMub3B0aW9uKCBvcHRzICk7XHJcbiAgICB0aGlzLl9nZXRJc0luc3RhbnQoKTtcclxuICAgIC8vIGZpbHRlciwgc29ydCwgYW5kIGxheW91dFxyXG5cclxuICAgIC8vIGZpbHRlclxyXG4gICAgdmFyIGZpbHRlcmVkID0gdGhpcy5fZmlsdGVyKCB0aGlzLml0ZW1zICk7XHJcbiAgICB0aGlzLmZpbHRlcmVkSXRlbXMgPSBmaWx0ZXJlZC5tYXRjaGVzO1xyXG5cclxuICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICBmdW5jdGlvbiBoaWRlUmV2ZWFsKCkge1xyXG4gICAgICBfdGhpcy5yZXZlYWwoIGZpbHRlcmVkLm5lZWRSZXZlYWwgKTtcclxuICAgICAgX3RoaXMuaGlkZSggZmlsdGVyZWQubmVlZEhpZGUgKTtcclxuICAgIH1cclxuXHJcbiAgICB0aGlzLl9iaW5kQXJyYW5nZUNvbXBsZXRlKCk7XHJcblxyXG4gICAgaWYgKCB0aGlzLl9pc0luc3RhbnQgKSB7XHJcbiAgICAgIHRoaXMuX25vVHJhbnNpdGlvbiggaGlkZVJldmVhbCApO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgaGlkZVJldmVhbCgpO1xyXG4gICAgfVxyXG5cclxuICAgIHRoaXMuX3NvcnQoKTtcclxuICAgIHRoaXMuX2xheW91dCgpO1xyXG4gIH07XHJcbiAgLy8gYWxpYXMgdG8gX2luaXQgZm9yIG1haW4gcGx1Z2luIG1ldGhvZFxyXG4gIElzb3RvcGUucHJvdG90eXBlLl9pbml0ID0gSXNvdG9wZS5wcm90b3R5cGUuYXJyYW5nZTtcclxuXHJcbiAgLy8gSEFDS1xyXG4gIC8vIERvbid0IGFuaW1hdGUvdHJhbnNpdGlvbiBmaXJzdCBsYXlvdXRcclxuICAvLyBPciBkb24ndCBhbmltYXRlL3RyYW5zaXRpb24gb3RoZXIgbGF5b3V0c1xyXG4gIElzb3RvcGUucHJvdG90eXBlLl9nZXRJc0luc3RhbnQgPSBmdW5jdGlvbigpIHtcclxuICAgIHZhciBpc0luc3RhbnQgPSB0aGlzLm9wdGlvbnMuaXNMYXlvdXRJbnN0YW50ICE9PSB1bmRlZmluZWQgP1xyXG4gICAgICB0aGlzLm9wdGlvbnMuaXNMYXlvdXRJbnN0YW50IDogIXRoaXMuX2lzTGF5b3V0SW5pdGVkO1xyXG4gICAgdGhpcy5faXNJbnN0YW50ID0gaXNJbnN0YW50O1xyXG4gICAgcmV0dXJuIGlzSW5zdGFudDtcclxuICB9O1xyXG5cclxuICAvLyBsaXN0ZW4gZm9yIGxheW91dENvbXBsZXRlLCBoaWRlQ29tcGxldGUgYW5kIHJldmVhbENvbXBsZXRlXHJcbiAgLy8gdG8gdHJpZ2dlciBhcnJhbmdlQ29tcGxldGVcclxuICBJc290b3BlLnByb3RvdHlwZS5fYmluZEFycmFuZ2VDb21wbGV0ZSA9IGZ1bmN0aW9uKCkge1xyXG4gICAgLy8gbGlzdGVuIGZvciAzIGV2ZW50cyB0byB0cmlnZ2VyIGFycmFuZ2VDb21wbGV0ZVxyXG4gICAgdmFyIGlzTGF5b3V0Q29tcGxldGUsIGlzSGlkZUNvbXBsZXRlLCBpc1JldmVhbENvbXBsZXRlO1xyXG4gICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgIGZ1bmN0aW9uIGFycmFuZ2VQYXJhbGxlbENhbGxiYWNrKCkge1xyXG4gICAgICBpZiAoIGlzTGF5b3V0Q29tcGxldGUgJiYgaXNIaWRlQ29tcGxldGUgJiYgaXNSZXZlYWxDb21wbGV0ZSApIHtcclxuICAgICAgICBfdGhpcy5kaXNwYXRjaEV2ZW50KCAnYXJyYW5nZUNvbXBsZXRlJywgbnVsbCwgWyBfdGhpcy5maWx0ZXJlZEl0ZW1zIF0gKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgdGhpcy5vbmNlKCAnbGF5b3V0Q29tcGxldGUnLCBmdW5jdGlvbigpIHtcclxuICAgICAgaXNMYXlvdXRDb21wbGV0ZSA9IHRydWU7XHJcbiAgICAgIGFycmFuZ2VQYXJhbGxlbENhbGxiYWNrKCk7XHJcbiAgICB9KTtcclxuICAgIHRoaXMub25jZSggJ2hpZGVDb21wbGV0ZScsIGZ1bmN0aW9uKCkge1xyXG4gICAgICBpc0hpZGVDb21wbGV0ZSA9IHRydWU7XHJcbiAgICAgIGFycmFuZ2VQYXJhbGxlbENhbGxiYWNrKCk7XHJcbiAgICB9KTtcclxuICAgIHRoaXMub25jZSggJ3JldmVhbENvbXBsZXRlJywgZnVuY3Rpb24oKSB7XHJcbiAgICAgIGlzUmV2ZWFsQ29tcGxldGUgPSB0cnVlO1xyXG4gICAgICBhcnJhbmdlUGFyYWxsZWxDYWxsYmFjaygpO1xyXG4gICAgfSk7XHJcbiAgfTtcclxuXHJcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gZmlsdGVyIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIC8vXHJcblxyXG4gIElzb3RvcGUucHJvdG90eXBlLl9maWx0ZXIgPSBmdW5jdGlvbiggaXRlbXMgKSB7XHJcbiAgICB2YXIgZmlsdGVyID0gdGhpcy5vcHRpb25zLmZpbHRlcjtcclxuICAgIGZpbHRlciA9IGZpbHRlciB8fCAnKic7XHJcbiAgICB2YXIgbWF0Y2hlcyA9IFtdO1xyXG4gICAgdmFyIGhpZGRlbk1hdGNoZWQgPSBbXTtcclxuICAgIHZhciB2aXNpYmxlVW5tYXRjaGVkID0gW107XHJcblxyXG4gICAgdmFyIHRlc3QgPSB0aGlzLl9nZXRGaWx0ZXJUZXN0KCBmaWx0ZXIgKTtcclxuXHJcbiAgICAvLyB0ZXN0IGVhY2ggaXRlbVxyXG4gICAgZm9yICggdmFyIGk9MCwgbGVuID0gaXRlbXMubGVuZ3RoOyBpIDwgbGVuOyBpKysgKSB7XHJcbiAgICAgIHZhciBpdGVtID0gaXRlbXNbaV07XHJcbiAgICAgIGlmICggaXRlbS5pc0lnbm9yZWQgKSB7XHJcbiAgICAgICAgY29udGludWU7XHJcbiAgICAgIH1cclxuICAgICAgLy8gYWRkIGl0ZW0gdG8gZWl0aGVyIG1hdGNoZWQgb3IgdW5tYXRjaGVkIGdyb3VwXHJcbiAgICAgIHZhciBpc01hdGNoZWQgPSB0ZXN0KCBpdGVtICk7XHJcbiAgICAgIC8vIGl0ZW0uaXNGaWx0ZXJNYXRjaGVkID0gaXNNYXRjaGVkO1xyXG4gICAgICAvLyBhZGQgdG8gbWF0Y2hlcyBpZiBpdHMgYSBtYXRjaFxyXG4gICAgICBpZiAoIGlzTWF0Y2hlZCApIHtcclxuICAgICAgICBtYXRjaGVzLnB1c2goIGl0ZW0gKTtcclxuICAgICAgfVxyXG4gICAgICAvLyBhZGQgdG8gYWRkaXRpb25hbCBncm91cCBpZiBpdGVtIG5lZWRzIHRvIGJlIGhpZGRlbiBvciByZXZlYWxlZFxyXG4gICAgICBpZiAoIGlzTWF0Y2hlZCAmJiBpdGVtLmlzSGlkZGVuICkge1xyXG4gICAgICAgIGhpZGRlbk1hdGNoZWQucHVzaCggaXRlbSApO1xyXG4gICAgICB9IGVsc2UgaWYgKCAhaXNNYXRjaGVkICYmICFpdGVtLmlzSGlkZGVuICkge1xyXG4gICAgICAgIHZpc2libGVVbm1hdGNoZWQucHVzaCggaXRlbSApO1xyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLy8gcmV0dXJuIGNvbGxlY3Rpb25zIG9mIGl0ZW1zIHRvIGJlIG1hbmlwdWxhdGVkXHJcbiAgICByZXR1cm4ge1xyXG4gICAgICBtYXRjaGVzOiBtYXRjaGVzLFxyXG4gICAgICBuZWVkUmV2ZWFsOiBoaWRkZW5NYXRjaGVkLFxyXG4gICAgICBuZWVkSGlkZTogdmlzaWJsZVVubWF0Y2hlZFxyXG4gICAgfTtcclxuICB9O1xyXG5cclxuICAvLyBnZXQgYSBqUXVlcnksIGZ1bmN0aW9uLCBvciBhIG1hdGNoZXNTZWxlY3RvciB0ZXN0IGdpdmVuIHRoZSBmaWx0ZXJcclxuICBJc290b3BlLnByb3RvdHlwZS5fZ2V0RmlsdGVyVGVzdCA9IGZ1bmN0aW9uKCBmaWx0ZXIgKSB7XHJcbiAgICBpZiAoIGpRdWVyeSAmJiB0aGlzLm9wdGlvbnMuaXNKUXVlcnlGaWx0ZXJpbmcgKSB7XHJcbiAgICAgIC8vIHVzZSBqUXVlcnlcclxuICAgICAgcmV0dXJuIGZ1bmN0aW9uKCBpdGVtICkge1xyXG4gICAgICAgIHJldHVybiBqUXVlcnkoIGl0ZW0uZWxlbWVudCApLmlzKCBmaWx0ZXIgKTtcclxuICAgICAgfTtcclxuICAgIH1cclxuICAgIGlmICggdHlwZW9mIGZpbHRlciA9PSAnZnVuY3Rpb24nICkge1xyXG4gICAgICAvLyB1c2UgZmlsdGVyIGFzIGZ1bmN0aW9uXHJcbiAgICAgIHJldHVybiBmdW5jdGlvbiggaXRlbSApIHtcclxuICAgICAgICByZXR1cm4gZmlsdGVyKCBpdGVtLmVsZW1lbnQgKTtcclxuICAgICAgfTtcclxuICAgIH1cclxuICAgIC8vIGRlZmF1bHQsIHVzZSBmaWx0ZXIgYXMgc2VsZWN0b3Igc3RyaW5nXHJcbiAgICByZXR1cm4gZnVuY3Rpb24oIGl0ZW0gKSB7XHJcbiAgICAgIHJldHVybiBtYXRjaGVzU2VsZWN0b3IoIGl0ZW0uZWxlbWVudCwgZmlsdGVyICk7XHJcbiAgICB9O1xyXG4gIH07XHJcblxyXG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIHNvcnRpbmcgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gLy9cclxuXHJcbiAgLyoqXHJcbiAgICogQHBhcmFtcyB7QXJyYXl9IGVsZW1zXHJcbiAgICogQHB1YmxpY1xyXG4gICAqL1xyXG4gIElzb3RvcGUucHJvdG90eXBlLnVwZGF0ZVNvcnREYXRhID0gZnVuY3Rpb24oIGVsZW1zICkge1xyXG4gICAgLy8gZ2V0IGl0ZW1zXHJcbiAgICB2YXIgaXRlbXM7XHJcbiAgICBpZiAoIGVsZW1zICkge1xyXG4gICAgICBlbGVtcyA9IHV0aWxzLm1ha2VBcnJheSggZWxlbXMgKTtcclxuICAgICAgaXRlbXMgPSB0aGlzLmdldEl0ZW1zKCBlbGVtcyApO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgLy8gdXBkYXRlIGFsbCBpdGVtcyBpZiBubyBlbGVtcyBwcm92aWRlZFxyXG4gICAgICBpdGVtcyA9IHRoaXMuaXRlbXM7XHJcbiAgICB9XHJcblxyXG4gICAgdGhpcy5fZ2V0U29ydGVycygpO1xyXG4gICAgdGhpcy5fdXBkYXRlSXRlbXNTb3J0RGF0YSggaXRlbXMgKTtcclxuICB9O1xyXG5cclxuICBJc290b3BlLnByb3RvdHlwZS5fZ2V0U29ydGVycyA9IGZ1bmN0aW9uKCkge1xyXG4gICAgdmFyIGdldFNvcnREYXRhID0gdGhpcy5vcHRpb25zLmdldFNvcnREYXRhO1xyXG4gICAgZm9yICggdmFyIGtleSBpbiBnZXRTb3J0RGF0YSApIHtcclxuICAgICAgdmFyIHNvcnRlciA9IGdldFNvcnREYXRhWyBrZXkgXTtcclxuICAgICAgdGhpcy5fc29ydGVyc1sga2V5IF0gPSBtdW5nZVNvcnRlciggc29ydGVyICk7XHJcbiAgICB9XHJcbiAgfTtcclxuXHJcbiAgLyoqXHJcbiAgICogQHBhcmFtcyB7QXJyYXl9IGl0ZW1zIC0gb2YgSXNvdG9wZS5JdGVtc1xyXG4gICAqIEBwcml2YXRlXHJcbiAgICovXHJcbiAgSXNvdG9wZS5wcm90b3R5cGUuX3VwZGF0ZUl0ZW1zU29ydERhdGEgPSBmdW5jdGlvbiggaXRlbXMgKSB7XHJcbiAgICAvLyBkbyBub3QgdXBkYXRlIGlmIG5vIGl0ZW1zXHJcbiAgICB2YXIgbGVuID0gaXRlbXMgJiYgaXRlbXMubGVuZ3RoO1xyXG5cclxuICAgIGZvciAoIHZhciBpPTA7IGxlbiAmJiBpIDwgbGVuOyBpKysgKSB7XHJcbiAgICAgIHZhciBpdGVtID0gaXRlbXNbaV07XHJcbiAgICAgIGl0ZW0udXBkYXRlU29ydERhdGEoKTtcclxuICAgIH1cclxuICB9O1xyXG5cclxuICAvLyAtLS0tLSBtdW5nZSBzb3J0ZXIgLS0tLS0gLy9cclxuXHJcbiAgLy8gZW5jYXBzdWxhdGUgdGhpcywgYXMgd2UganVzdCBuZWVkIG11bmdlU29ydGVyXHJcbiAgLy8gb3RoZXIgZnVuY3Rpb25zIGluIGhlcmUgYXJlIGp1c3QgZm9yIG11bmdpbmdcclxuICB2YXIgbXVuZ2VTb3J0ZXIgPSAoIGZ1bmN0aW9uKCkge1xyXG4gICAgLy8gYWRkIGEgbWFnaWMgbGF5ZXIgdG8gc29ydGVycyBmb3IgY29udmllbmVudCBzaG9ydGhhbmRzXHJcbiAgICAvLyBgLmZvby1iYXJgIHdpbGwgdXNlIHRoZSB0ZXh0IG9mIC5mb28tYmFyIHF1ZXJ5U2VsZWN0b3JcclxuICAgIC8vIGBbZm9vLWJhcl1gIHdpbGwgdXNlIGF0dHJpYnV0ZVxyXG4gICAgLy8geW91IGNhbiBhbHNvIGFkZCBwYXJzZXJcclxuICAgIC8vIGAuZm9vLWJhciBwYXJzZUludGAgd2lsbCBwYXJzZSB0aGF0IGFzIGEgbnVtYmVyXHJcbiAgICBmdW5jdGlvbiBtdW5nZVNvcnRlciggc29ydGVyICkge1xyXG4gICAgICAvLyBpZiBub3QgYSBzdHJpbmcsIHJldHVybiBmdW5jdGlvbiBvciB3aGF0ZXZlciBpdCBpc1xyXG4gICAgICBpZiAoIHR5cGVvZiBzb3J0ZXIgIT0gJ3N0cmluZycgKSB7XHJcbiAgICAgICAgcmV0dXJuIHNvcnRlcjtcclxuICAgICAgfVxyXG4gICAgICAvLyBwYXJzZSB0aGUgc29ydGVyIHN0cmluZ1xyXG4gICAgICB2YXIgYXJncyA9IHRyaW0oIHNvcnRlciApLnNwbGl0KCcgJyk7XHJcbiAgICAgIHZhciBxdWVyeSA9IGFyZ3NbMF07XHJcbiAgICAgIC8vIGNoZWNrIGlmIHF1ZXJ5IGxvb2tzIGxpa2UgW2FuLWF0dHJpYnV0ZV1cclxuICAgICAgdmFyIGF0dHJNYXRjaCA9IHF1ZXJ5Lm1hdGNoKCAvXlxcWyguKylcXF0kLyApO1xyXG4gICAgICB2YXIgYXR0ciA9IGF0dHJNYXRjaCAmJiBhdHRyTWF0Y2hbMV07XHJcbiAgICAgIHZhciBnZXRWYWx1ZSA9IGdldFZhbHVlR2V0dGVyKCBhdHRyLCBxdWVyeSApO1xyXG4gICAgICAvLyB1c2Ugc2Vjb25kIGFyZ3VtZW50IGFzIGEgcGFyc2VyXHJcbiAgICAgIHZhciBwYXJzZXIgPSBJc290b3BlLnNvcnREYXRhUGFyc2Vyc1sgYXJnc1sxXSBdO1xyXG4gICAgICAvLyBwYXJzZSB0aGUgdmFsdWUsIGlmIHRoZXJlIHdhcyBhIHBhcnNlclxyXG4gICAgICBzb3J0ZXIgPSBwYXJzZXIgPyBmdW5jdGlvbiggZWxlbSApIHtcclxuICAgICAgICByZXR1cm4gZWxlbSAmJiBwYXJzZXIoIGdldFZhbHVlKCBlbGVtICkgKTtcclxuICAgICAgfSA6XHJcbiAgICAgIC8vIG90aGVyd2lzZSBqdXN0IHJldHVybiB2YWx1ZVxyXG4gICAgICBmdW5jdGlvbiggZWxlbSApIHtcclxuICAgICAgICByZXR1cm4gZWxlbSAmJiBnZXRWYWx1ZSggZWxlbSApO1xyXG4gICAgICB9O1xyXG5cclxuICAgICAgcmV0dXJuIHNvcnRlcjtcclxuICAgIH1cclxuXHJcbiAgICAvLyBnZXQgYW4gYXR0cmlidXRlIGdldHRlciwgb3IgZ2V0IHRleHQgb2YgdGhlIHF1ZXJ5U2VsZWN0b3JcclxuICAgIGZ1bmN0aW9uIGdldFZhbHVlR2V0dGVyKCBhdHRyLCBxdWVyeSApIHtcclxuICAgICAgdmFyIGdldFZhbHVlO1xyXG4gICAgICAvLyBpZiBxdWVyeSBsb29rcyBsaWtlIFtmb28tYmFyXSwgZ2V0IGF0dHJpYnV0ZVxyXG4gICAgICBpZiAoIGF0dHIgKSB7XHJcbiAgICAgICAgZ2V0VmFsdWUgPSBmdW5jdGlvbiggZWxlbSApIHtcclxuICAgICAgICAgIHJldHVybiBlbGVtLmdldEF0dHJpYnV0ZSggYXR0ciApO1xyXG4gICAgICAgIH07XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgLy8gb3RoZXJ3aXNlLCBhc3N1bWUgaXRzIGEgcXVlcnlTZWxlY3RvciwgYW5kIGdldCBpdHMgdGV4dFxyXG4gICAgICAgIGdldFZhbHVlID0gZnVuY3Rpb24oIGVsZW0gKSB7XHJcbiAgICAgICAgICB2YXIgY2hpbGQgPSBlbGVtLnF1ZXJ5U2VsZWN0b3IoIHF1ZXJ5ICk7XHJcbiAgICAgICAgICByZXR1cm4gY2hpbGQgJiYgZ2V0VGV4dCggY2hpbGQgKTtcclxuICAgICAgICB9O1xyXG4gICAgICB9XHJcbiAgICAgIHJldHVybiBnZXRWYWx1ZTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gbXVuZ2VTb3J0ZXI7XHJcbiAgfSkoKTtcclxuXHJcbiAgLy8gcGFyc2VycyB1c2VkIGluIGdldFNvcnREYXRhIHNob3J0Y3V0IHN0cmluZ3NcclxuICBJc290b3BlLnNvcnREYXRhUGFyc2VycyA9IHtcclxuICAgICdwYXJzZUludCc6IGZ1bmN0aW9uKCB2YWwgKSB7XHJcbiAgICAgIHJldHVybiBwYXJzZUludCggdmFsLCAxMCApO1xyXG4gICAgfSxcclxuICAgICdwYXJzZUZsb2F0JzogZnVuY3Rpb24oIHZhbCApIHtcclxuICAgICAgcmV0dXJuIHBhcnNlRmxvYXQoIHZhbCApO1xyXG4gICAgfVxyXG4gIH07XHJcblxyXG4gIC8vIC0tLS0tIHNvcnQgbWV0aG9kIC0tLS0tIC8vXHJcblxyXG4gIC8vIHNvcnQgZmlsdGVyZWRJdGVtIG9yZGVyXHJcbiAgSXNvdG9wZS5wcm90b3R5cGUuX3NvcnQgPSBmdW5jdGlvbigpIHtcclxuICAgIHZhciBzb3J0QnlPcHQgPSB0aGlzLm9wdGlvbnMuc29ydEJ5O1xyXG4gICAgaWYgKCAhc29ydEJ5T3B0ICkge1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgICAvLyBjb25jYXQgYWxsIHNvcnRCeSBhbmQgc29ydEhpc3RvcnlcclxuICAgIHZhciBzb3J0QnlzID0gW10uY29uY2F0LmFwcGx5KCBzb3J0QnlPcHQsIHRoaXMuc29ydEhpc3RvcnkgKTtcclxuICAgIC8vIHNvcnQgbWFnaWNcclxuICAgIHZhciBpdGVtU29ydGVyID0gZ2V0SXRlbVNvcnRlciggc29ydEJ5cywgdGhpcy5vcHRpb25zLnNvcnRBc2NlbmRpbmcgKTtcclxuICAgIHRoaXMuZmlsdGVyZWRJdGVtcy5zb3J0KCBpdGVtU29ydGVyICk7XHJcbiAgICAvLyBrZWVwIHRyYWNrIG9mIHNvcnRCeSBIaXN0b3J5XHJcbiAgICBpZiAoIHNvcnRCeU9wdCAhPSB0aGlzLnNvcnRIaXN0b3J5WzBdICkge1xyXG4gICAgICAvLyBhZGQgdG8gZnJvbnQsIG9sZGVzdCBnb2VzIGluIGxhc3RcclxuICAgICAgdGhpcy5zb3J0SGlzdG9yeS51bnNoaWZ0KCBzb3J0QnlPcHQgKTtcclxuICAgIH1cclxuICB9O1xyXG5cclxuICAvLyByZXR1cm5zIGEgZnVuY3Rpb24gdXNlZCBmb3Igc29ydGluZ1xyXG4gIGZ1bmN0aW9uIGdldEl0ZW1Tb3J0ZXIoIHNvcnRCeXMsIHNvcnRBc2MgKSB7XHJcbiAgICByZXR1cm4gZnVuY3Rpb24gc29ydGVyKCBpdGVtQSwgaXRlbUIgKSB7XHJcbiAgICAgIC8vIGN5Y2xlIHRocm91Z2ggYWxsIHNvcnRLZXlzXHJcbiAgICAgIGZvciAoIHZhciBpID0gMCwgbGVuID0gc29ydEJ5cy5sZW5ndGg7IGkgPCBsZW47IGkrKyApIHtcclxuICAgICAgICB2YXIgc29ydEJ5ID0gc29ydEJ5c1tpXTtcclxuICAgICAgICB2YXIgYSA9IGl0ZW1BLnNvcnREYXRhWyBzb3J0QnkgXTtcclxuICAgICAgICB2YXIgYiA9IGl0ZW1CLnNvcnREYXRhWyBzb3J0QnkgXTtcclxuICAgICAgICBpZiAoIGEgPiBiIHx8IGEgPCBiICkge1xyXG4gICAgICAgICAgLy8gaWYgc29ydEFzYyBpcyBhbiBvYmplY3QsIHVzZSB0aGUgdmFsdWUgZ2l2ZW4gdGhlIHNvcnRCeSBrZXlcclxuICAgICAgICAgIHZhciBpc0FzY2VuZGluZyA9IHNvcnRBc2NbIHNvcnRCeSBdICE9PSB1bmRlZmluZWQgPyBzb3J0QXNjWyBzb3J0QnkgXSA6IHNvcnRBc2M7XHJcbiAgICAgICAgICB2YXIgZGlyZWN0aW9uID0gaXNBc2NlbmRpbmcgPyAxIDogLTE7XHJcbiAgICAgICAgICByZXR1cm4gKCBhID4gYiA/IDEgOiAtMSApICogZGlyZWN0aW9uO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgICByZXR1cm4gMDtcclxuICAgIH07XHJcbiAgfVxyXG5cclxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBtZXRob2RzIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIC8vXHJcblxyXG4gIC8vIGdldCBsYXlvdXQgbW9kZVxyXG4gIElzb3RvcGUucHJvdG90eXBlLl9tb2RlID0gZnVuY3Rpb24oKSB7XHJcbiAgICB2YXIgbGF5b3V0TW9kZSA9IHRoaXMub3B0aW9ucy5sYXlvdXRNb2RlO1xyXG4gICAgdmFyIG1vZGUgPSB0aGlzLm1vZGVzWyBsYXlvdXRNb2RlIF07XHJcbiAgICBpZiAoICFtb2RlICkge1xyXG4gICAgICAvLyBUT0RPIGNvbnNvbGUuZXJyb3JcclxuICAgICAgdGhyb3cgbmV3IEVycm9yKCAnTm8gbGF5b3V0IG1vZGU6ICcgKyBsYXlvdXRNb2RlICk7XHJcbiAgICB9XHJcbiAgICAvLyBIQUNLIHN5bmMgbW9kZSdzIG9wdGlvbnNcclxuICAgIC8vIGFueSBvcHRpb25zIHNldCBhZnRlciBpbml0IGZvciBsYXlvdXQgbW9kZSBuZWVkIHRvIGJlIHN5bmNlZFxyXG4gICAgbW9kZS5vcHRpb25zID0gdGhpcy5vcHRpb25zWyBsYXlvdXRNb2RlIF07XHJcbiAgICByZXR1cm4gbW9kZTtcclxuICB9O1xyXG5cclxuICBJc290b3BlLnByb3RvdHlwZS5fcmVzZXRMYXlvdXQgPSBmdW5jdGlvbigpIHtcclxuICAgIC8vIHRyaWdnZXIgb3JpZ2luYWwgcmVzZXQgbGF5b3V0XHJcbiAgICBPdXRsYXllci5wcm90b3R5cGUuX3Jlc2V0TGF5b3V0LmNhbGwoIHRoaXMgKTtcclxuICAgIHRoaXMuX21vZGUoKS5fcmVzZXRMYXlvdXQoKTtcclxuICB9O1xyXG5cclxuICBJc290b3BlLnByb3RvdHlwZS5fZ2V0SXRlbUxheW91dFBvc2l0aW9uID0gZnVuY3Rpb24oIGl0ZW0gICkge1xyXG4gICAgcmV0dXJuIHRoaXMuX21vZGUoKS5fZ2V0SXRlbUxheW91dFBvc2l0aW9uKCBpdGVtICk7XHJcbiAgfTtcclxuXHJcbiAgSXNvdG9wZS5wcm90b3R5cGUuX21hbmFnZVN0YW1wID0gZnVuY3Rpb24oIHN0YW1wICkge1xyXG4gICAgdGhpcy5fbW9kZSgpLl9tYW5hZ2VTdGFtcCggc3RhbXAgKTtcclxuICB9O1xyXG5cclxuICBJc290b3BlLnByb3RvdHlwZS5fZ2V0Q29udGFpbmVyU2l6ZSA9IGZ1bmN0aW9uKCkge1xyXG4gICAgcmV0dXJuIHRoaXMuX21vZGUoKS5fZ2V0Q29udGFpbmVyU2l6ZSgpO1xyXG4gIH07XHJcblxyXG4gIElzb3RvcGUucHJvdG90eXBlLm5lZWRzUmVzaXplTGF5b3V0ID0gZnVuY3Rpb24oKSB7XHJcbiAgICByZXR1cm4gdGhpcy5fbW9kZSgpLm5lZWRzUmVzaXplTGF5b3V0KCk7XHJcbiAgfTtcclxuXHJcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gYWRkaW5nICYgcmVtb3ZpbmcgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gLy9cclxuXHJcbiAgLy8gSEVBRFMgVVAgb3ZlcndyaXRlcyBkZWZhdWx0IE91dGxheWVyIGFwcGVuZGVkXHJcbiAgSXNvdG9wZS5wcm90b3R5cGUuYXBwZW5kZWQgPSBmdW5jdGlvbiggZWxlbXMgKSB7XHJcbiAgICB2YXIgaXRlbXMgPSB0aGlzLmFkZEl0ZW1zKCBlbGVtcyApO1xyXG4gICAgaWYgKCAhaXRlbXMubGVuZ3RoICkge1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgICAvLyBmaWx0ZXIsIGxheW91dCwgcmV2ZWFsIG5ldyBpdGVtc1xyXG4gICAgdmFyIGZpbHRlcmVkSXRlbXMgPSB0aGlzLl9maWx0ZXJSZXZlYWxBZGRlZCggaXRlbXMgKTtcclxuICAgIC8vIGFkZCB0byBmaWx0ZXJlZEl0ZW1zXHJcbiAgICB0aGlzLmZpbHRlcmVkSXRlbXMgPSB0aGlzLmZpbHRlcmVkSXRlbXMuY29uY2F0KCBmaWx0ZXJlZEl0ZW1zICk7XHJcbiAgfTtcclxuXHJcbiAgLy8gSEVBRFMgVVAgb3ZlcndyaXRlcyBkZWZhdWx0IE91dGxheWVyIHByZXBlbmRlZFxyXG4gIElzb3RvcGUucHJvdG90eXBlLnByZXBlbmRlZCA9IGZ1bmN0aW9uKCBlbGVtcyApIHtcclxuICAgIHZhciBpdGVtcyA9IHRoaXMuX2l0ZW1pemUoIGVsZW1zICk7XHJcbiAgICBpZiAoICFpdGVtcy5sZW5ndGggKSB7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIC8vIHN0YXJ0IG5ldyBsYXlvdXRcclxuICAgIHRoaXMuX3Jlc2V0TGF5b3V0KCk7XHJcbiAgICB0aGlzLl9tYW5hZ2VTdGFtcHMoKTtcclxuICAgIC8vIGZpbHRlciwgbGF5b3V0LCByZXZlYWwgbmV3IGl0ZW1zXHJcbiAgICB2YXIgZmlsdGVyZWRJdGVtcyA9IHRoaXMuX2ZpbHRlclJldmVhbEFkZGVkKCBpdGVtcyApO1xyXG4gICAgLy8gbGF5b3V0IHByZXZpb3VzIGl0ZW1zXHJcbiAgICB0aGlzLmxheW91dEl0ZW1zKCB0aGlzLmZpbHRlcmVkSXRlbXMgKTtcclxuICAgIC8vIGFkZCB0byBpdGVtcyBhbmQgZmlsdGVyZWRJdGVtc1xyXG4gICAgdGhpcy5maWx0ZXJlZEl0ZW1zID0gZmlsdGVyZWRJdGVtcy5jb25jYXQoIHRoaXMuZmlsdGVyZWRJdGVtcyApO1xyXG4gICAgdGhpcy5pdGVtcyA9IGl0ZW1zLmNvbmNhdCggdGhpcy5pdGVtcyApO1xyXG4gIH07XHJcblxyXG4gIElzb3RvcGUucHJvdG90eXBlLl9maWx0ZXJSZXZlYWxBZGRlZCA9IGZ1bmN0aW9uKCBpdGVtcyApIHtcclxuICAgIHZhciBmaWx0ZXJlZCA9IHRoaXMuX2ZpbHRlciggaXRlbXMgKTtcclxuICAgIHRoaXMuaGlkZSggZmlsdGVyZWQubmVlZEhpZGUgKTtcclxuICAgIC8vIHJldmVhbCBhbGwgbmV3IGl0ZW1zXHJcbiAgICB0aGlzLnJldmVhbCggZmlsdGVyZWQubWF0Y2hlcyApO1xyXG4gICAgLy8gbGF5b3V0IG5ldyBpdGVtcywgbm8gdHJhbnNpdGlvblxyXG4gICAgdGhpcy5sYXlvdXRJdGVtcyggZmlsdGVyZWQubWF0Y2hlcywgdHJ1ZSApO1xyXG4gICAgcmV0dXJuIGZpbHRlcmVkLm1hdGNoZXM7XHJcbiAgfTtcclxuXHJcbiAgLyoqXHJcbiAgICogRmlsdGVyLCBzb3J0LCBhbmQgbGF5b3V0IG5ld2x5LWFwcGVuZGVkIGl0ZW0gZWxlbWVudHNcclxuICAgKiBAcGFyYW0ge0FycmF5IG9yIE5vZGVMaXN0IG9yIEVsZW1lbnR9IGVsZW1zXHJcbiAgICovXHJcbiAgSXNvdG9wZS5wcm90b3R5cGUuaW5zZXJ0ID0gZnVuY3Rpb24oIGVsZW1zICkge1xyXG4gICAgdmFyIGl0ZW1zID0gdGhpcy5hZGRJdGVtcyggZWxlbXMgKTtcclxuICAgIGlmICggIWl0ZW1zLmxlbmd0aCApIHtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgLy8gYXBwZW5kIGl0ZW0gZWxlbWVudHNcclxuICAgIHZhciBpLCBpdGVtO1xyXG4gICAgdmFyIGxlbiA9IGl0ZW1zLmxlbmd0aDtcclxuICAgIGZvciAoIGk9MDsgaSA8IGxlbjsgaSsrICkge1xyXG4gICAgICBpdGVtID0gaXRlbXNbaV07XHJcbiAgICAgIHRoaXMuZWxlbWVudC5hcHBlbmRDaGlsZCggaXRlbS5lbGVtZW50ICk7XHJcbiAgICB9XHJcbiAgICAvLyBmaWx0ZXIgbmV3IHN0dWZmXHJcbiAgICB2YXIgZmlsdGVyZWRJbnNlcnRJdGVtcyA9IHRoaXMuX2ZpbHRlciggaXRlbXMgKS5tYXRjaGVzO1xyXG4gICAgLy8gc2V0IGZsYWdcclxuICAgIGZvciAoIGk9MDsgaSA8IGxlbjsgaSsrICkge1xyXG4gICAgICBpdGVtc1tpXS5pc0xheW91dEluc3RhbnQgPSB0cnVlO1xyXG4gICAgfVxyXG4gICAgdGhpcy5hcnJhbmdlKCk7XHJcbiAgICAvLyByZXNldCBmbGFnXHJcbiAgICBmb3IgKCBpPTA7IGkgPCBsZW47IGkrKyApIHtcclxuICAgICAgZGVsZXRlIGl0ZW1zW2ldLmlzTGF5b3V0SW5zdGFudDtcclxuICAgIH1cclxuICAgIHRoaXMucmV2ZWFsKCBmaWx0ZXJlZEluc2VydEl0ZW1zICk7XHJcbiAgfTtcclxuXHJcbiAgdmFyIF9yZW1vdmUgPSBJc290b3BlLnByb3RvdHlwZS5yZW1vdmU7XHJcbiAgSXNvdG9wZS5wcm90b3R5cGUucmVtb3ZlID0gZnVuY3Rpb24oIGVsZW1zICkge1xyXG4gICAgZWxlbXMgPSB1dGlscy5tYWtlQXJyYXkoIGVsZW1zICk7XHJcbiAgICB2YXIgcmVtb3ZlSXRlbXMgPSB0aGlzLmdldEl0ZW1zKCBlbGVtcyApO1xyXG4gICAgLy8gZG8gcmVndWxhciB0aGluZ1xyXG4gICAgX3JlbW92ZS5jYWxsKCB0aGlzLCBlbGVtcyApO1xyXG4gICAgLy8gYmFpbCBpZiBubyBpdGVtcyB0byByZW1vdmVcclxuICAgIHZhciBsZW4gPSByZW1vdmVJdGVtcyAmJiByZW1vdmVJdGVtcy5sZW5ndGg7XHJcbiAgICBpZiAoICFsZW4gKSB7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIC8vIHJlbW92ZSBlbGVtcyBmcm9tIGZpbHRlcmVkSXRlbXNcclxuICAgIGZvciAoIHZhciBpPTA7IGkgPCBsZW47IGkrKyApIHtcclxuICAgICAgdmFyIGl0ZW0gPSByZW1vdmVJdGVtc1tpXTtcclxuICAgICAgLy8gcmVtb3ZlIGl0ZW0gZnJvbSBjb2xsZWN0aW9uXHJcbiAgICAgIHV0aWxzLnJlbW92ZUZyb20oIHRoaXMuZmlsdGVyZWRJdGVtcywgaXRlbSApO1xyXG4gICAgfVxyXG4gIH07XHJcblxyXG4gIElzb3RvcGUucHJvdG90eXBlLnNodWZmbGUgPSBmdW5jdGlvbigpIHtcclxuICAgIC8vIHVwZGF0ZSByYW5kb20gc29ydERhdGFcclxuICAgIGZvciAoIHZhciBpPTAsIGxlbiA9IHRoaXMuaXRlbXMubGVuZ3RoOyBpIDwgbGVuOyBpKysgKSB7XHJcbiAgICAgIHZhciBpdGVtID0gdGhpcy5pdGVtc1tpXTtcclxuICAgICAgaXRlbS5zb3J0RGF0YS5yYW5kb20gPSBNYXRoLnJhbmRvbSgpO1xyXG4gICAgfVxyXG4gICAgdGhpcy5vcHRpb25zLnNvcnRCeSA9ICdyYW5kb20nO1xyXG4gICAgdGhpcy5fc29ydCgpO1xyXG4gICAgdGhpcy5fbGF5b3V0KCk7XHJcbiAgfTtcclxuXHJcbiAgLyoqXHJcbiAgICogdHJpZ2dlciBmbiB3aXRob3V0IHRyYW5zaXRpb25cclxuICAgKiBraW5kIG9mIGhhY2t5IHRvIGhhdmUgdGhpcyBpbiB0aGUgZmlyc3QgcGxhY2VcclxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmblxyXG4gICAqIEByZXR1cm5zIHJldFxyXG4gICAqIEBwcml2YXRlXHJcbiAgICovXHJcbiAgSXNvdG9wZS5wcm90b3R5cGUuX25vVHJhbnNpdGlvbiA9IGZ1bmN0aW9uKCBmbiApIHtcclxuICAgIC8vIHNhdmUgdHJhbnNpdGlvbkR1cmF0aW9uIGJlZm9yZSBkaXNhYmxpbmdcclxuICAgIHZhciB0cmFuc2l0aW9uRHVyYXRpb24gPSB0aGlzLm9wdGlvbnMudHJhbnNpdGlvbkR1cmF0aW9uO1xyXG4gICAgLy8gZGlzYWJsZSB0cmFuc2l0aW9uXHJcbiAgICB0aGlzLm9wdGlvbnMudHJhbnNpdGlvbkR1cmF0aW9uID0gMDtcclxuICAgIC8vIGRvIGl0XHJcbiAgICB2YXIgcmV0dXJuVmFsdWUgPSBmbi5jYWxsKCB0aGlzICk7XHJcbiAgICAvLyByZS1lbmFibGUgdHJhbnNpdGlvbiBmb3IgcmV2ZWFsXHJcbiAgICB0aGlzLm9wdGlvbnMudHJhbnNpdGlvbkR1cmF0aW9uID0gdHJhbnNpdGlvbkR1cmF0aW9uO1xyXG4gICAgcmV0dXJuIHJldHVyblZhbHVlO1xyXG4gIH07XHJcblxyXG4gIC8vIC0tLS0tIGhlbHBlciBtZXRob2RzIC0tLS0tIC8vXHJcblxyXG4gIC8qKlxyXG4gICAqIGdldHRlciBtZXRob2QgZm9yIGdldHRpbmcgZmlsdGVyZWQgaXRlbSBlbGVtZW50c1xyXG4gICAqIEByZXR1cm5zIHtBcnJheX0gZWxlbXMgLSBjb2xsZWN0aW9uIG9mIGl0ZW0gZWxlbWVudHNcclxuICAgKi9cclxuICBJc290b3BlLnByb3RvdHlwZS5nZXRGaWx0ZXJlZEl0ZW1FbGVtZW50cyA9IGZ1bmN0aW9uKCkge1xyXG4gICAgdmFyIGVsZW1zID0gW107XHJcbiAgICBmb3IgKCB2YXIgaT0wLCBsZW4gPSB0aGlzLmZpbHRlcmVkSXRlbXMubGVuZ3RoOyBpIDwgbGVuOyBpKysgKSB7XHJcbiAgICAgIGVsZW1zLnB1c2goIHRoaXMuZmlsdGVyZWRJdGVtc1tpXS5lbGVtZW50ICk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gZWxlbXM7XHJcbiAgfTtcclxuXHJcbiAgLy8gLS0tLS0gIC0tLS0tIC8vXHJcblxyXG4gIHJldHVybiBJc290b3BlO1xyXG5cclxufSkpO1xyXG5cclxuLy8gU2ltcGxlIEphdmFTY3JpcHQgVGVtcGxhdGluZ1xyXG4vLyBKb2huIFJlc2lnIC0gaHR0cDovL2Vqb2huLm9yZy8gLSBNSVQgTGljZW5zZWRcclxuKGZ1bmN0aW9uKCl7XHJcbiAgdmFyIGNhY2hlID0ge307XHJcbiBcclxuICB0aGlzLnRtcGwgPSBmdW5jdGlvbiB0bXBsKHN0ciwgZGF0YSl7XHJcbiAgICAvLyBGaWd1cmUgb3V0IGlmIHdlJ3JlIGdldHRpbmcgYSB0ZW1wbGF0ZSwgb3IgaWYgd2UgbmVlZCB0b1xyXG4gICAgLy8gbG9hZCB0aGUgdGVtcGxhdGUgLSBhbmQgYmUgc3VyZSB0byBjYWNoZSB0aGUgcmVzdWx0LlxyXG4gICAgdmFyIGZuID0gIS9cXFcvLnRlc3Qoc3RyKSA/XHJcbiAgICAgIGNhY2hlW3N0cl0gPSBjYWNoZVtzdHJdIHx8XHJcbiAgICAgICAgdG1wbChkb2N1bWVudC5nZXRFbGVtZW50QnlJZChzdHIpLmlubmVySFRNTCkgOlxyXG4gICAgIFxyXG4gICAgICAvLyBHZW5lcmF0ZSBhIHJldXNhYmxlIGZ1bmN0aW9uIHRoYXQgd2lsbCBzZXJ2ZSBhcyBhIHRlbXBsYXRlXHJcbiAgICAgIC8vIGdlbmVyYXRvciAoYW5kIHdoaWNoIHdpbGwgYmUgY2FjaGVkKS5cclxuICAgICAgbmV3IEZ1bmN0aW9uKFwib2JqXCIsXHJcbiAgICAgICAgXCJ2YXIgcD1bXSxwcmludD1mdW5jdGlvbigpe3AucHVzaC5hcHBseShwLGFyZ3VtZW50cyk7fTtcIiArXHJcbiAgICAgICBcclxuICAgICAgICAvLyBJbnRyb2R1Y2UgdGhlIGRhdGEgYXMgbG9jYWwgdmFyaWFibGVzIHVzaW5nIHdpdGgoKXt9XHJcbiAgICAgICAgXCJ3aXRoKG9iail7cC5wdXNoKCdcIiArXHJcbiAgICAgICBcclxuICAgICAgICAvLyBDb252ZXJ0IHRoZSB0ZW1wbGF0ZSBpbnRvIHB1cmUgSmF2YVNjcmlwdFxyXG4gICAgICAgIHN0clxyXG4gICAgICAgICAgLnJlcGxhY2UoL1tcXHJcXHRcXG5dL2csIFwiIFwiKVxyXG4gICAgICAgICAgLnNwbGl0KFwiPCVcIikuam9pbihcIlxcdFwiKVxyXG4gICAgICAgICAgLnJlcGxhY2UoLygoXnwlPilbXlxcdF0qKScvZywgXCIkMVxcclwiKVxyXG4gICAgICAgICAgLnJlcGxhY2UoL1xcdD0oLio/KSU+L2csIFwiJywkMSwnXCIpXHJcbiAgICAgICAgICAuc3BsaXQoXCJcXHRcIikuam9pbihcIicpO1wiKVxyXG4gICAgICAgICAgLnNwbGl0KFwiJT5cIikuam9pbihcInAucHVzaCgnXCIpXHJcbiAgICAgICAgICAuc3BsaXQoXCJcXHJcIikuam9pbihcIlxcXFwnXCIpXHJcbiAgICAgICsgXCInKTt9cmV0dXJuIHAuam9pbignJyk7XCIpO1xyXG4gICBcclxuICAgIC8vIFByb3ZpZGUgc29tZSBiYXNpYyBjdXJyeWluZyB0byB0aGUgdXNlclxyXG4gICAgcmV0dXJuIGRhdGEgPyBmbiggZGF0YSApIDogZm47XHJcbiAgfTtcclxufSkoKTtcclxuKGZ1bmN0aW9uKCQpIHtcclxuXHJcblx0JC5zdXBwb3J0LmNvcnMgPSB0cnVlO1xyXG5cclxuXHQkKGZ1bmN0aW9uKCkge1xyXG5cdFx0JCgnLmpjYXJvdXNlbCcpXHJcblx0XHRcdC5qY2Fyb3VzZWwoe1xyXG5cdFx0XHRcdGFuaW1hdGlvbjogJ3Nsb3cnLFxyXG5cdFx0XHRcdHdyYXA6ICdjaXJjdWxhcidcclxuXHRcdFx0fSlcclxuXHRcdFx0LmpjYXJvdXNlbEF1dG9zY3JvbGwoe1xyXG5cdFx0XHRcdGludGVydmFsOiA1MDAwLFxyXG5cdFx0XHRcdHRhcmdldDogJys9MScsXHJcblx0XHRcdFx0YXV0b3N0YXJ0OiB0cnVlXHJcblx0XHR9KTtcclxuXHJcblx0XHQkKCcuamNhcm91c2VsLWNvbnRyb2wtcHJldicpXHJcblx0XHRcdC5vbignamNhcm91c2VsY29udHJvbDphY3RpdmUnLCBmdW5jdGlvbigpIHtcclxuXHRcdFx0XHQkKHRoaXMpLnJlbW92ZUNsYXNzKCdpbmFjdGl2ZScpO1xyXG5cdFx0XHR9KVxyXG5cdFx0XHQub24oJ2pjYXJvdXNlbGNvbnRyb2w6aW5hY3RpdmUnLCBmdW5jdGlvbigpIHtcclxuXHRcdFx0XHQkKHRoaXMpLmFkZENsYXNzKCdpbmFjdGl2ZScpO1xyXG5cdFx0XHR9KVxyXG5cdFx0XHQuamNhcm91c2VsQ29udHJvbCh7XHJcblx0XHRcdFx0dGFyZ2V0OiAnLT0xJ1xyXG5cdFx0fSk7XHJcblxyXG5cdFx0JCgnLmpjYXJvdXNlbC1jb250cm9sLW5leHQnKVxyXG5cdFx0XHQub24oJ2pjYXJvdXNlbGNvbnRyb2w6YWN0aXZlJywgZnVuY3Rpb24oKSB7XHJcblx0XHRcdFx0JCh0aGlzKS5yZW1vdmVDbGFzcygnaW5hY3RpdmUnKTtcclxuXHRcdFx0fSlcclxuXHRcdFx0Lm9uKCdqY2Fyb3VzZWxjb250cm9sOmluYWN0aXZlJywgZnVuY3Rpb24oKSB7XHJcblx0XHRcdFx0JCh0aGlzKS5hZGRDbGFzcygnaW5hY3RpdmUnKTtcclxuXHRcdFx0fSlcclxuXHRcdFx0LmpjYXJvdXNlbENvbnRyb2woe1xyXG5cdFx0XHRcdHRhcmdldDogJys9MSdcclxuXHRcdH0pO1xyXG5cclxuXHJcblx0Ly8gQUpBWFxyXG5cdFx0dmFyIHF1ZXJ5V29yZCA9ICcnO1xyXG5cdFx0dmFyIEFQSV9LRVkgPSAnMjI3MjEzOC03OGJkZGYzMGFkOTNhZjU4NzRlN2EwNzkxJztcclxuXHRcdHZhciBwYWdlID0gMTtcclxuXHRcdHZhciBwZXJQYWdlID0gNztcclxuXHJcblx0XHQvLyBmdW5jdGlvbiByZW5kZXJJbWFnZXMocXVlcnlXb3JkKSB7XHJcblx0XHQvLyBcdFxyXG5cdFx0Ly8gfVxyXG5cdFx0ZnVuY3Rpb24gcmVuZGVySW1hZ2VzKHF1ZXJ5V29yZCkge1xyXG5cdFx0XHRpZiAoZG9jdW1lbnQuYWxsICYmIGRvY3VtZW50LmRvY3VtZW50TW9kZSAmJiA4ID09PSBkb2N1bWVudC5kb2N1bWVudE1vZGUgfHwgOSA9PT0gZG9jdW1lbnQuZG9jdW1lbnRNb2RlKSB7XHJcblx0XHRcdFx0dmFyIHhtbGh0dHAgPSBnZXRYbWxIdHRwKClcclxuXHRcdFx0XHR4bWxodHRwLm9wZW4oJ0dFVCcsICdodHRwczovL3BpeGFiYXkuY29tL2FwaS8/a2V5PScgKyBBUElfS0VZICsgJyZxPScgKyBxdWVyeVdvcmQgKyAnJnBhZ2U9JyArIHBhZ2UgKyAnJnBlcl9wYWdlPScgKyBwZXJQYWdlICsgJyZpbWFnZV90eXBlPXBob3RvJywgdHJ1ZSk7XHJcblx0XHRcdFx0eG1saHR0cC5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBmdW5jdGlvbigpIHtcclxuXHRcdFx0XHRcdGlmICh4bWxodHRwLnJlYWR5U3RhdGUgPT0gNCkge1xyXG5cdFx0XHRcdFx0IGlmKHhtbGh0dHAuc3RhdHVzID09IDIwMCkge1xyXG5cdFx0XHRcdFx0XHRcdHZhciBkYXRhID0gZXZhbCgnKCcreG1saHR0cC5yZXNwb25zZVRleHQrJyknKTtcclxuXHRcdFx0XHRcdFx0XHRjb25zb2xlLmxvZyhkYXRhKTtcclxuXHJcblx0XHRcdFx0XHRcdFx0dmFyIGh0bWwgPSAkKCcjaWRlYXMtdG1wbCcpLmh0bWwoKTtcclxuXHRcdFx0XHRcdFx0XHR2YXIgY29udGVudCA9IHRtcGwoIGh0bWwsIHtcclxuXHRcdFx0XHRcdFx0XHRcdGRhdGE6IGRhdGEuaGl0c1xyXG5cdFx0XHRcdFx0XHRcdH0pO1xyXG5cclxuXHRcdFx0XHRcdFx0XHQkKCcuZ3JpZCcpLnJlbW92ZSgpO1xyXG5cdFx0XHRcdFx0XHRcdCQoJy5pZGVhcyAud3JhcHBlcicpLmFwcGVuZChjb250ZW50KTtcclxuXHJcblx0XHRcdFx0XHRcdFx0JCgnLmdyaWQnKS5pc290b3BlKHtcclxuXHRcdFx0XHRcdFx0XHRcdGl0ZW1TZWxlY3RvcjogJy5ncmlkLWl0ZW0nLFxyXG5cdFx0XHRcdFx0XHRcdFx0bGF5b3V0TW9kZTogJ21hc29ucnknLFxyXG5cdFx0XHRcdFx0XHRcdFx0bWFzb25yeToge1xyXG5cdFx0XHRcdFx0XHRcdFx0XHRndXR0ZXI6IDIwXHJcblx0XHRcdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdFx0fSk7XHJcblx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9O1xyXG5cclxuXHRcdFx0XHR4bWxodHRwLnNlbmQobnVsbCk7XHJcblxyXG5cdFx0XHRcdGZ1bmN0aW9uIGdldFhtbEh0dHAoKXtcclxuXHRcdFx0XHRcdHZhciB4bWxodHRwO1xyXG5cdFx0XHRcdFx0dHJ5IHtcclxuXHRcdFx0XHRcdFx0eG1saHR0cCA9IG5ldyBBY3RpdmVYT2JqZWN0KFwiTXN4bWwyLlhNTEhUVFBcIik7XHJcblx0XHRcdFx0XHR9IGNhdGNoIChlKSB7XHJcblx0XHRcdFx0XHRcdHRyeSB7XHJcblx0XHRcdFx0XHRcdFx0eG1saHR0cCA9IG5ldyBBY3RpdmVYT2JqZWN0KFwiTWljcm9zb2Z0LlhNTEhUVFBcIik7XHJcblx0XHRcdFx0XHRcdH0gY2F0Y2ggKEUpIHtcclxuXHRcdFx0XHRcdFx0XHR4bWxodHRwID0gZmFsc2U7XHJcblx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdGlmICgheG1saHR0cCAmJiB0eXBlb2YgWE1MSHR0cFJlcXVlc3QhPSd1bmRlZmluZWQnKSB7XHJcblx0XHRcdFx0XHRcdHhtbGh0dHAgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKTtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdHJldHVybiB4bWxodHRwO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRcdCQuYWpheCh7XHJcblx0XHRcdFx0XHRcdHR5cGU6ICdHRVQnLFxyXG5cdFx0XHRcdFx0XHRkYXRhVHlwZTogJ2pzb24nLFxyXG5cdFx0XHRcdFx0XHRjYWNoZTogZmFsc2UsXHJcblx0XHRcdFx0XHRcdHVybDogJ2h0dHBzOi8vcGl4YWJheS5jb20vYXBpLz9rZXk9JyArIEFQSV9LRVkgKyAnJnE9JyArIHF1ZXJ5V29yZCArICcmcGFnZT0nICsgcGFnZSArICcmcGVyX3BhZ2U9JyArIHBlclBhZ2UgKyAnJmltYWdlX3R5cGU9cGhvdG8nLFxyXG5cdFx0XHRcdFx0XHRzdWNjZXNzOiBmdW5jdGlvbiAoZGF0YSkge1xyXG5cdFx0XHRcdFx0XHRcdGNvbnNvbGUubG9nKGRhdGEpO1xyXG5cclxuXHRcdFx0XHRcdFx0XHR2YXIgaHRtbCA9ICQoJyNpZGVhcy10bXBsJykuaHRtbCgpO1xyXG5cdFx0XHRcdFx0XHRcdHZhciBjb250ZW50ID0gdG1wbCggaHRtbCwge1xyXG5cdFx0XHRcdFx0XHRcdFx0ZGF0YTogZGF0YS5oaXRzXHJcblx0XHRcdFx0XHRcdFx0fSk7XHJcblxyXG5cdFx0XHRcdFx0XHRcdCQoJy5ncmlkJykucmVtb3ZlKCk7XHJcblx0XHRcdFx0XHRcdFx0JCgnLmlkZWFzIC53cmFwcGVyJykuYXBwZW5kKGNvbnRlbnQpO1xyXG5cclxuXHRcdFx0XHRcdFx0XHQkKCcuZ3JpZCcpLmlzb3RvcGUoe1xyXG5cdFx0XHRcdFx0XHRcdFx0aXRlbVNlbGVjdG9yOiAnLmdyaWQtaXRlbScsXHJcblx0XHRcdFx0XHRcdFx0XHRsYXlvdXRNb2RlOiAnbWFzb25yeScsXHJcblx0XHRcdFx0XHRcdFx0XHRtYXNvbnJ5OiB7XHJcblx0XHRcdFx0XHRcdFx0XHRcdGd1dHRlcjogMjBcclxuXHRcdFx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0XHR9KTtcclxuXHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0fSk7XHJcblx0XHRcdFx0fVxyXG5cdFx0fVxyXG5cdFx0XHJcblx0XHQkKCcuc2VhcmNoX19idXR0b24nKS5vbignY2xpY2snLCBmdW5jdGlvbihlKSB7XHJcblx0XHRcdGUucHJldmVudERlZmF1bHQoKTtcclxuXHRcdFx0dmFyIHF1ZXJ5ID0gJCgnLnNlYXJjaF9faW5wdXQnKTtcclxuXHRcdFx0cmVuZGVySW1hZ2VzKGVuY29kZVVSSUNvbXBvbmVudCggcXVlcnkudmFsKCkgKSk7XHJcblx0XHRcdHF1ZXJ5LnZhbCgnJyk7XHJcblx0XHR9KTtcclxuXHJcblx0XHRyZW5kZXJJbWFnZXMocXVlcnlXb3JkKTtcclxuXHR9KTtcclxuXHJcbn0pKGpRdWVyeSk7Il0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9
